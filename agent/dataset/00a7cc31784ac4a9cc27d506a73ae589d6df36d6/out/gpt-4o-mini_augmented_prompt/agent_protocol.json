{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java\n+++ quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java\n@@ -134,7 +134,7 @@\n         if (sslFilter != null) {\n-            sslFilter.setUseClientMode(true);\n+            sslFilter.setUseClientMode();\n         }\n     }\n \n--- quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java\n+++ quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java\n@@ -193,7 +193,7 @@\n         if (sslFilter != null) {\n-            sslFilter.setUseClientMode(true);\n+            sslFilter.setUseClientMode();\n         }\n     }\n \n--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -42,7 +42,7 @@\n     public SSLFilter(SSLContext sslContext) {\n         super(sslContext);\n     }\n-    \n+\n     public void setUseClientMode(boolean mode) {\n         // Implementation\n     }\n@@ -77,7 +77,7 @@\n     public void initiateHandshake(IoSession session) {\n         // Implementation\n     }\n-    \n+\n     public static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n }\n \n--- quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n+++ quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n@@ -64,7 +64,7 @@\n         if (sslFilter != null) {\n-            sslFilter.initiateHandshake(session);\n+            sslFilter.initiateHandshake();\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nquickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java!\nMake extra sure the indentation is correct.\nquickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java does not contain these 5 exact lines in a row:\n```\nif (sslFilter != null) {\nsslFilter.setUseClientMode(true);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nquickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java!\nMake extra sure the indentation is correct.\nquickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java does not contain these 5 exact lines in a row:\n```\nif (sslFilter != null) {\nsslFilter.setUseClientMode(true);\n}\n}\n```",
            "span_id": 15486699840961106377
        },
        {
            "input": "```diff\n--- quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java\n+++ quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java\n@@ -134,7 +134,7 @@\n         if (sslFilter != null) {\n-            sslFilter.setUseClientMode(false);\n+            sslFilter.setUseClientMode();\n         }\n     }\n \n--- quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java\n+++ quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java\n@@ -195,7 +195,7 @@\n         if (sslFilter != null) {\n-            sslFilter.setUseClientMode(true);\n+            sslFilter.setUseClientMode();\n         }\n     }\n \n--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     public SSLFilter(SSLContext sslContext) {\n         super(sslContext);\n     }\n-    \n+\n     public void setUseClientMode(boolean mode) {\n         // Implementation\n     }\n@@ -78,7 +78,7 @@\n     public void initiateHandshake(IoSession session) {\n         // Implementation\n     }\n-    \n+\n     public static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n }\n \n--- quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n+++ quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n@@ -65,7 +65,7 @@\n         if (sslFilter != null) {\n-            sslFilter.initiateHandshake(session);\n+            sslFilter.initiateHandshake();\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.acceptor;\n\nimport org.apache.mina.core.buffer.IoBuffer;\nimport org.apache.mina.core.buffer.SimpleBufferAllocator;\nimport org.apache.mina.core.service.IoAcceptor;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport quickfix.Acceptor;\nimport quickfix.Application;\nimport quickfix.ConfigError;\nimport quickfix.DefaultSessionFactory;\nimport quickfix.FieldConvertError;\nimport quickfix.LogFactory;\nimport quickfix.MessageFactory;\nimport quickfix.MessageStoreFactory;\nimport quickfix.RuntimeError;\nimport quickfix.ScreenLogFactory;\nimport quickfix.Session;\nimport quickfix.SessionFactory;\nimport quickfix.SessionID;\nimport quickfix.SessionSettings;\nimport quickfix.mina.CompositeIoFilterChainBuilder;\nimport quickfix.mina.EventHandlingStrategy;\nimport quickfix.mina.NetworkingOptions;\nimport quickfix.mina.ProtocolFactory;\nimport quickfix.mina.SessionConnector;\nimport quickfix.mina.message.FIXProtocolCodecFactory;\nimport quickfix.mina.ssl.SSLConfig;\nimport quickfix.mina.ssl.SSLContextFactory;\nimport quickfix.mina.ssl.SSLFilter;\nimport quickfix.mina.ssl.SSLSupport;\n\nimport javax.net.ssl.SSLContext;\nimport java.io.IOException;\nimport java.net.SocketAddress;\nimport java.security.GeneralSecurityException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Abstract base class for socket acceptors.\n */\npublic abstract class AbstractSocketAcceptor extends SessionConnector implements Acceptor {\n    private final Map<SocketAddress, AcceptorSessionProvider> sessionProviders = new HashMap<>();\n    private final SessionFactory sessionFactory;\n    private final Map<SocketAddress, AcceptorSocketDescriptor> socketDescriptorForAddress = new HashMap<>();\n    private final ConcurrentMap<AcceptorSocketDescriptor, IoAcceptor> ioAcceptors = new ConcurrentHashMap<>();\n\n    protected AbstractSocketAcceptor(SessionSettings settings, SessionFactory sessionFactory)\n            throws ConfigError {\n        super(settings, sessionFactory);\n        IoBuffer.setAllocator(new SimpleBufferAllocator());\n        IoBuffer.setUseDirectBuffer(false);\n        this.sessionFactory = sessionFactory;\n    }\n\n    protected AbstractSocketAcceptor(Application application,\n            MessageStoreFactory messageStoreFactory, SessionSettings settings,\n            MessageFactory messageFactory) throws ConfigError {\n        this(application, messageStoreFactory, settings, new ScreenLogFactory(settings),\n                messageFactory);\n    }\n\n    protected AbstractSocketAcceptor(Application application,\n            MessageStoreFactory messageStoreFactory, SessionSettings settings,\n            LogFactory logFactory, MessageFactory messageFactory) throws ConfigError {\n        this(settings, new DefaultSessionFactory(application, messageStoreFactory, logFactory,\n                messageFactory));\n    }\n\n    // TODO SYNC Does this method really need synchronization?\n    protected synchronized void startAcceptingConnections() throws ConfigError {\n\n        boolean continueInitOnError = isContinueInitOnError();\n        createSessions(getSettings(), continueInitOnError);\n        startSessionTimer();\n\n        SocketAddress address = null;\n        for (AcceptorSocketDescriptor socketDescriptor : socketDescriptorForAddress.values()) {\n            try {\n                address = socketDescriptor.getAddress();\n                IoAcceptor ioAcceptor = getIoAcceptor(socketDescriptor);\n                CompositeIoFilterChainBuilder ioFilterChainBuilder = new CompositeIoFilterChainBuilder(getIoFilterChainBuilder());\n\n                if (socketDescriptor.isUseSSL()) {\n                    installSSL(socketDescriptor, ioFilterChainBuilder);\n                }\n\n                ioFilterChainBuilder.addLast(FIXProtocolCodecFactory.FILTER_NAME,\n                        new ProtocolCodecFilter(new FIXProtocolCodecFactory()));\n\n                ioAcceptor.setFilterChainBuilder(ioFilterChainBuilder);\n                ioAcceptor.setCloseOnDeactivation(false);\n                ioAcceptor.bind(socketDescriptor.getAddress());\n                log.info(\"Listening for connections at {} for session(s) {}\", address, socketDescriptor.getAcceptedSessions().keySet());\n            } catch (IOException | GeneralSecurityException | ConfigError e) {\n                if (continueInitOnError) {\n                    log.warn(\"error during session initialization for session(s) {}, continuing...\", socketDescriptor.getAcceptedSessions().keySet(), e);\n                } else {\n                    log.error(\"Cannot start acceptor session for {}, error: {}\", address, e);\n                    throw new RuntimeError(e);\n                }\n            }\n        }\n    }\n\n    private void installSSL(AcceptorSocketDescriptor descriptor,\n            CompositeIoFilterChainBuilder ioFilterChainBuilder) throws GeneralSecurityException {\n        log.info(\"Installing SSL filter for {}\", descriptor.getAddress());\n        SSLConfig sslConfig = descriptor.getSslConfig();\n        SSLContext sslContext = SSLContextFactory.getInstance(sslConfig);\n        SSLFilter sslFilter = new SSLFilter(sslContext);\nsslFilter.setUseClientMode();\n        sslFilter.setNeedClientAuth(sslConfig.isNeedClientAuth());\n        sslFilter.setCipherSuites(sslConfig.getEnabledCipherSuites() != null ? sslConfig.getEnabledCipherSuites()\n                : SSLSupport.getDefaultCipherSuites(sslContext));\n        sslFilter.setEnabledProtocols(sslConfig.getEnabledProtocols() != null ? sslConfig.getEnabledProtocols()\n                : SSLSupport.getSupportedProtocols(sslContext));\n        ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);\n    }\n\n    private IoAcceptor getIoAcceptor(AcceptorSocketDescriptor socketDescriptor) throws ConfigError {\n        int transportType = ProtocolFactory.getAddressTransportType(socketDescriptor.getAddress());\n        AcceptorSessionProvider sessionProvider = sessionProviders.\n                computeIfAbsent(socketDescriptor.getAddress(),\n                        k -> new DefaultAcceptorSessionProvider(socketDescriptor.getAcceptedSessions()));\n\n        IoAcceptor ioAcceptor = ioAcceptors.get(socketDescriptor);\n        if (ioAcceptor == null) {\n            ioAcceptor = ProtocolFactory.createIoAcceptor(transportType);\n            try {\n                SessionSettings settings = getSettings();\n                NetworkingOptions networkingOptions = new NetworkingOptions(settings.getDefaultProperties());\n                networkingOptions.apply(ioAcceptor);\n                ioAcceptor.setHandler(new AcceptorIoHandler(sessionProvider, settings, networkingOptions, getEventHandlingStrategy()));\n            } catch (FieldConvertError e) {\n                throw new ConfigError(e);\n            }\n            ioAcceptors.put(socketDescriptor, ioAcceptor);\n        }\n        return ioAcceptor;\n    }\n\n    private void setupSession(SessionSettings settings, SessionID sessionID, boolean isTemplate, Map<SessionID, Session> allSessions)\n            throws ConfigError, FieldConvertError {\n        int acceptTransportType = ProtocolFactory.SOCKET;\n        if (settings.isSetting(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PROTOCOL)) {\n            try {\n                acceptTransportType = ProtocolFactory.getTransportType(settings.getString(\n                        sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PROTOCOL));\n            } catch (IllegalArgumentException e) {\n                // Unknown transport type\n                throw new ConfigError(e);\n            }\n        }\n\n        boolean useSSL = false;\n        SSLConfig sslConfig = null;\n        if (getSettings().isSetting(sessionID, SSLSupport.SETTING_USE_SSL)\n                && getSettings().getBool(sessionID, SSLSupport.SETTING_USE_SSL)) {\n            if (acceptTransportType == ProtocolFactory.SOCKET) {\n                useSSL = true;\n                sslConfig = SSLSupport.getSslConfig(getSettings(), sessionID);\n            } else {\n                log.warn(\"SSL will not be enabled for transport type={}, session={}\", acceptTransportType, sessionID);\n            }\n        }\n\n        int acceptPort = (int) settings.getLong(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PORT);\n\n        String acceptHost = null;\n        if (settings.isSetting(sessionID, SETTING_SOCKET_ACCEPT_ADDRESS)) {\n            acceptHost = settings.getString(sessionID, SETTING_SOCKET_ACCEPT_ADDRESS);\n        }\n\n        SocketAddress acceptorAddress = ProtocolFactory.createSocketAddress(acceptTransportType,\n                acceptHost, acceptPort);\n\n        // Check for cached descriptor\n        AcceptorSocketDescriptor descriptor = socketDescriptorForAddress.get(acceptorAddress);\n        if (descriptor != null) {\n            if (descriptor.isUseSSL() != useSSL || !equals(sslConfig, descriptor.getSslConfig())) {\n                throw new ConfigError(\"Conflicting configurations of acceptor socket: \" + acceptorAddress);\n            }\n        } else {\n            descriptor = new AcceptorSocketDescriptor(acceptorAddress, useSSL, sslConfig);\n            socketDescriptorForAddress.put(acceptorAddress, descriptor);\n        }\n\n        if (!isTemplate) {\n            Session session = sessionFactory.create(sessionID, settings);\n            descriptor.acceptSession(session);\n            allSessions.put(sessionID, session);\n        }\n    }\n\n    private boolean equals(Object object1, Object object2) {\n        return object1 == null ? object2 == null : object1.equals(object2);\n    }\n\n    private void createSessions(SessionSettings settings, boolean continueInitOnError) throws ConfigError {\n        Map<SessionID, Session> allSessions = new HashMap<>();\n        for (Iterator<SessionID> i = settings.sectionIterator(); i.hasNext();) {\n            SessionID sessionID = i.next();\n            try {\n                String connectionType = null;\n                if (settings.isSetting(sessionID, SessionFactory.SETTING_CONNECTION_TYPE)) {\n                    connectionType = settings.getString(sessionID,\n                            SessionFactory.SETTING_CONNECTION_TYPE);\n                }\n\n                if (SessionFactory.ACCEPTOR_CONNECTION_TYPE.equals(connectionType)) {\n                    boolean isTemplate = false;\n                    if (settings.isSetting(sessionID, Acceptor.SETTING_ACCEPTOR_TEMPLATE)) {\n                        try {\n                            isTemplate = settings.getBool(sessionID, Acceptor.SETTING_ACCEPTOR_TEMPLATE);\n                        } catch (FieldConvertError | ConfigError ex) {\n                            // ignore and use default\n                        }\n                    }\n\n                    setupSession(settings, sessionID, isTemplate, allSessions);\n                }\n            } catch (Throwable t) {\n                if (continueInitOnError) {\n                    log.warn(\"error during session initialization for {}, continuing...\", sessionID, t);\n                } else {\n                    throw t instanceof ConfigError ? (ConfigError) t : new ConfigError(\n                            \"error during session initialization\", t);\n                }\n            }\n        }\n        setSessions(allSessions);\n\n        if (socketDescriptorForAddress.isEmpty()) {\n            throw new ConfigError(\"No acceptor sessions found in settings.\");\n        }\n    }\n\n    protected void stopAcceptingConnections() {\n        Iterator<IoAcceptor> ioIt = getEndpoints().iterator();\n        while (ioIt.hasNext()) {\n            IoAcceptor ioAcceptor = ioIt.next();\n            SocketAddress localAddress = ioAcceptor.getLocalAddress();\n            ioAcceptor.unbind();\n            closeManagedSessionsAndDispose(ioAcceptor, true, log);\n            log.info(\"No longer accepting connections on {}\", localAddress);\n            ioIt.remove();\n        }\n    }\n\n    private static class AcceptorSocketDescriptor {\n        private final SocketAddress address;\n        private final boolean useSSL;\n        private final SSLConfig sslConfig;\n        private final Map<SessionID, Session> acceptedSessions = new HashMap<>();\n\n        public AcceptorSocketDescriptor(SocketAddress address, boolean useSSL, SSLConfig sslConfig) {\n            this.address = address;\n            this.useSSL = useSSL;\n            this.sslConfig = sslConfig;\n        }\n\n        public void acceptSession(Session session) {\n            acceptedSessions.put(session.getSessionID(), session);\n        }\n\n        public Map<SessionID, Session> getAcceptedSessions() {\n            return Collections.unmodifiableMap(acceptedSessions);\n        }\n\n        public SocketAddress getAddress() {\n            return address;\n        }\n\n        public boolean isUseSSL() {\n            return useSSL;\n        }\n\n        public SSLConfig getSslConfig() {\n            return sslConfig;\n        }\n    }\n\n    public Collection<IoAcceptor> getEndpoints() {\n        return ioAcceptors.values();\n    }\n\n    public Map<SessionID, SocketAddress> getAcceptorAddresses() {\n        Map<SessionID, SocketAddress> sessionIdToAddressMap = new HashMap<>();\n        for (AcceptorSocketDescriptor descriptor : socketDescriptorForAddress.values()) {\n            for (SessionID sessionID : descriptor.getAcceptedSessions().keySet()) {\n                sessionIdToAddressMap.put(sessionID, descriptor.getAddress());\n            }\n        }\n        return sessionIdToAddressMap;\n    }\n\n    public void setSessionProvider(SocketAddress address, AcceptorSessionProvider provider) {\n        sessionProviders.put(address, provider);\n    }\n\n    static class StaticAcceptorSessionProvider implements AcceptorSessionProvider {\n        private final Map<SessionID, Session> acceptorSessions;\n\n        public StaticAcceptorSessionProvider(final Map<SessionID, Session> acceptorSessions) {\n            this.acceptorSessions = acceptorSessions;\n        }\n\n        public Session getSession(SessionID sessionID, SessionConnector connector) {\n            return acceptorSessions.get(sessionID);\n        }\n    }\n\n    public int getQueueSize() {\n        final EventHandlingStrategy ehs = getEventHandlingStrategy();\n        return ehs == null ? 0 : ehs.getQueueSize();\n    }\n\n    protected abstract EventHandlingStrategy getEventHandlingStrategy() ;\n\n    private class DefaultAcceptorSessionProvider implements AcceptorSessionProvider {\n\n        private final Map<SessionID, Session> acceptorSessions;\n\n        public DefaultAcceptorSessionProvider(Map<SessionID, Session> acceptorSessions) {\n            this.acceptorSessions = acceptorSessions;\n        }\n\n        public Session getSession(SessionID sessionID, SessionConnector ignored) {\n            Session session = acceptorSessions.get(sessionID);\n            if (session == null) {\n                SessionID reduced = reduceSessionID(sessionID);\n                session = acceptorSessions.get(reduced);\n            }\n            return session;\n        }\n\n        /**\n         * Remove the extra fields added to the session ID in QF-272.\n         */\n        private SessionID reduceSessionID(SessionID sessionID) {\n            // Acceptors don't use qualifiers.\n            return new SessionID(sessionID.getBeginString(), sessionID.getSenderCompID(),\n                    sessionID.getTargetCompID());\n        }\n    }\n\n}",
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.filterchain.IoFilterChainBuilder;\nimport org.apache.mina.core.future.ConnectFuture;\nimport org.apache.mina.core.service.IoConnector;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.proxy.ProxyConnector;\nimport org.apache.mina.transport.socket.SocketConnector;\nimport quickfix.ConfigError;\nimport quickfix.LogUtil;\nimport quickfix.Session;\nimport quickfix.SessionID;\nimport quickfix.SessionSettings;\nimport quickfix.SystemTime;\nimport quickfix.mina.CompositeIoFilterChainBuilder;\nimport quickfix.mina.EventHandlingStrategy;\nimport quickfix.mina.NetworkingOptions;\nimport quickfix.mina.ProtocolFactory;\nimport quickfix.mina.SessionConnector;\nimport quickfix.mina.message.FIXProtocolCodecFactory;\nimport quickfix.mina.ssl.SSLConfig;\nimport quickfix.mina.ssl.SSLContextFactory;\nimport quickfix.mina.ssl.SSLFilter;\nimport quickfix.mina.ssl.SSLSupport;\n\nimport javax.net.ssl.SSLContext;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class IoSessionInitiator {\n    private final static long CONNECT_POLL_TIMEOUT = 2000L;\n    private final ScheduledExecutorService executor;\n    private final ConnectTask reconnectTask;\n    private final Logger log = LoggerFactory.getLogger(getClass());\n\n    private Future<?> reconnectFuture;\n\n    public IoSessionInitiator(Session fixSession, SocketAddress[] socketAddresses,\n            SocketAddress localAddress, int[] reconnectIntervalInSeconds,\n            ScheduledExecutorService executor, SessionSettings sessionSettings, NetworkingOptions networkingOptions,\n            EventHandlingStrategy eventHandlingStrategy,\n            IoFilterChainBuilder userIoFilterChainBuilder, boolean sslEnabled, SSLConfig sslConfig,\n            String proxyType, String proxyVersion, String proxyHost, int proxyPort,\n            String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation) throws ConfigError {\n        this.executor = executor;\n        final long[] reconnectIntervalInMillis = new long[reconnectIntervalInSeconds.length];\n        for (int ii = 0; ii != reconnectIntervalInSeconds.length; ++ii) {\n            reconnectIntervalInMillis[ii] = reconnectIntervalInSeconds[ii] * 1000L;\n        }\n        try {\n            reconnectTask = new ConnectTask(sslEnabled, socketAddresses, localAddress,\n                    userIoFilterChainBuilder, fixSession, reconnectIntervalInMillis,\n                    sessionSettings, networkingOptions, eventHandlingStrategy, sslConfig,\n                    proxyType, proxyVersion, proxyHost, proxyPort, proxyUser, proxyPassword, proxyDomain, proxyWorkstation, log);\n        } catch (GeneralSecurityException e) {\n            throw new ConfigError(e);\n        }\n\n        fixSession.getLog().onEvent(\"Configured socket addresses for session: \" + Arrays.asList(socketAddresses));\n    }\n\n    private static class ConnectTask implements Runnable {\n        private final boolean sslEnabled;\n        private final SocketAddress[] socketAddresses;\n        private final SocketAddress localAddress;\n        private final IoFilterChainBuilder userIoFilterChainBuilder;\n        private IoConnector ioConnector;\n        private final Session fixSession;\n        private final long[] reconnectIntervalInMillis;\n        private final SessionSettings sessionSettings;\n        private final NetworkingOptions networkingOptions;\n        private final EventHandlingStrategy eventHandlingStrategy;\n        private final SSLConfig sslConfig;\n        private final Logger log;\n\n        private IoSession ioSession;\n        private long lastReconnectAttemptTime;\n        private long lastConnectTime;\n        private int nextSocketAddressIndex;\n        private int connectionFailureCount;\n        private ConnectFuture connectFuture;\n\n        private final String proxyType;\n        private final String proxyVersion;\n        private final String proxyHost;\n        private final int proxyPort;\n        private final String proxyUser;\n        private final String proxyPassword;\n        private final String proxyDomain;\n        private final String proxyWorkstation;\n\n        public ConnectTask(boolean sslEnabled, SocketAddress[] socketAddresses,\n                SocketAddress localAddress, IoFilterChainBuilder userIoFilterChainBuilder,\n                Session fixSession, long[] reconnectIntervalInMillis,\n                SessionSettings sessionSettings, NetworkingOptions networkingOptions, EventHandlingStrategy eventHandlingStrategy, SSLConfig sslConfig,\n                String proxyType, String proxyVersion, String proxyHost,\n                int proxyPort, String proxyUser, String proxyPassword, String proxyDomain,\n                String proxyWorkstation, Logger log) throws ConfigError, GeneralSecurityException {\n            this.sslEnabled = sslEnabled;\n            this.socketAddresses = socketAddresses;\n            this.localAddress = localAddress;\n            this.userIoFilterChainBuilder = userIoFilterChainBuilder;\n            this.fixSession = fixSession;\n            this.reconnectIntervalInMillis = reconnectIntervalInMillis;\n            this.sessionSettings = sessionSettings;\n            this.networkingOptions = networkingOptions;\n            this.eventHandlingStrategy = eventHandlingStrategy;\n            this.sslConfig = sslConfig;\n            this.log = log;\n\n            this.proxyType = proxyType;\n            this.proxyVersion = proxyVersion;\n            this.proxyHost = proxyHost;\n            this.proxyPort = proxyPort;\n            this.proxyUser = proxyUser;\n            this.proxyPassword = proxyPassword;\n            this.proxyDomain = proxyDomain;\n            this.proxyWorkstation = proxyWorkstation;\n\n            setupIoConnector();\n        }\n\n        private void setupIoConnector() throws ConfigError, GeneralSecurityException {\n            final CompositeIoFilterChainBuilder ioFilterChainBuilder = new CompositeIoFilterChainBuilder(userIoFilterChainBuilder);\n\n            boolean hasProxy = proxyType != null && proxyPort > 0 && socketAddresses[nextSocketAddressIndex] instanceof InetSocketAddress;\n\n            SSLFilter sslFilter = null;\n            if (sslEnabled) {\n                sslFilter = installSslFilter(ioFilterChainBuilder, !hasProxy);\n            }\n\n            ioFilterChainBuilder.addLast(FIXProtocolCodecFactory.FILTER_NAME, new ProtocolCodecFilter(new FIXProtocolCodecFactory()));\n\n            IoConnector newConnector;\n            newConnector = ProtocolFactory.createIoConnector(socketAddresses[nextSocketAddressIndex]);\n            networkingOptions.apply(newConnector);\n            newConnector.setHandler(new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy));\n            newConnector.setFilterChainBuilder(ioFilterChainBuilder);\n\n            if (hasProxy) {\n                ProxyConnector proxyConnector = ProtocolFactory.createIoProxyConnector(\n                        (SocketConnector) newConnector,\n                        (InetSocketAddress) socketAddresses[nextSocketAddressIndex],\n                        new InetSocketAddress(proxyHost, proxyPort),\n                        proxyType, proxyVersion, proxyUser, proxyPassword, proxyDomain, proxyWorkstation\n                );\n\n                proxyConnector.setHandler(new InitiatorProxyIoHandler(\n                        new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy),\n                        sslFilter\n                ));\n\n                newConnector = proxyConnector;\n            }\n\n            if (ioConnector != null) {\n                SessionConnector.closeManagedSessionsAndDispose(ioConnector, true, log);\n            }\n            ioConnector = newConnector;\n        }\n\n        private SSLFilter installSslFilter(CompositeIoFilterChainBuilder ioFilterChainBuilder, boolean autoStart)\n                throws GeneralSecurityException {\n            final SSLContext sslContext = SSLContextFactory.getInstance(sslConfig);\n            final SSLFilter sslFilter = new SSLFilter(sslContext, autoStart);\n            sslFilter.setUseClientMode();\n            sslFilter.setCipherSuites(sslConfig.getEnabledCipherSuites() != null ? sslConfig.getEnabledCipherSuites()\n                    : SSLSupport.getDefaultCipherSuites(sslContext));\n            sslFilter.setEnabledProtocols(sslConfig.getEnabledProtocols() != null ? sslConfig.getEnabledProtocols()\n                    : SSLSupport.getSupportedProtocols(sslContext));\n            sslFilter.setUseSNI(sslConfig.isUseSNI());\n            ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);\n            return sslFilter;\n        }\n\n        @Override\n        public void run() {\n            resetIoConnector();\n            try {\n                if (connectFuture == null) {\n                    if (shouldReconnect()) {\n                        connect();\n                    }\n                } else {\n                    pollConnectFuture();\n                }\n            } catch (Throwable e) {\n                LogUtil.logThrowable(fixSession.getLog(), \"Exception during ConnectTask run\", e);\n            }\n        }\n\n        private void connect() {\n            try {\n                lastReconnectAttemptTime = SystemTime.currentTimeMillis();\n                SocketAddress nextSocketAddress = getNextSocketAddress();\n                if (localAddress == null) {\n                    connectFuture = ioConnector.connect(nextSocketAddress);\n                } else {\n                    // QFJ-482\n                    connectFuture = ioConnector.connect(nextSocketAddress, localAddress);\n                }\n                pollConnectFuture();\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void pollConnectFuture() {\n            try {\n                connectFuture.awaitUninterruptibly(CONNECT_POLL_TIMEOUT);\n                if (connectFuture.getSession() != null) {\n                    ioSession = connectFuture.getSession();\n                    connectionFailureCount = 0;\n                    nextSocketAddressIndex = 0;\n                    lastConnectTime = System.currentTimeMillis();\n                    connectFuture = null;\n                } else {\n                    fixSession.getLog().onEvent(\n                            \"Pending connection not established after \"\n                                    + (System.currentTimeMillis() - lastReconnectAttemptTime)\n                                    + \" ms.\");\n                }\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void handleConnectException(Throwable e) {\n            ++connectionFailureCount;\n            SocketAddress socketAddress = socketAddresses[getCurrentSocketAddressIndex()];\n            while (e.getCause() != null) {\n                e = e.getCause();\n            }\n            final String nextRetryMsg = \" (Next retry in \" + computeNextRetryConnectDelay() + \" milliseconds)\";\n            if (e instanceof IOException) {\n                fixSession.getLog().onErrorEvent(e.getClass().getName() + \" during connection to \" + socketAddress + \": \" + e + nextRetryMsg);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), (IOException) e);\n            } else {\n                LogUtil.logThrowable(fixSession.getLog(), \"Exception during connection to \" + socketAddress + nextRetryMsg, e);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), new Exception(e));\n            }\n            connectFuture = null;\n        }\n\n        private SocketAddress getNextSocketAddress() {\n            SocketAddress socketAddress = socketAddresses[nextSocketAddressIndex];\n\n            // Recreate socket address to avoid cached address resolution\n            if (socketAddress instanceof InetSocketAddress) {\n                InetSocketAddress inetAddr = (InetSocketAddress) socketAddress;\n                socketAddress = new InetSocketAddress(inetAddr.getHostName(), inetAddr.getPort());\n                socketAddresses[nextSocketAddressIndex] = socketAddress;\n            }\n            nextSocketAddressIndex = (nextSocketAddressIndex + 1) % socketAddresses.length;\n            return socketAddress;\n        }\n\n        private int getCurrentSocketAddressIndex() {\n            return (nextSocketAddressIndex + socketAddresses.length - 1) % socketAddresses.length;\n        }\n\n        private boolean shouldReconnect() {\n            return (ioSession == null || !ioSession.isConnected()) && isTimeForReconnect()\n                    && (fixSession.isEnabled() && fixSession.isSessionTime());\n        }\n\n        private long computeNextRetryConnectDelay() {\n            int index = connectionFailureCount - 1;\n            if (index < 0)\n                index = 0;\n            long millis;\n            if (index >= reconnectIntervalInMillis.length) {\n                millis = reconnectIntervalInMillis[reconnectIntervalInMillis.length - 1];\n            } else {\n                millis = reconnectIntervalInMillis[index];\n            }\n            return millis;\n        }\n\n        private boolean isTimeForReconnect() {\n            return SystemTime.currentTimeMillis() - lastReconnectAttemptTime >= computeNextRetryConnectDelay();\n        }\n\n        // TODO JMX Expose reconnect property\n\n        @SuppressWarnings(\"unused\") // exposed via JMX\n        public synchronized int getConnectionFailureCount() {\n            return connectionFailureCount;\n        }\n\n        @SuppressWarnings(\"unused\") // exposed via JMX\n        public synchronized long getLastReconnectAttemptTime() {\n            return lastReconnectAttemptTime;\n        }\n\n        @SuppressWarnings(\"unused\") // exposed via JMX\n        public synchronized long getLastConnectTime() {\n            return lastConnectTime;\n        }\n\n        public Session getFixSession() {\n            return fixSession;\n        }\n\n        private void resetIoConnector() {\n            if (ioSession != null && Boolean.TRUE.equals(ioSession.getAttribute(SessionConnector.QFJ_RESET_IO_CONNECTOR))) {\n                try {\n                    setupIoConnector();\n                    if (connectFuture != null) {\n                        connectFuture.cancel();\n                    }\n                    connectFuture = null;\n                    if (!ioSession.isClosing()) {\n                        ioSession.closeNow();\n                    }\n                    ioSession = null;\n                } catch (Throwable e) {\n                    LogUtil.logThrowable(fixSession.getLog(), \"Exception during resetIoConnector call\", e);\n                }\n            }\n        }\n    }\n\n    synchronized void start() {\n        if (reconnectFuture == null) {\n            // The following logon reenabled the session. The actual logon will take\n            // place as a side-effect of the session timer task (not the reconnect task).\n            reconnectTask.getFixSession().logon(); // only enables the session\n            reconnectFuture = executor\n                    .scheduleWithFixedDelay(reconnectTask, 0, 1, TimeUnit.SECONDS);\n        }\n    }\n\n    synchronized void stop() {\n        if (reconnectFuture != null) {\n            reconnectFuture.cancel(true);\n            reconnectFuture = null;\n        }\n        SessionConnector.closeManagedSessionsAndDispose(reconnectTask.ioConnector, true, log);\n    }\n\n    public SessionID getSessionID() {\n        return reconnectTask.fixSession.getSessionID();\n    }\n\n    public SocketAddress getLocalAddress() {\n        return reconnectTask.localAddress;\n    }\n\n    public SocketAddress[] getSocketAddresses() {\n        return Arrays.copyOf(reconnectTask.socketAddresses, reconnectTask.socketAddresses.length);\n    }\n}\n",
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(session);\n+            sslFilter.initiateHandshake();\n        }\n    }\n}\n"
                },
                "compile_error_details": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": {
                        "65": {
                            "lines": [
                                {
                                    "line_no": 64,
                                    "content": "        if (this.sslFilter != null) {"
                                },
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(session);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake();"
                                }
                            ],
                            "error_texts": [
                                "[65,1] not a statement\n"
                            ]
                        },
                        "66": {
                            "lines": [
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(session);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake();"
                                },
                                {
                                    "line_no": 67,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[66,1] not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 5966174368121476193
        },
        {
            "input": "```diff\n--- quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n+++ quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n@@ -65,7 +65,7 @@\n         if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(session);\n+            sslFilter.initiateHandshake(ioSession);\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake();\n        }\n    }\n}\n"
                },
                "compile_error_details": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": {
                        "65": {
                            "lines": [
                                {
                                    "line_no": 64,
                                    "content": "        if (this.sslFilter != null) {"
                                },
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake();"
                                }
                            ],
                            "error_texts": [
                                "[65,1] not a statement\n"
                            ]
                        },
                        "66": {
                            "lines": [
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake();"
                                },
                                {
                                    "line_no": 67,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[66,1] not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 10373849766931089897
        },
        {
            "input": "```diff\n--- quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n+++ quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n@@ -65,7 +65,7 @@\n         if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake();\n+            sslFilter.initiateHandshake(ioSession);\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake(ioSession);\n        }\n    }\n}\n"
                },
                "compile_error_details": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": {
                        "65": {
                            "lines": [
                                {
                                    "line_no": 64,
                                    "content": "        if (this.sslFilter != null) {"
                                },
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake(ioSession);"
                                }
                            ],
                            "error_texts": [
                                "[65,1] not a statement\n"
                            ]
                        },
                        "66": {
                            "lines": [
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 67,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[66,1] not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 14316551218426728079
        },
        {
            "input": "```diff\n--- quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n+++ quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n@@ -65,7 +65,7 @@\n         if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake();\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake();\n        }\n    }\n}\n"
                },
                "compile_error_details": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": {
                        "65": {
                            "lines": [
                                {
                                    "line_no": 64,
                                    "content": "        if (this.sslFilter != null) {"
                                },
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake();"
                                }
                            ],
                            "error_texts": [
                                "[65,1] not a statement\n"
                            ]
                        },
                        "66": {
                            "lines": [
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake();"
                                },
                                {
                                    "line_no": 67,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[66,1] not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 4198813206758860972
        },
        {
            "input": "```diff\n--- quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n+++ quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n@@ -65,7 +65,7 @@\n         if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake();\n+            sslFilter.initiateHandshake(ioSession);\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake(ioSession);\n        }\n    }\n}\n"
                },
                "compile_error_details": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": {
                        "65": {
                            "lines": [
                                {
                                    "line_no": 64,
                                    "content": "        if (this.sslFilter != null) {"
                                },
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake(ioSession);"
                                }
                            ],
                            "error_texts": [
                                "[65,1] not a statement\n"
                            ]
                        },
                        "66": {
                            "lines": [
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 67,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[66,1] not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 4223052043184671368
        },
        {
            "input": "```diff\n--- quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n+++ quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java\n@@ -65,7 +65,7 @@\n         if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake();\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake();\n        }\n    }\n}\n"
                },
                "compile_error_details": {
                    "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java": {
                        "65": {
                            "lines": [
                                {
                                    "line_no": 64,
                                    "content": "        if (this.sslFilter != null) {"
                                },
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake();"
                                }
                            ],
                            "error_texts": [
                                "[65,1] not a statement\n"
                            ]
                        },
                        "66": {
                            "lines": [
                                {
                                    "line_no": 65,
                                    "content": "-            sslFilter.initiateHandshake(ioSession);"
                                },
                                {
                                    "line_no": 66,
                                    "content": "+            sslFilter.initiateHandshake();"
                                },
                                {
                                    "line_no": 67,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[66,1] not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 1911711592332847480
        }
    ],
    "read_file": [
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.acceptor;\n\nimport org.apache.mina.core.buffer.IoBuffer;\nimport org.apache.mina.core.buffer.SimpleBufferAllocator;\nimport org.apache.mina.core.service.IoAcceptor;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport quickfix.Acceptor;\nimport quickfix.Application;\nimport quickfix.ConfigError;\nimport quickfix.DefaultSessionFactory;\nimport quickfix.FieldConvertError;\nimport quickfix.LogFactory;\nimport quickfix.MessageFactory;\nimport quickfix.MessageStoreFactory;\nimport quickfix.RuntimeError;\nimport quickfix.ScreenLogFactory;\nimport quickfix.Session;\nimport quickfix.SessionFactory;\nimport quickfix.SessionID;\nimport quickfix.SessionSettings;\nimport quickfix.mina.CompositeIoFilterChainBuilder;\nimport quickfix.mina.EventHandlingStrategy;\nimport quickfix.mina.NetworkingOptions;\nimport quickfix.mina.ProtocolFactory;\nimport quickfix.mina.SessionConnector;\nimport quickfix.mina.message.FIXProtocolCodecFactory;\nimport quickfix.mina.ssl.SSLConfig;\nimport quickfix.mina.ssl.SSLContextFactory;\nimport quickfix.mina.ssl.SSLFilter;\nimport quickfix.mina.ssl.SSLSupport;\n\nimport javax.net.ssl.SSLContext;\nimport java.io.IOException;\nimport java.net.SocketAddress;\nimport java.security.GeneralSecurityException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Abstract base class for socket acceptors.\n */\npublic abstract class AbstractSocketAcceptor extends SessionConnector implements Acceptor {\n    private final Map<SocketAddress, AcceptorSessionProvider> sessionProviders = new HashMap<>();\n    private final SessionFactory sessionFactory;\n    private final Map<SocketAddress, AcceptorSocketDescriptor> socketDescriptorForAddress = new HashMap<>();\n    private final ConcurrentMap<AcceptorSocketDescriptor, IoAcceptor> ioAcceptors = new ConcurrentHashMap<>();\n\n    protected AbstractSocketAcceptor(SessionSettings settings, SessionFactory sessionFactory)\n            throws ConfigError {\n        super(settings, sessionFactory);\n        IoBuffer.setAllocator(new SimpleBufferAllocator());\n        IoBuffer.setUseDirectBuffer(false);\n        this.sessionFactory = sessionFactory;\n    }\n\n    protected AbstractSocketAcceptor(Application application,\n            MessageStoreFactory messageStoreFactory, SessionSettings settings,\n            MessageFactory messageFactory) throws ConfigError {\n        this(application, messageStoreFactory, settings, new ScreenLogFactory(settings),\n                messageFactory);\n    }\n\n    protected AbstractSocketAcceptor(Application application,\n            MessageStoreFactory messageStoreFactory, SessionSettings settings,\n            LogFactory logFactory, MessageFactory messageFactory) throws ConfigError {\n        this(settings, new DefaultSessionFactory(application, messageStoreFactory, logFactory,\n                messageFactory));\n    }\n\n    // TODO SYNC Does this method really need synchronization?\n    protected synchronized void startAcceptingConnections() throws ConfigError {\n\n        boolean continueInitOnError = isContinueInitOnError();\n        createSessions(getSettings(), continueInitOnError);\n        startSessionTimer();\n\n        SocketAddress address = null;\n        for (AcceptorSocketDescriptor socketDescriptor : socketDescriptorForAddress.values()) {\n            try {\n                address = socketDescriptor.getAddress();\n                IoAcceptor ioAcceptor = getIoAcceptor(socketDescriptor);\n                CompositeIoFilterChainBuilder ioFilterChainBuilder = new CompositeIoFilterChainBuilder(getIoFilterChainBuilder());\n\n                if (socketDescriptor.isUseSSL()) {\n                    installSSL(socketDescriptor, ioFilterChainBuilder);\n                }\n\n                ioFilterChainBuilder.addLast(FIXProtocolCodecFactory.FILTER_NAME,\n                        new ProtocolCodecFilter(new FIXProtocolCodecFactory()));\n\n                ioAcceptor.setFilterChainBuilder(ioFilterChainBuilder);\n                ioAcceptor.setCloseOnDeactivation(false);\n                ioAcceptor.bind(socketDescriptor.getAddress());\n                log.info(\"Listening for connections at {} for session(s) {}\", address, socketDescriptor.getAcceptedSessions().keySet());\n            } catch (IOException | GeneralSecurityException | ConfigError e) {\n                if (continueInitOnError) {\n                    log.warn(\"error during session initialization for session(s) {}, continuing...\", socketDescriptor.getAcceptedSessions().keySet(), e);\n                } else {\n                    log.error(\"Cannot start acceptor session for {}, error: {}\", address, e);\n                    throw new RuntimeError(e);\n                }\n            }\n        }\n    }\n\n    private void installSSL(AcceptorSocketDescriptor descriptor,\n            CompositeIoFilterChainBuilder ioFilterChainBuilder) throws GeneralSecurityException {\n        log.info(\"Installing SSL filter for {}\", descriptor.getAddress());\n        SSLConfig sslConfig = descriptor.getSslConfig();\n        SSLContext sslContext = SSLContextFactory.getInstance(sslConfig);\n        SSLFilter sslFilter = new SSLFilter(sslContext);\n        sslFilter.setUseClientMode(false);\n        sslFilter.setNeedClientAuth(sslConfig.isNeedClientAuth());\n        sslFilter.setCipherSuites(sslConfig.getEnabledCipherSuites() != null ? sslConfig.getEnabledCipherSuites()\n                : SSLSupport.getDefaultCipherSuites(sslContext));\n        sslFilter.setEnabledProtocols(sslConfig.getEnabledProtocols() != null ? sslConfig.getEnabledProtocols()\n                : SSLSupport.getSupportedProtocols(sslContext));\n        ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);\n    }\n\n    private IoAcceptor getIoAcceptor(AcceptorSocketDescriptor socketDescriptor) throws ConfigError {\n        int transportType = ProtocolFactory.getAddressTransportType(socketDescriptor.getAddress());\n        AcceptorSessionProvider sessionProvider = sessionProviders.\n                computeIfAbsent(socketDescriptor.getAddress(),\n                        k -> new DefaultAcceptorSessionProvider(socketDescriptor.getAcceptedSessions()));\n\n        IoAcceptor ioAcceptor = ioAcceptors.get(socketDescriptor);\n        if (ioAcceptor == null) {\n            ioAcceptor = ProtocolFactory.createIoAcceptor(transportType);\n            try {\n                SessionSettings settings = getSettings();\n                NetworkingOptions networkingOptions = new NetworkingOptions(settings.getDefaultProperties());\n                networkingOptions.apply(ioAcceptor);\n                ioAcceptor.setHandler(new AcceptorIoHandler(sessionProvider, settings, networkingOptions, getEventHandlingStrategy()));\n            } catch (FieldConvertError e) {\n                throw new ConfigError(e);\n            }\n            ioAcceptors.put(socketDescriptor, ioAcceptor);\n        }\n        return ioAcceptor;\n    }\n\n    private void setupSession(SessionSettings settings, SessionID sessionID, boolean isTemplate, Map<SessionID, Session> allSessions)\n            throws ConfigError, FieldConvertError {\n        int acceptTransportType = ProtocolFactory.SOCKET;\n        if (settings.isSetting(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PROTOCOL)) {\n            try {\n                acceptTransportType = ProtocolFactory.getTransportType(settings.getString(\n                        sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PROTOCOL));\n            } catch (IllegalArgumentException e) {\n                // Unknown transport type\n                throw new ConfigError(e);\n            }\n        }\n\n        boolean useSSL = false;\n        SSLConfig sslConfig = null;\n        if (getSettings().isSetting(sessionID, SSLSupport.SETTING_USE_SSL)\n                && getSettings().getBool(sessionID, SSLSupport.SETTING_USE_SSL)) {\n            if (acceptTransportType == ProtocolFactory.SOCKET) {\n                useSSL = true;\n                sslConfig = SSLSupport.getSslConfig(getSettings(), sessionID);\n            } else {\n                log.warn(\"SSL will not be enabled for transport type={}, session={}\", acceptTransportType, sessionID);\n            }\n        }\n\n        int acceptPort = (int) settings.getLong(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PORT);\n\n        String acceptHost = null;\n        if (settings.isSetting(sessionID, SETTING_SOCKET_ACCEPT_ADDRESS)) {\n            acceptHost = settings.getString(sessionID, SETTING_SOCKET_ACCEPT_ADDRESS);\n        }\n\n        SocketAddress acceptorAddress = ProtocolFactory.createSocketAddress(acceptTransportType,\n                acceptHost, acceptPort);\n\n        // Check for cached descriptor\n        AcceptorSocketDescriptor descriptor = socketDescriptorForAddress.get(acceptorAddress);\n        if (descriptor != null) {\n            if (descriptor.isUseSSL() != useSSL || !equals(sslConfig, descriptor.getSslConfig())) {\n                throw new ConfigError(\"Conflicting configurations of acceptor socket: \" + acceptorAddress);\n            }\n        } else {\n            descriptor = new AcceptorSocketDescriptor(acceptorAddress, useSSL, sslConfig);\n            socketDescriptorForAddress.put(acceptorAddress, descriptor);\n        }\n\n        if (!isTemplate) {\n            Session session = sessionFactory.create(sessionID, settings);\n            descriptor.acceptSession(session);\n            allSessions.put(sessionID, session);\n        }\n    }\n\n    private boolean equals(Object object1, Object object2) {\n        return object1 == null ? object2 == null : object1.equals(object2);\n    }\n\n    private void createSessions(SessionSettings settings, boolean continueInitOnError) throws ConfigError {\n        Map<SessionID, Session> allSessions = new HashMap<>();\n        for (Iterator<SessionID> i = settings.sectionIterator(); i.hasNext();) {\n            SessionID sessionID = i.next();\n            try {\n                String connectionType = null;\n                if (settings.isSetting(sessionID, SessionFactory.SETTING_CONNECTION_TYPE)) {\n                    connectionType = settings.getString(sessionID,\n                            SessionFactory.SETTING_CONNECTION_TYPE);\n                }\n\n                if (SessionFactory.ACCEPTOR_CONNECTION_TYPE.equals(connectionType)) {\n                    boolean isTemplate = false;\n                    if (settings.isSetting(sessionID, Acceptor.SETTING_ACCEPTOR_TEMPLATE)) {\n                        try {\n                            isTemplate = settings.getBool(sessionID, Acceptor.SETTING_ACCEPTOR_TEMPLATE);\n                        } catch (FieldConvertError | ConfigError ex) {\n                            // ignore and use default\n                        }\n                    }\n\n                    setupSession(settings, sessionID, isTemplate, allSessions);\n                }\n            } catch (Throwable t) {\n                if (continueInitOnError) {\n                    log.warn(\"error during session initialization for {}, continuing...\", sessionID, t);\n                } else {\n                    throw t instanceof ConfigError ? (ConfigError) t : new ConfigError(\n                            \"error during session initialization\", t);\n                }\n            }\n        }\n        setSessions(allSessions);\n\n        if (socketDescriptorForAddress.isEmpty()) {\n            throw new ConfigError(\"No acceptor sessions found in settings.\");\n        }\n    }\n\n    protected void stopAcceptingConnections() {\n        Iterator<IoAcceptor> ioIt = getEndpoints().iterator();\n        while (ioIt.hasNext()) {\n            IoAcceptor ioAcceptor = ioIt.next();\n            SocketAddress localAddress = ioAcceptor.getLocalAddress();\n            ioAcceptor.unbind();\n            closeManagedSessionsAndDispose(ioAcceptor, true, log);\n            log.info(\"No longer accepting connections on {}\", localAddress);\n            ioIt.remove();\n        }\n    }\n\n    private static class AcceptorSocketDescriptor {\n        private final SocketAddress address;\n        private final boolean useSSL;\n        private final SSLConfig sslConfig;\n        private final Map<SessionID, Session> acceptedSessions = new HashMap<>();\n\n        public AcceptorSocketDescriptor(SocketAddress address, boolean useSSL, SSLConfig sslConfig) {\n            this.address = address;\n            this.useSSL = useSSL;\n            this.sslConfig = sslConfig;\n        }\n\n        public void acceptSession(Session session) {\n            acceptedSessions.put(session.getSessionID(), session);\n        }\n\n        public Map<SessionID, Session> getAcceptedSessions() {\n            return Collections.unmodifiableMap(acceptedSessions);\n        }\n\n        public SocketAddress getAddress() {\n            return address;\n        }\n\n        public boolean isUseSSL() {\n            return useSSL;\n        }\n\n        public SSLConfig getSslConfig() {\n            return sslConfig;\n        }\n    }\n\n    public Collection<IoAcceptor> getEndpoints() {\n        return ioAcceptors.values();\n    }\n\n    public Map<SessionID, SocketAddress> getAcceptorAddresses() {\n        Map<SessionID, SocketAddress> sessionIdToAddressMap = new HashMap<>();\n        for (AcceptorSocketDescriptor descriptor : socketDescriptorForAddress.values()) {\n            for (SessionID sessionID : descriptor.getAcceptedSessions().keySet()) {\n                sessionIdToAddressMap.put(sessionID, descriptor.getAddress());\n            }\n        }\n        return sessionIdToAddressMap;\n    }\n\n    public void setSessionProvider(SocketAddress address, AcceptorSessionProvider provider) {\n        sessionProviders.put(address, provider);\n    }\n\n    static class StaticAcceptorSessionProvider implements AcceptorSessionProvider {\n        private final Map<SessionID, Session> acceptorSessions;\n\n        public StaticAcceptorSessionProvider(final Map<SessionID, Session> acceptorSessions) {\n            this.acceptorSessions = acceptorSessions;\n        }\n\n        public Session getSession(SessionID sessionID, SessionConnector connector) {\n            return acceptorSessions.get(sessionID);\n        }\n    }\n\n    public int getQueueSize() {\n        final EventHandlingStrategy ehs = getEventHandlingStrategy();\n        return ehs == null ? 0 : ehs.getQueueSize();\n    }\n\n    protected abstract EventHandlingStrategy getEventHandlingStrategy() ;\n\n    private class DefaultAcceptorSessionProvider implements AcceptorSessionProvider {\n\n        private final Map<SessionID, Session> acceptorSessions;\n\n        public DefaultAcceptorSessionProvider(Map<SessionID, Session> acceptorSessions) {\n            this.acceptorSessions = acceptorSessions;\n        }\n\n        public Session getSession(SessionID sessionID, SessionConnector ignored) {\n            Session session = acceptorSessions.get(sessionID);\n            if (session == null) {\n                SessionID reduced = reduceSessionID(sessionID);\n                session = acceptorSessions.get(reduced);\n            }\n            return session;\n        }\n\n        /**\n         * Remove the extra fields added to the session ID in QF-272.\n         */\n        private SessionID reduceSessionID(SessionID sessionID) {\n            // Acceptors don't use qualifiers.\n            return new SessionID(sessionID.getBeginString(), sessionID.getSenderCompID(),\n                    sessionID.getTargetCompID());\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 7200936998228685283
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.filterchain.IoFilterChainBuilder;\nimport org.apache.mina.core.future.ConnectFuture;\nimport org.apache.mina.core.service.IoConnector;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.proxy.ProxyConnector;\nimport org.apache.mina.transport.socket.SocketConnector;\nimport quickfix.ConfigError;\nimport quickfix.LogUtil;\nimport quickfix.Session;\nimport quickfix.SessionID;\nimport quickfix.SessionSettings;\nimport quickfix.SystemTime;\nimport quickfix.mina.CompositeIoFilterChainBuilder;\nimport quickfix.mina.EventHandlingStrategy;\nimport quickfix.mina.NetworkingOptions;\nimport quickfix.mina.ProtocolFactory;\nimport quickfix.mina.SessionConnector;\nimport quickfix.mina.message.FIXProtocolCodecFactory;\nimport quickfix.mina.ssl.SSLConfig;\nimport quickfix.mina.ssl.SSLContextFactory;\nimport quickfix.mina.ssl.SSLFilter;\nimport quickfix.mina.ssl.SSLSupport;\n\nimport javax.net.ssl.SSLContext;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class IoSessionInitiator {\n    private final static long CONNECT_POLL_TIMEOUT = 2000L;\n    private final ScheduledExecutorService executor;\n    private final ConnectTask reconnectTask;\n    private final Logger log = LoggerFactory.getLogger(getClass());\n\n    private Future<?> reconnectFuture;\n\n    public IoSessionInitiator(Session fixSession, SocketAddress[] socketAddresses,\n            SocketAddress localAddress, int[] reconnectIntervalInSeconds,\n            ScheduledExecutorService executor, SessionSettings sessionSettings, NetworkingOptions networkingOptions,\n            EventHandlingStrategy eventHandlingStrategy,\n            IoFilterChainBuilder userIoFilterChainBuilder, boolean sslEnabled, SSLConfig sslConfig,\n            String proxyType, String proxyVersion, String proxyHost, int proxyPort,\n            String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation) throws ConfigError {\n        this.executor = executor;\n        final long[] reconnectIntervalInMillis = new long[reconnectIntervalInSeconds.length];\n        for (int ii = 0; ii != reconnectIntervalInSeconds.length; ++ii) {\n            reconnectIntervalInMillis[ii] = reconnectIntervalInSeconds[ii] * 1000L;\n        }\n        try {\n            reconnectTask = new ConnectTask(sslEnabled, socketAddresses, localAddress,\n                    userIoFilterChainBuilder, fixSession, reconnectIntervalInMillis,\n                    sessionSettings, networkingOptions, eventHandlingStrategy, sslConfig,\n                    proxyType, proxyVersion, proxyHost, proxyPort, proxyUser, proxyPassword, proxyDomain, proxyWorkstation, log);\n        } catch (GeneralSecurityException e) {\n            throw new ConfigError(e);\n        }\n\n        fixSession.getLog().onEvent(\"Configured socket addresses for session: \" + Arrays.asList(socketAddresses));\n    }\n\n    private static class ConnectTask implements Runnable {\n        private final boolean sslEnabled;\n        private final SocketAddress[] socketAddresses;\n        private final SocketAddress localAddress;\n        private final IoFilterChainBuilder userIoFilterChainBuilder;\n        private IoConnector ioConnector;\n        private final Session fixSession;\n        private final long[] reconnectIntervalInMillis;\n        private final SessionSettings sessionSettings;\n        private final NetworkingOptions networkingOptions;\n        private final EventHandlingStrategy eventHandlingStrategy;\n        private final SSLConfig sslConfig;\n        private final Logger log;\n\n        private IoSession ioSession;\n        private long lastReconnectAttemptTime;\n        private long lastConnectTime;\n        private int nextSocketAddressIndex;\n        private int connectionFailureCount;\n        private ConnectFuture connectFuture;\n\n        private final String proxyType;\n        private final String proxyVersion;\n        private final String proxyHost;\n        private final int proxyPort;\n        private final String proxyUser;\n        private final String proxyPassword;\n        private final String proxyDomain;\n        private final String proxyWorkstation;\n\n        public ConnectTask(boolean sslEnabled, SocketAddress[] socketAddresses,\n                SocketAddress localAddress, IoFilterChainBuilder userIoFilterChainBuilder,\n                Session fixSession, long[] reconnectIntervalInMillis,\n                SessionSettings sessionSettings, NetworkingOptions networkingOptions, EventHandlingStrategy eventHandlingStrategy, SSLConfig sslConfig,\n                String proxyType, String proxyVersion, String proxyHost,\n                int proxyPort, String proxyUser, String proxyPassword, String proxyDomain,\n                String proxyWorkstation, Logger log) throws ConfigError, GeneralSecurityException {\n            this.sslEnabled = sslEnabled;\n            this.socketAddresses = socketAddresses;\n            this.localAddress = localAddress;\n            this.userIoFilterChainBuilder = userIoFilterChainBuilder;\n            this.fixSession = fixSession;\n            this.reconnectIntervalInMillis = reconnectIntervalInMillis;\n            this.sessionSettings = sessionSettings;\n            this.networkingOptions = networkingOptions;\n            this.eventHandlingStrategy = eventHandlingStrategy;\n            this.sslConfig = sslConfig;\n            this.log = log;\n\n            this.proxyType = proxyType;\n            this.proxyVersion = proxyVersion;\n            this.proxyHost = proxyHost;\n            this.proxyPort = proxyPort;\n            this.proxyUser = proxyUser;\n            this.proxyPassword = proxyPassword;\n            this.proxyDomain = proxyDomain;\n            this.proxyWorkstation = proxyWorkstation;\n\n            setupIoConnector();\n        }\n\n        private void setupIoConnector() throws ConfigError, GeneralSecurityException {\n            final CompositeIoFilterChainBuilder ioFilterChainBuilder = new CompositeIoFilterChainBuilder(userIoFilterChainBuilder);\n\n            boolean hasProxy = proxyType != null && proxyPort > 0 && socketAddresses[nextSocketAddressIndex] instanceof InetSocketAddress;\n\n            SSLFilter sslFilter = null;\n            if (sslEnabled) {\n                sslFilter = installSslFilter(ioFilterChainBuilder, !hasProxy);\n            }\n\n            ioFilterChainBuilder.addLast(FIXProtocolCodecFactory.FILTER_NAME, new ProtocolCodecFilter(new FIXProtocolCodecFactory()));\n\n            IoConnector newConnector;\n            newConnector = ProtocolFactory.createIoConnector(socketAddresses[nextSocketAddressIndex]);\n            networkingOptions.apply(newConnector);\n            newConnector.setHandler(new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy));\n            newConnector.setFilterChainBuilder(ioFilterChainBuilder);\n\n            if (hasProxy) {\n                ProxyConnector proxyConnector = ProtocolFactory.createIoProxyConnector(\n                        (SocketConnector) newConnector,\n                        (InetSocketAddress) socketAddresses[nextSocketAddressIndex],\n                        new InetSocketAddress(proxyHost, proxyPort),\n                        proxyType, proxyVersion, proxyUser, proxyPassword, proxyDomain, proxyWorkstation\n                );\n\n                proxyConnector.setHandler(new InitiatorProxyIoHandler(\n                        new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy),\n                        sslFilter\n                ));\n\n                newConnector = proxyConnector;\n            }\n\n            if (ioConnector != null) {\n                SessionConnector.closeManagedSessionsAndDispose(ioConnector, true, log);\n            }\n            ioConnector = newConnector;\n        }\n\n        private SSLFilter installSslFilter(CompositeIoFilterChainBuilder ioFilterChainBuilder, boolean autoStart)\n                throws GeneralSecurityException {\n            final SSLContext sslContext = SSLContextFactory.getInstance(sslConfig);\n            final SSLFilter sslFilter = new SSLFilter(sslContext, autoStart);\n            sslFilter.setUseClientMode(true);\n            sslFilter.setCipherSuites(sslConfig.getEnabledCipherSuites() != null ? sslConfig.getEnabledCipherSuites()\n                    : SSLSupport.getDefaultCipherSuites(sslContext));\n            sslFilter.setEnabledProtocols(sslConfig.getEnabledProtocols() != null ? sslConfig.getEnabledProtocols()\n                    : SSLSupport.getSupportedProtocols(sslContext));\n            sslFilter.setUseSNI(sslConfig.isUseSNI());\n            ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);\n            return sslFilter;\n        }\n\n        @Override\n        public void run() {\n            resetIoConnector();\n            try {\n                if (connectFuture == null) {\n                    if (shouldReconnect()) {\n                        connect();\n                    }\n                } else {\n                    pollConnectFuture();\n                }\n            } catch (Throwable e) {\n                LogUtil.logThrowable(fixSession.getLog(), \"Exception during ConnectTask run\", e);\n            }\n        }\n\n        private void connect() {\n            try {\n                lastReconnectAttemptTime = SystemTime.currentTimeMillis();\n                SocketAddress nextSocketAddress = getNextSocketAddress();\n                if (localAddress == null) {\n                    connectFuture = ioConnector.connect(nextSocketAddress);\n                } else {\n                    // QFJ-482\n                    connectFuture = ioConnector.connect(nextSocketAddress, localAddress);\n                }\n                pollConnectFuture();\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void pollConnectFuture() {\n            try {\n                connectFuture.awaitUninterruptibly(CONNECT_POLL_TIMEOUT);\n                if (connectFuture.getSession() != null) {\n                    ioSession = connectFuture.getSession();\n                    connectionFailureCount = 0;\n                    nextSocketAddressIndex = 0;\n                    lastConnectTime = System.currentTimeMillis();\n                    connectFuture = null;\n                } else {\n                    fixSession.getLog().onEvent(\n                            \"Pending connection not established after \"\n                                    + (System.currentTimeMillis() - lastReconnectAttemptTime)\n                                    + \" ms.\");\n                }\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void handleConnectException(Throwable e) {\n            ++connectionFailureCount;\n            SocketAddress socketAddress = socketAddresses[getCurrentSocketAddressIndex()];\n            while (e.getCause() != null) {\n                e = e.getCause();\n            }\n            final String nextRetryMsg = \" (Next retry in \" + computeNextRetryConnectDelay() + \" milliseconds)\";\n            if (e instanceof IOException) {\n                fixSession.getLog().onErrorEvent(e.getClass().getName() + \" during connection to \" + socketAddress + \": \" + e + nextRetryMsg);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), (IOException) e);\n            } else {\n                LogUtil.logThrowable(fixSession.getLog(), \"Exception during connection to \" + socketAddress + nextRetryMsg, e);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), new Exception(e));\n            }\n            connectFuture = null;\n        }\n\n        private SocketAddress getNextSocketAddress() {\n            SocketAddress socketAddress = socketAddresses[nextSocketAddressIndex];\n\n            // Recreate socket address to avoid cached address resolution\n            if (socketAddress instanceof InetSocketAddress) {\n                InetSocketAddress inetAddr = (InetSocketAddress) socketAddress;\n                socketAddress = new InetSocketAddress(inetAddr.getHostName(), inetAddr.getPort());\n                socketAddresses[nextSocketAddressIndex] = socketAddress;\n            }\n            nextSocketAddressIndex = (nextSocketAddressIndex + 1) % socketAddresses.length;\n            return socketAddress;\n        }\n\n        private int getCurrentSocketAddressIndex() {\n            return (nextSocketAddressIndex + socketAddresses.length - 1) % socketAddresses.length;\n        }\n\n        private boolean shouldReconnect() {\n            return (ioSession == null || !ioSession.isConnected()) && isTimeForReconnect()\n                    && (fixSession.isEnabled() && fixSession.isSessionTime());\n        }\n\n        private long computeNextRetryConnectDelay() {\n            int index = connectionFailureCount - 1;\n            if (index < 0)\n                index = 0;\n            long millis;\n            if (index >= reconnectIntervalInMillis.length) {\n                millis = reconnectIntervalInMillis[reconnectIntervalInMillis.length - 1];\n            } else {\n                millis = reconnectIntervalInMillis[index];\n            }\n            return millis;\n        }\n\n        private boolean isTimeForReconnect() {\n            return SystemTime.currentTimeMillis() - lastReconnectAttemptTime >= computeNextRetryConnectDelay();\n        }\n\n        // TODO JMX Expose reconnect property\n\n        @SuppressWarnings(\"unused\") // exposed via JMX\n        public synchronized int getConnectionFailureCount() {\n            return connectionFailureCount;\n        }\n\n        @SuppressWarnings(\"unused\") // exposed via JMX\n        public synchronized long getLastReconnectAttemptTime() {\n            return lastReconnectAttemptTime;\n        }\n\n        @SuppressWarnings(\"unused\") // exposed via JMX\n        public synchronized long getLastConnectTime() {\n            return lastConnectTime;\n        }\n\n        public Session getFixSession() {\n            return fixSession;\n        }\n\n        private void resetIoConnector() {\n            if (ioSession != null && Boolean.TRUE.equals(ioSession.getAttribute(SessionConnector.QFJ_RESET_IO_CONNECTOR))) {\n                try {\n                    setupIoConnector();\n                    if (connectFuture != null) {\n                        connectFuture.cancel();\n                    }\n                    connectFuture = null;\n                    if (!ioSession.isClosing()) {\n                        ioSession.closeNow();\n                    }\n                    ioSession = null;\n                } catch (Throwable e) {\n                    LogUtil.logThrowable(fixSession.getLog(), \"Exception during resetIoConnector call\", e);\n                }\n            }\n        }\n    }\n\n    synchronized void start() {\n        if (reconnectFuture == null) {\n            // The following logon reenabled the session. The actual logon will take\n            // place as a side-effect of the session timer task (not the reconnect task).\n            reconnectTask.getFixSession().logon(); // only enables the session\n            reconnectFuture = executor\n                    .scheduleWithFixedDelay(reconnectTask, 0, 1, TimeUnit.SECONDS);\n        }\n    }\n\n    synchronized void stop() {\n        if (reconnectFuture != null) {\n            reconnectFuture.cancel(true);\n            reconnectFuture = null;\n        }\n        SessionConnector.closeManagedSessionsAndDispose(reconnectTask.ioConnector, true, log);\n    }\n\n    public SessionID getSessionID() {\n        return reconnectTask.fixSession.getSessionID();\n    }\n\n    public SocketAddress getLocalAddress() {\n        return reconnectTask.localAddress;\n    }\n\n    public SocketAddress[] getSocketAddresses() {\n        return Arrays.copyOf(reconnectTask.socketAddresses, reconnectTask.socketAddresses.length);\n    }\n}\n",
            "error": "",
            "span_id": 14928816900627740395
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 5910248481598625575
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n            this.sslFilter.initiateHandshake(ioSession);\n        }\n    }\n}\n",
            "error": "",
            "span_id": 12708568457397472253
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 16158384220703018816
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.acceptor;\n\nimport org.apache.mina.core.buffer.IoBuffer;\nimport org.apache.mina.core.buffer.SimpleBufferAllocator;\nimport org.apache.mina.core.service.IoAcceptor;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport quickfix.Acceptor;\nimport quickfix.Application;\nimport quickfix.ConfigError;\nimport quickfix.DefaultSessionFactory;\nimport quickfix.FieldConvertError;\nimport quickfix.LogFactory;\nimport quickfix.MessageFactory;\nimport quickfix.MessageStoreFactory;\nimport quickfix.RuntimeError;\nimport quickfix.ScreenLogFactory;\nimport quickfix.Session;\nimport quickfix.SessionFactory;\nimport quickfix.SessionID;\nimport quickfix.SessionSettings;\nimport quickfix.mina.CompositeIoFilterChainBuilder;\nimport quickfix.mina.EventHandlingStrategy;\nimport quickfix.mina.NetworkingOptions;\nimport quickfix.mina.ProtocolFactory;\nimport quickfix.mina.SessionConnector;\nimport quickfix.mina.message.FIXProtocolCodecFactory;\nimport quickfix.mina.ssl.SSLConfig;\nimport quickfix.mina.ssl.SSLContextFactory;\nimport quickfix.mina.ssl.SSLFilter;\nimport quickfix.mina.ssl.SSLSupport;\n\nimport javax.net.ssl.SSLContext;\nimport java.io.IOException;\nimport java.net.SocketAddress;\nimport java.security.GeneralSecurityException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Abstract base class for socket acceptors.\n */\npublic abstract class AbstractSocketAcceptor extends SessionConnector implements Acceptor {\n    private final Map<SocketAddress, AcceptorSessionProvider> sessionProviders = new HashMap<>();\n    private final SessionFactory sessionFactory;\n    private final Map<SocketAddress, AcceptorSocketDescriptor> socketDescriptorForAddress = new HashMap<>();\n    private final ConcurrentMap<AcceptorSocketDescriptor, IoAcceptor> ioAcceptors = new ConcurrentHashMap<>();\n\n    protected AbstractSocketAcceptor(SessionSettings settings, SessionFactory sessionFactory)\n            throws ConfigError {\n        super(settings, sessionFactory);\n        IoBuffer.setAllocator(new SimpleBufferAllocator());\n        IoBuffer.setUseDirectBuffer(false);\n        this.sessionFactory = sessionFactory;\n    }\n\n    protected AbstractSocketAcceptor(Application application,\n            MessageStoreFactory messageStoreFactory, SessionSettings settings,\n            MessageFactory messageFactory) throws ConfigError {\n        this(application, messageStoreFactory, settings, new ScreenLogFactory(settings),\n                messageFactory);\n    }\n\n    protected AbstractSocketAcceptor(Application application,\n            MessageStoreFactory messageStoreFactory, SessionSettings settings,\n            LogFactory logFactory, MessageFactory messageFactory) throws ConfigError {\n        this(settings, new DefaultSessionFactory(application, messageStoreFactory, logFactory,\n                messageFactory));\n    }\n\n    // TODO SYNC Does this method really need synchronization?\n    protected synchronized void startAcceptingConnections() throws ConfigError {\n\n        boolean continueInitOnError = isContinueInitOnError();\n        createSessions(getSettings(), continueInitOnError);\n        startSessionTimer();\n\n        SocketAddress address = null;\n        for (AcceptorSocketDescriptor socketDescriptor : socketDescriptorForAddress.values()) {\n            try {\n                address = socketDescriptor.getAddress();\n                IoAcceptor ioAcceptor = getIoAcceptor(socketDescriptor);\n                CompositeIoFilterChainBuilder ioFilterChainBuilder = new CompositeIoFilterChainBuilder(getIoFilterChainBuilder());\n\n                if (socketDescriptor.isUseSSL()) {\n                    installSSL(socketDescriptor, ioFilterChainBuilder);\n                }\n\n                ioFilterChainBuilder.addLast(FIXProtocolCodecFactory.FILTER_NAME,\n                        new ProtocolCodecFilter(new FIXProtocolCodecFactory()));\n\n                ioAcceptor.setFilterChainBuilder(ioFilterChainBuilder);\n                ioAcceptor.setCloseOnDeactivation(false);\n                ioAcceptor.bind(socketDescriptor.getAddress());\n                log.info(\"Listening for connections at {} for session(s) {}\", address, socketDescriptor.getAcceptedSessions().keySet());\n            } catch (IOException | GeneralSecurityException | ConfigError e) {\n                if (continueInitOnError) {\n                    log.warn(\"error during session initialization for session(s) {}, continuing...\", socketDescriptor.getAcceptedSessions().keySet(), e);\n                } else {\n                    log.error(\"Cannot start acceptor session for {}, error: {}\", address, e);\n                    throw new RuntimeError(e);\n                }\n            }\n        }\n    }\n\n    private void installSSL(AcceptorSocketDescriptor descriptor,\n            CompositeIoFilterChainBuilder ioFilterChainBuilder) throws GeneralSecurityException {\n        log.info(\"Installing SSL filter for {}\", descriptor.getAddress());\n        SSLConfig sslConfig = descriptor.getSslConfig();\n        SSLContext sslContext = SSLContextFactory.getInstance(sslConfig);\n        SSLFilter sslFilter = new SSLFilter(sslContext);\n        sslFilter.setUseClientMode(false);\n        sslFilter.setNeedClientAuth(sslConfig.isNeedClientAuth());\n        sslFilter.setCipherSuites(sslConfig.getEnabledCipherSuites() != null ? sslConfig.getEnabledCipherSuites()\n                : SSLSupport.getDefaultCipherSuites(sslContext));\n        sslFilter.setEnabledProtocols(sslConfig.getEnabledProtocols() != null ? sslConfig.getEnabledProtocols()\n                : SSLSupport.getSupportedProtocols(sslContext));\n        ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);\n    }\n\n    private IoAcceptor getIoAcceptor(AcceptorSocketDescriptor socketDescriptor) throws ConfigError {\n        int transportType = ProtocolFactory.getAddressTransportType(socketDescriptor.getAddress());\n        AcceptorSessionProvider sessionProvider = sessionProviders.\n                computeIfAbsent(socketDescriptor.getAddress(),\n                        k -> new DefaultAcceptorSessionProvider(socketDescriptor.getAcceptedSessions()));\n\n        IoAcceptor ioAcceptor = ioAcceptors.get(socketDescriptor);\n        if (ioAcceptor == null) {\n            ioAcceptor = ProtocolFactory.createIoAcceptor(transportType);\n            try {\n                SessionSettings settings = getSettings();\n                NetworkingOptions networkingOptions = new NetworkingOptions(settings.getDefaultProperties());\n                networkingOptions.apply(ioAcceptor);\n                ioAcceptor.setHandler(new AcceptorIoHandler(sessionProvider, settings, networkingOptions, getEventHandlingStrategy()));\n            } catch (FieldConvertError e) {\n                throw new ConfigError(e);\n            }\n            ioAcceptors.put(socketDescriptor, ioAcceptor);\n        }\n        return ioAcceptor;\n    }\n\n    private void setupSession(SessionSettings settings, SessionID sessionID, boolean isTemplate, Map<SessionID, Session> allSessions)\n            throws ConfigError, FieldConvertError {\n        int acceptTransportType = ProtocolFactory.SOCKET;\n        if (settings.isSetting(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PROTOCOL)) {\n            try {\n                acceptTransportType = ProtocolFactory.getTransportType(settings.getString(\n                        sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PROTOCOL));\n            } catch (IllegalArgumentException e) {\n                // Unknown transport type\n                throw new ConfigError(e);\n            }\n        }\n\n        boolean useSSL = false;\n        SSLConfig sslConfig = null;\n        if (getSettings().isSetting(sessionID, SSLSupport.SETTING_USE_SSL)\n                && getSettings().getBool(sessionID, SSLSupport.SETTING_USE_SSL)) {\n            if (acceptTransportType == ProtocolFactory.SOCKET) {\n                useSSL = true;\n                sslConfig = SSLSupport.getSslConfig(getSettings(), sessionID);\n            } else {\n                log.warn(\"SSL will not be enabled for transport type={}, session={}\", acceptTransportType, sessionID);\n            }\n        }\n\n        int acceptPort = (int) settings.getLong(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PORT);\n\n        String acceptHost = null;\n        if (settings.isSetting(sessionID, SETTING_SOCKET_ACCEPT_ADDRESS)) {\n            acceptHost = settings.getString(sessionID, SETTING_SOCKET_ACCEPT_ADDRESS);\n        }\n\n        SocketAddress acceptorAddress = ProtocolFactory.createSocketAddress(acceptTransportType,\n                acceptHost, acceptPort);\n\n        // Check for cached descriptor\n        AcceptorSocketDescriptor descriptor = socketDescriptorForAddress.get(acceptorAddress);\n        if (descriptor != null) {\n            if (descriptor.isUseSSL() != useSSL || !equals(sslConfig, descriptor.getSslConfig())) {\n                throw new ConfigError(\"Conflicting configurations of acceptor socket: \" + acceptorAddress);\n            }\n        } else {\n            descriptor = new AcceptorSocketDescriptor(acceptorAddress, useSSL, sslConfig);\n            socketDescriptorForAddress.put(acceptorAddress, descriptor);\n        }\n\n        if (!isTemplate) {\n            Session session = sessionFactory.create(sessionID, settings);\n            descriptor.acceptSession(session);\n            allSessions.put(sessionID, session);\n        }\n    }\n\n    private boolean equals(Object object1, Object object2) {\n        return object1 == null ? object2 == null : object1.equals(object2);\n    }\n\n    private void createSessions(SessionSettings settings, boolean continueInitOnError) throws ConfigError {\n        Map<SessionID, Session> allSessions = new HashMap<>();\n        for (Iterator<SessionID> i = settings.sectionIterator(); i.hasNext();) {\n            SessionID sessionID = i.next();\n            try {\n                String connectionType = null;\n                if (settings.isSetting(sessionID, SessionFactory.SETTING_CONNECTION_TYPE)) {\n                    connectionType = settings.getString(sessionID,\n                            SessionFactory.SETTING_CONNECTION_TYPE);\n                }\n\n                if (SessionFactory.ACCEPTOR_CONNECTION_TYPE.equals(connectionType)) {\n                    boolean isTemplate = false;\n                    if (settings.isSetting(sessionID, Acceptor.SETTING_ACCEPTOR_TEMPLATE)) {\n                        try {\n                            isTemplate = settings.getBool(sessionID, Acceptor.SETTING_ACCEPTOR_TEMPLATE);\n                        } catch (FieldConvertError | ConfigError ex) {\n                            // ignore and use default\n                        }\n                    }\n\n                    setupSession(settings, sessionID, isTemplate, allSessions);\n                }\n            } catch (Throwable t) {\n                if (continueInitOnError) {\n                    log.warn(\"error during session initialization for {}, continuing...\", sessionID, t);\n                } else {\n                    throw t instanceof ConfigError ? (ConfigError) t : new ConfigError(\n                            \"error during session initialization\", t);\n                }\n            }\n        }\n        setSessions(allSessions);\n\n        if (socketDescriptorForAddress.isEmpty()) {\n            throw new ConfigError(\"No acceptor sessions found in settings.\");\n        }\n    }\n\n    protected void stopAcceptingConnections() {\n        Iterator<IoAcceptor> ioIt = getEndpoints().iterator();\n        while (ioIt.hasNext()) {\n            IoAcceptor ioAcceptor = ioIt.next();\n            SocketAddress localAddress = ioAcceptor.getLocalAddress();\n            ioAcceptor.unbind();\n            closeManagedSessionsAndDispose(ioAcceptor, true, log);\n            log.info(\"No longer accepting connections on {}\", localAddress);\n            ioIt.remove();\n        }\n    }\n\n    private static class AcceptorSocketDescriptor {\n        private final SocketAddress address;\n        private final boolean useSSL;\n        private final SSLConfig sslConfig;\n        private final Map<SessionID, Session> acceptedSessions = new HashMap<>();\n\n        public AcceptorSocketDescriptor(SocketAddress address, boolean useSSL, SSLConfig sslConfig) {\n            this.address = address;\n            this.useSSL = useSSL;\n            this.sslConfig = sslConfig;\n        }\n\n        public void acceptSession(Session session) {\n            acceptedSessions.put(session.getSessionID(), session);\n        }\n\n        public Map<SessionID, Session> getAcceptedSessions() {\n            return Collections.unmodifiableMap(acceptedSessions);\n        }\n\n        public SocketAddress getAddress() {\n            return address;\n        }\n\n        public boolean isUseSSL() {\n            return useSSL;\n        }\n\n        public SSLConfig getSslConfig() {\n            return sslConfig;\n        }\n    }\n\n    public Collection<IoAcceptor> getEndpoints() {\n        return ioAcceptors.values();\n    }\n\n    public Map<SessionID, SocketAddress> getAcceptorAddresses() {\n        Map<SessionID, SocketAddress> sessionIdToAddressMap = new HashMap<>();\n        for (AcceptorSocketDescriptor descriptor : socketDescriptorForAddress.values()) {\n            for (SessionID sessionID : descriptor.getAcceptedSessions().keySet()) {\n                sessionIdToAddressMap.put(sessionID, descriptor.getAddress());\n            }\n        }\n        return sessionIdToAddressMap;\n    }\n\n    public void setSessionProvider(SocketAddress address, AcceptorSessionProvider provider) {\n        sessionProviders.put(address, provider);\n    }\n\n    static class StaticAcceptorSessionProvider implements AcceptorSessionProvider {\n        private final Map<SessionID, Session> acceptorSessions;\n\n        public StaticAcceptorSessionProvider(final Map<SessionID, Session> acceptorSessions) {\n            this.acceptorSessions = acceptorSessions;\n        }\n\n        public Session getSession(SessionID sessionID, SessionConnector connector) {\n            return acceptorSessions.get(sessionID);\n        }\n    }\n\n    public int getQueueSize() {\n        final EventHandlingStrategy ehs = getEventHandlingStrategy();\n        return ehs == null ? 0 : ehs.getQueueSize();\n    }\n\n    protected abstract EventHandlingStrategy getEventHandlingStrategy() ;\n\n    private class DefaultAcceptorSessionProvider implements AcceptorSessionProvider {\n\n        private final Map<SessionID, Session> acceptorSessions;\n\n        public DefaultAcceptorSessionProvider(Map<SessionID, Session> acceptorSessions) {\n            this.acceptorSessions = acceptorSessions;\n        }\n\n        public Session getSession(SessionID sessionID, SessionConnector ignored) {\n            Session session = acceptorSessions.get(sessionID);\n            if (session == null) {\n                SessionID reduced = reduceSessionID(sessionID);\n                session = acceptorSessions.get(reduced);\n            }\n            return session;\n        }\n\n        /**\n         * Remove the extra fields added to the session ID in QF-272.\n         */\n        private SessionID reduceSessionID(SessionID sessionID) {\n            // Acceptors don't use qualifiers.\n            return new SessionID(sessionID.getBeginString(), sessionID.getSenderCompID(),\n                    sessionID.getTargetCompID());\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 7804270239391099117
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n            this.sslFilter.initiateHandshake(ioSession);\n        }\n    }\n}\n",
            "error": "",
            "span_id": 14290979424976880553
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/IoSessionInitiator.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.filterchain.IoFilterChainBuilder;\nimport org.apache.mina.core.future.ConnectFuture;\nimport org.apache.mina.core.service.IoConnector;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.proxy.ProxyConnector;\nimport org.apache.mina.transport.socket.SocketConnector;\nimport quickfix.ConfigError;\nimport quickfix.LogUtil;\nimport quickfix.Session;\nimport quickfix.SessionID;\nimport quickfix.SessionSettings;\nimport quickfix.SystemTime;\nimport quickfix.mina.CompositeIoFilterChainBuilder;\nimport quickfix.mina.EventHandlingStrategy;\nimport quickfix.mina.NetworkingOptions;\nimport quickfix.mina.ProtocolFactory;\nimport quickfix.mina.SessionConnector;\nimport quickfix.mina.message.FIXProtocolCodecFactory;\nimport quickfix.mina.ssl.SSLConfig;\nimport quickfix.mina.ssl.SSLContextFactory;\nimport quickfix.mina.ssl.SSLFilter;\nimport quickfix.mina.ssl.SSLSupport;\n\nimport javax.net.ssl.SSLContext;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class IoSessionInitiator {\n    private final static long CONNECT_POLL_TIMEOUT = 2000L;\n    private final ScheduledExecutorService executor;\n    private final ConnectTask reconnectTask;\n    private final Logger log = LoggerFactory.getLogger(getClass());\n\n    private Future<?> reconnectFuture;\n\n    public IoSessionInitiator(Session fixSession, SocketAddress[] socketAddresses,\n            SocketAddress localAddress, int[] reconnectIntervalInSeconds,\n            ScheduledExecutorService executor, SessionSettings sessionSettings, NetworkingOptions networkingOptions,\n            EventHandlingStrategy eventHandlingStrategy,\n            IoFilterChainBuilder userIoFilterChainBuilder, boolean sslEnabled, SSLConfig sslConfig,\n            String proxyType, String proxyVersion, String proxyHost, int proxyPort,\n            String proxyUser, String proxyPassword, String proxyDomain, String proxyWorkstation) throws ConfigError {\n        this.executor = executor;\n        final long[] reconnectIntervalInMillis = new long[reconnectIntervalInSeconds.length];\n        for (int ii = 0; ii != reconnectIntervalInSeconds.length; ++ii) {\n            reconnectIntervalInMillis[ii] = reconnectIntervalInSeconds[ii] * 1000L;\n        }\n        try {\n            reconnectTask = new ConnectTask(sslEnabled, socketAddresses, localAddress,\n                    userIoFilterChainBuilder, fixSession, reconnectIntervalInMillis,\n                    sessionSettings, networkingOptions, eventHandlingStrategy, sslConfig,\n                    proxyType, proxyVersion, proxyHost, proxyPort, proxyUser, proxyPassword, proxyDomain, proxyWorkstation, log);\n        } catch (GeneralSecurityException e) {\n            throw new ConfigError(e);\n        }\n\n        fixSession.getLog().onEvent(\"Configured socket addresses for session: \" + Arrays.asList(socketAddresses));\n    }\n\n    private static class ConnectTask implements Runnable {\n        private final boolean sslEnabled;\n        private final SocketAddress[] socketAddresses;\n        private final SocketAddress localAddress;\n        private final IoFilterChainBuilder userIoFilterChainBuilder;\n        private IoConnector ioConnector;\n        private final Session fixSession;\n        private final long[] reconnectIntervalInMillis;\n        private final SessionSettings sessionSettings;\n        private final NetworkingOptions networkingOptions;\n        private final EventHandlingStrategy eventHandlingStrategy;\n        private final SSLConfig sslConfig;\n        private final Logger log;\n\n        private IoSession ioSession;\n        private long lastReconnectAttemptTime;\n        private long lastConnectTime;\n        private int nextSocketAddressIndex;\n        private int connectionFailureCount;\n        private ConnectFuture connectFuture;\n\n        private final String proxyType;\n        private final String proxyVersion;\n        private final String proxyHost;\n        private final int proxyPort;\n        private final String proxyUser;\n        private final String proxyPassword;\n        private final String proxyDomain;\n        private final String proxyWorkstation;\n\n        public ConnectTask(boolean sslEnabled, SocketAddress[] socketAddresses,\n                SocketAddress localAddress, IoFilterChainBuilder userIoFilterChainBuilder,\n                Session fixSession, long[] reconnectIntervalInMillis,\n                SessionSettings sessionSettings, NetworkingOptions networkingOptions, EventHandlingStrategy eventHandlingStrategy, SSLConfig sslConfig,\n                String proxyType, String proxyVersion, String proxyHost,\n                int proxyPort, String proxyUser, String proxyPassword, String proxyDomain,\n                String proxyWorkstation, Logger log) throws ConfigError, GeneralSecurityException {\n            this.sslEnabled = sslEnabled;\n            this.socketAddresses = socketAddresses;\n            this.localAddress = localAddress;\n            this.userIoFilterChainBuilder = userIoFilterChainBuilder;\n            this.fixSession = fixSession;\n            this.reconnectIntervalInMillis = reconnectIntervalInMillis;\n            this.sessionSettings = sessionSettings;\n            this.networkingOptions = networkingOptions;\n            this.eventHandlingStrategy = eventHandlingStrategy;\n            this.sslConfig = sslConfig;\n            this.log = log;\n\n            this.proxyType = proxyType;\n            this.proxyVersion = proxyVersion;\n            this.proxyHost = proxyHost;\n            this.proxyPort = proxyPort;\n            this.proxyUser = proxyUser;\n            this.proxyPassword = proxyPassword;\n            this.proxyDomain = proxyDomain;\n            this.proxyWorkstation = proxyWorkstation;\n\n            setupIoConnector();\n        }\n\n        private void setupIoConnector() throws ConfigError, GeneralSecurityException {\n            final CompositeIoFilterChainBuilder ioFilterChainBuilder = new CompositeIoFilterChainBuilder(userIoFilterChainBuilder);\n\n            boolean hasProxy = proxyType != null && proxyPort > 0 && socketAddresses[nextSocketAddressIndex] instanceof InetSocketAddress;\n\n            SSLFilter sslFilter = null;\n            if (sslEnabled) {\n                sslFilter = installSslFilter(ioFilterChainBuilder, !hasProxy);\n            }\n\n            ioFilterChainBuilder.addLast(FIXProtocolCodecFactory.FILTER_NAME, new ProtocolCodecFilter(new FIXProtocolCodecFactory()));\n\n            IoConnector newConnector;\n            newConnector = ProtocolFactory.createIoConnector(socketAddresses[nextSocketAddressIndex]);\n            networkingOptions.apply(newConnector);\n            newConnector.setHandler(new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy));\n            newConnector.setFilterChainBuilder(ioFilterChainBuilder);\n\n            if (hasProxy) {\n                ProxyConnector proxyConnector = ProtocolFactory.createIoProxyConnector(\n                        (SocketConnector) newConnector,\n                        (InetSocketAddress) socketAddresses[nextSocketAddressIndex],\n                        new InetSocketAddress(proxyHost, proxyPort),\n                        proxyType, proxyVersion, proxyUser, proxyPassword, proxyDomain, proxyWorkstation\n                );\n\n                proxyConnector.setHandler(new InitiatorProxyIoHandler(\n                        new InitiatorIoHandler(fixSession, sessionSettings, networkingOptions, eventHandlingStrategy),\n                        sslFilter\n                ));\n\n                newConnector = proxyConnector;\n            }\n\n            if (ioConnector != null) {\n                SessionConnector.closeManagedSessionsAndDispose(ioConnector, true, log);\n            }\n            ioConnector = newConnector;\n        }\n\n        private SSLFilter installSslFilter(CompositeIoFilterChainBuilder ioFilterChainBuilder, boolean autoStart)\n                throws GeneralSecurityException {\n            final SSLContext sslContext = SSLContextFactory.getInstance(sslConfig);\n            final SSLFilter sslFilter = new SSLFilter(sslContext, autoStart);\n            sslFilter.setUseClientMode(true);\n            sslFilter.setCipherSuites(sslConfig.getEnabledCipherSuites() != null ? sslConfig.getEnabledCipherSuites()\n                    : SSLSupport.getDefaultCipherSuites(sslContext));\n            sslFilter.setEnabledProtocols(sslConfig.getEnabledProtocols() != null ? sslConfig.getEnabledProtocols()\n                    : SSLSupport.getSupportedProtocols(sslContext));\n            sslFilter.setUseSNI(sslConfig.isUseSNI());\n            ioFilterChainBuilder.addLast(SSLSupport.FILTER_NAME, sslFilter);\n            return sslFilter;\n        }\n\n        @Override\n        public void run() {\n            resetIoConnector();\n            try {\n                if (connectFuture == null) {\n                    if (shouldReconnect()) {\n                        connect();\n                    }\n                } else {\n                    pollConnectFuture();\n                }\n            } catch (Throwable e) {\n                LogUtil.logThrowable(fixSession.getLog(), \"Exception during ConnectTask run\", e);\n            }\n        }\n\n        private void connect() {\n            try {\n                lastReconnectAttemptTime = SystemTime.currentTimeMillis();\n                SocketAddress nextSocketAddress = getNextSocketAddress();\n                if (localAddress == null) {\n                    connectFuture = ioConnector.connect(nextSocketAddress);\n                } else {\n                    // QFJ-482\n                    connectFuture = ioConnector.connect(nextSocketAddress, localAddress);\n                }\n                pollConnectFuture();\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void pollConnectFuture() {\n            try {\n                connectFuture.awaitUninterruptibly(CONNECT_POLL_TIMEOUT);\n                if (connectFuture.getSession() != null) {\n                    ioSession = connectFuture.getSession();\n                    connectionFailureCount = 0;\n                    nextSocketAddressIndex = 0;\n                    lastConnectTime = System.currentTimeMillis();\n                    connectFuture = null;\n                } else {\n                    fixSession.getLog().onEvent(\n                            \"Pending connection not established after \"\n                                    + (System.currentTimeMillis() - lastReconnectAttemptTime)\n                                    + \" ms.\");\n                }\n            } catch (Throwable e) {\n                handleConnectException(e);\n            }\n        }\n\n        private void handleConnectException(Throwable e) {\n            ++connectionFailureCount;\n            SocketAddress socketAddress = socketAddresses[getCurrentSocketAddressIndex()];\n            while (e.getCause() != null) {\n                e = e.getCause();\n            }\n            final String nextRetryMsg = \" (Next retry in \" + computeNextRetryConnectDelay() + \" milliseconds)\";\n            if (e instanceof IOException) {\n                fixSession.getLog().onErrorEvent(e.getClass().getName() + \" during connection to \" + socketAddress + \": \" + e + nextRetryMsg);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), (IOException) e);\n            } else {\n                LogUtil.logThrowable(fixSession.getLog(), \"Exception during connection to \" + socketAddress + nextRetryMsg, e);\n                fixSession.getStateListener().onConnectException(fixSession.getSessionID(), new Exception(e));\n            }\n            connectFuture = null;\n        }\n\n        private SocketAddress getNextSocketAddress() {\n            SocketAddress socketAddress = socketAddresses[nextSocketAddressIndex];\n\n            // Recreate socket address to avoid cached address resolution\n            if (socketAddress instanceof InetSocketAddress) {\n                InetSocketAddress inetAddr = (InetSocketAddress) socketAddress;\n                socketAddress = new InetSocketAddress(inetAddr.getHostName(), inetAddr.getPort());\n                socketAddresses[nextSocketAddressIndex] = socketAddress;\n            }\n            nextSocketAddressIndex = (nextSocketAddressIndex + 1) % socketAddresses.length;\n            return socketAddress;\n        }\n\n        private int getCurrentSocketAddressIndex() {\n            return (nextSocketAddressIndex + socketAddresses.length - 1) % socketAddresses.length;\n        }\n\n        private boolean shouldReconnect() {\n            return (ioSession == null || !ioSession.isConnected()) && isTimeForReconnect()\n                    && (fixSession.isEnabled() && fixSession.isSessionTime());\n        }\n\n        private long computeNextRetryConnectDelay() {\n            int index = connectionFailureCount - 1;\n            if (index < 0)\n                index = 0;\n            long millis;\n            if (index >= reconnectIntervalInMillis.length) {\n                millis = reconnectIntervalInMillis[reconnectIntervalInMillis.length - 1];\n            } else {\n                millis = reconnectIntervalInMillis[index];\n            }\n            return millis;\n        }\n\n        private boolean isTimeForReconnect() {\n            return SystemTime.currentTimeMillis() - lastReconnectAttemptTime >= computeNextRetryConnectDelay();\n        }\n\n        // TODO JMX Expose reconnect property\n\n        @SuppressWarnings(\"unused\") // exposed via JMX\n        public synchronized int getConnectionFailureCount() {\n            return connectionFailureCount;\n        }\n\n        @SuppressWarnings(\"unused\") // exposed via JMX\n        public synchronized long getLastReconnectAttemptTime() {\n            return lastReconnectAttemptTime;\n        }\n\n        @SuppressWarnings(\"unused\") // exposed via JMX\n        public synchronized long getLastConnectTime() {\n            return lastConnectTime;\n        }\n\n        public Session getFixSession() {\n            return fixSession;\n        }\n\n        private void resetIoConnector() {\n            if (ioSession != null && Boolean.TRUE.equals(ioSession.getAttribute(SessionConnector.QFJ_RESET_IO_CONNECTOR))) {\n                try {\n                    setupIoConnector();\n                    if (connectFuture != null) {\n                        connectFuture.cancel();\n                    }\n                    connectFuture = null;\n                    if (!ioSession.isClosing()) {\n                        ioSession.closeNow();\n                    }\n                    ioSession = null;\n                } catch (Throwable e) {\n                    LogUtil.logThrowable(fixSession.getLog(), \"Exception during resetIoConnector call\", e);\n                }\n            }\n        }\n    }\n\n    synchronized void start() {\n        if (reconnectFuture == null) {\n            // The following logon reenabled the session. The actual logon will take\n            // place as a side-effect of the session timer task (not the reconnect task).\n            reconnectTask.getFixSession().logon(); // only enables the session\n            reconnectFuture = executor\n                    .scheduleWithFixedDelay(reconnectTask, 0, 1, TimeUnit.SECONDS);\n        }\n    }\n\n    synchronized void stop() {\n        if (reconnectFuture != null) {\n            reconnectFuture.cancel(true);\n            reconnectFuture = null;\n        }\n        SessionConnector.closeManagedSessionsAndDispose(reconnectTask.ioConnector, true, log);\n    }\n\n    public SessionID getSessionID() {\n        return reconnectTask.fixSession.getSessionID();\n    }\n\n    public SocketAddress getLocalAddress() {\n        return reconnectTask.localAddress;\n    }\n\n    public SocketAddress[] getSocketAddresses() {\n        return Arrays.copyOf(reconnectTask.socketAddresses, reconnectTask.socketAddresses.length);\n    }\n}\n",
            "error": "",
            "span_id": 2515939493565350697
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(session);\n+            sslFilter.initiateHandshake();\n        }\n    }\n}\n",
            "error": "",
            "span_id": 12614949597815975725
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 9170590924024287483
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake();\n        }\n    }\n}\n",
            "error": "",
            "span_id": 11630095223736621398
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 16980697743306676170
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake(ioSession);\n        }\n    }\n}\n",
            "error": "",
            "span_id": 7412091534114030106
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 11237384573977216210
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake();\n        }\n    }\n}\n",
            "error": "",
            "span_id": 6596346175033116103
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 9728497830393018093
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 10625693535186777896
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake(ioSession);\n        }\n    }\n}\n",
            "error": "",
            "span_id": 369140246306527632
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/initiator/InitiatorProxyIoHandler.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.initiator;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.proxy.AbstractProxyIoHandler;\n\nimport quickfix.mina.ssl.SSLFilter;\n\nclass InitiatorProxyIoHandler extends AbstractProxyIoHandler {\n    private final InitiatorIoHandler initiatorIoHandler;\n    private final SSLFilter sslFilter;\n\n    InitiatorProxyIoHandler(InitiatorIoHandler initiatorIoHandler, SSLFilter sslFilter) {\n        super();\n        this.initiatorIoHandler = initiatorIoHandler;\n        this.sslFilter = sslFilter;\n    }\n\n    @Override\n    public void sessionCreated(IoSession session) throws Exception {\n        this.initiatorIoHandler.sessionCreated(session);\n    }\n\n    @Override\n    public void sessionClosed(IoSession ioSession) throws Exception {\n        this.initiatorIoHandler.sessionClosed(ioSession);\n    }\n\n    @Override\n    public void messageReceived(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageReceived(session, message);\n    }\n\n    @Override\n    public void messageSent(IoSession session, Object message) throws Exception {\n        this.initiatorIoHandler.messageSent(session, message);\n    }\n\n    @Override\n    public void exceptionCaught(IoSession ioSession, Throwable cause) throws Exception {\n        this.initiatorIoHandler.exceptionCaught(ioSession, cause);\n    }\n\n    @Override\n    public void proxySessionOpened(IoSession ioSession) throws Exception {\n        if (this.sslFilter != null) {\n-            sslFilter.initiateHandshake(ioSession);\n+            sslFilter.initiateHandshake();\n        }\n    }\n}\n",
            "error": "",
            "span_id": 5024490250328229266
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 1759540603403163217
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}