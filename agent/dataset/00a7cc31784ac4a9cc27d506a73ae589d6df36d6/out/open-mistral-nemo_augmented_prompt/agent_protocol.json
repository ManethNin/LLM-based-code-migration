{
    "validate_diffs": [
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 15018027357020716288
        },
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 16331565477701750401
        },
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 1346938586778863340
        },
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 3713337786214490281
        },
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 614500396536440640
        },
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 8674924204008483726
        },
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 1833972672966613332
        },
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 6350948110105441472
        },
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n\n@@ -101,3 +103,7 @@\n     \n+    public static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n     \n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 18151286236314187287
        },
        {
            "input": "--- quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n+++ quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java\n@@ -43,9 +43,9 @@\n     */\n    \n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n-        super(sslContext, autoStart);\n+        super(sslContext, autoStart, null);\n     }\n\n-    public SSLFilter(SSLContext sslContext) {\n-        super(sslContext);\n+    public SSLFilter(SSLContext sslContext, boolean useClientMode) {\n+        super(sslContext, useClientMode);\n     }\n\n     /**\n@@ -78,3 +78,5 @@\n         * We activate Server Name Indication if it is enabled in the session config.\n         */\n     \n+        private static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n\n         @Override\n         public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n@@ -81,7 +83,7 @@\n             if (remoteAddress instanceof InetSocketAddress) {\n                 // activate the SNI support in the JSSE SSLEngine\n                 log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n-                session.setAttribute(PEER_ADDRESS, remoteAddress);\n+                session.setAttribute(\"PEER_ADDRESS\", remoteAddress);\n             }\n         }\n     }\n\n@@ -101,3 +103,7 @@\n     \n+    public static final String PEER_ADDRESS = \"PEER_ADDRESS\";\n     \n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n\n",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 18107045261519905806
        }
    ],
    "compile_maven": [],
    "read_file": [
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 7651976996347894276
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 2415727202219023361
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 1694622707536483889
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 10828649867168621605
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 12589943727306637327
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 6551998422635761036
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 15101768619947113862
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 11610589287971577
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 13773087157605403421
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 18230126510345554449
        },
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl/SSLFilter.java",
            "output": "/*******************************************************************************\n * Copyright (c) quickfixengine.org  All rights reserved.\n *\n * This file is part of the QuickFIX FIX Engine\n *\n * This file may be distributed under the terms of the quickfixengine.org\n * license as defined by quickfixengine.org and appearing in the file\n * LICENSE included in the packaging of this file.\n *\n * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING\n * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE.\n *\n * See http://www.quickfixengine.org/LICENSE for licensing information.\n *\n * Contact ask@quickfixengine.org if any conditions of this licensing\n * are not clear to you.\n ******************************************************************************/\n\npackage quickfix.mina.ssl;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport javax.net.ssl.SSLContext;\n\nimport javax.net.ssl.SSLException;\nimport org.apache.mina.core.filterchain.IoFilterChain;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An extended SSL filter based on MINA {@link SslFilter} that applies\n * some adaptations.\n */\npublic class SSLFilter extends SslFilter {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private boolean useSNI;\n\n    public SSLFilter(SSLContext sslContext, boolean autoStart) {\n        super(sslContext, autoStart);\n    }\n\n    public SSLFilter(SSLContext sslContext) {\n        super(sslContext);\n    }\n\n    /**\n     * Called from {@link SslFilter#onPreAdd} every time a new\n     * session is created which makes it impossible to override enabled cipher\n     * suites configuration.\n     */\n    @Override\n    public void setEnabledCipherSuites(String[] cipherSuites) {\n    }\n\n    public void setCipherSuites(String[] cipherSuites) {\n        super.setEnabledCipherSuites(cipherSuites);\n    }\n\n    /**\n     * Called before filter is added into the chain.\n     * We activate Server Name Indication if it is enabled in the session config.\n     */\n    @Override\n    public void onPreAdd(IoFilterChain parent, String name, NextFilter nextFilter)\n        throws SSLException {\n\n        if (useSNI) {\n            IoSession session = parent.getSession();\n            SocketAddress remoteAddress = session.getRemoteAddress();\n\n            if (remoteAddress instanceof InetSocketAddress) {\n                // activate the SNI support in the JSSE SSLEngine\n                log.info(\"Activating TLS SNI support for peer address: {}\", remoteAddress);\n                session.setAttribute(PEER_ADDRESS, remoteAddress);\n            }\n        }\n\n        super.onPreAdd(parent, name, nextFilter);\n    }\n\n    public void setUseSNI(boolean useSNI) {\n        this.useSNI = useSNI;\n    }\n}\n",
            "error": "",
            "span_id": 580930285647376724
        }
    ],
    "get_directory_tree": [
        {
            "input": "quickfixj-core/src/main/java/quickfix/mina/ssl",
            "output": "[\n    {\n        \"name\": \"X509TrustManagerWrapper.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"SSLSupport.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"SSLFilter.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"SSLContextFactory.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"SSLConfig.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 8432497556245712816
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}