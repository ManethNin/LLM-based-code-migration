diff --git a/src/test/java/uk/gov/pay/adminusers/queue/event/EventMessageHandlerTest.java b/src/test/java/uk/gov/pay/adminusers/queue/event/EventMessageHandlerTest.java
index d3277554..b9fb6d34 100644
--- a/src/test/java/uk/gov/pay/adminusers/queue/event/EventMessageHandlerTest.java
+++ b/src/test/java/uk/gov/pay/adminusers/queue/event/EventMessageHandlerTest.java
@@ -1,9 +1,18 @@
 package uk.gov.pay.adminusers.queue.event;
 
-import ch.qos.logback.classic.Level;
-import ch.qos.logback.classic.Logger;
+-import ch.qos.logback.classic.Level;
+-import ch.qos.logback.classic.Logger;
 import ch.qos.logback.classic.spi.ILoggingEvent;
-import ch.qos.logback.core.Appender;
+-import ch.qos.logback.core.read.ListAppender;
++import ch.qos.logback.core.read.ListAppender;
+import ch.qos.logback.classic.spi.ILoggingEvent;
+import ch.qos.logback.core.read.ListAppender;
+import ch.qos.logback.classic.spi.ILoggingEvent;
+import ch.qos.logback.core.read.ListAppender;
+import ch.qos.logback.classic.spi.ILoggingEvent;
+import ch.qos.logback.core.read.ListAppender;
+import ch.qos.logback.classic.spi.ILoggingEvent;
+import ch.qos.logback.core.read.ListAppender;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.gson.GsonBuilder;
 import org.hamcrest.core.Is;
@@ -14,7 +23,6 @@ import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
-import org.slf4j.LoggerFactory;
 import uk.gov.pay.adminusers.client.ledger.model.LedgerTransaction;
 import uk.gov.pay.adminusers.client.ledger.service.LedgerService;
 import uk.gov.pay.adminusers.model.MerchantDetails;
@@ -81,8 +89,9 @@ class EventMessageHandlerTest {
     @Captor
     ArgumentCaptor<Map<String, String>> personalisationCaptor;
     @Mock
-    private Appender<ILoggingEvent> mockLogAppender;
-    @Captor
+-    private Appender<ILoggingEvent> mockLogAppender;
+-    @Captor
++    private ListAppender<ILoggingEvent> mockLogAppender;
     ArgumentCaptor<ILoggingEvent> loggingEventArgumentCaptor;
 
     private final ObjectMapper objectMapper = new ObjectMapper();
@@ -107,30 +116,10 @@ class EventMessageHandlerTest {
                 aUserEntityWithRoleForService(service, true, "admin1"),
                 aUserEntityWithRoleForService(service, true, "admin2")
         );
-
-        Logger logger = (Logger) LoggerFactory.getLogger(EventMessageHandler.class);
-        logger.setLevel(Level.INFO);
-        logger.addAppender(mockLogAppender);
-    }
-
-    @Test
-    void shouldMarkMessageAsProcessed() throws Exception {
-        disputeEvent = anEventFixture()
-                .withEventType(EventType.DISPUTE_CREATED.name())
-                .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
-                .withParentResourceExternalId("456")
-                .build();
-        when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
-        when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
-        when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(users);
-
-        var mockQueueMessage = mock(QueueMessage.class);
-        var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
-        when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
-
-        eventMessageHandler.processMessages();
-
-        verify(mockEventSubscriberQueue).markMessageAsProcessed(mockQueueMessage);
+-
+-        Logger logger = (Logger) LoggerFactory.getLogger(EventMessageHandler.class);
+-        logger.setLevel(Level.INFO);
+-        logger.addAppender(mockLogAppender);
     }
 
     @Test