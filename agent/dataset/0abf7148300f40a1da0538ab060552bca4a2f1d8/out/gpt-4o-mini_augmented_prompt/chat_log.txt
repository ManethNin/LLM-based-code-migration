================================ System Message ================================

Act as an expert Java software developer.
The program has issues after a version upgrade of a dependency.
Try using minimal changes to the code to fix the issues. 
Do not explain your actions or ask questions, just provide diffs that always adhere to the rules.
When you think you are done, reply with the diff that fixes the issues, after that a final verification step will happen and the conversation will be ended if it was successful. If not you get the error back.

# File editing rules:
Return edits similar to unified diffs that `diff -U0` would produce.
The diff has to be in a markdown code block, like this: ```diff ```.

Make sure you include the first 2 lines with the file paths.
Don't include timestamps with the file paths.

Start each hunk of changes with a `@@ ... @@` line.
Don't include line numbers like `diff -U0` does.
The user's patch tool doesn't need them.

The user's patch tool needs CORRECT patches that apply cleanly against the current contents of the file!
Think carefully and make sure you include and mark all lines that need to be removed or changed as `-` lines.
Make sure you mark all new or modified lines with `+`.
Don't leave out any lines or the diff patch won't apply correctly.

Indentation matters in the diffs!

Start a new hunk for each section of the file that needs changes.
Dont include unnescessary context.

Only output hunks that specify changes with `+` or `-` lines.
Skip any hunks that are entirely unchanging ` ` lines.

Output hunks in whatever order makes the most sense.
Hunks don't need to be in any particular order.

When editing a function, method, loop, etc use a hunk to replace the *entire* code block.
Delete the entire existing version with `-` lines and then add a new, updated version with `+` lines.
This will help you generate correct code and correct diffs.

To make a new file, show a diff from `--- /dev/null` to `+++ path/to/new/file.ext`.


================================ Human Message =================================


Updated Dependency Details: net.sf.jasperreports:jasperreports 6.18.1 -> 6.19.1

Initial Error: [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.10.0:compile (default-compile) on project biapi: Compilation failure
[ERROR] src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float
[ERROR] -> [Help 1]

Revapi/Japicmp Changes: {"japicmpResult": {"getLineBox": ["METHOD_REMOVED"], "getPen": ["METHOD_REMOVED"], "getLineWidth": ["METHOD_REMOVED"], "setLineWidth": ["METHOD_REMOVED"]}, "elementLines": {"getLineBox": "[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float", "getPen": "[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float", "getLineWidth": "[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float", "setLineWidth": "[ERROR] /biapi/src/main/java/xdev/tableexport/export/ReportBuilder.java:[369,81] incompatible types: int cannot be converted to java.lang.Float"}, "revapiResult": {"getLineBox": ["java.method.removed"], "getPen": ["java.method.removed"], "getLineWidth": ["java.method.removed"], "setLineWidth": ["java.method.removed"]}, "allPotentialBreakingElements": ["getPen()", "setLineWidth()", "getLineBox()", "getLineWidth()"], "elementPatterns": {"getLineBox": "incompatible types: cannot be converted to", "getPen": "incompatible types: cannot be converted to", "getLineWidth": "incompatible types: cannot be converted to", "setLineWidth": "incompatible types: cannot be converted to"}, "project": "biapi"}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_b7sXLH2kjBAsB7jSq40ejNQV)
 Call ID: call_b7sXLH2kjBAsB7jSq40ejNQV
  Args:
    file_path: src/main/java/xdev/tableexport/export/ReportBuilder.java

================================= Tool Message =================================
Name: read_file

package xdev.tableexport.export;

/*-
 * #%L
 * XDEV BI Suite
 * %%
 * Copyright (C) 2011 - 2020 XDEV Software
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */


import java.awt.Color;
import java.awt.Font;
import java.util.HashSet;
import java.util.Set;

import javax.swing.JLabel;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRLineBox;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignBand;
import net.sf.jasperreports.engine.design.JRDesignExpression;
import net.sf.jasperreports.engine.design.JRDesignField;
import net.sf.jasperreports.engine.design.JRDesignSection;
import net.sf.jasperreports.engine.design.JRDesignStaticText;
import net.sf.jasperreports.engine.design.JRDesignTextElement;
import net.sf.jasperreports.engine.design.JRDesignTextField;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.type.ModeEnum;
import net.sf.jasperreports.engine.type.PositionTypeEnum;
import net.sf.jasperreports.engine.type.SplitTypeEnum;
import xdev.tableexport.config.ColumnBorder;
import xdev.tableexport.config.ColumnPadding;
import xdev.tableexport.config.ColumnStyle;
import xdev.tableexport.config.ContentColumn;
import xdev.tableexport.config.HeaderColumn;
import xdev.tableexport.config.PageProperties;
import xdev.tableexport.config.TemplateColumn;
import xdev.tableexport.config.TemplateConfig;
import xdev.vt.XdevBlob;
import xdev.vt.XdevClob;


/**
 * The {@link ReportBuilder} generates a {@link JasperReport} based on the
 * information of the {@link TemplateConfig}.
 * 
 * @author XDEV Software (FHAE)
 * 
 * @see TemplateConfig
 * @see ReportExporter
 * 
 */
public class ReportBuilder
{
	private final TemplateConfig			config;
	private final Set<JRDesignField>		fieldSet	= new HashSet<>();
	
	
	public ReportBuilder(final TemplateConfig tempConfig)
	{
		this.config = tempConfig;
	}
	
	
	private JRDesignBand initDetailBand()
	{
		final JRDesignBand detailBand = new JRDesignBand();
		detailBand.setHeight(TemplateConfig.DEFAULT_DETAIL_BAND_HEIGHT);
		detailBand.setSplitType(SplitTypeEnum.STRETCH);
		
		return detailBand;
	}
	
	
	private JRDesignBand initHeaderBand()
	{
		// Header
		final JRDesignBand headerBand = new JRDesignBand();
		headerBand.setHeight(TemplateConfig.DEFAULT_HEADER_BAND_HEIGHT);
		
		return headerBand;
	}
	
	
	private JasperDesign createDefaultDesign()
	{
		final JasperDesign jasperDesign = new JasperDesign();
		jasperDesign.setName("DefaultDesign");
		final PageProperties properties = this.config.getPageProperties();
		
		jasperDesign.setPageWidth(this.calcPageWidth(properties));
		jasperDesign.setColumnWidth(this.calcColumnsWidth());
		
		jasperDesign.setPageHeight(properties.getPageHeight());
		jasperDesign.setColumnSpacing(properties.getColumnSpacing());
		jasperDesign.setLeftMargin(properties.getLeftMargin());
		jasperDesign.setRightMargin(properties.getRightMargin());
		jasperDesign.setTopMargin(properties.getTopMargin());
		jasperDesign.setBottomMargin(properties.getBottomMargin());
		
		return jasperDesign;
	}
	
	
	private int calcColumnsWidth()
	{
		int width = 0;
		
		for(final TemplateColumn col : this.config.getColumns())
		{
			width += col.getWidth();
		}
		
		return width;
	}

	/***
	 * Calculated the page width including the margins.
	 * 
	 * @param properties
	 * 
	 * @return
	 */
	private int calcPageWidth(final PageProperties properties)
	{
		int width = 0;
		
		for(final TemplateColumn col : this.config.getColumns())
		{
			width += col.getWidth();
		}
		
		width += properties.getLeftMargin() + properties.getRightMargin();
		
		return width;
	}
	
	
	/**
	 * 
	 * @return
	 */
	private int calcMaxHeaderHeight()
	{
		
		final JLabel lbl = new JLabel("a");
		int maxHeight = 0;
		
		for(final TemplateColumn col : this.config.getColumns())
		{
			final ColumnStyle style = col.getHeaderColumn().getStyle();
			final Font font = style.getFont();
			lbl.setFont(font);
			//get the normal height of the label
			int lblHeigh = (int)lbl.getPreferredSize().getHeight();
			//add the column border width
			lblHeigh+= style.getColBorder().getLineWidth()*2;
			//Add padding
			lblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();
			
			if(lblHeigh > maxHeight)
			{
				maxHeight = lblHeigh;
			}
		}
		
		return maxHeight;
	}
	
	private int calcMaxContentHeight()
	{
		
		final JLabel lbl = new JLabel("a");
		int maxHeight = 0;
		
		for(final TemplateColumn col : this.config.getColumns())
		{
			final ColumnStyle style = col.getContentColumn().getStyle();
			final Font font = style.getFont();
			lbl.setFont(font);
			int lblHeigh = (int)lbl.getPreferredSize().getHeight();
			//Add border width
			lblHeigh+= style.getColBorder().getLineWidth()*2;
			//Add padding
			lblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();
			
			if(lblHeigh > maxHeight)
			{
				maxHeight = lblHeigh;
			}
		}
		
		return maxHeight;
	}
	
	
	private void createTemplateFields(final JasperDesign jasperDesign) throws ExportException
	{
		JRDesignField field;
		
		for(final TemplateColumn col : this.config.getColumns())
		{
			field = new JRDesignField();
			field.setName(col.getContentColumn().getFieldName());
			this.chooseValueClass(col,field);
			
			try
			{
				jasperDesign.addField(field);
				this.fieldSet.add(field);
			}
			catch(final JRException e)
			{
				throw new ExportException("error during add the field "
						+ col.getContentColumn().getFieldName(),e);
			}
		}
		
	}

	
	private JRDesignField chooseValueClass(final TemplateColumn col, final JRDesignField field)
	{
		final Class<?> valueClass = col.getContentColumn().getColumnValueClass();
		
		if(valueClass.isAssignableFrom(byte[].class) || valueClass.isAssignableFrom(XdevBlob.class) || valueClass.isAssignableFrom(XdevClob.class))
		{
			field.setValueClass(String.class);
		}
		else
		{
			field.setValueClass(valueClass);
		}
		
		return field;
	}
	
	
	private void createHeaderAndContent(final JRDesignBand headerBand, final JRDesignBand detailBand)
	{
		JRDesignStaticText headerLabel;
		JRDesignStaticText emptyHeaderLabel;
		JRDesignTextField textField;
				
		final int headerLabelHeight = this.calcMaxHeaderHeight();
		headerBand.setHeight(headerLabelHeight);
		
		final int contentLabelHeight = this.calcMaxContentHeight();
		detailBand.setHeight(contentLabelHeight);
				
		final boolean createHeader = this.config.hasAnyHeader();
		
		int x = 0;
		
		for(final TemplateColumn col : this.config.getColumns())
		{
			// Header is created
			if(createHeader)
			{
				// If this column has a header the JRDesignStaticText get the
				// propertys of the Column
				if(col.hasHeaderColumn())
				{
					final HeaderColumn headerColumn = col.getHeaderColumn();
					// Build label and set x / y
					headerLabel = new JRDesignStaticText();
					headerLabel.setX(x);
					headerLabel.setWidth(col.getWidth());
					headerLabel.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);
					
					headerLabel.setHeight(headerLabelHeight);
					this.setStlyeForTextField(headerLabel,headerColumn.getStyle());
					this.prepareTextfieldWithBorder(headerLabel,headerColumn.getStyle());
					this.prepareTextfieldPadding(headerLabel,headerColumn.getStyle());
					
					headerLabel.setPositionType(PositionTypeEnum.FLOAT);

					
					// Get the Property
					headerLabel.setText(headerColumn.getProperty());
					headerBand.addElement(headerLabel);
				}
				else
				{
					// an empty label must be added to complete the layout
					// Build label and set x / y
					emptyHeaderLabel = new JRDesignStaticText();
					emptyHeaderLabel.setX(x);
					emptyHeaderLabel.setWidth(col.getWidth());
					headerBand.addElement(emptyHeaderLabel);
				}
			}
			
			final ContentColumn contentColumn = col.getContentColumn();
			
			textField = new JRDesignTextField();
			textField.setX(x);
			textField.setWidth(col.getWidth());
			textField.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);
			textField.setHeight(contentLabelHeight);
			
			this.setStlyeForTextField(textField,contentColumn.getStyle());
			textField.setPattern(contentColumn.getProperty());
			
			// box tag properties
			this.prepareTextfieldWithBorder(textField,contentColumn.getStyle());
			this.prepareTextfieldPadding(textField,contentColumn.getStyle());
			
			textField.setExpression(this.buildExpression(contentColumn));
			
			textField.setPositionType(PositionTypeEnum.FLOAT);
			
			if(this.config.isBlankWhenNullValue())
			{
				textField.setBlankWhenNull(true);
			}
			detailBand.addElement(textField);
			
			x += col.getWidth();
		}
		
	}
	
	private void setStlyeForTextField(final JRDesignTextElement txtField, final ColumnStyle style)
	{
		txtField.setBackcolor(style.getBackground());
		txtField.setForecolor(style.getForeground());
		// Font
		final Font f = style.getFont();
		txtField.setFontName(f.getName());
		txtField.setFontSize(Float.valueOf(f.getSize()));
		txtField.setBold(Boolean.valueOf(f.isBold()));
		txtField.setItalic(Boolean.valueOf(f.isItalic()));
		txtField.setHorizontalTextAlign(style.getHorizontalAlignment().getHorizontalTextAlignEnum());
		
		
		if(!style.getBackground().equals(Color.WHITE))
		{
			txtField.setMode(ModeEnum.OPAQUE);
		}
	}
	
	
	private void prepareTextfieldWithBorder(final JRDesignTextElement textField, final ColumnStyle style)
	{
		final ColumnBorder border = style.getColBorder();
		if(border == null)
		{
			return;
		}
		
		textField.getLineBox().getPen().setLineWidth(border.getLineWidth());
		textField.getLineBox().getPen().setLineColor(border.getLineColor());
		textField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());
	}
	
	private void prepareTextfieldPadding(final JRDesignTextElement textField, final ColumnStyle style)
	{
		final ColumnPadding colPadding = style.getColumnPadding();
		final JRLineBox lineBox = textField.getLineBox();
		
		
		lineBox.setTopPadding(colPadding.getTopWidth());
		lineBox.setRightPadding(colPadding.getRightWidth());
		lineBox.setLeftPadding(colPadding.getLeftWidth());
		lineBox.setBottomPadding(colPadding.getBottomWidth());
	}
	
	
	private JRDesignExpression buildExpression(final ContentColumn column)
	{
		final JRDesignExpression expression = new JRDesignExpression();
		expression.setText("$F{" + column.getFieldName() + "}");
		return expression;
	}
	
	
	/**
	 * 
	 * Assemble and compile a {@link JasperReport} based on the information of
	 * the {@link TemplateConfig} object.
	 * 
	 * @return the compiled {@link JasperReport}
	 * @throws ExportException
	 */
	public JasperReport assembleReport() throws ExportException
	{
		try
		{
			final JasperDesign jasperDesign = this.createDefaultDesign();
			this.createTemplateFields(jasperDesign);
			
			final JRDesignBand headerBand = this.initHeaderBand();
			final JRDesignBand detailBand = this.initDetailBand();
			
			this.createHeaderAndContent(headerBand,detailBand);
			
			((JRDesignSection)jasperDesign.getDetailSection()).addBand(detailBand);
			if(this.config.hasAnyHeader())
			{
				jasperDesign.setTitle(headerBand);
			}
						
			return JasperCompileManager.compileReport(jasperDesign);
		}
		catch(final Exception e)
		{
			throw new ExportException(e);
		}
	}
	
}


================================== Ai Message ==================================

```diff
--- src/main/java/xdev/tableexport/export/ReportBuilder.java
+++ src/main/java/xdev/tableexport/export/ReportBuilder.java
@@ -1,3 +1,3 @@
 package xdev.tableexport.export;
 
 /*-
- * #%L
+ * #%L
@@ -369,7 +369,7 @@
 			textField.getLineBox().getPen().setLineWidth(border.getLineWidth());
-			textField.getLineBox().getPen().setLineWidth(border.getLineWidth());
+			textField.getLineBox().getPen().setLineWidth((float) border.getLineWidth());
 			textField.getLineBox().getPen().setLineColor(border.getLineColor());
 			textField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());
 		}
```
Tool Calls:
  compile_maven_stateful (KD6RM9TK8)
 Call ID: KD6RM9TK8
  Args:
    diff: ```diff
--- src/main/java/xdev/tableexport/export/ReportBuilder.java
+++ src/main/java/xdev/tableexport/export/ReportBuilder.java
@@ -1,3 +1,3 @@
 package xdev.tableexport.export;
 
 /*-
- * #%L
+ * #%L
@@ -369,7 +369,7 @@
 			textField.getLineBox().getPen().setLineWidth(border.getLineWidth());
-			textField.getLineBox().getPen().setLineWidth(border.getLineWidth());
+			textField.getLineBox().getPen().setLineWidth((float) border.getLineWidth());
 			textField.getLineBox().getPen().setLineColor(border.getLineColor());
 			textField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());
 		}
```

================================= Tool Message =================================

{"compilation_has_succeeded": true, "test_has_succeeded": true, "error_text": "", "updated_files": {"src/main/java/xdev/tableexport/export/ReportBuilder.java": "package xdev.tableexport.export;\n\n/*-\n * #%L\n * XDEV BI Suite\n * %%\n * Copyright (C) 2011 - 2020 XDEV Software\n * %%\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Lesser Public License for more details.\n * \n * You should have received a copy of the GNU General Lesser Public\n * License along with this program.  If not, see\n * <http://www.gnu.org/licenses/lgpl-3.0.html>.\n * #L%\n */\n\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.swing.JLabel;\n\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.JRLineBox;\nimport net.sf.jasperreports.engine.JasperCompileManager;\nimport net.sf.jasperreports.engine.JasperReport;\nimport net.sf.jasperreports.engine.design.JRDesignBand;\nimport net.sf.jasperreports.engine.design.JRDesignExpression;\nimport net.sf.jasperreports.engine.design.JRDesignField;\nimport net.sf.jasperreports.engine.design.JRDesignSection;\nimport net.sf.jasperreports.engine.design.JRDesignStaticText;\nimport net.sf.jasperreports.engine.design.JRDesignTextElement;\nimport net.sf.jasperreports.engine.design.JRDesignTextField;\nimport net.sf.jasperreports.engine.design.JasperDesign;\nimport net.sf.jasperreports.engine.type.ModeEnum;\nimport net.sf.jasperreports.engine.type.PositionTypeEnum;\nimport net.sf.jasperreports.engine.type.SplitTypeEnum;\nimport xdev.tableexport.config.ColumnBorder;\nimport xdev.tableexport.config.ColumnPadding;\nimport xdev.tableexport.config.ColumnStyle;\nimport xdev.tableexport.config.ContentColumn;\nimport xdev.tableexport.config.HeaderColumn;\nimport xdev.tableexport.config.PageProperties;\nimport xdev.tableexport.config.TemplateColumn;\nimport xdev.tableexport.config.TemplateConfig;\nimport xdev.vt.XdevBlob;\nimport xdev.vt.XdevClob;\n\n\n/**\n * The {@link ReportBuilder} generates a {@link JasperReport} based on the\n * information of the {@link TemplateConfig}.\n * \n * @author XDEV Software (FHAE)\n * \n * @see TemplateConfig\n * @see ReportExporter\n * \n */\npublic class ReportBuilder\n{\n private final TemplateConfig\t\t\tconfig;\n private final Set<JRDesignField>\t\tfieldSet\t= new HashSet<>();\n \n \n public ReportBuilder(final TemplateConfig tempConfig)\n {\n  this.config = tempConfig;\n }\n \n \n private JRDesignBand initDetailBand()\n {\n  final JRDesignBand detailBand = new JRDesignBand();\n  detailBand.setHeight(TemplateConfig.DEFAULT_DETAIL_BAND_HEIGHT);\n  detailBand.setSplitType(SplitTypeEnum.STRETCH);\n  \n  return detailBand;\n }\n \n \n private JRDesignBand initHeaderBand()\n {\n  // Header\n  final JRDesignBand headerBand = new JRDesignBand();\n  headerBand.setHeight(TemplateConfig.DEFAULT_HEADER_BAND_HEIGHT);\n  \n  return headerBand;\n }\n \n \n private JasperDesign createDefaultDesign()\n {\n  final JasperDesign jasperDesign = new JasperDesign();\n  jasperDesign.setName(\"DefaultDesign\");\n  final PageProperties properties = this.config.getPageProperties();\n  \n  jasperDesign.setPageWidth(this.calcPageWidth(properties));\n  jasperDesign.setColumnWidth(this.calcColumnsWidth());\n  \n  jasperDesign.setPageHeight(properties.getPageHeight());\n  jasperDesign.setColumnSpacing(properties.getColumnSpacing());\n  jasperDesign.setLeftMargin(properties.getLeftMargin());\n  jasperDesign.setRightMargin(properties.getRightMargin());\n  jasperDesign.setTopMargin(properties.getTopMargin());\n  jasperDesign.setBottomMargin(properties.getBottomMargin());\n  \n  return jasperDesign;\n }\n \n \n private int calcColumnsWidth()\n {\n  int width = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   width += col.getWidth();\n  }\n  \n  return width;\n }\n\n /***\n  * Calculated the page width including the margins.\n  * \n  * @param properties\n  * \n  * @return\n  */\n private int calcPageWidth(final PageProperties properties)\n {\n  int width = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   width += col.getWidth();\n  }\n  \n  width += properties.getLeftMargin() + properties.getRightMargin();\n  \n  return width;\n }\n \n \n /**\n  * \n  * @return\n  */\n private int calcMaxHeaderHeight()\n {\n  \n  final JLabel lbl = new JLabel(\"a\");\n  int maxHeight = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   final ColumnStyle style = col.getHeaderColumn().getStyle();\n   final Font font = style.getFont();\n   lbl.setFont(font);\n   //get the normal height of the label\n   int lblHeigh = (int)lbl.getPreferredSize().getHeight();\n   //add the column border width\n   lblHeigh+= style.getColBorder().getLineWidth()*2;\n   //Add padding\n   lblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n   \n   if(lblHeigh > maxHeight)\n   {\n    maxHeight = lblHeigh;\n   }\n  }\n  \n  return maxHeight;\n }\n \n private int calcMaxContentHeight()\n {\n  \n  final JLabel lbl = new JLabel(\"a\");\n  int maxHeight = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   final ColumnStyle style = col.getContentColumn().getStyle();\n   final Font font = style.getFont();\n   lbl.setFont(font);\n   int lblHeigh = (int)lbl.getPreferredSize().getHeight();\n   //Add border width\n   lblHeigh+= style.getColBorder().getLineWidth()*2;\n   //Add padding\n   lblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n   \n   if(lblHeigh > maxHeight)\n   {\n    maxHeight = lblHeigh;\n   }\n  }\n  \n  return maxHeight;\n }\n \n \n private void createTemplateFields(final JasperDesign jasperDesign) throws ExportException\n {\n  JRDesignField field;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   field = new JRDesignField();\n   field.setName(col.getContentColumn().getFieldName());\n   this.chooseValueClass(col,field);\n   \n   try\n   {\n    jasperDesign.addField(field);\n    this.fieldSet.add(field);\n   }\n   catch(final JRException e)\n   {\n    throw new ExportException(\"error during add the field \"\n      + col.getContentColumn().getFieldName(),e);\n   }\n  }\n  \n }\n\n \n private JRDesignField chooseValueClass(final TemplateColumn col, final JRDesignField field)\n {\n  final Class<?> valueClass = col.getContentColumn().getColumnValueClass();\n  \n  if(valueClass.isAssignableFrom(byte[].class) || valueClass.isAssignableFrom(XdevBlob.class) || valueClass.isAssignableFrom(XdevClob.class))\n  {\n   field.setValueClass(String.class);\n  }\n  else\n  {\n   field.setValueClass(valueClass);\n  }\n  \n  return field;\n }\n \n \n private void createHeaderAndContent(final JRDesignBand headerBand, final JRDesignBand detailBand)\n {\n  JRDesignStaticText headerLabel;\n  JRDesignStaticText emptyHeaderLabel;\n  JRDesignTextField textField;\n    \n  final int headerLabelHeight = this.calcMaxHeaderHeight();\n  headerBand.setHeight(headerLabelHeight);\n  \n  final int contentLabelHeight = this.calcMaxContentHeight();\n  detailBand.setHeight(contentLabelHeight);\n    \n  final boolean createHeader = this.config.hasAnyHeader();\n  \n  int x = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   // Header is created\n   if(createHeader)\n   {\n    // If this column has a header the JRDesignStaticText get the\n    // propertys of the Column\n    if(col.hasHeaderColumn())\n    {\n     final HeaderColumn headerColumn = col.getHeaderColumn();\n     // Build label and set x / y\n     headerLabel = new JRDesignStaticText();\n     headerLabel.setX(x);\n     headerLabel.setWidth(col.getWidth());\n     headerLabel.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n     \n     headerLabel.setHeight(headerLabelHeight);\n     this.setStlyeForTextField(headerLabel,headerColumn.getStyle());\n     this.prepareTextfieldWithBorder(headerLabel,headerColumn.getStyle());\n     this.prepareTextfieldPadding(headerLabel,headerColumn.getStyle());\n     \n     headerLabel.setPositionType(PositionTypeEnum.FLOAT);\n\n     \n     // Get the Property\n     headerLabel.setText(headerColumn.getProperty());\n     headerBand.addElement(headerLabel);\n    }\n    else\n    {\n     // an empty label must be added to complete the layout\n     // Build label and set x / y\n     emptyHeaderLabel = new JRDesignStaticText();\n     emptyHeaderLabel.setX(x);\n     emptyHeaderLabel.setWidth(col.getWidth());\n     headerBand.addElement(emptyHeaderLabel);\n    }\n   }\n   \n   final ContentColumn contentColumn = col.getContentColumn();\n   \n   textField = new JRDesignTextField();\n   textField.setX(x);\n   textField.setWidth(col.getWidth());\n   textField.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n   textField.setHeight(contentLabelHeight);\n   \n   this.setStlyeForTextField(textField,contentColumn.getStyle());\n   textField.setPattern(contentColumn.getProperty());\n   \n   // box tag properties\n   this.prepareTextfieldWithBorder(textField,contentColumn.getStyle());\n   this.prepareTextfieldPadding(textField,contentColumn.getStyle());\n   \n   textField.setExpression(this.buildExpression(contentColumn));\n   \n   textField.setPositionType(PositionTypeEnum.FLOAT);\n   \n   if(this.config.isBlankWhenNullValue())\n   {\n    textField.setBlankWhenNull(true);\n   }\n   detailBand.addElement(textField);\n   \n   x += col.getWidth();\n  }\n  \n }\n \n private void setStlyeForTextField(final JRDesignTextElement txtField, final ColumnStyle style)\n {\n  txtField.setBackcolor(style.getBackground());\n  txtField.setForecolor(style.getForeground());\n  // Font\n  final Font f = style.getFont();\n  txtField.setFontName(f.getName());\n  txtField.setFontSize(Float.valueOf(f.getSize()));\n  txtField.setBold(Boolean.valueOf(f.isBold()));\n  txtField.setItalic(Boolean.valueOf(f.isItalic()));\n  txtField.setHorizontalTextAlign(style.getHorizontalAlignment().getHorizontalTextAlignEnum());\n  \n  \n  if(!style.getBackground().equals(Color.WHITE))\n  {\n   txtField.setMode(ModeEnum.OPAQUE);\n  }\n }\n \n \n private void prepareTextfieldWithBorder(final JRDesignTextElement textField, final ColumnStyle style)\n {\n  final ColumnBorder border = style.getColBorder();\n  if(border == null)\n  {\n   return;\n  }\n  \ntextField.getLineBox().getPen().setLineWidth((float) border.getLineWidth());\n  textField.getLineBox().getPen().setLineColor(border.getLineColor());\n  textField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());\n }\n \n private void prepareTextfieldPadding(final JRDesignTextElement textField, final ColumnStyle style)\n {\n  final ColumnPadding colPadding = style.getColumnPadding();\n  final JRLineBox lineBox = textField.getLineBox();\n  \n  \n  lineBox.setTopPadding(colPadding.getTopWidth());\n  lineBox.setRightPadding(colPadding.getRightWidth());\n  lineBox.setLeftPadding(colPadding.getLeftWidth());\n  lineBox.setBottomPadding(colPadding.getBottomWidth());\n }\n \n \n private JRDesignExpression buildExpression(final ContentColumn column)\n {\n  final JRDesignExpression expression = new JRDesignExpression();\n  expression.setText(\"$F{\" + column.getFieldName() + \"}\");\n  return expression;\n }\n \n \n /**\n  * \n  * Assemble and compile a {@link JasperReport} based on the information of\n  * the {@link TemplateConfig} object.\n  * \n  * @return the compiled {@link JasperReport}\n  * @throws ExportException\n  */\n public JasperReport assembleReport() throws ExportException\n {\n  try\n  {\n   final JasperDesign jasperDesign = this.createDefaultDesign();\n   this.createTemplateFields(jasperDesign);\n   \n   final JRDesignBand headerBand = this.initHeaderBand();\n   final JRDesignBand detailBand = this.initDetailBand();\n   \n   this.createHeaderAndContent(headerBand,detailBand);\n   \n   ((JRDesignSection)jasperDesign.getDetailSection()).addBand(detailBand);\n   if(this.config.hasAnyHeader())\n   {\n    jasperDesign.setTitle(headerBand);\n   }\n      \n   return JasperCompileManager.compileReport(jasperDesign);\n  }\n  catch(final Exception e)\n  {\n   throw new ExportException(e);\n  }\n }\n \n}"}, "compile_error_details": {}}