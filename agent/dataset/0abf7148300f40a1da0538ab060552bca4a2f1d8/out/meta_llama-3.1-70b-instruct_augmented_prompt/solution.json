{"compilation_has_succeeded": true, "test_has_succeeded": true, "error_text": "", "updated_files": {"src/main/java/xdev/tableexport/export/ReportBuilder.java": "package xdev.tableexport.export;\n\n/*-\n * #%L\n * XDEV BI Suite\n * %%\n * Copyright (C) 2011 - 2020 XDEV Software\n * %%\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Lesser Public License for more details.\n * \n * You should have received a copy of the GNU General Lesser Public\n * License along with this program.  If not, see\n * <http://www.gnu.org/licenses/lgpl-3.0.html>.\n * #L%\n */\n\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.swing.JLabel;\n\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.JRLineBox;\nimport net.sf.jasperreports.engine.JasperCompileManager;\nimport net.sf.jasperreports.engine.JasperReport;\nimport net.sf.jasperreports.engine.design.JRDesignBand;\nimport net.sf.jasperreports.engine.design.JRDesignExpression;\nimport net.sf.jasperreports.engine.design.JRDesignField;\nimport net.sf.jasperreports.engine.design.JRDesignSection;\nimport net.sf.jasperreports.engine.design.JRDesignStaticText;\nimport net.sf.jasperreports.engine.design.JRDesignTextElement;\nimport net.sf.jasperreports.engine.design.JRDesignTextField;\nimport net.sf.jasperreports.engine.design.JasperDesign;\nimport net.sf.jasperreports.engine.type.ModeEnum;\nimport net.sf.jasperreports.engine.type.PositionTypeEnum;\nimport net.sf.jasperreports.engine.type.SplitTypeEnum;\nimport xdev.tableexport.config.ColumnBorder;\nimport xdev.tableexport.config.ColumnPadding;\nimport xdev.tableexport.config.ColumnStyle;\nimport xdev.tableexport.config.ContentColumn;\nimport xdev.tableexport.config.HeaderColumn;\nimport xdev.tableexport.config.PageProperties;\nimport xdev.tableexport.config.TemplateColumn;\nimport xdev.tableexport.config.TemplateConfig;\nimport xdev.vt.XdevBlob;\nimport xdev.vt.XdevClob;\n\n\n/**\n * The {@link ReportBuilder} generates a {@link JasperReport} based on the\n * information of the {@link TemplateConfig}.\n * \n * @author XDEV Software (FHAE)\n * \n * @see TemplateConfig\n * @see ReportExporter\n * \n */\npublic class ReportBuilder\n{\n private final TemplateConfig\t\t\tconfig;\n private final Set<JRDesignField>\t\tfieldSet\t= new HashSet<>();\n \n \n public ReportBuilder(final TemplateConfig tempConfig)\n {\n  this.config = tempConfig;\n }\n \n \n private JRDesignBand initDetailBand()\n {\n  final JRDesignBand detailBand = new JRDesignBand();\n  detailBand.setHeight(TemplateConfig.DEFAULT_DETAIL_BAND_HEIGHT);\n  detailBand.setSplitType(SplitTypeEnum.STRETCH);\n  \n  return detailBand;\n }\n \n \n private JRDesignBand initHeaderBand()\n {\n  // Header\n  final JRDesignBand headerBand = new JRDesignBand();\n  headerBand.setHeight(TemplateConfig.DEFAULT_HEADER_BAND_HEIGHT);\n  \n  return headerBand;\n }\n \n \n private JasperDesign createDefaultDesign()\n {\n  final JasperDesign jasperDesign = new JasperDesign();\n  jasperDesign.setName(\"DefaultDesign\");\n  final PageProperties properties = this.config.getPageProperties();\n  \n  jasperDesign.setPageWidth(this.calcPageWidth(properties));\n  jasperDesign.setColumnWidth(this.calcColumnsWidth());\n  \n  jasperDesign.setPageHeight(properties.getPageHeight());\n  jasperDesign.setColumnSpacing(properties.getColumnSpacing());\n  jasperDesign.setLeftMargin(properties.getLeftMargin());\n  jasperDesign.setRightMargin(properties.getRightMargin());\n  jasperDesign.setTopMargin(properties.getTopMargin());\n  jasperDesign.setBottomMargin(properties.getBottomMargin());\n  \n  return jasperDesign;\n }\n \n \n private int calcColumnsWidth()\n {\n  int width = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   width += col.getWidth();\n  }\n  \n  return width;\n }\n\n /***\n  * Calculated the page width including the margins.\n  * \n  * @param properties\n  * \n  * @return\n  */\n private int calcPageWidth(final PageProperties properties)\n {\n  int width = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   width += col.getWidth();\n  }\n  \n  width += properties.getLeftMargin() + properties.getRightMargin();\n  \n  return width;\n }\n \n \n /**\n  * \n  * @return\n  */\n private int calcMaxHeaderHeight()\n {\n  \n  final JLabel lbl = new JLabel(\"a\");\n  int maxHeight = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   final ColumnStyle style = col.getHeaderColumn().getStyle();\n   final Font font = style.getFont();\n   lbl.setFont(font);\n   //get the normal height of the label\n   int lblHeigh = (int)lbl.getPreferredSize().getHeight();\n   //add the column border width\n   lblHeigh+= style.getColBorder().getLineWidth()*2;\n   //Add padding\n   lblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n   \n   if(lblHeigh > maxHeight)\n   {\n    maxHeight = lblHeigh;\n   }\n  }\n  \n  return maxHeight;\n }\n \n private int calcMaxContentHeight()\n {\n  \n  final JLabel lbl = new JLabel(\"a\");\n  int maxHeight = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   final ColumnStyle style = col.getContentColumn().getStyle();\n   final Font font = style.getFont();\n   lbl.setFont(font);\n   int lblHeigh = (int)lbl.getPreferredSize().getHeight();\n   //Add border width\n   lblHeigh+= style.getColBorder().getLineWidth()*2;\n   //Add padding\n   lblHeigh+= style.getColumnPadding().getTopWidth() + style.getColumnPadding().getBottomWidth();\n   \n   if(lblHeigh > maxHeight)\n   {\n    maxHeight = lblHeigh;\n   }\n  }\n  \n  return maxHeight;\n }\n \n \n private void createTemplateFields(final JasperDesign jasperDesign) throws ExportException\n {\n  JRDesignField field;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   field = new JRDesignField();\n   field.setName(col.getContentColumn().getFieldName());\n   this.chooseValueClass(col,field);\n   \n   try\n   {\n    jasperDesign.addField(field);\n    this.fieldSet.add(field);\n   }\n   catch(final JRException e)\n   {\n    throw new ExportException(\"error during add the field \"\n      + col.getContentColumn().getFieldName(),e);\n   }\n  }\n  \n }\n\n \n private JRDesignField chooseValueClass(final TemplateColumn col, final JRDesignField field)\n {\n  final Class<?> valueClass = col.getContentColumn().getColumnValueClass();\n  \n  if(valueClass.isAssignableFrom(byte[].class) || valueClass.isAssignableFrom(XdevBlob.class) || valueClass.isAssignableFrom(XdevClob.class))\n  {\n   field.setValueClass(String.class);\n  }\n  else\n  {\n   field.setValueClass(valueClass);\n  }\n  \n  return field;\n }\n \n \n private void createHeaderAndContent(final JRDesignBand headerBand, final JRDesignBand detailBand)\n {\n  JRDesignStaticText headerLabel;\n  JRDesignStaticText emptyHeaderLabel;\n  JRDesignTextField textField;\n    \n  final int headerLabelHeight = this.calcMaxHeaderHeight();\n  headerBand.setHeight(headerLabelHeight);\n  \n  final int contentLabelHeight = this.calcMaxContentHeight();\n  detailBand.setHeight(contentLabelHeight);\n    \n  final boolean createHeader = this.config.hasAnyHeader();\n  \n  int x = 0;\n  \n  for(final TemplateColumn col : this.config.getColumns())\n  {\n   // Header is created\n   if(createHeader)\n   {\n    // If this column has a header the JRDesignStaticText get the\n    // propertys of the Column\n    if(col.hasHeaderColumn())\n    {\n     final HeaderColumn headerColumn = col.getHeaderColumn();\n     // Build label and set x / y\n     headerLabel = new JRDesignStaticText();\n     headerLabel.setX(x);\n     headerLabel.setWidth(col.getWidth());\n     headerLabel.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n     \n     headerLabel.setHeight(headerLabelHeight);\n     this.setStlyeForTextField(headerLabel,headerColumn.getStyle());\n     this.prepareTextfieldWithBorder(headerLabel,headerColumn.getStyle());\n     this.prepareTextfieldPadding(headerLabel,headerColumn.getStyle());\n     \n     headerLabel.setPositionType(PositionTypeEnum.FLOAT);\n\n     \n     // Get the Property\n     headerLabel.setText(headerColumn.getProperty());\n     headerBand.addElement(headerLabel);\n    }\n    else\n    {\n     // an empty label must be added to complete the layout\n     // Build label and set x / y\n     emptyHeaderLabel = new JRDesignStaticText();\n     emptyHeaderLabel.setX(x);\n     emptyHeaderLabel.setWidth(col.getWidth());\n     headerBand.addElement(emptyHeaderLabel);\n    }\n   }\n   \n   final ContentColumn contentColumn = col.getContentColumn();\n   \n   textField = new JRDesignTextField();\n   textField.setX(x);\n   textField.setWidth(col.getWidth());\n   textField.setY(TemplateConfig.DEFAULT_COMPONENT_Y_POSITION);\n   textField.setHeight(contentLabelHeight);\n   \n   this.setStlyeForTextField(textField,contentColumn.getStyle());\n   textField.setPattern(contentColumn.getProperty());\n   \n   // box tag properties\n   this.prepareTextfieldWithBorder(textField,contentColumn.getStyle());\n   this.prepareTextfieldPadding(textField,contentColumn.getStyle());\n   \n   textField.setExpression(this.buildExpression(contentColumn));\n   \n   textField.setPositionType(PositionTypeEnum.FLOAT);\n   \n   if(this.config.isBlankWhenNullValue())\n   {\n    textField.setBlankWhenNull(true);\n   }\n   detailBand.addElement(textField);\n   \n   x += col.getWidth();\n  }\n  \n }\n \n private void setStlyeForTextField(final JRDesignTextElement txtField, final ColumnStyle style)\n {\n  txtField.setBackcolor(style.getBackground());\n  txtField.setForecolor(style.getForeground());\n  // Font\n  final Font f = style.getFont();\n  txtField.setFontName(f.getName());\n  txtField.setFontSize(Float.valueOf(f.getSize()));\n  txtField.setBold(Boolean.valueOf(f.isBold()));\n  txtField.setItalic(Boolean.valueOf(f.isItalic()));\n  txtField.setHorizontalTextAlign(style.getHorizontalAlignment().getHorizontalTextAlignEnum());\n  \n  \n  if(!style.getBackground().equals(Color.WHITE))\n  {\n   txtField.setMode(ModeEnum.OPAQUE);\n  }\n }\n \n \n private void prepareTextfieldWithBorder(final JRDesignTextElement textField, final ColumnStyle style)\n {\n  final ColumnBorder border = style.getColBorder();\n  if(border == null)\n  {\n   return;\n  }\n  \ntextField.getLineBox().getPen().setLineWidth(Float.valueOf(border.getLineWidth()));\n  textField.getLineBox().getPen().setLineColor(border.getLineColor());\n  textField.getLineBox().getPen().setLineStyle(border.getLineStyle().getLineStyleEnum());\n }\n \n private void prepareTextfieldPadding(final JRDesignTextElement textField, final ColumnStyle style)\n {\n  final ColumnPadding colPadding = style.getColumnPadding();\n  final JRLineBox lineBox = textField.getLineBox();\n  \n  \n  lineBox.setTopPadding(colPadding.getTopWidth());\n  lineBox.setRightPadding(colPadding.getRightWidth());\n  lineBox.setLeftPadding(colPadding.getLeftWidth());\n  lineBox.setBottomPadding(colPadding.getBottomWidth());\n }\n \n \n private JRDesignExpression buildExpression(final ContentColumn column)\n {\n  final JRDesignExpression expression = new JRDesignExpression();\n  expression.setText(\"$F{\" + column.getFieldName() + \"}\");\n  return expression;\n }\n \n \n /**\n  * \n  * Assemble and compile a {@link JasperReport} based on the information of\n  * the {@link TemplateConfig} object.\n  * \n  * @return the compiled {@link JasperReport}\n  * @throws ExportException\n  */\n public JasperReport assembleReport() throws ExportException\n {\n  try\n  {\n   final JasperDesign jasperDesign = this.createDefaultDesign();\n   this.createTemplateFields(jasperDesign);\n   \n   final JRDesignBand headerBand = this.initHeaderBand();\n   final JRDesignBand detailBand = this.initDetailBand();\n   \n   this.createHeaderAndContent(headerBand,detailBand);\n   \n   ((JRDesignSection)jasperDesign.getDetailSection()).addBand(detailBand);\n   if(this.config.hasAnyHeader())\n   {\n    jasperDesign.setTitle(headerBand);\n   }\n      \n   return JasperCompileManager.compileReport(jasperDesign);\n  }\n  catch(final Exception e)\n  {\n   throw new ExportException(e);\n  }\n }\n \n}"}, "compile_error_details": {}}