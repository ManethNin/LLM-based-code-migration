{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -10,8 +10,8 @@\n import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n import org.eclipse.jetty.server.Connector;\n+import org.eclipse.jetty.server.ServerConnector;\n \n public class JettyStubHttpServer implements StubHttpServer {\n \n@@ -31,18 +31,15 @@\n     this.server = new Server();\n \n     //server.setSendServerVersion(false);\n-    //server.setSendDateHeader(false);\n+    //server.setStopAtShutdown(false);\n \n-    Connector httpConnector = new SelectChannelConnector();\n+    ServerConnector httpConnector = new ServerConnector(server);\n     httpConnector.setHost(\"localhost\");\n-    httpConnector.setPort(port);\n+    httpConnector.setPort(this.port);\n     server.addConnector(httpConnector);\n \n     server.setHandler(new JadlerHandler(this));\n     server.start();\n-\n-    //httpConnector = server.getConnectors()[0];\n-    this.port = httpConnector.getLocalPort();\n+    this.port = httpConnector.getLocalPort(); \n   }\n \n   @Override\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 19 exact lines in a row:\n```\nthis.server = new Server();\n//server.setSendServerVersion(false);\n//server.setSendDateHeader(false);\nConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setHost(\"localhost\");\nhttpConnector.setPort(port);\nserver.addConnector(httpConnector);\nserver.setHandler(new JadlerHandler(this));\nserver.start();\n//httpConnector = server.getConnectors()[0];\nthis.port = httpConnector.getLocalPort();\n}\n@Override\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 19 exact lines in a row:\n```\nthis.server = new Server();\n//server.setSendServerVersion(false);\n//server.setSendDateHeader(false);\nConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setHost(\"localhost\");\nhttpConnector.setPort(port);\nserver.addConnector(httpConnector);\nserver.setHandler(new JadlerHandler(this));\nserver.start();\n//httpConnector = server.getConnectors()[0];\nthis.port = httpConnector.getLocalPort();\n}\n@Override\n```",
            "span_id": 7612492831244223759
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -28,20 +28,18 @@\n   public void start() throws Exception {\n     this.port = port;\n \n-    this.server = new Server();\n+    server = new Server();\n \n-    //server.setSendServerVersion(false);\n-    //server.setStopAtShutdown(false);\n+    // server.setSendServerVersion(false);\n+    // server.setStopAtShutdown(false);\n \n     ServerConnector httpConnector = new ServerConnector(server);\n     httpConnector.setHost(\"localhost\");\n-    httpConnector.setPort(this.port);\n+    httpConnector.setPort(port);\n     server.addConnector(httpConnector);\n \n     server.setHandler(new JadlerHandler(this));\n     server.start();\n-    this.port = httpConnector.getLocalPort(); \n+    this.port = httpConnector.getLocalPort();\n   }\n \n   @Override\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 20 exact lines in a row:\n```\npublic void start() throws Exception {\nthis.port = port;\nthis.server = new Server();\n//server.setSendServerVersion(false);\n//server.setStopAtShutdown(false);\nServerConnector httpConnector = new ServerConnector(server);\nhttpConnector.setHost(\"localhost\");\nhttpConnector.setPort(this.port);\nserver.addConnector(httpConnector);\nserver.setHandler(new JadlerHandler(this));\nserver.start();\nthis.port = httpConnector.getLocalPort();\n}\n@Override\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 20 exact lines in a row:\n```\npublic void start() throws Exception {\nthis.port = port;\nthis.server = new Server();\n//server.setSendServerVersion(false);\n//server.setStopAtShutdown(false);\nServerConnector httpConnector = new ServerConnector(server);\nhttpConnector.setHost(\"localhost\");\nhttpConnector.setPort(this.port);\nserver.addConnector(httpConnector);\nserver.setHandler(new JadlerHandler(this));\nserver.start();\nthis.port = httpConnector.getLocalPort();\n}\n@Override\n```",
            "span_id": 3763657159008266264
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -28,10 +28,9 @@\n   public void start() throws Exception {\n     this.port = port;\n \n-    server = new Server();\n+    this.server = new Server();\n \n-    // server.setSendServerVersion(false);\n-    // server.setStopAtShutdown(false);\n+    \n \n     ServerConnector httpConnector = new ServerConnector(server);\n     httpConnector.setHost(\"localhost\");\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 11 exact lines in a row:\n```\npublic void start() throws Exception {\nthis.port = port;\nserver = new Server();\n// server.setSendServerVersion(false);\n// server.setStopAtShutdown(false);\nServerConnector httpConnector = new ServerConnector(server);\nhttpConnector.setHost(\"localhost\");\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 11 exact lines in a row:\n```\npublic void start() throws Exception {\nthis.port = port;\nserver = new Server();\n// server.setSendServerVersion(false);\n// server.setStopAtShutdown(false);\nServerConnector httpConnector = new ServerConnector(server);\nhttpConnector.setHost(\"localhost\");\n```",
            "span_id": 4065550360666805424
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -30,7 +30,6 @@\n \n     this.server = new Server();\n \n-    \n \n     ServerConnector httpConnector = new ServerConnector(server);\n     httpConnector.setHost(\"localhost\");\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: method does not override or implement a method from a supertype\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "12": {
                            "lines": [
                                {
                                    "line_no": 11,
                                    "content": "import org.eclipse.jetty.server.Server;"
                                },
                                {
                                    "line_no": 12,
                                    "content": "import org.eclipse.jetty.server.nio.SelectChannelConnector;"
                                },
                                {
                                    "line_no": 13,
                                    "content": "import org.slf4j.Logger;"
                                }
                            ],
                            "error_texts": [
                                "[12,35] error: package org.eclipse.jetty.server.nio does not exist\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                },
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[33,19] error: cannot find symbol\n",
                                "[33,19] error: cannot find symbol\nsymbol: method setSendServerVersion(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 35,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[34,19] error: cannot find symbol\n",
                                "[34,19] error: cannot find symbol\nsymbol: method setSendDateHeader(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": ""
                                },
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[36,33] error: cannot find symbol\n",
                                "[36,33] error: cannot find symbol\nsymbol: class SelectChannelConnector\nlocation: class JettyStubHttpServer\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                }
                            ],
                            "error_texts": [
                                "[37,26] error: cannot find symbol\nsymbol: method setPort(int)\nlocation: variable httpConnector of type Connector\n",
                                "[37,26] error: cannot find symbol\n"
                            ]
                        },
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 80,
                                    "content": "        return httpConnector.getLocalPort();"
                                },
                                {
                                    "line_no": 81,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[80,28] error: cannot find symbol\n",
                                "[80,28] error: cannot find symbol\nsymbol: method getLocalPort()\nlocation: variable httpConnector of type Connector\n"
                            ]
                        }
                    },
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": {
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": " */"
                                },
                                {
                                    "line_no": 25,
                                    "content": "class JadlerHandler extends AbstractHandler {"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: JadlerHandler is not abstract and does not override abstract method handle(String,Request,HttpServletRequest,HttpServletResponse) in AbstractHandler\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": ""
                                },
                                {
                                    "line_no": 39,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 40,
                                    "content": "    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,"
                                }
                            ],
                            "error_texts": [
                                "[39,4] error: method does not override or implement a method from a supertype\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: method does not override or implement a method from a supertype\n",
            "span_id": 7804115326467341080
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -10,7 +10,6 @@\n import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.ServerConnector;\n \n@@ -19,7 +18,6 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n-    private final Connector httpConnector;\n     private int port;\n \n     public JettyStubHttpServer() {\n@@ -28,14 +26,12 @@\n \n     public JettyStubHttpServer(final int port) {\n-        this.server = new Server();\n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(true);\n+        this.port = port;\n \n-        this.httpConnector = new SelectChannelConnector();\n-        this.httpConnector.setPort(port);\n-        server.addConnector(this.httpConnector);\n+        this.server = new Server();\n+\n+        ServerConnector httpConnector = new ServerConnector(server);\n+        httpConnector.setHost(\"localhost\");\n+        httpConnector.setPort(port);\n+        server.addConnector(httpConnector);\n     }\n \n \n@@ -46,7 +42,7 @@\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \\\"ruleProvider cannot be null\\\");\n \n-        server.setHandler(new JadlerHandler(ruleProvider));\n+        this.server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n@@ -54,8 +50,9 @@\n      * {@inheritDoc}\\n     */\n     @Override\n     public void start() throws Exception {\n-        logger.debug(\\\"starting jetty\\\");\n-        server.start();\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n         logger.debug(\\\"jetty started\\\");\n     }\n \n@@ -64,7 +61,7 @@\n      */\n     @Override\n     public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        this.port = -1;\n         server.stop();\n         logger.debug(\\\"jetty stopped\\\");\n     }\n@@ -75,7 +72,7 @@\n      */\n     @Override\n     public int getPort() {\n-        return httpConnector.getLocalPort();\n+        return this.port;\n     }\n }\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -1,6 +1,8 @@\n package net.jadler.stubbing.server.jetty;\n \n+import net.jadler.RequestManager;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n+import org.eclipse.jetty.server.Request;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n@@ -9,10 +11,12 @@\n \n import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n \n-class JadlerHandler extends AbstractHandler {\n+class JadlerHandler extends AbstractHandler  {\n \n     private final RequestManager requestManager;\n \n+    public JadlerHandler(final RequestManager requestManager) {\n+        this.requestManager = requestManager;\n+    }\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n-        logger.debug(\\\"starting jetty\\\");\n-        server.start();\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        this.port = -1;\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return this.port;\n    }\n}\n"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\\\"starting jetty\\\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "-        server.start();"
                                }
                            ],
                            "error_texts": [
                                "[58,23] error: unclosed string literal\n",
                                "[58,22] error: illegal character: '\\'\n",
                                "[58,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-        server.start();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "72": {
                            "lines": [
                                {
                                    "line_no": 71,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 72,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 73,
                                    "content": "+        this.port = -1;"
                                }
                            ],
                            "error_texts": [
                                "[72,] error: not a statement\n",
                                "[72,23] error: unclosed string literal\n",
                                "[72,22] error: illegal character: '\\'\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 3639113414912321363
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -50,9 +50,9 @@\n      */\n     @Override\n     public void start() throws Exception {\n+        logger.debug(\"starting jetty\");\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n         this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n-        logger.debug(\\\"jetty started\\\");\n     }\n \n \n@@ -63,7 +63,7 @@\n     public void stop() throws Exception {\n         this.port = -1;\n         server.stop();\n-        logger.debug(\\\"jetty stopped\\\");\n+        logger.debug(\"jetty stopped\");\n     }\n \n \n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 10 exact lines in a row:\n```\n*/\n@Override\npublic void start() throws Exception {\nthis.server.setHandler(new JadlerHandler(this));\nthis.server.start();\nthis.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\nlogger.debug(\\\"jetty started\\\");\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 8 exact lines in a row:\n```\npublic void stop() throws Exception {\nthis.port = -1;\nserver.stop();\nlogger.debug(\\\"jetty stopped\\\");\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 10 exact lines in a row:\n```\n*/\n@Override\npublic void start() throws Exception {\nthis.server.setHandler(new JadlerHandler(this));\nthis.server.start();\nthis.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\nlogger.debug(\\\"jetty started\\\");\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 8 exact lines in a row:\n```\npublic void stop() throws Exception {\nthis.port = -1;\nserver.stop();\nlogger.debug(\\\"jetty stopped\\\");\n}\n```",
            "span_id": 16161477124695576596
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -50,6 +50,7 @@\n      */\n     @Override\n     public void start() throws Exception {\n+\n         logger.debug(\"starting jetty\");\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n@@ -61,6 +62,7 @@\n      */\n     @Override\n     public void stop() throws Exception {\n+\n         this.port = -1;\n         server.stop();\n         logger.debug(\"jetty stopped\");\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n\n-        logger.debug(\\\"starting jetty\\\");\n-        server.start();\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        \nthis.port = -1;\n        server.stop();\n        logger.debug(\"jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return this.port;\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-        logger.debug(\\\"starting jetty\\\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-        server.start();"
                                }
                            ],
                            "error_texts": [
                                "[59,] error: not a statement\n",
                                "[59,23] error: unclosed string literal\n",
                                "[59,22] error: illegal character: '\\'\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-        server.start();"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 63,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[62,] error: not a statement\n"
                            ]
                        },
                        "73": {
                            "lines": [
                                {
                                    "line_no": 72,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 73,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 74,
                                    "content": "+        "
                                }
                            ],
                            "error_texts": [
                                "[73,22] error: illegal character: '\\'\n",
                                "[73,] error: not a statement\n",
                                "[73,23] error: unclosed string literal\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 7624305828199004122
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -51,7 +51,7 @@\n     @Override\n     public void start() throws Exception {\n \n-        logger.debug(\"starting jetty\");\n+        logger.debug(\"Starting jetty\");\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n         this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n@@ -65,7 +65,7 @@\n \n         this.port = -1;\n         server.stop();\n-        logger.debug(\"jetty stopped\");\n+        logger.debug(\"Jetty stopped\");\n     }\n \n \n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n\n-        logger.debug(\"starting jetty\");\n+        logger.debug(\"Starting jetty\");\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        \nthis.port = -1;\n        server.stop();\nlogger.debug(\"Jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return this.port;\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        logger.debug(\"Starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        logger.debug(\"Starting jetty\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "+        logger.debug(\"Starting jetty\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 63,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[62,] error: not a statement\n"
                            ]
                        },
                        "73": {
                            "lines": [
                                {
                                    "line_no": 72,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 73,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 74,
                                    "content": "+        "
                                }
                            ],
                            "error_texts": [
                                "[73,22] error: illegal character: '\\'\n",
                                "[73,] error: not a statement\n",
                                "[73,23] error: unclosed string literal\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 5526004378382800162
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -51,7 +51,7 @@\n     @Override\n     public void start() throws Exception {\n \n-        logger.debug(\"Starting jetty\");\n+        logger.debug(\"starting jetty\");\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n         this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n@@ -65,7 +65,7 @@\n \n         this.port = -1;\n         server.stop();\n-        logger.debug(\"Jetty stopped\");\n+        logger.debug(\"jetty stopped\");\n     }\n \n \n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n\n-        logger.debug(\"starting jetty\");\n+        logger.debug(\"starting jetty\");\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        \nthis.port = -1;\n        server.stop();\nlogger.debug(\"jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return this.port;\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 63,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[62,] error: not a statement\n"
                            ]
                        },
                        "73": {
                            "lines": [
                                {
                                    "line_no": 72,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 73,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 74,
                                    "content": "+        "
                                }
                            ],
                            "error_texts": [
                                "[73,22] error: illegal character: '\\'\n",
                                "[73,] error: not a statement\n",
                                "[73,23] error: unclosed string literal\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 6730518019254880646
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -50,7 +50,6 @@\n      */\n     @Override\n     public void start() throws Exception {\n-\n         logger.debug(\"starting jetty\");\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n@@ -62,7 +61,6 @@\n      */\n     @Override\n     public void stop() throws Exception {\n-\n         this.port = -1;\n         server.stop();\n         logger.debug(\"jetty stopped\");\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n-        logger.debug(\"starting jetty\");\n+        logger.debug(\"starting jetty\");\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        this.port = -1;\n        server.stop();\nlogger.debug(\"jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return this.port;\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[58,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                }
                            ],
                            "error_texts": [
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "72": {
                            "lines": [
                                {
                                    "line_no": 71,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 72,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 73,
                                    "content": "+        this.port = -1;"
                                }
                            ],
                            "error_texts": [
                                "[72,] error: not a statement\n",
                                "[72,23] error: unclosed string literal\n",
                                "[72,22] error: illegal character: '\\'\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 310822305505699162
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -51,7 +51,7 @@\n      */\n     @Override\n     public void start() throws Exception {\n-        logger.debug(\"starting jetty\");\n+        logger.debug(\"Starting jetty\");\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n         this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n@@ -63,7 +63,7 @@\n     public void stop() throws Exception {\n         this.port = -1;\n         server.stop();\n-        logger.debug(\"jetty stopped\");\n+        logger.debug(\"Jetty stopped\");\n     }\n \n \n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n-        logger.debug(\"Starting jetty\");\n+        logger.debug(\"Starting jetty\");\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        this.port = -1;\n        server.stop();\nlogger.debug(\"Jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return this.port;\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"Starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"Starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[58,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"Starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"Starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                }
                            ],
                            "error_texts": [
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"Starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "72": {
                            "lines": [
                                {
                                    "line_no": 71,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 72,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 73,
                                    "content": "+        this.port = -1;"
                                }
                            ],
                            "error_texts": [
                                "[72,] error: not a statement\n",
                                "[72,23] error: unclosed string literal\n",
                                "[72,22] error: illegal character: '\\'\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 257197508836319666
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -51,10 +51,10 @@\n      */\n     @Override\n     public void start() throws Exception {\n-        logger.debug(\"Starting jetty\");\n+        logger.debug(\"starting jetty\");\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n         this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n+        logger.debug(\"jetty started on port {}\", this.port);\n     }\n \n \n@@ -63,7 +63,7 @@\n     public void stop() throws Exception {\n         this.port = -1;\n         server.stop();\n-        logger.debug(\"Jetty stopped\");\n+        logger.debug(\"jetty stopped\");\n     }\n \n \n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n-        logger.debug(\"starting jetty\");\n+        logger.debug(\"starting jetty\");\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started on port {}\", this.port);\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        this.port = -1;\n        server.stop();\nlogger.debug(\"jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return this.port;\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[58,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                }
                            ],
                            "error_texts": [
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "73": {
                            "lines": [
                                {
                                    "line_no": 72,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 73,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 74,
                                    "content": "+        this.port = -1;"
                                }
                            ],
                            "error_texts": [
                                "[73,22] error: illegal character: '\\'\n",
                                "[73,] error: not a statement\n",
                                "[73,23] error: unclosed string literal\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 12681840903568518535
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -55,7 +55,6 @@\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n         this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n-        logger.debug(\"jetty started on port {}\", this.port);\n     }\n \n \n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n-        logger.debug(\"starting jetty\");\n+        logger.debug(\"starting jetty\");\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        this.port = -1;\n        server.stop();\nlogger.debug(\"jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return this.port;\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[58,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                }
                            ],
                            "error_texts": [
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "72": {
                            "lines": [
                                {
                                    "line_no": 71,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 72,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 73,
                                    "content": "+        this.port = -1;"
                                }
                            ],
                            "error_texts": [
                                "[72,] error: not a statement\n",
                                "[72,23] error: unclosed string literal\n",
                                "[72,22] error: illegal character: '\\'\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 1218278310022106540
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -50,6 +50,7 @@\n      */\n     @Override\n     public void start() throws Exception {\n+\n         logger.debug(\"starting jetty\");\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n@@ -61,6 +62,7 @@\n      */\n     @Override\n     public void stop() throws Exception {\n+\n         this.port = -1;\n         server.stop();\n         logger.debug(\"jetty stopped\");\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n\n-        logger.debug(\"starting jetty\");\n+        logger.debug(\"starting jetty\");\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        \nthis.port = -1;\n        server.stop();\nlogger.debug(\"jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return this.port;\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 63,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[62,] error: not a statement\n"
                            ]
                        },
                        "73": {
                            "lines": [
                                {
                                    "line_no": 72,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 73,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 74,
                                    "content": "+        "
                                }
                            ],
                            "error_texts": [
                                "[73,22] error: illegal character: '\\'\n",
                                "[73,] error: not a statement\n",
                                "[73,23] error: unclosed string literal\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 8641883364354914996
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -50,7 +50,6 @@\n      */\n     @Override\n     public void start() throws Exception {\n-\n         logger.debug(\"starting jetty\");\n         this.server.setHandler(new JadlerHandler(this));\n         this.server.start();\n@@ -62,7 +61,6 @@\n      */\n     @Override\n     public void stop() throws Exception {\n-\n         this.port = -1;\n         server.stop();\n         logger.debug(\"jetty stopped\");\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: unclosed string literal\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private int port;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.port = port;\n\n        this.server = new Server();\n\n        ServerConnector httpConnector = new ServerConnector(server);\n        httpConnector.setHost(\"localhost\");\n        httpConnector.setPort(port);\n        server.addConnector(httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        this.server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n-        logger.debug(\"starting jetty\");\n+        logger.debug(\"starting jetty\");\n+        this.server.setHandler(new JadlerHandler(this));\n+        this.server.start();\n+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n-        logger.debug(\\\"stopping jetty\\\");\n+        this.port = -1;\n        server.stop();\nlogger.debug(\"jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return this.port;\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[58,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "-        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                }
                            ],
                            "error_texts": [
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "+        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "+        this.server.setHandler(new JadlerHandler(this));"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+        this.server.start();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+        this.port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "72": {
                            "lines": [
                                {
                                    "line_no": 71,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 72,
                                    "content": "-        logger.debug(\\\"stopping jetty\\\");"
                                },
                                {
                                    "line_no": 73,
                                    "content": "+        this.port = -1;"
                                }
                            ],
                            "error_texts": [
                                "[72,] error: not a statement\n",
                                "[72,23] error: unclosed string literal\n",
                                "[72,22] error: illegal character: '\\'\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: unclosed string literal\n",
            "span_id": 9843404817679984362
        }
    ],
    "read_file": [],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}