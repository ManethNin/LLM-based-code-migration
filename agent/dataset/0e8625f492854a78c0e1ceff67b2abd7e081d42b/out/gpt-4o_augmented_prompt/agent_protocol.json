{
    "validate_diffs": [
        {
            "input": "```diff\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n+import org.eclipse.jetty.server.handler.ContextHandler;\n+\nclass JadlerHandler extends AbstractHandler {\n-    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n+    @Override\n+    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n```\n\n```diff\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+\npublic class JettyStubHttpServer implements StubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n-    private final Connector httpConnector;\n+    private final ServerConnector httpConnector;\n    public JettyStubHttpServer() {\n        this(0);\n    }\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(true);\n-        this.httpConnector = new SelectChannelConnector();\n-        this.httpConnector.setPort(port);\n+        this.httpConnector = new ServerConnector(server);\n+        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n    @Override\n    public int getPort() {\n-        return httpConnector.getLocalPort();\n+        return httpConnector.getLocalPort();\n    }\n}\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\n\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 35 exact lines in a row:\n```\n   private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n   private final Server server;\n    private final Connector httpConnector;\n   public JettyStubHttpServer() {\n       this(0);\n   }\n   public JettyStubHttpServer(final int port) {\n       this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n       server.addConnector(this.httpConnector);\n   }\n   @Override\n   public void registerRequestManager(final RequestManager ruleProvider) {\n       Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n       server.setHandler(new JadlerHandler(ruleProvider));\n   }\n   @Override\n   public void start() throws Exception {\n       logger.debug(\"starting jetty\");\n       server.start();\n       logger.debug(\"jetty started\");\n   }\n   @Override\n   public void stop() throws Exception {\n       logger.debug(\"stopping jetty\");\n       server.stop();\n       logger.debug(\"jetty stopped\");\n   }\n   @Override\n   public int getPort() {\n        return httpConnector.getLocalPort();\n   }\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\n\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 35 exact lines in a row:\n```\n   private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n   private final Server server;\n    private final Connector httpConnector;\n   public JettyStubHttpServer() {\n       this(0);\n   }\n   public JettyStubHttpServer(final int port) {\n       this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n       server.addConnector(this.httpConnector);\n   }\n   @Override\n   public void registerRequestManager(final RequestManager ruleProvider) {\n       Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n       server.setHandler(new JadlerHandler(ruleProvider));\n   }\n   @Override\n   public void start() throws Exception {\n       logger.debug(\"starting jetty\");\n       server.start();\n       logger.debug(\"jetty started\");\n   }\n   @Override\n   public void stop() throws Exception {\n       logger.debug(\"stopping jetty\");\n       server.stop();\n       logger.debug(\"jetty stopped\");\n   }\n   @Override\n   public int getPort() {\n        return httpConnector.getLocalPort();\n   }\n```\n",
            "span_id": 15851199708270076591
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n+import org.eclipse.jetty.server.handler.ContextHandler;\n+\nclass JadlerHandler extends AbstractHandler {\n-    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n+    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n```\n\n```diff\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+\npublic class JettyStubHttpServer implements StubHttpServer {\n    private final Server server;\n-    private final Connector httpConnector;\n+    private final ServerConnector httpConnector;\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(true);\n-        this.httpConnector = new SelectChannelConnector();\n-        this.httpConnector.setPort(port);\n+        this.httpConnector = new ServerConnector(server);\n+        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n    @Override\n    public int getPort() {\n-        return httpConnector.getLocalPort();\n+        return httpConnector.getLocalPort();\n    }\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 14 exact lines in a row:\n```\nprivate final Server server;\nprivate final Connector httpConnector;\npublic JettyStubHttpServer(final int port) {\nthis.server = new Server();\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(true);\nthis.httpConnector = new SelectChannelConnector();\nthis.httpConnector.setPort(port);\nserver.addConnector(this.httpConnector);\n}\n@Override\npublic int getPort() {\nreturn httpConnector.getLocalPort();\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 14 exact lines in a row:\n```\nprivate final Server server;\nprivate final Connector httpConnector;\npublic JettyStubHttpServer(final int port) {\nthis.server = new Server();\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(true);\nthis.httpConnector = new SelectChannelConnector();\nthis.httpConnector.setPort(port);\nserver.addConnector(this.httpConnector);\n}\n@Override\npublic int getPort() {\nreturn httpConnector.getLocalPort();\n}\n```",
            "span_id": 8733547152408829935
        },
        {
            "input": "```diff\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n+import org.eclipse.jetty.server.handler.ContextHandler;\n+\nclass JadlerHandler extends AbstractHandler {\n-    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n+    @Override\n+    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n```\n\n```diff\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+\npublic class JettyStubHttpServer implements StubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n-    private final Connector httpConnector;\n+    private final ServerConnector httpConnector;\n    public JettyStubHttpServer() {\n        this(0);\n    }\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(true);\n-        this.httpConnector = new SelectChannelConnector();\n-        this.httpConnector.setPort(port);\n+        this.httpConnector = new ServerConnector(server);\n+        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n    @Override\n    public int getPort() {\n-        return httpConnector.getLocalPort();\n+        return httpConnector.getLocalPort();\n    }\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 35 exact lines in a row:\n```\nprivate static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\nprivate final Server server;\nprivate final Connector httpConnector;\npublic JettyStubHttpServer() {\nthis(0);\n}\npublic JettyStubHttpServer(final int port) {\nthis.server = new Server();\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(true);\nthis.httpConnector = new SelectChannelConnector();\nthis.httpConnector.setPort(port);\nserver.addConnector(this.httpConnector);\n}\n@Override\npublic void registerRequestManager(final RequestManager ruleProvider) {\nValidate.notNull(ruleProvider, \"ruleProvider cannot be null\");\nserver.setHandler(new JadlerHandler(ruleProvider));\n}\n@Override\npublic void start() throws Exception {\nlogger.debug(\"starting jetty\");\nserver.start();\nlogger.debug(\"jetty started\");\n}\n@Override\npublic void stop() throws Exception {\nlogger.debug(\"stopping jetty\");\nserver.stop();\nlogger.debug(\"jetty stopped\");\n}\n@Override\npublic int getPort() {\nreturn httpConnector.getLocalPort();\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 35 exact lines in a row:\n```\nprivate static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\nprivate final Server server;\nprivate final Connector httpConnector;\npublic JettyStubHttpServer() {\nthis(0);\n}\npublic JettyStubHttpServer(final int port) {\nthis.server = new Server();\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(true);\nthis.httpConnector = new SelectChannelConnector();\nthis.httpConnector.setPort(port);\nserver.addConnector(this.httpConnector);\n}\n@Override\npublic void registerRequestManager(final RequestManager ruleProvider) {\nValidate.notNull(ruleProvider, \"ruleProvider cannot be null\");\nserver.setHandler(new JadlerHandler(ruleProvider));\n}\n@Override\npublic void start() throws Exception {\nlogger.debug(\"starting jetty\");\nserver.start();\nlogger.debug(\"jetty started\");\n}\n@Override\npublic void stop() throws Exception {\nlogger.debug(\"stopping jetty\");\nserver.stop();\nlogger.debug(\"jetty stopped\");\n}\n@Override\npublic int getPort() {\nreturn httpConnector.getLocalPort();\n}\n```",
            "span_id": 17502504827678286449
        },
        {
            "input": "```diff\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n+import org.eclipse.jetty.server.handler.ContextHandler;\n+\nclass JadlerHandler extends AbstractHandler {\n-    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n+    @Override\n+    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n```\n\n```diff\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+\npublic class JettyStubHttpServer implements StubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n-    private final Connector httpConnector;\n+    private final ServerConnector httpConnector;\n    public JettyStubHttpServer() {\n        this(0);\n    }\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(true);\n-        this.httpConnector = new SelectChannelConnector();\n-        this.httpConnector.setPort(port);\n+        this.httpConnector = new ServerConnector(server);\n+        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n    @Override\n    public int getPort() {\n-        return httpConnector.getLocalPort();\n+        return httpConnector.getLocalPort();\n    }\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 35 exact lines in a row:\n```\nprivate static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\nprivate final Server server;\nprivate final Connector httpConnector;\npublic JettyStubHttpServer() {\nthis(0);\n}\npublic JettyStubHttpServer(final int port) {\nthis.server = new Server();\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(true);\nthis.httpConnector = new SelectChannelConnector();\nthis.httpConnector.setPort(port);\nserver.addConnector(this.httpConnector);\n}\n@Override\npublic void registerRequestManager(final RequestManager ruleProvider) {\nValidate.notNull(ruleProvider, \"ruleProvider cannot be null\");\nserver.setHandler(new JadlerHandler(ruleProvider));\n}\n@Override\npublic void start() throws Exception {\nlogger.debug(\"starting jetty\");\nserver.start();\nlogger.debug(\"jetty started\");\n}\n@Override\npublic void stop() throws Exception {\nlogger.debug(\"stopping jetty\");\nserver.stop();\nlogger.debug(\"jetty stopped\");\n}\n@Override\npublic int getPort() {\nreturn httpConnector.getLocalPort();\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 35 exact lines in a row:\n```\nprivate static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\nprivate final Server server;\nprivate final Connector httpConnector;\npublic JettyStubHttpServer() {\nthis(0);\n}\npublic JettyStubHttpServer(final int port) {\nthis.server = new Server();\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(true);\nthis.httpConnector = new SelectChannelConnector();\nthis.httpConnector.setPort(port);\nserver.addConnector(this.httpConnector);\n}\n@Override\npublic void registerRequestManager(final RequestManager ruleProvider) {\nValidate.notNull(ruleProvider, \"ruleProvider cannot be null\");\nserver.setHandler(new JadlerHandler(ruleProvider));\n}\n@Override\npublic void start() throws Exception {\nlogger.debug(\"starting jetty\");\nserver.start();\nlogger.debug(\"jetty started\");\n}\n@Override\npublic void stop() throws Exception {\nlogger.debug(\"stopping jetty\");\nserver.stop();\nlogger.debug(\"jetty stopped\");\n}\n@Override\npublic int getPort() {\nreturn httpConnector.getLocalPort();\n}\n```",
            "span_id": 6418529754559942445
        }
    ],
    "read_file": [
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.KeyValues;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.StubResponse;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler {\n\n    private final RequestManager requestManager;\n\n\n    /**\n     * @param requestManager request manager instance to retrieve stub responses\n     */\n    JadlerHandler(final RequestManager requestManager) {\n        Validate.notNull(requestManager, \"requestManager cannot be null\");\n        this.requestManager = requestManager;\n    }\n\n\n    @Override\n    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n\n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n\n        baseRequest.setHandled(true);\n\n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n    }\n\n\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n        }\n    }\n\n\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key : headers.getKeys()) {\n\n            for (final String value : headers.getValues(key)) {\n                response.addHeader(key, value);\n            }\n        }\n    }\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\n            try {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}",
            "error": "",
            "span_id": 4082179112445450987
        },
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}",
            "error": "",
            "span_id": 11824612254283106636
        }
    ],
    "get_directory_tree": [
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty",
            "output": "[\n    {\n        \"name\": \"JadlerHandler.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"RequestUtils.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"JettyStubHttpServer.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 2744276315493554443
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}