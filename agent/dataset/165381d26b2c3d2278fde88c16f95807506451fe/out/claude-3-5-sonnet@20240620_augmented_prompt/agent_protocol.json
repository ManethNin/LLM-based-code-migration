{
    "validate_diffs": [
        {
            "input": "```diff\n--- safeplace/src/test/java/org/btrplace/safeplace/DSN.java\n+++ safeplace/src/test/java/org/btrplace/safeplace/DSN.java\n@@ -11,7 +11,7 @@ import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.AnnotationExpr;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import com.github.javaparser.printer.PrettyPrinterConfiguration;\n+import com.github.javaparser.printer.configuration.PrettyPrinterConfiguration;\n import org.btrplace.safeplace.spec.Constraint;\n import org.btrplace.safeplace.spec.SpecScanner;\n import org.btrplace.safeplace.testing.Bench;\n@@ -335,7 +335,7 @@ public class DSN {\n \n       private final List<Integer> l;\n \n-      private final PrettyPrinterConfiguration noComments = new PrettyPrinterConfiguration().setPrintComments(false);\n+      private final PrettyPrinterConfiguration noComments = new PrettyPrinterConfiguration().setPrintComments(false).setIndentSize(4);\n \n         UnitTestsVisitor(List<Integer> numbers) {\n             this.l = numbers;\n```",
            "output": "{'safeplace/src/test/java/org/btrplace/safeplace/DSN.java': '/*\\n * Copyright  2020 The BtrPlace Authors. All rights reserved.\\n * Use of this source code is governed by a LGPL-style\\n * license that can be found in the LICENSE.txt file.\\n */\\n\\npackage org.btrplace.safeplace;\\n\\nimport com.github.javaparser.JavaParser;\\nimport com.github.javaparser.ParseResult;\\nimport com.github.javaparser.ast.CompilationUnit;\\nimport com.github.javaparser.ast.body.MethodDeclaration;\\nimport com.github.javaparser.ast.expr.AnnotationExpr;\\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\\nimport com.github.javaparser.printer.configuration.PrettyPrinterConfiguration;\\nimport org.btrplace.safeplace.spec.Constraint;\\nimport org.btrplace.safeplace.spec.SpecScanner;\\nimport org.btrplace.safeplace.testing.Bench;\\nimport org.btrplace.safeplace.testing.Result;\\nimport org.btrplace.safeplace.testing.TestCampaign;\\nimport org.btrplace.safeplace.testing.TestScanner;\\nimport org.btrplace.safeplace.testing.fuzzer.Restriction;\\nimport org.btrplace.safeplace.testing.reporting.CSVReport;\\nimport org.btrplace.safeplace.testing.reporting.StoredReport;\\nimport org.btrplace.safeplace.testing.verification.Verifier;\\nimport org.btrplace.safeplace.testing.verification.btrplace.CheckerVerifier;\\nimport org.btrplace.safeplace.testing.verification.spec.SpecVerifier;\\nimport org.testng.Assert;\\n\\nimport java.io.InputStream;\\nimport java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.util.ArrayList;\\nimport java.util.EnumSet;\\nimport java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\nimport java.util.stream.Collectors;\\n\\n/**\\n * @author Fabien Hermenier\\n */\\npublic class DSN {\\n\\n    public static String root = \"xp-dsn\";\\n\\n    public TestScanner newScanner() throws Exception {\\n        SpecScanner specScanner = new SpecScanner();\\n        List<Constraint> l = specScanner.scan();\\n        Bench.mode = Bench.Mode.REPLAY;\\n        return new TestScanner(l);\\n    }\\n\\n    ////@Test\\n    public void fuzzingSizing() throws Exception {\\n        TestScanner sc = newScanner();\\n        Path path = Paths.get(root,\"fuzz.csv\");\\n        Files.deleteIfExists(path);\\n\\n        for (int p = 100; p <= 1000; p+=100) {\\n            for (int s = 2; s <= 20; s+=2) {\\n                System.out.println(\"--- Population: \" + p + \" scale: \" + s + \" ---\");\\n                Bench.report = new CSVReport(path, Integer.toString(p));\\n                Bench.population = p;\\n                Bench.scale = s;\\n                List<TestCampaign> campaigns = sc.testGroups(\"sides\");\\n                if (campaigns.isEmpty()) {\\n                    Assert.fail(\"Nothing to test\");\\n                }\\n                campaigns.stream().forEach(c -> System.out.println(c.go().toString()));\\n            }\\n        }\\n    }\\n\\n    //@Test\\n    public void fuzzingScalability() throws Exception {\\n        TestScanner sc = newScanner();\\n\\n        //Warm-up\\n        Bench.transitions = true;\\n\\n        Path p = Paths.get(root, \"testing-speed-notrans.csv\");\\n        Files.deleteIfExists(p);\\n\\n     /*   for (int i = 10; i <= 30; i+=2) {\\n            Bench.transitions = false;\\n            Bench.population = 100;\\n            Bench.scale = i;\\n            System.out.println(\"--- scaling factor \" + i + \"; transitions= \" + Bench.transitions +\" ---\");\\n            Bench.report = new CSVReport(p,\"\");\\n            System.out.println(sc.test(Bench.class).stream().mapToInt(TestCampaign::go).sum());\\n        }*/\\n\\n\\n        //GOGO\\n        p = Paths.get(root, \"testing-speed-notrans.csv\");\\n        Files.deleteIfExists(p);\\n        Bench.mode = Bench.Mode.DEFAULT;\\n        for (int i = 1; i <= 30; i += 2) {\\n            Bench.transitions = false;\\n            Bench.population = 100;\\n            Bench.scale = i;\\n            System.out.println(\"--- scaling factor \" + i + \"; transitions= \" + Bench.transitions + \" ---\");\\n            Bench.report = new CSVReport(p, \"\");\\n            sc.test(Bench.class).forEach(c -> System.out.println(c.go().toString()));\\n        }\\n\\n        p = Paths.get(root, \"testing-speed-trans.csv\");\\n        Files.deleteIfExists(p);\\n\\n        for (int i = 1; i <= 30; i+=2) {\\n            System.out.println(\"--- scaling factor \" + i + \"; transitions= \" + Bench.transitions +\" ---\");\\n            Bench.transitions = true;\\n            Bench.population = 100;\\n            Bench.scale = i;\\n            Bench.report = new CSVReport(p, \"\");\\n            sc.test(Bench.class).forEach(c -> System.out.println(c.go().toString()));\\n        }\\n    }\\n\\n    //@Test\\n    public void specLength() throws Exception {\\n        SpecScanner sc = new SpecScanner();\\n        List<Constraint> l = sc.scan();\\n        System.out.println(l.stream().map(Constraint::pretty).collect(Collectors.joining(\"\\\\n\")));\\n\\n        Path path = Paths.get(root, \"inv.csv\");\\n        String out = l.stream()\\n                .map(c -> Integer.toString(c.proposition().toString().length()))\\n                .collect(Collectors.joining(\"\\\\n\"));\\n        Files.write(path, out.getBytes());\\n\\n        List<Integer> funcs = new ArrayList<>();\\n        List<Path> paths = Files.list(Paths.get(\"safeplace/src/main/java/org/btrplace/safeplace/spec/term/func\"))\\n                .filter(Files::isRegularFile).collect(Collectors.toList());\\n        for (Path p : paths) {\\n            try (InputStream in = Files.newInputStream(p)) {\\n                ParseResult<CompilationUnit> cu = new JavaParser().parse(in);\\n                new FunctionVisitor(funcs).visit(cu.getResult().get(), null);\\n            }\\n        }\\n        path = Paths.get(root, \"func.csv\");\\n        out = funcs.stream()\\n                        .map(c -> Integer.toString(c))\\n                        .collect(Collectors.joining(\"\\\\n\"));\\n        Files.write(path, out.getBytes());\\n    }\\n\\n    //@Test\\n    public void funcFrequency() throws Exception {\\n        SpecScanner sc = new SpecScanner();\\n        List<Constraint> l = sc.scan();\\n        Pattern p = Pattern.compile(\"([a-zA-Z]+\\\\\\\\()+\");\\n        Map<String, Integer> map = new HashMap<>();\\n        for (Constraint c : l) {\\n            String prop = c.proposition().toString();\\n            Matcher m = p.matcher(prop);\\n            System.out.println(prop);\\n            int start = 0;\\n            while (m.find(start)) {\\n                String name = prop.substring(m.start(), m.end() - 1);\\n                if (Character.isLowerCase(name.charAt(0))) {\\n                    if (!map.containsKey(name)) {\\n                        map.put(name, 1);\\n                    } else {\\n                        map.put(name, map.get(name) + 1);\\n                    }\\n                }\\n                System.out.println(\"\\\\t\" + prop.substring(m.start(), m.end() - 1));\\n                start = m.end();\\n            }\\n        }\\n        System.out.println(map);\\n        Path out = Paths.get(root, \"func-freq.csv\");\\n        Files.deleteIfExists(out);\\n        String cnt = \"name;freq\\\\n\" +\\n                    map.entrySet().stream().map(e -> e.getKey()+\";\" + e.getValue() + \"\\\\n\").collect(Collectors.joining());\\n        Files.write(out, cnt.getBytes());\\n\\n    }\\n\\n    //@Test\\n    public void specVsCheckers() throws Exception {\\n        TestScanner sc = newScanner();\\n        Bench.population = 500;\\n        Bench.scale = 10;\\n        Path p = Paths.get(root, \"verifier_stable.csv\");\\n        Files.deleteIfExists(p);\\n        boolean first = true;\\n        for (Verifier v : new Verifier[]{new SpecVerifier(), new CheckerVerifier()}) {\\n            if (first) {\\n                Bench.mode = Bench.Mode.SAVE;\\n                first = !first;\\n            } else {\\n                Bench.mode = Bench.Mode.REPLAY;\\n            }\\n            System.out.println(\"--- Verifier: \" + v.getClass() + \" ---\");\\n            Bench.report = new CSVReport(p, v.id());\\n            sc.test(Bench.class).forEach(c -> {\\n                c.verifyWith(v);\\n                System.out.println(c.go().toString());\\n            });\\n        }\\n    }\\n\\n    //@Test\\n    public void discreteVsContinuous() throws Exception {\\n        TestScanner sc = newScanner();\\n        Bench.population = 500;\\n        Bench.scale = 10;\\n        Path path = Paths.get(root, \"restriction_stable.csv\");\\n        Files.deleteIfExists(path);\\n        boolean first = true;\\n        for (Restriction r : EnumSet.allOf(Restriction.class)) {\\n            if (first) {\\n                Bench.mode = Bench.Mode.SAVE;\\n                first = !first;\\n            } else {\\n                Bench.mode = Bench.Mode.REPLAY;\\n            }\\n            System.out.println(\"--- Restriction: \" + r + \"; replay= \" + first + \" ---\");\\n            Bench.report = new CSVReport(path, r.toString());\\n            sc.testGroups(\"bi\").forEach(x -> {\\n                Bench.restrictions = EnumSet.of(r);\\n                System.out.println(x.go());\\n            });\\n        }\\n        //restore\\n        Bench.restrictions = EnumSet.allOf(Restriction.class);\\n    }\\n\\n    //@Test\\n    public void repairVsRebuild() throws Exception {\\n        TestScanner sc = newScanner();\\n        Bench.population = 500;\\n        Bench.scale = 10;\\n        Path path = Paths.get(root, \"mode_stable.csv\");\\n        Files.deleteIfExists(path);\\n        boolean first = true;\\n        for (boolean repair : new boolean[]{false, true}) {\\n            if (first) {\\n                Bench.mode = Bench.Mode.SAVE;\\n                first = !first;\\n            } else {\\n                Bench.mode = Bench.Mode.REPLAY;\\n            }\\n            System.out.println(\"--- Repair: \" + repair + \"; replay= \" + first + \" ---\");\\n            Bench.report = new CSVReport(path, repair ? \"enabled\" : \"disabled\");\\n            sc.test(Bench.class).forEach(x -> {\\n                x.schedulerParams().doRepair(true);\\n                System.out.println(x.go());\\n            });\\n        }\\n    }\\n\\n    //@Test\\n    public void errors() throws Exception {\\n        TestScanner sc = newScanner();\\n        Bench.source = \"xp-dsn\";\\n        Bench.mode = Bench.Mode.REPLAY;\\n        Bench.population = 1000;\\n        Bench.scale = 5;\\n        Path p = Paths.get(root, \"errors.csv\");\\n        Files.deleteIfExists(p);\\n        Bench.report = new CSVReport(p, \"\");\\n        sc.test(Bench.class).stream().forEach(x -> System.out.println(x.go()));\\n    }\\n\\n    //@Test\\n    public void prettyErrors() throws Exception {\\n        TestScanner sc = newScanner();\\n        Bench.mode = Bench.Mode.REPLAY;\\n        Bench.population = 1000;\\n        Bench.scale = 5;\\n\\n        sc.test(Bench.class).forEach(x -> {\\n            x.reportTo(new StoredReport(Paths.get(\"xp-dsn\", \"errors.txt\"), r -> !r.result().equals(Result.SUCCESS)));\\n            System.out.println(x.go());\\n        });\\n    }\\n\\n\\n    //@Test\\n    //Extract the number of line of codes of tests\\n    public void testSloc() throws Exception {\\n        //Parse the legacy unit tests\\n        List<Integer> unitTests = new ArrayList<>();\\n        List<Path> paths = Files.list(Paths.get(\"choco/src/test/java/org/btrplace/scheduler/choco/constraint/\")).filter(Files::isRegularFile).collect(Collectors.toList());\\n        for (Path p : paths) {\\n            try (InputStream in = Files.newInputStream(p)){\\n                ParseResult<CompilationUnit> cu = new JavaParser().parse(in);\\n                new UnitTestsVisitor(unitTests).visit(cu.getResult().get(), null);\\n            }\\n        }\\n\\n        //Parse the new unit tests\\n        List<Integer> safeTests = new ArrayList<>();\\n\\n        try (InputStream in = Files.newInputStream(Paths.get(\"safeplace/src/test/java/org/btrplace/safeplace/testing/TestSafePlace.java\"))){\\n            ParseResult<CompilationUnit> cu = new JavaParser().parse(in);\\n            new SafeplaceTestsVisitor(safeTests).visit(cu.getResult().get(), null);\\n        }\\n\\n        String sb = \"testing;sloc\\\\n\" +\\n                unitTests.stream().map(i -> \"btrPlace;\" + i).collect(Collectors.joining(\"\\\\n\", \"\", \"\\\\n\")) +\\n                safeTests.stream().map(i -> \"safePlace;\" + i).collect(Collectors.joining(\"\\\\n\", \"\", \"\\\\n\"));\\n        Path path = Paths.get(root, \"sloc.csv\");\\n        Files.write(path, sb.getBytes());\\n    }\\n\\n    private static class FunctionVisitor extends VoidVisitorAdapter<Void> {\\n\\n      private final List<Integer> l;\\n\\n        FunctionVisitor(List<Integer> numbers) {\\n            this.l = numbers;\\n        }\\n\\n        @Override\\n        public void visit(MethodDeclaration n, Void arg) {\\n            if (n.getNameAsString().equals(\"eval\")) {\\n                n.getRange().ifPresent(r -> l.add(r.end.line - r.begin.line));\\n            }\\n            super.visit(n, arg);\\n        }\\n    }\\n\\n    private static class UnitTestsVisitor extends VoidVisitorAdapter<Void> {\\n\\n      private final List<Integer> l;\\n\\n      private final PrettyPrinterConfiguration noComments = new PrettyPrinterConfiguration().setPrintComments(false).setIndentSize(4);\\n\\n        UnitTestsVisitor(List<Integer> numbers) {\\n            this.l = numbers;\\n        }\\n\\n        @Override\\n        public void visit(MethodDeclaration n, Void arg) {\\n            System.out.println(n.getNameAsString());\\n            if (n.toString(noComments).contains(\"solve\")) {\\n                n.getRange().ifPresent(r -> l.add(r.end.line - r.begin.line));\\n            }\\n            super.visit(n, arg);\\n        }\\n    }\\n\\n    private static class SafeplaceTestsVisitor extends VoidVisitorAdapter<Void> {\\n\\n      private final List<Integer> l;\\n\\n        SafeplaceTestsVisitor(List<Integer> numbers) {\\n            this.l = numbers;\\n        }\\n\\n        @Override\\n        public void visit(MethodDeclaration n, Void arg) {\\n            for (AnnotationExpr a : n.getAnnotations()) {\\n                if (!a.getNameAsString().equals(\"CstrTest\")) {\\n                    return;\\n                }\\n            }\\n            System.out.println(n.getName());\\n            n.getRange().ifPresent(r -> l.add(r.end.line - r.begin.line));\\n            super.visit(n, arg);\\n        }\\n    }\\n}\\n'}",
            "error": "",
            "span_id": 15537440905700150946
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- safeplace/src/test/java/org/btrplace/safeplace/DSN.java\n+++ safeplace/src/test/java/org/btrplace/safeplace/DSN.java\n@@ -11,7 +11,7 @@ import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.AnnotationExpr;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import com.github.javaparser.printer.PrettyPrinterConfiguration;\n+import com.github.javaparser.printer.configuration.PrettyPrinterConfiguration;\n import org.btrplace.safeplace.spec.Constraint;\n import org.btrplace.safeplace.spec.SpecScanner;\n import org.btrplace.safeplace.testing.Bench;\n@@ -335,7 +335,7 @@ public class DSN {\n \n       private final List<Integer> l;\n \n-      private final PrettyPrinterConfiguration noComments = new PrettyPrinterConfiguration().setPrintComments(false);\n+      private final PrettyPrinterConfiguration noComments = new PrettyPrinterConfiguration().setPrintComments(false).setIndentSize(4);\n \n         UnitTestsVisitor(List<Integer> numbers) {\n             this.l = numbers;\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": true,
                "error_text": "",
                "updated_files": {
                    "safeplace/src/test/java/org/btrplace/safeplace/DSN.java": "/*\n * Copyright  2020 The BtrPlace Authors. All rights reserved.\n * Use of this source code is governed by a LGPL-style\n * license that can be found in the LICENSE.txt file.\n */\n\npackage org.btrplace.safeplace;\n\nimport com.github.javaparser.JavaParser;\nimport com.github.javaparser.ParseResult;\nimport com.github.javaparser.ast.CompilationUnit;\nimport com.github.javaparser.ast.body.MethodDeclaration;\nimport com.github.javaparser.ast.expr.AnnotationExpr;\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\nimport com.github.javaparser.printer.configuration.PrettyPrinterConfiguration;\nimport org.btrplace.safeplace.spec.Constraint;\nimport org.btrplace.safeplace.spec.SpecScanner;\nimport org.btrplace.safeplace.testing.Bench;\nimport org.btrplace.safeplace.testing.Result;\nimport org.btrplace.safeplace.testing.TestCampaign;\nimport org.btrplace.safeplace.testing.TestScanner;\nimport org.btrplace.safeplace.testing.fuzzer.Restriction;\nimport org.btrplace.safeplace.testing.reporting.CSVReport;\nimport org.btrplace.safeplace.testing.reporting.StoredReport;\nimport org.btrplace.safeplace.testing.verification.Verifier;\nimport org.btrplace.safeplace.testing.verification.btrplace.CheckerVerifier;\nimport org.btrplace.safeplace.testing.verification.spec.SpecVerifier;\nimport org.testng.Assert;\n\nimport java.io.InputStream;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\n/**\n * @author Fabien Hermenier\n */\npublic class DSN {\n\n    public static String root = \"xp-dsn\";\n\n    public TestScanner newScanner() throws Exception {\n        SpecScanner specScanner = new SpecScanner();\n        List<Constraint> l = specScanner.scan();\n        Bench.mode = Bench.Mode.REPLAY;\n        return new TestScanner(l);\n    }\n\n    ////@Test\n    public void fuzzingSizing() throws Exception {\n        TestScanner sc = newScanner();\n        Path path = Paths.get(root,\"fuzz.csv\");\n        Files.deleteIfExists(path);\n\n        for (int p = 100; p <= 1000; p+=100) {\n            for (int s = 2; s <= 20; s+=2) {\n                System.out.println(\"--- Population: \" + p + \" scale: \" + s + \" ---\");\n                Bench.report = new CSVReport(path, Integer.toString(p));\n                Bench.population = p;\n                Bench.scale = s;\n                List<TestCampaign> campaigns = sc.testGroups(\"sides\");\n                if (campaigns.isEmpty()) {\n                    Assert.fail(\"Nothing to test\");\n                }\n                campaigns.stream().forEach(c -> System.out.println(c.go().toString()));\n            }\n        }\n    }\n\n    //@Test\n    public void fuzzingScalability() throws Exception {\n        TestScanner sc = newScanner();\n\n        //Warm-up\n        Bench.transitions = true;\n\n        Path p = Paths.get(root, \"testing-speed-notrans.csv\");\n        Files.deleteIfExists(p);\n\n     /*   for (int i = 10; i <= 30; i+=2) {\n            Bench.transitions = false;\n            Bench.population = 100;\n            Bench.scale = i;\n            System.out.println(\"--- scaling factor \" + i + \"; transitions= \" + Bench.transitions +\" ---\");\n            Bench.report = new CSVReport(p,\"\");\n            System.out.println(sc.test(Bench.class).stream().mapToInt(TestCampaign::go).sum());\n        }*/\n\n\n        //GOGO\n        p = Paths.get(root, \"testing-speed-notrans.csv\");\n        Files.deleteIfExists(p);\n        Bench.mode = Bench.Mode.DEFAULT;\n        for (int i = 1; i <= 30; i += 2) {\n            Bench.transitions = false;\n            Bench.population = 100;\n            Bench.scale = i;\n            System.out.println(\"--- scaling factor \" + i + \"; transitions= \" + Bench.transitions + \" ---\");\n            Bench.report = new CSVReport(p, \"\");\n            sc.test(Bench.class).forEach(c -> System.out.println(c.go().toString()));\n        }\n\n        p = Paths.get(root, \"testing-speed-trans.csv\");\n        Files.deleteIfExists(p);\n\n        for (int i = 1; i <= 30; i+=2) {\n            System.out.println(\"--- scaling factor \" + i + \"; transitions= \" + Bench.transitions +\" ---\");\n            Bench.transitions = true;\n            Bench.population = 100;\n            Bench.scale = i;\n            Bench.report = new CSVReport(p, \"\");\n            sc.test(Bench.class).forEach(c -> System.out.println(c.go().toString()));\n        }\n    }\n\n    //@Test\n    public void specLength() throws Exception {\n        SpecScanner sc = new SpecScanner();\n        List<Constraint> l = sc.scan();\n        System.out.println(l.stream().map(Constraint::pretty).collect(Collectors.joining(\"\\n\")));\n\n        Path path = Paths.get(root, \"inv.csv\");\n        String out = l.stream()\n                .map(c -> Integer.toString(c.proposition().toString().length()))\n                .collect(Collectors.joining(\"\\n\"));\n        Files.write(path, out.getBytes());\n\n        List<Integer> funcs = new ArrayList<>();\n        List<Path> paths = Files.list(Paths.get(\"safeplace/src/main/java/org/btrplace/safeplace/spec/term/func\"))\n                .filter(Files::isRegularFile).collect(Collectors.toList());\n        for (Path p : paths) {\n            try (InputStream in = Files.newInputStream(p)) {\n                ParseResult<CompilationUnit> cu = new JavaParser().parse(in);\n                new FunctionVisitor(funcs).visit(cu.getResult().get(), null);\n            }\n        }\n        path = Paths.get(root, \"func.csv\");\n        out = funcs.stream()\n                        .map(c -> Integer.toString(c))\n                        .collect(Collectors.joining(\"\\n\"));\n        Files.write(path, out.getBytes());\n    }\n\n    //@Test\n    public void funcFrequency() throws Exception {\n        SpecScanner sc = new SpecScanner();\n        List<Constraint> l = sc.scan();\n        Pattern p = Pattern.compile(\"([a-zA-Z]+\\\\()+\");\n        Map<String, Integer> map = new HashMap<>();\n        for (Constraint c : l) {\n            String prop = c.proposition().toString();\n            Matcher m = p.matcher(prop);\n            System.out.println(prop);\n            int start = 0;\n            while (m.find(start)) {\n                String name = prop.substring(m.start(), m.end() - 1);\n                if (Character.isLowerCase(name.charAt(0))) {\n                    if (!map.containsKey(name)) {\n                        map.put(name, 1);\n                    } else {\n                        map.put(name, map.get(name) + 1);\n                    }\n                }\n                System.out.println(\"\\t\" + prop.substring(m.start(), m.end() - 1));\n                start = m.end();\n            }\n        }\n        System.out.println(map);\n        Path out = Paths.get(root, \"func-freq.csv\");\n        Files.deleteIfExists(out);\n        String cnt = \"name;freq\\n\" +\n                    map.entrySet().stream().map(e -> e.getKey()+\";\" + e.getValue() + \"\\n\").collect(Collectors.joining());\n        Files.write(out, cnt.getBytes());\n\n    }\n\n    //@Test\n    public void specVsCheckers() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.population = 500;\n        Bench.scale = 10;\n        Path p = Paths.get(root, \"verifier_stable.csv\");\n        Files.deleteIfExists(p);\n        boolean first = true;\n        for (Verifier v : new Verifier[]{new SpecVerifier(), new CheckerVerifier()}) {\n            if (first) {\n                Bench.mode = Bench.Mode.SAVE;\n                first = !first;\n            } else {\n                Bench.mode = Bench.Mode.REPLAY;\n            }\n            System.out.println(\"--- Verifier: \" + v.getClass() + \" ---\");\n            Bench.report = new CSVReport(p, v.id());\n            sc.test(Bench.class).forEach(c -> {\n                c.verifyWith(v);\n                System.out.println(c.go().toString());\n            });\n        }\n    }\n\n    //@Test\n    public void discreteVsContinuous() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.population = 500;\n        Bench.scale = 10;\n        Path path = Paths.get(root, \"restriction_stable.csv\");\n        Files.deleteIfExists(path);\n        boolean first = true;\n        for (Restriction r : EnumSet.allOf(Restriction.class)) {\n            if (first) {\n                Bench.mode = Bench.Mode.SAVE;\n                first = !first;\n            } else {\n                Bench.mode = Bench.Mode.REPLAY;\n            }\n            System.out.println(\"--- Restriction: \" + r + \"; replay= \" + first + \" ---\");\n            Bench.report = new CSVReport(path, r.toString());\n            sc.testGroups(\"bi\").forEach(x -> {\n                Bench.restrictions = EnumSet.of(r);\n                System.out.println(x.go());\n            });\n        }\n        //restore\n        Bench.restrictions = EnumSet.allOf(Restriction.class);\n    }\n\n    //@Test\n    public void repairVsRebuild() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.population = 500;\n        Bench.scale = 10;\n        Path path = Paths.get(root, \"mode_stable.csv\");\n        Files.deleteIfExists(path);\n        boolean first = true;\n        for (boolean repair : new boolean[]{false, true}) {\n            if (first) {\n                Bench.mode = Bench.Mode.SAVE;\n                first = !first;\n            } else {\n                Bench.mode = Bench.Mode.REPLAY;\n            }\n            System.out.println(\"--- Repair: \" + repair + \"; replay= \" + first + \" ---\");\n            Bench.report = new CSVReport(path, repair ? \"enabled\" : \"disabled\");\n            sc.test(Bench.class).forEach(x -> {\n                x.schedulerParams().doRepair(true);\n                System.out.println(x.go());\n            });\n        }\n    }\n\n    //@Test\n    public void errors() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.source = \"xp-dsn\";\n        Bench.mode = Bench.Mode.REPLAY;\n        Bench.population = 1000;\n        Bench.scale = 5;\n        Path p = Paths.get(root, \"errors.csv\");\n        Files.deleteIfExists(p);\n        Bench.report = new CSVReport(p, \"\");\n        sc.test(Bench.class).stream().forEach(x -> System.out.println(x.go()));\n    }\n\n    //@Test\n    public void prettyErrors() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.mode = Bench.Mode.REPLAY;\n        Bench.population = 1000;\n        Bench.scale = 5;\n\n        sc.test(Bench.class).forEach(x -> {\n            x.reportTo(new StoredReport(Paths.get(\"xp-dsn\", \"errors.txt\"), r -> !r.result().equals(Result.SUCCESS)));\n            System.out.println(x.go());\n        });\n    }\n\n\n    //@Test\n    //Extract the number of line of codes of tests\n    public void testSloc() throws Exception {\n        //Parse the legacy unit tests\n        List<Integer> unitTests = new ArrayList<>();\n        List<Path> paths = Files.list(Paths.get(\"choco/src/test/java/org/btrplace/scheduler/choco/constraint/\")).filter(Files::isRegularFile).collect(Collectors.toList());\n        for (Path p : paths) {\n            try (InputStream in = Files.newInputStream(p)){\n                ParseResult<CompilationUnit> cu = new JavaParser().parse(in);\n                new UnitTestsVisitor(unitTests).visit(cu.getResult().get(), null);\n            }\n        }\n\n        //Parse the new unit tests\n        List<Integer> safeTests = new ArrayList<>();\n\n        try (InputStream in = Files.newInputStream(Paths.get(\"safeplace/src/test/java/org/btrplace/safeplace/testing/TestSafePlace.java\"))){\n            ParseResult<CompilationUnit> cu = new JavaParser().parse(in);\n            new SafeplaceTestsVisitor(safeTests).visit(cu.getResult().get(), null);\n        }\n\n        String sb = \"testing;sloc\\n\" +\n                unitTests.stream().map(i -> \"btrPlace;\" + i).collect(Collectors.joining(\"\\n\", \"\", \"\\n\")) +\n                safeTests.stream().map(i -> \"safePlace;\" + i).collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n        Path path = Paths.get(root, \"sloc.csv\");\n        Files.write(path, sb.getBytes());\n    }\n\n    private static class FunctionVisitor extends VoidVisitorAdapter<Void> {\n\n      private final List<Integer> l;\n\n        FunctionVisitor(List<Integer> numbers) {\n            this.l = numbers;\n        }\n\n        @Override\n        public void visit(MethodDeclaration n, Void arg) {\n            if (n.getNameAsString().equals(\"eval\")) {\n                n.getRange().ifPresent(r -> l.add(r.end.line - r.begin.line));\n            }\n            super.visit(n, arg);\n        }\n    }\n\n    private static class UnitTestsVisitor extends VoidVisitorAdapter<Void> {\n\n      private final List<Integer> l;\n\n      private final PrettyPrinterConfiguration noComments = new PrettyPrinterConfiguration().setPrintComments(false).setIndentSize(4);\n\n        UnitTestsVisitor(List<Integer> numbers) {\n            this.l = numbers;\n        }\n\n        @Override\n        public void visit(MethodDeclaration n, Void arg) {\n            System.out.println(n.getNameAsString());\n            if (n.toString(noComments).contains(\"solve\")) {\n                n.getRange().ifPresent(r -> l.add(r.end.line - r.begin.line));\n            }\n            super.visit(n, arg);\n        }\n    }\n\n    private static class SafeplaceTestsVisitor extends VoidVisitorAdapter<Void> {\n\n      private final List<Integer> l;\n\n        SafeplaceTestsVisitor(List<Integer> numbers) {\n            this.l = numbers;\n        }\n\n        @Override\n        public void visit(MethodDeclaration n, Void arg) {\n            for (AnnotationExpr a : n.getAnnotations()) {\n                if (!a.getNameAsString().equals(\"CstrTest\")) {\n                    return;\n                }\n            }\n            System.out.println(n.getName());\n            n.getRange().ifPresent(r -> l.add(r.end.line - r.begin.line));\n            super.visit(n, arg);\n        }\n    }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 260, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco:0.8.7:report (report) @ scheduler-api ---\n[INFO] Loading execution data file /mnt/repo/api/target/jacoco.exec\n[INFO] Analyzed bundle 'scheduler-api' with 123 classes\n[INFO]\n[INFO] --------------------< org.btrplace:scheduler-json >---------------------\n[INFO] Building scheduler-json 1.12.1-SNAPSHOT [3/9]\n[INFO] from json/pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ scheduler-json ---\n[INFO]\n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ scheduler-json ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/mnt/repo/json/target/jacoco.exec,excludes=org/btrplace/btrpsl/**/*:org/btrplace/safeplace/**/*:org/btrplace/bench/**/*:org/btrplace/scheduler/runner/disjoint/**/*\n[INFO]\n[INFO] --- resources:3.3.1:resources (default-resources) @ scheduler-json ---\n[INFO] skip non existing resourceDirectory /mnt/repo/json/src/main/resources\n[INFO]\n[INFO] --- compiler:3.8.1:compile (default-compile) @ scheduler-json ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 61 source files to /mnt/repo/json/target/classes\n[INFO] /mnt/repo/json/src/main/java/org/btrplace/json/plan/ReconfigurationPlanConverter.java: Some input files use unchecked or unsafe operations.\n[INFO] /mnt/repo/json/src/main/java/org/btrplace/json/plan/ReconfigurationPlanConverter.java: Recompile with -Xlint:unchecked for details.\n[INFO]\n[INFO] --- resources:3.3.1:testResources (default-testResources) @ scheduler-json ---\n[INFO] skip non existing resourceDirectory /mnt/repo/json/src/test/resources\n[INFO]\n[INFO] --- compiler:3.8.1:testCompile (default-testCompile) @ scheduler-json ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 40 source files to /mnt/repo/json/target/test-classes\n[INFO]\n[INFO] --- surefire:3.0.0-M5:test (default-test) @ scheduler-json ---\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO] T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running TestSuite\n{\"continuous\":false,\"parts\":[[0,1],[2,3],[4]],\"id\":\"among\",\"vms\":[0,1,2]}\n{\"nodes\":{\"0\":{\"boot\":7}},\"vms\":{\"0\":{\"template\":\"xen\",\"forge\":3},\"3\":{\"template\":\"kvm\",\"foo\":1.3,\"clone\":true}}}\n{\"nodes\":[0,1],\"vm\":0,\"continuous\":false,\"id\":\"ban\"}\n{\"vm\":0,\"continuous\":false,\"id\":\"Deadline\",\"timestamp\":\"+00:00:15\"}\n{\"nodes\":[0,1],\"vm\":0,\"continuous\":false,\"id\":\"fence\"}\n{\"continuous\":false,\"id\":\"gather\",\"vms\":[0,1]}\n{\"model\":{\"mapping\":{\"readyVMs\":[1,0],\"onlineNodes\":{},\"offlineNodes\":[0]},\"attributes\":{\"nodes\":{},\"vms\":{}},\"views\":[]},\"constraints\":[{\"node\":0,\"id\":\"online\"},{\"vm\":1,\"id\":\"running\"}],\"objective\":{\"id\":\"minimizeMTTR\"}}\n{\"vm\":0,\"id\":\"killed\"}\n{\"continuous\":false,\"id\":\"lonely\",\"vms\":[0,1]}\n{\"amount\":2,\"nodes\":[0,1,2],\"continuous\":false,\"id\":\"maxOnline\"}\n{\"id\":\"minimizeMigrations\"}\n{\"id\":\"minimizeMTTR\"}\n{\"mapping\":{\"readyVMs\":[2],\"onlineNodes\":{\"0\":{\"sleepingVMs\":[1],\"runningVMs\":[0]},\"2\":{\"sleepingVMs\":[],\"runningVMs\":[3]}},\"offlineNodes\":[1]},\"attributes\":{\"nodes\":{},\"vms\":{}},\"views\":[]}\n{\"mapping\":{\"readyVMs\":[0],\"onlineNodes\":{\"0\":{\"sleepingVMs\":[],\"runningVMs\":[]}},\"offlineNodes\":[]},\"attributes\":{\"nodes\":{\"0\":{\"type\":\"xen\"}},\"vms\":{\"0\":{\"boot\":5}}},\"views\":[{\"defConsumption\":0,\"nodes\":{\"0\":10},\"rcId\":\"cpu\",\"id\":\"shareableResource\",\"defCapacity\":0,\"vms\":{\"0\":5}}]}\n{\"id\":\"ns\",\"type\":\"vm\",\"map\":{\"VM 1\":1,\"VM 2\":2,\"VM 3\":3,\"VM 4\":4,\"VM 5\":5,\"VM 6\":6,\"VM 7\":7,\"VM 8\":8,\"VM 9\":9,\"VM 0\":0}}\n{\"mapping\":{\"readyVMs\":[],\"onlineNodes\":{\"0\":{\"sleepingVMs\":[],\"runningVMs\":[]},\"1\":{\"sleepingVMs\":[],\"runningVMs\":[]}},\"offlineNodes\":[]},\"attributes\":{\"nodes\":{},\"vms\":{}},\"views\":[{\"routing\":{\"routes\":[{\"nodes_map\":{\"dst\":1,\"src\":0},\"links\":[{\"link\":0,\"direction\":\"true\"},{\"link\":1,\"direction\":\"false\"}]}],\"type\":\"static\"},\"switches\":[{\"id\":0,\"capacity\":1000}],\"links\":[{\"physicalElement\":{\"id\":0,\"type\":\"node\"},\"id\":0,\"capacity\":1000,\"switch\":0},{\"physicalElement\":{\"id\":1,\"type\":\"node\"},\"id\":1,\"capacity\":1000,\"switch\":0}],\"id\":\"net\"}]}\n{\"mapping\":{\"readyVMs\":[],\"onlineNodes\":{\"0\":{\"sleepingVMs\":[],\"runningVMs\":[]},\"1\":{\"sleepingVMs\":[],\"runningVMs\":[]}},\"offlineNodes\":[]},\"attributes\":{\"nodes\":{},\"vms\":{}},\"views\":[{\"routing\":{\"type\":\"default\"},\"switches\":[{\"id\":0,\"capacity\":1000}],\"links\":[{\"physicalElement\":{\"id\":0,\"type\":\"node\"},\"id\":0,\"capacity\":1000,\"switch\":0},{\"physicalElement\":{\"id\":1,\"type\":\"node\"},\"id\":1,\"capacity\":1000,\"switch\":0}],\"id\":\"net\"}]}\n{\"vm\":0,\"continuous\":false,\"id\":\"noDelay\"}\n{\"node\":0,\"id\":\"offline\"}\n{\"node\":0,\"id\":\"online\"}\n{\"node\":0,\"rc\":\"foo\",\"continuous\":true,\"id\":\"overbook\",\"ratio\":1.4}\n{\"continuous\":false,\"vm2\":1,\"id\":\"Precedence\",\"vm1\":0}\n{\"rc\":\"cpu\",\"amount\":5,\"vm\":0,\"id\":\"preserve\"}\n{\"node\":0,\"id\":\"quarantine\"}\n{\"vm\":0,\"id\":\"ready\"}\n{\"rc\":\"cpu\",\"amount\":5,\"nodes\":[0,1,2],\"continuous\":false,\"id\":\"resourceCapacity\"}\n{\"vm\":0,\"id\":\"root\"}\n{\"amount\":5,\"nodes\":[0,1,2],\"id\":\"runningCapacity\"}\n{\"vm\":0,\"id\":\"running\"}\n{\"id\":\"seq\",\"vms\":[0,1,2]}\n{\"continuous\":false,\"id\":\"Serialize\",\"vms\":[0,1]}\n{\"vm\":0,\"id\":\"sleeping\"}\n{\"pParts\":[[0,1],[2,3],[4]],\"continuous\":false,\"id\":\"splitAmong\",\"vParts\":[[0,1,2],[6,7],[3,4,5]]}\n{\"continuous\":false,\"parts\":[[0,1],[2,3],[4]],\"id\":\"split\"}\n{\"continuous\":false,\"id\":\"spread\",\"vms\":[0,1]}\n{\"continuous\":false,\"id\":\"Sync\",\"vms\":[0,1]}\n{\"origin\":{\"mapping\":{\"readyVMs\":[],\"onlineNodes\":{\"0\":{\"sleepingVMs\":[],\"runningVMs\":[0]}},\"offlineNodes\":[]},\"attributes\":{\"nodes\":{},\"vms\":{}},\"views\":[]},\"actions\":[{\"vm\":0,\"start\":0,\"end\":1,\"id\":\"bootVM\",\"hooks\":{\"pre\":[{\"vm\":0,\"qty\":7,\"id\":\"customID\"}],\"post\":[{\"vm\":0,\"qty\":10,\"id\":\"customID\"}]},\"on\":0}]}\n[INFO] Tests run: 93, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.18 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 93, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco:0.8.7:report (report) @ scheduler-json ---\n[INFO] Loading execution data file /mnt/repo/json/target/jacoco.exec\n[INFO] Analyzed bundle 'scheduler-json' with 64 classes\n[INFO]\n[INFO] --------------------< org.btrplace:scheduler-choco >--------------------\n[INFO] Building scheduler-choco 1.12.1-SNAPSHOT [4/9]\n[INFO] from choco/pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ scheduler-choco ---\n[INFO]\n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ scheduler-choco ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/mnt/repo/choco/target/jacoco.exec,excludes=org/btrplace/btrpsl/**/*:org/btrplace/safeplace/**/*:org/btrplace/bench/**/*:org/btrplace/scheduler/runner/disjoint/**/*\n[INFO]\n[INFO] --- resources:3.3.1:resources (default-resources) @ scheduler-choco ---\n[INFO] skip non existing resourceDirectory /mnt/repo/choco/src/main/resources\n[INFO]\n[INFO] --- compiler:3.8.1:compile (default-compile) @ scheduler-choco ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 118 source files to /mnt/repo/choco/target/classes\n[INFO] /mnt/repo/choco/src/main/java/org/btrplace/scheduler/choco/DefaultReconfigurationProblem.java: /mnt/repo/choco/src/main/java/org/btrplace/scheduler/choco/DefaultReconfigurationProblem.java uses or overrides a deprecated API.\n[INFO] /mnt/repo/choco/src/main/java/org/btrplace/scheduler/choco/DefaultReconfigurationProblem.java: Recompile with -Xlint:deprecation for details.\n[INFO] /mnt/repo/choco/src/main/java/org/btrplace/scheduler/choco/duration/DurationEvaluators.java: Some input files use unchecked or unsafe operations.\n[INFO] /mnt/repo/choco/src/main/java/org/btrplace/scheduler/choco/duration/DurationEvaluators.java: Recompile with -Xlint:unchecked for details.\n[INFO]\n[INFO] --- resources:3.3.1:testResources (default-testResources) @ scheduler-choco ---\n[INFO] Copying 9 resources from src/test/resources to target/test-classes\n[INFO]\n[INFO] --- compiler:3.8.1:testCompile (default-testCompile) @ scheduler-choco ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 61 source files to /mnt/repo/choco/target/test-classes\n[INFO]\n[INFO] --- surefire:3.0.0-M5:test (default-test) @ scheduler-choco ---\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO] T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running TestSuite\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n2 node(s); 3 VM(s); 1 constraint(s); optimize\nBuilding duration: 2ms (core) + 7ms (specialization)\nAfter 3ms of search (terminated): at 3ms, 12 Nodes (Infinity n/s), 21 Backtracks, 9 Fails, 0 Restarts, 2 solution(s):\n1)at 1ms, 7 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 2\n2)at 3ms, 12 Nodes (Infinity n/s), 11 Backtracks, 5 Fails, 0 Restarts, objective: 1\n0:1 {action=migrate(vm=vm#0, from=node#0, to=node#1, bw=2147483647), @post= {allocate(vm=vm#0, rc=cpu, amount=5)}}\n4 node(s); 56 VM(s); 30 constraint(s); optimize\nBuilding duration: 8ms (core) + 6ms (specialization)\nAfter 267ms of search (terminated): at 267ms, 375 Nodes (Infinity n/s), 743 Backtracks, 368 Fails, 0 Restarts, 4 solution(s):\n1)at 25ms, 64 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 22\n2)at 32ms, 79 Nodes (Infinity n/s), 37 Backtracks, 18 Fails, 0 Restarts, objective: 14\n3)at 240ms, 369 Nodes (Infinity n/s), 625 Backtracks, 311 Fails, 0 Restarts, objective: 6\n4)at 258ms, 375 Nodes (Infinity n/s), 704 Backtracks, 350 Fails, 0 Restarts, objective: 3\n0:3 {action=migrate(vm=vm#31, from=node#1, to=node#2, bw=2147483647), @post= {allocate(vm=vm#31, rc=controller_cpu, amount=3345)}}\n3:3 {action=allocate(vm=vm#29, on=node#1, rc=controller_cpu, amount=79)}\n3:3 {action=allocate(vm=vm#20, on=node#1, rc=controller_cpu, amount=174)}\n3:3 {action=allocate(vm=vm#24, on=node#1, rc=controller_cpu, amount=577)}\n3:3 {action=allocate(vm=vm#27, on=node#1, rc=controller_cpu, amount=587)}\n3:3 {action=allocate(vm=vm#18, on=node#1, rc=controller_cpu, amount=123)}\n3:3 {action=allocate(vm=vm#19, on=node#1, rc=controller_cpu, amount=561)}\n3:3 {action=allocate(vm=vm#32, on=node#1, rc=controller_cpu, amount=1864)}\n3:3 {action=allocate(vm=vm#22, on=node#1, rc=controller_cpu, amount=99)}\n3:3 {action=allocate(vm=vm#25, on=node#1, rc=controller_cpu, amount=574)}\n3:3 {action=allocate(vm=vm#28, on=node#1, rc=controller_cpu, amount=127)}\n3:3 {action=allocate(vm=vm#33, on=node#1, rc=controller_cpu, amount=496)}\n0:1 {action=migrate(vm=vm#1, from=node#1, to=node#2, bw=2147483647)}\n1:2 {action=migrate(vm=vm#0, from=node#0, to=node#1, bw=2147483647)}\n0:1 {action=migrate(vm=vm#0, from=node#0, to=node#1, bw=2147483647)}\n0:1 {action=migrate(vm=vm#1, from=node#1, to=node#0, bw=2147483647)}\n1000 node(s); 10000 VM(s); 10000 constraint(s); satisfy; timeout: 1s\nBuilding duration: 254ms (core) + 97ms (specialization)\nAfter 1086ms of search (timeout): at 1086ms, 2 Nodes (2.0 n/s), 0 Backtracks, 0 Fails, 0 Restarts, 0 solution(s).\n0:5 {action=shutdown(node=node#0)}\n0:5 {action=shutdown(node=node#0)}\n5:10 {action=shutdown(node=node#1)}\n0:10 {action=boot(node=node#1)}\n1:6 {action=shutdown(node=node#1)}\n6:16 {action=boot(node=node#2)}\n2:7 {action=shutdown(node=node#0)}\n0:5 {action=shutdown(node=node#0)}\n5:7 {action=boot(node=node#1)}\nat 0ms, 0 Nodes (NaN n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 12\nnode ONLINE : shutdownable\nnode OFFLINE : bootable\nvm [INIT] -> INIT: stayInit\nvm [INIT] -> READY: forge\nvm [READY] -> READY: stayReady\nvm [RUNNING] -> READY: shutdown\nvm [READY] -> RUNNING: boot\nvm [RUNNING] -> RUNNING: relocatable\nvm [SLEEPING] -> RUNNING: resume\nvm [RUNNING] -> SLEEPING: suspend\nvm [SLEEPING] -> SLEEPING: staySleeping\nvm [INIT, READY, RUNNING, SLEEPING] -> KILLED: kill\n500 node(s); 51001 VM(s); 1 constraint(s); satisfy\nBuilding duration: 1694ms (core) + 702ms (specialization)\nAfter 1369ms of search (terminated): at 1369ms, 0 Nodes (0.0 n/s), 0 Backtracks, 1 Fails, 0 Restarts, 0 solution(s).\n---- Stage 1/2 ----\n32 node(s); 6688 VM(s); 3 constraint(s); satisfy\nBuilding duration: 183ms (core) + 122ms (specialization)\nAfter 35479ms of search (terminated): at 35479ms, 6793 Nodes (194.1 n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 35442ms, 6793 Nodes (194.1 n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 71\n---- Stage 2/2 ----\n32 node(s); 6688 VM(s); 6691 constraint(s); satisfy\nBuilding duration: 176ms (core) + 284ms (specialization)\nAfter 708ms of search (terminated): at 708ms, 105 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 674ms, 105 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 9144\n71 action(s)\n---- Stage 1/2 ----\n16 node(s); 1664 VM(s); 3 constraint(s); satisfy\nBuilding duration: 72ms (core) + 11ms (specialization)\nAfter 1222ms of search (terminated): at 1222ms, 1716 Nodes (1,716.0 n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 1214ms, 1716 Nodes (1,716.0 n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 34\n---- Stage 2/2 ----\n16 node(s); 1664 VM(s); 1667 constraint(s); satisfy\nBuilding duration: 23ms (core) + 34ms (specialization)\nAfter 145ms of search (terminated): at 145ms, 52 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 136ms, 52 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 595\n34 action(s)\n--- 0 ---\n4 node(s); 96 VM(s); 62 constraint(s); satisfy\nBuilding duration: 3ms (core) + 2ms (specialization)\nAfter 5ms of search (terminated): at 5ms, 98 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, 1 solution(s):\n1)at 4ms, 98 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, objective: 400\n15 action(s)\n--- 1 ---\n8 node(s); 136 VM(s); 65 constraint(s); satisfy\nBuilding duration: 2ms (core) + 1ms (specialization)\nAfter 16ms of search (terminated): at 16ms, 157 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, 1 solution(s):\n1)at 15ms, 157 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, objective: 1123\n41 action(s)\n--- 2 ---\n8 node(s); 136 VM(s); 65 constraint(s); satisfy\nBuilding duration: 3ms (core) + 1ms (specialization)\nAfter 10ms of search (terminated): at 10ms, 151 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, 1 solution(s):\n1)at 9ms, 151 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, objective: 1030\n36 action(s)\n--- 3 ---\n8 node(s); 139 VM(s); 82 constraint(s); satisfy\nBuilding duration: 7ms (core) + 2ms (specialization)\nAfter 13ms of search (terminated): at 13ms, 176 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, 1 solution(s):\n1)at 12ms, 176 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, objective: 1607\n66 action(s)\n--- 4 ---\n8 node(s); 139 VM(s); 82 constraint(s); satisfy\nBuilding duration: 1ms (core) + 1ms (specialization)\nAfter 11ms of search (terminated): at 11ms, 173 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, 1 solution(s):\n1)at 10ms, 173 Nodes (Infinity n/s), 1 Backtracks, 1 Fails, 0 Restarts, objective: 1655\n66 action(s)\n0:1 {action=migrate(vm=vm#4, from=node#2, to=node#3, bw=1000)}\n1:2 {action=migrate(vm=vm#5, from=node#2, to=node#3, bw=1000)}\n2:3 {action=shutdown(node=node#2)}\n2:3 {action=migrate(vm=vm#2, from=node#1, to=node#3, bw=1000)}\n3:4 {action=migrate(vm=vm#3, from=node#1, to=node#3, bw=1000)}\n4:5 {action=migrate(vm=vm#0, from=node#0, to=node#3, bw=1000)}\n4:5 {action=shutdown(node=node#1)}\n5:6 {action=migrate(vm=vm#1, from=node#0, to=node#3, bw=1000)}\n6:7 {action=shutdown(node=node#0)}\n---- Stage 1/2 ----\n4 node(s); 8 VM(s); 3 constraint(s); satisfy\nBuilding duration: 0ms (core) + 1ms (specialization)\nAfter 0ms of search (terminated): at 0ms, 6 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 0ms, 6 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 12\n---- Stage 2/2 ----\n4 node(s); 8 VM(s); 11 constraint(s); satisfy\nBuilding duration: 0ms (core) + 0ms (specialization)\nAfter 2ms of search (terminated): at 2ms, 32 Nodes (Infinity n/s), 25 Backtracks, 23 Fails, 0 Restarts, 1 solution(s):\n1)at 1ms, 32 Nodes (Infinity n/s), 25 Backtracks, 23 Fails, 0 Restarts, objective: 36\n4 node(s); 87 VM(s) (21 managed); 1 constraint(s); satisfy; timeout: 60000s\nBuilding duration: 1ms (core) + 1ms (specialization)\nAfter 2ms of search (terminated): at 2ms, 27 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 1ms, 27 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 23\n3.0 x foo + 0.0\n[INFO] Tests run: 238, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 55.816 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 238, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco:0.8.7:report (report) @ scheduler-choco ---\n[INFO] Loading execution data file /mnt/repo/choco/target/jacoco.exec\n[INFO] Analyzed bundle 'scheduler-choco' with 128 classes\n[INFO]\n[INFO] ------------------< org.btrplace:scheduler-examples >-------------------\n[INFO] Building scheduler-examples 1.12.1-SNAPSHOT [5/9]\n[INFO] from examples/pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ scheduler-examples ---\n[INFO]\n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ scheduler-examples ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/mnt/repo/examples/target/jacoco.exec,excludes=org/btrplace/btrpsl/**/*:org/btrplace/safeplace/**/*:org/btrplace/bench/**/*:org/btrplace/scheduler/runner/disjoint/**/*\n[INFO]\n[INFO] --- resources:3.3.1:resources (default-resources) @ scheduler-examples ---\n[INFO] skip non existing resourceDirectory /mnt/repo/examples/src/main/resources\n[INFO]\n[INFO] --- compiler:3.8.1:compile (default-compile) @ scheduler-examples ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 7 source files to /mnt/repo/examples/target/classes\n[INFO]\n[INFO] --- resources:3.3.1:testResources (default-testResources) @ scheduler-examples ---\n[INFO] skip non existing resourceDirectory /mnt/repo/examples/src/test/resources\n[INFO]\n[INFO] --- compiler:3.8.1:testCompile (default-testCompile) @ scheduler-examples ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 1 source file to /mnt/repo/examples/target/test-classes\n[INFO]\n[INFO] --- surefire:3.0.0-M5:test (default-test) @ scheduler-examples ---\n[INFO]\n[INFO] --- jacoco:0.8.7:report (report) @ scheduler-examples ---\n[INFO] Skipping JaCoCo execution due to missing execution data file.\n[INFO]\n[INFO] ------------------------< org.btrplace:btrpsl >-------------------------\n[INFO] Building btrpsl 1.12.1-SNAPSHOT [6/9]\n[INFO] from btrpsl/pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ btrpsl ---\n[INFO]\n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ btrpsl ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/mnt/repo/btrpsl/target/jacoco.exec,excludes=org/btrplace/btrpsl/**/*:org/btrplace/safeplace/**/*:org/btrplace/bench/**/*:org/btrplace/scheduler/runner/disjoint/**/*\n[INFO]\n[INFO] --- antlr3:3.5.2:antlr (default) @ btrpsl ---\n[INFO] ANTLR: Processing source directory /mnt/repo/btrpsl/src/main/antlr3\nANTLR Parser Generator Version 3.5.2\nOutput file /mnt/repo/btrpsl/target/generated-sources/antlr3/org/btrplace/btrpsl/antlr/ANTLRBtrplaceSL2Parser.java does not exist: must build /mnt/repo/btrpsl/src/main/antlr3/org/btrplace/btrpsl/antlr/ANTLRBtrplaceSL2.g\norg/btrplace/btrpsl/antlr/ANTLRBtrplaceSL2.g\n[INFO]\n[INFO] --- resources:3.3.1:resources (default-resources) @ btrpsl ---\n[INFO] skip non existing resourceDirectory /mnt/repo/btrpsl/src/main/resources\n[INFO]\n[INFO] --- compiler:3.8.1:compile (default-compile) @ btrpsl ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 98 source files to /mnt/repo/btrpsl/target/classes\n[INFO]\n[INFO] --- resources:3.3.1:testResources (default-testResources) @ btrpsl ---\n[INFO] Copying 42 resources from src/test/resources to target/test-classes\n[INFO]\n[INFO] --- compiler:3.8.1:testCompile (default-testCompile) @ btrpsl ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 31 source files to /mnt/repo/btrpsl/target/test-classes\n[INFO]\n[INFO] --- surefire:3.0.0-M5:test (default-test) @ btrpsl ---\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO] T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running TestSuite\n[test 2:18] Unknown node 'N1'\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n[test 2:6] Unknown node 'N1'\n[test 2:17] Unknown node 'N1'\n[test 2:8] Empty sets not allowed\n[test 2:19] Unknown node 'N1'\n[test 2:19] Unknown node 'N1'\n[test 2:0] 'among(set<vm>, ??, set<vm>)' cannot be casted to 'among(set<VM>, set<set<NODE>>)'\n[test 2:19] Unknown node 'N1'\n[test 2:22] Unknown node 'N1'\n[test 2:15] Empty sets not allowed\n[test 2:6] Empty sets not allowed\n[test 2:9] Empty sets not allowed\n[test 2:24] 'ban(node, set<node>)' cannot be casted to 'ban(set<VM>, set<NODE>)'\n[test 2:24] 'ban(set<vm>, set<vm>)' cannot be casted to 'ban(set<VM>, set<NODE>)'\n[test 2:24] 'ban(set<vm>, set<node>, node)' cannot be casted to 'ban(set<VM>, set<NODE>)'\n[test 2:24] 'ban(set<vm>, set<node>, vm)' cannot be casted to 'ban(set<VM>, set<NODE>)'\n[test 2:24] 'ban(set<vm>, set<node>, node)' cannot be casted to 'ban(set<VM>, set<NODE>)'\n[test 2:24] 'ban(set<vm>, set<set<node>>)' cannot be casted to 'ban(set<VM>, set<NODE>)'\n[test 2:28] Empty sets not allowed\n[test 2:32] Empty sets not allowed\n[test 2:28] Empty sets not allowed\n[test 2:31] Empty sets not allowed\n{{2, 1}, {2, 3}, {3, 1}}\n[test 3:2] 'fence(node, set<node>)' cannot be casted to 'fence(set<VM>, set<NODE>)'\n[test 3:0] 'fence(set<node>, set<node>)' cannot be casted to 'fence(set<VM>, set<NODE>)'\n[test 3:0] 'fence(set<vm>, set<vm>)' cannot be casted to 'fence(set<VM>, set<NODE>)'\n[test 3:0] 'fence(set<vm>, set<node>, vm)' cannot be casted to 'fence(set<VM>, set<NODE>)'\n[test 3:0] 'fence(set<vm>, set<node>, node)' cannot be casted to 'fence(set<VM>, set<NODE>)'\n[test 3:0] 'fence(set<vm>, set<set<node>>)' cannot be casted to 'fence(set<VM>, set<NODE>)'\n[test 3:6] Empty sets not allowed\n[test 3:10] Empty sets not allowed\n[test 3:6] Empty sets not allowed\n[test 3:9] Empty sets not allowed\ngather({VM1,VM2},@N1); [test 2:17] Unknown node 'N1'\n[test 2:0] 'gather(set<vm>, ??)' cannot be casted to 'gather(set<VM>)'\ngather({}); [test 2:7] Empty sets not allowed\ngather(@N[1..10]); [test 2:13] Unknown node 'N1'\ngather(VMa); [test 2:7] Unknown VM 'VMa'\ngather(); [test 2:7] no viable alternative at input ')'\n>>killed({}); [test 2:33] Empty sets not allowed\nkilled({@N1}); [test 2:24] 'killed(set<node>)' cannot be casted to 'killed(set<VM>)'\n>>killed({VM[1..5]}); [test 2:26] 'killed(set<set<vm>>)' cannot be casted to 'killed(set<VM>)'\nlonely({VM1,VM2},{VM3}); [test 2:0] 'lonely(set<vm>, set<vm>)' cannot be casted to 'lonely(set<VM>)'\nlonely({}); [test 2:7] Empty sets not allowed\nlonely(@N[1..10]); [test 2:13] Unknown node 'N1'\nlonely(VMa); [test 2:7] Unknown VM 'VMa'\nlonely(); [test 2:7] no viable alternative at input ')'\nmaxOnline({VM1,VM2},{VM3}); [test 2:0] 'maxOnline(set<vm>, set<vm>)' cannot be casted to 'maxOnline(set<NODE>, number)'\nmaxOnline({}); [test 2:10] Empty sets not allowed\n[test 2:0] 'maxOnline(??)' cannot be casted to 'maxOnline(set<NODE>, number)'\nmaxOnline(@N[1..10]); [test 2:16] Unknown node 'N1'\n[test 2:0] 'maxOnline(??)' cannot be casted to 'maxOnline(set<NODE>, number)'\nmaxOnline({@N2}, 2.5); [test 2:11] Unknown node 'N2'\nmaxOnline({@N2}, -2); [test 2:11] Unknown node 'N2'\nmaxOnline(); [test 2:10] no viable alternative at input ')'\n[test 2:0] 'maxOnline(??)' cannot be casted to 'maxOnline(set<NODE>, number)'\noffline({}); [test 2:32] Empty sets not allowed\n>>offline({VM7}); [test 2:26] 'offline(set<vm>)' cannot be casted to 'offline(set<NODE>)'\noffline({@N[1..5]}); [test 2:24] 'offline(set<set<node>>)' cannot be casted to 'offline(set<NODE>)'\n>>online({}); [test 3:9] Empty sets not allowed\n>>online({VM7}); [test 3:2] 'online(set<vm>)' cannot be casted to 'online(set<NODE>)'\nonline({@N[1..5]}); [test 3:0] 'online(set<set<node>>)' cannot be casted to 'online(set<NODE>)'\noverbook({@N1,@N2},-1); [test 3:0] 'overbook(set<node>, number)' cannot be casted to 'overbook(set<NODE>, string, number)'\noverbook(\"foo\",-1); [test 3:0] 'overbook(string, number)' cannot be casted to 'overbook(set<NODE>, string, number)'\n>>overbook({},5); [test 3:11] Empty sets not allowed\n[test 3:2] 'overbook(??, number)' cannot be casted to 'overbook(set<NODE>, string, number)'\noverbook(@N[1,3,5]); [test 3:0] 'overbook(set<node>)' cannot be casted to 'overbook(set<NODE>, string, number)'\n>>overbook(@N[1,3,5,15],\"foo\"); [test 3:2] 'overbook(set<node>, string)' cannot be casted to 'overbook(set<NODE>, string, number)'\noverbook(5); [test 3:0] 'overbook(number)' cannot be casted to 'overbook(set<NODE>, string, number)'\npreserve({VM1,VM2},\"foo\", -1); [test 3:0] Parameter '$r' expects a positive integer (-1 given)\npreserve({VM1,VM2},\"foo\", 1.2); [test 3:0] Parameter '$r' expects an integer\npreserve(\"foo\",-1); [test 3:0] 'preserve(string, number)' cannot be casted to 'preserve(set<VM>, string, number)'\npreserve({},5); [test 3:9] Empty sets not allowed\n[test 3:0] 'preserve(??, number)' cannot be casted to 'preserve(set<VM>, string, number)'\npreserve(VM[1,3,5]); [test 3:0] 'preserve(set<vm>)' cannot be casted to 'preserve(set<VM>, string, number)'\npreserve(VM[1,3,5,15],\"foo\"); [test 3:18] Unknown VM 'VM15'\n[test 3:0] 'preserve(??, string)' cannot be casted to 'preserve(set<VM>, string, number)'\nquarantine({}); [test 3:11] Empty sets not allowed\nquarantine({VM7}); [test 3:0] 'quarantine(set<vm>)' cannot be casted to 'quarantine(set<NODE>)'\n>>quarantine(@N1); [test 3:2] Discrete restriction is not supported by constraint 'quarantine'\nquarantine({@N[1..5]}); [test 3:0] 'quarantine(set<set<node>>)' cannot be casted to 'quarantine(set<NODE>)'\nready({}); [test 2:30] Empty sets not allowed\nready({@N1}); [test 2:24] 'ready(set<node>)' cannot be casted to 'ready(set<VM>)'\n>>ready({VM[1..5]}); [test 2:26] 'ready(set<set<vm>>)' cannot be casted to 'ready(set<VM>)'\n>>resourceCapacity({@N1,@N2},\"foo\", -1); [test 3:2] Parameter '$nb' expects a positive integer (-1 given)\nresourceCapacity({},\"foo\", 5); [test 3:17] Empty sets not allowed\n>>resourceCapacity(@N[1,3,5]); [test 3:2] 'resourceCapacity(set<node>)' cannot be casted to 'resourceCapacity(set<NODE>, string, number)'\nresourceCapacity(\"foo\"); [test 3:0] 'resourceCapacity(string)' cannot be casted to 'resourceCapacity(set<NODE>, string, number)'\nresourceCapacity(VM[1..3],\"foo\", 3); [test 3:0] 'resourceCapacity(set<vm>, string, number)' cannot be casted to 'resourceCapacity(set<NODE>, string, number)'\n>>resourceCapacity(@N[1..3],\"foo\", 3.2); [test 3:2] Parameter '$nb' expects an integer\nresourceCapacity(5); [test 3:0] 'resourceCapacity(number)' cannot be casted to 'resourceCapacity(set<NODE>, string, number)'\nresourceCapacity(\"bar\", \"foo\", 5); [test 3:0] 'resourceCapacity(string, string, number)' cannot be casted to 'resourceCapacity(set<NODE>, string, number)'\nroot({VM1,VM2},@N1); [test 2:15] Unknown node 'N1'\n[test 2:0] 'root(set<vm>, ??)' cannot be casted to 'root(set<VM>)'\nroot({}); [test 2:5] Empty sets not allowed\nroot(@N[1..10]); [test 2:11] Unknown node 'N1'\nroot(VMa); [test 2:5] Unknown VM 'VMa'\nroot(); [test 2:5] no viable alternative at input ')'\n>>root({VM1}); [test 2:2] Discrete restriction is not supported by constraint 'root'\n>>running({}); [test 2:34] Empty sets not allowed\n>>running({@N1}); [test 2:26] 'running(set<node>)' cannot be casted to 'running(set<VM>)'\n>>running({VM[1..5]}); [test 2:26] 'running(set<set<vm>>)' cannot be casted to 'running(set<VM>)'\nrunningCapacity({@N1,@N2},-1); [test 3:0] Parameter '$nb' expects a positive integer (-1 given)\nrunningCapacity({@N1,@N2},1.2); [test 3:0] Parameter '$nb' expects an integer\n>>runningCapacity({},5); [test 3:18] Empty sets not allowed\nrunningCapacity(@N[1,3,5]); [test 3:0] 'runningCapacity(set<node>)' cannot be casted to 'runningCapacity(set<NODE>, number)'\n>>runningCapacity(@N[1,3,5,15]); [test 3:2] 'runningCapacity(set<node>)' cannot be casted to 'runningCapacity(set<NODE>, number)'\nrunningCapacity(VM[1..3],3); [test 3:0] 'runningCapacity(set<vm>, number)' cannot be casted to 'runningCapacity(set<NODE>, number)'\nrunningCapacity(5); [test 3:0] 'runningCapacity(number)' cannot be casted to 'runningCapacity(set<NODE>, number)'\nseq({VM1,VM2},{VM3}); [test 2:0] 'seq(set<vm>, set<vm>)' cannot be casted to 'seq(set<VM>)'\nseq({}); [test 2:4] Empty sets not allowed\nseq(@N[1..10]); [test 2:10] Unknown node 'N1'\nseq(VMa); [test 2:4] Unknown VM 'VMa'\nseq(); [test 2:4] no viable alternative at input ')'\n>>seq(VM[1..5]); [test 2:2] Discrete restriction is not supported by constraint 'seq'\n>>sleeping({}); [test 2:35] Empty sets not allowed\n>>sleeping({@N1}); [test 2:26] 'sleeping(set<node>)' cannot be casted to 'sleeping(set<VM>)'\n>>sleeping({VM[1..5]}); [test 2:26] 'sleeping(set<set<vm>>)' cannot be casted to 'sleeping(set<VM>)'\n>>splitAmong({VM1},{VM2},{VM3}); [test 3:2] 'splitAmong(set<vm>, set<vm>, set<vm>)' cannot be casted to 'splitAmong(set<set<VM>>, set<set<NODE>>)'\nsplitAmong({{VM1}}, {{}}); [test 3:21] Empty sets not allowed\nsplitAmong({{}},{@N[1..2],@N[3..5]}); [test 3:12] Empty sets not allowed\nsplitAmong({@N[1..5],@N[6..10]},{@VM[1..5],VM[6..10]}); [test 3:40] Unknown node 'VM1'\n[test 3:0] 'splitAmong(set<set<node>>, ??)' cannot be casted to 'splitAmong(set<set<VM>>, set<set<NODE>>)'\nsplit({VM1},{VM2},{VM3}); [test 3:0] 'split(set<vm>, set<vm>, set<vm>)' cannot be casted to 'split(set<set<VM>>)'\nsplit({VM1},{}); [test 3:12] Empty sets not allowed\n[test 3:0] 'split(set<vm>, ??)' cannot be casted to 'split(set<set<VM>>)'\nsplit({},{VM1}); [test 3:6] Empty sets not allowed\n[test 3:0] 'split(??, set<vm>)' cannot be casted to 'split(set<set<VM>>)'\nsplit(@N[1..5],@VM[1..5]); [test 3:22] Unknown node 'VM1'\n[test 3:0] 'split(set<node>, ??)' cannot be casted to 'split(set<set<VM>>)'\n>>split(VM[1..5],@N[1..5]); [test 3:2] 'split(set<vm>, set<node>)' cannot be casted to 'split(set<set<VM>>)'\nsplit({VM[1..5]},{VM1}); [test 3:0] 'split(set<set<vm>>, set<vm>)' cannot be casted to 'split(set<set<VM>>)'\nsplit(VM[1..5],{{VM1}}); [test 3:0] 'split(set<vm>, set<set<vm>>)' cannot be casted to 'split(set<set<VM>>)'\nspread({VM1,VM2},{VM3}); [test 2:0] 'spread(set<vm>, set<vm>)' cannot be casted to 'spread(set<VM>)'\nspread({}); [test 2:7] Empty sets not allowed\nspread(@N[1..10]); [test 2:13] Unknown node 'N1'\nspread(VMa); [test 2:7] Unknown VM 'VMa'\nspread(); [test 2:7] no viable alternative at input ')'\n$a = VM[1..12]; [test 3:11] Unknown VM 'VM11'\na\n|- b\n|- in.titi\n\\- in.toto\n\\- c\n|- out.foo\n\\- out.bar\norg.btrplace.btrpsl.ScriptBuilderException: [foo 2:19] mismatched input '<EOF>' expecting ')'\norg.btrplace.btrpsl.ScriptBuilderException: [foo 1:23] Node '@N1' already created\norg.btrplace.btrpsl.ScriptBuilderException: [test.template 3:3] Unable to add a 'vm' to a 'set<vm>'\n[test.template 4:23] Unknown node 'N1'\n[test.template 5:3] Unable to add a 'number' to a 'set<vm>'\n[test.template 6:3] Unable to subtract a 'set<set<vm>>' from a 'set<vm>'\n[test.template 7:17] Unknown node 'N1'\n[test.template 8:20] Unknown node 'N1'\n[test.template 9:20] Unknown VM 'VM21'\n[test.template 10:8] Unknown VM 'VM22'\norg.btrplace.btrpsl.ScriptBuilderException: [foo 1:23] 0 already implements 't1'. Redefinition is not allowed\norg.btrplace.btrpsl.ScriptBuilderException: [foo 1:23] VM 'foo.VM1' already created\n{range.VM5, range.VMbaz, range.VM7, range.VMzip, range.VM15, range.VM9, range.VM10, range.VM11, range.VM12}\n[INFO] Tests run: 271, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.212 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 271, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco:0.8.7:report (report) @ btrpsl ---\n[INFO] Loading execution data file /mnt/repo/btrpsl/target/jacoco.exec\n[INFO] Analyzed bundle 'btrpsl' with 0 classes\n[INFO]\n[INFO] -----------------------< org.btrplace:safeplace >-----------------------\n[INFO] Building safeplace 1.12.1-SNAPSHOT [7/9]\n[INFO] from safeplace/pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ safeplace ---\n[INFO]\n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ safeplace ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/mnt/repo/safeplace/target/jacoco.exec,excludes=org/btrplace/btrpsl/**/*:org/btrplace/safeplace/**/*:org/btrplace/bench/**/*:org/btrplace/scheduler/runner/disjoint/**/*\n[INFO]\n[INFO] --- antlr4:4.9.3:antlr4 (default) @ safeplace ---\n[INFO] ANTLR 4: Processing source directory /mnt/repo/safeplace/src/main/antlr\n[INFO] Processing grammar: org/btrplace/safeplace/spec/antlr/CstrSpec.g4\n[WARNING] warning(180): org/btrplace/safeplace/spec/antlr/CstrSpec.g4:31:15: chars '.' used multiple times in set [1..9]\n[WARNING] /mnt/repo/org/btrplace/safeplace/spec/antlr/CstrSpec.g4 [31:15]: chars '.' used multiple times in set [1..9]\n[WARNING] warning(180): org/btrplace/safeplace/spec/antlr/CstrSpec.g4:31:21: chars '.' used multiple times in set [0..9]\n[WARNING] /mnt/repo/org/btrplace/safeplace/spec/antlr/CstrSpec.g4 [31:21]: chars '.' used multiple times in set [0..9]\n[INFO]\n[INFO] --- resources:3.3.1:resources (default-resources) @ safeplace ---\n[INFO] Copying 1 resource from src/main/resources to target/classes\n[INFO]\n[INFO] --- compiler:3.8.1:compile (default-compile) @ safeplace ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 125 source files to /mnt/repo/safeplace/target/classes\n[INFO] /mnt/repo/safeplace/src/main/java/org/btrplace/safeplace/spec/MyCstrSpecVisitor.java: Some input files use or override a deprecated API.\n[INFO] /mnt/repo/safeplace/src/main/java/org/btrplace/safeplace/spec/MyCstrSpecVisitor.java: Recompile with -Xlint:deprecation for details.\n[INFO] /mnt/repo/safeplace/src/main/java/org/btrplace/safeplace/spec/term/Constant.java: Some input files use unchecked or unsafe operations.\n[INFO] /mnt/repo/safeplace/src/main/java/org/btrplace/safeplace/spec/term/Constant.java: Recompile with -Xlint:unchecked for details.\n[INFO]\n[INFO] --- resources:3.3.1:testResources (default-testResources) @ safeplace ---\n[INFO] skip non existing resourceDirectory /mnt/repo/safeplace/src/test/resources\n[INFO]\n[INFO] --- compiler:3.8.1:testCompile (default-testCompile) @ safeplace ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 18 source files to /mnt/repo/safeplace/target/test-classes\n[INFO] /mnt/repo/safeplace/src/test/java/org/btrplace/safeplace/DSN.java: /mnt/repo/safeplace/src/test/java/org/btrplace/safeplace/DSN.java uses or overrides a deprecated API.\n[INFO] /mnt/repo/safeplace/src/test/java/org/btrplace/safeplace/DSN.java: Recompile with -Xlint:deprecation for details.\n[INFO] /mnt/repo/safeplace/src/test/java/org/btrplace/safeplace/spec/prop/MinusTest.java: Some input files use unchecked or unsafe operations.\n[INFO] /mnt/repo/safeplace/src/test/java/org/btrplace/safeplace/spec/prop/MinusTest.java: Recompile with -Xlint:unchecked for details.\n[INFO]\n[INFO] --- surefire:3.0.0-M5:test (default-test) @ safeplace ---\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO] T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running TestSuite\nset<int>\nset<set<int>>\nnoVMsOnOfflineNodes() ::= !(n : nodes) nodeState(n) /= ONLINE --> card(hosted(n)) = 0\ntoRunning() ::= !(v : vms) vmState(v) = RUNNING --> ^vmState(v) : {READY, RUNNING, SLEEPING}\ntoReady() ::= !(v : vms) vmState(v) = READY --> ^vmState(v) : {READY, RUNNING}\ntoSleeping() ::= !(v : vms) vmState(v) = SLEEPING --> ^vmState(v) : {RUNNING, SLEEPING}\nAmong(vs <: vms, parts <<: nodes) ::= ?(g : parts) {host(i). i : vs , vmState(i) = RUNNING} <: g\nBan(v : vms, ns <: nodes) ::= vmState(v) = RUNNING --> host(v) /: ns\nFence(v : vms, ns <: nodes) ::= vmState(v) = RUNNING --> host(v) : ns\nGather(vs <: vms) ::= !(x,y : vs) (x /= y & vmState(x) = RUNNING & vmState(y) = RUNNING) --> host(x) = host(y)\nKilled(v : vms) ::= vmState(v) = TERMINATED\nLonely(vs <: vms) ::= !(i : vs) vmState(i) = RUNNING --> (colocated(i) - {i}) <: vs\nMaxOnline(ns <: nodes, nb : int) ::= card({i. i : ns , nodeState(i) = ONLINE}) <= nb\nNoDelay(v : vms) ::= !(a : actions(v)) begin(a) = 0\nOffline(n : nodes) ::= nodeState(n) = OFFLINE\nOnline(n : nodes) ::= nodeState(n) = ONLINE\nReady(v : vms) ::= vmState(v) = READY\nResourceCapacity(ns <: nodes, id : string, qty : int) ::= sum({capa(i, id). i : ns}) <= qty\nRoot(v : vms) ::= vmState(v) = RUNNING & ^vmState(v) = RUNNING --> ^host(v) = host(v)\nRunning(v : vms) ::= vmState(v) = RUNNING\nRunningCapacity(ns <: nodes, nb : int) ::= sum({card(running(n)). n : ns}) <= nb\nSeq(sched : lists(vms)) ::= !(i,j : range(sched)) i < j --> (!(ai : actions(sched[i])) !(aj : actions(sched[j])) end(aj) <= begin(aj))\nSleeping(v : vms) ::= vmState(v) = SLEEPING\nSplit(part <<: vms) ::= {{host(v). v : p , vmState(v) = RUNNING}. p : part} <<: nodes\nSpread(vs <: vms) ::= !(x,y : vs) (x /= y & vmState(x) = RUNNING & vmState(y) = RUNNING) --> host(x) /= host(y)\nSync(vs <: vms) ::= !(v : vs) !(a,b : actions(v)) begin(a) = begin(b)\nShareableResource(id : string) ::= !(n : nodes) sum([cons(v, id). v : running(n)]) <= capa(n, id)\nSplitAmong(vs <<: vms, part <<: nodes) ::= (!(v : vs) Among(v, part)) & Split(vs)\nQuarantine(n : nodes) ::= (!(v : hosted(n)) Root(v)) & (!(v2 /: hosted(n)) Ban(v2, {n}))\n3 ms\n[INFO] Tests run: 38, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.115 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 38, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco:0.8.7:report (report) @ safeplace ---\n[INFO] Loading execution data file /mnt/repo/safeplace/target/jacoco.exec\n[INFO] Analyzed bundle 'safeplace' with 0 classes\n[INFO]\n[INFO] -------------------------< org.btrplace:bench >-------------------------\n[INFO] Building bench 1.12.1-SNAPSHOT [8/9]\n[INFO] from bench/pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ bench ---\n[INFO]\n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ bench ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/mnt/repo/bench/target/jacoco.exec,excludes=org/btrplace/btrpsl/**/*:org/btrplace/safeplace/**/*:org/btrplace/bench/**/*:org/btrplace/scheduler/runner/disjoint/**/*\n[INFO]\n[INFO] --- resources:3.3.1:resources (default-resources) @ bench ---\n[INFO] skip non existing resourceDirectory /mnt/repo/bench/src/main/resources\n[INFO]\n[INFO] --- compiler:3.8.1:compile (default-compile) @ bench ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 3 source files to /mnt/repo/bench/target/classes\n[INFO]\n[INFO] --- resources:3.3.1:testResources (default-testResources) @ bench ---\n[INFO] Copying 43 resources from src/test/resources to target/test-classes\n[INFO]\n[INFO] --- compiler:3.8.1:testCompile (default-testCompile) @ bench ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 2 source files to /mnt/repo/bench/target/test-classes\n[INFO]\n[INFO] --- surefire:3.0.0-M5:test (default-test) @ bench ---\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO] T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running org.btrplace.bench.BenchTest\nTotal Memory: 248\nMax Memory: 3904\n----- /tmp/foo13914943117091778683.gzSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n-----\n3 node(s); 2 VM(s); 3 constraint(s); satisfy\nBuilding duration: 204ms (core) + 75ms (specialization)\nAfter 22ms of search (terminated): at 22ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 21ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 10\n----- /tmp/foo8235991340042968267.gz -----\n3 node(s); 2 VM(s); 3 constraint(s); satisfy\nBuilding duration: 3ms (core) + 2ms (specialization)\nAfter 9ms of search (terminated): at 9ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 7ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 10\n----- /tmp/foo15330660783988827412.gz -----\n3 node(s); 2 VM(s); 3 constraint(s); satisfy\nBuilding duration: 2ms (core) + 3ms (specialization)\nAfter 8ms of search (terminated): at 8ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 7ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 10\n----- /tmp/foo1466773974446050258.gz -----\n3 node(s); 2 VM(s); 3 constraint(s); satisfy\nBuilding duration: 2ms (core) + 3ms (specialization)\nAfter 7ms of search (terminated): at 7ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 6ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 10\n----- /tmp/foo14580677407298332664.gz -----\n3 node(s); 2 VM(s); 3 constraint(s); satisfy\nBuilding duration: 3ms (core) + 2ms (specialization)\nAfter 5ms of search (terminated): at 5ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 4ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 10\n/tmp/instances16495130703165756901/b5b303cf-551e-4ccb-875b-1626b20c0274.gz\n0:1 {action=boot(node=node#2)}\n1:2 {action=migrate(vm=vm#1, from=node#1, to=node#2, bw=2147483647)}\n2:3 {action=migrate(vm=vm#0, from=node#0, to=node#1, bw=2147483647)}\n3:4 {action=shutdown(node=node#0)}\n/tmp/instances16495130703165756901/304b4e51-1caf-4e46-b5b2-59e67e5d7c96.gz\n0:1 {action=boot(node=node#2)}\n1:2 {action=migrate(vm=vm#1, from=node#1, to=node#2, bw=2147483647)}\n2:3 {action=migrate(vm=vm#0, from=node#0, to=node#1, bw=2147483647)}\n3:4 {action=shutdown(node=node#0)}\n/tmp/instances16495130703165756901/d2d6a82b-b37f-4343-aab6-3ba1d6eb83f5.gz\n0:1 {action=boot(node=node#2)}\n1:2 {action=migrate(vm=vm#1, from=node#1, to=node#2, bw=2147483647)}\n2:3 {action=migrate(vm=vm#0, from=node#0, to=node#1, bw=2147483647)}\n3:4 {action=shutdown(node=node#0)}\n/tmp/instances16495130703165756901/bd481844-5fb0-408c-80fc-a03f4965f79c.gz\n0:1 {action=boot(node=node#2)}\n1:2 {action=migrate(vm=vm#1, from=node#1, to=node#2, bw=2147483647)}\n2:3 {action=migrate(vm=vm#0, from=node#0, to=node#1, bw=2147483647)}\n3:4 {action=shutdown(node=node#0)}\n/tmp/instances16495130703165756901/a5d4e3b2-7653-4125-a9ce-1cba96349ee8.gz\n0:1 {action=boot(node=node#2)}\n1:2 {action=migrate(vm=vm#1, from=node#1, to=node#2, bw=2147483647)}\n2:3 {action=migrate(vm=vm#0, from=node#0, to=node#1, bw=2147483647)}\n3:4 {action=shutdown(node=node#0)}\nTotal Memory: 248\nMax Memory: 3904\n.... [1/2] d_1: shutdownableNode(node#0).start=3 // relocatable(vm#1).dSlice_hoster = 2 relocatable(vm#1).dSlice_hoster = 2 cste -- 0 = 0 cste -- 0 = 0 shutdownableNode(node#1).start = [0,3600] ...\n..... [1/2] d_2: shutdownableNode(node#1).start=0 // relocatable(vm#1).dSlice_hoster = 2 relocatable(vm#1).dSlice_hoster = 2 cste -- 0 = 0 cste -- 0 = 0 shutdownableNode(node#1).start = [0,3600] ...\n...... [1/2] d_3: RP.end=4 // relocatable(vm#1).dSlice_hoster = 2 relocatable(vm#1).dSlice_hoster = 2 cste -- 0 = 0 cste -- 0 = 0 shutdownableNode(node#1).start = 0 ...\n3 node(s); 2 VM(s); 3 constraint(s); satisfy\nBuilding duration: 2ms (core) + 1ms (specialization)\nAfter 7ms of search (terminated): at 7ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, 1 solution(s):\n1)at 7ms, 4 Nodes (Infinity n/s), 0 Backtracks, 0 Fails, 0 Restarts, objective: 10\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.562 s - in org.btrplace.bench.BenchTest\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco:0.8.7:report (report) @ bench ---\n[INFO] Loading execution data file /mnt/repo/bench/target/jacoco.exec\n[INFO] Analyzed bundle 'bench' with 0 classes\n[INFO]\n[INFO] -------------------------< org.btrplace:split >-------------------------\n[INFO] Building scheduler-split 1.12.1-SNAPSHOT [9/9]\n[INFO] from split/pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ split ---\n[INFO]\n[INFO] --- jacoco:0.8.7:prepare-agent (default) @ split ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.7/org.jacoco.agent-0.8.7-runtime.jar=destfile=/mnt/repo/split/target/jacoco.exec,excludes=org/btrplace/btrpsl/**/*:org/btrplace/safeplace/**/*:org/btrplace/bench/**/*:org/btrplace/scheduler/runner/disjoint/**/*\n[INFO]\n[INFO] --- resources:3.3.1:resources (default-resources) @ split ---\n[INFO] skip non existing resourceDirectory /mnt/repo/split/src/main/resources\n[INFO]\n[INFO] --- compiler:3.8.1:compile (default-compile) @ split ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 32 source files to /mnt/repo/split/target/classes\n[INFO] /mnt/repo/split/src/main/java/org/btrplace/scheduler/runner/disjoint/model/ElementSubSet.java: Some input files use unchecked or unsafe operations.\n[INFO] /mnt/repo/split/src/main/java/org/btrplace/scheduler/runner/disjoint/model/ElementSubSet.java: Recompile with -Xlint:unchecked for details.\n[INFO]\n[INFO] --- resources:3.3.1:testResources (default-testResources) @ split ---\n[INFO] skip non existing resourceDirectory /mnt/repo/split/src/test/resources\n[INFO]\n[INFO] --- compiler:3.8.1:testCompile (default-testCompile) @ split ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 23 source files to /mnt/repo/split/target/test-classes\n[INFO]\n[INFO] --- surefire:3.0.0-M5:test (default-test) @ split ---\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO] T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running TestSuite\n[among(vms={vm#0, vm#1, vm#2}, nodes=[{node#0, node#1}], discrete)]\n[]\n[]\n{vm#0, vm#2, vm#4, vm#6, vm#8}\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nnode#4: vm#500 (vm#504)\nnode#3: vm#400 (vm#403)\nnode#2: vm#300 (vm#302)\nnode#1: vm#200 (vm#201)\nnode#0: (vm#100)\n(node#9)\n(node#8)\n(node#7)\n(node#6)\n(node#5)\nREADY vm#1009 vm#1008 vm#1007 vm#1006 vm#1005 vm#1004 vm#1003 vm#1002 vm#1001 vm#1000\n(node#8)\n(node#6)\nnode#4: vm#500 (vm#504)\nnode#2: vm#300 (vm#302)\nnode#0: (vm#100)\nREADY vm#1008 vm#1000 vm#1002 vm#1004 vm#1006\n(node#8)\n(node#6)\nnode#4: vm#500 (vm#504)\nnode#2: vm#300 (vm#302)\nnode#0: (vm#100)\nREADY vm#1008 vm#1000 vm#1002 vm#1004 vm#1006\n{{vm#3, vm#4, vm#6}{vm#0, vm#1, vm#5, vm#8, vm#9}{vm#2, vm#7}}\n[INFO] Tests run: 38, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.597 s - in TestSuite\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 38, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco:0.8.7:report (report) @ split ---\n[INFO] Loading execution data file /mnt/repo/split/target/jacoco.exec\n[INFO] Analyzed bundle 'scheduler-split' with 0 classes\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for scheduler 1.12.1-SNAPSHOT:\n[INFO]\n[INFO] scheduler .......................................... SUCCESS [ 11.572 s]\n[INFO] scheduler-api ...................................... SUCCESS [ 12.418 s]\n[INFO] scheduler-json ..................................... SUCCESS [ 3.927 s]\n[INFO] scheduler-choco .................................... SUCCESS [01:05 min]\n[INFO] scheduler-examples ................................. SUCCESS [ 1.488 s]\n[INFO] btrpsl ............................................. SUCCESS [ 7.180 s]\n[INFO] safeplace .......................................... SUCCESS [ 17.423 s]\n[INFO] bench .............................................. SUCCESS [ 3.611 s]\n[INFO] scheduler-split .................................... SUCCESS [ 3.026 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 02:11 min\n[INFO] Finished at: 2024-08-05T02:19:59Z\n[INFO] ------------------------------------------------------------------------",
            "span_id": 15018553408663424661
        }
    ],
    "read_file": [
        {
            "input": "safeplace/src/test/java/org/btrplace/safeplace/DSN.java",
            "output": "/*\n * Copyright  2020 The BtrPlace Authors. All rights reserved.\n * Use of this source code is governed by a LGPL-style\n * license that can be found in the LICENSE.txt file.\n */\n\npackage org.btrplace.safeplace;\n\nimport com.github.javaparser.JavaParser;\nimport com.github.javaparser.ParseResult;\nimport com.github.javaparser.ast.CompilationUnit;\nimport com.github.javaparser.ast.body.MethodDeclaration;\nimport com.github.javaparser.ast.expr.AnnotationExpr;\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\nimport com.github.javaparser.printer.PrettyPrinterConfiguration;\nimport org.btrplace.safeplace.spec.Constraint;\nimport org.btrplace.safeplace.spec.SpecScanner;\nimport org.btrplace.safeplace.testing.Bench;\nimport org.btrplace.safeplace.testing.Result;\nimport org.btrplace.safeplace.testing.TestCampaign;\nimport org.btrplace.safeplace.testing.TestScanner;\nimport org.btrplace.safeplace.testing.fuzzer.Restriction;\nimport org.btrplace.safeplace.testing.reporting.CSVReport;\nimport org.btrplace.safeplace.testing.reporting.StoredReport;\nimport org.btrplace.safeplace.testing.verification.Verifier;\nimport org.btrplace.safeplace.testing.verification.btrplace.CheckerVerifier;\nimport org.btrplace.safeplace.testing.verification.spec.SpecVerifier;\nimport org.testng.Assert;\n\nimport java.io.InputStream;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\n/**\n * @author Fabien Hermenier\n */\npublic class DSN {\n\n    public static String root = \"xp-dsn\";\n\n    public TestScanner newScanner() throws Exception {\n        SpecScanner specScanner = new SpecScanner();\n        List<Constraint> l = specScanner.scan();\n        Bench.mode = Bench.Mode.REPLAY;\n        return new TestScanner(l);\n    }\n\n    ////@Test\n    public void fuzzingSizing() throws Exception {\n        TestScanner sc = newScanner();\n        Path path = Paths.get(root,\"fuzz.csv\");\n        Files.deleteIfExists(path);\n\n        for (int p = 100; p <= 1000; p+=100) {\n            for (int s = 2; s <= 20; s+=2) {\n                System.out.println(\"--- Population: \" + p + \" scale: \" + s + \" ---\");\n                Bench.report = new CSVReport(path, Integer.toString(p));\n                Bench.population = p;\n                Bench.scale = s;\n                List<TestCampaign> campaigns = sc.testGroups(\"sides\");\n                if (campaigns.isEmpty()) {\n                    Assert.fail(\"Nothing to test\");\n                }\n                campaigns.stream().forEach(c -> System.out.println(c.go().toString()));\n            }\n        }\n    }\n\n    //@Test\n    public void fuzzingScalability() throws Exception {\n        TestScanner sc = newScanner();\n\n        //Warm-up\n        Bench.transitions = true;\n\n        Path p = Paths.get(root, \"testing-speed-notrans.csv\");\n        Files.deleteIfExists(p);\n\n     /*   for (int i = 10; i <= 30; i+=2) {\n            Bench.transitions = false;\n            Bench.population = 100;\n            Bench.scale = i;\n            System.out.println(\"--- scaling factor \" + i + \"; transitions= \" + Bench.transitions +\" ---\");\n            Bench.report = new CSVReport(p,\"\");\n            System.out.println(sc.test(Bench.class).stream().mapToInt(TestCampaign::go).sum());\n        }*/\n\n\n        //GOGO\n        p = Paths.get(root, \"testing-speed-notrans.csv\");\n        Files.deleteIfExists(p);\n        Bench.mode = Bench.Mode.DEFAULT;\n        for (int i = 1; i <= 30; i += 2) {\n            Bench.transitions = false;\n            Bench.population = 100;\n            Bench.scale = i;\n            System.out.println(\"--- scaling factor \" + i + \"; transitions= \" + Bench.transitions + \" ---\");\n            Bench.report = new CSVReport(p, \"\");\n            sc.test(Bench.class).forEach(c -> System.out.println(c.go().toString()));\n        }\n\n        p = Paths.get(root, \"testing-speed-trans.csv\");\n        Files.deleteIfExists(p);\n\n        for (int i = 1; i <= 30; i+=2) {\n            System.out.println(\"--- scaling factor \" + i + \"; transitions= \" + Bench.transitions +\" ---\");\n            Bench.transitions = true;\n            Bench.population = 100;\n            Bench.scale = i;\n            Bench.report = new CSVReport(p, \"\");\n            sc.test(Bench.class).forEach(c -> System.out.println(c.go().toString()));\n        }\n    }\n\n    //@Test\n    public void specLength() throws Exception {\n        SpecScanner sc = new SpecScanner();\n        List<Constraint> l = sc.scan();\n        System.out.println(l.stream().map(Constraint::pretty).collect(Collectors.joining(\"\\n\")));\n\n        Path path = Paths.get(root, \"inv.csv\");\n        String out = l.stream()\n                .map(c -> Integer.toString(c.proposition().toString().length()))\n                .collect(Collectors.joining(\"\\n\"));\n        Files.write(path, out.getBytes());\n\n        List<Integer> funcs = new ArrayList<>();\n        List<Path> paths = Files.list(Paths.get(\"safeplace/src/main/java/org/btrplace/safeplace/spec/term/func\"))\n                .filter(Files::isRegularFile).collect(Collectors.toList());\n        for (Path p : paths) {\n            try (InputStream in = Files.newInputStream(p)) {\n                ParseResult<CompilationUnit> cu = new JavaParser().parse(in);\n                new FunctionVisitor(funcs).visit(cu.getResult().get(), null);\n            }\n        }\n        path = Paths.get(root, \"func.csv\");\n        out = funcs.stream()\n                        .map(c -> Integer.toString(c))\n                        .collect(Collectors.joining(\"\\n\"));\n        Files.write(path, out.getBytes());\n    }\n\n    //@Test\n    public void funcFrequency() throws Exception {\n        SpecScanner sc = new SpecScanner();\n        List<Constraint> l = sc.scan();\n        Pattern p = Pattern.compile(\"([a-zA-Z]+\\\\()+\");\n        Map<String, Integer> map = new HashMap<>();\n        for (Constraint c : l) {\n            String prop = c.proposition().toString();\n            Matcher m = p.matcher(prop);\n            System.out.println(prop);\n            int start = 0;\n            while (m.find(start)) {\n                String name = prop.substring(m.start(), m.end() - 1);\n                if (Character.isLowerCase(name.charAt(0))) {\n                    if (!map.containsKey(name)) {\n                        map.put(name, 1);\n                    } else {\n                        map.put(name, map.get(name) + 1);\n                    }\n                }\n                System.out.println(\"\\t\" + prop.substring(m.start(), m.end() - 1));\n                start = m.end();\n            }\n        }\n        System.out.println(map);\n        Path out = Paths.get(root, \"func-freq.csv\");\n        Files.deleteIfExists(out);\n        String cnt = \"name;freq\\n\" +\n                    map.entrySet().stream().map(e -> e.getKey()+\";\" + e.getValue() + \"\\n\").collect(Collectors.joining());\n        Files.write(out, cnt.getBytes());\n\n    }\n\n    //@Test\n    public void specVsCheckers() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.population = 500;\n        Bench.scale = 10;\n        Path p = Paths.get(root, \"verifier_stable.csv\");\n        Files.deleteIfExists(p);\n        boolean first = true;\n        for (Verifier v : new Verifier[]{new SpecVerifier(), new CheckerVerifier()}) {\n            if (first) {\n                Bench.mode = Bench.Mode.SAVE;\n                first = !first;\n            } else {\n                Bench.mode = Bench.Mode.REPLAY;\n            }\n            System.out.println(\"--- Verifier: \" + v.getClass() + \" ---\");\n            Bench.report = new CSVReport(p, v.id());\n            sc.test(Bench.class).forEach(c -> {\n                c.verifyWith(v);\n                System.out.println(c.go().toString());\n            });\n        }\n    }\n\n    //@Test\n    public void discreteVsContinuous() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.population = 500;\n        Bench.scale = 10;\n        Path path = Paths.get(root, \"restriction_stable.csv\");\n        Files.deleteIfExists(path);\n        boolean first = true;\n        for (Restriction r : EnumSet.allOf(Restriction.class)) {\n            if (first) {\n                Bench.mode = Bench.Mode.SAVE;\n                first = !first;\n            } else {\n                Bench.mode = Bench.Mode.REPLAY;\n            }\n            System.out.println(\"--- Restriction: \" + r + \"; replay= \" + first + \" ---\");\n            Bench.report = new CSVReport(path, r.toString());\n            sc.testGroups(\"bi\").forEach(x -> {\n                Bench.restrictions = EnumSet.of(r);\n                System.out.println(x.go());\n            });\n        }\n        //restore\n        Bench.restrictions = EnumSet.allOf(Restriction.class);\n    }\n\n    //@Test\n    public void repairVsRebuild() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.population = 500;\n        Bench.scale = 10;\n        Path path = Paths.get(root, \"mode_stable.csv\");\n        Files.deleteIfExists(path);\n        boolean first = true;\n        for (boolean repair : new boolean[]{false, true}) {\n            if (first) {\n                Bench.mode = Bench.Mode.SAVE;\n                first = !first;\n            } else {\n                Bench.mode = Bench.Mode.REPLAY;\n            }\n            System.out.println(\"--- Repair: \" + repair + \"; replay= \" + first + \" ---\");\n            Bench.report = new CSVReport(path, repair ? \"enabled\" : \"disabled\");\n            sc.test(Bench.class).forEach(x -> {\n                x.schedulerParams().doRepair(true);\n                System.out.println(x.go());\n            });\n        }\n    }\n\n    //@Test\n    public void errors() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.source = \"xp-dsn\";\n        Bench.mode = Bench.Mode.REPLAY;\n        Bench.population = 1000;\n        Bench.scale = 5;\n        Path p = Paths.get(root, \"errors.csv\");\n        Files.deleteIfExists(p);\n        Bench.report = new CSVReport(p, \"\");\n        sc.test(Bench.class).stream().forEach(x -> System.out.println(x.go()));\n    }\n\n    //@Test\n    public void prettyErrors() throws Exception {\n        TestScanner sc = newScanner();\n        Bench.mode = Bench.Mode.REPLAY;\n        Bench.population = 1000;\n        Bench.scale = 5;\n\n        sc.test(Bench.class).forEach(x -> {\n            x.reportTo(new StoredReport(Paths.get(\"xp-dsn\", \"errors.txt\"), r -> !r.result().equals(Result.SUCCESS)));\n            System.out.println(x.go());\n        });\n    }\n\n\n    //@Test\n    //Extract the number of line of codes of tests\n    public void testSloc() throws Exception {\n        //Parse the legacy unit tests\n        List<Integer> unitTests = new ArrayList<>();\n        List<Path> paths = Files.list(Paths.get(\"choco/src/test/java/org/btrplace/scheduler/choco/constraint/\")).filter(Files::isRegularFile).collect(Collectors.toList());\n        for (Path p : paths) {\n            try (InputStream in = Files.newInputStream(p)){\n                ParseResult<CompilationUnit> cu = new JavaParser().parse(in);\n                new UnitTestsVisitor(unitTests).visit(cu.getResult().get(), null);\n            }\n        }\n\n        //Parse the new unit tests\n        List<Integer> safeTests = new ArrayList<>();\n\n        try (InputStream in = Files.newInputStream(Paths.get(\"safeplace/src/test/java/org/btrplace/safeplace/testing/TestSafePlace.java\"))){\n            ParseResult<CompilationUnit> cu = new JavaParser().parse(in);\n            new SafeplaceTestsVisitor(safeTests).visit(cu.getResult().get(), null);\n        }\n\n        String sb = \"testing;sloc\\n\" +\n                unitTests.stream().map(i -> \"btrPlace;\" + i).collect(Collectors.joining(\"\\n\", \"\", \"\\n\")) +\n                safeTests.stream().map(i -> \"safePlace;\" + i).collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n        Path path = Paths.get(root, \"sloc.csv\");\n        Files.write(path, sb.getBytes());\n    }\n\n    private static class FunctionVisitor extends VoidVisitorAdapter<Void> {\n\n      private final List<Integer> l;\n\n        FunctionVisitor(List<Integer> numbers) {\n            this.l = numbers;\n        }\n\n        @Override\n        public void visit(MethodDeclaration n, Void arg) {\n            if (n.getNameAsString().equals(\"eval\")) {\n                n.getRange().ifPresent(r -> l.add(r.end.line - r.begin.line));\n            }\n            super.visit(n, arg);\n        }\n    }\n\n    private static class UnitTestsVisitor extends VoidVisitorAdapter<Void> {\n\n      private final List<Integer> l;\n\n      private final PrettyPrinterConfiguration noComments = new PrettyPrinterConfiguration().setPrintComments(false);\n\n        UnitTestsVisitor(List<Integer> numbers) {\n            this.l = numbers;\n        }\n\n        @Override\n        public void visit(MethodDeclaration n, Void arg) {\n            System.out.println(n.getNameAsString());\n            if (n.toString(noComments).contains(\"solve\")) {\n                n.getRange().ifPresent(r -> l.add(r.end.line - r.begin.line));\n            }\n            super.visit(n, arg);\n        }\n    }\n\n    private static class SafeplaceTestsVisitor extends VoidVisitorAdapter<Void> {\n\n      private final List<Integer> l;\n\n        SafeplaceTestsVisitor(List<Integer> numbers) {\n            this.l = numbers;\n        }\n\n        @Override\n        public void visit(MethodDeclaration n, Void arg) {\n            for (AnnotationExpr a : n.getAnnotations()) {\n                if (!a.getNameAsString().equals(\"CstrTest\")) {\n                    return;\n                }\n            }\n            System.out.println(n.getName());\n            n.getRange().ifPresent(r -> l.add(r.end.line - r.begin.line));\n            super.visit(n, arg);\n        }\n    }\n}\n",
            "error": "",
            "span_id": 52270210786503880
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}