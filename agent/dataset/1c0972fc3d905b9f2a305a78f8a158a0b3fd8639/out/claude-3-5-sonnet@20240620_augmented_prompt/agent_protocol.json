{
    "validate_diffs": [
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -30,7 +30,7 @@ import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\n import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\n import org.apache.maven.shared.dependency.graph.DependencyNode;\n-import org.apache.maven.shared.dependency.graph.internal.Maven31DependencyGraphBuilder;\n+import org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\n@@ -180,7 +180,7 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   }\n \n   private void setGraph(DependencyGraphBuilder graph) {\n-    this.graph = Optional.ofNullable(graph).orElse(new Maven31DependencyGraphBuilder());\n+    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder());\n   }\n \n   private ProjectBuilder getProjectBuilder() {\n```",
            "output": "{'license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java': '/*\\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\\n *\\n * Licensed under the Apache License, Version 2.0 (the \"License\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *         http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \"AS IS\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npackage com.mycila.maven.plugin.license.dependencies;\\n\\nimport org.apache.maven.artifact.Artifact;\\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\\nimport org.apache.maven.execution.MavenSession;\\nimport org.apache.maven.model.License;\\nimport org.apache.maven.plugin.logging.Log;\\nimport org.apache.maven.project.DefaultProjectBuilder;\\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\\nimport org.apache.maven.project.MavenProject;\\nimport org.apache.maven.project.ProjectBuilder;\\nimport org.apache.maven.project.ProjectBuildingException;\\nimport org.apache.maven.project.ProjectBuildingRequest;\\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\\n\\nimport java.util.Collections;\\nimport java.util.HashSet;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Optional;\\nimport java.util.Set;\\nimport java.util.concurrent.ConcurrentHashMap;\\nimport java.util.concurrent.ConcurrentMap;\\n\\n/**\\n * Helper class for building Artifact/License mappings from a maven project\\n * (multi module or single).\\n *\\n * @author Royce Remer\\n */\\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\\n\\n  private Set<MavenProject> projects;\\n  private DependencyGraphBuilder graph;\\n  private ProjectBuilder projectBuilder;\\n  private ProjectBuildingRequest buildingRequest;\\n  private ArtifactFilter filter;\\n  private Log log;\\n\\n  /**\\n   * @param projects       the Set of {@link MavenProject} to scan\\n   * @param graph          the {@link DependencyGraphBuilder} implementation\\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\\n   * @param log            the log to sync to\\n   */\\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\\n                              final ArtifactFilter filter, final Log log) {\\n    this.setProjects(projects);\\n    this.setBuildingRequest(buildingRequest);\\n    this.setGraph(graph);\\n    this.setFilter(filter);\\n    this.setProjectBuilder(projectBuilder);\\n    this.setLog(log);\\n\\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\\n  }\\n\\n  /**\\n   * @param session        the current {@link MavenSession}\\n   * @param graph          the {@link DependencyGraphBuilder} implementation\\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\\n   */\\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\\n    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\\n        new CumulativeScopeArtifactFilter(scopes), log);\\n  }\\n\\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\\n    ProjectBuildingRequest request;\\n    if (session == null) {\\n      request = new DefaultProjectBuildingRequest();\\n    } else {\\n      request = session.getProjectBuildingRequest();\\n    }\\n    return request;\\n  }\\n\\n  /**\\n   * Return a set of licenses attributed to a single artifact.\\n   */\\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\\n    Set<License> licenses = new HashSet<>();\\n    try {\\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\\n      licenses.addAll(project.getLicenses());\\n    } catch (ProjectBuildingException ex) {\\n      getLog().warn(String.format(\"Could not get project from dependency\\'s artifact: %s\", artifact.getFile()));\\n    }\\n\\n    return licenses;\\n  }\\n\\n  /**\\n   * Get mapping of Licenses to a set of artifacts presenting that license.\\n   *\\n   * @param dependencies Set to collate License entries from\\n   * @return the same artifacts passed in, keyed by license\\n   */\\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\\n\\n    // license:artifact is a many-to-many relationship.\\n    // Each artifact may have several licenses.\\n    // Each artifact may appear multiple times in the map.\\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\\n      map.putIfAbsent(license, new HashSet<>());\\n      Set<Artifact> artifacts = map.get(license);\\n      artifacts.add(artifact);\\n      map.put(license, artifacts);\\n    }));\\n\\n    return map;\\n  }\\n\\n  @Override\\n  public Map<License, Set<Artifact>> getLicenseMap() {\\n    return getLicenseMapFromArtifacts(getDependencies());\\n  }\\n\\n  /**\\n   * Return the Set of all direct and transitive Artifact dependencies.\\n   */\\n  private Set<Artifact> getDependencies() {\\n    final Set<Artifact> artifacts = new HashSet<>();\\n    final Set<DependencyNode> dependencies = new HashSet<>();\\n\\n    // build the set of maven dependencies for each module in the reactor (might\\n    // only be the single one) and all its transitives\\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\\n    getProjects().parallelStream().forEach(project -> {\\n      try {\\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\\n      } catch (DependencyGraphBuilderException ex) {\\n        getLog().warn(\\n            String.format(\"Could not get children from project %s, it\\'s dependencies will not be checked!\",\\n                project.getId()));\\n      }\\n    });\\n\\n    // build the complete set of direct+transitive dependent artifacts in all\\n    // modules in the reactor\\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\\n\\n    return artifacts;\\n\\n    // tempting, but does not resolve dependencies after the scope in which this\\n    // plugin is invoked\\n    // return project.getArtifacts();\\n  }\\n\\n  protected Set<MavenProject> getProjects() {\\n    return projects;\\n  }\\n\\n  protected void setProjects(final Set<MavenProject> projects) {\\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\\n  }\\n\\n  private DependencyGraphBuilder getGraph() {\\n    return graph;\\n  }\\n\\n  private void setGraph(DependencyGraphBuilder graph) {\\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder());\\n  }\\n\\n  private ProjectBuilder getProjectBuilder() {\\n    return projectBuilder;\\n  }\\n\\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\\n  }\\n\\n  private ArtifactFilter getFilter() {\\n    return filter;\\n  }\\n\\n  private void setFilter(ArtifactFilter filter) {\\n    this.filter = filter;\\n  }\\n\\n  private Log getLog() {\\n    return log;\\n  }\\n\\n  private void setLog(Log log) {\\n    this.log = log;\\n  }\\n\\n  private ProjectBuildingRequest getBuildingRequest() {\\n    return buildingRequest;\\n  }\\n\\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\\n  }\\n}\\n'}",
            "error": "",
            "span_id": 17003413565063673334
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -30,7 +30,7 @@ import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\n import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\n import org.apache.maven.shared.dependency.graph.DependencyNode;\n-import org.apache.maven.shared.dependency.graph.internal.Maven31DependencyGraphBuilder;\n+import org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\n@@ -180,7 +180,7 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   }\n \n   private void setGraph(DependencyGraphBuilder graph) {\n-    this.graph = Optional.ofNullable(graph).orElse(new Maven31DependencyGraphBuilder());\n+    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder());\n   }\n \n   private ProjectBuilder getProjectBuilder() {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "constructor DefaultDependencyGraphBuilder in class org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder cannot be applied to given types;\n",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n        new CumulativeScopeArtifactFilter(scopes), log);\n  }\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder());\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": {
                        "186": {
                            "lines": [
                                {
                                    "line_no": 185,
                                    "content": "  private void setGraph(DependencyGraphBuilder graph) {"
                                },
                                {
                                    "line_no": 186,
                                    "content": "    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder());"
                                },
                                {
                                    "line_no": 187,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[186,52] constructor DefaultDependencyGraphBuilder in class org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder cannot be applied to given types;\nrequired: org.apache.maven.project.ProjectDependenciesResolver\nfound: no arguments\nreason: actual and formal argument lists differ in length\n",
                                "[186,52] constructor DefaultDependencyGraphBuilder in class org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder cannot be applied to given types;\n"
                            ]
                        }
                    }
                }
            },
            "error": "constructor DefaultDependencyGraphBuilder in class org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder cannot be applied to given types;\n",
            "span_id": 6097698356291715366
        },
        {
            "input": "It seems that the `DefaultDependencyGraphBuilder` class now requires a parameter in its constructor. Let's update the code to provide the required `ProjectDependenciesResolver` parameter. We'll need to inject this dependency into the `MavenProjectLicenses` class.\n\nHere's the updated diff:\n\n```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -30,7 +30,8 @@ import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\n import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\n import org.apache.maven.shared.dependency.graph.DependencyNode;\n-import org.apache.maven.shared.dependency.graph.internal.Maven31DependencyGraphBuilder;\n+import org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\n+import org.apache.maven.project.ProjectDependenciesResolver;\n \n import java.util.Collections;\n import java.util.HashSet;\n@@ -51,6 +52,7 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   private ProjectBuildingRequest buildingRequest;\n   private ArtifactFilter filter;\n   private Log log;\n+  private ProjectDependenciesResolver projectDependenciesResolver;\n \n   /**\n    * @param projects       the Set of {@link MavenProject} to scan\n@@ -60,13 +62,15 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n    */\n   public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                               final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n-                              final ArtifactFilter filter, final Log log) {\n+                              final ArtifactFilter filter, final Log log,\n+                              final ProjectDependenciesResolver projectDependenciesResolver) {\n     this.setProjects(projects);\n     this.setBuildingRequest(buildingRequest);\n     this.setGraph(graph);\n     this.setFilter(filter);\n     this.setProjectBuilder(projectBuilder);\n     this.setLog(log);\n+    this.setProjectDependenciesResolver(projectDependenciesResolver);\n \n     log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n   }\n@@ -78,8 +82,9 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n    */\n   public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                               final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n+    ProjectDependenciesResolver projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n     this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n-        new CumulativeScopeArtifactFilter(scopes), log);\n+        new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n   }\n \n   private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n@@ -180,7 +185,7 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   }\n \n   private void setGraph(DependencyGraphBuilder graph) {\n-    this.graph = Optional.ofNullable(graph).orElse(new Maven31DependencyGraphBuilder());\n+    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n   }\n \n   private ProjectBuilder get",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nlicense-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java!\nMake extra sure the indentation is correct.\nlicense-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java does not contain these 6 exact lines in a row:\n```\n}\nprivate void setGraph(DependencyGraphBuilder graph) {\nthis.graph = Optional.ofNullable(graph).orElse(new Maven31DependencyGraphBuilder());\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nlicense-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java!\nMake extra sure the indentation is correct.\nlicense-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java does not contain these 6 exact lines in a row:\n```\n}\nprivate void setGraph(DependencyGraphBuilder graph) {\nthis.graph = Optional.ofNullable(graph).orElse(new Maven31DependencyGraphBuilder());\n}\n```",
            "span_id": 2493450155170092493
        },
        {
            "input": "Now that we have the current content of the file, let's make the necessary changes to address the compilation error:\n\n```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -15,6 +15,7 @@ import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\n import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\n import org.apache.maven.shared.dependency.graph.DependencyNode;\n import org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\n+import org.apache.maven.project.ProjectDependenciesResolver;\n \n import java.util.Collections;\n import java.util.HashSet;\n@@ -35,6 +36,7 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   private ProjectBuildingRequest buildingRequest;\n   private ArtifactFilter filter;\n   private Log log;\n+  private ProjectDependenciesResolver projectDependenciesResolver;\n \n   /**\n    * @param projects       the Set of {@link MavenProject} to scan\n@@ -44,13 +46,15 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n    */\n   public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                               final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n-                              final ArtifactFilter filter, final Log log) {\n+                              final ArtifactFilter filter, final Log log,\n+                              final ProjectDependenciesResolver projectDependenciesResolver) {\n     this.setProjects(projects);\n     this.setBuildingRequest(buildingRequest);\n     this.setGraph(graph);\n     this.setFilter(filter);\n     this.setProjectBuilder(projectBuilder);\n     this.setLog(log);\n+    this.setProjectDependenciesResolver(projectDependenciesResolver);\n \n     log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n   }\n@@ -62,8 +66,9 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n    */\n   public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                               final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n+    ProjectDependenciesResolver projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n     this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n-        new CumulativeScopeArtifactFilter(scopes), log);\n+        new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n   }\n \n   private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n@@ -164,7 +169,7 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   }\n \n   private void setGraph(DependencyGraphBuilder graph) {\n-    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder());\n+    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n   }\n \n   private ProjectBuilder getProjectBuilder() {\n@@ -194,4 +199,8 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n     this.buildingRequest = Optional.of",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 9.153 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.505 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.557 s\n[INFO] Finished at: 2024-08-05T17:57:52Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 89:97: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\nimport org.apache.maven.project.ProjectDependenciesResolver;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n  private ProjectDependenciesResolver projectDependenciesResolver;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log,\n                              final ProjectDependenciesResolver projectDependenciesResolver) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n    this.setProjectDependenciesResolver(projectDependenciesResolver);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    ProjectDependenciesResolver projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n        new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n  }\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 9.153 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.505 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.557 s\n[INFO] Finished at: 2024-08-05T17:57:52Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 89:97: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
            "span_id": 16344805939411677734
        },
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -86,7 +86,8 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n    */\n   public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                               final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n-    ProjectDependenciesResolver projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n+    ProjectDependenciesResolver projectDependenciesResolver = \n+        session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n     this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n         new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n   }\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.715 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.259 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.848 s\n[INFO] Finished at: 2024-08-05T17:58:19Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 90:43: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\nimport org.apache.maven.project.ProjectDependenciesResolver;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n  private ProjectDependenciesResolver projectDependenciesResolver;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log,\n                              final ProjectDependenciesResolver projectDependenciesResolver) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n    this.setProjectDependenciesResolver(projectDependenciesResolver);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    ProjectDependenciesResolver projectDependenciesResolver = \n        session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n        new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n  }\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.715 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.259 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.848 s\n[INFO] Finished at: 2024-08-05T17:58:19Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 90:43: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
            "span_id": 11704594921706904303
        },
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -86,9 +86,9 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n    */\n   public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                               final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n-    ProjectDependenciesResolver projectDependenciesResolver = \n-        session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n-    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n+    ProjectDependenciesResolver projectDependenciesResolver = session.getComponentLookup()\n+        .lookup(ProjectDependenciesResolver.class);\n+    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session), \n         new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n   }\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.474 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.509 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.750 s\n[INFO] Finished at: 2024-08-05T17:58:46Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 90:15: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\nimport org.apache.maven.project.ProjectDependenciesResolver;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n  private ProjectDependenciesResolver projectDependenciesResolver;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log,\n                              final ProjectDependenciesResolver projectDependenciesResolver) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n    this.setProjectDependenciesResolver(projectDependenciesResolver);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    ProjectDependenciesResolver projectDependenciesResolver = session.getComponentLookup()\n        .lookup(ProjectDependenciesResolver.class);\n    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session), \n        new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n  }\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.474 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.509 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.750 s\n[INFO] Finished at: 2024-08-05T17:58:46Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 90:15: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
            "span_id": 10779655329638639701
        },
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -86,9 +86,10 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n    */\n   public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                               final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n-    ProjectDependenciesResolver projectDependenciesResolver = session.getComponentLookup()\n-        .lookup(ProjectDependenciesResolver.class);\n-    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session), \n+    ProjectDependenciesResolver projectDependenciesResolver;\n+    projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n+    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n         new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n   }\n+\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.666 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.216 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.811 s\n[INFO] Finished at: 2024-08-05T17:59:17Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 90:69: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\nimport org.apache.maven.project.ProjectDependenciesResolver;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n  private ProjectDependenciesResolver projectDependenciesResolver;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log,\n                              final ProjectDependenciesResolver projectDependenciesResolver) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n    this.setProjectDependenciesResolver(projectDependenciesResolver);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    ProjectDependenciesResolver projectDependenciesResolver;\n    projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n        new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n  }\n\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.666 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.216 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.811 s\n[INFO] Finished at: 2024-08-05T17:59:17Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 90:69: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
            "span_id": 7319297662060655929
        },
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -87,8 +87,9 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                               final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n     ProjectDependenciesResolver projectDependenciesResolver;\n-    projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n-    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n+    projectDependenciesResolver = session.getComponentLookup()\n+        .lookup(ProjectDependenciesResolver.class);\n+    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session), \n         new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n   }\n \n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.666 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.324 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.799 s\n[INFO] Finished at: 2024-08-05T17:59:48Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 91:15: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\nimport org.apache.maven.project.ProjectDependenciesResolver;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n  private ProjectDependenciesResolver projectDependenciesResolver;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log,\n                              final ProjectDependenciesResolver projectDependenciesResolver) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n    this.setProjectDependenciesResolver(projectDependenciesResolver);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    ProjectDependenciesResolver projectDependenciesResolver;\n    projectDependenciesResolver = session.getComponentLookup()\n        .lookup(ProjectDependenciesResolver.class);\n    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session), \n        new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n  }\n\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.666 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.324 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.799 s\n[INFO] Finished at: 2024-08-05T17:59:48Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 91:15: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
            "span_id": 7130800387488595746
        },
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -88,9 +88,10 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n                               final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n     ProjectDependenciesResolver projectDependenciesResolver;\n     projectDependenciesResolver = session.getComponentLookup()\n-        .lookup(ProjectDependenciesResolver.class);\n-    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session), \n-        new CumulativeScopeArtifactFilter(scopes), log, projectDependenciesResolver);\n+            .lookup(ProjectDependenciesResolver.class);\n+    this(Collections.singleton(project), graph, projectBuilder,\n+         getBuildingRequestWithDefaults(session), new CumulativeScopeArtifactFilter(scopes),\n+         log, projectDependenciesResolver);\n   }\n \n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.627 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.493 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.035 s\n[INFO] Finished at: 2024-08-05T18:00:21Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 91:19: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\nimport org.apache.maven.project.ProjectDependenciesResolver;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n  private ProjectDependenciesResolver projectDependenciesResolver;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log,\n                              final ProjectDependenciesResolver projectDependenciesResolver) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n    this.setProjectDependenciesResolver(projectDependenciesResolver);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    ProjectDependenciesResolver projectDependenciesResolver;\n    projectDependenciesResolver = session.getComponentLookup()\n            .lookup(ProjectDependenciesResolver.class);\n    this(Collections.singleton(project), graph, projectBuilder,\n         getBuildingRequestWithDefaults(session), new CumulativeScopeArtifactFilter(scopes),\n         log, projectDependenciesResolver);\n  }\n\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.627 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.493 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.035 s\n[INFO] Finished at: 2024-08-05T18:00:21Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 91:19: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
            "span_id": 1866530252121100908
        },
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -89,9 +89,11 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n     ProjectDependenciesResolver projectDependenciesResolver;\n     projectDependenciesResolver = session.getComponentLookup()\n             .lookup(ProjectDependenciesResolver.class);\n-    this(Collections.singleton(project), graph, projectBuilder,\n-         getBuildingRequestWithDefaults(session), new CumulativeScopeArtifactFilter(scopes),\n-         log, projectDependenciesResolver);\n+    Set<MavenProject> projects = Collections.singleton(project);\n+    ProjectBuildingRequest buildingRequest = getBuildingRequestWithDefaults(session);\n+    ArtifactFilter artifactFilter = new CumulativeScopeArtifactFilter(scopes);\n+    this(projects, graph, projectBuilder, buildingRequest,\n+         artifactFilter, log, projectDependenciesResolver);\n   }\n \n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.489 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.849 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.155 s\n[INFO] Finished at: 2024-08-05T18:00:54Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 91:19: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\nimport org.apache.maven.project.ProjectDependenciesResolver;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n  private ProjectDependenciesResolver projectDependenciesResolver;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log,\n                              final ProjectDependenciesResolver projectDependenciesResolver) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n    this.setProjectDependenciesResolver(projectDependenciesResolver);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    ProjectDependenciesResolver projectDependenciesResolver;\n    projectDependenciesResolver = session.getComponentLookup()\n            .lookup(ProjectDependenciesResolver.class);\n    Set<MavenProject> projects = Collections.singleton(project);\n    ProjectBuildingRequest buildingRequest = getBuildingRequestWithDefaults(session);\n    ArtifactFilter artifactFilter = new CumulativeScopeArtifactFilter(scopes);\n    this(projects, graph, projectBuilder, buildingRequest,\n         artifactFilter, log, projectDependenciesResolver);\n  }\n\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.489 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.849 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.155 s\n[INFO] Finished at: 2024-08-05T18:00:54Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 91:19: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
            "span_id": 8282075191375070845
        },
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -88,13 +88,15 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n                               final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n     ProjectDependenciesResolver projectDependenciesResolver;\n     projectDependenciesResolver = session.getComponentLookup()\n-            .lookup(ProjectDependenciesResolver.class);\n+        .lookup(ProjectDependenciesResolver.class);\n     Set<MavenProject> projects = Collections.singleton(project);\n     ProjectBuildingRequest buildingRequest = getBuildingRequestWithDefaults(session);\n     ArtifactFilter artifactFilter = new CumulativeScopeArtifactFilter(scopes);\n-    this(projects, graph, projectBuilder, buildingRequest,\n-         artifactFilter, log, projectDependenciesResolver);\n+    this(projects, graph, projectBuilder, buildingRequest, artifactFilter, log, projectDependenciesResolver);\n   }\n+\n+  private void setProjectDependenciesResolver(ProjectDependenciesResolver resolver) {\n+    this.projectDependenciesResolver = resolver;\n+  }\n \n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.987 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.445 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.274 s\n[INFO] Finished at: 2024-08-05T18:01:28Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 91:15: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\nimport org.apache.maven.project.ProjectDependenciesResolver;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n  private ProjectDependenciesResolver projectDependenciesResolver;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log,\n                              final ProjectDependenciesResolver projectDependenciesResolver) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n    this.setProjectDependenciesResolver(projectDependenciesResolver);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    ProjectDependenciesResolver projectDependenciesResolver;\n    projectDependenciesResolver = session.getComponentLookup()\n        .lookup(ProjectDependenciesResolver.class);\n    Set<MavenProject> projects = Collections.singleton(project);\n    ProjectBuildingRequest buildingRequest = getBuildingRequestWithDefaults(session);\n    ArtifactFilter artifactFilter = new CumulativeScopeArtifactFilter(scopes);\n    this(projects, graph, projectBuilder, buildingRequest, artifactFilter, log, projectDependenciesResolver);\n  }\n\n  private void setProjectDependenciesResolver(ProjectDependenciesResolver resolver) {\n    this.projectDependenciesResolver = resolver;\n  }\n\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] license-maven-plugin-parent [pom]\n[INFO] license-maven-plugin [maven-plugin]\n[INFO] license-maven-plugin-git [jar]\n[INFO] license-maven-plugin-svn [jar]\n[INFO]\n[INFO] ---------------< com.mycila:license-maven-plugin-parent >---------------\n[INFO] Building license-maven-plugin-parent 4.2-SNAPSHOT [1/4]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin-parent ---\n[INFO] Deleting /mnt/repo/target\n[INFO] Deleting /mnt/repo (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin-parent ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin-parent ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin-parent ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (prepare-agent) @ license-maven-plugin-parent ---\n[INFO] argLine set to -javaagent:/root/.m2/repository/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar=destfile=/mnt/repo/target/jacoco.exec\n[INFO]\n[INFO] ------------------< com.mycila:license-maven-plugin >-------------------\n[INFO] Building license-maven-plugin 4.2-SNAPSHOT [2/4]\n[INFO] from license-maven-plugin/pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[WARNING] Parameter 'encoding' is unknown for plugin 'maven-checkstyle-plugin:3.2.0:check (validate)'\n[INFO]\n[INFO] --- clean:3.1.0:clean (default-clean) @ license-maven-plugin ---\n[INFO] Deleting /mnt/repo/license-maven-plugin/target\n[INFO] Deleting /mnt/repo/license-maven-plugin (includes = [dependency-reduced-pom.xml, dependency-reduced-pom-*.xml], excludes = [])\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ license-maven-plugin ---\n[INFO]\n[INFO] --- license:4.2.rc2:check (default) @ license-maven-plugin ---\n[WARNING] Parameter 'legacyConfigExcludes' (user property 'license.excludes') is deprecated: use {@link LicenseSet#excludes}\n[WARNING] Parameter 'legacyConfigHeader' (user property 'license.header') is deprecated: use {@link LicenseSet#header}\n[WARNING] Parameter 'legacyConfigInlineHeader' (user property 'license.inlineHeader') is deprecated: use {@link LicenseSet#inlineHeader}\n[INFO] Checking licenses...\n[INFO]\n[INFO] --- checkstyle:3.2.0:check (validate) @ license-maven-plugin ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for license-maven-plugin-parent 4.2-SNAPSHOT:\n[INFO]\n[INFO] license-maven-plugin-parent ........................ SUCCESS [ 8.987 s]\n[INFO] license-maven-plugin ............................... FAILURE [ 3.445 s]\n[INFO] license-maven-plugin-git ........................... SKIPPED\n[INFO] license-maven-plugin-svn ........................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.274 s\n[INFO] Finished at: 2024-08-05T18:01:28Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.2.0:check (validate) on project license-maven-plugin: Failed during checkstyle configuration: Exception was thrown while processing /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java: IllegalStateException occurred while parsing file /mnt/repo/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java. 91:15: mismatched input '(' expecting ';': InputMismatchException -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :license-maven-plugin",
            "span_id": 17425778544912734460
        },
        {
            "input": "```diff\n--- license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n+++ license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java\n@@ -87,12 +87,13 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                               final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n     ProjectDependenciesResolver projectDependenciesResolver;\n-    projectDependenciesResolver = session.getComponentLookup()\n-        .lookup(ProjectDependenciesResolver.class);\n+    projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n     Set<MavenProject> projects = Collections.singleton(project);\n     ProjectBuildingRequest buildingRequest = getBuildingRequestWithDefaults(session);\n     ArtifactFilter artifactFilter = new CumulativeScopeArtifactFilter(scopes);\n-    this(projects, graph, projectBuilder, buildingRequest, artifactFilter, log, projectDependenciesResolver);\n+    setProjects(projects);\n+    init(graph, projectBuilder, buildingRequest, artifactFilter, log, projectDependenciesResolver);\n+    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n   }\n \n   private void setProjectDependenciesResolver(ProjectDependenciesResolver resolver) {\n@@ -100,6 +101,15 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n   }\n \n+  private void init(DependencyGraphBuilder graph, ProjectBuilder projectBuilder,\n+                    ProjectBuildingRequest buildingRequest, ArtifactFilter filter, Log log,\n+                    ProjectDependenciesResolver projectDependenciesResolver) {\n+    setBuildingRequest(buildingRequest);\n+    setGraph(graph);\n+    setFilter(filter);\n+    setProjectBuilder(projectBuilder);\n+    setLog(log);\n+    setProjectDependenciesResolver(projectDependenciesResolver);\n+  }\n \n   private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n     ProjectBuildingRequest request;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\nimport org.apache.maven.project.ProjectDependenciesResolver;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n  private ProjectDependenciesResolver projectDependenciesResolver;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log,\n                              final ProjectDependenciesResolver projectDependenciesResolver) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n    this.setProjectDependenciesResolver(projectDependenciesResolver);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    ProjectDependenciesResolver projectDependenciesResolver;\n    projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);\n    Set<MavenProject> projects = Collections.singleton(project);\n    ProjectBuildingRequest buildingRequest = getBuildingRequestWithDefaults(session);\n    ArtifactFilter artifactFilter = new CumulativeScopeArtifactFilter(scopes);\n    setProjects(projects);\n    init(graph, projectBuilder, buildingRequest, artifactFilter, log, projectDependenciesResolver);\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  private void setProjectDependenciesResolver(ProjectDependenciesResolver resolver) {\n    this.projectDependenciesResolver = resolver;\n  }\n\n  private void init(DependencyGraphBuilder graph, ProjectBuilder projectBuilder,\n                    ProjectBuildingRequest buildingRequest, ArtifactFilter filter, Log log,\n                    ProjectDependenciesResolver projectDependenciesResolver) {\n    setBuildingRequest(buildingRequest);\n    setGraph(graph);\n    setFilter(filter);\n    setProjectBuilder(projectBuilder);\n    setLog(log);\n    setProjectDependenciesResolver(projectDependenciesResolver);\n  }\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder(projectDependenciesResolver));\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n"
                },
                "compile_error_details": {
                    "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java": {
                        "90": {
                            "lines": [
                                {
                                    "line_no": 89,
                                    "content": "    ProjectDependenciesResolver projectDependenciesResolver;"
                                },
                                {
                                    "line_no": 90,
                                    "content": "    projectDependenciesResolver = session.getComponentLookup().lookup(ProjectDependenciesResolver.class);"
                                },
                                {
                                    "line_no": 91,
                                    "content": "    Set<MavenProject> projects = Collections.singleton(project);"
                                }
                            ],
                            "error_texts": [
                                "[90,42] cannot find symbol\n",
                                "[90,42] cannot find symbol\nsymbol: method getComponentLookup()\nlocation: variable session of type org.apache.maven.execution.MavenSession\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 5817872061239509735
        }
    ],
    "read_file": [
        {
            "input": "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java",
            "output": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.Maven31DependencyGraphBuilder;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n        new CumulativeScopeArtifactFilter(scopes), log);\n  }\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new Maven31DependencyGraphBuilder());\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n",
            "error": "",
            "span_id": 9061176615173728680
        },
        {
            "input": "license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java",
            "output": "/*\n * Copyright (C) 2008-2022 Mycila (mathieu.carbou@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.mycila.maven.plugin.license.dependencies;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.filter.ArtifactFilter;\nimport org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.License;\nimport org.apache.maven.plugin.logging.Log;\nimport org.apache.maven.project.DefaultProjectBuilder;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuilder;\nimport org.apache.maven.project.ProjectBuildingException;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;\nimport org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;\nimport org.apache.maven.shared.dependency.graph.DependencyNode;\nimport org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Helper class for building Artifact/License mappings from a maven project\n * (multi module or single).\n *\n * @author Royce Remer\n */\npublic class MavenProjectLicenses implements LicenseMap, LicenseMessage {\n\n  private Set<MavenProject> projects;\n  private DependencyGraphBuilder graph;\n  private ProjectBuilder projectBuilder;\n  private ProjectBuildingRequest buildingRequest;\n  private ArtifactFilter filter;\n  private Log log;\n\n  /**\n   * @param projects       the Set of {@link MavenProject} to scan\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   * @param log            the log to sync to\n   */\n  public MavenProjectLicenses(final Set<MavenProject> projects, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final ProjectBuildingRequest buildingRequest,\n                              final ArtifactFilter filter, final Log log) {\n    this.setProjects(projects);\n    this.setBuildingRequest(buildingRequest);\n    this.setGraph(graph);\n    this.setFilter(filter);\n    this.setProjectBuilder(projectBuilder);\n    this.setLog(log);\n\n    log.info(String.format(\"%s %s\", INFO_LICENSE_IMPL, this.getClass()));\n  }\n\n  /**\n   * @param session        the current {@link MavenSession}\n   * @param graph          the {@link DependencyGraphBuilder} implementation\n   * @param projectBuilder the maven {@link ProjectBuilder} implementation\n   */\n  public MavenProjectLicenses(final MavenSession session, MavenProject project, final DependencyGraphBuilder graph,\n                              final ProjectBuilder projectBuilder, final List<String> scopes, final Log log) {\n    this(Collections.singleton(project), graph, projectBuilder, getBuildingRequestWithDefaults(session),\n        new CumulativeScopeArtifactFilter(scopes), log);\n  }\n\n  private static ProjectBuildingRequest getBuildingRequestWithDefaults(final MavenSession session) {\n    ProjectBuildingRequest request;\n    if (session == null) {\n      request = new DefaultProjectBuildingRequest();\n    } else {\n      request = session.getProjectBuildingRequest();\n    }\n    return request;\n  }\n\n  /**\n   * Return a set of licenses attributed to a single artifact.\n   */\n  protected Set<License> getLicensesFromArtifact(final Artifact artifact) {\n    Set<License> licenses = new HashSet<>();\n    try {\n      MavenProject project = getProjectBuilder().build(artifact, getBuildingRequest()).getProject();\n      licenses.addAll(project.getLicenses());\n    } catch (ProjectBuildingException ex) {\n      getLog().warn(String.format(\"Could not get project from dependency's artifact: %s\", artifact.getFile()));\n    }\n\n    return licenses;\n  }\n\n  /**\n   * Get mapping of Licenses to a set of artifacts presenting that license.\n   *\n   * @param dependencies Set to collate License entries from\n   * @return the same artifacts passed in, keyed by license\n   */\n  protected Map<License, Set<Artifact>> getLicenseMapFromArtifacts(final Set<Artifact> dependencies) {\n    final ConcurrentMap<License, Set<Artifact>> map = new ConcurrentHashMap<>();\n\n    // license:artifact is a many-to-many relationship.\n    // Each artifact may have several licenses.\n    // Each artifact may appear multiple times in the map.\n    dependencies.parallelStream().forEach(artifact -> getLicensesFromArtifact(artifact).forEach(license -> {\n      map.putIfAbsent(license, new HashSet<>());\n      Set<Artifact> artifacts = map.get(license);\n      artifacts.add(artifact);\n      map.put(license, artifacts);\n    }));\n\n    return map;\n  }\n\n  @Override\n  public Map<License, Set<Artifact>> getLicenseMap() {\n    return getLicenseMapFromArtifacts(getDependencies());\n  }\n\n  /**\n   * Return the Set of all direct and transitive Artifact dependencies.\n   */\n  private Set<Artifact> getDependencies() {\n    final Set<Artifact> artifacts = new HashSet<>();\n    final Set<DependencyNode> dependencies = new HashSet<>();\n\n    // build the set of maven dependencies for each module in the reactor (might\n    // only be the single one) and all its transitives\n    getLog().debug(String.format(\"Building dependency graphs for %d projects\", getProjects().size()));\n    getProjects().parallelStream().forEach(project -> {\n      try {\n        dependencies.addAll(getGraph().buildDependencyGraph(buildingRequest, getFilter()).getChildren());\n      } catch (DependencyGraphBuilderException ex) {\n        getLog().warn(\n            String.format(\"Could not get children from project %s, it's dependencies will not be checked!\",\n                project.getId()));\n      }\n    });\n\n    // build the complete set of direct+transitive dependent artifacts in all\n    // modules in the reactor\n    dependencies.parallelStream().forEach(d -> artifacts.add(d.getArtifact()));\n    getLog().info(String.format(\"%s: %d\", INFO_DEPS_DISCOVERED, dependencies.size()));\n\n    return artifacts;\n\n    // tempting, but does not resolve dependencies after the scope in which this\n    // plugin is invoked\n    // return project.getArtifacts();\n  }\n\n  protected Set<MavenProject> getProjects() {\n    return projects;\n  }\n\n  protected void setProjects(final Set<MavenProject> projects) {\n    this.projects = Optional.ofNullable(projects).orElse(new HashSet<>());\n  }\n\n  private DependencyGraphBuilder getGraph() {\n    return graph;\n  }\n\n  private void setGraph(DependencyGraphBuilder graph) {\n    this.graph = Optional.ofNullable(graph).orElse(new DefaultDependencyGraphBuilder());\n  }\n\n  private ProjectBuilder getProjectBuilder() {\n    return projectBuilder;\n  }\n\n  private void setProjectBuilder(ProjectBuilder projectBuilder) {\n    this.projectBuilder = Optional.ofNullable(projectBuilder).orElse(new DefaultProjectBuilder());\n  }\n\n  private ArtifactFilter getFilter() {\n    return filter;\n  }\n\n  private void setFilter(ArtifactFilter filter) {\n    this.filter = filter;\n  }\n\n  private Log getLog() {\n    return log;\n  }\n\n  private void setLog(Log log) {\n    this.log = log;\n  }\n\n  private ProjectBuildingRequest getBuildingRequest() {\n    return buildingRequest;\n  }\n\n  protected void setBuildingRequest(final ProjectBuildingRequest buildingRequest) {\n    this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());\n  }\n}\n",
            "error": "",
            "span_id": 8379869643666221966
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}