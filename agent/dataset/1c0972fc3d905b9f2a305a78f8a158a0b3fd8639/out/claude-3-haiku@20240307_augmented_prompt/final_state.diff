diff --git a/docs/reports/4.2-SNAPSHOT/license-maven-plugin/license-plugin-report.xml b/docs/reports/4.2-SNAPSHOT/license-maven-plugin/license-plugin-report.xml
index 8942ba2..eb51cd1 100644
--- a/docs/reports/4.2-SNAPSHOT/license-maven-plugin/license-plugin-report.xml
+++ b/docs/reports/4.2-SNAPSHOT/license-maven-plugin/license-plugin-report.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<licensePluginReport goal="CHECK" timestamp="1651191761918">
+<licensePluginReport goal="CHECK" timestamp="1723053757980">
     <module artifactId="license-maven-plugin" groupId="com.mycila" version="4.2-SNAPSHOT"/>
     <files>
         <file path="pom.xml" result="PRESENT"/>
diff --git a/docs/reports/4.2-SNAPSHOT/license-plugin-report.xml b/docs/reports/4.2-SNAPSHOT/license-plugin-report.xml
index ebec4e5..ef0324f 100644
--- a/docs/reports/4.2-SNAPSHOT/license-plugin-report.xml
+++ b/docs/reports/4.2-SNAPSHOT/license-plugin-report.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<licensePluginReport goal="CHECK" timestamp="1651191726202">
+<licensePluginReport goal="CHECK" timestamp="1723053751769">
     <module artifactId="license-maven-plugin-parent" groupId="com.mycila" version="4.2-SNAPSHOT"/>
     <files>
         <file path="pom.xml" result="PRESENT"/>
diff --git a/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java b/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java
index 8046747..13e51be 100755
--- a/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java
+++ b/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/dependencies/MavenProjectLicenses.java
@@ -218,3 +218,65 @@ public class MavenProjectLicenses implements LicenseMap, LicenseMessage {
     this.buildingRequest = Optional.ofNullable(buildingRequest).orElse(new DefaultProjectBuildingRequest());
   }
 }
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;
+import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;
+import org.apache.maven.shared.dependency.graph.DependencyNode;
+import org.apache.maven.shared.dependency.graph.internal.Maven32DependencyGraphBuilder;
+
+public class MavenProjectLicenses {
+    private final MavenProject mavenProject;
+    private final org.apache.maven.execution.MavenSession mavenSession;
+
+    public MavenProjectLicenses(MavenProject mavenProject, org.apache.maven.execution.MavenSession mavenSession) {
+        this.mavenProject = mavenProject;
+        this.mavenSession = mavenSession;
+    }
+
+    /**
+     * Builds the dependency graph for the given Maven project.
+     *
+     * @return the root dependency node
+     * @throws DependencyGraphBuilderException if the dependency graph could not be built
+     */
+    private DependencyNode buildDependencyGraph() throws DependencyGraphBuilderException {
+        try {
+            DependencyGraphBuilder graphBuilder = new Maven32DependencyGraphBuilder(mavenSession, mavenProject);
+            DependencyNode rootNode = graphBuilder.buildDependencyGraph(mavenProject, org.apache.maven.shared.dependency.graph.DependencyNode.SCOPE_COMPILE);
+            return rootNode;
+        } catch (DependencyGraphBuilderException e) {
+            throw e;
+        }
+    }
+}
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;
+import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;
+import org.apache.maven.shared.dependency.graph.DependencyNode;
+import org.apache.maven.shared.dependency.graph.internal.Maven32DependencyGraphBuilder;
+
+public class MavenProjectLicenses {
+    private final MavenProject mavenProject;
+    private final org.apache.maven.execution.MavenSession mavenSession;
+
+    public MavenProjectLicenses(MavenProject mavenProject, org.apache.maven.execution.MavenSession mavenSession) {
+        this.mavenProject = mavenProject;
+        this.mavenSession = mavenSession;
+    }
+
+    /**
+     * Builds the dependency graph for the given Maven project.
+     *
+     * @return the root dependency node
+     * @throws DependencyGraphBuilderException if the dependency graph could not be built
+     */
+    private DependencyNode buildDependencyGraph() throws DependencyGraphBuilderException {
+        try {
+            DependencyGraphBuilder graphBuilder = new Maven32DependencyGraphBuilder(mavenSession, mavenProject);
+            DependencyNode rootNode = graphBuilder.buildDependencyGraph(mavenProject, org.apache.maven.shared.dependency.graph.DependencyNode.SCOPE_COMPILE);
+            return rootNode;
+        } catch (DependencyGraphBuilderException e) {
+            throw e;
+        }
+    }
+}