{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "Based on the error messages and API changes, it appears that the ByteBuddy-related classes have been removed or relocated in the new version of AssertJ. To fix this issue, we need to remove or update the references to these classes in the affected files. Let's start by modifying the `VavrAssumptions.java` file:\n\n```diff\n--- a/src/main/java/org/assertj/vavr/api/VavrAssumptions.java\n+++ b/src/main/java/org/assertj/vavr/api/VavrAssumptions.java\n@@ -21,22 +21,11 @@ import static org.assertj.core.api.Assertions.catchThrowable;\n import static org.assertj.core.util.Arrays.array;\n import static org.assertj.vavr.api.VavrAssertions.assertThat;\n \n-import org.assertj.core.internal.bytebuddy.ByteBuddy;\n-import org.assertj.core.internal.bytebuddy.TypeCache;\n-import org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;\n-import org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;\n-import org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;\n-import org.assertj.core.internal.bytebuddy.implementation.SuperMethodCall;\n-import org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;\n-import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;\n-import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;\n-import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;\n import org.assertj.core.util.CheckReturnValue;\n \n import java.lang.reflect.Method;\n import java.util.concurrent.Callable;\n \n-import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;\n \n /**\n  * Entry point for assumption methods for different types. Each method in this class is a static factory for the type-specific\n@@ -47,13 +36,7 @@ import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;\n  */\n @CheckReturnValue\n public class VavrAssumptions {\n-  private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED);\n-  private static final AuxiliaryType.NamingStrategy AUXILIARY_TYPE_NAMING_STRATEGY = new AuxiliaryType.NamingStrategy.SuffixingRandom(\"AssumptionInterceptor\");\n-  private static final Implementation ASSUMPTION_INTERCEPTOR = MethodDelegation.to(AssumptionMethodInterceptor.class);\n-  private static final TypeCache<TypeCache.SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>();\n-\n-  private static class AssumptionMethodInterceptor {\n-    @RuntimeType\n-    public static Object intercept(@This Object target, @SuperCall Callable<?> proxy) throws Throwable {\n+  private static class AssumptionMethodInterceptor {\n+    public static Object intercept(Object target, Callable<?> proxy) throws Throwable {\n       try {\n         return proxy.call();\n       } catch (AssertionError e) {\n@@ -212,15 +195,7 @@ public class VavrAssumptions {\n   }\n \n   private static <SELF> SELF assumeThat(Class<SELF> cls) {\n-    SimpleKey cacheKey = new SimpleKey(cls);\n-    Class<? extends SELF> assumptionClass = CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(),\n-                                                               cacheKey,\n-                                                               () -> BYTE_BUDDY.subclass(cls)\n-                                                                               .name(cls.getName() + \"Assumptions",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/assertj/vavr/api/VavrAssumptions.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain these 22 exact lines in a row:\n```\nimport static org.assertj.core.util.Arrays.array;\nimport static org.assertj.vavr.api.VavrAssertions.assertThat;\nimport org.assertj.core.internal.bytebuddy.ByteBuddy;\nimport org.assertj.core.internal.bytebuddy.TypeCache;\nimport org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;\nimport org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;\nimport org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;\nimport org.assertj.core.internal.bytebuddy.implementation.SuperMethodCall;\nimport org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;\nimport org.assertj.core.util.CheckReturnValue;\nimport java.lang.reflect.Method;\nimport java.util.concurrent.Callable;\nimport static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;\n/**\n* Entry point for assumption methods for different types. Each method in this class is a static factory for the type-specific\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/assertj/vavr/api/VavrAssumptions.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain these 14 exact lines in a row:\n```\n*/\n@CheckReturnValue\npublic class VavrAssumptions {\nprivate static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED);\nprivate static final AuxiliaryType.NamingStrategy AUXILIARY_TYPE_NAMING_STRATEGY = new AuxiliaryType.NamingStrategy.SuffixingRandom(\"AssumptionInterceptor\");\nprivate static final Implementation ASSUMPTION_INTERCEPTOR = MethodDelegation.to(AssumptionMethodInterceptor.class);\nprivate static final TypeCache<TypeCache.SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>();\nprivate static class AssumptionMethodInterceptor {\n@RuntimeType\npublic static Object intercept(@This Object target, @SuperCall Callable<?> proxy) throws Throwable {\ntry {\nreturn proxy.call();\n} catch (AssertionError e) {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/assertj/vavr/api/VavrAssumptions.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain these 7 exact lines in a row:\n```\n}\nprivate static <SELF> SELF assumeThat(Class<SELF> cls) {\nSimpleKey cacheKey = new SimpleKey(cls);\nClass<? extends SELF> assumptionClass = CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(),\ncacheKey,\n() -> BYTE_BUDDY.subclass(cls)\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/assertj/vavr/api/VavrAssumptions.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain these 22 exact lines in a row:\n```\nimport static org.assertj.core.util.Arrays.array;\nimport static org.assertj.vavr.api.VavrAssertions.assertThat;\nimport org.assertj.core.internal.bytebuddy.ByteBuddy;\nimport org.assertj.core.internal.bytebuddy.TypeCache;\nimport org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;\nimport org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;\nimport org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;\nimport org.assertj.core.internal.bytebuddy.implementation.SuperMethodCall;\nimport org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;\nimport org.assertj.core.util.CheckReturnValue;\nimport java.lang.reflect.Method;\nimport java.util.concurrent.Callable;\nimport static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;\n/**\n* Entry point for assumption methods for different types. Each method in this class is a static factory for the type-specific\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/assertj/vavr/api/VavrAssumptions.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain these 14 exact lines in a row:\n```\n*/\n@CheckReturnValue\npublic class VavrAssumptions {\nprivate static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED);\nprivate static final AuxiliaryType.NamingStrategy AUXILIARY_TYPE_NAMING_STRATEGY = new AuxiliaryType.NamingStrategy.SuffixingRandom(\"AssumptionInterceptor\");\nprivate static final Implementation ASSUMPTION_INTERCEPTOR = MethodDelegation.to(AssumptionMethodInterceptor.class);\nprivate static final TypeCache<TypeCache.SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>();\nprivate static class AssumptionMethodInterceptor {\n@RuntimeType\npublic static Object intercept(@This Object target, @SuperCall Callable<?> proxy) throws Throwable {\ntry {\nreturn proxy.call();\n} catch (AssertionError e) {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/assertj/vavr/api/VavrAssumptions.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/assertj/vavr/api/VavrAssumptions.java does not contain these 7 exact lines in a row:\n```\n}\nprivate static <SELF> SELF assumeThat(Class<SELF> cls) {\nSimpleKey cacheKey = new SimpleKey(cls);\nClass<? extends SELF> assumptionClass = CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(),\ncacheKey,\n() -> BYTE_BUDDY.subclass(cls)\n```",
            "span_id": 6581049675206382685
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/org/assertj/vavr/api/VavrAssumptions.java",
            "output": "/*\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * Copyright 2017-2022 the original author or authors.\n */\npackage org.assertj.vavr.api;\n\nimport io.vavr.Lazy;\nimport io.vavr.collection.Map;\nimport io.vavr.collection.Multimap;\nimport io.vavr.collection.Seq;\nimport io.vavr.collection.Set;\nimport io.vavr.control.Either;\nimport io.vavr.control.Option;\nimport io.vavr.control.Try;\nimport io.vavr.control.Validation;\nimport org.assertj.core.internal.bytebuddy.ByteBuddy;\nimport org.assertj.core.internal.bytebuddy.TypeCache;\nimport org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;\nimport org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;\nimport org.assertj.core.internal.bytebuddy.implementation.Implementation;\nimport org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;\nimport org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;\nimport org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;\nimport org.assertj.core.util.CheckReturnValue;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.concurrent.Callable;\n\nimport static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;\nimport static org.assertj.core.util.Arrays.array;\nimport static org.assertj.vavr.api.ClassLoadingStrategyFactory.classLoadingStrategy;\n\npublic class VavrAssumptions {\n\n    /**\n     * This NamingStrategy takes the original class's name and adds a suffix to distinguish it.\n     * The default is ByteBuddy but for debugging purposes, it makes sense to add AssertJ as a name.\n     */\n    private static final ByteBuddy BYTE_BUDDY = new ByteBuddy().with(TypeValidation.DISABLED)\n            .with(new AuxiliaryType.NamingStrategy.SuffixingRandom(\"Assertj$Assumptions\"));\n\n    private static final Implementation ASSUMPTION = MethodDelegation.to(AssumptionMethodInterceptor.class);\n\n    private static final TypeCache<SimpleKey> CACHE = new TypeCache.WithInlineExpunction<>(TypeCache.Sort.SOFT);\n\n    private static final class AssumptionMethodInterceptor {\n\n        @RuntimeType\n        public static Object intercept(@This AbstractVavrAssert<?, ?> assertion, @SuperCall Callable<Object> proxy) throws Exception {\n            try {\n                Object result = proxy.call();\n                if (result != assertion && result instanceof AbstractVavrAssert) {\n                    final AbstractVavrAssert<?, ?> assumption = asAssumption((AbstractVavrAssert<?, ?>) result);\n                    return assumption.withAssertionState(assertion);\n                }\n                return result;\n            } catch (AssertionError e) {\n                throw assumptionNotMet(e);\n            }\n        }\n    }\n\n    /**\n     * Creates a new instance of <code>{@link EitherAssert}</code> assumption.\n     *\n     * @param <LEFT>  type of the left value contained in the {@link Either}.\n     * @param <RIGHT> type of the right value contained in the {@link Either}.\n     * @param actual  the actual value.\n     * @return the created assumption for assertion object.\n     */\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <LEFT, RIGHT> EitherAssert<LEFT, RIGHT> assumeThat(Either<LEFT, RIGHT> actual) {\n        return asAssumption(EitherAssert.class, Either.class, actual);\n    }\n\n    /**\n     * Creates a new instance of <code>{@link LazyAssert}</code> assumption.\n     *\n     * @param <VALUE>    type of the value contained in the {@link Lazy}.\n     * @param actual the actual value.\n     * @return the created assumption for assertion object.\n     */\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <VALUE> LazyAssert<VALUE> assumeThat(Lazy<VALUE> actual) {\n        return asAssumption(LazyAssert.class, Lazy.class, actual);\n    }\n\n    /**\n     * Creates a new instance of <code>{@link MapAssert}</code> assumption.\n     *\n     * @param <K>    the type of keys in the map.\n     * @param <V>    the type of values in the map.\n     * @param actual the actual value.\n     * @return the created assumption for assertion object.\n     */\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <K, V> MapAssert<K, V> assumeThat(Map<K, V> actual) {\n        return asAssumption(MapAssert.class, Map.class, actual);\n    }\n\n    /**\n     * Creates a new instance of <code>{@link MultimapAssert}</code> assumption.\n     *\n     * @param <K>    the type of keys in the multimap.\n     * @param <V>    the type of values in the multimap.\n     * @param actual the actual value.\n     * @return the created assumption for assertion object.\n     */\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <K, V> MultimapAssert<K, V> assumeThat(Multimap<K, V> actual) {\n        return asAssumption(MultimapAssert.class, Multimap.class, actual);\n    }\n\n    /**\n     * Creates a new instance of <code>{@link OptionAssert}</code> assumption.\n     *\n     * @param <VALUE> type of the value contained in the {@link Option}.\n     * @param actual  the actual value.\n     * @return the created assumption for assertion object.\n     */\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <VALUE> OptionAssert<VALUE> assumeThat(Option<VALUE> actual) {\n        return asAssumption(OptionAssert.class, Option.class, actual);\n    }\n\n    /**\n     * Creates a new instance of <code>{@link SetAssert}</code> assumption.\n     *\n     * @param <ELEMENT> type of elements contained in the {@link Set}.\n     * @param actual  the actual value.\n     * @return the created assumption for assertion object.\n     */\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <ELEMENT> SetAssert<ELEMENT> assumeThat(Set<ELEMENT> actual) {\n        return asAssumption(SetAssert.class, Set.class, actual);\n    }\n\n    /**\n     * Creates a new instance of <code>{@link SeqAssert}</code> assumption.\n     *\n     * @param <ELEMENT> type of elements contained in the {@link Seq}.\n     * @param actual  the actual value.\n     * @return the created assumption for assertion object.\n     */\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <ELEMENT> SeqAssert<ELEMENT> assumeThat(Seq<ELEMENT> actual) {\n        return asAssumption(SeqAssert.class, Seq.class, actual);\n    }\n\n    /**\n     * Creates a new instance of <code>{@link TryAssert}</code> assumption.\n     *\n     * @param <VALUE> type of the value contained in the {@link io.vavr.control.Try}.\n     * @param actual    the actual value.\n     * @return the created assumption for assertion object.\n     */\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <VALUE> TryAssert<VALUE> assumeThat(Try<VALUE> actual) {\n        return asAssumption(TryAssert.class, Try.class, actual);\n    }\n\n    /**\n     * Creates a new instance of <code>{@link ValidationAssert}</code> assumption.\n     *\n     * @param <INVALID> type of the value in the case of the invalid {@link Validation}.\n     * @param <VALID>   type of the value in the case of the valid {@link Validation}.\n     * @param actual  the actual value.\n     * @return the created assumption for assertion object.\n     */\n    @CheckReturnValue\n    @SuppressWarnings(\"unchecked\")\n    public static <INVALID, VALID> ValidationAssert<INVALID, VALID> assumeThat(Validation<INVALID, VALID> actual) {\n        return asAssumption(ValidationAssert.class, Validation.class, actual);\n    }\n\n    private static <ASSERTION, ACTUAL> ASSERTION asAssumption(Class<ASSERTION> assertionType,\n                                                              Class<ACTUAL> actualType,\n                                                              Object actual) {\n        return asAssumption(assertionType, array(actualType), array(actual));\n    }\n\n    private static <ASSERTION> ASSERTION asAssumption(Class<ASSERTION> assertionType,\n                                                      Class<?>[] constructorTypes,\n                                                      Object... constructorParams) {\n        try {\n            Class<? extends ASSERTION> type = createAssumptionClass(assertionType);\n            Constructor<? extends ASSERTION> constructor = type.getConstructor(constructorTypes);\n            return constructor.newInstance(constructorParams);\n        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) {\n            throw new RuntimeException(\"Cannot create assumption instance\", e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static <ASSERTION> Class<? extends ASSERTION> createAssumptionClass(Class<ASSERTION> assertClass) {\n        SimpleKey cacheKey = new SimpleKey(assertClass);\n        return (Class<ASSERTION>) CACHE.findOrInsert(VavrAssumptions.class.getClassLoader(),\n                cacheKey,\n                () -> generateAssumptionClass(assertClass));\n    }\n\n    private static <ASSERTION> Class<? extends ASSERTION> generateAssumptionClass(Class<ASSERTION> assertionType) {\n        return BYTE_BUDDY.subclass(assertionType)\n                .method(any())\n                .intercept(ASSUMPTION)\n                .make()\n                .load(VavrAssumptions.class.getClassLoader(), classLoadingStrategy(assertionType))\n                .getLoaded();\n    }\n\n    private static RuntimeException assumptionNotMet(AssertionError assertionError) throws ReflectiveOperationException {\n        Class<?> assumptionClass = getAssumptionClass(\"org.junit.AssumptionViolatedException\");\n        if (assumptionClass != null) return assumptionNotMet(assumptionClass, assertionError);\n\n        assumptionClass = getAssumptionClass(\"org.opentest4j.TestAbortedException\");\n        if (assumptionClass != null) return assumptionNotMet(assumptionClass, assertionError);\n\n        assumptionClass = getAssumptionClass(\"org.testng.SkipException\");\n        if (assumptionClass != null) return assumptionNotMet(assumptionClass, assertionError);\n\n        throw new IllegalStateException(\"Assumptions require JUnit, opentest4j or TestNG on the classpath\");\n    }\n\n    private static Class<?> getAssumptionClass(String className) {\n        try {\n            return Class.forName(className);\n        } catch (ClassNotFoundException e) {\n            return null;\n        }\n    }\n\n    private static RuntimeException assumptionNotMet(Class<?> exceptionClass,\n                                                     AssertionError e) throws ReflectiveOperationException {\n        return (RuntimeException) exceptionClass.getConstructor(String.class, Throwable.class)\n                .newInstance(\"assumption was not met due to: \" + e.getMessage(), e);\n    }\n\n    // for method that change the object under test (e.g. extracting)\n    private static AbstractVavrAssert<?, ?> asAssumption(AbstractVavrAssert<?, ?> assertion) {\n        // @format:off\n        Object actual = assertion.actual();\n        if (assertion instanceof LazyAssert) return asAssumption(LazyAssert.class, Lazy.class, actual);\n        if (assertion instanceof EitherAssert) return asAssumption(EitherAssert.class, Either.class, actual);\n        if (assertion instanceof MapAssert) return asAssumption(MapAssert.class, Map.class, actual);\n        if (assertion instanceof OptionAssert) return asAssumption(OptionAssert.class, Option.class, actual);\n        if (assertion instanceof SeqAssert) return asAssumption(SeqAssert.class, Seq.class, actual);\n        if (assertion instanceof TryAssert) return asAssumption(TryAssert.class, Try.class, actual);\n        if (assertion instanceof ValidationAssert) return asAssumption(ValidationAssert.class, Validation.class, actual);\n        // @format:on\n        // should not arrive here\n        throw new IllegalArgumentException(\"Unsupported assumption creation for \" + assertion.getClass());\n    }\n\n}\n",
            "error": "",
            "span_id": 10266238897710790092
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}