diff --git a/src/main/java/com/github/knaufk/flink/faker/DateTime.java b/src/main/java/com/github/knaufk/flink/faker/DateTime.java
index 2619a56..4296597 100644
--- a/src/main/java/com/github/knaufk/flink/faker/DateTime.java
+++ b/src/main/java/com/github/knaufk/flink/faker/DateTime.java
@@ -1,6 +1,7 @@
 package com.github.knaufk.flink.faker;
 
 import java.sql.Timestamp;
+import java.time.Instant;
 import java.util.Date;
 import java.util.concurrent.TimeUnit;
 import net.datafaker.DateAndTime;
@@ -13,45 +14,40 @@ public class DateTime extends DateAndTime {
   }
 
   public Timestamp past(int atMost, TimeUnit unit) {
-    return new Timestamp(super.past(atMost, unit).getTime());
+    return Timestamp.from(super.past(atMost, unit).toInstant());
   }
 
   public Timestamp past(int atMost, int minimum, TimeUnit unit) {
-    return new Timestamp(super.past(atMost, minimum, unit).getTime());
+    return Timestamp.from(super.past(atMost, minimum, unit).toInstant());
   }
 
-  @Override
   public Timestamp future(int atMost, TimeUnit unit) {
-    return new Timestamp(super.future(atMost, unit).getTime());
+    return Timestamp.from(super.future(atMost, unit).toInstant());
   }
 
-  @Override
   public Timestamp future(int atMost, int minimum, TimeUnit unit) {
-    return new Timestamp(super.future(atMost, minimum, unit).getTime());
+    return Timestamp.from(super.future(atMost, minimum, unit).toInstant());
   }
 
-  @Override
   public Timestamp future(int atMost, TimeUnit unit, Date referenceDate) {
-    return new Timestamp(super.future(atMost, unit, referenceDate).getTime());
+    return Timestamp.from(super.future(atMost, unit, referenceDate).toInstant());
   }
 
-  @Override
   public Timestamp past(int atMost, TimeUnit unit, Date referenceDate) {
-    return new Timestamp(super.past(atMost, unit, referenceDate).getTime());
+    return Timestamp.from(super.past(atMost, unit, referenceDate).toInstant());
   }
 
-  @Override
   public Timestamp between(Date from, Date to) throws IllegalArgumentException {
-    return new Timestamp(super.between(from, to).getTime());
+    Timestamp fromTimestamp = new Timestamp(from.getTime());
+    Timestamp toTimestamp = new Timestamp(to.getTime());
+    return super.between(fromTimestamp, toTimestamp);
   }
 
-  @Override
   public Timestamp birthday() {
-    return new Timestamp(super.birthday().getTime());
+    return Timestamp.from(super.birthday().toInstant());
   }
 
-  @Override
   public Timestamp birthday(int minAge, int maxAge) {
-    return new Timestamp(super.birthday(minAge, maxAge).getTime());
+    return Timestamp.from(super.birthday(minAge, maxAge).toInstant());
   }
 }