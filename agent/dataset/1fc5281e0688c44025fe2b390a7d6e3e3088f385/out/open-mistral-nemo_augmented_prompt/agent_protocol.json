{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "Here is the first diff:\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,117 +1,117 @@\n-/* Copyright (c) 2012 - 2016 Jadler contributors\n+/* Copyright (c) 2012 - 2016 Jadler contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package net.jadler.stubbing.server.jetty;\n\n import net.jadler.RequestManager;\n import net.jadler.stubbing.server.StubHttpServer;\n import org.apache.commons.lang.Validate;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.bio.SocketConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\n-/** Default stub http server implementation using Jetty as an http server.\n+/** Default stub http server implementation using Jetty as an http server.\n  */\n public class JettyStubHttpServer implements StubHttpServer {\n\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n\n     public JettyStubHttpServer() {\n         this(0);\n     }\n\n     public JettyStubHttpServer(final int port) {\n-        this.server = new Server();\n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(true);\n-\n-        this.httpConnector = new SelectChannelConnector();\n-        this.httpConnector.setPort(port);\n-        server.addConnector(this.httpConnector);\n+        this.server = new Server(new SocketConnector());\n+        server.setConnectTimeout(5000);\n+        server.setStopTimeout(5000);\n+        server.setSendServerVersion(false);\n+        server.setSendDateHeader(true);\n+        this.httpConnector = server.getConnectors()[0];\n+        this.httpConnector.setPort(port);\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public int getPort() {\n-        return httpConnector.getLocalPort();\n+        return httpConnector.getLocalAddress().getPort();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: not a statement\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n/* Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n/** Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n+}\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n    /** {@inheritDoc} */\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "30": {
                            "lines": [
                                {
                                    "line_no": 29,
                                    "content": "        this(0);"
                                },
                                {
                                    "line_no": 30,
                                    "content": "+}"
                                },
                                {
                                    "line_no": 31,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[30,1] error: illegal start of expression\n",
                                "[30,] error: not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: not a statement\n",
            "span_id": 11449285219955933808
        },
        {
            "input": "Here is the second diff:\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,117 +1,117 @@\n-/* Copyright (c) 2012 - 2016 Jadler contributors\n+/* Copyright (c) 2012 - 2016 Jadler contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package net.jadler.stubbing.server.jetty;\n\n import net.jadler.RequestManager;\n import net.jadler.stubbing.server.StubHttpServer;\n import org.apache.commons.lang.Validate;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.bio.SocketConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\n-/** Default stub http server implementation using Jetty as an http server.\n+/** Default stub http server implementation using Jetty as an http server.\n  */\n public class JettyStubHttpServer implements StubHttpServer {\n\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n\n     public JettyStubHttpServer() {\n         this(0);\n     }\n\n     public JettyStubHttpServer(final int port) {\n-        this.server = new Server();\n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(true);\n-\n-        this.httpConnector = new SelectChannelConnector();\n-        this.httpConnector.setPort(port);\n-        server.addConnector(this.httpConnector);\n+        this.server = new Server(new SocketConnector());\n+        server.setConnectTimeout(5000);\n+        server.setStopTimeout(5000);\n+        server.setSendServerVersion(false);\n+        server.setSendDateHeader(true);\n+        this.httpConnector = server.getConnectors()[0];\n+        this.httpConnector.setPort(port);\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public int getPort() {\n-        return httpConnector.getLocalPort();\n+        return httpConnector.getLocalAddress().getPort();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: class, interface, or enum expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n/* Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n/** Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n+}\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": ""
                                },
                                {
                                    "line_no": 43,
                                    "content": "+}"
                                },
                                {
                                    "line_no": 44,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[43,] error: illegal start of type\n"
                            ]
                        },
                        "46": {
                            "lines": [
                                {
                                    "line_no": 45,
                                    "content": ""
                                },
                                {
                                    "line_no": 46,
                                    "content": "    public JettyStubHttpServer(final int port) {"
                                },
                                {
                                    "line_no": 47,
                                    "content": "        this.server = new Server(new SocketConnector());"
                                }
                            ],
                            "error_texts": [
                                "[46,11] error: class, interface, or enum expected\n",
                                "[46,37] error: class, interface, or enum expected\n"
                            ]
                        },
                        "48": {
                            "lines": [
                                {
                                    "line_no": 47,
                                    "content": "        this.server = new Server(new SocketConnector());"
                                },
                                {
                                    "line_no": 48,
                                    "content": "        server.setConnectTimeout(5000);"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        server.setStopTimeout(5000);"
                                }
                            ],
                            "error_texts": [
                                "[48,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "        server.setConnectTimeout(5000);"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        server.setStopTimeout(5000);"
                                },
                                {
                                    "line_no": 50,
                                    "content": "        server.setSendServerVersion(false);"
                                }
                            ],
                            "error_texts": [
                                "[49,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "50": {
                            "lines": [
                                {
                                    "line_no": 49,
                                    "content": "        server.setStopTimeout(5000);"
                                },
                                {
                                    "line_no": 50,
                                    "content": "        server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 51,
                                    "content": "        server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[50,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "51": {
                            "lines": [
                                {
                                    "line_no": 50,
                                    "content": "        server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 51,
                                    "content": "        server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 52,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                }
                            ],
                            "error_texts": [
                                "[51,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "52": {
                            "lines": [
                                {
                                    "line_no": 51,
                                    "content": "        server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 52,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                },
                                {
                                    "line_no": 53,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[52,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "53": {
                            "lines": [
                                {
                                    "line_no": 52,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                },
                                {
                                    "line_no": 53,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 54,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[53,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "54": {
                            "lines": [
                                {
                                    "line_no": 53,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 54,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 55,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[54,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 62,
                                    "content": "    public void registerRequestManager(final RequestManager ruleProvider) {"
                                },
                                {
                                    "line_no": 63,
                                    "content": "        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[62,45] error: class, interface, or enum expected\n",
                                "[62,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "65": {
                            "lines": [
                                {
                                    "line_no": 64,
                                    "content": ""
                                },
                                {
                                    "line_no": 65,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 66,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[65,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "66": {
                            "lines": [
                                {
                                    "line_no": 65,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 66,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 67,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[66,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "74": {
                            "lines": [
                                {
                                    "line_no": 73,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 74,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 75,
                                    "content": "        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[74,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "76": {
                            "lines": [
                                {
                                    "line_no": 75,
                                    "content": "        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 76,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 77,
                                    "content": "        logger.debug(\"jetty started\");"
                                }
                            ],
                            "error_texts": [
                                "[76,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "77": {
                            "lines": [
                                {
                                    "line_no": 76,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 77,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 78,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[77,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "78": {
                            "lines": [
                                {
                                    "line_no": 77,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 78,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 79,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[78,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "86": {
                            "lines": [
                                {
                                    "line_no": 85,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 86,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 87,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[86,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "88": {
                            "lines": [
                                {
                                    "line_no": 87,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                },
                                {
                                    "line_no": 88,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 89,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                }
                            ],
                            "error_texts": [
                                "[88,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "89": {
                            "lines": [
                                {
                                    "line_no": 88,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 89,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 90,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[89,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "90": {
                            "lines": [
                                {
                                    "line_no": 89,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 90,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 91,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[90,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "94": {
                            "lines": [
                                {
                                    "line_no": 93,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 94,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 95,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                }
                            ],
                            "error_texts": [
                                "[94,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "96": {
                            "lines": [
                                {
                                    "line_no": 95,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                },
                                {
                                    "line_no": 96,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 97,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[96,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "103": {
                            "lines": [
                                {
                                    "line_no": 102,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 103,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 104,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                }
                            ],
                            "error_texts": [
                                "[103,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                },
                                {
                                    "line_no": 105,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 106,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[105,4] error: class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: class, interface, or enum expected\n",
            "span_id": 15019991515035582600
        },
        {
            "input": "Here is the third diff:\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,117 +1,117 @@\n-/* Copyright (c) 2012 - 2016 Jadler contributors\n+/* Copyright (c) 2012 - 2016 Jadler contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package net.jadler.stubbing.server.jetty;\n\n import net.jadler.RequestManager;\n import net.jadler.stubbing.server.StubHttpServer;\n import org.apache.commons.lang.Validate;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.bio.SocketConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\n-/** Default stub http server implementation using Jetty as an http server.\n+/** Default stub http server implementation using Jetty as an http server.\n  */\n public class JettyStubHttpServer implements StubHttpServer {\n\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n\n     public JettyStubHttpServer() {\n         this(0);\n     }\n\n     public JettyStubHttpServer(final int port) {\n-        this.server = new Server();\n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(true);\n-\n-        this.httpConnector = new SelectChannelConnector();\n-        this.httpConnector.setPort(port);\n-        server.addConnector(this.httpConnector);\n+        this.server = new Server(new SocketConnector());\n+        server.setConnectTimeout(5000);\n+        server.setStopTimeout(5000);\n+        server.setSendServerVersion(false);\n+        server.setSendDateHeader(true);\n+        this.httpConnector = server.getConnectors()[0];\n+        this.httpConnector.setPort(port);\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public int getPort() {\n-        return httpConnector.getLocalPort();\n+        return httpConnector.getLocalAddress().getPort();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: class, interface, or enum expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n/* Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n/** Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n+}\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n        return httpConnector.getLocalAddress().getPort();\n    }\n}\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "44": {
                            "lines": [
                                {
                                    "line_no": 43,
                                    "content": ""
                                },
                                {
                                    "line_no": 44,
                                    "content": "        this.server = new Server(new SocketConnector());"
                                },
                                {
                                    "line_no": 45,
                                    "content": "        server.setConnectTimeout(5000);"
                                }
                            ],
                            "error_texts": [
                                "[44,12] error: ';' expected\n",
                                "[44,19] error: <identifier> expected\n",
                                "[44,8] error: illegal start of type\n"
                            ]
                        },
                        "45": {
                            "lines": [
                                {
                                    "line_no": 44,
                                    "content": "        this.server = new Server(new SocketConnector());"
                                },
                                {
                                    "line_no": 45,
                                    "content": "        server.setConnectTimeout(5000);"
                                },
                                {
                                    "line_no": 46,
                                    "content": "        server.setStopTimeout(5000);"
                                }
                            ],
                            "error_texts": [
                                "[45,33] error: illegal start of type\n",
                                "[45,32] error: <identifier> expected\n"
                            ]
                        },
                        "46": {
                            "lines": [
                                {
                                    "line_no": 45,
                                    "content": "        server.setConnectTimeout(5000);"
                                },
                                {
                                    "line_no": 46,
                                    "content": "        server.setStopTimeout(5000);"
                                },
                                {
                                    "line_no": 47,
                                    "content": "        server.setSendServerVersion(false);"
                                }
                            ],
                            "error_texts": [
                                "[46,30] error: illegal start of type\n",
                                "[46,29] error: <identifier> expected\n"
                            ]
                        },
                        "47": {
                            "lines": [
                                {
                                    "line_no": 46,
                                    "content": "        server.setStopTimeout(5000);"
                                },
                                {
                                    "line_no": 47,
                                    "content": "        server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 48,
                                    "content": "        server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[47,35] error: <identifier> expected\n",
                                "[47,36] error: illegal start of type\n"
                            ]
                        },
                        "48": {
                            "lines": [
                                {
                                    "line_no": 47,
                                    "content": "        server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 48,
                                    "content": "        server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                }
                            ],
                            "error_texts": [
                                "[48,33] error: illegal start of type\n",
                                "[48,32] error: <identifier> expected\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "        server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                },
                                {
                                    "line_no": 50,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[49,26] error: <identifier> expected\n",
                                "[49,12] error: ';' expected\n",
                                "[49,8] error: illegal start of type\n"
                            ]
                        },
                        "50": {
                            "lines": [
                                {
                                    "line_no": 49,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                },
                                {
                                    "line_no": 50,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 51,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[50,34] error: <identifier> expected\n",
                                "[50,39] error: <identifier> expected\n",
                                "[50,12] error: ';' expected\n",
                                "[50,8] error: illegal start of type\n"
                            ]
                        },
                        "53": {
                            "lines": [
                                {
                                    "line_no": 52,
                                    "content": ""
                                },
                                {
                                    "line_no": 53,
                                    "content": "+}"
                                },
                                {
                                    "line_no": 54,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[53,] error: class, interface, or enum expected\n"
                            ]
                        },
                        "56": {
                            "lines": [
                                {
                                    "line_no": 55,
                                    "content": ""
                                },
                                {
                                    "line_no": 56,
                                    "content": "    public JettyStubHttpServer(final int port) {"
                                },
                                {
                                    "line_no": 57,
                                    "content": "        this.server = new Server(new SocketConnector());"
                                }
                            ],
                            "error_texts": [
                                "[56,37] error: class, interface, or enum expected\n",
                                "[56,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "        this.server = new Server(new SocketConnector());"
                                },
                                {
                                    "line_no": 58,
                                    "content": "        server.setConnectTimeout(5000);"
                                },
                                {
                                    "line_no": 59,
                                    "content": "        server.setStopTimeout(5000);"
                                }
                            ],
                            "error_texts": [
                                "[58,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "        server.setConnectTimeout(5000);"
                                },
                                {
                                    "line_no": 59,
                                    "content": "        server.setStopTimeout(5000);"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        server.setSendServerVersion(false);"
                                }
                            ],
                            "error_texts": [
                                "[59,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "        server.setStopTimeout(5000);"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "        server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[60,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "        server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "        server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 62,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                }
                            ],
                            "error_texts": [
                                "[61,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "        server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 62,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                },
                                {
                                    "line_no": 63,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[62,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "63": {
                            "lines": [
                                {
                                    "line_no": 62,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                },
                                {
                                    "line_no": 63,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 64,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[63,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "64": {
                            "lines": [
                                {
                                    "line_no": 63,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 64,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 65,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[64,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "72": {
                            "lines": [
                                {
                                    "line_no": 71,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 72,
                                    "content": "    public void registerRequestManager(final RequestManager ruleProvider) {"
                                },
                                {
                                    "line_no": 73,
                                    "content": "        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[72,45] error: class, interface, or enum expected\n",
                                "[72,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "75": {
                            "lines": [
                                {
                                    "line_no": 74,
                                    "content": ""
                                },
                                {
                                    "line_no": 75,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 76,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[75,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "76": {
                            "lines": [
                                {
                                    "line_no": 75,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 76,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 77,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[76,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "84": {
                            "lines": [
                                {
                                    "line_no": 83,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 84,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 85,
                                    "content": "        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[84,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "86": {
                            "lines": [
                                {
                                    "line_no": 85,
                                    "content": "        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 86,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 87,
                                    "content": "        logger.debug(\"jetty started\");"
                                }
                            ],
                            "error_texts": [
                                "[86,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "87": {
                            "lines": [
                                {
                                    "line_no": 86,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 87,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 88,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[87,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "88": {
                            "lines": [
                                {
                                    "line_no": 87,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 88,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 89,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[88,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "96": {
                            "lines": [
                                {
                                    "line_no": 95,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 96,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 97,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[96,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "98": {
                            "lines": [
                                {
                                    "line_no": 97,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                },
                                {
                                    "line_no": 98,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 99,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                }
                            ],
                            "error_texts": [
                                "[98,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "99": {
                            "lines": [
                                {
                                    "line_no": 98,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 99,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 100,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[99,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "100": {
                            "lines": [
                                {
                                    "line_no": 99,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 100,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 101,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[100,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "104": {
                            "lines": [
                                {
                                    "line_no": 103,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 104,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                }
                            ],
                            "error_texts": [
                                "[104,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "106": {
                            "lines": [
                                {
                                    "line_no": 105,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                },
                                {
                                    "line_no": 106,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                },
                                {
                                    "line_no": 107,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[106,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "107": {
                            "lines": [
                                {
                                    "line_no": 106,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                },
                                {
                                    "line_no": 107,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 108,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[107,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "114": {
                            "lines": [
                                {
                                    "line_no": 113,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 114,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 115,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                }
                            ],
                            "error_texts": [
                                "[114,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "116": {
                            "lines": [
                                {
                                    "line_no": 115,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                },
                                {
                                    "line_no": 116,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 117,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[116,4] error: class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: class, interface, or enum expected\n",
            "span_id": 6046648224903965709
        },
        {
            "input": "Here is the fourth diff:\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,117 +1,117 @@\n-/* Copyright (c) 2012 - 2016 Jadler contributors\n+/* Copyright (c) 2012 - 2016 Jadler contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package net.jadler.stubbing.server.jetty;\n\n import net.jadler.RequestManager;\n import net.jadler.stubbing.server.StubHttpServer;\n import org.apache.commons.lang.Validate;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.bio.SocketConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\n-/** Default stub http server implementation using Jetty as an http server.\n+/** Default stub http server implementation using Jetty as an http server.\n  */\n public class JettyStubHttpServer implements StubHttpServer {\n\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n\n     public JettyStubHttpServer() {\n         this(0);\n     }\n\n     public JettyStubHttpServer(final int port) {\n-        this.server = new Server();\n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(true);\n-\n-        this.httpConnector = new SelectChannelConnector();\n-        this.httpConnector.setPort(port);\n-        server.addConnector(this.httpConnector);\n+        this.server = new Server(new SocketConnector());\n+        server.setConnectTimeout(5000);\n+        server.setStopTimeout(5000);\n+        server.setSendServerVersion(false);\n+        server.setSendDateHeader(true);\n+        this.httpConnector = server.getConnectors()[0];\n+        this.httpConnector.setPort(port);\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n\n     /** {@inheritDoc} */\n     @Override\n     public int getPort() {\n-        return httpConnector.getLocalPort();\n+        return httpConnector.getLocalAddress().getPort();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: not a statement\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n/* Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n/** Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n+}\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n    /** {@inheritDoc} */\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "30": {
                            "lines": [
                                {
                                    "line_no": 29,
                                    "content": "        this(0);"
                                },
                                {
                                    "line_no": 30,
                                    "content": "+}"
                                },
                                {
                                    "line_no": 31,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[30,1] error: illegal start of expression\n",
                                "[30,] error: not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: not a statement\n",
            "span_id": 9798034619999069854
        },
        {
            "input": "Here is the fifth diff:\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,117 +1,117 @@\n-/* Copyright (c) 2012 - 2016 Jadler contributors\n+/* Copyright (c) 2012 - 2016 Jadler contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package net.jadler.stubbing.server.jetty;\n\n import net.jadler.RequestManager;\n import net.jadler.stubbing.server.StubHttpServer;\n import org.apache.commons.lang.Validate;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.server.bio.SocketConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n/** Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n-        this(0);\n+}\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n    /** {@inheritDoc} */\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: class, interface, or enum expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n/* Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n/** Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n}\n+}\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n    /** {@inheritDoc} */\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "30": {
                            "lines": [
                                {
                                    "line_no": 29,
                                    "content": "}"
                                },
                                {
                                    "line_no": 30,
                                    "content": "+}"
                                },
                                {
                                    "line_no": 31,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[30,] error: illegal start of type\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": ""
                                },
                                {
                                    "line_no": 33,
                                    "content": "    public JettyStubHttpServer(final int port) {"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server = new Server(new SocketConnector());"
                                }
                            ],
                            "error_texts": [
                                "[33,37] error: class, interface, or enum expected\n",
                                "[33,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "        this.server = new Server(new SocketConnector());"
                                },
                                {
                                    "line_no": 35,
                                    "content": "        server.setConnectTimeout(5000);"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        server.setStopTimeout(5000);"
                                }
                            ],
                            "error_texts": [
                                "[35,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "        server.setConnectTimeout(5000);"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        server.setStopTimeout(5000);"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        server.setSendServerVersion(false);"
                                }
                            ],
                            "error_texts": [
                                "[36,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        server.setStopTimeout(5000);"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[37,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "        server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 39,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                }
                            ],
                            "error_texts": [
                                "[38,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": "        server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 39,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                },
                                {
                                    "line_no": 40,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[39,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "40": {
                            "lines": [
                                {
                                    "line_no": 39,
                                    "content": "        this.httpConnector = server.getConnectors()[0];"
                                },
                                {
                                    "line_no": 40,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 41,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[40,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "41": {
                            "lines": [
                                {
                                    "line_no": 40,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 41,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 42,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[41,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 49,
                                    "content": "    public void registerRequestManager(final RequestManager ruleProvider) {"
                                },
                                {
                                    "line_no": 50,
                                    "content": "        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[49,11] error: class, interface, or enum expected\n",
                                "[49,45] error: class, interface, or enum expected\n"
                            ]
                        },
                        "52": {
                            "lines": [
                                {
                                    "line_no": 51,
                                    "content": ""
                                },
                                {
                                    "line_no": 52,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 53,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[52,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "53": {
                            "lines": [
                                {
                                    "line_no": 52,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 53,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 54,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[53,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[61,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "63": {
                            "lines": [
                                {
                                    "line_no": 62,
                                    "content": "        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 63,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 64,
                                    "content": "        logger.debug(\"jetty started\");"
                                }
                            ],
                            "error_texts": [
                                "[63,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "64": {
                            "lines": [
                                {
                                    "line_no": 63,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 64,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 65,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[64,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "65": {
                            "lines": [
                                {
                                    "line_no": 64,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 65,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 66,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[65,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "73": {
                            "lines": [
                                {
                                    "line_no": 72,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 73,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 74,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[73,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "75": {
                            "lines": [
                                {
                                    "line_no": 74,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                },
                                {
                                    "line_no": 75,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 76,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                }
                            ],
                            "error_texts": [
                                "[75,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "76": {
                            "lines": [
                                {
                                    "line_no": 75,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 76,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 77,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[76,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "77": {
                            "lines": [
                                {
                                    "line_no": 76,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 77,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 78,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[77,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "85": {
                            "lines": [
                                {
                                    "line_no": 84,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 85,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 86,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                }
                            ],
                            "error_texts": [
                                "[85,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "87": {
                            "lines": [
                                {
                                    "line_no": 86,
                                    "content": "        return httpConnector.getLocalAddress().getPort();"
                                },
                                {
                                    "line_no": 87,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 88,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[87,4] error: class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: class, interface, or enum expected\n",
            "span_id": 12737834952628713645
        },
        {
            "input": "Here is the sixth diff:\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,117 +1,117 @@\n-/* Copyright (c) 2012 - 2016 Jadler contributors\n+/* Copyright (c) 2012 - 2016 Jadler contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package net.jadler.stubbing.server.jetty;\n\n import net.jadler.RequestManager;\n import net.jadler.stubbing.server.StubHttpServer;\n import org.apache.commons.lang.Validate;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.server.bio.SocketConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n/** Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n-        this(0);\n+}\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n    /** {@inheritDoc} */\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 81 exact lines in a row:\n```\n/* Copyright (c) 2012 - 2016 Jadler contributors\n* This program is made available under the terms of the MIT License.\n*/\npackage net.jadler.stubbing.server.jetty;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n* Default stub http server implementation using Jetty as an http server.\n*/\nprivate static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\nprivate final Server server;\nprivate final Connector httpConnector;\npublic JettyStubHttpServer() {\nthis(0);\npublic JettyStubHttpServer(final int port) {\nthis.server = new Server(new SocketConnector());\nserver.setConnectTimeout(5000);\nserver.setStopTimeout(5000);\nserver.setSendServerVersion(false);\nserver.setSendDateHeader(true);\nthis.httpConnector = server.getConnectors()[0];\nthis.httpConnector.setPort(port);\n}\n/**\n* {@inheritDoc}\n*/\n/** {@inheritDoc} */\n@Override\npublic void registerRequestManager(final RequestManager ruleProvider) {\nValidate.notNull(ruleProvider, \"ruleProvider cannot be null\");\nserver.setHandler(new JadlerHandler(ruleProvider));\n}\n/**\n* {@inheritDoc}\n*/\n/** {@inheritDoc} */\n@Override\npublic void start() throws Exception {\nlogger.debug(\"starting jetty\");\nserver.start();\nlogger.debug(\"jetty started\");\n}\n/**\n* {@inheritDoc}\n*/\n/** {@inheritDoc} */\n@Override\npublic void stop() throws Exception {\nlogger.debug(\"stopping jetty\");\nserver.stop();\nlogger.debug(\"jetty stopped\");\n}\n/** {@inheritDoc} */\n/**\n* {@inheritDoc}\n*/\n@Override\npublic int getPort() {\nreturn httpConnector.getLocalAddress().getPort();\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 81 exact lines in a row:\n```\n/* Copyright (c) 2012 - 2016 Jadler contributors\n* This program is made available under the terms of the MIT License.\n*/\npackage net.jadler.stubbing.server.jetty;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.bio.SocketConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n* Default stub http server implementation using Jetty as an http server.\n*/\nprivate static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\nprivate final Server server;\nprivate final Connector httpConnector;\npublic JettyStubHttpServer() {\nthis(0);\npublic JettyStubHttpServer(final int port) {\nthis.server = new Server(new SocketConnector());\nserver.setConnectTimeout(5000);\nserver.setStopTimeout(5000);\nserver.setSendServerVersion(false);\nserver.setSendDateHeader(true);\nthis.httpConnector = server.getConnectors()[0];\nthis.httpConnector.setPort(port);\n}\n/**\n* {@inheritDoc}\n*/\n/** {@inheritDoc} */\n@Override\npublic void registerRequestManager(final RequestManager ruleProvider) {\nValidate.notNull(ruleProvider, \"ruleProvider cannot be null\");\nserver.setHandler(new JadlerHandler(ruleProvider));\n}\n/**\n* {@inheritDoc}\n*/\n/** {@inheritDoc} */\n@Override\npublic void start() throws Exception {\nlogger.debug(\"starting jetty\");\nserver.start();\nlogger.debug(\"jetty started\");\n}\n/**\n* {@inheritDoc}\n*/\n/** {@inheritDoc} */\n@Override\npublic void stop() throws Exception {\nlogger.debug(\"stopping jetty\");\nserver.stop();\nlogger.debug(\"jetty stopped\");\n}\n/** {@inheritDoc} */\n/**\n* {@inheritDoc}\n*/\n@Override\npublic int getPort() {\nreturn httpConnector.getLocalAddress().getPort();\n}\n```",
            "span_id": 14496291133893902372
        },
        {
            "input": "Here is the sixth diff:\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,117 +1,117 @@\n-/* Copyright (c) 2012 - 2016 Jadler contributors\n+/* Copyright (c) 2012 - 2016 Jadler contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package net.jadler.stubbing.server.jetty;\n\n import net.jadler.RequestManager;\n import net.jadler.stubbing.server.StubHttpServer;\n import org.apache.commons.lang.Validate;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.server.bio.SocketConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n-        this(0);\n+}\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n    /** {@inheritDoc} */\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: class, interface, or enum expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n}\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "31": {
                            "lines": [
                                {
                                    "line_no": 30,
                                    "content": ""
                                },
                                {
                                    "line_no": 31,
                                    "content": "    public JettyStubHttpServer(final int port) {"
                                },
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                }
                            ],
                            "error_texts": [
                                "[31,37] error: class, interface, or enum expected\n",
                                "[31,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                },
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[33,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 35,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[34,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": ""
                                },
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[36,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                }
                            ],
                            "error_texts": [
                                "[37,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                },
                                {
                                    "line_no": 39,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[38,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                },
                                {
                                    "line_no": 39,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 40,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[39,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "46": {
                            "lines": [
                                {
                                    "line_no": 45,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 46,
                                    "content": "    public void registerRequestManager(final RequestManager ruleProvider) {"
                                },
                                {
                                    "line_no": 47,
                                    "content": "        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[46,11] error: class, interface, or enum expected\n",
                                "[46,45] error: class, interface, or enum expected\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": ""
                                },
                                {
                                    "line_no": 49,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[49,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "50": {
                            "lines": [
                                {
                                    "line_no": 49,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 51,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[50,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "57": {
                            "lines": [
                                {
                                    "line_no": 56,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 57,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 58,
                                    "content": "        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[57,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        logger.debug(\"jetty started\");"
                                }
                            ],
                            "error_texts": [
                                "[59,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[60,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 62,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[61,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "68": {
                            "lines": [
                                {
                                    "line_no": 67,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 68,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 69,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[68,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "70": {
                            "lines": [
                                {
                                    "line_no": 69,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                },
                                {
                                    "line_no": 70,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 71,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                }
                            ],
                            "error_texts": [
                                "[70,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "71": {
                            "lines": [
                                {
                                    "line_no": 70,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 71,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 72,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[71,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "72": {
                            "lines": [
                                {
                                    "line_no": 71,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 72,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 73,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[72,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 79,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 80,
                                    "content": "        return httpConnector.getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[79,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "81": {
                            "lines": [
                                {
                                    "line_no": 80,
                                    "content": "        return httpConnector.getLocalPort();"
                                },
                                {
                                    "line_no": 81,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 82,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[81,4] error: class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: class, interface, or enum expected\n",
            "span_id": 15090043328386974432
        },
        {
            "input": "Here is the sixth diff:\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,117 +1,117 @@\n-/* Copyright (c) 2012 - 2016 Jadler contributors\n+/* Copyright (c) 2012 - 2016 Jadler contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package net.jadler.stubbing.server.jetty;\n\n import net.jadler.RequestManager;\n import net.jadler.stubbing.server.StubHttpServer;\n import org.apache.commons.lang.Validate;\n import org.eclipse.jetty.server.Connector;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.server.bio.SocketConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n-        this(0);\n+}\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server(new SocketConnector());\n        server.setConnectTimeout(5000);\n        server.setStopTimeout(5000);\n        server.setSendServerVersion(false);\n        server.setSendDateHeader(true);\n        this.httpConnector = server.getConnectors()[0];\n        this.httpConnector.setPort(port);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    /** {@inheritDoc} */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n    /** {@inheritDoc} */\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalAddress().getPort();\n    }\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: class, interface, or enum expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n}\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "31": {
                            "lines": [
                                {
                                    "line_no": 30,
                                    "content": ""
                                },
                                {
                                    "line_no": 31,
                                    "content": "    public JettyStubHttpServer(final int port) {"
                                },
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                }
                            ],
                            "error_texts": [
                                "[31,37] error: class, interface, or enum expected\n",
                                "[31,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                },
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[33,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 35,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[34,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": ""
                                },
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[36,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                }
                            ],
                            "error_texts": [
                                "[37,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                },
                                {
                                    "line_no": 39,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[38,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                },
                                {
                                    "line_no": 39,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 40,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[39,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "46": {
                            "lines": [
                                {
                                    "line_no": 45,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 46,
                                    "content": "    public void registerRequestManager(final RequestManager ruleProvider) {"
                                },
                                {
                                    "line_no": 47,
                                    "content": "        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[46,11] error: class, interface, or enum expected\n",
                                "[46,45] error: class, interface, or enum expected\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": ""
                                },
                                {
                                    "line_no": 49,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[49,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "50": {
                            "lines": [
                                {
                                    "line_no": 49,
                                    "content": "        server.setHandler(new JadlerHandler(ruleProvider));"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 51,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[50,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "57": {
                            "lines": [
                                {
                                    "line_no": 56,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 57,
                                    "content": "    public void start() throws Exception {"
                                },
                                {
                                    "line_no": 58,
                                    "content": "        logger.debug(\"starting jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[57,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "        logger.debug(\"starting jetty\");"
                                },
                                {
                                    "line_no": 59,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        logger.debug(\"jetty started\");"
                                }
                            ],
                            "error_texts": [
                                "[59,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "        server.start();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[60,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "        logger.debug(\"jetty started\");"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 62,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[61,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "68": {
                            "lines": [
                                {
                                    "line_no": 67,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 68,
                                    "content": "    public void stop() throws Exception {"
                                },
                                {
                                    "line_no": 69,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                }
                            ],
                            "error_texts": [
                                "[68,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "70": {
                            "lines": [
                                {
                                    "line_no": 69,
                                    "content": "        logger.debug(\"stopping jetty\");"
                                },
                                {
                                    "line_no": 70,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 71,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                }
                            ],
                            "error_texts": [
                                "[70,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "71": {
                            "lines": [
                                {
                                    "line_no": 70,
                                    "content": "        server.stop();"
                                },
                                {
                                    "line_no": 71,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 72,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[71,8] error: class, interface, or enum expected\n"
                            ]
                        },
                        "72": {
                            "lines": [
                                {
                                    "line_no": 71,
                                    "content": "        logger.debug(\"jetty stopped\");"
                                },
                                {
                                    "line_no": 72,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 73,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[72,4] error: class, interface, or enum expected\n"
                            ]
                        },
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 79,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 80,
                                    "content": "        return httpConnector.getLocalPort();"
                                }
                            ],
                            "error_texts": [
                                "[79,11] error: class, interface, or enum expected\n"
                            ]
                        },
                        "81": {
                            "lines": [
                                {
                                    "line_no": 80,
                                    "content": "        return httpConnector.getLocalPort();"
                                },
                                {
                                    "line_no": 81,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 82,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[81,4] error: class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: class, interface, or enum expected\n",
            "span_id": 17493929531675376031
        }
    ],
    "read_file": [
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}",
            "error": "",
            "span_id": 11564480893975005520
        },
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.KeyValues;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.StubResponse;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler {\n\n    private final RequestManager requestManager;\n\n\n    /**\n     * @param requestManager request manager instance to retrieve stub responses\n     */\n    JadlerHandler(final RequestManager requestManager) {\n        Validate.notNull(requestManager, \"requestManager cannot be null\");\n        this.requestManager = requestManager;\n    }\n\n\n    @Override\n    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n\n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n\n        baseRequest.setHandled(true);\n\n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n    }\n\n\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n        }\n    }\n\n\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key : headers.getKeys()) {\n\n            for (final String value : headers.getValues(key)) {\n                response.addHeader(key, value);\n            }\n        }\n    }\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\n            try {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}",
            "error": "",
            "span_id": 6367443714274012999
        },
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}",
            "error": "",
            "span_id": 16532384533540697100
        },
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}",
            "error": "",
            "span_id": 15076165751552326042
        },
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}",
            "error": "",
            "span_id": 12148966801244346557
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 9717248058728491980
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 10348459417649053676
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 562191406366462577
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 1281275981123685195
        }
    ]
}