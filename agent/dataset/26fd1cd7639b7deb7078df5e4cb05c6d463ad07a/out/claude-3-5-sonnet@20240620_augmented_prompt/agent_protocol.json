{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "To address the compilation errors, we need to update the `ChartUtil` class to remove the dependency on the `com.gargoylesoftware.htmlunit` package and the `ScriptResult` class. Let's modify the file to use an alternative approach. Here's the diff to fix the issues:\n\n```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,7 +4,6 @@ package io.jenkins.plugins.coverage.util;\n import java.io.IOException;\n import java.util.List;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n import org.jenkinsci.test.acceptance.po.Jenkins;\n import org.openqa.selenium.By;\n import org.openqa.selenium.JavascriptExecutor;\n@@ -32,7 +31,7 @@ public class ChartUtil {\n      * @return the chart data as a string\n      * @throws IOException if an error occurs while executing the JavaScript\n      */\n-    public static ScriptResult getChartData(Jenkins jenkins, String chartId) throws IOException {\n+    public static String getChartData(Jenkins jenkins, String chartId) throws IOException {\n         WebDriver driver = jenkins.getDriver();\n         WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));\n \n@@ -57,7 +56,7 @@ public class ChartUtil {\n             \"return JSON.stringify(chartData);\" +\n             \"}\";\n \n-        return ((JavascriptExecutor) driver).executeScript(script);\n+        return (String) ((JavascriptExecutor) driver).executeScript(script);\n     }\n \n     /**\n```\n\nThis diff makes the following changes:\n1. Removes the import for `com.gargoylesoftware.htmlunit.ScriptResult`.\n2. Changes the return type of `getChartData` method from `ScriptResult` to `String`.\n3. Modifies the return statement to cast the result of `executeScript` to `String`.\n\nThese changes should resolve the compilation errors while maintaining the functionality of the `ChartUtil` class.",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java!\nMake extra sure the indentation is correct.\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain these 7 exact lines in a row:\n```\n* @return the chart data as a string\n* @throws IOException if an error occurs while executing the JavaScript\n*/\npublic static ScriptResult getChartData(Jenkins jenkins, String chartId) throws IOException {\nWebDriver driver = jenkins.getDriver();\nWebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java!\nMake extra sure the indentation is correct.\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain these 7 exact lines in a row:\n```\n\"return JSON.stringify(chartData);\" +\n\"}\";\nreturn ((JavascriptExecutor) driver).executeScript(script);\n}\n/**\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java!\nMake extra sure the indentation is correct.\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain these 7 exact lines in a row:\n```\n* @return the chart data as a string\n* @throws IOException if an error occurs while executing the JavaScript\n*/\npublic static ScriptResult getChartData(Jenkins jenkins, String chartId) throws IOException {\nWebDriver driver = jenkins.getDriver();\nWebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java!\nMake extra sure the indentation is correct.\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain these 7 exact lines in a row:\n```\n\"return JSON.stringify(chartData);\" +\n\"}\";\nreturn ((JavascriptExecutor) driver).executeScript(script);\n}\n/**\n```",
            "span_id": 8049283751758825790
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,8 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +32,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -60,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return scriptResult.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                if (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "                if (result != null) {"
                                },
                                {
                                    "line_no": 58,
                                    "content": "                    return scriptResult.toString();"
                                },
                                {
                                    "line_no": 59,
                                    "content": "                }"
                                }
                            ],
                            "error_texts": [
                                "[58,27] error: cannot find symbol\n",
                                "[58,27] error: cannot find symbol\nsymbol: variable scriptResult\nlocation: class ChartUtil\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 1729129259483130169
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,8 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +32,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -60,9 +57,8 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n-                    return scriptResult.toString();\n+                if (result != null) {\n+                    return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n             }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            return result != null ? result.toString() : null;\n            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                if (result != null) {\n                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "78": {
                            "lines": [
                                {
                                    "line_no": 77,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 78,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 79,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[78,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 15640930430959720346
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,8 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +32,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -60,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            return result != null ? result.toString() : null;\n            return result != null ? result.toString() : null;\n            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                if (result != null) {\n                if (result != null) {\n                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 80,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 81,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[80,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 226796047839271673
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,8 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +32,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -60,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[33,25] error: ';' expected\n",
                                "[33,] error: not a statement\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[34,] error: not a statement\n",
                                "[34,13] error: illegal start of expression\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[35,13] error: illegal start of expression\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,23] error: ';' expected\n",
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,17] error: illegal start of expression\n",
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n",
                                "[61,17] error: illegal start of expression\n"
                            ]
                        },
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 80,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 81,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[80,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 15758616675187243186
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,8 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +32,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -60,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[33,25] error: ';' expected\n",
                                "[33,] error: not a statement\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[34,] error: not a statement\n",
                                "[34,13] error: illegal start of expression\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[35,13] error: illegal start of expression\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,23] error: ';' expected\n",
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,17] error: illegal start of expression\n",
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n",
                                "[61,17] error: illegal start of expression\n"
                            ]
                        },
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 80,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 81,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[80,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 17062883474401359240
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,11 +1,9 @@\n package io.jenkins.plugins.coverage.util;\n \n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -32,8 +30,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -58,8 +55,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[33,25] error: ';' expected\n",
                                "[33,] error: not a statement\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[34,] error: not a statement\n",
                                "[34,13] error: illegal start of expression\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[35,13] error: illegal start of expression\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,23] error: ';' expected\n",
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,17] error: illegal start of expression\n",
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n",
                                "[61,17] error: illegal start of expression\n"
                            ]
                        },
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 80,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 81,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[80,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 4049490711921339788
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,8 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -32,8 +30,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -58,8 +55,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[33,25] error: ';' expected\n",
                                "[33,] error: not a statement\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[34,] error: not a statement\n",
                                "[34,13] error: illegal start of expression\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[35,13] error: illegal start of expression\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,23] error: ';' expected\n",
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,17] error: illegal start of expression\n",
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n",
                                "[61,17] error: illegal start of expression\n"
                            ]
                        },
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 80,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 81,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[80,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 23988627202093159
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,8 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -32,8 +30,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -58,8 +55,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[33,25] error: ';' expected\n",
                                "[33,] error: not a statement\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[34,] error: not a statement\n",
                                "[34,13] error: illegal start of expression\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[35,13] error: illegal start of expression\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,23] error: ';' expected\n",
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,17] error: illegal start of expression\n",
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n",
                                "[61,17] error: illegal start of expression\n"
                            ]
                        },
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 80,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 81,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[80,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 7299639338941377033
        }
    ],
    "read_file": [
        {
            "input": "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java",
            "output": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport com.gargoylesoftware.htmlunit.ScriptResult;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            ScriptResult scriptResult = new ScriptResult(result);\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n                if (scriptResult != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n",
            "error": "",
            "span_id": 6411698972783322312
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}