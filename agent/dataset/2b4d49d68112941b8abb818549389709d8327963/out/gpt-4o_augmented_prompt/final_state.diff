diff --git a/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusterListener.java b/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusterListener.java
index d037623..135ffd2 100644
--- a/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusterListener.java
+++ b/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusterListener.java
@@ -20,10 +20,10 @@ import com.hazelcast.core.EntryListener;
 import com.hazelcast.core.LifecycleEvent;
 import com.hazelcast.core.LifecycleEvent.LifecycleState;
 import com.hazelcast.core.LifecycleListener;
-import com.hazelcast.core.Member;
-import com.hazelcast.core.MemberAttributeEvent;
-import com.hazelcast.core.MembershipEvent;
-import com.hazelcast.core.MembershipListener;
+import com.hazelcast.cluster.Member;
+import com.hazelcast.cluster.MemberAttributeEvent;
+import com.hazelcast.cluster.MembershipEvent;
+import com.hazelcast.cluster.MembershipListener;
 import org.jivesoftware.openfire.XMPPServer;
 import org.jivesoftware.openfire.cluster.ClusterManager;
 import org.jivesoftware.openfire.cluster.ClusterNodeInfo;
@@ -60,6 +60,10 @@ public class ClusterListener implements MembershipListener, LifecycleListener {
     private final Cluster cluster;
     private final Map<NodeID, ClusterNodeInfo> clusterNodesInfo = new ConcurrentHashMap<>();
     
+
+    private final Cluster cluster;
+    private final Map<NodeID, ClusterNodeInfo> clusterNodesInfo = new ConcurrentHashMap<>();
+
     /**
      * Flag that indicates if the listener has done all clean up work when noticed that the
      * cluster has been stopped. This will force Openfire to wait until all clean
@@ -252,6 +256,7 @@ public class ClusterListener implements MembershipListener, LifecycleListener {
         NodeID.deleteInstance(nodeID.toByteArray());
         clusterNodesInfo.remove(nodeID);
     }
+
     
     @SuppressWarnings("WeakerAccess")
     public List<ClusterNodeInfo> getClusterNodesInfo() {
diff --git a/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusteredCache.java b/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusteredCache.java
index d72e01a..0b21d2c 100644
--- a/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusteredCache.java
+++ b/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusteredCache.java
@@ -17,10 +17,10 @@ package org.jivesoftware.openfire.plugin.util.cache;
 
 import com.hazelcast.core.EntryEvent;
 import com.hazelcast.core.EntryListener;
-import com.hazelcast.core.IMap;
-import com.hazelcast.core.MapEvent;
+import com.hazelcast.map.IMap;
+import com.hazelcast.map.MapEvent;
 import com.hazelcast.map.listener.MapListener;
-import com.hazelcast.monitor.LocalMapStats;
+import com.hazelcast.map.LocalMapStats;
 import org.jivesoftware.openfire.XMPPServer;
 import org.jivesoftware.openfire.cluster.ClusteredCacheEntryListener;
 import org.jivesoftware.openfire.cluster.NodeID;
diff --git a/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusteredCacheFactory.java b/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusteredCacheFactory.java
index 2bc522a..cc3b4a3 100644
--- a/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusteredCacheFactory.java
+++ b/src/java/org/jivesoftware/openfire/plugin/util/cache/ClusteredCacheFactory.java
@@ -19,15 +19,12 @@ package org.jivesoftware.openfire.plugin.util.cache;
 import com.hazelcast.config.ClasspathXmlConfig;
 import com.hazelcast.config.Config;
 import com.hazelcast.config.MapConfig;
-import com.hazelcast.config.MaxSizeConfig;
 import com.hazelcast.config.MemberAttributeConfig;
 import com.hazelcast.config.MemcacheProtocolConfig;
 import com.hazelcast.config.NetworkConfig;
 import com.hazelcast.config.RestApiConfig;
-import com.hazelcast.core.Cluster;
 import com.hazelcast.core.Hazelcast;
 import com.hazelcast.core.HazelcastInstance;
-import com.hazelcast.core.Member;
 import org.jivesoftware.openfire.JMXManager;
 import org.jivesoftware.openfire.XMPPServer;
 import org.jivesoftware.openfire.cluster.ClusterEventListener;
@@ -146,7 +143,6 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
     private static Map<String, Map<String, long[]>> cacheStats;
 
     private static HazelcastInstance hazelcast = null;
-    private static Cluster cluster = null;
     private ClusterListener clusterListener;
     private String lifecycleListener;
     private String membershipListener;
@@ -200,7 +196,7 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
                     config.setProperty("hazelcast.jmx.detailed", "true");
                 }
                 hazelcast = Hazelcast.newHazelcastInstance(config);
-                cluster = hazelcast.getCluster();
+                Cluster cluster = hazelcast.getCluster();
                 state = State.started;
                 // CacheFactory is now using clustered caches. We can add our listeners.
                 clusterListener = new ClusterListener(cluster);
@@ -327,8 +323,9 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
 
     @Override
     public byte[] getSeniorClusterMemberID() {
+        Cluster cluster = hazelcast.getCluster();
         if (cluster != null && !cluster.getMembers().isEmpty()) {
-            final Member oldest = cluster.getMembers().iterator().next();
+            final com.hazelcast.cluster.Member oldest = cluster.getMembers().iterator().next();
             return getNodeID(oldest).toByteArray();
         } else {
             return null;
@@ -337,6 +334,7 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
 
     @Override
     public byte[] getClusterMemberID() {
+        Cluster cluster = hazelcast.getCluster();
         if (cluster != null) {
             return getNodeID(cluster.getLocalMember()).toByteArray();
         } else {
@@ -353,6 +351,7 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
      */
     @Override
     public long getClusterTime() {
+        Cluster cluster = hazelcast.getCluster();
         return cluster == null ? System.currentTimeMillis() : cluster.getClusterTime();
     }
 
@@ -367,9 +366,9 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
         if (cluster == null) {
             return;
         }
-        final Set<Member> members = new HashSet<>();
-        final Member current = cluster.getLocalMember();
-        for (final Member member : cluster.getMembers()) {
+        final Set<com.hazelcast.cluster.Member> members = new HashSet<>();
+        final com.hazelcast.cluster.Member current = cluster.getLocalMember();
+        for (final com.hazelcast.cluster.Member member : cluster.getMembers()) {
             if (!member.getUuid().equals(current.getUuid())) {
                 members.add(member);
             }
@@ -396,7 +395,7 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
         if (cluster == null) {
             return;
         }
-        final Member member = getMember(nodeID);
+        final com.hazelcast.cluster.Member member = getMember(nodeID);
         // Check that the requested member was found
         if (member != null) {
             // Asynchronously execute the task on the target member
@@ -420,9 +419,9 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
         if (cluster == null) {
             return Collections.emptyList();
         }
-        final Set<Member> members = new HashSet<>();
-        final Member current = cluster.getLocalMember();
-        for (final Member member : cluster.getMembers()) {
+        final Set<com.hazelcast.cluster.Member> members = new HashSet<>();
+        final com.hazelcast.cluster.Member current = cluster.getLocalMember();
+        for (final com.hazelcast.cluster.Member member : cluster.getMembers()) {
             if (includeLocalMember || (!member.getUuid().equals(current.getUuid()))) {
                 members.add(member);
             }
@@ -461,7 +460,7 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
         if (cluster == null) {
             return null;
         }
-        final Member member = getMember(nodeID);
+        final com.hazelcast.cluster.Member member = getMember(nodeID);
         T result = null;
         // Check that the requested member was found
         if (member != null) {
@@ -491,7 +490,7 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
             return null;
         }
         ClusterNodeInfo result = null;
-        final Member member = getMember(nodeID);
+        final com.hazelcast.cluster.Member member = getMember(nodeID);
         if (member != null) {
             result = new HazelcastClusterNodeInfo(member, cluster.getClusterTime());
         }
@@ -500,7 +499,7 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
 
     private Member getMember(final byte[] nodeID) {
         final NodeID memberToFind = NodeID.getInstance(nodeID);
-        for (final Member member : cluster.getMembers()) {
+        for (final com.hazelcast.cluster.Member member : cluster.getMembers()) {
             if (memberToFind.equals(getNodeID(member))) {
                 return member;
             }
@@ -653,7 +652,7 @@ public class ClusteredCacheFactory implements CacheFactoryStrategy {
     }
 
     public static NodeID getNodeID(final Member member) {
-        return NodeID.getInstance(member.getStringAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE).getBytes(StandardCharsets.UTF_8));
+        return NodeID.getInstance(member.getAttribute(HazelcastClusterNodeInfo.NODE_ID_ATTRIBUTE).getBytes(StandardCharsets.UTF_8));
     }
 
     static void fireLeftClusterAndWaitToComplete(final Duration timeout) {