================================ System Message ================================

Act as an expert Java software developer.
The program has issues after a version upgrade of a dependency.
Try using minimal changes to the code to fix the issues. 
Do not explain your actions or ask questions, just provide diffs that always adhere to the rules.
When you think you are done, reply with the diff that fixes the issues, after that a final verification step will happen and the conversation will be ended if it was successful. If not you get the error back.

# File editing rules:
Return edits similar to unified diffs that `diff -U0` would produce.
The diff has to be in a markdown code block, like this: ```diff ```.

Make sure you include the first 2 lines with the file paths.
Don't include timestamps with the file paths.

Start each hunk of changes with a `@@ ... @@` line.
Don't include line numbers like `diff -U0` does.
The user's patch tool doesn't need them.

The user's patch tool needs CORRECT patches that apply cleanly against the current contents of the file!
Think carefully and make sure you include and mark all lines that need to be removed or changed as `-` lines.
Make sure you mark all new or modified lines with `+`.
Don't leave out any lines or the diff patch won't apply correctly.
Dont add in new comments or change existing comments.
Make sure the diff is minimal and only includes the changes needed to fix the issue plus at least one context line so the tool can apply the diff correctly.

Indentation matters in the diffs!

Start a new hunk for each section of the file that needs changes.
Dont include unnescessary context, but include at least one line of it.
If no context is included, the tool will try to apply the changes at the end of the line.

Only output hunks that specify changes with `+` or `-` lines.
Skip any hunks that are entirely unchanging ` ` lines.

Output hunks in whatever order makes the most sense.
Hunks don't need to be in any particular order.

When editing a function, method, loop, etc use a hunk to replace the *entire* code block.
Delete the entire existing version with `-` lines and then add a new, updated version with `+` lines.
This will help you generate correct code and correct diffs.

To make a new file, show a diff from `--- /dev/null` to `+++ path/to/new/file.ext`.


================================ Human Message =================================


Updated Dependency Details: org.apache.xmlgraphics:fop 1.0 -> 2.2

Initial Error: [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.10.1:compile (default-compile) on project billy-gin: Compilation failure
[ERROR] billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java:[115,43] no suitable method found for newInstance(no arguments)
[ERROR]     method org.apache.fop.apps.FopFactory.newInstance(org.apache.fop.apps.FopFactoryConfig) is not applicable
[ERROR]       (actual and formal argument lists differ in length)
[ERROR]     method org.apache.fop.apps.FopFactory.newInstance(java.io.File) is not applicable
[ERROR]       (actual and formal argument lists differ in length)
[ERROR]     method org.apache.fop.apps.FopFactory.newInstance(java.net.URI) is not applicable
[ERROR]       (actual and formal argument lists differ in length)
[ERROR]     method org.apache.fop.apps.FopFactory.newInstance(java.net.URI,java.io.InputStream) is not applicable
[ERROR]       (actual and formal argument lists differ in length)
[ERROR] -> [Help 1]

Revapi/japicmp API Changes, which describe changes in the APIs used by this project: {"japicmpResult": {"newInstance": ["METHOD_REMOVED", "METHOD_ADDED_TO_PUBLIC_CLASS"]}, "elementLines": {"newInstance": "[ERROR] /billy/billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java:[115,43] no suitable method found for newInstance(no arguments)"}, "revapiResult": {"newInstance": ["java.method.exception.checkedAdded", "java.method.parameterTypeChanged", "java.method.numberOfParametersChanged"]}, "allPotentialBreakingElements": ["newInstance()"], "elementPatterns": {"newInstance": "no suitable method found for"}, "project": "billy"}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_l5Yo3PY5BGAn6sNf96GsqXtH)
 Call ID: call_l5Yo3PY5BGAn6sNf96GsqXtH
  Args:
    file_path: billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java

================================= Tool Message =================================
Name: read_file

/*
 * Copyright (C) 2017 Premium Minds.
 *
 * This file is part of billy GIN.
 *
 * billy GIN is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * billy GIN is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with billy GIN. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.billy.gin.services.impl.pdf;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.premiumminds.billy.gin.services.exceptions.ExportServiceException;
import com.premiumminds.billy.gin.services.export.ParamsTree;
import com.premiumminds.billy.gin.services.export.ParamsTree.Node;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringReader;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.EnumMap;
import java.util.Optional;
import java.util.UUID;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.stream.StreamSource;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.fop.apps.FOPException;
import org.apache.fop.apps.FOUserAgent;
import org.apache.fop.apps.Fop;
import org.apache.fop.apps.FopFactory;
import org.apache.xmlgraphics.util.MimeConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class FOPPDFTransformer {

    private static final Logger log = LoggerFactory.getLogger(FOPPDFTransformer.class);
    private static final String QR_CODE_PATH = "qrCodePath";
    private static final String QR_CODE = "qrCode";

    private final TransformerFactory transformerFactory;

    public FOPPDFTransformer(TransformerFactory transformerFactory) {
        this.transformerFactory = transformerFactory;
    }

    public FOPPDFTransformer() {
        this(TransformerFactory.newInstance());
    }

    private Source mapParamsToSource(ParamsTree<String, String> documentParams) {
        return new StreamSource(new StringReader(this.generateXML(documentParams)));
    }

    private String generateXML(ParamsTree<String, String> tree) {
        StringBuilder strBuilder = new StringBuilder();
        strBuilder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");

        this.writeXML(strBuilder, tree.getRoot());

        return strBuilder.toString();
    }

    private void writeXML(StringBuilder strBuilder, Node<String, String> node) {
        strBuilder.append("<").append(node.getKey());
        if (null == node.getValue() && !node.hasChildren()) {
            strBuilder.append("/>");
        } else {
            strBuilder.append("> ");
            if (null != node.getValue()) {
                strBuilder.append(StringEscapeUtils.escapeXml(node.getValue()));
            }

            for (Node<String, String> child : node.getChildren()) {
                this.writeXML(strBuilder, child);
            }
            strBuilder.append("</").append(node.getKey()).append(">");
        }
    }

    protected void transformToStream(InputStream templateStream, ParamsTree<String, String> documentParams,
            OutputStream outStream) throws ExportServiceException {

        // creation of transform source
        StreamSource transformSource = new StreamSource(templateStream);

        // create an instance of fop factory
        FopFactory fopFactory = FopFactory.newInstance();
        // a user agent is needed for transformation
        FOUserAgent foUserAgent = fopFactory.newFOUserAgent();
        // to store output

        Optional<Node<String, String>> qrCodeString = documentParams
            .getRoot()
            .getChildren()
            .stream()
            .filter(stringStringNode -> stringStringNode.getKey().equals(QR_CODE))
            .findAny();

        Path qr = null;
        try {
            if(qrCodeString.isPresent() && !qrCodeString.get().getValue().isEmpty()){
                qr = createQR(qrCodeString.get().getValue());
                documentParams.getRoot().addChild(QR_CODE_PATH, qr.toString());
            }
            // the XML file from which we take the name
            Source source = this.mapParamsToSource(documentParams);

            Transformer xslfoTransformer = this.getTransformer(transformSource);

            // Construct fop with desired output format
            Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, foUserAgent, outStream);

            // Resulting SAX events (the generated FO)
            // must be piped through to FOP
            Result res = new SAXResult(fop.getDefaultHandler());

            // Start XSLT transformation and FOP processing
            // everything will happen here..
            xslfoTransformer.transform(source, res);
        } catch (FOPException e) {
            throw new ExportServiceException("Error using FOP to open the template", e);
        } catch (TransformerException e) {
            throw new ExportServiceException("Error generating pdf from template and data source", e);
        } catch (IOException | WriterException e) {
            throw new ExportServiceException("Error generating qrCode", e);
        } finally {
            deleteTempFileIfExists(qr);
        }
    }

    public File toFile(URI fileURI, InputStream templateStream, ParamsTree<String, String> documentParams)
            throws ExportServiceException {
        // if you want to save PDF file use the following code
        File pdffile = new File(fileURI);
        try (OutputStream out = new java.io.BufferedOutputStream(new FileOutputStream(pdffile))) {
            this.transformToStream(templateStream, documentParams, out);
            return pdffile;
        } catch (FileNotFoundException e) {
            throw new ExportServiceException("Could not create pdf file", e);
        } catch (IOException e) {
            throw new ExportServiceException("IO error while saving the pdf file", e);
        }
    }

    private Transformer getTransformer(StreamSource streamSource) throws TransformerConfigurationException {
        return this.transformerFactory.newTransformer(streamSource);
    }

    private Path createQR(String data)
        throws WriterException, IOException
    {
        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        EnumMap<EncodeHintType, String> hints = new EnumMap<> (EncodeHintType.class);
        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M.name());
        hints.put(EncodeHintType.MARGIN, String.valueOf(4));
        hints.put(EncodeHintType.QR_VERSION, String.valueOf(9));
        BitMatrix bitMatrix = qrCodeWriter.encode(
            new String(data.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8),
            BarcodeFormat.QR_CODE,
            350, 350,hints);

        final Path file = Files.createTempFile(UUID.randomUUID().toString().replace("-", ""), ".png");
        MatrixToImageWriter.writeToPath(
            bitMatrix,
            "png",
            file);

        return file;
    }

    private void deleteTempFileIfExists(Path path) {
        if(path != null) {
            try {
                Files.deleteIfExists(path);
            } catch (IOException e) {
                log.error("Could not delete file {}", path, e);
            }
        }
    }

}


================================== Ai Message ==================================
Tool Calls:
  read_file_lines (call_sWfcz9gdXxCRvfzI8zrN7LpA)
 Call ID: call_sWfcz9gdXxCRvfzI8zrN7LpA
  Args:
    file_path: billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java
    lines: [110, 115]
  read_file_lines (call_hY884j0rCdbzZEzv5CAbxdKD)
 Call ID: call_hY884j0rCdbzZEzv5CAbxdKD
  Args:
    file_path: billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java
    lines: [100, 105]

================================= Tool Message =================================
Name: read_file_lines

{"110": "", "115": "        FopFactory fopFactory = FopFactory.newInstance();"}

================================= Tool Message =================================
Name: read_file_lines

{"100": "", "105": "        }"}

================================== Ai Message ==================================

```diff
--- billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java
+++ billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java
@@ -110,1 +110,1 @@
-        FopFactory fopFactory = FopFactory.newInstance();
+        FopFactory fopFactory = FopFactory.newInstance(new File(".").toURI());
```
Tool Calls:
  compile_maven_stateful (LYN6D5KRQ)
 Call ID: LYN6D5KRQ
  Args:
    diff: ```diff
--- billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java
+++ billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java
@@ -110,1 +110,1 @@
-        FopFactory fopFactory = FopFactory.newInstance();
+        FopFactory fopFactory = FopFactory.newInstance(new File(".").toURI());
```

================================= Tool Message =================================
Name: compile_maven_stateful

{"compilation_has_succeeded": true, "test_has_succeeded": true, "error_text": "", "updated_files": {"billy-gin/src/main/java/com/premiumminds/billy/gin/services/impl/pdf/FOPPDFTransformer.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy GIN.\n *\n * billy GIN is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy GIN is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy GIN. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.gin.services.impl.pdf;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.WriterException;\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\nimport com.google.zxing.common.BitMatrix;\nimport com.google.zxing.qrcode.QRCodeWriter;\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\nimport com.premiumminds.billy.gin.services.exceptions.ExportServiceException;\nimport com.premiumminds.billy.gin.services.export.ParamsTree;\nimport com.premiumminds.billy.gin.services.export.ParamsTree.Node;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.StringReader;\nimport java.net.URI;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.EnumMap;\nimport java.util.Optional;\nimport java.util.UUID;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.sax.SAXResult;\nimport javax.xml.transform.stream.StreamSource;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.apps.FOUserAgent;\nimport org.apache.fop.apps.Fop;\nimport org.apache.fop.apps.FopFactory;\nimport org.apache.xmlgraphics.util.MimeConstants;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic abstract class FOPPDFTransformer {\n\n    private static final Logger log = LoggerFactory.getLogger(FOPPDFTransformer.class);\n    private static final String QR_CODE_PATH = \"qrCodePath\";\n    private static final String QR_CODE = \"qrCode\";\n\n    private final TransformerFactory transformerFactory;\n\n    public FOPPDFTransformer(TransformerFactory transformerFactory) {\n        this.transformerFactory = transformerFactory;\n    }\n\n    public FOPPDFTransformer() {\n        this(TransformerFactory.newInstance());\n    }\n\n    private Source mapParamsToSource(ParamsTree<String, String> documentParams) {\n        return new StreamSource(new StringReader(this.generateXML(documentParams)));\n    }\n\n    private String generateXML(ParamsTree<String, String> tree) {\n        StringBuilder strBuilder = new StringBuilder();\n        strBuilder.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\");\n\n        this.writeXML(strBuilder, tree.getRoot());\n\n        return strBuilder.toString();\n    }\n\n    private void writeXML(StringBuilder strBuilder, Node<String, String> node) {\n        strBuilder.append(\"<\").append(node.getKey());\n        if (null == node.getValue() && !node.hasChildren()) {\n            strBuilder.append(\"/>\");\n        } else {\n            strBuilder.append(\"> \");\n            if (null != node.getValue()) {\n                strBuilder.append(StringEscapeUtils.escapeXml(node.getValue()));\n            }\n\n            for (Node<String, String> child : node.getChildren()) {\n                this.writeXML(strBuilder, child);\n            }\n            strBuilder.append(\"</\").append(node.getKey()).append(\">\");\n        }\n    }\n\n    protected void transformToStream(InputStream templateStream, ParamsTree<String, String> documentParams,\n            OutputStream outStream) throws ExportServiceException {\n\n        // creation of transform source\n        StreamSource transformSource = new StreamSource(templateStream);\n\n        // create an instance of fop factory\n        FopFactory fopFactory = FopFactory.newInstance(new File(\".\").toURI());\n        // a user agent is needed for transformation\n        FOUserAgent foUserAgent = fopFactory.newFOUserAgent();\n        // to store output\n\n        Optional<Node<String, String>> qrCodeString = documentParams\n            .getRoot()\n            .getChildren()\n            .stream()\n            .filter(stringStringNode -> stringStringNode.getKey().equals(QR_CODE))\n            .findAny();\n\n        Path qr = null;\n        try {\n            if(qrCodeString.isPresent() && !qrCodeString.get().getValue().isEmpty()){\n                qr = createQR(qrCodeString.get().getValue());\n                documentParams.getRoot().addChild(QR_CODE_PATH, qr.toString());\n            }\n            // the XML file from which we take the name\n            Source source = this.mapParamsToSource(documentParams);\n\n            Transformer xslfoTransformer = this.getTransformer(transformSource);\n\n            // Construct fop with desired output format\n            Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, foUserAgent, outStream);\n\n            // Resulting SAX events (the generated FO)\n            // must be piped through to FOP\n            Result res = new SAXResult(fop.getDefaultHandler());\n\n            // Start XSLT transformation and FOP processing\n            // everything will happen here..\n            xslfoTransformer.transform(source, res);\n        } catch (FOPException e) {\n            throw new ExportServiceException(\"Error using FOP to open the template\", e);\n        } catch (TransformerException e) {\n            throw new ExportServiceException(\"Error generating pdf from template and data source\", e);\n        } catch (IOException | WriterException e) {\n            throw new ExportServiceException(\"Error generating qrCode\", e);\n        } finally {\n            deleteTempFileIfExists(qr);\n        }\n    }\n\n    public File toFile(URI fileURI, InputStream templateStream, ParamsTree<String, String> documentParams)\n            throws ExportServiceException {\n        // if you want to save PDF file use the following code\n        File pdffile = new File(fileURI);\n        try (OutputStream out = new java.io.BufferedOutputStream(new FileOutputStream(pdffile))) {\n            this.transformToStream(templateStream, documentParams, out);\n            return pdffile;\n        } catch (FileNotFoundException e) {\n            throw new ExportServiceException(\"Could not create pdf file\", e);\n        } catch (IOException e) {\n            throw new ExportServiceException(\"IO error while saving the pdf file\", e);\n        }\n    }\n\n    private Transformer getTransformer(StreamSource streamSource) throws TransformerConfigurationException {\n        return this.transformerFactory.newTransformer(streamSource);\n    }\n\n    private Path createQR(String data)\n        throws WriterException, IOException\n    {\n        QRCodeWriter qrCodeWriter = new QRCodeWriter();\n        EnumMap<EncodeHintType, String> hints = new EnumMap<> (EncodeHintType.class);\n        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M.name());\n        hints.put(EncodeHintType.MARGIN, String.valueOf(4));\n        hints.put(EncodeHintType.QR_VERSION, String.valueOf(9));\n        BitMatrix bitMatrix = qrCodeWriter.encode(\n            new String(data.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8),\n            BarcodeFormat.QR_CODE,\n            350, 350,hints);\n\n        final Path file = Files.createTempFile(UUID.randomUUID().toString().replace(\"-\", \"\"), \".png\");\n        MatrixToImageWriter.writeToPath(\n            bitMatrix,\n            \"png\",\n            file);\n\n        return file;\n    }\n\n    private void deleteTempFileIfExists(Path path) {\n        if(path != null) {\n            try {\n                Files.deleteIfExists(path);\n            } catch (IOException e) {\n                log.error(\"Could not delete file {}\", path, e);\n            }\n        }\n    }\n\n}\n"}, "compile_error_details": {}}