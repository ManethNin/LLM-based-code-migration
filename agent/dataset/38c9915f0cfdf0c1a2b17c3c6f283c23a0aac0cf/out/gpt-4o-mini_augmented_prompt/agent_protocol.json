{
    "validate_diffs": [
        {
            "input": "```diff\n--- src/main/java/io/zold/api/Copies.java\n+++ src/main/java/io/zold/api/Copies.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.collection.CollectionOf;\n+import org.cactoos.collection.ListOf;\n\n--- src/main/java/io/zold/api/RtScore.java\n+++ src/main/java/io/zold/api/RtScore.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n--- src/main/java/io/zold/api/Remote.java\n+++ src/main/java/io/zold/api/Remote.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.RandomText;\n+import org.cactoos.text.RandomString;\n\n--- src/main/java/io/zold/api/Wallet.java\n+++ src/main/java/io/zold/api/Wallet.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.collection.Filtered;\n+import org.cactoos.collection.FilteredCollection;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.CheckedScalar;\n+import org.cactoos.scalar.Checked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.UncheckedScalar;\n+import org.cactoos.scalar.Unchecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.SplitText;\n+import org.cactoos.text.SplitString;\n\n--- src/main/java/io/zold/api/RtNetwork.java\n+++ src/main/java/io/zold/api/RtNetwork.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n--- src/main/java/io/zold/api/TaxBeneficiaries.java\n+++ src/main/java/io/zold/api/TaxBeneficiaries.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n--- src/main/java/io/zold/api/WalletsIn.java\n+++ src/main/java/io/zold/api/WalletsIn.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.SolidScalar;\n+import org.cactoos.scalar.Solid;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.JoinedText;\n+import org.cactoos.text.JoinedString;\n\n--- src/main/java/io/zold/api/RtTransaction.java\n+++ src/main/java/io/zold/api/RtTransaction.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.StickyScalar;\n+import org.cactoos.scalar.Sticky;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.UncheckedScalar;\n+import org.cactoos.scalar.Unchecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.SplitText;\n+import org.cactoos.text.SplitString;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.TrimmedText;\n+import org.cactoos.text.TrimmedString;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Copies.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Copies.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Copies.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.collection.CollectionOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtScore.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtScore.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtScore.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Remote.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Remote.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Remote.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.RandomText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.collection.Filtered;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.CheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtNetwork.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtNetwork.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtNetwork.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/TaxBeneficiaries.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.SolidScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.JoinedText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.StickyScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.TrimmedText;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Copies.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Copies.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Copies.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.collection.CollectionOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtScore.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtScore.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtScore.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Remote.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Remote.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Remote.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.RandomText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.collection.Filtered;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.CheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtNetwork.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtNetwork.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtNetwork.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/TaxBeneficiaries.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.SolidScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.JoinedText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.StickyScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.TrimmedText;\n```\n",
            "span_id": 11823372238285228966
        },
        {
            "input": "```diff\n--- src/main/java/io/zold/api/Copies.java\n+++ src/main/java/io/zold/api/Copies.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.collection.CollectionOf;\n+import org.cactoos.collection.ListOf;\n\n--- src/main/java/io/zold/api/RtScore.java\n+++ src/main/java/io/zold/api/RtScore.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n--- src/main/java/io/zold/api/Remote.java\n+++ src/main/java/io/zold/api/Remote.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.RandomText;\n+import org.cactoos.text.RandomString;\n\n--- src/main/java/io/zold/api/Wallet.java\n+++ src/main/java/io/zold/api/Wallet.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.collection.Filtered;\n+import org.cactoos.collection.FilteredCollection;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.CheckedScalar;\n+import org.cactoos.scalar.Checked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.UncheckedScalar;\n+import org.cactoos.scalar.Unchecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.SplitText;\n+import org.cactoos.text.SplitString;\n\n--- src/main/java/io/zold/api/RtNetwork.java\n+++ src/main/java/io/zold/api/RtNetwork.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n--- src/main/java/io/zold/api/TaxBeneficiaries.java\n+++ src/main/java/io/zold/api/TaxBeneficiaries.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n--- src/main/java/io/zold/api/WalletsIn.java\n+++ src/main/java/io/zold/api/WalletsIn.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.SolidScalar;\n+import org.cactoos.scalar.Solid;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.JoinedText;\n+import org.cactoos.text.JoinedString;\n\n--- src/main/java/io/zold/api/RtTransaction.java\n+++ src/main/java/io/zold/api/RtTransaction.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.StickyScalar;\n+import org.cactoos.scalar.Sticky;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.UncheckedScalar;\n+import org.cactoos.scalar.Unchecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.SplitText;\n+import org.cactoos.text.SplitString;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.TrimmedText;\n+import org.cactoos.text.TrimmedString;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Copies.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Copies.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Copies.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.collection.CollectionOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtScore.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtScore.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtScore.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Remote.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Remote.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Remote.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.RandomText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.collection.Filtered;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.CheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtNetwork.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtNetwork.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtNetwork.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/TaxBeneficiaries.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.SolidScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.JoinedText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.StickyScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.TrimmedText;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Copies.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Copies.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Copies.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.collection.CollectionOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtScore.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtScore.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtScore.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Remote.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Remote.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Remote.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.RandomText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.collection.Filtered;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.CheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/Wallet.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtNetwork.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtNetwork.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtNetwork.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/TaxBeneficiaries.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.SolidScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.JoinedText;\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.StickyScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.TrimmedText;\n```\n",
            "span_id": 7664881385044020951
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/io/zold/api/Copies.java\n+++ src/main/java/io/zold/api/Copies.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.collection.CollectionOf;\n+import org.cactoos.collection.ListOf;\n\n--- src/main/java/io/zold/api/RtScore.java\n+++ src/main/java/io/zold/api/RtScore.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n--- src/main/java/io/zold/api/Remote.java\n+++ src/main/java/io/zold/api/Remote.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.RandomText;\n+import org.cactoos.text.RandomString;\n\n--- src/main/java/io/zold/api/Wallet.java\n+++ src/main/java/io/zold/api/Wallet.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.collection.Filtered;\n+import org.cactoos.collection.FilteredCollection;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.CheckedScalar;\n+import org.cactoos.scalar.Checked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.UncheckedScalar;\n+import org.cactoos.scalar.Unchecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.SplitText;\n+import org.cactoos.text.SplitString;\n\n--- src/main/java/io/zold/api/RtNetwork.java\n+++ src/main/java/io/zold/api/RtNetwork.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n--- src/main/java/io/zold/api/TaxBeneficiaries.java\n+++ src/main/java/io/zold/api/TaxBeneficiaries.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n--- src/main/java/io/zold/api/WalletsIn.java\n+++ src/main/java/io/zold/api/WalletsIn.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.SolidScalar;\n+import org.cactoos.scalar.Solid;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.JoinedText;\n+import org.cactoos.text.JoinedString;\n\n--- src/main/java/io/zold/api/RtTransaction.java\n+++ src/main/java/io/zold/api/RtTransaction.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.StickyScalar;\n+import org.cactoos.scalar.Sticky;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.UncheckedScalar;\n+import org.cactoos.scalar.Unchecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.SplitText;\n+import org.cactoos.text.SplitString;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.TrimmedText;\n+import org.cactoos.text.TrimmedString;\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO]\n[INFO] --------------------------< io.zold:java-api >--------------------------\n[INFO] Building java-api 1.0-SNAPSHOT\n[INFO] from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ java-api ---\n[INFO]\n[INFO] --- enforcer:3.3.0:enforce (enforce-maven) @ java-api ---\n[INFO] Rule 0: org.apache.maven.enforcer.rules.version.RequireMavenVersion passed\n[INFO]\n[INFO] --- buildnumber:3.1.0:create (jcabi-build-number) @ java-api ---\n[INFO] ShortRevision tag detected. The value is '7'.\n[INFO] Executing: /bin/sh -c cd '/mnt/repo' && 'git' 'rev-parse' '--verify' '--short=7' 'HEAD'\n[INFO] Working directory: /mnt/repo\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 28.721 s\n[INFO] Finished at: 2024-08-01T01:26:54Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.codehaus.mojo:buildnumber-maven-plugin:3.1.0:create (jcabi-build-number) on project java-api: Cannot get the revision information from the scm repository :\n[ERROR] Exception while executing SCM command. Error while executing command. Error while executing process. Cannot run program \"git\" (in directory \"/mnt/repo\"): error=2, No such file or directory\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
                "updated_files": {
                    "src/main/java/io/zold/api/Copies.java": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport io.zold.api.Copies.Copy;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.cactoos.collection.ListOf;\nimport org.cactoos.iterable.IterableEnvelope;\nimport org.cactoos.iterable.IterableOf;\nimport org.cactoos.iterable.Joined;\nimport org.cactoos.iterable.Mapped;\n\n/**\n * Multiple copies of a Wallet.\n * @since 1.0\n */\npublic final class Copies extends IterableEnvelope<Copy> {\n\n    /**\n     * Ctor.\n     * @param id Id of the wallet to pull.\n     * @param remotes Remote nodes.\n     */\n    Copies(final long id, final Iterable<Remote> remotes) {\n        super(() -> copies(id, remotes));\n    }\n\n    /**\n     * Builds copies from remotes.\n     * @param id Wallet's id\n     * @param remotes List of remotes\n     * @return Iterable Iterable of Copy\n     * @throws IOException If fails\n     */\n    @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\")\n    private static Iterable<Copy> copies(final long id,\n        final Iterable<Remote> remotes) throws IOException {\n        final List<Copy> copies = new ArrayList<>(10);\n        for (final Remote remote : remotes) {\n            final Wallet wallet = remote.pull(id);\n            boolean updated = false;\n            for (int idx = 0; idx < copies.size(); idx += 1) {\n                final Copy copy = copies.get(idx);\n                if (Copies.equalWallets(copies.get(idx).wallet(), wallet)) {\n                    copies.set(idx, copy.with(remote));\n                    updated = true;\n                }\n            }\n            if (!updated) {\n                copies.add(new Copy(wallet, remote));\n            }\n        }\n        return new IterableOf<>(copies);\n    }\n\n    /**\n     * Checks if content of two wallets is equal.\n     * @param first First wallet\n     * @param second Second wallet\n     * @return Boolean Boolean\n     * @throws IOException If fails\n     * @todo #56:30min Compare the entire content of two wallets. In addition\n     *  to id, compare RSA key and all transactions one by one. Entire content\n     *  of each transaction should be compared.\n     */\n    private static boolean equalWallets(final Wallet first,\n        final Wallet second) throws IOException {\n        return first.id() == second.id() && new CollectionOf<>(\n            first.ledger()\n        ).size() == new CollectionOf<>(second.ledger()).size();\n    }\n\n    /**\n     * One copy of a {@link Wallet}.\n     * @since 1.0\n     */\n    static final class Copy implements Comparable<Copy> {\n\n        /**\n         * The wallet.\n         */\n        private final Wallet wlt;\n\n        /**\n         * The remote nodes where the wallet was found.\n         */\n        private final Iterable<Remote> remotes;\n\n        /**\n         * Ctor.\n         * @param wallet The wallet.\n         * @param remotes The remote nodes where the wallet was found.\n         */\n        Copy(final Wallet wallet, final Remote... remotes) {\n            this(wallet, new IterableOf<>(remotes));\n        }\n\n        /**\n         * Ctor.\n         * @param wallet The wallet.\n         * @param remotes The remote nodes where the wallet was found.\n         */\n        Copy(final Wallet wallet, final Iterable<Remote> remotes) {\n            this.wlt = wallet;\n            this.remotes = remotes;\n        }\n\n        /**\n         * Creates new Copy instance with additional remote.\n         * @param remote Remote\n         * @return Copy Copy\n         */\n        public Copy with(final Remote remote) {\n            return new Copy(this.wallet(), new Joined<>(remote, this.remotes));\n        }\n\n        /**\n         * The wallet.\n         * @return The wallet.\n         */\n        public Wallet wallet() {\n            return this.wlt;\n        }\n\n        /**\n         * The summary of the score of all the remote nodes.\n         * @return The score.\n         */\n        public Score score() {\n            return new Score.Summed(new Mapped<>(Remote::score, this.remotes));\n        }\n\n        @Override\n        public int compareTo(final Copy other) {\n            return this.score().compareTo(other.score());\n        }\n    }\n}\n",
                    "src/main/java/io/zold/api/RtScore.java": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport org.cactoos.Text;\nimport org.cactoos.iterable.LengthOfText;\n\n/**\n * Default implementation for {@link Score}.\n *\n * @since 1.0\n */\npublic final class RtScore implements Score {\n\n    /**\n     * The suffixes.\n     */\n    private final Iterable<Text> sfxs;\n\n    /**\n     * Ctor.\n     *\n     * @param sfxs The suffixes.\n     */\n    RtScore(final Iterable<Text> sfxs) {\n        this.sfxs = sfxs;\n    }\n\n    @Override\n    public int compareTo(final Score other) {\n        return new LengthOf(other.suffixes()).intValue()\n            - new LengthOf(this.sfxs).intValue();\n    }\n\n    @Override\n    public Iterable<Text> suffixes() {\n        return this.sfxs;\n    }\n}\n",
                    "src/main/java/io/zold/api/Remote.java": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npackage io.zold.api;\n\nimport org.cactoos.iterable.Repeated;\nimport org.cactoos.text.RandomString;\n\n/**\n * Remote node.\n *\n * @since 0.1\n */\npublic interface Remote {\n    /**\n     * This remote node's score.\n     * @return The score\n     */\n    Score score();\n\n    /**\n     * Pushes a {@link Wallet} to this remote.\n     * @param wallet Wallet to be pushed to this remote\n     */\n    void push(Wallet wallet);\n\n    /**\n     * Pull a wallet from this remote.\n     * @param id The wallet's {@link Wallet#id() id}\n     * @return The wallet\n     */\n    Wallet pull(long id);\n\n    /**\n     * A Fake {@link Remote}.\n     */\n    final class Fake implements Remote {\n\n        /**\n         * The remote's score.\n         */\n        private final Score score;\n\n        /**\n         * Ctor.\n         * @param val The remote's score value\n         */\n        public Fake(final int val) {\n            this(new RtScore(\n                new Repeated<>(val, new RandomText())\n            ));\n        }\n\n        /**\n         * Ctor.\n         * @param score The remote's score\n         */\n        public Fake(final Score score) {\n            this.score = score;\n        }\n\n        @Override\n        public Score score() {\n            return this.score;\n        }\n\n        @Override\n        public void push(final Wallet wallet) {\n            // nothing\n        }\n\n        @Override\n        public Wallet pull(final long id) {\n            return new Wallet.Fake(id);\n        }\n    }\n}\n",
                    "src/main/java/io/zold/api/Wallet.java": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.nio.file.Path;\nimport org.cactoos.collection.FilteredCollection;\nimport org.cactoos.iterable.IterableOf;\nimport org.cactoos.iterable.Joined;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.iterable.Skipped;\nimport org.cactoos.list.ListOf;\nimport org.cactoos.scalar.Checked;\nimport org.cactoos.scalar.Or;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.SplitString;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Wallet.\n * @since 0.1\n * @todo #16:30min Merge method should update transactions\n *  in wallet's file and return concrete implementation not a fake one.\n *  Beware that tests should be refactored to take care of file cleanup\n *  after each case that merges wallets.\n */\n@SuppressWarnings({\"PMD.ShortMethodName\", \"PMD.TooManyMethods\",\n    \"PMD.UnusedFormalParameter\"})\npublic interface Wallet {\n    /**\n     * This wallet's ID: an unsigned 64-bit integer.\n     * @return This wallet's id\n     * @throws IOException If an IO error occurs\n     * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n     * @checkstyle MethodName (2 lines)\n     */\n    long id() throws IOException;\n\n    /**\n     * Make a payment.\n     * @param amt Amount to pay in zents\n     * @param bnf Wallet ID of beneficiary\n     * @throws IOException If an IO error occurs\n     */\n    void pay(long amt, long bnf) throws IOException;\n\n    /**\n     * Merge both {@code this} and {@code other}. Fails if they are not the\n     * same wallet, as identified by their {@link #id() id}.\n     * @param other Other wallet\n     * @return The merged wallet\n     * @throws IOException If an IO error occurs\n     */\n    Wallet merge(Wallet other) throws IOException;\n\n    /**\n     * This wallet's ledger.\n     * @return This wallet's ledger\n     */\n    Iterable<Transaction> ledger();\n\n    /**\n     * This wallet's RSA key.\n     * @return This wallet's RSA key.\n     */\n    String key();\n\n    /**\n     * A Fake {@link Wallet}.\n     * @since 1.0\n     * @todo #65:30min Complete Wallet implementations with id, public RSA\n     *  key and network id. Wallets.create(Long, String, String) must\n     *  create a Wallet with these strings set and a constructor must be\n     *  added to all Walletl realizations (Wallet(final long id, final String\n     *  pubkey, final String network, final Transaction... transactions). After\n     *  completing these implementations fix tests that uses Wallets.create()\n     *  and all Wallet realizations.\n     */\n    final class Fake implements Wallet {\n\n        /**\n         * The wallet id.\n         */\n        private final long id;\n\n        /**\n         * Transactions.\n         */\n        private final Iterable<Transaction> transactions;\n\n        /**\n         * Constructor.\n         * @param id The wallet id.\n         */\n        public Fake(final long id) {\n            this(id, new IterableOf<>());\n        }\n\n        /**\n         * Ctor.\n         * @param id The wallet id.\n         * @param transactions Transactions.\n         */\n        public Fake(final long id, final Transaction... transactions) {\n            this(id, new IterableOf<>(transactions));\n        }\n\n        /**\n         * Constructor.\n         * @param id The wallet id.\n         * @param pubkey The public RSA key of the wallet owner.\n         * @param network The network the walet belongs to.\n         * @checkstyle UnusedFormalParameter (2 lines)\n         */\n        public Fake(final long id, final String pubkey, final String network) {\n            this(id);\n        }\n\n        /**\n         * Ctor.\n         * @param id The wallet id.\n         * @param transactions Transactions.\n         */\n        public Fake(final long id, final Iterable<Transaction> transactions) {\n            this.id = id;\n            this.transactions = transactions;\n        }\n\n        @Override\n        public long id() throws IOException {\n            return this.id;\n        }\n\n        @Override\n        public void pay(final long amt, final long bnf) {\n            // nothing\n        }\n\n        @Override\n        public Wallet merge(final Wallet other) {\n            return other;\n        }\n\n        @Override\n        public Iterable<Transaction> ledger() {\n            return this.transactions;\n        }\n\n        @Override\n        public String key() {\n            return Long.toString(this.id);\n        }\n    }\n\n    /**\n     * Default File implementation.\n     * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)\n     */\n    final class File implements Wallet {\n\n        /**\n         * Path of this wallet.\n         */\n        private final Path path;\n\n        /**\n         * Ctor.\n         * @param path Path of wallet\n         */\n        File(final Path path) {\n            this.path = path;\n        }\n\n        @Override\n        public long id() throws IOException {\n            return new CheckedScalar<>(\n                () -> Long.parseUnsignedLong(\n                    new ListOf<>(\n                        new SplitText(\n                            new TextOf(this.path),\n                            \"\\n\"\n                        )\n                    ).get(2).asString(),\n                    // @checkstyle MagicNumber (1 line)\n                    16\n                ),\n                e -> new IOException(e)\n            ).value();\n        }\n\n        @Override\n        public void pay(final long amt, final long bnf) throws IOException {\n            try (final Writer out = new FileWriter(this.path.toFile(), true)) {\n                out.write('\\n');\n                out.write(new CpTransaction(amt, bnf).toString());\n            }\n        }\n\n        // @todo #16:30min Following transactions should be ignored according\n        //  to the whitepaper:\n        //  a) If the transaction is negative and its signature is not valid,\n        //  it is ignored;\n        //  b) If the transaction makes the balance of the wallet negative,\n        //  it is ignored;\n        //  c) If the transaction is positive and it\u2019s absent in the paying\n        //  wallet (which exists at the node), it\u2019s ignored; If the paying\n        //  wallet doesn\u2019t exist at the node, the transaction is ignored;\n        @Override\n        public Wallet merge(final Wallet other) throws IOException {\n            if (other.id() != this.id()) {\n                throw new IOException(\n                    new UncheckedText(\n                        new FormattedText(\n                            \"Wallet ID mismatch, ours is %d, theirs is %d\",\n                            other.id(),\n                            this.id()\n                        )\n                    ).asString()\n                );\n            }\n            final Iterable<Transaction> ledger = this.ledger();\n            final Iterable<Transaction> candidates = new Filtered<>(\n                incoming -> new Filtered<>(\n                    origin -> new UncheckedScalar<>(\n                        new Or(\n                            () -> incoming.equals(origin),\n                            () -> incoming.id() == origin.id()\n                                && incoming.bnf().equals(origin.bnf()),\n                            () -> incoming.id() == origin.id()\n                                && incoming.amount() < 0L,\n                            () -> incoming.prefix().equals(origin.prefix())\n                        )\n                    ).value(),\n                    ledger\n                ).isEmpty(),\n                other.ledger()\n            );\n            return new Wallet.Fake(\n                this.id(),\n                new Joined<Transaction>(ledger, candidates)\n            );\n        }\n\n        @Override\n        public Iterable<Transaction> ledger() {\n            return new Mapped<>(\n                txt -> new RtTransaction(txt.asString()),\n                new Skipped<>(\n                    new ListOf<>(\n                        new SplitText(\n                            new TextOf(this.path),\n                            \"\\\\n\"\n                        )\n                    ),\n                    // @checkstyle MagicNumberCheck (1 line)\n                    5\n                )\n            );\n        }\n\n        // @todo #54:30min Implement key method. This should return the\n        //  public RSA key of the wallet owner in Base64. Also add a unit test\n        //  to replace WalletTest.keyIsNotYetImplemented().\n        @Override\n        public String key() {\n            throw new UnsupportedOperationException(\n                \"key() not yet supported\"\n            );\n        }\n    }\n}",
                    "src/main/java/io/zold/api/RtNetwork.java": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.iterable.Sorted;\nimport org.cactoos.scalar.IoChecked;\nimport org.cactoos.scalar.Reduced;\n\n/**\n * Network implementation.\n *\n * @since 0.1\n * @todo #5:30min We must figure out how to 'load' some network. Loading the\n *  network will be loading a local JSON file that contains data on all\n *  remote nodes that we know about; we must have a pre configured set of\n *  remote nodes built in too. See whitepaper for details.\n */\npublic final class RtNetwork implements Network {\n\n    /**\n     * {@link Remote} nodes.\n     */\n    private final Iterable<Remote> nodes;\n\n    /**\n     * Constructor.\n     * @param remotes Remotes of the network\n     */\n    RtNetwork(final Iterable<Remote> remotes) {\n        this.nodes =  remotes;\n    }\n\n    @Override\n    public void push(final Wallet wallet) {\n        this.nodes.forEach(\n            remote -> remote.push(wallet)\n        );\n    }\n\n    @Override\n    public Wallet pull(final long id) throws IOException {\n        return new IoCheckedScalar<>(\n            new Reduced<>(\n                Wallet::merge,\n                new Mapped<>(\n                    c -> c::wallet,\n                    new Sorted<>(new Copies(id, this))\n                )\n            )\n        ).value();\n    }\n\n    @Override\n    public Iterator<Remote> iterator() {\n        return this.nodes.iterator();\n    }\n}\n",
                    "src/main/java/io/zold/api/TaxBeneficiaries.java": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.util.Comparator;\nimport org.cactoos.iterable.Filtered;\nimport org.cactoos.iterable.IterableEnvelope;\nimport org.cactoos.iterable.LengthOfText;\nimport org.cactoos.iterable.Sorted;\n\n/**\n * {@link Remote} nodes that should receive taxes.\n *\n * @since 1.0\n */\npublic final class TaxBeneficiaries extends IterableEnvelope<Remote> {\n\n    /**\n     * Ctor.\n     *\n     * @param nodes Remote nodes to select from.\n     */\n    public TaxBeneficiaries(final Iterable<Remote> nodes) {\n        super(() -> new Sorted<>(\n            Comparator.comparing(Remote::score),\n            new Filtered<>(\n                // @checkstyle MagicNumberCheck (1 line)\n                n -> new LengthOf(n.score().suffixes()).intValue() >= 16,\n                nodes\n            )\n        ));\n    }\n}\n",
                    "src/main/java/io/zold/api/WalletsIn.java": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.nio.file.FileSystems;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Iterator;\nimport java.util.Random;\nimport org.cactoos.Scalar;\nimport org.cactoos.func.IoCheckedFunc;\nimport org.cactoos.io.Directory;\nimport org.cactoos.iterable.Filtered;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.scalar.IoChecked;\nimport org.cactoos.scalar.Solid;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.JoinedString;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Wallets in path.\n * @since 0.1\n * @checkstyle ClassDataAbstractionCoupling (2 lines)\n */\npublic final class WalletsIn implements Wallets {\n\n    /**\n     * Path containing wallets.\n     */\n    private final IoCheckedScalar<Path> path;\n\n    /**\n     * Filter for matching file extensions.\n     */\n    private final IoCheckedFunc<Path, Boolean> filter;\n\n    /**\n     * Wallets file extension.\n     */\n    private final String ext;\n\n    /**\n     * Randomizer.\n     */\n    private final Random random;\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     */\n    public WalletsIn(final Path pth) {\n        this(\n            () -> pth,\n            \"z\",\n            new Random()\n        );\n    }\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     * @param random Randomizer\n     */\n    public WalletsIn(final Path pth, final Random random) {\n        this(\n            () -> pth,\n            \"z\",\n            random\n        );\n    }\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     * @param random Randomizer\n     * @param ext Wallets file extension\n     */\n    public WalletsIn(final Scalar<Path> pth, final String ext,\n        final Random random) {\n        this.path = new IoCheckedScalar<>(\n            new SolidScalar<>(pth)\n        );\n        this.filter = new IoCheckedFunc<Path, Boolean>(\n            (file) -> file.toFile().isFile()\n                && FileSystems.getDefault()\n                .getPathMatcher(String.format(\"glob:**.%s\", ext))\n                .matches(file)\n        );\n        this.ext = ext;\n        this.random = random;\n    }\n\n    @Override\n    public Wallet create() throws IOException {\n        final Path wpth = this.path.value().resolve(\n            new JoinedText(\n                \".\",\n                Long.toHexString(this.random.nextLong()),\n                this.ext\n            ).asString()\n        );\n        if (wpth.toFile().exists()) {\n            throw new IOException(\n                new UncheckedText(\n                    new FormattedText(\n                        \"Wallet in path %s already exists\",\n                        wpth.toUri().getPath()\n                    )\n            ).asString()\n            );\n        }\n        Files.createFile(wpth);\n        return new Wallet.File(wpth);\n    }\n\n    @Override\n    // @todo #65:30min Create the new wallet in the path with all wallets.\n    //  It should contain the correct content according to the\n    //  white paper (network, protocol version, id and public RSA key). After\n    //  this remove exception expect for tests on WalletsInTest.\n    public Wallet create(final long id, final String pubkey, final String\n        network) throws IOException {\n        throw new UnsupportedOperationException(\n            \"WalletsIn.create(String, String, String) not supported\"\n        );\n    }\n\n    @Override\n    public Iterator<Wallet> iterator() {\n        try {\n            return new Mapped<Path, Wallet>(\n                (pth) -> new Wallet.File(pth),\n                new Filtered<>(this.filter, new Directory(this.path.value()))\n            ).iterator();\n        } catch (final IOException ex) {\n            throw new IllegalStateException(ex);\n        }\n    }\n}",
                    "src/main/java/io/zold/api/RtTransaction.java": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.cactoos.Text;\nimport org.cactoos.iterable.LengthOfText;\nimport org.cactoos.list.ListOf;\nimport org.cactoos.scalar.IoChecked;\nimport org.cactoos.scalar.ItemAt;\nimport org.cactoos.scalar.Sticky;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.SplitString;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.TrimmedString;\nimport org.cactoos.text.UncheckedText;\nimport org.cactoos.time.ZonedDateTimeOf;\n\n/**\n * RtTransaction.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCoupling (3 lines)\n */\n@SuppressWarnings({\"PMD.AvoidCatchingGenericException\",\n    \"PMD.AvoidFieldNameMatchingMethodName\"})\nfinal class RtTransaction implements Transaction {\n\n    /**\n     * Pattern for Prefix String.\n     */\n    private static final Pattern PREFIX = Pattern.compile(\n        //@checkstyle LineLengthCheck (1 line)\n        \"^([A-Za-z0-9+\\\\/]{4})*([A-Za-z0-9+\\\\/]{4}|[A-Za-z0-9+\\\\/]{3}=|[A-Za-z0-9+\\\\/]{2}==)$\"\n    );\n\n    /**\n     * Pattern for 16 symbol hex string.\n     */\n    private static final Pattern HEX = Pattern.compile(\"[A-Fa-f0-9]{16}\");\n\n    /**\n     * Pattern for parsing Signature.\n     */\n    private static final Pattern SIGN = Pattern.compile(\"[A-Za-z0-9+/]+={0,3}\");\n\n    /**\n     * Pattern for Details string.\n     */\n    private static final Pattern DTLS =\n        Pattern.compile(\"[A-Za-z0-9 -.]{1,512}\");\n\n    /**\n     * Pattern for ID String.\n     */\n    private static final Pattern IDENT = Pattern.compile(\"[A-Fa-f0-9]{4}\");\n\n    /**\n     * String representation of transaction.\n     */\n    private final IoCheckedScalar<String> transaction;\n\n    /**\n     * Ctor.\n     * @param trnsct String representation of transaction\n     */\n    RtTransaction(final String trnsct) {\n        this.transaction = new IoCheckedScalar<>(\n            new StickyScalar<>(\n                () -> {\n                    if (\n                        new TrimmedText(\n                            new TextOf(trnsct)\n                        ).asString().isEmpty()\n                    ) {\n                        throw new IOException(\n                            \"Invalid transaction string: string is empty\"\n                        );\n                    }\n                    final List<Text> pieces =\n                        new ListOf<>(\n                            new SplitText(trnsct, \";\")\n                        );\n                    // @checkstyle MagicNumberCheck (1 line)\n                    if (new LengthOf(pieces).intValue() != 7) {\n                        throw new IOException(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                                \"Invalid transaction string: expected 7 fields, but found %d\",\n                                pieces.size()\n                            ).asString()\n                        );\n                    }\n                    return trnsct;\n                }\n            )\n        );\n    }\n\n    @Override\n    @SuppressWarnings(\"PMD.ShortMethodName\")\n    public int id() throws IOException {\n        final String ident = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    0, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.IDENT.matcher(ident).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid ID '%s' expecting 16-bit unsigned hex string with 4 symbols\",\n                        ident\n                    )\n                            ).asString()\n            );\n        }\n        // @checkstyle MagicNumber (1 line)\n        return Integer.parseUnsignedInt(ident, 16);\n    }\n\n    @Override\n    public ZonedDateTime time() throws IOException {\n        return new ZonedDateTimeOf(\n                new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                        1, new SplitText(this.transaction.value(), \";\")\n                    )\n                ).value()\n            ).asString(),\n            DateTimeFormatter.ISO_OFFSET_DATE_TIME\n        ).value();\n    }\n\n    @Override\n    public long amount() throws IOException {\n        final String amnt = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    2, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.HEX.matcher(amnt).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid amount '%s' expecting 64-bit signed hex string with 16 symbols\",\n                        amnt\n                    )\n                            ).asString()\n            );\n        }\n        // @checkstyle MagicNumber (1 line)\n        return new BigInteger(amnt, 16).longValue();\n    }\n\n    @Override\n    public String prefix() throws IOException {\n        final String prefix = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    3, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n                    //@checkstyle MagicNumberCheck (1 line)\n        if (prefix.length() < 8 || prefix.length() > 32) {\n            throw new IOException(\"Invalid prefix size\");\n        }\n        if (!RtTransaction.PREFIX.matcher(prefix).matches()) {\n            throw new IOException(\"Invalid base64 prefix\");\n        }\n        return prefix;\n    }\n\n    @Override\n    public String bnf() throws IOException {\n        final String bnf = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    4, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.HEX.matcher(bnf).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid bnf string '%s', expecting hex string with 16 symbols\",\n                        bnf\n                    )\n                            ).asString()\n            );\n        }\n        return bnf;\n    }\n\n    @Override\n    public String details() throws IOException {\n        final String dtls = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    5, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.DTLS.matcher(dtls).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid details string '%s', does not match pattern '%s'\",\n                        dtls, RtTransaction.DTLS\n                    )\n                            ).asString()\n            );\n        }\n        return dtls;\n    }\n\n    @Override\n    public String signature() throws IOException {\n        final String sign = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    6, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        // @checkstyle MagicNumber (1 line)\n        if (sign.length() != 684\n            || !RtTransaction.SIGN.matcher(sign).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid signature '%s', expecting base64 string with 684 characters\",\n                        sign\n                    )\n                            ).asString()\n            );\n        }\n        return sign;\n    }\n\n    @Override\n    public String toString() {\n        return new UncheckedScalar<>(this.transaction).value();\n    }\n\n    @Override\n    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n    public boolean equals(final Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || this.getClass() != obj.getClass()) {\n            return false;\n        }\n        final RtTransaction that = (RtTransaction) obj;\n        return this.transaction.equals(that.transaction);\n    }\n\n    @Override\n    public int hashCode() {\n        return this.transaction.hashCode();\n    }\n}"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO]\n[INFO] --------------------------< io.zold:java-api >--------------------------\n[INFO] Building java-api 1.0-SNAPSHOT\n[INFO] from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ java-api ---\n[INFO]\n[INFO] --- enforcer:3.3.0:enforce (enforce-maven) @ java-api ---\n[INFO] Rule 0: org.apache.maven.enforcer.rules.version.RequireMavenVersion passed\n[INFO]\n[INFO] --- buildnumber:3.1.0:create (jcabi-build-number) @ java-api ---\n[INFO] ShortRevision tag detected. The value is '7'.\n[INFO] Executing: /bin/sh -c cd '/mnt/repo' && 'git' 'rev-parse' '--verify' '--short=7' 'HEAD'\n[INFO] Working directory: /mnt/repo\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 28.721 s\n[INFO] Finished at: 2024-08-01T01:26:54Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.codehaus.mojo:buildnumber-maven-plugin:3.1.0:create (jcabi-build-number) on project java-api: Cannot get the revision information from the scm repository :\n[ERROR] Exception while executing SCM command. Error while executing command. Error while executing process. Cannot run program \"git\" (in directory \"/mnt/repo\"): error=2, No such file or directory\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
            "span_id": 4643163849887137140
        },
        {
            "input": "```diff\n--- src/main/java/io/zold/api/Copies.java\n+++ src/main/java/io/zold/api/Copies.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.collection.CollectionOf;\n+import org.cactoos.collection.ListOf;\n\n--- src/main/java/io/zold/api/RtScore.java\n+++ src/main/java/io/zold/api/RtScore.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n--- src/main/java/io/zold/api/Remote.java\n+++ src/main/java/io/zold/api/Remote.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.RandomText;\n+import org.cactoos.text.RandomString;\n\n--- src/main/java/io/zold/api/Wallet.java\n+++ src/main/java/io/zold/api/Wallet.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.collection.Filtered;\n+import org.cactoos.collection.FilteredCollection;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.CheckedScalar;\n+import org.cactoos.scalar.Checked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.UncheckedScalar;\n+import org.cactoos.scalar.Unchecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.SplitText;\n+import org.cactoos.text.SplitString;\n\n--- src/main/java/io/zold/api/RtNetwork.java\n+++ src/main/java/io/zold/api/RtNetwork.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n--- src/main/java/io/zold/api/TaxBeneficiaries.java\n+++ src/main/java/io/zold/api/TaxBeneficiaries.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n--- src/main/java/io/zold/api/WalletsIn.java\n+++ src/main/java/io/zold/api/WalletsIn.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.SolidScalar;\n+import org.cactoos.scalar.Solid;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.JoinedText;\n+import org.cactoos.text.JoinedString;\n\n--- src/main/java/io/zold/api/RtTransaction.java\n+++ src/main/java/io/zold/api/RtTransaction.java\n@@ -1,1 +1,1 @@\n-import org.cactoos.iterable.LengthOf;\n+import org.cactoos.iterable.LengthOfText;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.IoCheckedScalar;\n+import org.cactoos.scalar.IoChecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.StickyScalar;\n+import org.cactoos.scalar.Sticky;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.scalar.UncheckedScalar;\n+import org.cactoos.scalar.Unchecked;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.SplitText;\n+import org.cactoos.text.SplitString;\n\n@@ -1,1 +1,1 @@\n-import org.cactoos.text.TrimmedText;\n+import org.cactoos.text.TrimmedString;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Copies.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Copies.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Copies.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.collection.CollectionOf;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtScore.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtScore.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtScore.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Remote.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Remote.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Remote.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.RandomText;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.collection.Filtered;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.CheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Wallet.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtNetwork.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtNetwork.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtNetwork.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/TaxBeneficiaries.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.SolidScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.JoinedText;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.StickyScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.TrimmedText;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Copies.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Copies.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Copies.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.collection.CollectionOf;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtScore.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtScore.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtScore.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Remote.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Remote.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Remote.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.RandomText;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.collection.Filtered;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.CheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Wallet.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/Wallet.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/Wallet.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/Wallet.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtNetwork.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtNetwork.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtNetwork.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/TaxBeneficiaries.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/TaxBeneficiaries.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.SolidScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/WalletsIn.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/WalletsIn.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/WalletsIn.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.JoinedText;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.iterable.LengthOf;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.IoCheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.StickyScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.scalar.UncheckedScalar;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 2 exact lines in a row:\n```\nimport org.cactoos.text.SplitText;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/zold/api/RtTransaction.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/zold/api/RtTransaction.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/zold/api/RtTransaction.java does not contain these 1 exact lines in a row:\n```\nimport org.cactoos.text.TrimmedText;\n```",
            "span_id": 3519545768407220338
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/io/zold/api/Copies.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport io.zold.api.Copies.Copy;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.cactoos.collection.ListOf;\nimport org.cactoos.iterable.IterableEnvelope;\nimport org.cactoos.iterable.IterableOf;\nimport org.cactoos.iterable.Joined;\nimport org.cactoos.iterable.Mapped;\n\n/**\n * Multiple copies of a Wallet.\n * @since 1.0\n */\npublic final class Copies extends IterableEnvelope<Copy> {\n\n    /**\n     * Ctor.\n     * @param id Id of the wallet to pull.\n     * @param remotes Remote nodes.\n     */\n    Copies(final long id, final Iterable<Remote> remotes) {\n        super(() -> copies(id, remotes));\n    }\n\n    /**\n     * Builds copies from remotes.\n     * @param id Wallet's id\n     * @param remotes List of remotes\n     * @return Iterable Iterable of Copy\n     * @throws IOException If fails\n     */\n    @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\")\n    private static Iterable<Copy> copies(final long id,\n        final Iterable<Remote> remotes) throws IOException {\n        final List<Copy> copies = new ArrayList<>(10);\n        for (final Remote remote : remotes) {\n            final Wallet wallet = remote.pull(id);\n            boolean updated = false;\n            for (int idx = 0; idx < copies.size(); idx += 1) {\n                final Copy copy = copies.get(idx);\n                if (Copies.equalWallets(copies.get(idx).wallet(), wallet)) {\n                    copies.set(idx, copy.with(remote));\n                    updated = true;\n                }\n            }\n            if (!updated) {\n                copies.add(new Copy(wallet, remote));\n            }\n        }\n        return new IterableOf<>(copies);\n    }\n\n    /**\n     * Checks if content of two wallets is equal.\n     * @param first First wallet\n     * @param second Second wallet\n     * @return Boolean Boolean\n     * @throws IOException If fails\n     * @todo #56:30min Compare the entire content of two wallets. In addition\n     *  to id, compare RSA key and all transactions one by one. Entire content\n     *  of each transaction should be compared.\n     */\n    private static boolean equalWallets(final Wallet first,\n        final Wallet second) throws IOException {\n        return first.id() == second.id() && new CollectionOf<>(\n            first.ledger()\n        ).size() == new CollectionOf<>(second.ledger()).size();\n    }\n\n    /**\n     * One copy of a {@link Wallet}.\n     * @since 1.0\n     */\n    static final class Copy implements Comparable<Copy> {\n\n        /**\n         * The wallet.\n         */\n        private final Wallet wlt;\n\n        /**\n         * The remote nodes where the wallet was found.\n         */\n        private final Iterable<Remote> remotes;\n\n        /**\n         * Ctor.\n         * @param wallet The wallet.\n         * @param remotes The remote nodes where the wallet was found.\n         */\n        Copy(final Wallet wallet, final Remote... remotes) {\n            this(wallet, new IterableOf<>(remotes));\n        }\n\n        /**\n         * Ctor.\n         * @param wallet The wallet.\n         * @param remotes The remote nodes where the wallet was found.\n         */\n        Copy(final Wallet wallet, final Iterable<Remote> remotes) {\n            this.wlt = wallet;\n            this.remotes = remotes;\n        }\n\n        /**\n         * Creates new Copy instance with additional remote.\n         * @param remote Remote\n         * @return Copy Copy\n         */\n        public Copy with(final Remote remote) {\n            return new Copy(this.wallet(), new Joined<>(remote, this.remotes));\n        }\n\n        /**\n         * The wallet.\n         * @return The wallet.\n         */\n        public Wallet wallet() {\n            return this.wlt;\n        }\n\n        /**\n         * The summary of the score of all the remote nodes.\n         * @return The score.\n         */\n        public Score score() {\n            return new Score.Summed(new Mapped<>(Remote::score, this.remotes));\n        }\n\n        @Override\n        public int compareTo(final Copy other) {\n            return this.score().compareTo(other.score());\n        }\n    }\n}\n",
            "error": "",
            "span_id": 17442005709898048742
        },
        {
            "input": "src/main/java/io/zold/api/RtScore.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport org.cactoos.Text;\nimport org.cactoos.iterable.LengthOfText;\n\n/**\n * Default implementation for {@link Score}.\n *\n * @since 1.0\n */\npublic final class RtScore implements Score {\n\n    /**\n     * The suffixes.\n     */\n    private final Iterable<Text> sfxs;\n\n    /**\n     * Ctor.\n     *\n     * @param sfxs The suffixes.\n     */\n    RtScore(final Iterable<Text> sfxs) {\n        this.sfxs = sfxs;\n    }\n\n    @Override\n    public int compareTo(final Score other) {\n        return new LengthOf(other.suffixes()).intValue()\n            - new LengthOf(this.sfxs).intValue();\n    }\n\n    @Override\n    public Iterable<Text> suffixes() {\n        return this.sfxs;\n    }\n}\n",
            "error": "",
            "span_id": 9062797374296011049
        },
        {
            "input": "src/main/java/io/zold/api/Remote.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npackage io.zold.api;\n\nimport org.cactoos.iterable.Repeated;\nimport org.cactoos.text.RandomString;\n\n/**\n * Remote node.\n *\n * @since 0.1\n */\npublic interface Remote {\n    /**\n     * This remote node's score.\n     * @return The score\n     */\n    Score score();\n\n    /**\n     * Pushes a {@link Wallet} to this remote.\n     * @param wallet Wallet to be pushed to this remote\n     */\n    void push(Wallet wallet);\n\n    /**\n     * Pull a wallet from this remote.\n     * @param id The wallet's {@link Wallet#id() id}\n     * @return The wallet\n     */\n    Wallet pull(long id);\n\n    /**\n     * A Fake {@link Remote}.\n     */\n    final class Fake implements Remote {\n\n        /**\n         * The remote's score.\n         */\n        private final Score score;\n\n        /**\n         * Ctor.\n         * @param val The remote's score value\n         */\n        public Fake(final int val) {\n            this(new RtScore(\n                new Repeated<>(val, new RandomText())\n            ));\n        }\n\n        /**\n         * Ctor.\n         * @param score The remote's score\n         */\n        public Fake(final Score score) {\n            this.score = score;\n        }\n\n        @Override\n        public Score score() {\n            return this.score;\n        }\n\n        @Override\n        public void push(final Wallet wallet) {\n            // nothing\n        }\n\n        @Override\n        public Wallet pull(final long id) {\n            return new Wallet.Fake(id);\n        }\n    }\n}\n",
            "error": "",
            "span_id": 4776919803226809929
        },
        {
            "input": "src/main/java/io/zold/api/Wallet.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.nio.file.Path;\nimport org.cactoos.collection.FilteredCollection;\nimport org.cactoos.iterable.IterableOf;\nimport org.cactoos.iterable.Joined;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.iterable.Skipped;\nimport org.cactoos.list.ListOf;\nimport org.cactoos.scalar.Checked;\nimport org.cactoos.scalar.Or;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.SplitString;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Wallet.\n * @since 0.1\n * @todo #16:30min Merge method should update transactions\n *  in wallet's file and return concrete implementation not a fake one.\n *  Beware that tests should be refactored to take care of file cleanup\n *  after each case that merges wallets.\n */\n@SuppressWarnings({\"PMD.ShortMethodName\", \"PMD.TooManyMethods\",\n    \"PMD.UnusedFormalParameter\"})\npublic interface Wallet {\n    /**\n     * This wallet's ID: an unsigned 64-bit integer.\n     * @return This wallet's id\n     * @throws IOException If an IO error occurs\n     * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n     * @checkstyle MethodName (2 lines)\n     */\n    long id() throws IOException;\n\n    /**\n     * Make a payment.\n     * @param amt Amount to pay in zents\n     * @param bnf Wallet ID of beneficiary\n     * @throws IOException If an IO error occurs\n     */\n    void pay(long amt, long bnf) throws IOException;\n\n    /**\n     * Merge both {@code this} and {@code other}. Fails if they are not the\n     * same wallet, as identified by their {@link #id() id}.\n     * @param other Other wallet\n     * @return The merged wallet\n     * @throws IOException If an IO error occurs\n     */\n    Wallet merge(Wallet other) throws IOException;\n\n    /**\n     * This wallet's ledger.\n     * @return This wallet's ledger\n     */\n    Iterable<Transaction> ledger();\n\n    /**\n     * This wallet's RSA key.\n     * @return This wallet's RSA key.\n     */\n    String key();\n\n    /**\n     * A Fake {@link Wallet}.\n     * @since 1.0\n     * @todo #65:30min Complete Wallet implementations with id, public RSA\n     *  key and network id. Wallets.create(Long, String, String) must\n     *  create a Wallet with these strings set and a constructor must be\n     *  added to all Walletl realizations (Wallet(final long id, final String\n     *  pubkey, final String network, final Transaction... transactions). After\n     *  completing these implementations fix tests that uses Wallets.create()\n     *  and all Wallet realizations.\n     */\n    final class Fake implements Wallet {\n\n        /**\n         * The wallet id.\n         */\n        private final long id;\n\n        /**\n         * Transactions.\n         */\n        private final Iterable<Transaction> transactions;\n\n        /**\n         * Constructor.\n         * @param id The wallet id.\n         */\n        public Fake(final long id) {\n            this(id, new IterableOf<>());\n        }\n\n        /**\n         * Ctor.\n         * @param id The wallet id.\n         * @param transactions Transactions.\n         */\n        public Fake(final long id, final Transaction... transactions) {\n            this(id, new IterableOf<>(transactions));\n        }\n\n        /**\n         * Constructor.\n         * @param id The wallet id.\n         * @param pubkey The public RSA key of the wallet owner.\n         * @param network The network the walet belongs to.\n         * @checkstyle UnusedFormalParameter (2 lines)\n         */\n        public Fake(final long id, final String pubkey, final String network) {\n            this(id);\n        }\n\n        /**\n         * Ctor.\n         * @param id The wallet id.\n         * @param transactions Transactions.\n         */\n        public Fake(final long id, final Iterable<Transaction> transactions) {\n            this.id = id;\n            this.transactions = transactions;\n        }\n\n        @Override\n        public long id() throws IOException {\n            return this.id;\n        }\n\n        @Override\n        public void pay(final long amt, final long bnf) {\n            // nothing\n        }\n\n        @Override\n        public Wallet merge(final Wallet other) {\n            return other;\n        }\n\n        @Override\n        public Iterable<Transaction> ledger() {\n            return this.transactions;\n        }\n\n        @Override\n        public String key() {\n            return Long.toString(this.id);\n        }\n    }\n\n    /**\n     * Default File implementation.\n     * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)\n     */\n    final class File implements Wallet {\n\n        /**\n         * Path of this wallet.\n         */\n        private final Path path;\n\n        /**\n         * Ctor.\n         * @param path Path of wallet\n         */\n        File(final Path path) {\n            this.path = path;\n        }\n\n        @Override\n        public long id() throws IOException {\n            return new CheckedScalar<>(\n                () -> Long.parseUnsignedLong(\n                    new ListOf<>(\n                        new SplitText(\n                            new TextOf(this.path),\n                            \"\\n\"\n                        )\n                    ).get(2).asString(),\n                    // @checkstyle MagicNumber (1 line)\n                    16\n                ),\n                e -> new IOException(e)\n            ).value();\n        }\n\n        @Override\n        public void pay(final long amt, final long bnf) throws IOException {\n            try (final Writer out = new FileWriter(this.path.toFile(), true)) {\n                out.write('\\n');\n                out.write(new CpTransaction(amt, bnf).toString());\n            }\n        }\n\n        // @todo #16:30min Following transactions should be ignored according\n        //  to the whitepaper:\n        //  a) If the transaction is negative and its signature is not valid,\n        //  it is ignored;\n        //  b) If the transaction makes the balance of the wallet negative,\n        //  it is ignored;\n        //  c) If the transaction is positive and it\u2019s absent in the paying\n        //  wallet (which exists at the node), it\u2019s ignored; If the paying\n        //  wallet doesn\u2019t exist at the node, the transaction is ignored;\n        @Override\n        public Wallet merge(final Wallet other) throws IOException {\n            if (other.id() != this.id()) {\n                throw new IOException(\n                    new UncheckedText(\n                        new FormattedText(\n                            \"Wallet ID mismatch, ours is %d, theirs is %d\",\n                            other.id(),\n                            this.id()\n                        )\n                    ).asString()\n                );\n            }\n            final Iterable<Transaction> ledger = this.ledger();\n            final Iterable<Transaction> candidates = new Filtered<>(\n                incoming -> new Filtered<>(\n                    origin -> new UncheckedScalar<>(\n                        new Or(\n                            () -> incoming.equals(origin),\n                            () -> incoming.id() == origin.id()\n                                && incoming.bnf().equals(origin.bnf()),\n                            () -> incoming.id() == origin.id()\n                                && incoming.amount() < 0L,\n                            () -> incoming.prefix().equals(origin.prefix())\n                        )\n                    ).value(),\n                    ledger\n                ).isEmpty(),\n                other.ledger()\n            );\n            return new Wallet.Fake(\n                this.id(),\n                new Joined<Transaction>(ledger, candidates)\n            );\n        }\n\n        @Override\n        public Iterable<Transaction> ledger() {\n            return new Mapped<>(\n                txt -> new RtTransaction(txt.asString()),\n                new Skipped<>(\n                    new ListOf<>(\n                        new SplitText(\n                            new TextOf(this.path),\n                            \"\\\\n\"\n                        )\n                    ),\n                    // @checkstyle MagicNumberCheck (1 line)\n                    5\n                )\n            );\n        }\n\n        // @todo #54:30min Implement key method. This should return the\n        //  public RSA key of the wallet owner in Base64. Also add a unit test\n        //  to replace WalletTest.keyIsNotYetImplemented().\n        @Override\n        public String key() {\n            throw new UnsupportedOperationException(\n                \"key() not yet supported\"\n            );\n        }\n    }\n}",
            "error": "",
            "span_id": 2394174162349509002
        },
        {
            "input": "src/main/java/io/zold/api/RtNetwork.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.iterable.Sorted;\nimport org.cactoos.scalar.IoChecked;\nimport org.cactoos.scalar.Reduced;\n\n/**\n * Network implementation.\n *\n * @since 0.1\n * @todo #5:30min We must figure out how to 'load' some network. Loading the\n *  network will be loading a local JSON file that contains data on all\n *  remote nodes that we know about; we must have a pre configured set of\n *  remote nodes built in too. See whitepaper for details.\n */\npublic final class RtNetwork implements Network {\n\n    /**\n     * {@link Remote} nodes.\n     */\n    private final Iterable<Remote> nodes;\n\n    /**\n     * Constructor.\n     * @param remotes Remotes of the network\n     */\n    RtNetwork(final Iterable<Remote> remotes) {\n        this.nodes =  remotes;\n    }\n\n    @Override\n    public void push(final Wallet wallet) {\n        this.nodes.forEach(\n            remote -> remote.push(wallet)\n        );\n    }\n\n    @Override\n    public Wallet pull(final long id) throws IOException {\n        return new IoCheckedScalar<>(\n            new Reduced<>(\n                Wallet::merge,\n                new Mapped<>(\n                    c -> c::wallet,\n                    new Sorted<>(new Copies(id, this))\n                )\n            )\n        ).value();\n    }\n\n    @Override\n    public Iterator<Remote> iterator() {\n        return this.nodes.iterator();\n    }\n}\n",
            "error": "",
            "span_id": 17947671805084415334
        },
        {
            "input": "src/main/java/io/zold/api/TaxBeneficiaries.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.util.Comparator;\nimport org.cactoos.iterable.Filtered;\nimport org.cactoos.iterable.IterableEnvelope;\nimport org.cactoos.iterable.LengthOfText;\nimport org.cactoos.iterable.Sorted;\n\n/**\n * {@link Remote} nodes that should receive taxes.\n *\n * @since 1.0\n */\npublic final class TaxBeneficiaries extends IterableEnvelope<Remote> {\n\n    /**\n     * Ctor.\n     *\n     * @param nodes Remote nodes to select from.\n     */\n    public TaxBeneficiaries(final Iterable<Remote> nodes) {\n        super(() -> new Sorted<>(\n            Comparator.comparing(Remote::score),\n            new Filtered<>(\n                // @checkstyle MagicNumberCheck (1 line)\n                n -> new LengthOf(n.score().suffixes()).intValue() >= 16,\n                nodes\n            )\n        ));\n    }\n}\n",
            "error": "",
            "span_id": 8283804598185029877
        },
        {
            "input": "src/main/java/io/zold/api/WalletsIn.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.nio.file.FileSystems;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Iterator;\nimport java.util.Random;\nimport org.cactoos.Scalar;\nimport org.cactoos.func.IoCheckedFunc;\nimport org.cactoos.io.Directory;\nimport org.cactoos.iterable.Filtered;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.scalar.IoChecked;\nimport org.cactoos.scalar.Solid;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.JoinedString;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Wallets in path.\n * @since 0.1\n * @checkstyle ClassDataAbstractionCoupling (2 lines)\n */\npublic final class WalletsIn implements Wallets {\n\n    /**\n     * Path containing wallets.\n     */\n    private final IoCheckedScalar<Path> path;\n\n    /**\n     * Filter for matching file extensions.\n     */\n    private final IoCheckedFunc<Path, Boolean> filter;\n\n    /**\n     * Wallets file extension.\n     */\n    private final String ext;\n\n    /**\n     * Randomizer.\n     */\n    private final Random random;\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     */\n    public WalletsIn(final Path pth) {\n        this(\n            () -> pth,\n            \"z\",\n            new Random()\n        );\n    }\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     * @param random Randomizer\n     */\n    public WalletsIn(final Path pth, final Random random) {\n        this(\n            () -> pth,\n            \"z\",\n            random\n        );\n    }\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     * @param random Randomizer\n     * @param ext Wallets file extension\n     */\n    public WalletsIn(final Scalar<Path> pth, final String ext,\n        final Random random) {\n        this.path = new IoCheckedScalar<>(\n            new SolidScalar<>(pth)\n        );\n        this.filter = new IoCheckedFunc<Path, Boolean>(\n            (file) -> file.toFile().isFile()\n                && FileSystems.getDefault()\n                .getPathMatcher(String.format(\"glob:**.%s\", ext))\n                .matches(file)\n        );\n        this.ext = ext;\n        this.random = random;\n    }\n\n    @Override\n    public Wallet create() throws IOException {\n        final Path wpth = this.path.value().resolve(\n            new JoinedText(\n                \".\",\n                Long.toHexString(this.random.nextLong()),\n                this.ext\n            ).asString()\n        );\n        if (wpth.toFile().exists()) {\n            throw new IOException(\n                new UncheckedText(\n                    new FormattedText(\n                        \"Wallet in path %s already exists\",\n                        wpth.toUri().getPath()\n                    )\n            ).asString()\n            );\n        }\n        Files.createFile(wpth);\n        return new Wallet.File(wpth);\n    }\n\n    @Override\n    // @todo #65:30min Create the new wallet in the path with all wallets.\n    //  It should contain the correct content according to the\n    //  white paper (network, protocol version, id and public RSA key). After\n    //  this remove exception expect for tests on WalletsInTest.\n    public Wallet create(final long id, final String pubkey, final String\n        network) throws IOException {\n        throw new UnsupportedOperationException(\n            \"WalletsIn.create(String, String, String) not supported\"\n        );\n    }\n\n    @Override\n    public Iterator<Wallet> iterator() {\n        try {\n            return new Mapped<Path, Wallet>(\n                (pth) -> new Wallet.File(pth),\n                new Filtered<>(this.filter, new Directory(this.path.value()))\n            ).iterator();\n        } catch (final IOException ex) {\n            throw new IllegalStateException(ex);\n        }\n    }\n}",
            "error": "",
            "span_id": 14345936715014235254
        },
        {
            "input": "src/main/java/io/zold/api/RtTransaction.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.cactoos.Text;\nimport org.cactoos.iterable.LengthOfText;\nimport org.cactoos.list.ListOf;\nimport org.cactoos.scalar.IoChecked;\nimport org.cactoos.scalar.ItemAt;\nimport org.cactoos.scalar.Sticky;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.SplitString;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.TrimmedString;\nimport org.cactoos.text.UncheckedText;\nimport org.cactoos.time.ZonedDateTimeOf;\n\n/**\n * RtTransaction.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCoupling (3 lines)\n */\n@SuppressWarnings({\"PMD.AvoidCatchingGenericException\",\n    \"PMD.AvoidFieldNameMatchingMethodName\"})\nfinal class RtTransaction implements Transaction {\n\n    /**\n     * Pattern for Prefix String.\n     */\n    private static final Pattern PREFIX = Pattern.compile(\n        //@checkstyle LineLengthCheck (1 line)\n        \"^([A-Za-z0-9+\\\\/]{4})*([A-Za-z0-9+\\\\/]{4}|[A-Za-z0-9+\\\\/]{3}=|[A-Za-z0-9+\\\\/]{2}==)$\"\n    );\n\n    /**\n     * Pattern for 16 symbol hex string.\n     */\n    private static final Pattern HEX = Pattern.compile(\"[A-Fa-f0-9]{16}\");\n\n    /**\n     * Pattern for parsing Signature.\n     */\n    private static final Pattern SIGN = Pattern.compile(\"[A-Za-z0-9+/]+={0,3}\");\n\n    /**\n     * Pattern for Details string.\n     */\n    private static final Pattern DTLS =\n        Pattern.compile(\"[A-Za-z0-9 -.]{1,512}\");\n\n    /**\n     * Pattern for ID String.\n     */\n    private static final Pattern IDENT = Pattern.compile(\"[A-Fa-f0-9]{4}\");\n\n    /**\n     * String representation of transaction.\n     */\n    private final IoCheckedScalar<String> transaction;\n\n    /**\n     * Ctor.\n     * @param trnsct String representation of transaction\n     */\n    RtTransaction(final String trnsct) {\n        this.transaction = new IoCheckedScalar<>(\n            new StickyScalar<>(\n                () -> {\n                    if (\n                        new TrimmedText(\n                            new TextOf(trnsct)\n                        ).asString().isEmpty()\n                    ) {\n                        throw new IOException(\n                            \"Invalid transaction string: string is empty\"\n                        );\n                    }\n                    final List<Text> pieces =\n                        new ListOf<>(\n                            new SplitText(trnsct, \";\")\n                        );\n                    // @checkstyle MagicNumberCheck (1 line)\n                    if (new LengthOf(pieces).intValue() != 7) {\n                        throw new IOException(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                                \"Invalid transaction string: expected 7 fields, but found %d\",\n                                pieces.size()\n                            ).asString()\n                        );\n                    }\n                    return trnsct;\n                }\n            )\n        );\n    }\n\n    @Override\n    @SuppressWarnings(\"PMD.ShortMethodName\")\n    public int id() throws IOException {\n        final String ident = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    0, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.IDENT.matcher(ident).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid ID '%s' expecting 16-bit unsigned hex string with 4 symbols\",\n                        ident\n                    )\n                            ).asString()\n            );\n        }\n        // @checkstyle MagicNumber (1 line)\n        return Integer.parseUnsignedInt(ident, 16);\n    }\n\n    @Override\n    public ZonedDateTime time() throws IOException {\n        return new ZonedDateTimeOf(\n                new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                        1, new SplitText(this.transaction.value(), \";\")\n                    )\n                ).value()\n            ).asString(),\n            DateTimeFormatter.ISO_OFFSET_DATE_TIME\n        ).value();\n    }\n\n    @Override\n    public long amount() throws IOException {\n        final String amnt = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    2, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.HEX.matcher(amnt).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid amount '%s' expecting 64-bit signed hex string with 16 symbols\",\n                        amnt\n                    )\n                            ).asString()\n            );\n        }\n        // @checkstyle MagicNumber (1 line)\n        return new BigInteger(amnt, 16).longValue();\n    }\n\n    @Override\n    public String prefix() throws IOException {\n        final String prefix = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    3, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n                    //@checkstyle MagicNumberCheck (1 line)\n        if (prefix.length() < 8 || prefix.length() > 32) {\n            throw new IOException(\"Invalid prefix size\");\n        }\n        if (!RtTransaction.PREFIX.matcher(prefix).matches()) {\n            throw new IOException(\"Invalid base64 prefix\");\n        }\n        return prefix;\n    }\n\n    @Override\n    public String bnf() throws IOException {\n        final String bnf = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    4, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.HEX.matcher(bnf).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid bnf string '%s', expecting hex string with 16 symbols\",\n                        bnf\n                    )\n                            ).asString()\n            );\n        }\n        return bnf;\n    }\n\n    @Override\n    public String details() throws IOException {\n        final String dtls = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    5, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.DTLS.matcher(dtls).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid details string '%s', does not match pattern '%s'\",\n                        dtls, RtTransaction.DTLS\n                    )\n                            ).asString()\n            );\n        }\n        return dtls;\n    }\n\n    @Override\n    public String signature() throws IOException {\n        final String sign = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    6, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        // @checkstyle MagicNumber (1 line)\n        if (sign.length() != 684\n            || !RtTransaction.SIGN.matcher(sign).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid signature '%s', expecting base64 string with 684 characters\",\n                        sign\n                    )\n                            ).asString()\n            );\n        }\n        return sign;\n    }\n\n    @Override\n    public String toString() {\n        return new UncheckedScalar<>(this.transaction).value();\n    }\n\n    @Override\n    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n    public boolean equals(final Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || this.getClass() != obj.getClass()) {\n            return false;\n        }\n        final RtTransaction that = (RtTransaction) obj;\n        return this.transaction.equals(that.transaction);\n    }\n\n    @Override\n    public int hashCode() {\n        return this.transaction.hashCode();\n    }\n}",
            "error": "",
            "span_id": 6305203511349083653
        },
        {
            "input": "src/main/java/io/zold/api/Copies.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport io.zold.api.Copies.Copy;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.cactoos.collection.ListOf;\nimport org.cactoos.iterable.IterableEnvelope;\nimport org.cactoos.iterable.IterableOf;\nimport org.cactoos.iterable.Joined;\nimport org.cactoos.iterable.Mapped;\n\n/**\n * Multiple copies of a Wallet.\n * @since 1.0\n */\npublic final class Copies extends IterableEnvelope<Copy> {\n\n    /**\n     * Ctor.\n     * @param id Id of the wallet to pull.\n     * @param remotes Remote nodes.\n     */\n    Copies(final long id, final Iterable<Remote> remotes) {\n        super(() -> copies(id, remotes));\n    }\n\n    /**\n     * Builds copies from remotes.\n     * @param id Wallet's id\n     * @param remotes List of remotes\n     * @return Iterable Iterable of Copy\n     * @throws IOException If fails\n     */\n    @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\")\n    private static Iterable<Copy> copies(final long id,\n        final Iterable<Remote> remotes) throws IOException {\n        final List<Copy> copies = new ArrayList<>(10);\n        for (final Remote remote : remotes) {\n            final Wallet wallet = remote.pull(id);\n            boolean updated = false;\n            for (int idx = 0; idx < copies.size(); idx += 1) {\n                final Copy copy = copies.get(idx);\n                if (Copies.equalWallets(copies.get(idx).wallet(), wallet)) {\n                    copies.set(idx, copy.with(remote));\n                    updated = true;\n                }\n            }\n            if (!updated) {\n                copies.add(new Copy(wallet, remote));\n            }\n        }\n        return new IterableOf<>(copies);\n    }\n\n    /**\n     * Checks if content of two wallets is equal.\n     * @param first First wallet\n     * @param second Second wallet\n     * @return Boolean Boolean\n     * @throws IOException If fails\n     * @todo #56:30min Compare the entire content of two wallets. In addition\n     *  to id, compare RSA key and all transactions one by one. Entire content\n     *  of each transaction should be compared.\n     */\n    private static boolean equalWallets(final Wallet first,\n        final Wallet second) throws IOException {\n        return first.id() == second.id() && new CollectionOf<>(\n            first.ledger()\n        ).size() == new CollectionOf<>(second.ledger()).size();\n    }\n\n    /**\n     * One copy of a {@link Wallet}.\n     * @since 1.0\n     */\n    static final class Copy implements Comparable<Copy> {\n\n        /**\n         * The wallet.\n         */\n        private final Wallet wlt;\n\n        /**\n         * The remote nodes where the wallet was found.\n         */\n        private final Iterable<Remote> remotes;\n\n        /**\n         * Ctor.\n         * @param wallet The wallet.\n         * @param remotes The remote nodes where the wallet was found.\n         */\n        Copy(final Wallet wallet, final Remote... remotes) {\n            this(wallet, new IterableOf<>(remotes));\n        }\n\n        /**\n         * Ctor.\n         * @param wallet The wallet.\n         * @param remotes The remote nodes where the wallet was found.\n         */\n        Copy(final Wallet wallet, final Iterable<Remote> remotes) {\n            this.wlt = wallet;\n            this.remotes = remotes;\n        }\n\n        /**\n         * Creates new Copy instance with additional remote.\n         * @param remote Remote\n         * @return Copy Copy\n         */\n        public Copy with(final Remote remote) {\n            return new Copy(this.wallet(), new Joined<>(remote, this.remotes));\n        }\n\n        /**\n         * The wallet.\n         * @return The wallet.\n         */\n        public Wallet wallet() {\n            return this.wlt;\n        }\n\n        /**\n         * The summary of the score of all the remote nodes.\n         * @return The score.\n         */\n        public Score score() {\n            return new Score.Summed(new Mapped<>(Remote::score, this.remotes));\n        }\n\n        @Override\n        public int compareTo(final Copy other) {\n            return this.score().compareTo(other.score());\n        }\n    }\n}\n",
            "error": "",
            "span_id": 18296019079628962519
        },
        {
            "input": "src/main/java/io/zold/api/RtScore.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport org.cactoos.Text;\nimport org.cactoos.iterable.LengthOfText;\n\n/**\n * Default implementation for {@link Score}.\n *\n * @since 1.0\n */\npublic final class RtScore implements Score {\n\n    /**\n     * The suffixes.\n     */\n    private final Iterable<Text> sfxs;\n\n    /**\n     * Ctor.\n     *\n     * @param sfxs The suffixes.\n     */\n    RtScore(final Iterable<Text> sfxs) {\n        this.sfxs = sfxs;\n    }\n\n    @Override\n    public int compareTo(final Score other) {\n        return new LengthOf(other.suffixes()).intValue()\n            - new LengthOf(this.sfxs).intValue();\n    }\n\n    @Override\n    public Iterable<Text> suffixes() {\n        return this.sfxs;\n    }\n}\n",
            "error": "",
            "span_id": 1528101744058791000
        },
        {
            "input": "src/main/java/io/zold/api/Remote.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npackage io.zold.api;\n\nimport org.cactoos.iterable.Repeated;\nimport org.cactoos.text.RandomString;\n\n/**\n * Remote node.\n *\n * @since 0.1\n */\npublic interface Remote {\n    /**\n     * This remote node's score.\n     * @return The score\n     */\n    Score score();\n\n    /**\n     * Pushes a {@link Wallet} to this remote.\n     * @param wallet Wallet to be pushed to this remote\n     */\n    void push(Wallet wallet);\n\n    /**\n     * Pull a wallet from this remote.\n     * @param id The wallet's {@link Wallet#id() id}\n     * @return The wallet\n     */\n    Wallet pull(long id);\n\n    /**\n     * A Fake {@link Remote}.\n     */\n    final class Fake implements Remote {\n\n        /**\n         * The remote's score.\n         */\n        private final Score score;\n\n        /**\n         * Ctor.\n         * @param val The remote's score value\n         */\n        public Fake(final int val) {\n            this(new RtScore(\n                new Repeated<>(val, new RandomText())\n            ));\n        }\n\n        /**\n         * Ctor.\n         * @param score The remote's score\n         */\n        public Fake(final Score score) {\n            this.score = score;\n        }\n\n        @Override\n        public Score score() {\n            return this.score;\n        }\n\n        @Override\n        public void push(final Wallet wallet) {\n            // nothing\n        }\n\n        @Override\n        public Wallet pull(final long id) {\n            return new Wallet.Fake(id);\n        }\n    }\n}\n",
            "error": "",
            "span_id": 9111313558759881938
        },
        {
            "input": "src/main/java/io/zold/api/Wallet.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.nio.file.Path;\nimport org.cactoos.collection.FilteredCollection;\nimport org.cactoos.iterable.IterableOf;\nimport org.cactoos.iterable.Joined;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.iterable.Skipped;\nimport org.cactoos.list.ListOf;\nimport org.cactoos.scalar.Checked;\nimport org.cactoos.scalar.Or;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.SplitString;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Wallet.\n * @since 0.1\n * @todo #16:30min Merge method should update transactions\n *  in wallet's file and return concrete implementation not a fake one.\n *  Beware that tests should be refactored to take care of file cleanup\n *  after each case that merges wallets.\n */\n@SuppressWarnings({\"PMD.ShortMethodName\", \"PMD.TooManyMethods\",\n    \"PMD.UnusedFormalParameter\"})\npublic interface Wallet {\n    /**\n     * This wallet's ID: an unsigned 64-bit integer.\n     * @return This wallet's id\n     * @throws IOException If an IO error occurs\n     * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n     * @checkstyle MethodName (2 lines)\n     */\n    long id() throws IOException;\n\n    /**\n     * Make a payment.\n     * @param amt Amount to pay in zents\n     * @param bnf Wallet ID of beneficiary\n     * @throws IOException If an IO error occurs\n     */\n    void pay(long amt, long bnf) throws IOException;\n\n    /**\n     * Merge both {@code this} and {@code other}. Fails if they are not the\n     * same wallet, as identified by their {@link #id() id}.\n     * @param other Other wallet\n     * @return The merged wallet\n     * @throws IOException If an IO error occurs\n     */\n    Wallet merge(Wallet other) throws IOException;\n\n    /**\n     * This wallet's ledger.\n     * @return This wallet's ledger\n     */\n    Iterable<Transaction> ledger();\n\n    /**\n     * This wallet's RSA key.\n     * @return This wallet's RSA key.\n     */\n    String key();\n\n    /**\n     * A Fake {@link Wallet}.\n     * @since 1.0\n     * @todo #65:30min Complete Wallet implementations with id, public RSA\n     *  key and network id. Wallets.create(Long, String, String) must\n     *  create a Wallet with these strings set and a constructor must be\n     *  added to all Walletl realizations (Wallet(final long id, final String\n     *  pubkey, final String network, final Transaction... transactions). After\n     *  completing these implementations fix tests that uses Wallets.create()\n     *  and all Wallet realizations.\n     */\n    final class Fake implements Wallet {\n\n        /**\n         * The wallet id.\n         */\n        private final long id;\n\n        /**\n         * Transactions.\n         */\n        private final Iterable<Transaction> transactions;\n\n        /**\n         * Constructor.\n         * @param id The wallet id.\n         */\n        public Fake(final long id) {\n            this(id, new IterableOf<>());\n        }\n\n        /**\n         * Ctor.\n         * @param id The wallet id.\n         * @param transactions Transactions.\n         */\n        public Fake(final long id, final Transaction... transactions) {\n            this(id, new IterableOf<>(transactions));\n        }\n\n        /**\n         * Constructor.\n         * @param id The wallet id.\n         * @param pubkey The public RSA key of the wallet owner.\n         * @param network The network the walet belongs to.\n         * @checkstyle UnusedFormalParameter (2 lines)\n         */\n        public Fake(final long id, final String pubkey, final String network) {\n            this(id);\n        }\n\n        /**\n         * Ctor.\n         * @param id The wallet id.\n         * @param transactions Transactions.\n         */\n        public Fake(final long id, final Iterable<Transaction> transactions) {\n            this.id = id;\n            this.transactions = transactions;\n        }\n\n        @Override\n        public long id() throws IOException {\n            return this.id;\n        }\n\n        @Override\n        public void pay(final long amt, final long bnf) {\n            // nothing\n        }\n\n        @Override\n        public Wallet merge(final Wallet other) {\n            return other;\n        }\n\n        @Override\n        public Iterable<Transaction> ledger() {\n            return this.transactions;\n        }\n\n        @Override\n        public String key() {\n            return Long.toString(this.id);\n        }\n    }\n\n    /**\n     * Default File implementation.\n     * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)\n     */\n    final class File implements Wallet {\n\n        /**\n         * Path of this wallet.\n         */\n        private final Path path;\n\n        /**\n         * Ctor.\n         * @param path Path of wallet\n         */\n        File(final Path path) {\n            this.path = path;\n        }\n\n        @Override\n        public long id() throws IOException {\n            return new CheckedScalar<>(\n                () -> Long.parseUnsignedLong(\n                    new ListOf<>(\n                        new SplitText(\n                            new TextOf(this.path),\n                            \"\\n\"\n                        )\n                    ).get(2).asString(),\n                    // @checkstyle MagicNumber (1 line)\n                    16\n                ),\n                e -> new IOException(e)\n            ).value();\n        }\n\n        @Override\n        public void pay(final long amt, final long bnf) throws IOException {\n            try (final Writer out = new FileWriter(this.path.toFile(), true)) {\n                out.write('\\n');\n                out.write(new CpTransaction(amt, bnf).toString());\n            }\n        }\n\n        // @todo #16:30min Following transactions should be ignored according\n        //  to the whitepaper:\n        //  a) If the transaction is negative and its signature is not valid,\n        //  it is ignored;\n        //  b) If the transaction makes the balance of the wallet negative,\n        //  it is ignored;\n        //  c) If the transaction is positive and it\u2019s absent in the paying\n        //  wallet (which exists at the node), it\u2019s ignored; If the paying\n        //  wallet doesn\u2019t exist at the node, the transaction is ignored;\n        @Override\n        public Wallet merge(final Wallet other) throws IOException {\n            if (other.id() != this.id()) {\n                throw new IOException(\n                    new UncheckedText(\n                        new FormattedText(\n                            \"Wallet ID mismatch, ours is %d, theirs is %d\",\n                            other.id(),\n                            this.id()\n                        )\n                    ).asString()\n                );\n            }\n            final Iterable<Transaction> ledger = this.ledger();\n            final Iterable<Transaction> candidates = new Filtered<>(\n                incoming -> new Filtered<>(\n                    origin -> new UncheckedScalar<>(\n                        new Or(\n                            () -> incoming.equals(origin),\n                            () -> incoming.id() == origin.id()\n                                && incoming.bnf().equals(origin.bnf()),\n                            () -> incoming.id() == origin.id()\n                                && incoming.amount() < 0L,\n                            () -> incoming.prefix().equals(origin.prefix())\n                        )\n                    ).value(),\n                    ledger\n                ).isEmpty(),\n                other.ledger()\n            );\n            return new Wallet.Fake(\n                this.id(),\n                new Joined<Transaction>(ledger, candidates)\n            );\n        }\n\n        @Override\n        public Iterable<Transaction> ledger() {\n            return new Mapped<>(\n                txt -> new RtTransaction(txt.asString()),\n                new Skipped<>(\n                    new ListOf<>(\n                        new SplitText(\n                            new TextOf(this.path),\n                            \"\\\\n\"\n                        )\n                    ),\n                    // @checkstyle MagicNumberCheck (1 line)\n                    5\n                )\n            );\n        }\n\n        // @todo #54:30min Implement key method. This should return the\n        //  public RSA key of the wallet owner in Base64. Also add a unit test\n        //  to replace WalletTest.keyIsNotYetImplemented().\n        @Override\n        public String key() {\n            throw new UnsupportedOperationException(\n                \"key() not yet supported\"\n            );\n        }\n    }\n}",
            "error": "",
            "span_id": 12082605673494114204
        },
        {
            "input": "src/main/java/io/zold/api/TaxBeneficiaries.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.util.Comparator;\nimport org.cactoos.iterable.Filtered;\nimport org.cactoos.iterable.IterableEnvelope;\nimport org.cactoos.iterable.LengthOfText;\nimport org.cactoos.iterable.Sorted;\n\n/**\n * {@link Remote} nodes that should receive taxes.\n *\n * @since 1.0\n */\npublic final class TaxBeneficiaries extends IterableEnvelope<Remote> {\n\n    /**\n     * Ctor.\n     *\n     * @param nodes Remote nodes to select from.\n     */\n    public TaxBeneficiaries(final Iterable<Remote> nodes) {\n        super(() -> new Sorted<>(\n            Comparator.comparing(Remote::score),\n            new Filtered<>(\n                // @checkstyle MagicNumberCheck (1 line)\n                n -> new LengthOf(n.score().suffixes()).intValue() >= 16,\n                nodes\n            )\n        ));\n    }\n}\n",
            "error": "",
            "span_id": 15290402021705160810
        },
        {
            "input": "src/main/java/io/zold/api/RtTransaction.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.cactoos.Text;\nimport org.cactoos.iterable.LengthOfText;\nimport org.cactoos.list.ListOf;\nimport org.cactoos.scalar.IoChecked;\nimport org.cactoos.scalar.ItemAt;\nimport org.cactoos.scalar.Sticky;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.SplitString;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.TrimmedString;\nimport org.cactoos.text.UncheckedText;\nimport org.cactoos.time.ZonedDateTimeOf;\n\n/**\n * RtTransaction.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCoupling (3 lines)\n */\n@SuppressWarnings({\"PMD.AvoidCatchingGenericException\",\n    \"PMD.AvoidFieldNameMatchingMethodName\"})\nfinal class RtTransaction implements Transaction {\n\n    /**\n     * Pattern for Prefix String.\n     */\n    private static final Pattern PREFIX = Pattern.compile(\n        //@checkstyle LineLengthCheck (1 line)\n        \"^([A-Za-z0-9+\\\\/]{4})*([A-Za-z0-9+\\\\/]{4}|[A-Za-z0-9+\\\\/]{3}=|[A-Za-z0-9+\\\\/]{2}==)$\"\n    );\n\n    /**\n     * Pattern for 16 symbol hex string.\n     */\n    private static final Pattern HEX = Pattern.compile(\"[A-Fa-f0-9]{16}\");\n\n    /**\n     * Pattern for parsing Signature.\n     */\n    private static final Pattern SIGN = Pattern.compile(\"[A-Za-z0-9+/]+={0,3}\");\n\n    /**\n     * Pattern for Details string.\n     */\n    private static final Pattern DTLS =\n        Pattern.compile(\"[A-Za-z0-9 -.]{1,512}\");\n\n    /**\n     * Pattern for ID String.\n     */\n    private static final Pattern IDENT = Pattern.compile(\"[A-Fa-f0-9]{4}\");\n\n    /**\n     * String representation of transaction.\n     */\n    private final IoCheckedScalar<String> transaction;\n\n    /**\n     * Ctor.\n     * @param trnsct String representation of transaction\n     */\n    RtTransaction(final String trnsct) {\n        this.transaction = new IoCheckedScalar<>(\n            new StickyScalar<>(\n                () -> {\n                    if (\n                        new TrimmedText(\n                            new TextOf(trnsct)\n                        ).asString().isEmpty()\n                    ) {\n                        throw new IOException(\n                            \"Invalid transaction string: string is empty\"\n                        );\n                    }\n                    final List<Text> pieces =\n                        new ListOf<>(\n                            new SplitText(trnsct, \";\")\n                        );\n                    // @checkstyle MagicNumberCheck (1 line)\n                    if (new LengthOf(pieces).intValue() != 7) {\n                        throw new IOException(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                                \"Invalid transaction string: expected 7 fields, but found %d\",\n                                pieces.size()\n                            ).asString()\n                        );\n                    }\n                    return trnsct;\n                }\n            )\n        );\n    }\n\n    @Override\n    @SuppressWarnings(\"PMD.ShortMethodName\")\n    public int id() throws IOException {\n        final String ident = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    0, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.IDENT.matcher(ident).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid ID '%s' expecting 16-bit unsigned hex string with 4 symbols\",\n                        ident\n                    )\n                            ).asString()\n            );\n        }\n        // @checkstyle MagicNumber (1 line)\n        return Integer.parseUnsignedInt(ident, 16);\n    }\n\n    @Override\n    public ZonedDateTime time() throws IOException {\n        return new ZonedDateTimeOf(\n                new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                        1, new SplitText(this.transaction.value(), \";\")\n                    )\n                ).value()\n            ).asString(),\n            DateTimeFormatter.ISO_OFFSET_DATE_TIME\n        ).value();\n    }\n\n    @Override\n    public long amount() throws IOException {\n        final String amnt = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    2, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.HEX.matcher(amnt).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid amount '%s' expecting 64-bit signed hex string with 16 symbols\",\n                        amnt\n                    )\n                            ).asString()\n            );\n        }\n        // @checkstyle MagicNumber (1 line)\n        return new BigInteger(amnt, 16).longValue();\n    }\n\n    @Override\n    public String prefix() throws IOException {\n        final String prefix = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    3, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n                    //@checkstyle MagicNumberCheck (1 line)\n        if (prefix.length() < 8 || prefix.length() > 32) {\n            throw new IOException(\"Invalid prefix size\");\n        }\n        if (!RtTransaction.PREFIX.matcher(prefix).matches()) {\n            throw new IOException(\"Invalid base64 prefix\");\n        }\n        return prefix;\n    }\n\n    @Override\n    public String bnf() throws IOException {\n        final String bnf = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    4, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.HEX.matcher(bnf).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid bnf string '%s', expecting hex string with 16 symbols\",\n                        bnf\n                    )\n                            ).asString()\n            );\n        }\n        return bnf;\n    }\n\n    @Override\n    public String details() throws IOException {\n        final String dtls = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    5, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        if (!RtTransaction.DTLS.matcher(dtls).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid details string '%s', does not match pattern '%s'\",\n                        dtls, RtTransaction.DTLS\n                    )\n                            ).asString()\n            );\n        }\n        return dtls;\n    }\n\n    @Override\n    public String signature() throws IOException {\n        final String sign = new UncheckedText(\n            new IoCheckedScalar<>(\n                new ItemAt<>(\n                    //@checkstyle MagicNumberCheck (1 line)\n                    6, new SplitText(this.transaction.value(), \";\")\n                )\n            ).value()\n        ).asString();\n        // @checkstyle MagicNumber (1 line)\n        if (sign.length() != 684\n            || !RtTransaction.SIGN.matcher(sign).matches()) {\n                        throw new IOException(\n                new UncheckedText(\n                            new FormattedText(\n                                // @checkstyle LineLength (1 line)\n                        \"Invalid signature '%s', expecting base64 string with 684 characters\",\n                        sign\n                    )\n                            ).asString()\n            );\n        }\n        return sign;\n    }\n\n    @Override\n    public String toString() {\n        return new UncheckedScalar<>(this.transaction).value();\n    }\n\n    @Override\n    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n    public boolean equals(final Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || this.getClass() != obj.getClass()) {\n            return false;\n        }\n        final RtTransaction that = (RtTransaction) obj;\n        return this.transaction.equals(that.transaction);\n    }\n\n    @Override\n    public int hashCode() {\n        return this.transaction.hashCode();\n    }\n}",
            "error": "",
            "span_id": 16763283397884967555
        },
        {
            "input": "src/main/java/io/zold/api/RtNetwork.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.iterable.Sorted;\nimport org.cactoos.scalar.IoChecked;\nimport org.cactoos.scalar.Reduced;\n\n/**\n * Network implementation.\n *\n * @since 0.1\n * @todo #5:30min We must figure out how to 'load' some network. Loading the\n *  network will be loading a local JSON file that contains data on all\n *  remote nodes that we know about; we must have a pre configured set of\n *  remote nodes built in too. See whitepaper for details.\n */\npublic final class RtNetwork implements Network {\n\n    /**\n     * {@link Remote} nodes.\n     */\n    private final Iterable<Remote> nodes;\n\n    /**\n     * Constructor.\n     * @param remotes Remotes of the network\n     */\n    RtNetwork(final Iterable<Remote> remotes) {\n        this.nodes =  remotes;\n    }\n\n    @Override\n    public void push(final Wallet wallet) {\n        this.nodes.forEach(\n            remote -> remote.push(wallet)\n        );\n    }\n\n    @Override\n    public Wallet pull(final long id) throws IOException {\n        return new IoCheckedScalar<>(\n            new Reduced<>(\n                Wallet::merge,\n                new Mapped<>(\n                    c -> c::wallet,\n                    new Sorted<>(new Copies(id, this))\n                )\n            )\n        ).value();\n    }\n\n    @Override\n    public Iterator<Remote> iterator() {\n        return this.nodes.iterator();\n    }\n}\n",
            "error": "",
            "span_id": 463956347125222462
        },
        {
            "input": "src/main/java/io/zold/api/WalletsIn.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport java.io.IOException;\nimport java.nio.file.FileSystems;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Iterator;\nimport java.util.Random;\nimport org.cactoos.Scalar;\nimport org.cactoos.func.IoCheckedFunc;\nimport org.cactoos.io.Directory;\nimport org.cactoos.iterable.Filtered;\nimport org.cactoos.iterable.Mapped;\nimport org.cactoos.scalar.IoChecked;\nimport org.cactoos.scalar.Solid;\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.JoinedString;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Wallets in path.\n * @since 0.1\n * @checkstyle ClassDataAbstractionCoupling (2 lines)\n */\npublic final class WalletsIn implements Wallets {\n\n    /**\n     * Path containing wallets.\n     */\n    private final IoCheckedScalar<Path> path;\n\n    /**\n     * Filter for matching file extensions.\n     */\n    private final IoCheckedFunc<Path, Boolean> filter;\n\n    /**\n     * Wallets file extension.\n     */\n    private final String ext;\n\n    /**\n     * Randomizer.\n     */\n    private final Random random;\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     */\n    public WalletsIn(final Path pth) {\n        this(\n            () -> pth,\n            \"z\",\n            new Random()\n        );\n    }\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     * @param random Randomizer\n     */\n    public WalletsIn(final Path pth, final Random random) {\n        this(\n            () -> pth,\n            \"z\",\n            random\n        );\n    }\n\n    /**\n     * Ctor.\n     * @param pth Path with wallets\n     * @param random Randomizer\n     * @param ext Wallets file extension\n     */\n    public WalletsIn(final Scalar<Path> pth, final String ext,\n        final Random random) {\n        this.path = new IoCheckedScalar<>(\n            new SolidScalar<>(pth)\n        );\n        this.filter = new IoCheckedFunc<Path, Boolean>(\n            (file) -> file.toFile().isFile()\n                && FileSystems.getDefault()\n                .getPathMatcher(String.format(\"glob:**.%s\", ext))\n                .matches(file)\n        );\n        this.ext = ext;\n        this.random = random;\n    }\n\n    @Override\n    public Wallet create() throws IOException {\n        final Path wpth = this.path.value().resolve(\n            new JoinedText(\n                \".\",\n                Long.toHexString(this.random.nextLong()),\n                this.ext\n            ).asString()\n        );\n        if (wpth.toFile().exists()) {\n            throw new IOException(\n                new UncheckedText(\n                    new FormattedText(\n                        \"Wallet in path %s already exists\",\n                        wpth.toUri().getPath()\n                    )\n            ).asString()\n            );\n        }\n        Files.createFile(wpth);\n        return new Wallet.File(wpth);\n    }\n\n    @Override\n    // @todo #65:30min Create the new wallet in the path with all wallets.\n    //  It should contain the correct content according to the\n    //  white paper (network, protocol version, id and public RSA key). After\n    //  this remove exception expect for tests on WalletsInTest.\n    public Wallet create(final long id, final String pubkey, final String\n        network) throws IOException {\n        throw new UnsupportedOperationException(\n            \"WalletsIn.create(String, String, String) not supported\"\n        );\n    }\n\n    @Override\n    public Iterator<Wallet> iterator() {\n        try {\n            return new Mapped<Path, Wallet>(\n                (pth) -> new Wallet.File(pth),\n                new Filtered<>(this.filter, new Directory(this.path.value()))\n            ).iterator();\n        } catch (final IOException ex) {\n            throw new IllegalStateException(ex);\n        }\n    }\n}",
            "error": "",
            "span_id": 8059670762927220811
        },
        {
            "input": "src/main/java/io/zold/api/Copies.java",
            "output": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018-2023 Yegor Bugayenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage io.zold.api;\n\nimport io.zold.api.Copies.Copy;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.cactoos.collection.ListOf;\nimport org.cactoos.iterable.IterableEnvelope;\nimport org.cactoos.iterable.IterableOf;\nimport org.cactoos.iterable.Joined;\nimport org.cactoos.iterable.Mapped;\n\n/**\n * Multiple copies of a Wallet.\n * @since 1.0\n */\npublic final class Copies extends IterableEnvelope<Copy> {\n\n    /**\n     * Ctor.\n     * @param id Id of the wallet to pull.\n     * @param remotes Remote nodes.\n     */\n    Copies(final long id, final Iterable<Remote> remotes) {\n        super(() -> copies(id, remotes));\n    }\n\n    /**\n     * Builds copies from remotes.\n     * @param id Wallet's id\n     * @param remotes List of remotes\n     * @return Iterable Iterable of Copy\n     * @throws IOException If fails\n     */\n    @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\")\n    private static Iterable<Copy> copies(final long id,\n        final Iterable<Remote> remotes) throws IOException {\n        final List<Copy> copies = new ArrayList<>(10);\n        for (final Remote remote : remotes) {\n            final Wallet wallet = remote.pull(id);\n            boolean updated = false;\n            for (int idx = 0; idx < copies.size(); idx += 1) {\n                final Copy copy = copies.get(idx);\n                if (Copies.equalWallets(copies.get(idx).wallet(), wallet)) {\n                    copies.set(idx, copy.with(remote));\n                    updated = true;\n                }\n            }\n            if (!updated) {\n                copies.add(new Copy(wallet, remote));\n            }\n        }\n        return new IterableOf<>(copies);\n    }\n\n    /**\n     * Checks if content of two wallets is equal.\n     * @param first First wallet\n     * @param second Second wallet\n     * @return Boolean Boolean\n     * @throws IOException If fails\n     * @todo #56:30min Compare the entire content of two wallets. In addition\n     *  to id, compare RSA key and all transactions one by one. Entire content\n     *  of each transaction should be compared.\n     */\n    private static boolean equalWallets(final Wallet first,\n        final Wallet second) throws IOException {\n        return first.id() == second.id() && new CollectionOf<>(\n            first.ledger()\n        ).size() == new CollectionOf<>(second.ledger()).size();\n    }\n\n    /**\n     * One copy of a {@link Wallet}.\n     * @since 1.0\n     */\n    static final class Copy implements Comparable<Copy> {\n\n        /**\n         * The wallet.\n         */\n        private final Wallet wlt;\n\n        /**\n         * The remote nodes where the wallet was found.\n         */\n        private final Iterable<Remote> remotes;\n\n        /**\n         * Ctor.\n         * @param wallet The wallet.\n         * @param remotes The remote nodes where the wallet was found.\n         */\n        Copy(final Wallet wallet, final Remote... remotes) {\n            this(wallet, new IterableOf<>(remotes));\n        }\n\n        /**\n         * Ctor.\n         * @param wallet The wallet.\n         * @param remotes The remote nodes where the wallet was found.\n         */\n        Copy(final Wallet wallet, final Iterable<Remote> remotes) {\n            this.wlt = wallet;\n            this.remotes = remotes;\n        }\n\n        /**\n         * Creates new Copy instance with additional remote.\n         * @param remote Remote\n         * @return Copy Copy\n         */\n        public Copy with(final Remote remote) {\n            return new Copy(this.wallet(), new Joined<>(remote, this.remotes));\n        }\n\n        /**\n         * The wallet.\n         * @return The wallet.\n         */\n        public Wallet wallet() {\n            return this.wlt;\n        }\n\n        /**\n         * The summary of the score of all the remote nodes.\n         * @return The score.\n         */\n        public Score score() {\n            return new Score.Summed(new Mapped<>(Remote::score, this.remotes));\n        }\n\n        @Override\n        public int compareTo(final Copy other) {\n            return this.score().compareTo(other.score());\n        }\n    }\n}\n",
            "error": "",
            "span_id": 6654435846063693134
        }
    ],
    "get_directory_tree": [
        {
            "input": "src/main/java/io/zold/api",
            "output": "[\n    {\n        \"name\": \"RtNetwork.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Wallets.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"package-info.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Remote.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CpTransaction.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Transaction.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Network.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TaxBeneficiaries.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Score.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"WalletsIn.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Taxes.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Copies.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"RtTransaction.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Wallet.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"RtScore.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 14604410714550633046
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}