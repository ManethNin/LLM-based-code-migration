diff --git a/src/main/java/io/zold/api/Copies.java b/src/main/java/io/zold/api/Copies.java
index 815b506..42bc162 100644
--- a/src/main/java/io/zold/api/Copies.java
+++ b/src/main/java/io/zold/api/Copies.java
@@ -27,7 +27,7 @@ import io.zold.api.Copies.Copy;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
-import org.cactoos.collection.CollectionOf;
+import org.cactoos.collection.ListOf;
 import org.cactoos.iterable.IterableEnvelope;
 import org.cactoos.iterable.IterableOf;
 import org.cactoos.iterable.Joined;
diff --git a/src/main/java/io/zold/api/Remote.java b/src/main/java/io/zold/api/Remote.java
index 7124353..bfd5df0 100644
--- a/src/main/java/io/zold/api/Remote.java
+++ b/src/main/java/io/zold/api/Remote.java
@@ -25,7 +25,7 @@
 package io.zold.api;
 
 import org.cactoos.iterable.Repeated;
-import org.cactoos.text.RandomText;
+import org.cactoos.text.RandomString;
 
 /**
  * Remote node.
diff --git a/src/main/java/io/zold/api/RtNetwork.java b/src/main/java/io/zold/api/RtNetwork.java
index d85be79..313859b 100644
--- a/src/main/java/io/zold/api/RtNetwork.java
+++ b/src/main/java/io/zold/api/RtNetwork.java
@@ -27,7 +27,7 @@ import java.io.IOException;
 import java.util.Iterator;
 import org.cactoos.iterable.Mapped;
 import org.cactoos.iterable.Sorted;
-import org.cactoos.scalar.IoCheckedScalar;
+import org.cactoos.scalar.IoChecked;
 import org.cactoos.scalar.Reduced;
 
 /**
diff --git a/src/main/java/io/zold/api/RtScore.java b/src/main/java/io/zold/api/RtScore.java
index 6206016..40f680d 100644
--- a/src/main/java/io/zold/api/RtScore.java
+++ b/src/main/java/io/zold/api/RtScore.java
@@ -24,7 +24,7 @@
 package io.zold.api;
 
 import org.cactoos.Text;
-import org.cactoos.iterable.LengthOf;
+import org.cactoos.iterable.LengthOfText;
 
 /**
  * Default implementation for {@link Score}.
diff --git a/src/main/java/io/zold/api/RtTransaction.java b/src/main/java/io/zold/api/RtTransaction.java
index 8385c61..e0240a9 100644
--- a/src/main/java/io/zold/api/RtTransaction.java
+++ b/src/main/java/io/zold/api/RtTransaction.java
@@ -30,16 +30,16 @@ import java.time.format.DateTimeFormatter;
 import java.util.List;
 import java.util.regex.Pattern;
 import org.cactoos.Text;
-import org.cactoos.iterable.LengthOf;
+import org.cactoos.iterable.LengthOfText;
 import org.cactoos.list.ListOf;
-import org.cactoos.scalar.IoCheckedScalar;
+import org.cactoos.scalar.IoChecked;
 import org.cactoos.scalar.ItemAt;
-import org.cactoos.scalar.StickyScalar;
-import org.cactoos.scalar.UncheckedScalar;
+import org.cactoos.scalar.Sticky;
+import org.cactoos.scalar.Unchecked;
 import org.cactoos.text.FormattedText;
-import org.cactoos.text.SplitText;
+import org.cactoos.text.SplitString;
 import org.cactoos.text.TextOf;
-import org.cactoos.text.TrimmedText;
+import org.cactoos.text.TrimmedString;
 import org.cactoos.text.UncheckedText;
 import org.cactoos.time.ZonedDateTimeOf;
 
@@ -135,14 +135,14 @@ final class RtTransaction implements Transaction {
             ).value()
         ).asString();
         if (!RtTransaction.IDENT.matcher(ident).matches()) {
-            throw new IOException(
+                        throw new IOException(
                 new UncheckedText(
-                    new FormattedText(
-                        // @checkstyle LineLength (1 line)
+                            new FormattedText(
+                                // @checkstyle LineLength (1 line)
                         "Invalid ID '%s' expecting 16-bit unsigned hex string with 4 symbols",
                         ident
                     )
-                ).asString()
+                            ).asString()
             );
         }
         // @checkstyle MagicNumber (1 line)
@@ -152,9 +152,9 @@ final class RtTransaction implements Transaction {
     @Override
     public ZonedDateTime time() throws IOException {
         return new ZonedDateTimeOf(
-            new UncheckedText(
-                new IoCheckedScalar<>(
-                    new ItemAt<>(
+                new UncheckedText(
+            new IoCheckedScalar<>(
+                new ItemAt<>(
                         1, new SplitText(this.transaction.value(), ";")
                     )
                 ).value()
@@ -173,14 +173,14 @@ final class RtTransaction implements Transaction {
             ).value()
         ).asString();
         if (!RtTransaction.HEX.matcher(amnt).matches()) {
-            throw new IOException(
+                        throw new IOException(
                 new UncheckedText(
-                    new FormattedText(
-                        // @checkstyle LineLength (1 line)
+                            new FormattedText(
+                                // @checkstyle LineLength (1 line)
                         "Invalid amount '%s' expecting 64-bit signed hex string with 16 symbols",
                         amnt
                     )
-                ).asString()
+                            ).asString()
             );
         }
         // @checkstyle MagicNumber (1 line)
@@ -197,7 +197,7 @@ final class RtTransaction implements Transaction {
                 )
             ).value()
         ).asString();
-        //@checkstyle MagicNumberCheck (1 line)
+                    //@checkstyle MagicNumberCheck (1 line)
         if (prefix.length() < 8 || prefix.length() > 32) {
             throw new IOException("Invalid prefix size");
         }
@@ -218,14 +218,14 @@ final class RtTransaction implements Transaction {
             ).value()
         ).asString();
         if (!RtTransaction.HEX.matcher(bnf).matches()) {
-            throw new IOException(
+                        throw new IOException(
                 new UncheckedText(
-                    new FormattedText(
-                        // @checkstyle LineLength (1 line)
+                            new FormattedText(
+                                // @checkstyle LineLength (1 line)
                         "Invalid bnf string '%s', expecting hex string with 16 symbols",
                         bnf
                     )
-                ).asString()
+                            ).asString()
             );
         }
         return bnf;
@@ -242,14 +242,14 @@ final class RtTransaction implements Transaction {
             ).value()
         ).asString();
         if (!RtTransaction.DTLS.matcher(dtls).matches()) {
-            throw new IOException(
+                        throw new IOException(
                 new UncheckedText(
-                    new FormattedText(
-                        // @checkstyle LineLength (1 line)
+                            new FormattedText(
+                                // @checkstyle LineLength (1 line)
                         "Invalid details string '%s', does not match pattern '%s'",
                         dtls, RtTransaction.DTLS
                     )
-                ).asString()
+                            ).asString()
             );
         }
         return dtls;
@@ -268,14 +268,14 @@ final class RtTransaction implements Transaction {
         // @checkstyle MagicNumber (1 line)
         if (sign.length() != 684
             || !RtTransaction.SIGN.matcher(sign).matches()) {
-            throw new IOException(
+                        throw new IOException(
                 new UncheckedText(
-                    new FormattedText(
-                        // @checkstyle LineLength (1 line)
+                            new FormattedText(
+                                // @checkstyle LineLength (1 line)
                         "Invalid signature '%s', expecting base64 string with 684 characters",
                         sign
                     )
-                ).asString()
+                            ).asString()
             );
         }
         return sign;
@@ -303,4 +303,4 @@ final class RtTransaction implements Transaction {
     public int hashCode() {
         return this.transaction.hashCode();
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/zold/api/TaxBeneficiaries.java b/src/main/java/io/zold/api/TaxBeneficiaries.java
index 6ccdbbf..5729fea 100644
--- a/src/main/java/io/zold/api/TaxBeneficiaries.java
+++ b/src/main/java/io/zold/api/TaxBeneficiaries.java
@@ -26,7 +26,7 @@ package io.zold.api;
 import java.util.Comparator;
 import org.cactoos.iterable.Filtered;
 import org.cactoos.iterable.IterableEnvelope;
-import org.cactoos.iterable.LengthOf;
+import org.cactoos.iterable.LengthOfText;
 import org.cactoos.iterable.Sorted;
 
 /**
diff --git a/src/main/java/io/zold/api/Wallet.java b/src/main/java/io/zold/api/Wallet.java
index d149e1a..0bc88d0 100644
--- a/src/main/java/io/zold/api/Wallet.java
+++ b/src/main/java/io/zold/api/Wallet.java
@@ -27,17 +27,17 @@ import java.io.FileWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Path;
-import org.cactoos.collection.Filtered;
+import org.cactoos.collection.FilteredCollection;
 import org.cactoos.iterable.IterableOf;
 import org.cactoos.iterable.Joined;
 import org.cactoos.iterable.Mapped;
 import org.cactoos.iterable.Skipped;
 import org.cactoos.list.ListOf;
-import org.cactoos.scalar.CheckedScalar;
+import org.cactoos.scalar.Checked;
 import org.cactoos.scalar.Or;
-import org.cactoos.scalar.UncheckedScalar;
+import org.cactoos.scalar.Unchecked;
 import org.cactoos.text.FormattedText;
-import org.cactoos.text.SplitText;
+import org.cactoos.text.SplitString;
 import org.cactoos.text.TextOf;
 import org.cactoos.text.UncheckedText;
 
@@ -293,4 +293,4 @@ public interface Wallet {
             );
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/zold/api/WalletsIn.java b/src/main/java/io/zold/api/WalletsIn.java
index 065f80a..212aa3b 100644
--- a/src/main/java/io/zold/api/WalletsIn.java
+++ b/src/main/java/io/zold/api/WalletsIn.java
@@ -34,10 +34,10 @@ import org.cactoos.func.IoCheckedFunc;
 import org.cactoos.io.Directory;
 import org.cactoos.iterable.Filtered;
 import org.cactoos.iterable.Mapped;
-import org.cactoos.scalar.IoCheckedScalar;
-import org.cactoos.scalar.SolidScalar;
+import org.cactoos.scalar.IoChecked;
+import org.cactoos.scalar.Solid;
 import org.cactoos.text.FormattedText;
-import org.cactoos.text.JoinedText;
+import org.cactoos.text.JoinedString;
 import org.cactoos.text.UncheckedText;
 
 /**
@@ -129,7 +129,7 @@ public final class WalletsIn implements Wallets {
                         "Wallet in path %s already exists",
                         wpth.toUri().getPath()
                     )
-                ).asString()
+            ).asString()
             );
         }
         Files.createFile(wpth);
@@ -159,4 +159,4 @@ public final class WalletsIn implements Wallets {
             throw new IllegalStateException(ex);
         }
     }
-}
+}
\ No newline at end of file