{
    "validate_diffs": [],
    "compile_maven": [],
    "read_file": [
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java",
            "output": "package com.github.games647.changeskin.sponge;\n\nimport com.github.games647.changeskin.core.ChangeSkinCore;\nimport com.github.games647.changeskin.core.PlatformPlugin;\nimport com.github.games647.changeskin.core.message.NamespaceKey;\nimport com.github.games647.changeskin.sponge.bungee.CheckPermissionListener;\nimport com.github.games647.changeskin.sponge.bungee.UpdateSkinListener;\nimport com.github.games647.changeskin.sponge.command.InfoCommand;\nimport com.github.games647.changeskin.sponge.command.InvalidateCommand;\nimport com.github.games647.changeskin.sponge.command.SelectCommand;\nimport com.github.games647.changeskin.sponge.command.SetCommand;\nimport com.github.games647.changeskin.sponge.command.UploadCommand;\nimport com.google.inject.Inject;\nimport com.google.inject.Injector;\nimport com.google.inject.Singleton;\n\nimport java.nio.file.Path;\nimport java.util.UUID;\n\nimport org.slf4j.Logger;\nimport org.spongepowered.api.Platform.Type;\nimport org.spongepowered.api.Sponge;\nimport org.spongepowered.api.command.CommandManager;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.config.ConfigDir;\nimport org.spongepowered.api.event.Listener;\nimport org.spongepowered.api.event.game.state.GameInitializationEvent;\nimport org.spongepowered.api.event.game.state.GamePreInitializationEvent;\nimport org.spongepowered.api.event.game.state.GameStoppingServerEvent;\nimport org.spongepowered.api.network.ChannelBinding.RawDataChannel;\nimport org.spongepowered.api.network.ChannelRegistrar;\nimport org.spongepowered.api.plugin.Plugin;\nimport org.spongepowered.api.text.serializer.TextSerializers;\n\nimport static com.github.games647.changeskin.core.message.CheckPermMessage.CHECK_PERM_CHANNEL;\nimport static com.github.games647.changeskin.core.message.SkinUpdateMessage.UPDATE_SKIN_CHANNEL;\nimport static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;\n\n@Singleton\n@Plugin(id = ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,\n        url = PomData.URL, description = PomData.DESCRIPTION)\npublic class ChangeSkinSponge implements PlatformPlugin<CommandSource> {\n\n    private final Path dataFolder;\n    private final Logger logger;\n    private final Injector injector;\n\n    private final ChangeSkinCore core = new ChangeSkinCore(this);\n    private final SpongeSkinAPI api = new SpongeSkinAPI(this);\n\n    private boolean initialized;\n\n    //We will place more than one config there (i.e. H2/SQLite database) -> sharedRoot = false\n    @Inject\n    ChangeSkinSponge(Logger logger, @ConfigDir(sharedRoot = false) Path dataFolder, Injector injector) {\n        this.dataFolder = dataFolder;\n        this.logger = logger;\n        this.injector = injector.createChildInjector(binder -> binder.bind(ChangeSkinCore.class).toInstance(core));\n    }\n\n    @Listener\n    public void onPreInit(GamePreInitializationEvent preInitEvent) {\n        //load config and database\n        try {\n            core.load(true);\n            initialized = true;\n        } catch (Exception ex) {\n            logger.error(\"Error initializing plugin. Disabling...\", ex);\n        }\n    }\n\n    @Listener\n    public void onInit(GameInitializationEvent initEvent) {\n        if (!initialized)\n            return;\n\n        CommandManager cmdManager = Sponge.getCommandManager();\n\n        //command and event register\n        cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), \"skin-select\", \"skinselect\");\n        cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), \"skin-info\");\n        cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), \"skin-upload\");\n        cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), \"changeskin\", \"setskin\", \"skin\");\n        cmdManager.register(this, injector.getInstance(InvalidateCommand.class)\n                .buildSpec(), \"skininvalidate\", \"skin-invalidate\");\n\n        Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));\n\n        //incoming channel\n        ChannelRegistrar channelReg = Sponge.getChannelRegistrar();\n        String updateChannelName = new NamespaceKey(ARTIFACT_ID, UPDATE_SKIN_CHANNEL).getCombinedName();\n        String permissionChannelName = new NamespaceKey(ARTIFACT_ID, CHECK_PERM_CHANNEL).getCombinedName();\n        RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);\n        RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);\n        updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));\n        permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));\n    }\n\n    @Listener\n    public void onShutdown(GameStoppingServerEvent stoppingServerEvent) {\n        core.close();\n    }\n\n    public ChangeSkinCore getCore() {\n        return core;\n    }\n\n    @Override\n    public boolean hasSkinPermission(CommandSource invoker, UUID uuid, boolean sendMessage) {\n        if (invoker.hasPermission(PomData.ARTIFACT_ID + \".skin.whitelist.\" + uuid)) {\n            return true;\n        }\n\n        //disallow - not whitelisted or blacklisted\n        if (sendMessage) {\n            sendMessage(invoker, \"no-permission\");\n        }\n\n        return false;\n    }\n\n    public SpongeSkinAPI getApi() {\n        return api;\n    }\n\n    @Override\n    public String getName() {\n        return PomData.NAME;\n    }\n\n    @Override\n    public Path getPluginFolder() {\n        return dataFolder;\n    }\n\n    @Override\n    public Logger getLog() {\n        return logger;\n    }\n\n    @Override\n    public void sendMessage(CommandSource receiver, String key) {\n        String message = core.getMessage(key);\n        if (message != null && receiver != null) {\n            receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));\n        }\n    }\n}\n",
            "error": "",
            "span_id": 3021664404358514821
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinUploader.java",
            "output": "package com.github.games647.changeskin.sponge.task;\n\nimport com.github.games647.changeskin.core.model.auth.Account;\nimport com.github.games647.changeskin.core.shared.task.SharedUploader;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.scheduler.Task;\n\npublic class SkinUploader extends SharedUploader {\n\n    private final ChangeSkinSponge plugin;\n    private final CommandSource invoker;\n\n    public SkinUploader(ChangeSkinSponge plugin, CommandSource invoker, Account owner, String url) {\n        super(plugin.getCore(), owner, url);\n\n        this.plugin = plugin;\n        this.invoker = invoker;\n    }\n\n    @Override\n    public void sendMessageInvoker(String key) {\n        plugin.sendMessage(invoker, key);\n    }\n\n    @Override\n    protected void scheduleChangeTask(String oldSkinUrl) {\n        Runnable task = new SkinChanger(plugin, owner, url, oldSkinUrl, invoker);\n        Task.builder().delay(1, TimeUnit.MINUTES).execute(task).async().submit(plugin);\n    }\n}\n",
            "error": "",
            "span_id": 16398100401532693409
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/task/NameResolver.java",
            "output": "package com.github.games647.changeskin.sponge.task;\n\nimport com.github.games647.changeskin.core.shared.task.SharedNameResolver;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\n\nimport java.util.UUID;\n\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.entity.living.player.Player;\n\npublic class NameResolver extends SharedNameResolver {\n\n    private final ChangeSkinSponge plugin;\n    private final CommandSource invoker;\n    private final Player receiver;\n    private final boolean keepSkin;\n\n    public NameResolver(ChangeSkinSponge plugin, CommandSource invoker, String targetName, Player receiver\n            , boolean keepSkin) {\n        super(plugin.getCore(), targetName, keepSkin);\n\n        this.plugin = plugin;\n        this.invoker = invoker;\n        this.receiver = receiver;\n        this.keepSkin = keepSkin;\n    }\n\n    @Override\n    public void sendMessageInvoker(String id) {\n        plugin.sendMessage(invoker, id);\n    }\n\n    @Override\n    protected boolean hasSkinPermission(UUID uuid) {\n        //todo check skin permissions\n        return true;\n    }\n\n    @Override\n    protected void scheduleDownloader(UUID uuid) {\n        //run this is the same thread\n        new SkinDownloader(plugin, invoker, receiver, uuid, keepSkin).run();\n    }\n}\n",
            "error": "",
            "span_id": 4831066508199456479
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinChanger.java",
            "output": "package com.github.games647.changeskin.sponge.task;\n\nimport com.github.games647.changeskin.core.model.auth.Account;\nimport com.github.games647.changeskin.core.shared.task.SharedSkinChanger;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\n\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.text.serializer.TextSerializers;\n\npublic class SkinChanger extends SharedSkinChanger {\n\n    private final CommandSource invoker;\n\n    public SkinChanger(ChangeSkinSponge plugin, Account owner, String url, String oldSkinUrl, CommandSource invoker) {\n        super(plugin.getCore(), owner, url, oldSkinUrl);\n\n        this.invoker = invoker;\n    }\n\n    @Override\n    protected void sendMessageInvoker(String localeMessage) {\n        invoker.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(localeMessage));\n    }\n}\n",
            "error": "",
            "span_id": 811228243415898260
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinApplier.java",
            "output": "package com.github.games647.changeskin.sponge.task;\n\nimport com.flowpowered.math.vector.Vector3d;\nimport com.github.games647.changeskin.core.model.UserPreference;\nimport com.github.games647.changeskin.core.model.skin.SkinModel;\nimport com.github.games647.changeskin.core.shared.task.SharedApplier;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\n\nimport java.util.UUID;\n\nimport org.spongepowered.api.Sponge;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.data.key.Keys;\nimport org.spongepowered.api.entity.living.player.Player;\nimport org.spongepowered.api.entity.living.player.tab.TabListEntry;\nimport org.spongepowered.api.scheduler.Task;\nimport org.spongepowered.api.world.Location;\nimport org.spongepowered.api.world.World;\n\npublic class SkinApplier extends SharedApplier {\n\n    private final ChangeSkinSponge plugin;\n    private final CommandSource invoker;\n    private final Player receiver;\n\n    public SkinApplier(ChangeSkinSponge plugin, CommandSource invoker, Player receiver, SkinModel targetSkin\n            , boolean keepSkin) {\n        super(plugin.getCore(), targetSkin, keepSkin);\n\n        this.plugin = plugin;\n        this.invoker = invoker;\n        this.receiver = receiver;\n    }\n\n    @Override\n    public void run() {\n        if (!isConnected()) {\n            return;\n        }\n\n        //uuid was successful resolved, we could now make a cooldown check\n        if (invoker instanceof Player) {\n            UUID uniqueId = ((Player) invoker).getUniqueId();\n            core.getCooldownService().trackPlayer(uniqueId);\n        }\n\n        if (core.getStorage() != null) {\n            UserPreference preferences = core.getStorage().getPreferences(receiver.getUniqueId());\n            save(preferences);\n        }\n\n        applySkin();\n    }\n\n    @Override\n    protected boolean isConnected() {\n        return receiver.isOnline();\n    }\n\n    @Override\n    protected void applyInstantUpdate() {\n        plugin.getApi().applySkin(receiver, targetSkin);\n\n        sendUpdate();\n        plugin.sendMessage(invoker, \"skin-changed\");\n    }\n\n    @Override\n    protected void sendMessage(String key) {\n        plugin.sendMessage(invoker, key);\n    }\n\n    @Override\n    protected void runAsync(Runnable runnable) {\n        Task.builder().async()\n                .execute(runnable)\n                .submit(plugin);\n    }\n\n    private void sendUpdate() {\n        sendUpdateSelf();\n\n        //triggers an update for others player to see the new skin\n        receiver.offer(Keys.VANISH, true);\n        receiver.offer(Keys.VANISH, false);\n    }\n\n    private void sendUpdateSelf() {\n        receiver.getTabList().removeEntry(receiver.getUniqueId());\n        receiver.getTabList().addEntry(TabListEntry.builder()\n                .displayName(receiver.getDisplayNameData().displayName().get())\n                .latency(receiver.getConnection().getLatency())\n                .list(receiver.getTabList())\n                .gameMode(receiver.getGameModeData().type().get())\n                .profile(receiver.getProfile())\n                .build());\n\n        Location<World> oldLocation = receiver.getLocation();\n        Vector3d rotation = receiver.getRotation();\n        World receiverWorld = receiver.getWorld();\n        Sponge.getServer().getWorlds()\n                .stream()\n                .filter(world -> !world.equals(receiverWorld))\n                .findFirst()\n                .ifPresent(world -> {\n                    receiver.setLocation(world.getSpawnLocation());\n                    receiver.setLocationAndRotation(oldLocation, rotation);\n                });\n    }\n}\n",
            "error": "",
            "span_id": 10201170681876906280
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinDownloader.java",
            "output": "package com.github.games647.changeskin.sponge.task;\n\nimport com.github.games647.changeskin.core.model.skin.SkinModel;\nimport com.github.games647.changeskin.core.shared.task.SharedDownloader;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\n\nimport java.util.UUID;\n\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.entity.living.player.Player;\nimport org.spongepowered.api.scheduler.Task;\n\npublic class SkinDownloader extends SharedDownloader {\n\n    private final ChangeSkinSponge plugin;\n    private final CommandSource invoker;\n    private final Player receiver;\n\n    public SkinDownloader(ChangeSkinSponge plugin, CommandSource invoker, Player receiver, UUID targetUUID\n            , boolean keepSkin) {\n        super(plugin.getCore(), keepSkin, targetUUID, receiver.getUniqueId());\n\n        this.plugin = plugin;\n        this.invoker = invoker;\n        this.receiver = receiver;\n    }\n\n    @Override\n    protected void scheduleApplyTask(SkinModel skinData) {\n        Runnable skinUpdater = new SkinApplier(plugin, invoker, receiver, skinData, keepSkin);\n        Task.builder().execute(skinUpdater).submit(plugin);\n    }\n\n    @Override\n    public void sendMessageInvoker(String id) {\n        plugin.sendMessage(invoker, id);\n    }\n}\n",
            "error": "",
            "span_id": 10302906445899548704
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/command/ChangeSkinCommand.java",
            "output": "package com.github.games647.changeskin.sponge.command;\n\nimport org.spongepowered.api.command.spec.CommandSpec;\n\n@FunctionalInterface\npublic interface ChangeSkinCommand {\n\n    CommandSpec buildSpec();\n}\n",
            "error": "",
            "span_id": 10662963495101350487
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java",
            "output": "package com.github.games647.changeskin.sponge.bungee;\n\nimport com.github.games647.changeskin.core.message.NamespaceKey;\nimport com.github.games647.changeskin.core.message.CheckPermMessage;\nimport com.github.games647.changeskin.core.message.PermResultMessage;\nimport com.github.games647.changeskin.core.model.skin.SkinModel;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\nimport com.google.common.io.ByteArrayDataInput;\nimport com.google.common.io.ByteArrayDataOutput;\nimport com.google.common.io.ByteStreams;\nimport com.google.inject.Inject;\n\nimport java.util.UUID;\n\nimport org.spongepowered.api.Platform.Type;\nimport org.spongepowered.api.entity.living.player.Player;\nimport org.spongepowered.api.network.ChannelBinding.RawDataChannel;\nimport org.spongepowered.api.network.ChannelBuf;\nimport org.spongepowered.api.network.ChannelRegistrar;\nimport org.spongepowered.api.network.RawDataListener;\nimport org.spongepowered.api.network.RemoteConnection;\n\nimport static com.github.games647.changeskin.core.message.PermResultMessage.PERMISSION_RESULT_CHANNEL;\nimport static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;\n\npublic class CheckPermissionListener implements RawDataListener {\n\n    private final ChangeSkinSponge plugin;\n    private final RawDataChannel permissionsResultChannel;\n\n    @Inject\n    CheckPermissionListener(ChangeSkinSponge plugin, ChannelRegistrar channelRegistrar) {\n        this.plugin = plugin;\n\n        String combinedName = new NamespaceKey(ARTIFACT_ID, PERMISSION_RESULT_CHANNEL).getCombinedName();\n        permissionsResultChannel = channelRegistrar.getOrCreateRaw(plugin, combinedName);\n    }\n\n    @Override\n    public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side) {\n\n        ByteArrayDataInput dataInput = ByteStreams.newDataInput(data.array());\n        CheckPermMessage checkMessage = new CheckPermMessage();\n        checkMessage.readFrom(dataInput);\n\n        CheckPermMessage message = new CheckPermMessage();\n        message.readFrom(dataInput);\n\n        checkPermissions((Player) connection, message);\n    }\n\n    private void checkPermissions(Player player, CheckPermMessage permMessage) {\n        UUID receiverUUID = permMessage.getReceiverUUD();\n        boolean op = permMessage.isOp();\n        SkinModel targetSkin = permMessage.getTargetSkin();\n        UUID skinProfile = targetSkin.getProfileId();\n\n        boolean success = op || checkBungeePerms(player, receiverUUID, permMessage.isSkinPerm(), skinProfile);\n        sendResultMessage(player, new PermResultMessage(success, targetSkin, receiverUUID));\n    }\n\n    private boolean checkBungeePerms(Player player, UUID receiverUUID, boolean skinPerm, UUID targetUUID) {\n        if (player.getUniqueId().equals(receiverUUID)) {\n            return checkPerm(player, \"command.setskin\", skinPerm, targetUUID);\n        }\n\n        return checkPerm(player, \"command.setskin.other\", skinPerm, targetUUID);\n    }\n\n    private boolean checkPerm(Player invoker, String node, boolean skinPerm, UUID targetUUID) {\n        String pluginName = plugin.getName().toLowerCase();\n        boolean hasCommandPerm = invoker.hasPermission(pluginName +  '.' + node);\n        if (skinPerm) {\n            return hasCommandPerm && plugin.hasSkinPermission(invoker, targetUUID, false);\n        }\n\n        return hasCommandPerm;\n    }\n\n    private void sendResultMessage(Player receiver, PermResultMessage resultMessage) {\n        ByteArrayDataOutput dataOutput = ByteStreams.newDataOutput();\n        resultMessage.writeTo(dataOutput);\n        permissionsResultChannel.sendTo(receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));\n    }\n}\n",
            "error": "",
            "span_id": 14527586819877032704
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/LoginListener.java",
            "output": "package com.github.games647.changeskin.sponge;\n\nimport com.github.games647.changeskin.core.SkinStorage;\nimport com.github.games647.changeskin.core.model.UserPreference;\nimport com.github.games647.changeskin.core.model.skin.SkinModel;\nimport com.github.games647.changeskin.core.shared.SharedListener;\nimport com.google.inject.Inject;\n\nimport java.util.Optional;\nimport java.util.UUID;\n\nimport org.spongepowered.api.event.Listener;\nimport org.spongepowered.api.event.network.ClientConnectionEvent;\nimport org.spongepowered.api.profile.GameProfile;\nimport org.spongepowered.api.scheduler.Task;\n\npublic class LoginListener extends SharedListener {\n\n    private final ChangeSkinSponge plugin;\n\n    @Inject\n    LoginListener(ChangeSkinSponge plugin) {\n        super(plugin.getCore());\n\n        this.plugin = plugin;\n    }\n\n    @Listener\n    public void onPlayerPreLogin(ClientConnectionEvent.Auth preLoginEvent) {\n        SkinStorage storage = core.getStorage();\n        GameProfile profile = preLoginEvent.getProfile();\n        UUID playerUUID = profile.getUniqueId();\n\n        UserPreference preferences = storage.getPreferences(playerUUID);\n        Optional<SkinModel> optSkin = preferences.getTargetSkin();\n        if (optSkin.isPresent()) {\n            SkinModel targetSkin = optSkin.get();\n            if (!preferences.isKeepSkin()) {\n                targetSkin = core.checkAutoUpdate(targetSkin);\n            }\n\n            plugin.getApi().applyProperties(profile, targetSkin);\n            save(preferences);\n        } else {\n            String playerName = profile.getName().get();\n            if (!core.getConfig().getBoolean(\"restoreSkins\") || !refetchSkin(playerName, preferences)) {\n                setDefaultSkin(preferences, profile);\n            }\n        }\n    }\n\n    private void setDefaultSkin(UserPreference preferences, GameProfile profile) {\n        Optional<SkinModel> randomSkin = getRandomSkin();\n        if (randomSkin.isPresent()) {\n            SkinModel targetSkin = randomSkin.get();\n            preferences.setTargetSkin(targetSkin);\n            plugin.getApi().applyProperties(profile, targetSkin);\n        }\n    }\n\n    @Override\n    protected void save(final UserPreference preferences) {\n        Task.builder()\n                .async()\n                .execute(() -> {\n                    Optional<SkinModel> optSkin = preferences.getTargetSkin();\n                    if (optSkin.isPresent()) {\n                        if (core.getStorage().save(optSkin.get())) {\n                            core.getStorage().save(preferences);\n                        }\n                    } else {\n                        core.getStorage().save(preferences);\n                    }\n                }).submit(plugin);\n    }\n}\n",
            "error": "",
            "span_id": 4915056260557078111
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java",
            "output": "package com.github.games647.changeskin.sponge.command;\n\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\nimport com.github.games647.changeskin.sponge.PomData;\nimport com.github.games647.changeskin.sponge.task.SkinSelector;\nimport com.google.inject.Inject;\n\nimport org.spongepowered.api.command.CommandResult;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.command.args.CommandContext;\nimport org.spongepowered.api.command.spec.CommandExecutor;\nimport org.spongepowered.api.command.spec.CommandSpec;\nimport org.spongepowered.api.entity.living.player.Player;\nimport org.spongepowered.api.scheduler.Task;\n\nimport static org.spongepowered.api.command.args.GenericArguments.string;\nimport static org.spongepowered.api.text.Text.of;\n\npublic class SelectCommand implements CommandExecutor, ChangeSkinCommand {\n\n    private final ChangeSkinSponge plugin;\n\n    @Inject\n    SelectCommand(ChangeSkinSponge plugin) {\n        this.plugin = plugin;\n    }\n\n    @Override\n    public CommandResult execute(CommandSource src, CommandContext args) {\n        if (!(src instanceof Player)) {\n            plugin.sendMessage(src, \"no-console\");\n            return CommandResult.empty();\n        }\n\n        String skinName = args.<String>getOne(\"skinName\").get().toLowerCase().replace(\"skin-\", \"\");\n\n        try {\n            int targetId = Integer.parseInt(skinName);\n            Player receiver = (Player) src;\n            Task.builder().async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);\n        } catch (NumberFormatException numberFormatException) {\n            plugin.sendMessage(src, \"invalid-skin-name\");\n        }\n\n        return CommandResult.success();\n    }\n\n    @Override\n    public CommandSpec buildSpec() {\n        return CommandSpec.builder()\n                .executor(this)\n                .arguments(string(of(\"skinName\")))\n                .permission(PomData.ARTIFACT_ID + \".command.skinselect.base\")\n                .build();\n    }\n}\n",
            "error": "",
            "span_id": 8449976735932234866
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java",
            "output": "package com.github.games647.changeskin.sponge.command;\n\nimport com.github.games647.changeskin.core.model.UserPreference;\nimport com.github.games647.changeskin.core.model.skin.SkinModel;\nimport com.github.games647.changeskin.core.shared.SkinFormatter;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\nimport com.github.games647.changeskin.sponge.PomData;\nimport com.google.inject.Inject;\n\nimport java.util.Optional;\nimport java.util.UUID;\n\nimport org.spongepowered.api.Sponge;\nimport org.spongepowered.api.command.CommandException;\nimport org.spongepowered.api.command.CommandResult;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.command.args.CommandContext;\nimport org.spongepowered.api.command.spec.CommandExecutor;\nimport org.spongepowered.api.command.spec.CommandSpec;\nimport org.spongepowered.api.entity.living.player.Player;\nimport org.spongepowered.api.scheduler.Task;\nimport org.spongepowered.api.text.Text;\nimport org.spongepowered.api.text.serializer.TextSerializers;\n\npublic class InfoCommand implements CommandExecutor, ChangeSkinCommand {\n\n    @Inject\n    private ChangeSkinSponge plugin;\n\n    @Inject\n    private SkinFormatter formatter;\n\n\n    @Override\n    public CommandResult execute(CommandSource src, CommandContext args) throws CommandException {\n        if (!(src instanceof Player)) {\n            plugin.sendMessage(src, \"no-console\");\n            return CommandResult.empty();\n        }\n\n        UUID uniqueId = ((Player) src).getUniqueId();\n        Task.builder().async()\n                .execute(() -> {\n                    UserPreference preferences = plugin.getCore().getStorage().getPreferences(uniqueId);\n                    Task.builder().execute(() -> sendSkinDetails(uniqueId, preferences)).submit(plugin);\n                })\n                .submit(plugin);\n\n        return CommandResult.success();\n    }\n\n    @Override\n    public CommandSpec buildSpec() {\n        return CommandSpec.builder()\n                .executor(this)\n                .permission(PomData.ARTIFACT_ID + \".command.skininfo.base\")\n                .build();\n    }\n\n    private void sendSkinDetails(UUID uuid, UserPreference preference) {\n        Optional<Player> optPlayer = Sponge.getServer().getPlayer(uuid);\n        if (optPlayer.isPresent()) {\n            Player player = optPlayer.get();\n\n            Optional<SkinModel> optSkin = preference.getTargetSkin();\n            if (optSkin.isPresent()) {\n                String template = plugin.getCore().getMessage(\"skin-info\");\n                String formatted = formatter.apply(template, optSkin.get());\n\n                Text text = TextSerializers.LEGACY_FORMATTING_CODE.deserialize(formatted);\n                player.sendMessage(text);\n            } else {\n                plugin.sendMessage(player, \"skin-not-found\");\n            }\n        }\n    }\n}\n",
            "error": "",
            "span_id": 86021417887935818
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java",
            "output": "package com.github.games647.changeskin.sponge.command;\n\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\nimport com.github.games647.changeskin.sponge.PomData;\nimport com.github.games647.changeskin.sponge.task.SkinInvalidator;\nimport com.google.inject.Inject;\n\nimport org.spongepowered.api.command.CommandResult;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.command.args.CommandContext;\nimport org.spongepowered.api.command.spec.CommandExecutor;\nimport org.spongepowered.api.command.spec.CommandSpec;\nimport org.spongepowered.api.entity.living.player.Player;\nimport org.spongepowered.api.scheduler.Task;\n\npublic class InvalidateCommand implements CommandExecutor, ChangeSkinCommand {\n\n    private final ChangeSkinSponge plugin;\n\n    @Inject\n    InvalidateCommand(ChangeSkinSponge plugin) {\n        this.plugin = plugin;\n    }\n\n    @Override\n    public CommandResult execute(CommandSource src, CommandContext args) {\n        if (!(src instanceof Player)) {\n            plugin.sendMessage(src, \"no-console\");\n            return CommandResult.empty();\n        }\n\n        Player receiver = (Player) src;\n        Task.builder().async().execute(new SkinInvalidator(plugin, receiver)).submit(plugin);\n        return CommandResult.success();\n    }\n\n    @Override\n    public CommandSpec buildSpec() {\n        return CommandSpec.builder()\n                .executor(this)\n                .permission(PomData.ARTIFACT_ID + \".command.skinupdate.base\")\n                .build();\n    }\n}\n",
            "error": "",
            "span_id": 9299996216324397666
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java",
            "output": "package com.github.games647.changeskin.sponge.command;\n\nimport com.github.games647.changeskin.core.ChangeSkinCore;\nimport com.github.games647.changeskin.core.model.auth.Account;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\nimport com.github.games647.changeskin.sponge.PomData;\nimport com.github.games647.changeskin.sponge.task.SkinUploader;\nimport com.google.inject.Inject;\n\nimport java.util.List;\n\nimport org.spongepowered.api.command.CommandResult;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.command.args.CommandContext;\nimport org.spongepowered.api.command.spec.CommandExecutor;\nimport org.spongepowered.api.command.spec.CommandSpec;\nimport org.spongepowered.api.scheduler.Task;\n\nimport static org.spongepowered.api.command.args.GenericArguments.string;\nimport static org.spongepowered.api.text.Text.of;\n\npublic class UploadCommand implements CommandExecutor, ChangeSkinCommand {\n\n    private final ChangeSkinSponge plugin;\n    private final ChangeSkinCore core;\n\n    @Inject\n    UploadCommand(ChangeSkinSponge plugin, ChangeSkinCore core) {\n        this.plugin = plugin;\n        this.core = core;\n    }\n\n    @Override\n    public CommandResult execute(CommandSource src, CommandContext args) {\n        String url = args.<String>getOne(\"url\").get();\n        if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n            List<Account> accounts = plugin.getCore().getUploadAccounts();\n            if (accounts.isEmpty()) {\n                plugin.sendMessage(src, \"no-accounts\");\n            } else {\n                Account uploadAccount = accounts.get(0);\n                Runnable skinUploader = new SkinUploader(plugin, src, uploadAccount, url);\n                Task.builder().async().execute(skinUploader).submit(plugin);\n            }\n        } else {\n            plugin.sendMessage(src, \"no-valid-url\");\n        }\n\n        return CommandResult.success();\n    }\n\n    @Override\n    public CommandSpec buildSpec() {\n        return CommandSpec.builder()\n                .executor(this)\n                .arguments(string(of(\"url\")))\n                .permission(PomData.ARTIFACT_ID + \".command.skinupload.base\")\n                .build();\n    }\n}\n",
            "error": "",
            "span_id": 14334372736115649137
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/command/SetCommand.java",
            "output": "package com.github.games647.changeskin.sponge.command;\n\nimport com.github.games647.changeskin.core.ChangeSkinCore;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\nimport com.github.games647.changeskin.sponge.PomData;\nimport com.github.games647.changeskin.sponge.task.NameResolver;\nimport com.github.games647.changeskin.sponge.task.SkinDownloader;\nimport com.google.inject.Inject;\n\nimport java.util.UUID;\n\nimport org.spongepowered.api.command.CommandResult;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.command.args.CommandContext;\nimport org.spongepowered.api.command.args.GenericArguments;\nimport org.spongepowered.api.command.spec.CommandExecutor;\nimport org.spongepowered.api.command.spec.CommandSpec;\nimport org.spongepowered.api.entity.living.player.Player;\nimport org.spongepowered.api.scheduler.Task;\n\nimport static org.spongepowered.api.command.args.GenericArguments.flags;\nimport static org.spongepowered.api.command.args.GenericArguments.string;\nimport static org.spongepowered.api.text.Text.of;\n\npublic class SetCommand implements CommandExecutor, ChangeSkinCommand {\n\n    private final ChangeSkinSponge plugin;\n    private final ChangeSkinCore core;\n\n    @Inject\n    SetCommand(ChangeSkinSponge plugin, ChangeSkinCore core) {\n        this.plugin = plugin;\n        this.core = core;\n    }\n\n    @Override\n    public CommandResult execute(CommandSource src, CommandContext args) {\n        if (!(src instanceof Player)) {\n            plugin.sendMessage(src, \"no-console\");\n            return CommandResult.empty();\n        }\n\n        UUID uniqueId = ((Player) src).getUniqueId();\n        if (core.getCooldownService().isTracked(uniqueId)) {\n            plugin.sendMessage(src, \"cooldown\");\n            return CommandResult.empty();\n        }\n\n        Player receiver = (Player) src;\n        String targetSkin = args.<String>getOne(\"skin\").get();\n        boolean keepSkin = args.hasAny(\"keep\");\n\n        if (\"reset\".equals(targetSkin)) {\n            targetSkin = receiver.getUniqueId().toString();\n        }\n\n        if (targetSkin.length() > 16) {\n            UUID targetUUID = UUID.fromString(targetSkin);\n\n            if (core.getConfig().getBoolean(\"skinPermission\") && !plugin.hasSkinPermission(src, targetUUID, true)) {\n                return CommandResult.empty();\n            }\n\n            plugin.sendMessage(src, \"skin-change-queue\");\n            Runnable skinDownloader = new SkinDownloader(plugin, src, receiver, targetUUID, keepSkin);\n            Task.builder().async().execute(skinDownloader).submit(plugin);\n            return CommandResult.success();\n        }\n\n        Runnable nameResolver = new NameResolver(plugin, src, targetSkin, receiver, keepSkin);\n        Task.builder().async().execute(nameResolver).submit(plugin);\n        return CommandResult.success();\n    }\n\n    @Override\n    public CommandSpec buildSpec() {\n        return CommandSpec.builder()\n                .executor(this)\n                .arguments(\n                        string(of(\"skin\")),\n                        flags().flag(\"keep\").buildWith(GenericArguments.none()))\n                .permission(PomData.ARTIFACT_ID + \".command.setskin.base\")\n                .build();\n    }\n}\n",
            "error": "",
            "span_id": 3580216746947821309
        },
        {
            "input": "sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/UpdateSkinListener.java",
            "output": "package com.github.games647.changeskin.sponge.bungee;\n\nimport com.github.games647.changeskin.core.message.SkinUpdateMessage;\nimport com.github.games647.changeskin.sponge.ChangeSkinSponge;\nimport com.github.games647.changeskin.sponge.task.SkinApplier;\nimport com.google.common.io.ByteArrayDataInput;\nimport com.google.common.io.ByteStreams;\nimport com.google.inject.Inject;\n\nimport java.util.Optional;\n\nimport org.spongepowered.api.Platform.Type;\nimport org.spongepowered.api.Sponge;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.entity.living.player.Player;\nimport org.spongepowered.api.network.ChannelBuf;\nimport org.spongepowered.api.network.RawDataListener;\nimport org.spongepowered.api.network.RemoteConnection;\nimport org.spongepowered.api.scheduler.Task;\n\npublic class UpdateSkinListener implements RawDataListener {\n\n    @Inject\n    private ChangeSkinSponge plugin;\n\n    @Override\n    public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side) {\n        ByteArrayDataInput dataInput = ByteStreams.newDataInput(data.array());\n        SkinUpdateMessage updateMessage = new SkinUpdateMessage();\n        updateMessage.readFrom(dataInput);\n\n        String playerName = updateMessage.getPlayerName();\n        Optional<Player> receiver = Sponge.getServer().getPlayer(playerName);\n        if (receiver.isPresent()) {\n            Runnable skinUpdater = new SkinApplier(plugin, (CommandSource) connection, receiver.get(), null, false);\n            Task.builder().execute(skinUpdater).submit(plugin);\n        }\n    }\n}\n",
            "error": "",
            "span_id": 5688729397127412924
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}