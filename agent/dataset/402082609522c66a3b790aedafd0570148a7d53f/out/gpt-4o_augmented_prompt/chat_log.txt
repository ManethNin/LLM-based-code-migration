================================ System Message ================================

Act as an expert Java software developer.
The program has issues after a version upgrade of a dependency.
Try using minimal changes to the code to fix the issues. 
Do not explain your actions or ask questions, just provide diffs that always adhere to the rules.
When you think you are done, reply with the diff that fixes the issues, after that a final verification step will happen and the conversation will be ended if it was successful. If not you get the error back.

# File editing rules:
Return edits similar to unified diffs that `diff -U0` would produce.
The diff has to be in a markdown code block, like this: ```diff ```.

Make sure you include the first 2 lines with the file paths.
Don't include timestamps with the file paths.

Start each hunk of changes with a `@@ ... @@` line.
Don't include line numbers like `diff -U0` does.
The user's patch tool doesn't need them.

The user's patch tool needs CORRECT patches that apply cleanly against the current contents of the file!
Think carefully and make sure you include and mark all lines that need to be removed or changed as `-` lines.
Make sure you mark all new or modified lines with `+`.
Don't leave out any lines or the diff patch won't apply correctly.
Dont add in new comments or change existing comments.
Make sure the diff is minimal and only includes the changes needed to fix the issue plus at least one context line so the tool can apply the diff correctly.

Indentation matters in the diffs!

Start a new hunk for each section of the file that needs changes.
Dont include unnescessary context, but include at least one line of it.
If no context is included, the tool will try to apply the changes at the end of the line.

Only output hunks that specify changes with `+` or `-` lines.
Skip any hunks that are entirely unchanging ` ` lines.

Output hunks in whatever order makes the most sense.
Hunks don't need to be in any particular order.

When editing a function, method, loop, etc use a hunk to replace the *entire* code block.
Delete the entire existing version with `-` lines and then add a new, updated version with `+` lines.
This will help you generate correct code and correct diffs.

To make a new file, show a diff from `--- /dev/null` to `+++ path/to/new/file.ext`.


================================ Human Message =================================


Updated Dependency Details: org.spongepowered:spongeapi 7.4.0 -> 8.0.0

Initial Error: [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.10.1:compile (default-compile) on project changeskin.sponge: Compilation failure: Compilation failure:
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[23,37] cannot find symbol
[ERROR]   symbol:   class CommandManager
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[24,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[27,46] package org.spongepowered.api.event.game.state does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[28,46] package org.spongepowered.api.event.game.state does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[29,46] package org.spongepowered.api.event.game.state does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[30,52] package org.spongepowered.api.network.ChannelBinding does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[31,37] cannot find symbol
[ERROR]   symbol:   class ChannelRegistrar
[ERROR]   location: package org.spongepowered.api.network
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[32,36] cannot find symbol
[ERROR]   symbol:   class Plugin
[ERROR]   location: package org.spongepowered.api.plugin
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[33,45] package org.spongepowered.api.text.serializer does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[40,2] cannot find symbol
[ERROR]   symbol: class Plugin
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[42,57] cannot find symbol
[ERROR]   symbol: class CommandSource
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[62,27] cannot find symbol
[ERROR]   symbol:   class GamePreInitializationEvent
[ERROR]   location: class com.github.games647.changeskin.sponge.ChangeSkinSponge
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[73,24] cannot find symbol
[ERROR]   symbol:   class GameInitializationEvent
[ERROR]   location: class com.github.games647.changeskin.sponge.ChangeSkinSponge
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[100,28] cannot find symbol
[ERROR]   symbol:   class GameStoppingServerEvent
[ERROR]   location: class com.github.games647.changeskin.sponge.ChangeSkinSponge
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[109,38] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.ChangeSkinSponge
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java:[142,29] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.ChangeSkinSponge
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinUploader.java:[9,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinUploader.java:[15,19] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.SkinUploader
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinUploader.java:[17,50] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.SkinUploader
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/NameResolver.java:[8,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/NameResolver.java:[14,19] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.NameResolver
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/NameResolver.java:[18,50] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.NameResolver
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinChanger.java:[7,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinChanger.java:[8,45] package org.spongepowered.api.text.serializer does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinChanger.java:[12,19] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.SkinChanger
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinChanger.java:[14,95] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.SkinChanger
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinApplier.java:[3,35] package com.flowpowered.math.vector does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinApplier.java:[12,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinApplier.java:[13,38] package org.spongepowered.api.data.key does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinApplier.java:[23,19] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.SkinApplier
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinApplier.java:[26,49] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.SkinApplier
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinDownloader.java:[9,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinDownloader.java:[16,19] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.SkinDownloader
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinDownloader.java:[19,52] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.task.SkinDownloader
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/ChangeSkinCommand.java:[3,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/ChangeSkinCommand.java:[8,5] cannot find symbol
[ERROR]   symbol:   class CommandSpec
[ERROR]   location: interface com.github.games647.changeskin.sponge.command.ChangeSkinCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java:[17,52] package org.spongepowered.api.network.ChannelBinding does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java:[18,37] cannot find symbol
[ERROR]   symbol:   class ChannelBuf
[ERROR]   location: package org.spongepowered.api.network
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java:[19,37] cannot find symbol
[ERROR]   symbol:   class ChannelRegistrar
[ERROR]   location: package org.spongepowered.api.network
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java:[20,37] cannot find symbol
[ERROR]   symbol:   class RawDataListener
[ERROR]   location: package org.spongepowered.api.network
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java:[26,49] cannot find symbol
[ERROR]   symbol: class RawDataListener
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java:[29,19] cannot find symbol
[ERROR]   symbol:   class RawDataChannel
[ERROR]   location: class com.github.games647.changeskin.sponge.bungee.CheckPermissionListener
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java:[32,54] cannot find symbol
[ERROR]   symbol:   class ChannelRegistrar
[ERROR]   location: class com.github.games647.changeskin.sponge.bungee.CheckPermissionListener
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java:[40,31] cannot find symbol
[ERROR]   symbol:   class ChannelBuf
[ERROR]   location: class com.github.games647.changeskin.sponge.bungee.CheckPermissionListener
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/LoginListener.java:[13,43] cannot find symbol
[ERROR]   symbol:   class ClientConnectionEvent
[ERROR]   location: package org.spongepowered.api.event.network
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/LoginListener.java:[29,55] package ClientConnectionEvent does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[9,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[10,42] package org.spongepowered.api.command.args does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[11,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[12,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[16,49] package org.spongepowered.api.command.args does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[16,1] static import only from classes and interfaces
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[17,41] package org.spongepowered.api.text does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[17,1] static import only from classes and interfaces
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[19,39] cannot find symbol
[ERROR]   symbol: class CommandExecutor
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[29,34] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.command.SelectCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[29,53] cannot find symbol
[ERROR]   symbol:   class CommandContext
[ERROR]   location: class com.github.games647.changeskin.sponge.command.SelectCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java:[49,12] cannot find symbol
[ERROR]   symbol:   class CommandSpec
[ERROR]   location: class com.github.games647.changeskin.sponge.command.SelectCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[14,37] cannot find symbol
[ERROR]   symbol:   class CommandException
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[16,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[17,42] package org.spongepowered.api.command.args does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[18,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[19,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[22,34] package org.spongepowered.api.text does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[23,45] package org.spongepowered.api.text.serializer does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[25,37] cannot find symbol
[ERROR]   symbol: class CommandExecutor
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[35,34] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.command.InfoCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[35,53] cannot find symbol
[ERROR]   symbol:   class CommandContext
[ERROR]   location: class com.github.games647.changeskin.sponge.command.InfoCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[35,81] cannot find symbol
[ERROR]   symbol:   class CommandException
[ERROR]   location: class com.github.games647.changeskin.sponge.command.InfoCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java:[53,12] cannot find symbol
[ERROR]   symbol:   class CommandSpec
[ERROR]   location: class com.github.games647.changeskin.sponge.command.InfoCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/UpdateSkinListener.java:[14,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/UpdateSkinListener.java:[16,37] cannot find symbol
[ERROR]   symbol:   class ChannelBuf
[ERROR]   location: package org.spongepowered.api.network
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/UpdateSkinListener.java:[17,37] cannot find symbol
[ERROR]   symbol:   class RawDataListener
[ERROR]   location: package org.spongepowered.api.network
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/UpdateSkinListener.java:[21,44] cannot find symbol
[ERROR]   symbol: class RawDataListener
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/UpdateSkinListener.java:[27,31] cannot find symbol
[ERROR]   symbol:   class ChannelBuf
[ERROR]   location: class com.github.games647.changeskin.sponge.bungee.UpdateSkinListener
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java:[9,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java:[10,42] package org.spongepowered.api.command.args does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java:[11,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java:[12,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java:[16,43] cannot find symbol
[ERROR]   symbol: class CommandExecutor
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java:[26,34] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.command.InvalidateCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java:[26,53] cannot find symbol
[ERROR]   symbol:   class CommandContext
[ERROR]   location: class com.github.games647.changeskin.sponge.command.InvalidateCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java:[38,12] cannot find symbol
[ERROR]   symbol:   class CommandSpec
[ERROR]   location: class com.github.games647.changeskin.sponge.command.InvalidateCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[13,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[14,42] package org.spongepowered.api.command.args does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[15,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[16,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[19,49] package org.spongepowered.api.command.args does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[19,1] static import only from classes and interfaces
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[20,41] package org.spongepowered.api.text does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[20,1] static import only from classes and interfaces
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[22,39] cannot find symbol
[ERROR]   symbol: class CommandExecutor
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[34,34] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: class com.github.games647.changeskin.sponge.command.UploadCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[34,53] cannot find symbol
[ERROR]   symbol:   class CommandContext
[ERROR]   location: class com.github.games647.changeskin.sponge.command.UploadCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java:[53,12] cannot find symbol
[ERROR]   symbol:   class CommandSpec
[ERROR]   location: class com.github.games647.changeskin.sponge.command.UploadCommand
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SetCommand.java:[13,37] cannot find symbol
[ERROR]   symbol:   class CommandSource
[ERROR]   location: package org.spongepowered.api.command
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SetCommand.java:[14,42] package org.spongepowered.api.command.args does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SetCommand.java:[15,42] package org.spongepowered.api.command.args does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SetCommand.java:[16,42] package org.spongepowered.api.command.spec does not exist
[ERROR] sponge/src/main/java/com/github/games647/changeskin/sponge/command/SetCommand.java:[17,42] package org.spongepowered.api.command.spec does not exist
[ERROR] -> [Help 1]

Revapi/japicmp API Changes, which describe changes in the APIs used by this project: {"japicmpResult": {}, "elementLines": {}, "revapiResult": {}, "allPotentialBreakingElements": [], "elementPatterns": {}, "project": "ChangeSkin"}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_f0KhIarGjjBB0VfkYsW3hz49)
 Call ID: call_f0KhIarGjjBB0VfkYsW3hz49
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/ChangeSkinSponge.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge;

import com.github.games647.changeskin.core.ChangeSkinCore;
import com.github.games647.changeskin.core.PlatformPlugin;
import com.github.games647.changeskin.core.message.NamespaceKey;
import com.github.games647.changeskin.sponge.bungee.CheckPermissionListener;
import com.github.games647.changeskin.sponge.bungee.UpdateSkinListener;
import com.github.games647.changeskin.sponge.command.InfoCommand;
import com.github.games647.changeskin.sponge.command.InvalidateCommand;
import com.github.games647.changeskin.sponge.command.SelectCommand;
import com.github.games647.changeskin.sponge.command.SetCommand;
import com.github.games647.changeskin.sponge.command.UploadCommand;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Singleton;

import java.nio.file.Path;
import java.util.UUID;

import org.slf4j.Logger;
import org.spongepowered.api.Platform.Type;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.command.CommandManager;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.config.ConfigDir;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.game.state.GameInitializationEvent;
import org.spongepowered.api.event.game.state.GamePreInitializationEvent;
import org.spongepowered.api.event.game.state.GameStoppingServerEvent;
import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
import org.spongepowered.api.network.ChannelRegistrar;
import org.spongepowered.api.plugin.Plugin;
import org.spongepowered.api.text.serializer.TextSerializers;

import static com.github.games647.changeskin.core.message.CheckPermMessage.CHECK_PERM_CHANNEL;
import static com.github.games647.changeskin.core.message.SkinUpdateMessage.UPDATE_SKIN_CHANNEL;
import static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;

@Singleton
@Plugin(id = ARTIFACT_ID, name = PomData.NAME, version = PomData.VERSION,
        url = PomData.URL, description = PomData.DESCRIPTION)
public class ChangeSkinSponge implements PlatformPlugin<CommandSource> {

    private final Path dataFolder;
    private final Logger logger;
    private final Injector injector;

    private final ChangeSkinCore core = new ChangeSkinCore(this);
    private final SpongeSkinAPI api = new SpongeSkinAPI(this);

    private boolean initialized;

    //We will place more than one config there (i.e. H2/SQLite database) -> sharedRoot = false
    @Inject
    ChangeSkinSponge(Logger logger, @ConfigDir(sharedRoot = false) Path dataFolder, Injector injector) {
        this.dataFolder = dataFolder;
        this.logger = logger;
        this.injector = injector.createChildInjector(binder -> binder.bind(ChangeSkinCore.class).toInstance(core));
    }

    @Listener
    public void onPreInit(GamePreInitializationEvent preInitEvent) {
        //load config and database
        try {
            core.load(true);
            initialized = true;
        } catch (Exception ex) {
            logger.error("Error initializing plugin. Disabling...", ex);
        }
    }

    @Listener
    public void onInit(GameInitializationEvent initEvent) {
        if (!initialized)
            return;

        CommandManager cmdManager = Sponge.getCommandManager();

        //command and event register
        cmdManager.register(this, injector.getInstance(SelectCommand.class).buildSpec(), "skin-select", "skinselect");
        cmdManager.register(this, injector.getInstance(InfoCommand.class).buildSpec(), "skin-info");
        cmdManager.register(this, injector.getInstance(UploadCommand.class).buildSpec(), "skin-upload");
        cmdManager.register(this, injector.getInstance(SetCommand.class).buildSpec(), "changeskin", "setskin", "skin");
        cmdManager.register(this, injector.getInstance(InvalidateCommand.class)
                .buildSpec(), "skininvalidate", "skin-invalidate");

        Sponge.getEventManager().registerListeners(this, injector.getInstance(LoginListener.class));

        //incoming channel
        ChannelRegistrar channelReg = Sponge.getChannelRegistrar();
        String updateChannelName = new NamespaceKey(ARTIFACT_ID, UPDATE_SKIN_CHANNEL).getCombinedName();
        String permissionChannelName = new NamespaceKey(ARTIFACT_ID, CHECK_PERM_CHANNEL).getCombinedName();
        RawDataChannel updateChannel = channelReg.getOrCreateRaw(this, updateChannelName);
        RawDataChannel permChannel = channelReg.getOrCreateRaw(this, permissionChannelName);
        updateChannel.addListener(Type.SERVER, injector.getInstance(UpdateSkinListener.class));
        permChannel.addListener(Type.SERVER, injector.getInstance(CheckPermissionListener.class));
    }

    @Listener
    public void onShutdown(GameStoppingServerEvent stoppingServerEvent) {
        core.close();
    }

    public ChangeSkinCore getCore() {
        return core;
    }

    @Override
    public boolean hasSkinPermission(CommandSource invoker, UUID uuid, boolean sendMessage) {
        if (invoker.hasPermission(PomData.ARTIFACT_ID + ".skin.whitelist." + uuid)) {
            return true;
        }

        //disallow - not whitelisted or blacklisted
        if (sendMessage) {
            sendMessage(invoker, "no-permission");
        }

        return false;
    }

    public SpongeSkinAPI getApi() {
        return api;
    }

    @Override
    public String getName() {
        return PomData.NAME;
    }

    @Override
    public Path getPluginFolder() {
        return dataFolder;
    }

    @Override
    public Logger getLog() {
        return logger;
    }

    @Override
    public void sendMessage(CommandSource receiver, String key) {
        String message = core.getMessage(key);
        if (message != null && receiver != null) {
            receiver.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(message));
        }
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_C04DA5rM8ibNYcvOrciIp0Xo)
 Call ID: call_C04DA5rM8ibNYcvOrciIp0Xo
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinUploader.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.task;

import com.github.games647.changeskin.core.model.auth.Account;
import com.github.games647.changeskin.core.shared.task.SharedUploader;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;

import java.util.concurrent.TimeUnit;

import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.scheduler.Task;

public class SkinUploader extends SharedUploader {

    private final ChangeSkinSponge plugin;
    private final CommandSource invoker;

    public SkinUploader(ChangeSkinSponge plugin, CommandSource invoker, Account owner, String url) {
        super(plugin.getCore(), owner, url);

        this.plugin = plugin;
        this.invoker = invoker;
    }

    @Override
    public void sendMessageInvoker(String key) {
        plugin.sendMessage(invoker, key);
    }

    @Override
    protected void scheduleChangeTask(String oldSkinUrl) {
        Runnable task = new SkinChanger(plugin, owner, url, oldSkinUrl, invoker);
        Task.builder().delay(1, TimeUnit.MINUTES).execute(task).async().submit(plugin);
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_VzNcVBbqmGzlx9F7zsteSnaH)
 Call ID: call_VzNcVBbqmGzlx9F7zsteSnaH
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/task/NameResolver.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.task;

import com.github.games647.changeskin.core.shared.task.SharedNameResolver;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;

import java.util.UUID;

import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.entity.living.player.Player;

public class NameResolver extends SharedNameResolver {

    private final ChangeSkinSponge plugin;
    private final CommandSource invoker;
    private final Player receiver;
    private final boolean keepSkin;

    public NameResolver(ChangeSkinSponge plugin, CommandSource invoker, String targetName, Player receiver
            , boolean keepSkin) {
        super(plugin.getCore(), targetName, keepSkin);

        this.plugin = plugin;
        this.invoker = invoker;
        this.receiver = receiver;
        this.keepSkin = keepSkin;
    }

    @Override
    public void sendMessageInvoker(String id) {
        plugin.sendMessage(invoker, id);
    }

    @Override
    protected boolean hasSkinPermission(UUID uuid) {
        //todo check skin permissions
        return true;
    }

    @Override
    protected void scheduleDownloader(UUID uuid) {
        //run this is the same thread
        new SkinDownloader(plugin, invoker, receiver, uuid, keepSkin).run();
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_E05NRgb7iUwU2eZli7pX742t)
 Call ID: call_E05NRgb7iUwU2eZli7pX742t
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinChanger.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.task;

import com.github.games647.changeskin.core.model.auth.Account;
import com.github.games647.changeskin.core.shared.task.SharedSkinChanger;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;

import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.text.serializer.TextSerializers;

public class SkinChanger extends SharedSkinChanger {

    private final CommandSource invoker;

    public SkinChanger(ChangeSkinSponge plugin, Account owner, String url, String oldSkinUrl, CommandSource invoker) {
        super(plugin.getCore(), owner, url, oldSkinUrl);

        this.invoker = invoker;
    }

    @Override
    protected void sendMessageInvoker(String localeMessage) {
        invoker.sendMessage(TextSerializers.LEGACY_FORMATTING_CODE.deserialize(localeMessage));
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_1s3EQ3MqoLgQHsxIfiYGlL4A)
 Call ID: call_1s3EQ3MqoLgQHsxIfiYGlL4A
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinApplier.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.task;

import com.flowpowered.math.vector.Vector3d;
import com.github.games647.changeskin.core.model.UserPreference;
import com.github.games647.changeskin.core.model.skin.SkinModel;
import com.github.games647.changeskin.core.shared.task.SharedApplier;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;

import java.util.UUID;

import org.spongepowered.api.Sponge;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.data.key.Keys;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.entity.living.player.tab.TabListEntry;
import org.spongepowered.api.scheduler.Task;
import org.spongepowered.api.world.Location;
import org.spongepowered.api.world.World;

public class SkinApplier extends SharedApplier {

    private final ChangeSkinSponge plugin;
    private final CommandSource invoker;
    private final Player receiver;

    public SkinApplier(ChangeSkinSponge plugin, CommandSource invoker, Player receiver, SkinModel targetSkin
            , boolean keepSkin) {
        super(plugin.getCore(), targetSkin, keepSkin);

        this.plugin = plugin;
        this.invoker = invoker;
        this.receiver = receiver;
    }

    @Override
    public void run() {
        if (!isConnected()) {
            return;
        }

        //uuid was successful resolved, we could now make a cooldown check
        if (invoker instanceof Player) {
            UUID uniqueId = ((Player) invoker).getUniqueId();
            core.getCooldownService().trackPlayer(uniqueId);
        }

        if (core.getStorage() != null) {
            UserPreference preferences = core.getStorage().getPreferences(receiver.getUniqueId());
            save(preferences);
        }

        applySkin();
    }

    @Override
    protected boolean isConnected() {
        return receiver.isOnline();
    }

    @Override
    protected void applyInstantUpdate() {
        plugin.getApi().applySkin(receiver, targetSkin);

        sendUpdate();
        plugin.sendMessage(invoker, "skin-changed");
    }

    @Override
    protected void sendMessage(String key) {
        plugin.sendMessage(invoker, key);
    }

    @Override
    protected void runAsync(Runnable runnable) {
        Task.builder().async()
                .execute(runnable)
                .submit(plugin);
    }

    private void sendUpdate() {
        sendUpdateSelf();

        //triggers an update for others player to see the new skin
        receiver.offer(Keys.VANISH, true);
        receiver.offer(Keys.VANISH, false);
    }

    private void sendUpdateSelf() {
        receiver.getTabList().removeEntry(receiver.getUniqueId());
        receiver.getTabList().addEntry(TabListEntry.builder()
                .displayName(receiver.getDisplayNameData().displayName().get())
                .latency(receiver.getConnection().getLatency())
                .list(receiver.getTabList())
                .gameMode(receiver.getGameModeData().type().get())
                .profile(receiver.getProfile())
                .build());

        Location<World> oldLocation = receiver.getLocation();
        Vector3d rotation = receiver.getRotation();
        World receiverWorld = receiver.getWorld();
        Sponge.getServer().getWorlds()
                .stream()
                .filter(world -> !world.equals(receiverWorld))
                .findFirst()
                .ifPresent(world -> {
                    receiver.setLocation(world.getSpawnLocation());
                    receiver.setLocationAndRotation(oldLocation, rotation);
                });
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_93PoxQhvqR8BTATsZOpSPvxs)
 Call ID: call_93PoxQhvqR8BTATsZOpSPvxs
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/task/SkinDownloader.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.task;

import com.github.games647.changeskin.core.model.skin.SkinModel;
import com.github.games647.changeskin.core.shared.task.SharedDownloader;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;

import java.util.UUID;

import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.scheduler.Task;

public class SkinDownloader extends SharedDownloader {

    private final ChangeSkinSponge plugin;
    private final CommandSource invoker;
    private final Player receiver;

    public SkinDownloader(ChangeSkinSponge plugin, CommandSource invoker, Player receiver, UUID targetUUID
            , boolean keepSkin) {
        super(plugin.getCore(), keepSkin, targetUUID, receiver.getUniqueId());

        this.plugin = plugin;
        this.invoker = invoker;
        this.receiver = receiver;
    }

    @Override
    protected void scheduleApplyTask(SkinModel skinData) {
        Runnable skinUpdater = new SkinApplier(plugin, invoker, receiver, skinData, keepSkin);
        Task.builder().execute(skinUpdater).submit(plugin);
    }

    @Override
    public void sendMessageInvoker(String id) {
        plugin.sendMessage(invoker, id);
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_mwBciowoLXO0uxxmYW8VDNPU)
 Call ID: call_mwBciowoLXO0uxxmYW8VDNPU
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/command/ChangeSkinCommand.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.command;

import org.spongepowered.api.command.spec.CommandSpec;

@FunctionalInterface
public interface ChangeSkinCommand {

    CommandSpec buildSpec();
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_DtcyuMeXY0OKLH74PbL6eaLG)
 Call ID: call_DtcyuMeXY0OKLH74PbL6eaLG
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/CheckPermissionListener.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.bungee;

import com.github.games647.changeskin.core.message.NamespaceKey;
import com.github.games647.changeskin.core.message.CheckPermMessage;
import com.github.games647.changeskin.core.message.PermResultMessage;
import com.github.games647.changeskin.core.model.skin.SkinModel;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteArrayDataOutput;
import com.google.common.io.ByteStreams;
import com.google.inject.Inject;

import java.util.UUID;

import org.spongepowered.api.Platform.Type;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.network.ChannelBinding.RawDataChannel;
import org.spongepowered.api.network.ChannelBuf;
import org.spongepowered.api.network.ChannelRegistrar;
import org.spongepowered.api.network.RawDataListener;
import org.spongepowered.api.network.RemoteConnection;

import static com.github.games647.changeskin.core.message.PermResultMessage.PERMISSION_RESULT_CHANNEL;
import static com.github.games647.changeskin.sponge.PomData.ARTIFACT_ID;

public class CheckPermissionListener implements RawDataListener {

    private final ChangeSkinSponge plugin;
    private final RawDataChannel permissionsResultChannel;

    @Inject
    CheckPermissionListener(ChangeSkinSponge plugin, ChannelRegistrar channelRegistrar) {
        this.plugin = plugin;

        String combinedName = new NamespaceKey(ARTIFACT_ID, PERMISSION_RESULT_CHANNEL).getCombinedName();
        permissionsResultChannel = channelRegistrar.getOrCreateRaw(plugin, combinedName);
    }

    @Override
    public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side) {

        ByteArrayDataInput dataInput = ByteStreams.newDataInput(data.array());
        CheckPermMessage checkMessage = new CheckPermMessage();
        checkMessage.readFrom(dataInput);

        CheckPermMessage message = new CheckPermMessage();
        message.readFrom(dataInput);

        checkPermissions((Player) connection, message);
    }

    private void checkPermissions(Player player, CheckPermMessage permMessage) {
        UUID receiverUUID = permMessage.getReceiverUUD();
        boolean op = permMessage.isOp();
        SkinModel targetSkin = permMessage.getTargetSkin();
        UUID skinProfile = targetSkin.getProfileId();

        boolean success = op || checkBungeePerms(player, receiverUUID, permMessage.isSkinPerm(), skinProfile);
        sendResultMessage(player, new PermResultMessage(success, targetSkin, receiverUUID));
    }

    private boolean checkBungeePerms(Player player, UUID receiverUUID, boolean skinPerm, UUID targetUUID) {
        if (player.getUniqueId().equals(receiverUUID)) {
            return checkPerm(player, "command.setskin", skinPerm, targetUUID);
        }

        return checkPerm(player, "command.setskin.other", skinPerm, targetUUID);
    }

    private boolean checkPerm(Player invoker, String node, boolean skinPerm, UUID targetUUID) {
        String pluginName = plugin.getName().toLowerCase();
        boolean hasCommandPerm = invoker.hasPermission(pluginName +  '.' + node);
        if (skinPerm) {
            return hasCommandPerm && plugin.hasSkinPermission(invoker, targetUUID, false);
        }

        return hasCommandPerm;
    }

    private void sendResultMessage(Player receiver, PermResultMessage resultMessage) {
        ByteArrayDataOutput dataOutput = ByteStreams.newDataOutput();
        resultMessage.writeTo(dataOutput);
        permissionsResultChannel.sendTo(receiver, buf -> buf.writeByteArray(dataOutput.toByteArray()));
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_5c9Y2hT5ENU2mCOAt59jP1b2)
 Call ID: call_5c9Y2hT5ENU2mCOAt59jP1b2
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/LoginListener.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge;

import com.github.games647.changeskin.core.SkinStorage;
import com.github.games647.changeskin.core.model.UserPreference;
import com.github.games647.changeskin.core.model.skin.SkinModel;
import com.github.games647.changeskin.core.shared.SharedListener;
import com.google.inject.Inject;

import java.util.Optional;
import java.util.UUID;

import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.network.ClientConnectionEvent;
import org.spongepowered.api.profile.GameProfile;
import org.spongepowered.api.scheduler.Task;

public class LoginListener extends SharedListener {

    private final ChangeSkinSponge plugin;

    @Inject
    LoginListener(ChangeSkinSponge plugin) {
        super(plugin.getCore());

        this.plugin = plugin;
    }

    @Listener
    public void onPlayerPreLogin(ClientConnectionEvent.Auth preLoginEvent) {
        SkinStorage storage = core.getStorage();
        GameProfile profile = preLoginEvent.getProfile();
        UUID playerUUID = profile.getUniqueId();

        UserPreference preferences = storage.getPreferences(playerUUID);
        Optional<SkinModel> optSkin = preferences.getTargetSkin();
        if (optSkin.isPresent()) {
            SkinModel targetSkin = optSkin.get();
            if (!preferences.isKeepSkin()) {
                targetSkin = core.checkAutoUpdate(targetSkin);
            }

            plugin.getApi().applyProperties(profile, targetSkin);
            save(preferences);
        } else {
            String playerName = profile.getName().get();
            if (!core.getConfig().getBoolean("restoreSkins") || !refetchSkin(playerName, preferences)) {
                setDefaultSkin(preferences, profile);
            }
        }
    }

    private void setDefaultSkin(UserPreference preferences, GameProfile profile) {
        Optional<SkinModel> randomSkin = getRandomSkin();
        if (randomSkin.isPresent()) {
            SkinModel targetSkin = randomSkin.get();
            preferences.setTargetSkin(targetSkin);
            plugin.getApi().applyProperties(profile, targetSkin);
        }
    }

    @Override
    protected void save(final UserPreference preferences) {
        Task.builder()
                .async()
                .execute(() -> {
                    Optional<SkinModel> optSkin = preferences.getTargetSkin();
                    if (optSkin.isPresent()) {
                        if (core.getStorage().save(optSkin.get())) {
                            core.getStorage().save(preferences);
                        }
                    } else {
                        core.getStorage().save(preferences);
                    }
                }).submit(plugin);
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_3k823dLP62tZdgYaM83P3yv3)
 Call ID: call_3k823dLP62tZdgYaM83P3yv3
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/command/SelectCommand.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.command;

import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.PomData;
import com.github.games647.changeskin.sponge.task.SkinSelector;
import com.google.inject.Inject;

import org.spongepowered.api.command.CommandResult;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.command.args.CommandContext;
import org.spongepowered.api.command.spec.CommandExecutor;
import org.spongepowered.api.command.spec.CommandSpec;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.scheduler.Task;

import static org.spongepowered.api.command.args.GenericArguments.string;
import static org.spongepowered.api.text.Text.of;

public class SelectCommand implements CommandExecutor, ChangeSkinCommand {

    private final ChangeSkinSponge plugin;

    @Inject
    SelectCommand(ChangeSkinSponge plugin) {
        this.plugin = plugin;
    }

    @Override
    public CommandResult execute(CommandSource src, CommandContext args) {
        if (!(src instanceof Player)) {
            plugin.sendMessage(src, "no-console");
            return CommandResult.empty();
        }

        String skinName = args.<String>getOne("skinName").get().toLowerCase().replace("skin-", "");

        try {
            int targetId = Integer.parseInt(skinName);
            Player receiver = (Player) src;
            Task.builder().async().execute(new SkinSelector(plugin, receiver, targetId)).submit(plugin);
        } catch (NumberFormatException numberFormatException) {
            plugin.sendMessage(src, "invalid-skin-name");
        }

        return CommandResult.success();
    }

    @Override
    public CommandSpec buildSpec() {
        return CommandSpec.builder()
                .executor(this)
                .arguments(string(of("skinName")))
                .permission(PomData.ARTIFACT_ID + ".command.skinselect.base")
                .build();
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_BQ7FgmyOGrxoSL0e9JMlEzRr)
 Call ID: call_BQ7FgmyOGrxoSL0e9JMlEzRr
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/command/InfoCommand.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.command;

import com.github.games647.changeskin.core.model.UserPreference;
import com.github.games647.changeskin.core.model.skin.SkinModel;
import com.github.games647.changeskin.core.shared.SkinFormatter;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.PomData;
import com.google.inject.Inject;

import java.util.Optional;
import java.util.UUID;

import org.spongepowered.api.Sponge;
import org.spongepowered.api.command.CommandException;
import org.spongepowered.api.command.CommandResult;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.command.args.CommandContext;
import org.spongepowered.api.command.spec.CommandExecutor;
import org.spongepowered.api.command.spec.CommandSpec;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.scheduler.Task;
import org.spongepowered.api.text.Text;
import org.spongepowered.api.text.serializer.TextSerializers;

public class InfoCommand implements CommandExecutor, ChangeSkinCommand {

    @Inject
    private ChangeSkinSponge plugin;

    @Inject
    private SkinFormatter formatter;


    @Override
    public CommandResult execute(CommandSource src, CommandContext args) throws CommandException {
        if (!(src instanceof Player)) {
            plugin.sendMessage(src, "no-console");
            return CommandResult.empty();
        }

        UUID uniqueId = ((Player) src).getUniqueId();
        Task.builder().async()
                .execute(() -> {
                    UserPreference preferences = plugin.getCore().getStorage().getPreferences(uniqueId);
                    Task.builder().execute(() -> sendSkinDetails(uniqueId, preferences)).submit(plugin);
                })
                .submit(plugin);

        return CommandResult.success();
    }

    @Override
    public CommandSpec buildSpec() {
        return CommandSpec.builder()
                .executor(this)
                .permission(PomData.ARTIFACT_ID + ".command.skininfo.base")
                .build();
    }

    private void sendSkinDetails(UUID uuid, UserPreference preference) {
        Optional<Player> optPlayer = Sponge.getServer().getPlayer(uuid);
        if (optPlayer.isPresent()) {
            Player player = optPlayer.get();

            Optional<SkinModel> optSkin = preference.getTargetSkin();
            if (optSkin.isPresent()) {
                String template = plugin.getCore().getMessage("skin-info");
                String formatted = formatter.apply(template, optSkin.get());

                Text text = TextSerializers.LEGACY_FORMATTING_CODE.deserialize(formatted);
                player.sendMessage(text);
            } else {
                plugin.sendMessage(player, "skin-not-found");
            }
        }
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_045l4VdrMN65wenIRaAZWUne)
 Call ID: call_045l4VdrMN65wenIRaAZWUne
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/command/InvalidateCommand.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.command;

import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.PomData;
import com.github.games647.changeskin.sponge.task.SkinInvalidator;
import com.google.inject.Inject;

import org.spongepowered.api.command.CommandResult;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.command.args.CommandContext;
import org.spongepowered.api.command.spec.CommandExecutor;
import org.spongepowered.api.command.spec.CommandSpec;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.scheduler.Task;

public class InvalidateCommand implements CommandExecutor, ChangeSkinCommand {

    private final ChangeSkinSponge plugin;

    @Inject
    InvalidateCommand(ChangeSkinSponge plugin) {
        this.plugin = plugin;
    }

    @Override
    public CommandResult execute(CommandSource src, CommandContext args) {
        if (!(src instanceof Player)) {
            plugin.sendMessage(src, "no-console");
            return CommandResult.empty();
        }

        Player receiver = (Player) src;
        Task.builder().async().execute(new SkinInvalidator(plugin, receiver)).submit(plugin);
        return CommandResult.success();
    }

    @Override
    public CommandSpec buildSpec() {
        return CommandSpec.builder()
                .executor(this)
                .permission(PomData.ARTIFACT_ID + ".command.skinupdate.base")
                .build();
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_UmnlPOzigOdbRICJkA1FckfS)
 Call ID: call_UmnlPOzigOdbRICJkA1FckfS
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/command/UploadCommand.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.command;

import com.github.games647.changeskin.core.ChangeSkinCore;
import com.github.games647.changeskin.core.model.auth.Account;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.PomData;
import com.github.games647.changeskin.sponge.task.SkinUploader;
import com.google.inject.Inject;

import java.util.List;

import org.spongepowered.api.command.CommandResult;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.command.args.CommandContext;
import org.spongepowered.api.command.spec.CommandExecutor;
import org.spongepowered.api.command.spec.CommandSpec;
import org.spongepowered.api.scheduler.Task;

import static org.spongepowered.api.command.args.GenericArguments.string;
import static org.spongepowered.api.text.Text.of;

public class UploadCommand implements CommandExecutor, ChangeSkinCommand {

    private final ChangeSkinSponge plugin;
    private final ChangeSkinCore core;

    @Inject
    UploadCommand(ChangeSkinSponge plugin, ChangeSkinCore core) {
        this.plugin = plugin;
        this.core = core;
    }

    @Override
    public CommandResult execute(CommandSource src, CommandContext args) {
        String url = args.<String>getOne("url").get();
        if (url.startsWith("http://") || url.startsWith("https://")) {
            List<Account> accounts = plugin.getCore().getUploadAccounts();
            if (accounts.isEmpty()) {
                plugin.sendMessage(src, "no-accounts");
            } else {
                Account uploadAccount = accounts.get(0);
                Runnable skinUploader = new SkinUploader(plugin, src, uploadAccount, url);
                Task.builder().async().execute(skinUploader).submit(plugin);
            }
        } else {
            plugin.sendMessage(src, "no-valid-url");
        }

        return CommandResult.success();
    }

    @Override
    public CommandSpec buildSpec() {
        return CommandSpec.builder()
                .executor(this)
                .arguments(string(of("url")))
                .permission(PomData.ARTIFACT_ID + ".command.skinupload.base")
                .build();
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_BKmnr14ii0x1CcMvEN4nTCug)
 Call ID: call_BKmnr14ii0x1CcMvEN4nTCug
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/command/SetCommand.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.command;

import com.github.games647.changeskin.core.ChangeSkinCore;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.PomData;
import com.github.games647.changeskin.sponge.task.NameResolver;
import com.github.games647.changeskin.sponge.task.SkinDownloader;
import com.google.inject.Inject;

import java.util.UUID;

import org.spongepowered.api.command.CommandResult;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.command.args.CommandContext;
import org.spongepowered.api.command.args.GenericArguments;
import org.spongepowered.api.command.spec.CommandExecutor;
import org.spongepowered.api.command.spec.CommandSpec;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.scheduler.Task;

import static org.spongepowered.api.command.args.GenericArguments.flags;
import static org.spongepowered.api.command.args.GenericArguments.string;
import static org.spongepowered.api.text.Text.of;

public class SetCommand implements CommandExecutor, ChangeSkinCommand {

    private final ChangeSkinSponge plugin;
    private final ChangeSkinCore core;

    @Inject
    SetCommand(ChangeSkinSponge plugin, ChangeSkinCore core) {
        this.plugin = plugin;
        this.core = core;
    }

    @Override
    public CommandResult execute(CommandSource src, CommandContext args) {
        if (!(src instanceof Player)) {
            plugin.sendMessage(src, "no-console");
            return CommandResult.empty();
        }

        UUID uniqueId = ((Player) src).getUniqueId();
        if (core.getCooldownService().isTracked(uniqueId)) {
            plugin.sendMessage(src, "cooldown");
            return CommandResult.empty();
        }

        Player receiver = (Player) src;
        String targetSkin = args.<String>getOne("skin").get();
        boolean keepSkin = args.hasAny("keep");

        if ("reset".equals(targetSkin)) {
            targetSkin = receiver.getUniqueId().toString();
        }

        if (targetSkin.length() > 16) {
            UUID targetUUID = UUID.fromString(targetSkin);

            if (core.getConfig().getBoolean("skinPermission") && !plugin.hasSkinPermission(src, targetUUID, true)) {
                return CommandResult.empty();
            }

            plugin.sendMessage(src, "skin-change-queue");
            Runnable skinDownloader = new SkinDownloader(plugin, src, receiver, targetUUID, keepSkin);
            Task.builder().async().execute(skinDownloader).submit(plugin);
            return CommandResult.success();
        }

        Runnable nameResolver = new NameResolver(plugin, src, targetSkin, receiver, keepSkin);
        Task.builder().async().execute(nameResolver).submit(plugin);
        return CommandResult.success();
    }

    @Override
    public CommandSpec buildSpec() {
        return CommandSpec.builder()
                .executor(this)
                .arguments(
                        string(of("skin")),
                        flags().flag("keep").buildWith(GenericArguments.none()))
                .permission(PomData.ARTIFACT_ID + ".command.setskin.base")
                .build();
    }
}


================================== Ai Message ==================================
Tool Calls:
  read_file (call_ZpUmbFYGugDAJPEKgvSKJGmI)
 Call ID: call_ZpUmbFYGugDAJPEKgvSKJGmI
  Args:
    file_path: sponge/src/main/java/com/github/games647/changeskin/sponge/bungee/UpdateSkinListener.java

================================= Tool Message =================================
Name: read_file

package com.github.games647.changeskin.sponge.bungee;

import com.github.games647.changeskin.core.message.SkinUpdateMessage;
import com.github.games647.changeskin.sponge.ChangeSkinSponge;
import com.github.games647.changeskin.sponge.task.SkinApplier;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import com.google.inject.Inject;

import java.util.Optional;

import org.spongepowered.api.Platform.Type;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.network.ChannelBuf;
import org.spongepowered.api.network.RawDataListener;
import org.spongepowered.api.network.RemoteConnection;
import org.spongepowered.api.scheduler.Task;

public class UpdateSkinListener implements RawDataListener {

    @Inject
    private ChangeSkinSponge plugin;

    @Override
    public void handlePayload(ChannelBuf data, RemoteConnection connection, Type side) {
        ByteArrayDataInput dataInput = ByteStreams.newDataInput(data.array());
        SkinUpdateMessage updateMessage = new SkinUpdateMessage();
        updateMessage.readFrom(dataInput);

        String playerName = updateMessage.getPlayerName();
        Optional<Player> receiver = Sponge.getServer().getPlayer(playerName);
        if (receiver.isPresent()) {
            Runnable skinUpdater = new SkinApplier(plugin, (CommandSource) connection, receiver.get(), null, false);
            Task.builder().execute(skinUpdater).submit(plugin);
        }
    }
}
