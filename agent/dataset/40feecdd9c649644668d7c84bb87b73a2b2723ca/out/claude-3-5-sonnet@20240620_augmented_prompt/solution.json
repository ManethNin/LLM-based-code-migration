{"compilation_has_succeeded": true, "test_has_succeeded": true, "error_text": "", "updated_files": {"courses-portlet-api/src/main/java/org/jasig/portlet/courses/model/xml/CourseMeetingWrapper.java": "/**\n * Licensed to Apereo under one or more contributor license\n * agreements. See the NOTICE file distributed with this work\n * for additional information regarding copyright ownership.\n * Apereo licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License.  You may obtain a\n * copy of the License at the following location:\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.jasig.portlet.courses.model.xml;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.joda.time.LocalTime;\nimport org.joda.time.format.DateTimeFormat;\nimport org.joda.time.format.DateTimeFormatter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Adds base functionality to the {@link CourseMeeting} object\n * \n * @author Drew Wills\n */\npublic abstract class CourseMeetingWrapper {\n    protected final Logger logger = LoggerFactory.getLogger(getClass());\n    \n    private static final DateTimeFormatter SHORT_TIME_FORMAT = DateTimeFormat.shortTime();\n    \n    public abstract LocalTime getStartTime();\n    \n    public abstract LocalTime getEndTime();\n    \n    public abstract List<String> getDayIds();\n    \n    public String getFormattedMeetingTime() {\n\n        StringBuilder rslt = new StringBuilder();\n\n        LocalTime startTime = this.getStartTime();\n        LocalTime endTime = this.getEndTime();\n        \n        /*\n         * We need to tread carefully -- concrete DAOs are broadly allowed to \n         * pick-and-choose which data they provide. \n         */\n        if (startTime != null) {\n            try {\n                SHORT_TIME_FORMAT.printTo(rslt, startTime);\n                if (endTime != null) {\n                    rslt.append(\" - \");\n                    SHORT_TIME_FORMAT.printTo(rslt, endTime);\n                }\n            } catch (IllegalArgumentException e) {\n                logger.info(\"Failed to generate formatted string for course.startTime=\" + startTime + \" and course.endTime=\" + endTime, e);\n            }\n        }\n\n        return rslt.toString();\n        \n    }\n\n    public String getFormattedMeetingDays() {\n\n        StringBuilder rslt = new StringBuilder();\n\n        List<String> days = this.getDayIds();\n        \n        /*\n         * We need to tread carefully -- concrete DAOs are broadly allowed to \n         * pick-and-choose which data they provide. \n         */\n\n        if (days != null && days.size() != 0) {\n            for (String day : days) {\n                rslt.append(day).append(\", \");\n            }\n            // Remove the last \", \"\n            rslt.setLength(rslt.length() - 2);\n        }\n        \n        return rslt.toString();\n        \n    }\n\n}\n"}, "compile_error_details": {}}