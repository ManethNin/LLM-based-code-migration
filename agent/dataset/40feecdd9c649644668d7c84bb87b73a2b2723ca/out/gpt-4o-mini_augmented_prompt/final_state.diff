diff --git a/courses-portlet-api/src/main/java/org/jasig/portlet/courses/model/xml/CourseMeetingWrapper.java b/courses-portlet-api/src/main/java/org/jasig/portlet/courses/model/xml/CourseMeetingWrapper.java
index 34430a7..28050a5 100644
--- a/courses-portlet-api/src/main/java/org/jasig/portlet/courses/model/xml/CourseMeetingWrapper.java
+++ b/courses-portlet-api/src/main/java/org/jasig/portlet/courses/model/xml/CourseMeetingWrapper.java
@@ -28,70 +28,83 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
- * Adds base functionality to the {@link CourseMeeting} object
- * 
+* Adds base functionality to the {@link CourseMeeting} catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);catch (IllegalArgumentException e) {
+logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);object
+* 
  * @author Drew Wills
- */
+*/
 public abstract class CourseMeetingWrapper {
     protected final Logger logger = LoggerFactory.getLogger(getClass());
-    
+
     private static final DateTimeFormatter SHORT_TIME_FORMAT = DateTimeFormat.shortTime();
-    
+
     public abstract LocalTime getStartTime();
-    
+
     public abstract LocalTime getEndTime();
-    
+
     public abstract List<String> getDayIds();
-    
+
     public String getFormattedMeetingTime() {
 
         StringBuilder rslt = new StringBuilder();
 
         LocalTime startTime = this.getStartTime();
         LocalTime endTime = this.getEndTime();
-        
-        /*
+
+/*
          * We need to tread carefully -- concrete DAOs are broadly allowed to 
          * pick-and-choose which data they provide. 
-         */
+*/
         if (startTime != null) {
-            try {
+try {
                 SHORT_TIME_FORMAT.printTo(rslt, startTime);
                 if (endTime != null) {
                     rslt.append(" - ");
                     SHORT_TIME_FORMAT.printTo(rslt, endTime);
-                }
-            }
+}
+}
             catch (IOException e) {
                 logger.info("Failed to generate formatted string for course.startTime=" + startTime + " and course.endTime=" + endTime, e);
-            }
-        }
+}
+}
 
         return rslt.toString();
-        
-    }
+
+}
 
     public String getFormattedMeetingDays() {
 
         StringBuilder rslt = new StringBuilder();
 
         List<String> days = this.getDayIds();
-        
-        /*
+
+/*
          * We need to tread carefully -- concrete DAOs are broadly allowed to 
          * pick-and-choose which data they provide. 
-         */
+*/
 
         if (days != null && days.size() != 0) {
             for (String day : days) {
                 rslt.append(day).append(", ");
-            }
+}
             // Remove the last ", "
             rslt.setLength(rslt.length() - 2);
-        }
-        
+}
+
         return rslt.toString();
-        
-    }
 
 }
+
+}
\ No newline at end of file