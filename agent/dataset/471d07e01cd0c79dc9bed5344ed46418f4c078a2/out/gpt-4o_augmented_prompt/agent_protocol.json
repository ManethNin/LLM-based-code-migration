{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java\n@@ -1,0 +1,2 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;\n+import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;\n@@ -2,0 +4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n@@ -3,0 +6 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.RestoreDefault;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java\n@@ -1,0 +1,2 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java\n@@ -1,0 +1,2 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n@@ -2,0 +4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.ResourceId;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java\n@@ -1,0 +1,2 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n+import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n@@ -2,0 +4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n@@ -3,0 +6 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java\n@@ -1,0 +1,2 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.BooleanConstraint;\n+import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n@@ -2,0 +4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.ListConstraint;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java\n@@ -1,0 +1,2 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n+import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n@@ -2,0 +4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n@@ -3,0 +6 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java\n@@ -1,0 +1,2 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Operation;\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n@@ -2,0 +4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java\n@@ -1,0 +1,2 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Binding;\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java\n@@ -1,0 +1,2 @@\n+import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;\n@@ -2,0 +4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n@@ -3,0 +6 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;\n@@ -4,0 +8 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;\n@@ -5,0 +10 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;\n@@ -6,0 +12 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;\n@@ -7,0 +14 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;\n@@ -8,0 +16 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;\n@@ -9,0 +18 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;\n@@ -10,0 +20 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;\n@@ -11,0 +22 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Operation;\n@@ -12,0 +24 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n@@ -13,0 +26 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n@@ -14,0 +28 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n@@ -15,0 +30 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;\n@@ -16,0 +32 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;\n@@ -17,0 +34 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Status;\n@@ -18,0 +36 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;\n@@ -19,0 +38 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;\n@@ -20,0 +40 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.UndeleteProjectRequest;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.BooleanPolicy;\nimport com.google.api.services.cloudresourcemanager.model.ListPolicy;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.RestoreDefault;\nimport com.google.common.base.Function;\nimport com.google.common.base.MoreObjects;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager organization policy metadata object.\n *\n * <p>Defines a Cloud Organization Policy which specifies constraints for configurations of Cloud\n * Platform resources.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class OrgPolicyInfo {\n\n  static final Function<OrgPolicy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =\n      new Function<OrgPolicy, OrgPolicyInfo>() {\n        @Override\n        public OrgPolicyInfo apply(OrgPolicy protobuf) {\n          return OrgPolicyInfo.fromProtobuf(protobuf);\n        }\n      };\n  static final Function<OrgPolicyInfo, OrgPolicy> TO_PROTOBUF_FUNCTION =\n      new Function<OrgPolicyInfo, OrgPolicy>() {\n        @Override\n        public OrgPolicy apply(OrgPolicyInfo orgPolicyInfo) {\n          return orgPolicyInfo.toProtobuf();\n        }\n      };\n\n  private BoolPolicy boolPolicy;\n  private String constraint;\n  private String etag;\n  private Policies policies;\n  private RestoreDefault restoreDefault;\n  private String updateTime;\n  private Integer version;\n\n  /** Used For boolean Constraints, whether to enforce the Constraint or not. */\n  static class BoolPolicy {\n\n    private final Boolean enforce;\n\n    BoolPolicy(Boolean enforce) {\n      this.enforce = enforce;\n    }\n\n    public boolean getEnforce() {\n      return enforce;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this).add(\"enforce\", getEnforce()).toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      BoolPolicy that = (BoolPolicy) o;\n      return Objects.equals(enforce, that.enforce);\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(enforce);\n    }\n\n    BooleanPolicy toProtobuf() {\n      return new BooleanPolicy().setEnforced(enforce);\n    }\n\n    static BoolPolicy fromProtobuf(BooleanPolicy booleanPolicy) {\n      return new BoolPolicy(booleanPolicy.getEnforced());\n    }\n  }\n\n  /**\n   * The organization ListPolicy object.\n   *\n   * <p>ListPolicy can define specific values and subtrees of Cloud Resource Manager resource\n   * hierarchy (Organizations, Folders, Projects) that are allowed or denied by setting the\n   * allowedValues and deniedValues fields. This is achieved by using the under: and optional is:\n   * prefixes. The under: prefix denotes resource subtree values. The is: prefix is used to denote\n   * specific values, and is required only if the value contains a \":\". Values prefixed with \"is:\"\n   * are treated the same as values with no prefix. Ancestry subtrees must be in one of the\n   * following formats: - \"projects/\", e.g. \"projects/tokyo-rain-123\" - \"folders/\", e.g.\n   * \"folders/1234\" - \"organizations/\", e.g. \"organizations/1234\" The supportsUnder field of the\n   * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues\n   * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are\n   * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues\n   * and deniedValues must be unset.\n   */\n  static class Policies {\n\n    private final String allValues;\n    private final List<String> allowedValues;\n    private final List<java.lang.String> deniedValues;\n    private final Boolean inheritFromParent;\n    private final String suggestedValue;\n\n    Policies(\n        String allValues,\n        List<String> allowedValues,\n        List<String> deniedValues,\n        Boolean inheritFromParent,\n        String suggestedValue) {\n      this.allValues = allValues;\n      this.allowedValues = allowedValues;\n      this.deniedValues = deniedValues;\n      this.inheritFromParent = inheritFromParent;\n      this.suggestedValue = suggestedValue;\n    }\n\n    /** Returns all the Values state of this policy. */\n    String getAllValues() {\n      return allValues;\n    }\n\n    /** Returns the list of allowed values of this resource */\n    List<String> getAllowedValues() {\n      return allowedValues;\n    }\n\n    /** Returns the list of denied values of this resource. */\n    List<String> getDeniedValues() {\n      return deniedValues;\n    }\n\n    /** Returns the inheritance behavior for this Policy */\n    Boolean getInheritFromParent() {\n      return inheritFromParent;\n    }\n\n    /** Returns the suggested value of this policy. */\n    String getSuggestedValue() {\n      return suggestedValue;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this)\n          .add(\"allValues\", getAllValues())\n          .add(\"allowedValues\", getAllowedValues())\n          .add(\"deniedValues\", getDeniedValues())\n          .add(\"inheritFromParent\", getInheritFromParent())\n          .add(\"suggestedValue\", getSuggestedValue())\n          .toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Policies policies = (Policies) o;\n      return Objects.equals(allValues, policies.allValues)\n          && Objects.equals(allowedValues, policies.allowedValues)\n          && Objects.equals(deniedValues, policies.deniedValues)\n          && Objects.equals(inheritFromParent, policies.inheritFromParent)\n          && Objects.equals(suggestedValue, policies.suggestedValue);\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(\n          allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);\n    }\n\n    ListPolicy toProtobuf() {\n      return new ListPolicy()\n          .setAllValues(allValues)\n          .setAllowedValues(allowedValues)\n          .setDeniedValues(deniedValues)\n          .setInheritFromParent(inheritFromParent)\n          .setSuggestedValue(suggestedValue);\n    }\n\n    static Policies fromProtobuf(ListPolicy listPolicy) {\n      return new Policies(\n          listPolicy.getAllValues(),\n          listPolicy.getAllowedValues(),\n          listPolicy.getDeniedValues(),\n          listPolicy.getInheritFromParent(),\n          listPolicy.getSuggestedValue());\n    }\n  }\n\n  /** Builder for {@code OrganizationPolicyInfo}. */\n  static class Builder {\n    private BoolPolicy boolPolicy;\n    private String constraint;\n    private String etag;\n    private Policies policies;\n    private RestoreDefault restoreDefault;\n    private String updateTime;\n    private Integer version;\n\n    Builder() {}\n\n    Builder(OrgPolicyInfo info) {\n      this.boolPolicy = info.boolPolicy;\n      this.constraint = info.constraint;\n      this.etag = info.etag;\n      this.policies = info.policies;\n      this.restoreDefault = info.restoreDefault;\n      this.updateTime = info.updateTime;\n      this.version = info.version;\n    }\n\n    Builder setBoolPolicy(BoolPolicy boolPolicy) {\n      this.boolPolicy = boolPolicy;\n      return this;\n    }\n\n    Builder setConstraint(String constraint) {\n      this.constraint = constraint;\n      return this;\n    }\n\n    Builder setEtag(String etag) {\n      this.etag = etag;\n      return this;\n    }\n\n    Builder setListPolicy(Policies policies) {\n      this.policies = policies;\n      return this;\n    }\n\n    Builder setRestoreDefault(RestoreDefault restoreDefault) {\n      this.restoreDefault = restoreDefault;\n      return this;\n    }\n\n    Builder setUpdateTime(String updateTime) {\n      this.updateTime = updateTime;\n      return this;\n    }\n\n    Builder setVersion(Integer version) {\n      this.version = version;\n      return this;\n    }\n\n    OrgPolicyInfo build() {\n      return new OrgPolicyInfo(this);\n    }\n  }\n\n  OrgPolicyInfo(Builder builder) {\n    this.boolPolicy = builder.boolPolicy;\n    this.constraint = builder.constraint;\n    this.etag = builder.etag;\n    this.policies = builder.policies;\n    this.restoreDefault = builder.restoreDefault;\n    this.updateTime = builder.updateTime;\n    this.version = builder.version;\n  }\n\n  /** Returns the boolean constraint to check whether the constraint is enforced or not. */\n  public BoolPolicy getBoolPolicy() {\n    return boolPolicy;\n  }\n\n  /** Returns the name of the Constraint. */\n  public String getConstraint() {\n    return constraint;\n  }\n\n  /** Returns the etag value of policy. */\n  public String getEtag() {\n    return etag;\n  }\n\n  /** Return the policies. */\n  public Policies getPolicies() {\n    return policies;\n  }\n\n  /** Restores the default behavior of the constraint. */\n  public RestoreDefault getRestoreDefault() {\n    return restoreDefault;\n  }\n\n  /** Returns the updated timestamp of policy. */\n  public String getUpdateTime() {\n    return updateTime;\n  }\n\n  /** Returns the version of the Policy, Default version is 0. */\n  public Integer getVersion() {\n    return version;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    OrgPolicyInfo policyInfo = (OrgPolicyInfo) o;\n    return Objects.equals(boolPolicy, policyInfo.boolPolicy)\n        && Objects.equals(constraint, policyInfo.constraint)\n        && Objects.equals(etag, policyInfo.etag)\n        && Objects.equals(policies, policyInfo.policies)\n        && Objects.equals(restoreDefault, policyInfo.restoreDefault)\n        && Objects.equals(updateTime, policyInfo.updateTime)\n        && Objects.equals(version, policyInfo.version);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);\n  }\n\n  /** Returns a builder for the {@link OrgPolicyInfo} object. */\n  public static Builder newBuilder() {\n    return new Builder();\n  }\n\n  /** Returns a builder for the {@link OrgPolicyInfo} object. */\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  OrgPolicy toProtobuf() {\n    OrgPolicy orgPolicyProto = new OrgPolicy();\n    if (boolPolicy != null) {\n      orgPolicyProto.setBooleanPolicy(boolPolicy.toProtobuf());\n    }\n    orgPolicyProto.setConstraint(constraint);\n    if (policies != null) {\n      orgPolicyProto.setListPolicy(policies.toProtobuf());\n    }\n    orgPolicyProto.setRestoreDefault(restoreDefault);\n    orgPolicyProto.setEtag(etag);\n    orgPolicyProto.setUpdateTime(updateTime);\n    orgPolicyProto.setVersion(version);\n    return orgPolicyProto;\n  }\n\n  static OrgPolicyInfo fromProtobuf(OrgPolicy orgPolicyProtobuf) {\n    Builder builder = newBuilder();\n    if (orgPolicyProtobuf.getBooleanPolicy() != null) {\n      builder.setBoolPolicy(BoolPolicy.fromProtobuf(orgPolicyProtobuf.getBooleanPolicy()));\n    }\n    builder.setConstraint(orgPolicyProtobuf.getConstraint());\n    if (orgPolicyProtobuf.getListPolicy() != null) {\n      builder.setListPolicy(Policies.fromProtobuf(orgPolicyProtobuf.getListPolicy()));\n    }\n    builder.setRestoreDefault(orgPolicyProtobuf.getRestoreDefault());\n    builder.setEtag(orgPolicyProtobuf.getEtag());\n    builder.setUpdateTime(orgPolicyProtobuf.getUpdateTime());\n    builder.setVersion(orgPolicyProtobuf.getVersion());\n    return builder.build();\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.RestoreDefault;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.cloud.Policy;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager project object.\n *\n * <p>A Project is a high-level Google Cloud Platform entity. It is a container for ACLs, APIs,\n * AppEngine Apps, VMs, and other Google Cloud Platform resources. This class' member variables are\n * immutable. Methods that change or update the underlying Project information return a new Project\n * instance. {@code Project} adds a layer of service-related functionality over {@link ProjectInfo}.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class Project extends ProjectInfo {\n\n  private static final long serialVersionUID = 6767630161335155133L;\n\n  private final ResourceManagerOptions options;\n  private transient ResourceManager resourceManager;\n\n  /** Builder for {@code Project}. */\n  public static class Builder extends ProjectInfo.Builder {\n    private final ResourceManager resourceManager;\n    private final ProjectInfo.BuilderImpl infoBuilder;\n\n    Builder(Project project) {\n      this.resourceManager = project.resourceManager;\n      this.infoBuilder = new ProjectInfo.BuilderImpl(project);\n    }\n\n    @Override\n    public Builder setName(String name) {\n      infoBuilder.setName(name);\n      return this;\n    }\n\n    @Override\n    public Builder setProjectId(String projectId) {\n      infoBuilder.setProjectId(projectId);\n      return this;\n    }\n\n    @Override\n    public Builder addLabel(String key, String value) {\n      infoBuilder.addLabel(key, value);\n      return this;\n    }\n\n    @Override\n    public Builder removeLabel(String key) {\n      infoBuilder.removeLabel(key);\n      return this;\n    }\n\n    @Override\n    public Builder clearLabels() {\n      infoBuilder.clearLabels();\n      return this;\n    }\n\n    @Override\n    public Builder setLabels(Map<String, String> labels) {\n      infoBuilder.setLabels(labels);\n      return this;\n    }\n\n    @Override\n    Builder setProjectNumber(Long projectNumber) {\n      infoBuilder.setProjectNumber(projectNumber);\n      return this;\n    }\n\n    @Override\n    Builder setState(State state) {\n      infoBuilder.setState(state);\n      return this;\n    }\n\n    @Override\n    Builder setCreateTimeMillis(Long createTimeMillis) {\n      infoBuilder.setCreateTimeMillis(createTimeMillis);\n      return this;\n    }\n\n    @Override\n    public Builder setParent(ResourceId parent) {\n      infoBuilder.setParent(parent);\n      return this;\n    }\n\n    @Override\n    public Project build() {\n      return new Project(resourceManager, infoBuilder);\n    }\n  }\n\n  Project(ResourceManager resourceManager, ProjectInfo.BuilderImpl infoBuilder) {\n    super(infoBuilder);\n    this.resourceManager = checkNotNull(resourceManager);\n    this.options = resourceManager.getOptions();\n  }\n\n  /** Returns the {@link ResourceManager} service object associated with this Project. */\n  public ResourceManager getResourceManager() {\n    return resourceManager;\n  }\n\n  /**\n   * Fetches the project's latest information. Returns {@code null} if the project does not exist.\n   *\n   * @return Project containing the project's updated metadata or {@code null} if not found\n   * @throws ResourceManagerException upon failure\n   */\n  public Project reload() {\n    return resourceManager.get(getProjectId());\n  }\n\n  /**\n   * Marks the project identified by the specified project ID for deletion.\n   *\n   * <p>This method will only affect the project if the following criteria are met:\n   *\n   * <ul>\n   *   <li>The project does not have a billing account associated with it.\n   *   <li>The project has a lifecycle state of {@link ProjectInfo.State#ACTIVE}.\n   * </ul>\n   *\n   * This method changes the project's lifecycle state from {@link ProjectInfo.State#ACTIVE} to\n   * {@link ProjectInfo.State#DELETE_REQUESTED}. The deletion starts at an unspecified time, at\n   * which point the lifecycle state changes to {@link ProjectInfo.State#DELETE_IN_PROGRESS}. Until\n   * the deletion completes, you can check the lifecycle state checked by retrieving the project\n   * with {@link ResourceManager#get}, and the project remains visible to {@link\n   * ResourceManager#list}. However, you cannot update the project. After the deletion completes,\n   * the project is not retrievable by the {@link ResourceManager#get} and {@link\n   * ResourceManager#list} methods. The caller must have modify permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/delete\">Cloud\n   *     Resource Manager delete</a>\n   */\n  public void delete() {\n    resourceManager.delete(getProjectId());\n  }\n\n  /**\n   * Restores the project identified by the specified project ID.\n   *\n   * <p>You can only use this method for a project that has a lifecycle state of {@link\n   * ProjectInfo.State#DELETE_REQUESTED}. After deletion starts, as indicated by a lifecycle state\n   * of {@link ProjectInfo.State#DELETE_IN_PROGRESS}, the project cannot be restored. The caller\n   * must have modify permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure (including when the project can't be restored)\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/undelete\">Cloud\n   *     Resource Manager undelete</a>\n   */\n  public void undelete() {\n    resourceManager.undelete(getProjectId());\n  }\n\n  /**\n   * Replaces the attributes of the project with the attributes of this project.\n   *\n   * <p>The caller must have modify permissions for this project.\n   *\n   * @return the Project representing the new project metadata\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/update\">Cloud\n   *     Resource Manager update</a>\n   */\n  public Project replace() {\n    return resourceManager.replace(this);\n  }\n\n  /**\n   * Returns the IAM access control policy for this project. Returns {@code null} if the resource\n   * does not exist or if you do not have adequate permission to view the project or get the policy.\n   *\n   * @return the IAM policy for the project\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/getIamPolicy\">\n   *     Resource Manager getIamPolicy</a>\n   */\n  public Policy getPolicy() {\n    return resourceManager.getPolicy(getProjectId());\n  }\n\n  /**\n   * Sets the IAM access control policy for this project. Replaces any existing policy. It is\n   * recommended that you use the read-modify-write pattern. See code samples and important details\n   * of replacing policies in the documentation for {@link ResourceManager#replacePolicy}.\n   *\n   * @return the newly set IAM policy for this project\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/setIamPolicy\">\n   *     Resource Manager setIamPolicy</a>\n   */\n  public Policy replacePolicy(Policy newPolicy) {\n    return resourceManager.replacePolicy(getProjectId(), newPolicy);\n  }\n\n  /**\n   * Returns the permissions that a caller has on this project. You typically don't call this method\n   * if you're using Google Cloud Platform directly to manage permissions. This method is intended\n   * for integration with your proprietary software, such as a customized graphical user interface.\n   * For example, the Cloud Platform Console tests IAM permissions internally to determine which UI\n   * should be available to the logged-in user. Each service that supports IAM lists the possible\n   * permissions; see the <i>Supported Cloud Platform services</i> page below for links to these\n   * lists.\n   *\n   * @return a list of booleans representing whether the caller has the permissions specified (in\n   *     the order of the given permissions)\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/testIamPermissions\">\n   *     Resource Manager testIamPermissions</a>\n   * @see <a href= \"https://cloud.google.com/iam/#supported_cloud_platform_services\">Supported Cloud\n   *     Platform Services</a>\n   */\n  List<Boolean> testPermissions(List<String> permissions) {\n    return resourceManager.testPermissions(getProjectId(), permissions);\n  }\n\n  @Override\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  @Override\n  public final boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null || !obj.getClass().equals(Project.class)) {\n      return false;\n    }\n    Project other = (Project) obj;\n    return Objects.equals(toPb(), other.toPb()) && Objects.equals(options, other.options);\n  }\n\n  @Override\n  public final int hashCode() {\n    return Objects.hash(super.hashCode(), options);\n  }\n\n  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n    in.defaultReadObject();\n    this.resourceManager = options.getService();\n  }\n\n  static Project fromPb(\n      ResourceManager resourceManager,\n      com.google.api.services.cloudresourcemanager.model.Project answer) {\n    ProjectInfo info = ProjectInfo.fromPb(answer);\n    return new Project(resourceManager, new ProjectInfo.BuilderImpl(info));\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.common.base.MoreObjects.firstNonNull;\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.api.client.util.Data;\nimport com.google.api.core.ApiFunction;\nimport com.google.cloud.StringEnumType;\nimport com.google.cloud.StringEnumValue;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\n\n/**\n * A Google Cloud Resource Manager project metadata object. A Project is a high-level Google Cloud\n * Platform entity. It is a container for ACLs, APIs, AppEngine Apps, VMs, and other Google Cloud\n * Platform resources.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class ProjectInfo implements Serializable {\n\n  public static final DateTimeFormatter DATE_TIME_FORMATTER =\n      DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC);\n  private static final long serialVersionUID = 9148970963697734236L;\n  private final String name;\n  private final String projectId;\n  private final Map<String, String> labels;\n  private final Long projectNumber;\n  private final State state;\n  private final Long createTimeMillis;\n  private final ResourceId parent;\n\n  /** The project lifecycle states. */\n  public static final class State extends StringEnumValue {\n    private static final long serialVersionUID = 869635563976629566L;\n\n    private static final ApiFunction<String, State> CONSTRUCTOR =\n        new ApiFunction<String, State>() {\n          @Override\n          public State apply(String constant) {\n            return new State(constant);\n          }\n        };\n\n    private static final StringEnumType<State> type = new StringEnumType(State.class, CONSTRUCTOR);\n\n    /** Only used/useful for distinguishing unset values. */\n    public static final State LIFECYCLE_STATE_UNSPECIFIED =\n        type.createAndRegister(\"LIFECYCLE_STATE_UNSPECIFIED\");\n\n    /** The normal and active state. */\n    public static final State ACTIVE = type.createAndRegister(\"ACTIVE\");\n\n    /**\n     * The project has been marked for deletion by the user or by the system (Google Cloud\n     * Platform). This can generally be reversed by calling {@link ResourceManager#undelete}.\n     */\n    public static final State DELETE_REQUESTED = type.createAndRegister(\"DELETE_REQUESTED\");\n\n    /**\n     * The process of deleting the project has begun. Reversing the deletion is no longer possible.\n     */\n    public static final State DELETE_IN_PROGRESS = type.createAndRegister(\"DELETE_IN_PROGRESS\");\n\n    private State(String constant) {\n      super(constant);\n    }\n\n    /**\n     * Get the State for the given String constant, and throw an exception if the constant is not\n     * recognized.\n     */\n    public static State valueOfStrict(String constant) {\n      return type.valueOfStrict(constant);\n    }\n\n    /** Get the State for the given String constant, and allow unrecognized values. */\n    public static State valueOf(String constant) {\n      return type.valueOf(constant);\n    }\n\n    /** Return the known values for State. */\n    public static State[] values() {\n      return type.values();\n    }\n  }\n\n  public static class ResourceId implements Serializable {\n\n    private static final long serialVersionUID = -325199985993344726L;\n\n    private final String id;\n    private final String type;\n\n    ResourceId(String id, String type) {\n      this.id = checkNotNull(id);\n      this.type = checkNotNull(type);\n    }\n\n    public static ResourceId of(String id, String type) {\n      return new ResourceId(checkNotNull(id), checkNotNull(type));\n    }\n\n    public String getId() {\n      return id;\n    }\n\n    public String getType() {\n      return type;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n      return obj instanceof ResourceId && Objects.equals(toPb(), ((ResourceId) obj).toPb());\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(id, type);\n    }\n\n    com.google.api.services.cloudresourcemanager.model.ResourceId toPb() {\n      com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb =\n          new com.google.api.services.cloudresourcemanager.model.ResourceId();\n      resourceIdPb.setId(id);\n      resourceIdPb.setType(type.toLowerCase());\n      return resourceIdPb;\n    }\n\n    static ResourceId fromPb(\n        com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb) {\n      return new ResourceId(resourceIdPb.getId(), resourceIdPb.getType());\n    }\n  }\n\n  /** Builder for {@code ProjectInfo}. */\n  public abstract static class Builder {\n\n    /**\n     * Set the user-assigned name of the project.\n     *\n     * <p>This field is optional and can remain unset. Allowed characters are: lowercase and\n     * uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point.\n     * This field can be changed after project creation.\n     */\n    public abstract Builder setName(String name);\n\n    /**\n     * Set the unique, user-assigned ID of the project.\n     *\n     * <p>The ID must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter.\n     * Trailing hyphens are prohibited. This field cannot be changed after the server creates the\n     * project.\n     */\n    public abstract Builder setProjectId(String projectId);\n\n    /**\n     * Add a label associated with this project.\n     *\n     * <p>See {@link #labels} for label restrictions.\n     */\n    public abstract Builder addLabel(String key, String value);\n\n    /** Remove a label associated with this project. */\n    public abstract Builder removeLabel(String key);\n\n    /** Clear the labels associated with this project. */\n    public abstract Builder clearLabels();\n\n    /**\n     * Set the labels associated with this project.\n     *\n     * <p>Label keys must be between 1 and 63 characters long and must conform to the following\n     * regular expression: [a-z]([-a-z0-9]*[a-z0-9])?. Label values must be between 0 and 63\n     * characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?. No\n     * more than 256 labels can be associated with a given resource. This field can be changed after\n     * project creation.\n     */\n    public abstract Builder setLabels(Map<String, String> labels);\n\n    abstract Builder setProjectNumber(Long projectNumber);\n\n    abstract Builder setState(State state);\n\n    abstract Builder setCreateTimeMillis(Long createTimeMillis);\n\n    public abstract Builder setParent(ResourceId parent);\n\n    public abstract ProjectInfo build();\n  }\n\n  static class BuilderImpl extends Builder {\n\n    private String name;\n    private String projectId;\n    private Map<String, String> labels = new HashMap<>();\n    private Long projectNumber;\n    private State state;\n    private Long createTimeMillis;\n    private ResourceId parent;\n\n    BuilderImpl(String projectId) {\n      this.projectId = projectId;\n    }\n\n    BuilderImpl(ProjectInfo info) {\n      this.name = info.name;\n      this.projectId = info.projectId;\n      this.labels.putAll(info.labels);\n      this.projectNumber = info.projectNumber;\n      this.state = info.state;\n      this.createTimeMillis = info.createTimeMillis;\n      this.parent = info.parent;\n    }\n\n    @Override\n    public Builder setName(String name) {\n      this.name = firstNonNull(name, Data.<String>nullOf(String.class));\n      return this;\n    }\n\n    @Override\n    public Builder setProjectId(String projectId) {\n      this.projectId = checkNotNull(projectId);\n      return this;\n    }\n\n    @Override\n    public Builder addLabel(String key, String value) {\n      this.labels.put(key, value);\n      return this;\n    }\n\n    @Override\n    public Builder removeLabel(String key) {\n      this.labels.remove(key);\n      return this;\n    }\n\n    @Override\n    public Builder clearLabels() {\n      this.labels.clear();\n      return this;\n    }\n\n    @Override\n    public Builder setLabels(Map<String, String> labels) {\n      this.labels = Maps.newHashMap(checkNotNull(labels));\n      return this;\n    }\n\n    @Override\n    Builder setProjectNumber(Long projectNumber) {\n      this.projectNumber = projectNumber;\n      return this;\n    }\n\n    @Override\n    Builder setState(State state) {\n      this.state = state;\n      return this;\n    }\n\n    @Override\n    Builder setCreateTimeMillis(Long createTimeMillis) {\n      this.createTimeMillis = createTimeMillis;\n      return this;\n    }\n\n    @Override\n    public Builder setParent(ResourceId parent) {\n      this.parent = parent;\n      return this;\n    }\n\n    @Override\n    public ProjectInfo build() {\n      return new ProjectInfo(this);\n    }\n  }\n\n  ProjectInfo(BuilderImpl builder) {\n    this.name = builder.name;\n    this.projectId = builder.projectId;\n    this.labels = ImmutableMap.copyOf(builder.labels);\n    this.projectNumber = builder.projectNumber;\n    this.state = builder.state;\n    this.createTimeMillis = builder.createTimeMillis;\n    this.parent = builder.parent;\n  }\n\n  /**\n   * Get the unique, user-assigned ID of the project.\n   *\n   * <p>This field cannot be changed after the server creates the project.\n   */\n  public String getProjectId() {\n    return projectId;\n  }\n\n  /**\n   * Get the user-assigned name of the project.\n   *\n   * <p>This field is optional, can remain unset, and can be changed after project creation.\n   */\n  public String getName() {\n    return Data.isNull(name) ? null : name;\n  }\n\n  /**\n   * Get number uniquely identifying the project.\n   *\n   * <p>This field is set by the server and is read-only.\n   */\n  public Long getProjectNumber() {\n    return projectNumber;\n  }\n\n  /** Get the immutable map of labels associated with this project. */\n  public Map<String, String> getLabels() {\n    return labels;\n  }\n\n  /**\n   * Get the project's lifecycle state.\n   *\n   * <p>This is a read-only field. To change the lifecycle state of your project, use the {@code\n   * delete} or {@code undelete} method.\n   */\n  public State getState() {\n    return state;\n  }\n\n  ResourceId getParent() {\n    return parent;\n  }\n\n  /**\n   * Get the project's creation time (in milliseconds).\n   *\n   * <p>This field is set by the server and is read-only.\n   */\n  public Long getCreateTimeMillis() {\n    return createTimeMillis;\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    return obj == this\n        || obj != null\n            && obj.getClass().equals(ProjectInfo.class)\n            && Objects.equals(toPb(), ((ProjectInfo) obj).toPb());\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(name, projectId, labels, projectNumber, state, createTimeMillis, parent);\n  }\n\n  public static Builder newBuilder(String id) {\n    return new BuilderImpl(id);\n  }\n\n  public Builder toBuilder() {\n    return new BuilderImpl(this);\n  }\n\n  com.google.api.services.cloudresourcemanager.model.Project toPb() {\n    com.google.api.services.cloudresourcemanager.model.Project projectPb =\n        new com.google.api.services.cloudresourcemanager.model.Project();\n    projectPb.setName(name);\n    projectPb.setProjectId(projectId);\n    projectPb.setLabels(labels);\n    projectPb.setProjectNumber(projectNumber);\n    if (state != null) {\n      projectPb.setLifecycleState(state.toString());\n    }\n    if (createTimeMillis != null) {\n      projectPb.setCreateTime(\n          DateTimeFormatter.ISO_DATE_TIME\n              .withZone(ZoneOffset.UTC)\n              .format(Instant.ofEpochMilli(createTimeMillis)));\n    }\n    if (parent != null) {\n      projectPb.setParent(parent.toPb());\n    }\n    return projectPb;\n  }\n\n  static ProjectInfo fromPb(com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n    Builder builder =\n        newBuilder(projectPb.getProjectId()).setProjectNumber(projectPb.getProjectNumber());\n    if (projectPb.getName() != null && !projectPb.getName().equals(\"Unnamed\")) {\n      builder.setName(projectPb.getName());\n    }\n    if (projectPb.getLabels() != null) {\n      builder.setLabels(projectPb.getLabels());\n    }\n    if (projectPb.getLifecycleState() != null) {\n      builder.setState(State.valueOf(projectPb.getLifecycleState()));\n    }\n    if (projectPb.getCreateTime() != null) {\n      builder.setCreateTimeMillis(\n          DATE_TIME_FORMATTER.parse(projectPb.getCreateTime(), Instant.FROM).toEpochMilli());\n    }\n    if (projectPb.getParent() != null) {\n      builder.setParent(ResourceId.fromPb(projectPb.getParent()));\n    }\n    return builder.build();\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\nimport com.google.api.services.cloudresourcemanager.v3.model.ResourceId;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.spi.v1beta1;\n\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.cloud.ServiceRpc;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.ResourceManagerException;\nimport com.google.common.collect.ImmutableList;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\npublic interface ResourceManagerRpc extends ServiceRpc {\n\n  enum Option {\n    FILTER(\"filter\"),\n    FIELDS(\"fields\"),\n    PAGE_SIZE(\"pageSize\"),\n    PAGE_TOKEN(\"pageToken\");\n\n    private final String value;\n\n    Option(String value) {\n      this.value = value;\n    }\n\n    public String value() {\n      return value;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    <T> T get(Map<Option, ?> options) {\n      return (T) options.get(this);\n    }\n\n    String getString(Map<Option, ?> options) {\n      return get(options);\n    }\n\n    Integer getInt(Map<Option, ?> options) {\n      return get(options);\n    }\n  }\n\n  class ListResult<T> {\n\n    private final Iterable<T> results;\n    private final String pageToken;\n\n    ListResult(String pageToken, Iterable<T> results) {\n      this.results = ImmutableList.copyOf(results);\n      this.pageToken = pageToken;\n    }\n\n    public static <T> ListResult<T> of(String pageToken, Iterable<T> list) {\n      return new ListResult<>(pageToken, list);\n    }\n\n    public Iterable<T> results() {\n      return results;\n    }\n\n    public String pageToken() {\n      return pageToken;\n    }\n  }\n  /**\n   * Creates a new project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project create(Project project);\n\n  /**\n   * Marks the project identified by the specified project ID for deletion.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  void delete(String projectId);\n\n  /**\n   * Retrieves the project identified by the specified project ID. Returns {@code null} if the\n   * project is not found or if the user doesn't have read permissions for the project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project get(String projectId, Map<Option, ?> options);\n\n  /**\n   * Lists the projects visible to the current user.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Tuple<String, Iterable<Project>> list(Map<Option, ?> options);\n\n  /**\n   * Restores the project identified by the specified project ID. Undelete will only succeed if the\n   * project has a lifecycle state of {@code DELETE_REQUESTED} state. The caller must have modify\n   * permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  void undelete(String projectId);\n\n  /**\n   * Replaces the attributes of the project. The caller must have modify permissions for this\n   * project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project replace(Project project);\n\n  /**\n   * Returns the IAM policy associated with a project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Policy getPolicy(String projectId);\n\n  /**\n   * Replaces the IAM policy associated with the given project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Policy replacePolicy(String projectId, Policy newPolicy);\n\n  /**\n   * Tests whether the caller has the given permissions. Returns a list of booleans corresponding to\n   * whether or not the user has the permission in the same position of input list.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  List<Boolean> testPermissions(String projectId, List<String> permissions);\n\n  /**\n   * Tests whether the caller has the given permissions on the specified Organization. Returns the\n   * permissions and their results.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)\n      throws IOException;\n\n  // TODO(ajaykannan): implement \"Organization\" functionality when available (issue #319)\n\n  /** Clears the Policy from a resource. */\n  void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;\n\n  /**\n   * Gets the effective Policy on a resource.\n   *\n   * <p>This is the result of merging Policies in the resource hierarchy. The returned Policy does\n   * not have an etag set because it is a computed Policy across multiple resources. Subtrees of\n   * Resource Manager resource hierarchy with 'under:' prefix will not be expanded.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException;\n\n  /**\n   * Gets the Policy on a resource.\n   *\n   * <p>If no Policy is set on the resource, a Policy is returned with default values including\n   * POLICY_TYPE_NOT_SET for the policy_type oneof. The etag value can be used with\n   * projects.setOrgPolicy() to create or update a Policy during read-modify-write.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException;\n\n  /**\n   * Lists all the Constraints that can be applied on the specified resource.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  ListResult<Constraint> listAvailableOrgPolicyConstraints(String resource, Map<Option, ?> options)\n      throws IOException;\n\n  /**\n   * Lists all the Policies set for a particular resource.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options) throws IOException;\n\n  /**\n   * Updates the specified Policy on the resource. Creates a new Policy for that Constraint on the\n   * resource if one does not exist.\n   *\n   * <p>Not supplying an etag on the request Policy results in an unconditional write of the Policy.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.BooleanConstraint;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.ListConstraint;\nimport com.google.common.base.Function;\nimport com.google.common.base.MoreObjects;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager constraint metadata object.\n *\n * @see <a\n *     href=\"https://cloud.google.com/resource-manager/reference/rest/v1/ListAvailableOrgPolicyConstraintsResponse#Constraint\">Constraint</a>\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class ConstraintInfo {\n\n  static final Function<Constraint, ConstraintInfo> FROM_PROTOBUF_FUNCTION =\n      new Function<Constraint, ConstraintInfo>() {\n        @Override\n        public ConstraintInfo apply(Constraint protobuf) {\n          return ConstraintInfo.fromProtobuf(protobuf);\n        }\n      };\n  static final Function<ConstraintInfo, Constraint> TO_PROTOBUF_FUNCTION =\n      new Function<ConstraintInfo, Constraint>() {\n        @Override\n        public Constraint apply(ConstraintInfo constraintInfo) {\n          return constraintInfo.toProtobuf();\n        }\n      };\n\n  private BooleanConstraint booleanConstraint;\n  private String constraintDefault;\n  private String description;\n  private String displayName;\n  private Constraints constraints;\n  private String name;\n  private Integer version;\n\n  /**\n   * A Constraint that allows or disallows a list of string values, which are configured by an\n   * Organization's policy administrator with a Policy.\n   */\n  static class Constraints {\n\n    private final String suggestedValue;\n    private final Boolean supportsUnder;\n\n    Constraints(String suggestedValue, Boolean supportsUnder) {\n      this.suggestedValue = suggestedValue;\n      this.supportsUnder = supportsUnder;\n    }\n\n    /**\n     * The Google Cloud Console tries to default to a configuration that matches the value specified\n     * in this Constraint.\n     */\n    String getSuggestedValue() {\n      return suggestedValue;\n    }\n\n    /**\n     * Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in\n     * Policy.allowed_values and Policy.denied_values.\n     */\n    Boolean getSupportsUnder() {\n      return supportsUnder;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this)\n          .add(\"suggestedValue\", getSuggestedValue())\n          .add(\"supportsUnder\", getSupportsUnder())\n          .toString();\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(suggestedValue, supportsUnder);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Constraints that = (Constraints) o;\n      return Objects.equals(suggestedValue, that.suggestedValue)\n          && Objects.equals(supportsUnder, that.supportsUnder);\n    }\n\n    ListConstraint toProtobuf() {\n      return new ListConstraint().setSuggestedValue(suggestedValue).setSupportsUnder(supportsUnder);\n    }\n\n    static Constraints fromProtobuf(ListConstraint listConstraint) {\n      return new Constraints(listConstraint.getSuggestedValue(), listConstraint.getSupportsUnder());\n    }\n  }\n\n  /** Builder for {@code ConstraintInfo}. */\n  static class Builder {\n    private BooleanConstraint booleanConstraint;\n    private String constraintDefault;\n    private String description;\n    private String displayName;\n    private Constraints constraints;\n    private String name;\n    private Integer version;\n\n    Builder(String name) {\n      this.name = name;\n    }\n\n    Builder(ConstraintInfo info) {\n      this.booleanConstraint = info.booleanConstraint;\n      this.constraintDefault = info.constraintDefault;\n      this.description = info.description;\n      this.displayName = info.displayName;\n      this.constraints = info.constraints;\n      this.name = info.name;\n      this.version = info.version;\n    }\n\n    Builder setBooleanConstraint(BooleanConstraint booleanConstraint) {\n      this.booleanConstraint = booleanConstraint;\n      return this;\n    }\n\n    Builder setConstraintDefault(String constraintDefault) {\n      this.constraintDefault = constraintDefault;\n      return this;\n    }\n\n    Builder setDescription(String description) {\n      this.description = description;\n      return this;\n    }\n\n    Builder setDisplayName(String displayName) {\n      this.displayName = displayName;\n      return this;\n    }\n\n    Builder setConstraints(Constraints constraints) {\n      this.constraints = constraints;\n      return this;\n    }\n\n    Builder setName(String name) {\n      this.name = name;\n      return this;\n    }\n\n    Builder setVersion(Integer version) {\n      this.version = version;\n      return this;\n    }\n\n    ConstraintInfo build() {\n      return new ConstraintInfo(this);\n    }\n  }\n\n  ConstraintInfo(Builder builder) {\n    this.booleanConstraint = builder.booleanConstraint;\n    this.constraintDefault = builder.constraintDefault;\n    this.description = builder.description;\n    this.displayName = builder.displayName;\n    this.constraints = builder.constraints;\n    this.name = builder.name;\n    this.version = builder.version;\n  }\n\n  /** Returns the boolean constraint to check whether the constraint is enforced or not. */\n  public BooleanConstraint getBooleanConstraint() {\n    return booleanConstraint;\n  }\n\n  /** Returns the default behavior of the constraint. */\n  public String getConstraintDefault() {\n    return constraintDefault;\n  }\n\n  /** Returns the detailed description of the constraint. */\n  public String getDescription() {\n    return description;\n  }\n\n  /** Returns the human readable name of the constraint. */\n  public String getDisplayName() {\n    return displayName;\n  }\n\n  /** Returns the listConstraintInfo. */\n  public Constraints getConstraints() {\n    return constraints;\n  }\n\n  /** Returns the globally unique name of the constraint. */\n  public String getName() {\n    return name;\n  }\n\n  /** Returns the version of the Constraint. Default version is 0. */\n  public Integer getVersion() {\n    return version;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ConstraintInfo that = (ConstraintInfo) o;\n    return Objects.equals(booleanConstraint, that.booleanConstraint)\n        && Objects.equals(constraintDefault, that.constraintDefault)\n        && Objects.equals(description, that.description)\n        && Objects.equals(displayName, that.displayName)\n        && Objects.equals(constraints, that.constraints)\n        && Objects.equals(name, that.name)\n        && Objects.equals(version, that.version);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        booleanConstraint, constraintDefault, description, displayName, constraints, name, version);\n  }\n\n  /** Returns a builder for the {@link ConstraintInfo} object. */\n  public static Builder newBuilder(String name) {\n    return new Builder(name);\n  }\n\n  /** Returns a builder for the {@link ConstraintInfo} object. */\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  Constraint toProtobuf() {\n    Constraint constraintProto = new Constraint();\n    constraintProto.setBooleanConstraint(booleanConstraint);\n    constraintProto.setConstraintDefault(constraintDefault);\n    constraintProto.setDescription(description);\n    constraintProto.setDisplayName(displayName);\n    if (constraints != null) {\n      constraintProto.setListConstraint(constraints.toProtobuf());\n    }\n    constraintProto.setName(name);\n    constraintProto.setVersion(version);\n    return constraintProto;\n  }\n\n  static ConstraintInfo fromProtobuf(Constraint constraintProtobuf) {\n    Builder builder = newBuilder(constraintProtobuf.getName());\n    builder.setBooleanConstraint(constraintProtobuf.getBooleanConstraint());\n    builder.setConstraintDefault(constraintProtobuf.getConstraintDefault());\n    builder.setDescription(constraintProtobuf.getDescription());\n    builder.setDisplayName(constraintProtobuf.getDisplayName());\n    if (constraintProtobuf.getListConstraint() != null) {\n      builder.setConstraints(Constraints.fromProtobuf(constraintProtobuf.getListConstraint()));\n    }\n    if (constraintProtobuf.getName() != null && !constraintProtobuf.getName().equals(\"Unnamed\")) {\n      builder.setName(constraintProtobuf.getName());\n    }\n    builder.setVersion(constraintProtobuf.getVersion());\n    return builder.build();\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.BooleanConstraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListConstraint;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.Preconditions.checkArgument;\n\nimport com.google.api.gax.paging.Page;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.cloud.BaseService;\nimport com.google.cloud.PageImpl;\nimport com.google.cloud.PageImpl.NextPageFetcher;\nimport com.google.cloud.Policy;\nimport com.google.cloud.RetryHelper.RetryHelperException;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc.ListResult;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Maps;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class ResourceManagerImpl extends BaseService<ResourceManagerOptions>\n    implements ResourceManager {\n\n  private final ResourceManagerRpc resourceManagerRpc;\n\n  ResourceManagerImpl(ResourceManagerOptions options) {\n    super(options);\n    resourceManagerRpc = options.getResourceManagerRpcV1Beta1();\n  }\n\n  @Override\n  public Project create(final ProjectInfo project) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.create(project.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void delete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.delete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project get(final String projectId, ProjectGetOption... options) {\n    final Map<ResourceManagerRpc.Option, ?> optionsMap = optionMap(options);\n    try {\n      com.google.api.services.cloudresourcemanager.model.Project answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.get(projectId, optionsMap);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : Project.fromPb(this, answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ProjectPageFetcher implements NextPageFetcher<Project> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ProjectPageFetcher(\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<Project> getNextPage() {\n      return listProjects(serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<Project> list(ProjectListOption... options) {\n    return listProjects(getOptions(), optionMap(options));\n  }\n\n  private static Page<Project> listProjects(\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      Tuple<String, Iterable<com.google.api.services.cloudresourcemanager.model.Project>> result =\n          runWithRetries(\n              new Callable<\n                  Tuple<\n                      String,\n                      Iterable<com.google.api.services.cloudresourcemanager.model.Project>>>() {\n                @Override\n                public Tuple<\n                        String,\n                        Iterable<com.google.api.services.cloudresourcemanager.model.Project>>\n                    call() {\n                  return serviceOptions.getResourceManagerRpcV1Beta1().list(optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = result.x();\n      Iterable<Project> projects =\n          result.y() == null\n              ? ImmutableList.<Project>of()\n              : Iterables.transform(\n                  result.y(),\n                  new Function<\n                      com.google.api.services.cloudresourcemanager.model.Project, Project>() {\n                    @Override\n                    public Project apply(\n                        com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n                      return new Project(\n                          serviceOptions.getService(),\n                          new ProjectInfo.BuilderImpl(ProjectInfo.fromPb(projectPb)));\n                    }\n                  });\n      return new PageImpl<>(\n          new ProjectPageFetcher(serviceOptions, cursor, optionsMap), cursor, projects);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project replace(final ProjectInfo newProject) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.replace(newProject.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void undelete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.undelete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(final String projectId) {\n    try {\n      com.google.api.services.cloudresourcemanager.model.Policy answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.getPolicy(projectId);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : PolicyMarshaller.INSTANCE.fromPb(answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(final String projectId, final Policy newPolicy) {\n    try {\n      return PolicyMarshaller.INSTANCE.fromPb(\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.replacePolicy(\n                      projectId, PolicyMarshaller.INSTANCE.toPb(newPolicy));\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(final String projectId, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<List<Boolean>>() {\n            @Override\n            public List<Boolean> call() {\n              return resourceManagerRpc.testPermissions(projectId, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(\n      final String resource, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<Map<String, Boolean>>() {\n            @Override\n            public Map<String, Boolean> call() throws IOException {\n              return resourceManagerRpc.testOrgPermissions(resource, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() throws IOException {\n              resourceManagerRpc.clearOrgPolicy(resource, orgPolicy.toProtobuf());\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getEffectiveOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getEffectiveOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ConstraintPageFetcher implements NextPageFetcher<ConstraintInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ConstraintPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<ConstraintInfo> getNextPage() {\n      return listAvailableOrgPolicyConstraints(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      String resource, ListOption... options) {\n    return listAvailableOrgPolicyConstraints(resource, getOptions(), optionMap(options));\n  }\n\n  private static Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<Constraint> constraintList =\n          runWithRetries(\n              new Callable<ListResult<Constraint>>() {\n                @Override\n                public ListResult<Constraint> call() throws IOException {\n                  return rpc.listAvailableOrgPolicyConstraints(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = constraintList.pageToken();\n      Iterable<ConstraintInfo> constraints =\n          constraintList.results() == null\n              ? ImmutableList.<ConstraintInfo>of()\n              : Iterables.transform(\n                  constraintList.results(), ConstraintInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new ConstraintPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          constraints);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class OrgPolicyPageFetcher implements NextPageFetcher<OrgPolicyInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    OrgPolicyPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<OrgPolicyInfo> getNextPage() {\n      return listOrgPolicies(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<OrgPolicyInfo> listOrgPolicies(final String resource, ListOption... options) {\n    return listOrgPolicies(resource, getOptions(), optionMap(options));\n  }\n\n  private static PageImpl<OrgPolicyInfo> listOrgPolicies(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<OrgPolicy> orgPolicy =\n          runWithRetries(\n              new Callable<ListResult<OrgPolicy>>() {\n                @Override\n                public ListResult<OrgPolicy> call() throws IOException {\n                  return rpc.listOrgPolicies(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = orgPolicy.pageToken();\n      Iterable<OrgPolicyInfo> orgPolicies =\n          orgPolicy.results() == null\n              ? ImmutableList.<OrgPolicyInfo>of()\n              : Iterables.transform(orgPolicy.results(), OrgPolicyInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new OrgPolicyPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          orgPolicies);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo replaceOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.replaceOrgPolicy(resource, orgPolicy.toProtobuf());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private Map<ResourceManagerRpc.Option, ?> optionMap(Option... options) {\n    Map<ResourceManagerRpc.Option, Object> temp = Maps.newEnumMap(ResourceManagerRpc.Option.class);\n    for (Option option : options) {\n      Object prev = temp.put(option.getRpcOption(), option.getValue());\n      checkArgument(prev == null, \"Duplicate option %s\", option);\n    }\n    return ImmutableMap.copyOf(temp);\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.testing;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static java.net.HttpURLConnection.HTTP_OK;\n\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.cloud.NoCredentials;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Objects;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.io.ByteStreams;\nimport com.sun.net.httpserver.Headers;\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpServer;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.zip.GZIPInputStream;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\n\n/**\n * Utility to create a local Resource Manager mock for testing.\n *\n * <p>The mock runs in a separate thread, listening for HTTP requests on the local machine at an\n * ephemeral port. While this mock attempts to simulate the Cloud Resource Manager, there are some\n * divergences in behavior. The following is a non-exhaustive list of some of those behavioral\n * differences:\n *\n * <ul>\n *   <li>This mock assumes you have adequate permissions for any action. Related to this,\n *       <i>testIamPermissions</i> always indicates that the caller has all permissions listed in\n *       the request.\n *   <li>IAM policies are set to an empty policy with version 0 (only legacy roles supported) upon\n *       project creation. The actual service will not have an empty list of bindings and may also\n *       set your version to 1.\n *   <li>There is no input validation for the policy provided when replacing a policy or calling\n *       testIamPermissions.\n *   <li>In this mock, projects never move from the <i>DELETE_REQUESTED</i> lifecycle state to\n *       <i>DELETE_IN_PROGRESS</i> without an explicit call to the utility method {@link\n *       #changeLifecycleState}. Similarly, a project is never completely removed without an\n *       explicit call to the utility method {@link #removeProject}.\n *   <li>The messages in the error responses given by this mock do not necessarily match the\n *       messages given by the actual service.\n * </ul>\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\n@SuppressWarnings(\"restriction\")\npublic class LocalResourceManagerHelper {\n  private static final Logger log = Logger.getLogger(LocalResourceManagerHelper.class.getName());\n  private static final JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\n  private static final Random PROJECT_NUMBER_GENERATOR = new Random();\n  private static final String VERSION = \"v1\";\n  private static final String CONTEXT = \"/\" + VERSION + \"/projects\";\n  private static final String OPERATION_CONTEXT = \"/\" + VERSION + \"/operations\";\n  private static final URI BASE_CONTEXT;\n  private static final Set<String> SUPPORTED_COMPRESSION_ENCODINGS =\n      ImmutableSet.of(\"gzip\", \"x-gzip\");\n  private static final Pattern LIST_FIELDS_PATTERN =\n      Pattern.compile(\"(.*?)projects\\\\((.*?)\\\\)(.*?)\");\n  private static final String[] NO_FIELDS = {};\n\n  static {\n    try {\n      BASE_CONTEXT = new URI(CONTEXT);\n    } catch (URISyntaxException e) {\n      throw new RuntimeException(\n          \"Could not initialize LocalResourceManagerHelper due to URISyntaxException.\", e);\n    }\n  }\n\n  // see https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects\n  private static final Set<Character> PERMISSIBLE_PROJECT_NAME_PUNCTUATION =\n      ImmutableSet.of('-', '\\'', '\"', ' ', '!');\n\n  private final HttpServer server;\n  private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();\n  private final Map<String, Policy> policies = new HashMap<>();\n  private final int port;\n\n  private static class Response {\n    private final int code;\n    private final String body;\n\n    Response(int code, String body) {\n      this.code = code;\n      this.body = body;\n    }\n\n    int code() {\n      return code;\n    }\n\n    String body() {\n      return body;\n    }\n  }\n\n  private enum Error {\n    ABORTED(409, \"global\", \"aborted\", \"ABORTED\"),\n    ALREADY_EXISTS(409, \"global\", \"alreadyExists\", \"ALREADY_EXISTS\"),\n    PERMISSION_DENIED(403, \"global\", \"forbidden\", \"PERMISSION_DENIED\"),\n    FAILED_PRECONDITION(400, \"global\", \"failedPrecondition\", \"FAILED_PRECONDITION\"),\n    INVALID_ARGUMENT(400, \"global\", \"badRequest\", \"INVALID_ARGUMENT\"),\n    BAD_REQUEST(400, \"global\", \"badRequest\", \"BAD_REQUEST\"),\n    INTERNAL_ERROR(500, \"global\", \"internalError\", \"INTERNAL_ERROR\");\n\n    private final int code;\n    private final String domain;\n    private final String reason;\n    private final String status;\n\n    Error(int code, String domain, String reason, String status) {\n      this.code = code;\n      this.domain = domain;\n      this.reason = reason;\n      this.status = status;\n    }\n\n    Response response(String message) {\n      try {\n        return new Response(code, toJson(message));\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\"Error when generating JSON error response\");\n      }\n    }\n\n    private String toJson(String message) throws IOException {\n      Map<String, Object> errors = new HashMap<>();\n      errors.put(\"domain\", domain);\n      errors.put(\"message\", message);\n      errors.put(\"reason\", reason);\n      Map<String, Object> args = new HashMap<>();\n      args.put(\"errors\", ImmutableList.of(errors));\n      args.put(\"code\", code);\n      args.put(\"message\", message);\n      args.put(\"status\", status);\n      return jsonFactory.toString(ImmutableMap.of(\"error\", args));\n    }\n  }\n\n  private class RequestHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) {\n      // see https://cloud.google.com/resource-manager/reference/rest/\n      Response response;\n      String path = BASE_CONTEXT.relativize(exchange.getRequestURI()).getPath();\n      String requestMethod = exchange.getRequestMethod();\n      try {\n        switch (requestMethod) {\n          case \"POST\":\n            response = handlePost(exchange, path);\n            break;\n          case \"DELETE\":\n            response = delete(projectIdFromUri(path));\n            break;\n          case \"GET\":\n            if (!path.isEmpty()) {\n              response =\n                  get(projectIdFromUri(path), parseFields(exchange.getRequestURI().getQuery()));\n            } else {\n              response = list(parseListOptions(exchange.getRequestURI().getQuery()));\n            }\n            break;\n          case \"PUT\":\n            String requestBody =\n                decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n            response =\n                replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class));\n            break;\n          default:\n            response =\n                Error.BAD_REQUEST.response(\n                    \"The server could not understand the following request URI: \"\n                        + requestMethod\n                        + \" \"\n                        + path);\n        }\n      } catch (IOException e) {\n        response = Error.BAD_REQUEST.response(e.getMessage());\n      }\n      writeResponse(exchange, response);\n    }\n  }\n\n  private Response handlePost(HttpExchange exchange, String path) throws IOException {\n    String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n    if (!path.contains(\":\")) {\n      return create(jsonFactory.fromString(requestBody, Project.class));\n    } else {\n      switch (path.split(\":\", 2)[1]) {\n        case \"undelete\":\n          return undelete(projectIdFromUri(path));\n        case \"getIamPolicy\":\n          return getPolicy(projectIdFromUri(path));\n        case \"setIamPolicy\":\n          return replacePolicy(\n              projectIdFromUri(path),\n              jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy());\n        case \"testIamPermissions\":\n          return testPermissions(\n              projectIdFromUri(path),\n              jsonFactory\n                  .fromString(requestBody, TestIamPermissionsRequest.class)\n                  .getPermissions());\n        default:\n          return Error.BAD_REQUEST.response(\n              \"The server could not understand the following request URI: POST \" + path);\n      }\n    }\n  }\n\n  private class OperationRequestHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) {\n      // see https://cloud.google.com/resource-manager/reference/rest/\n      String projectId;\n      try {\n        projectId = new URI(OPERATION_CONTEXT).relativize(exchange.getRequestURI()).getPath();\n      } catch (URISyntaxException e) {\n        throw new IllegalStateException(e);\n      }\n      Response response;\n      String requestMethod = exchange.getRequestMethod();\n      switch (requestMethod) {\n        case \"GET\":\n          Project project = projects.get(projectId);\n          if (project == null) {\n            response = Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n            break;\n          }\n          try {\n            response =\n                new Response(\n                    HTTP_OK,\n                    jsonFactory.toString(new Operation().setDone(true).setResponse(project)));\n          } catch (IOException e) {\n            response =\n                Error.INTERNAL_ERROR.response(\n                    \"Error when serializing project \" + project.getProjectId());\n          }\n          break;\n        default:\n          response =\n              Error.BAD_REQUEST.response(\n                  \"The server could not understand the following request URI: \"\n                      + requestMethod\n                      + \" \"\n                      + projectId);\n      }\n      writeResponse(exchange, response);\n    }\n  }\n\n  private static void writeResponse(HttpExchange exchange, Response response) {\n    exchange.getResponseHeaders().set(\"Content-type\", \"application/json; charset=UTF-8\");\n    OutputStream outputStream = exchange.getResponseBody();\n    try {\n      exchange.getResponseHeaders().add(\"Connection\", \"close\");\n      exchange.sendResponseHeaders(response.code(), response.body().length());\n      outputStream.write(response.body().getBytes(StandardCharsets.UTF_8));\n      outputStream.close();\n    } catch (IOException e) {\n      log.log(Level.WARNING, \"IOException encountered when sending response.\", e);\n    }\n  }\n\n  private static String decodeContent(Headers headers, InputStream inputStream) throws IOException {\n    List<String> contentEncoding = headers.get(\"Content-encoding\");\n    InputStream input = inputStream;\n    try {\n      if (contentEncoding != null && !contentEncoding.isEmpty()) {\n        String encoding = contentEncoding.get(0);\n        if (SUPPORTED_COMPRESSION_ENCODINGS.contains(encoding)) {\n          input = new GZIPInputStream(inputStream);\n        } else if (!encoding.equals(\"identity\")) {\n          throw new IOException(\n              \"The request has the following unsupported HTTP content encoding: \" + encoding);\n        }\n      }\n      return new String(ByteStreams.toByteArray(input), StandardCharsets.UTF_8);\n    } catch (IOException e) {\n      throw new IOException(\"Exception encountered when decoding request content.\", e);\n    }\n  }\n\n  private static String projectIdFromUri(String path) throws IOException {\n    if (path.isEmpty()) {\n      throw new IOException(\"The URI path '\" + path + \"' doesn't have a project ID.\");\n    }\n    return path.split(\":\")[0];\n  }\n\n  private static String[] parseFields(String query) {\n    if (query != null && !query.isEmpty()) {\n      String[] querySplit = query.split(\"=\");\n      return querySplit.length > 1 ? querySplit[1].split(\",\") : null;\n    }\n    return null;\n  }\n\n  private static Map<String, Object> parseListOptions(String query) throws IOException {\n    Map<String, Object> options = new HashMap<>();\n    if (query != null) {\n      String[] args = query.split(\"&\");\n      for (String arg : args) {\n        String[] argEntry = arg.split(\"=\");\n        switch (argEntry[0]) {\n          case \"fields\":\n            // List fields are in the form \"projects(field1, field2, ...),nextPageToken\"\n            Matcher matcher = LIST_FIELDS_PATTERN.matcher(argEntry[1]);\n            if (matcher.matches()) {\n              options.put(\"projectFields\", matcher.group(2).split(\",\"));\n              options.put(\"listFields\", (matcher.group(1) + matcher.group(3)).split(\",\"));\n            } else {\n              options.put(\"projectFields\", NO_FIELDS);\n              options.put(\"listFields\", argEntry[1].split(\",\"));\n            }\n            break;\n          case \"filter\":\n            options.put(\"filter\", argEntry[1].split(\" \"));\n            break;\n          case \"pageToken\":\n            options.put(\"pageToken\", argEntry[1]);\n            break;\n          case \"pageSize\":\n            int pageSize = Integer.parseInt(argEntry[1]);\n            if (pageSize < 1) {\n              throw new IOException(\"Page size must be greater than 0.\");\n            }\n            options.put(\"pageSize\", pageSize);\n            break;\n        }\n      }\n    }\n    return options;\n  }\n\n  private static String checkForProjectErrors(Project project) {\n    if (project.getProjectId() == null) {\n      return \"Project ID cannot be empty.\";\n    }\n    if (!isValidIdOrLabel(project.getProjectId(), 6, 30)) {\n      return \"Project \"\n          + project.getProjectId()\n          + \" has an invalid ID.\"\n          + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n          + VERSION\n          + \"/projects\"\n          + \" for more information.\";\n    }\n    if (project.getName() != null) {\n      for (char c : project.getName().toCharArray()) {\n        if (!PERMISSIBLE_PROJECT_NAME_PUNCTUATION.contains(c) && !Character.isLetterOrDigit(c)) {\n          return \"Project \"\n              + project.getProjectId()\n              + \" has an invalid name.\"\n              + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n              + VERSION\n              + \"/projects for more information.\";\n        }\n      }\n    }\n    if (project.getLabels() != null) {\n      if (project.getLabels().size() > 256) {\n        return \"Project \" + project.getProjectId() + \" exceeds the limit of 256 labels.\";\n      }\n      for (Map.Entry<String, String> entry : project.getLabels().entrySet()) {\n        if (!isValidIdOrLabel(entry.getKey(), 1, 63)\n            || !isValidIdOrLabel(entry.getValue(), 0, 63)) {\n          return \"Project \"\n              + project.getProjectId()\n              + \" has an invalid label entry.\"\n              + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n              + VERSION\n              + \"/projects for more information.\";\n        }\n      }\n    }\n    return null;\n  }\n\n  private static boolean isValidIdOrLabel(String value, int minLength, int maxLength) {\n    for (char c : value.toCharArray()) {\n      if (c != '-' && !Character.isDigit(c) && !Character.isLowerCase(c)) {\n        return false;\n      }\n    }\n    if (!value.isEmpty() && (!Character.isLetter(value.charAt(0)) || value.endsWith(\"-\"))) {\n      return false;\n    }\n    return value.length() >= minLength && value.length() <= maxLength;\n  }\n\n  synchronized Response create(Project project) {\n    String customErrorMessage = checkForProjectErrors(project);\n    if (customErrorMessage != null) {\n      return Error.INVALID_ARGUMENT.response(customErrorMessage);\n    } else {\n      project.setLifecycleState(\"ACTIVE\");\n      project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));\n      project.setCreateTime(\n          DateTimeFormatter.ISO_DATE_TIME\n              .withZone(ZoneOffset.UTC)\n              .format(Instant.ofEpochMilli(System.currentTimeMillis())));\n      if (projects.putIfAbsent(project.getProjectId(), project) != null) {\n        return Error.ALREADY_EXISTS.response(\n            \"A project with the same project ID (\" + project.getProjectId() + \") already exists.\");\n      }\n      Policy emptyPolicy =\n          new Policy()\n              .setBindings(Collections.<Binding>emptyList())\n              .setEtag(UUID.randomUUID().toString())\n              .setVersion(0);\n      policies.put(project.getProjectId(), emptyPolicy);\n      try {\n        // Pretend it's not done yet.\n        String createdProjectStr =\n            jsonFactory.toString(\n                new Operation().setDone(false).setName(\"operations/\" + project.getProjectId()));\n        return new Response(HTTP_OK, createdProjectStr);\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\"Error serializing project \" + project.getProjectId());\n      }\n    }\n  }\n\n  synchronized Response delete(String projectId) {\n    Project project = projects.get(projectId);\n    if (project == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when deleting \" + projectId + \" because the project was not found.\");\n    }\n    if (!project.getLifecycleState().equals(\"ACTIVE\")) {\n      return Error.FAILED_PRECONDITION.response(\n          \"Error when deleting \" + projectId + \" because the lifecycle state was not ACTIVE.\");\n    } else {\n      project.setLifecycleState(\"DELETE_REQUESTED\");\n      return new Response(HTTP_OK, \"{}\");\n    }\n  }\n\n  Response get(String projectId, String[] fields) {\n    Project project = projects.get(projectId);\n    if (project != null) {\n      try {\n        return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields)));\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\n            \"Error when serializing project \" + project.getProjectId());\n      }\n    } else {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n  }\n\n  Response list(Map<String, Object> options) {\n    List<String> projectsSerialized = new ArrayList<>();\n    String[] filters = (String[]) options.get(\"filter\");\n    if (filters != null && !isValidFilter(filters)) {\n      return Error.INVALID_ARGUMENT.response(\"Could not parse the filter.\");\n    }\n    String[] projectFields = (String[]) options.get(\"projectFields\");\n    int count = 0;\n    String pageToken = (String) options.get(\"pageToken\");\n    Integer pageSize = (Integer) options.get(\"pageSize\");\n    String nextPageToken = null;\n    Map<String, Project> projectsToScan = projects;\n    if (pageToken != null) {\n      projectsToScan = projects.tailMap(pageToken);\n    }\n    for (Project p : projectsToScan.values()) {\n      if (pageSize != null && count >= pageSize) {\n        nextPageToken = p.getProjectId();\n        break;\n      }\n      boolean includeProject = includeProject(p, filters);\n      if (includeProject) {\n        count++;\n        try {\n          projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields)));\n        } catch (IOException e) {\n          return Error.INTERNAL_ERROR.response(\n              \"Error when serializing project \" + p.getProjectId());\n        }\n      }\n    }\n    String[] listFields = (String[]) options.get(\"listFields\");\n    StringBuilder responseBody = new StringBuilder();\n    responseBody.append('{');\n    // If fields parameter is set but no project field is selected we must return no projects.\n    if (!(projectFields != null && projectFields.length == 0)) {\n      responseBody.append(\"\\\"projects\\\": [\");\n      Joiner.on(\",\").appendTo(responseBody, projectsSerialized);\n      responseBody.append(']');\n    }\n    if (nextPageToken != null\n        && (listFields == null || ImmutableSet.copyOf(listFields).contains(\"nextPageToken\"))) {\n      if (responseBody.length() > 1) {\n        responseBody.append(',');\n      }\n      responseBody.append(\"\\\"nextPageToken\\\": \\\"\");\n      responseBody.append(nextPageToken);\n      responseBody.append('\"');\n    }\n    responseBody.append('}');\n    return new Response(HTTP_OK, responseBody.toString());\n  }\n\n  private static boolean isValidFilter(String[] filters) {\n    for (String filter : filters) {\n      String field = filter.toLowerCase().split(\":\")[0];\n      if (!(\"id\".equals(field) || \"name\".equals(field) || field.startsWith(\"labels.\"))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static boolean includeProject(Project project, String[] filters) {\n    if (filters == null) {\n      return true;\n    }\n    for (String filter : filters) {\n      String[] filterEntry = filter.toLowerCase().split(\":\");\n      String filterType = filterEntry[0];\n      if (\"id\".equals(filterType)) {\n        if (!satisfiesFilter(project.getProjectId(), filterEntry[1])) {\n          return false;\n        }\n      } else if (\"name\".equals(filterType)) {\n        if (!satisfiesFilter(project.getName(), filterEntry[1])) {\n          return false;\n        }\n      } else if (filterType.startsWith(\"labels.\")) {\n        String labelKey = filterType.substring(\"labels.\".length());\n        if (project.getLabels() != null) {\n          String labelValue = project.getLabels().get(labelKey);\n          if (!satisfiesFilter(labelValue, filterEntry[1])) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  private static boolean satisfiesFilter(String projectValue, String filterValue) {\n    if (projectValue == null) {\n      return false;\n    }\n    return \"*\".equals(filterValue) || filterValue.equals(projectValue.toLowerCase());\n  }\n\n  private static Project extractFields(Project fullProject, String[] fields) {\n    if (fields == null) {\n      return fullProject;\n    }\n    Project project = new Project();\n    for (String field : fields) {\n      switch (field) {\n        case \"createTime\":\n          project.setCreateTime(fullProject.getCreateTime());\n          break;\n        case \"labels\":\n          project.setLabels(fullProject.getLabels());\n          break;\n        case \"lifecycleState\":\n          project.setLifecycleState(fullProject.getLifecycleState());\n          break;\n        case \"name\":\n          project.setName(fullProject.getName());\n          break;\n        case \"parent\":\n          project.setParent(fullProject.getParent());\n          break;\n        case \"projectId\":\n          project.setProjectId(fullProject.getProjectId());\n          break;\n        case \"projectNumber\":\n          project.setProjectNumber(fullProject.getProjectNumber());\n          break;\n      }\n    }\n    return project;\n  }\n\n  synchronized Response replace(String projectId, Project project) {\n    Project originalProject = projects.get(projectId);\n    if (originalProject == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when replacing \" + projectId + \" because the project was not found.\");\n    } else if (!originalProject.getLifecycleState().equals(\"ACTIVE\")) {\n      return Error.FAILED_PRECONDITION.response(\n          \"Error when replacing \" + projectId + \" because the lifecycle state was not ACTIVE.\");\n    } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {\n      return Error.INVALID_ARGUMENT.response(\n          \"The server currently only supports setting the parent once \"\n              + \"and does not allow unsetting it.\");\n    }\n    project.setProjectId(projectId);\n    project.setLifecycleState(originalProject.getLifecycleState());\n    project.setCreateTime(originalProject.getCreateTime());\n    project.setProjectNumber(originalProject.getProjectNumber());\n    // replace cannot fail because both this method and removeProject are synchronized\n    projects.replace(projectId, project);\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(project));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + projectId);\n    }\n  }\n\n  synchronized Response undelete(String projectId) {\n    Project project = projects.get(projectId);\n    Response response;\n    if (project == null) {\n      response =\n          Error.PERMISSION_DENIED.response(\n              \"Error when undeleting \" + projectId + \" because the project was not found.\");\n    } else if (!project.getLifecycleState().equals(\"DELETE_REQUESTED\")) {\n      response =\n          Error.FAILED_PRECONDITION.response(\n              \"Error when undeleting \"\n                  + projectId\n                  + \" because the lifecycle state was not DELETE_REQUESTED.\");\n    } else {\n      project.setLifecycleState(\"ACTIVE\");\n      response = new Response(HTTP_OK, \"{}\");\n    }\n    return response;\n  }\n\n  synchronized Response getPolicy(String projectId) {\n    Policy policy = policies.get(projectId);\n    if (policy == null) {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(policy));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\n          \"Error when serializing the IAM policy for \" + projectId);\n    }\n  }\n\n  synchronized Response replacePolicy(String projectId, Policy policy) {\n    Policy originalPolicy = policies.get(projectId);\n    if (originalPolicy == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when replacing the policy for \"\n              + projectId\n              + \" because the project was not found.\");\n    }\n    String etag = policy.getEtag();\n    if (etag != null && !originalPolicy.getEtag().equals(etag)) {\n      return Error.ABORTED.response(\n          \"Policy etag mismatch when replacing the policy for project \"\n              + projectId\n              + \", please retry the read.\");\n    }\n    policy.setEtag(UUID.randomUUID().toString());\n    policy.setVersion(originalPolicy.getVersion());\n    policies.put(projectId, policy);\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(policy));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\n          \"Error when serializing the policy for project \" + projectId);\n    }\n  }\n\n  synchronized Response testPermissions(String projectId, List<String> permissions) {\n    if (!projects.containsKey(projectId)) {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n    try {\n      return new Response(\n          HTTP_OK,\n          jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\"Error when serializing permissions \" + permissions);\n    }\n  }\n\n  private LocalResourceManagerHelper() {\n    try {\n      server = HttpServer.create(new InetSocketAddress(0), 0);\n      port = server.getAddress().getPort();\n      server.createContext(CONTEXT, new RequestHandler());\n      server.createContext(OPERATION_CONTEXT, new OperationRequestHandler());\n    } catch (IOException e) {\n      throw new RuntimeException(\"Could not bind the mock Resource Manager server.\", e);\n    }\n  }\n\n  /**\n   * Creates a {@code LocalResourceManagerHelper} object that listens to requests on the local\n   * machine.\n   */\n  public static LocalResourceManagerHelper create() {\n    return new LocalResourceManagerHelper();\n  }\n\n  /**\n   * Returns a {@link ResourceManagerOptions} instance that sets the host to use the mock server.\n   */\n  public ResourceManagerOptions getOptions() {\n    return ResourceManagerOptions.newBuilder()\n        .setHost(\"http://localhost:\" + port)\n        .setCredentials(NoCredentials.getInstance())\n        .build();\n  }\n\n  /** Starts the thread that runs the Resource Manager server. */\n  public void start() {\n    server.start();\n  }\n\n  /** Stops the thread that runs the mock Resource Manager server. */\n  public void stop() {\n    server.stop(1);\n  }\n\n  /**\n   * Utility method to change the lifecycle state of the specified project.\n   *\n   * @return true if the lifecycle state was successfully updated, false otherwise\n   */\n  public synchronized boolean changeLifecycleState(String projectId, String lifecycleState) {\n    checkArgument(\n        \"ACTIVE\".equals(lifecycleState)\n            || \"DELETE_REQUESTED\".equals(lifecycleState)\n            || \"DELETE_IN_PROGRESS\".equals(lifecycleState),\n        \"Lifecycle state must be ACTIVE, DELETE_REQUESTED, or DELETE_IN_PROGRESS\");\n    Project project = projects.get(checkNotNull(projectId));\n    if (project != null) {\n      project.setLifecycleState(lifecycleState);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Utility method to remove the specified project.\n   *\n   * <p>This method can be used to fully remove a project (to mimic when the server completely\n   * deletes a project).\n   *\n   * @return true if the project was successfully deleted, false if the project didn't exist\n   */\n  public synchronized boolean removeProject(String projectId) {\n    // Because this method is synchronized, any code that relies on non-atomic read/write operations\n    // should not fail if that code is also synchronized.\n    policies.remove(checkNotNull(projectId));\n    return projects.remove(projectId) != null;\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Operation;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.cloud.Identity;\nimport com.google.cloud.Policy;\nimport com.google.cloud.Policy.Marshaller;\nimport com.google.cloud.Role;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Lists;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class PolicyMarshaller\n    extends Marshaller<com.google.api.services.cloudresourcemanager.model.Policy> {\n\n  static final PolicyMarshaller INSTANCE = new PolicyMarshaller();\n\n  private PolicyMarshaller() {}\n\n  private static class Builder extends Policy.Builder {\n\n    private Builder(Map<Role, Set<Identity>> bindings, String etag, Integer version) {\n      setBindings(bindings);\n      setEtag(etag);\n      if (version != null) {\n        setVersion(version);\n      }\n    }\n  }\n\n  @Override\n  protected Policy fromPb(com.google.api.services.cloudresourcemanager.model.Policy policyPb) {\n    Map<Role, Set<Identity>> bindings = new HashMap<>();\n    if (policyPb.getBindings() != null) {\n      for (Binding bindingPb : policyPb.getBindings()) {\n        bindings.put(\n            Role.of(bindingPb.getRole()),\n            ImmutableSet.copyOf(\n                Lists.transform(\n                    bindingPb.getMembers(),\n                    new Function<String, Identity>() {\n                      @Override\n                      public Identity apply(String s) {\n                        return IDENTITY_VALUE_OF_FUNCTION.apply(s);\n                      }\n                    })));\n      }\n    }\n    return new Builder(bindings, policyPb.getEtag(), policyPb.getVersion()).build();\n  }\n\n  @Override\n  protected com.google.api.services.cloudresourcemanager.model.Policy toPb(Policy policy) {\n    com.google.api.services.cloudresourcemanager.model.Policy policyPb =\n        new com.google.api.services.cloudresourcemanager.model.Policy();\n    List<Binding> bindingPbList = new LinkedList<>();\n    for (Map.Entry<Role, Set<Identity>> binding : policy.getBindings().entrySet()) {\n      Binding bindingPb = new Binding();\n      bindingPb.setRole(binding.getKey().getValue());\n      bindingPb.setMembers(\n          Lists.transform(\n              new ArrayList<>(binding.getValue()),\n              new Function<Identity, String>() {\n                @Override\n                public String apply(Identity identity) {\n                  return IDENTITY_STR_VALUE_FUNCTION.apply(identity);\n                }\n              }));\n      bindingPbList.add(bindingPb);\n    }\n    policyPb.setBindings(bindingPbList);\n    policyPb.setEtag(policy.getEtag());\n    policyPb.setVersion(policy.getVersion());\n    return policyPb;\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Binding;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.spi.v1beta1;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.MoreObjects.firstNonNull;\nimport static java.net.HttpURLConnection.HTTP_FORBIDDEN;\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.core.ApiClock;\nimport com.google.api.gax.retrying.ResultRetryAlgorithm;\nimport com.google.api.gax.retrying.RetrySettings;\nimport com.google.api.gax.retrying.TimedAttemptSettings;\nimport com.google.api.services.cloudresourcemanager.CloudResourceManager;\nimport com.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse;\nimport com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse;\nimport com.google.api.services.cloudresourcemanager.model.ListProjectsResponse;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.Status;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest;\nimport com.google.cloud.RetryHelper;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.http.BaseHttpServiceException;\nimport com.google.cloud.http.HttpTransportOptions;\nimport com.google.cloud.resourcemanager.ResourceManagerException;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.Callable;\nimport org.threeten.bp.Duration;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\npublic class HttpResourceManagerRpc implements ResourceManagerRpc {\n\n  private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();\n\n  // See doc of create() for more details:\n  // https://developers.google.com/resources/api-libraries/documentation/cloudresourcemanager/v1/java/latest/com/google/api/services/cloudresourcemanager/CloudResourceManager.Projects.html#create(com.google.api.services.cloudresourcemanager.model.Project)\n  private static final RetrySettings CREATE_RETRY_SETTINGS =\n      RetrySettings.newBuilder()\n          // SLO permits 30s at 90th percentile, 4x it for total limit.\n          // Observed latency is much lower: 11s at 95th percentile.\n          .setTotalTimeout(Duration.ofMinutes(2))\n          // Linked doc recommends polling at 5th second.\n          .setInitialRetryDelay(Duration.ofSeconds(5))\n          .setRetryDelayMultiplier(1.5)\n          // Observed P95 latency is 11s. We probably shouldn't sleep longer than this.\n          .setMaxRetryDelay(Duration.ofSeconds(11))\n          .setJittered(true)\n          .setInitialRpcTimeout(Duration.ofSeconds(5))\n          .setMaxRpcTimeout(Duration.ofSeconds(5))\n          .build();\n\n  // reference: https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  private static final ImmutableMap<Integer, Integer> RPC_TO_HTTP_CODES =\n      ImmutableMap.<Integer, Integer>builder()\n          .put(0, 200)\n          .put(1, 499)\n          .put(2, 500)\n          .put(3, 400)\n          .put(4, 504)\n          .put(5, 404)\n          .put(6, 409)\n          .put(7, 403)\n          .put(16, 401)\n          .put(8, 429)\n          .put(9, 400)\n          .put(10, 409)\n          .put(11, 400)\n          .put(12, 501)\n          .put(13, 500)\n          .put(14, 503)\n          .put(15, 500)\n          .build();\n\n  private static final ResultRetryAlgorithm<Operation> OPERATION_HANDLER =\n      new ResultRetryAlgorithm<Operation>() {\n        @Override\n        public TimedAttemptSettings createNextAttempt(\n            Throwable prevThrowable, Operation prevResponse, TimedAttemptSettings prevSettings) {\n          return null;\n        }\n\n        @Override\n        public boolean shouldRetry(Throwable prevThrowable, Operation prevOp) {\n          if (prevThrowable == null) {\n            return prevOp.getDone() == null || !prevOp.getDone();\n          }\n          return prevThrowable instanceof ResourceManagerException\n              && ((ResourceManagerException) prevThrowable).isRetryable();\n        }\n      };\n\n  private final CloudResourceManager resourceManager;\n  private final ApiClock clock;\n\n  public HttpResourceManagerRpc(ResourceManagerOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    resourceManager =\n        new CloudResourceManager.Builder(transport, JSON_FACTORY, initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    clock = options.getClock();\n  }\n\n  private static ResourceManagerException translate(IOException exception) {\n    return new ResourceManagerException(exception);\n  }\n\n  private static ResourceManagerException translate(Status status) {\n    Integer code = RPC_TO_HTTP_CODES.get(status.getCode());\n    if (code == null) {\n      code = BaseHttpServiceException.UNKNOWN_CODE;\n    }\n    return new ResourceManagerException(code, status.getMessage());\n  }\n\n  @Override\n  public Project create(Project project) {\n    final Operation operation;\n    try {\n      operation = resourceManager.projects().create(project).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n\n    Operation finishedOp =\n        runWithRetries(\n            new Callable<Operation>() {\n              @Override\n              public Operation call() {\n                try {\n                  return resourceManager.operations().get(operation.getName()).execute();\n                } catch (IOException ex) {\n                  throw translate(ex);\n                }\n              }\n            },\n            CREATE_RETRY_SETTINGS,\n            OPERATION_HANDLER,\n            clock);\n    if (finishedOp.getError() != null) {\n      throw translate(finishedOp.getError());\n    }\n\n    // NOTE(pongad): Operation.getResponse() returns a Map<String, Object>.\n    // 1. `(Project) finishedOp.getResponse()` doesn't work,\n    // because JSON deserializer in execute() didn't know to create a Project object.\n    // 2. `new Project().putAll(finishedOp.getResponse())` doesn't work either.\n    // 64-bit integers are sent as strings in JSON,\n    // so execute(), not knowing the type, parses it as String, not Long.\n    try {\n      String responseTxt = JSON_FACTORY.toString(finishedOp.getResponse());\n      return JSON_FACTORY.fromString(responseTxt, Project.class);\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public void delete(String projectId) {\n    try {\n      resourceManager.projects().delete(projectId).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Project get(String projectId, Map<Option, ?> options) {\n    try {\n      return resourceManager\n          .projects()\n          .get(projectId)\n          .setFields(Option.FIELDS.getString(options))\n          .execute();\n    } catch (IOException ex) {\n      ResourceManagerException translated = translate(ex);\n      if (translated.getCode() == HTTP_FORBIDDEN || translated.getCode() == HTTP_NOT_FOUND) {\n        // Service can return either 403 or 404 to signify that the project doesn't exist.\n        return null;\n      } else {\n        throw translated;\n      }\n    }\n  }\n\n  @Override\n  public Tuple<String, Iterable<Project>> list(Map<Option, ?> options) {\n    try {\n      ListProjectsResponse response =\n          resourceManager\n              .projects()\n              .list()\n              .setFields(Option.FIELDS.getString(options))\n              .setFilter(Option.FILTER.getString(options))\n              .setPageSize(Option.PAGE_SIZE.getInt(options))\n              .setPageToken(Option.PAGE_TOKEN.getString(options))\n              .execute();\n      return Tuple.<String, Iterable<Project>>of(\n          response.getNextPageToken(), response.getProjects());\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public void undelete(String projectId) {\n    try {\n      resourceManager.projects().undelete(projectId, new UndeleteProjectRequest()).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Project replace(Project project) {\n    try {\n      return resourceManager.projects().update(project.getProjectId(), project).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(String projectId) throws ResourceManagerException {\n    try {\n      return resourceManager\n          .projects()\n          .getIamPolicy(projectId, new GetIamPolicyRequest())\n          .execute();\n    } catch (IOException ex) {\n      ResourceManagerException translated = translate(ex);\n      if (translated.getCode() == HTTP_FORBIDDEN) {\n        // Service returns permission denied if policy doesn't exist.\n        return null;\n      } else {\n        throw translated;\n      }\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(String projectId, Policy newPolicy) throws ResourceManagerException {\n    try {\n      return resourceManager\n          .projects()\n          .setIamPolicy(projectId, new SetIamPolicyRequest().setPolicy(newPolicy))\n          .execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(String projectId, List<String> permissions)\n      throws ResourceManagerException {\n    try {\n      TestIamPermissionsResponse response =\n          resourceManager\n              .projects()\n              .testIamPermissions(\n                  projectId, new TestIamPermissionsRequest().setPermissions(permissions))\n              .execute();\n      Set<String> permissionsOwned =\n          ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));\n      ImmutableList.Builder<Boolean> answer = ImmutableList.builder();\n      for (String p : permissions) {\n        answer.add(permissionsOwned.contains(p));\n      }\n      return answer.build();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)\n      throws IOException {\n    try {\n      TestIamPermissionsResponse response =\n          resourceManager\n              .organizations()\n              .testIamPermissions(\n                  resource, new TestIamPermissionsRequest().setPermissions(permissions))\n              .execute();\n      Set<String> permissionsOwned =\n          ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));\n      ImmutableMap.Builder<String, Boolean> answer = ImmutableMap.builder();\n      for (String permission : permissions) {\n        answer.put(permission, permissionsOwned.contains(permission));\n      }\n      return answer.build();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException {\n    try {\n      resourceManager\n          .folders()\n          .clearOrgPolicy(\n              resource,\n              new ClearOrgPolicyRequest()\n                  .setConstraint(orgPolicy.getConstraint())\n                  .setEtag(orgPolicy.getEtag()))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .getEffectiveOrgPolicy(\n              resource, new GetEffectiveOrgPolicyRequest().setConstraint(constraint))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .getOrgPolicy(resource, new GetOrgPolicyRequest().setConstraint(constraint))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public ListResult<Constraint> listAvailableOrgPolicyConstraints(\n      String resource, Map<Option, ?> options) throws IOException {\n    try {\n      ListAvailableOrgPolicyConstraintsResponse response =\n          resourceManager\n              .folders()\n              .listAvailableOrgPolicyConstraints(\n                  resource,\n                  new ListAvailableOrgPolicyConstraintsRequest()\n                      .setPageSize(Option.PAGE_SIZE.getInt(options))\n                      .setPageToken(Option.PAGE_TOKEN.getString(options)))\n              .execute();\n      return ListResult.of(response.getNextPageToken(), response.getConstraints());\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options)\n      throws IOException {\n    try {\n      ListOrgPoliciesResponse response =\n          resourceManager\n              .folders()\n              .listOrgPolicies(\n                  resource,\n                  new ListOrgPoliciesRequest()\n                      .setPageSize(Option.PAGE_SIZE.getInt(options))\n                      .setPageToken(Option.PAGE_TOKEN.getString(options)))\n              .execute();\n      return ListResult.of(response.getNextPageToken(), response.getPolicies());\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .setOrgPolicy(resource, new SetOrgPolicyRequest().setPolicy(orgPolicy))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;\nimport com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;\nimport com.google.api.services.cloudresourcemanager.v3.model.Operation;\nimport com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\nimport com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.Status;\nimport com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;\nimport com.google.api.services.cloudresourcemanager.v3.model.UndeleteProjectRequest;\n"
                },
                "compile_error_details": {
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java": {
                        "392": {
                            "lines": [
                                {
                                    "line_no": 391,
                                    "content": "}"
                                },
                                {
                                    "line_no": 392,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;"
                                },
                                {
                                    "line_no": 393,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[392,1] class, interface, or enum expected\n"
                            ]
                        },
                        "393": {
                            "lines": [
                                {
                                    "line_no": 392,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;"
                                },
                                {
                                    "line_no": 393,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;"
                                },
                                {
                                    "line_no": 394,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[393,1] class, interface, or enum expected\n"
                            ]
                        },
                        "394": {
                            "lines": [
                                {
                                    "line_no": 393,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;"
                                },
                                {
                                    "line_no": 394,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 395,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.RestoreDefault;"
                                }
                            ],
                            "error_texts": [
                                "[394,1] class, interface, or enum expected\n"
                            ]
                        },
                        "395": {
                            "lines": [
                                {
                                    "line_no": 394,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 395,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.RestoreDefault;"
                                },
                                {
                                    "line_no": 396,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[395,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java": {
                        "808": {
                            "lines": [
                                {
                                    "line_no": 807,
                                    "content": "}"
                                },
                                {
                                    "line_no": 808,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                },
                                {
                                    "line_no": 809,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[808,1] class, interface, or enum expected\n"
                            ]
                        },
                        "809": {
                            "lines": [
                                {
                                    "line_no": 808,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                },
                                {
                                    "line_no": 809,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 810,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[809,1] class, interface, or enum expected\n"
                            ]
                        },
                        "810": {
                            "lines": [
                                {
                                    "line_no": 809,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 810,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 811,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[810,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java": {
                        "431": {
                            "lines": [
                                {
                                    "line_no": 430,
                                    "content": "}"
                                },
                                {
                                    "line_no": 431,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;"
                                },
                                {
                                    "line_no": 432,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[431,1] class, interface, or enum expected\n"
                            ]
                        },
                        "432": {
                            "lines": [
                                {
                                    "line_no": 431,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;"
                                },
                                {
                                    "line_no": 432,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 433,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                }
                            ],
                            "error_texts": [
                                "[432,1] class, interface, or enum expected\n"
                            ]
                        },
                        "433": {
                            "lines": [
                                {
                                    "line_no": 432,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 433,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 434,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[433,1] class, interface, or enum expected\n"
                            ]
                        },
                        "434": {
                            "lines": [
                                {
                                    "line_no": 433,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 434,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 435,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[434,1] class, interface, or enum expected\n"
                            ]
                        },
                        "435": {
                            "lines": [
                                {
                                    "line_no": 434,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 435,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[435,1] class, interface, or enum expected\n"
                            ]
                        },
                        "436": {
                            "lines": [
                                {
                                    "line_no": 435,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;"
                                }
                            ],
                            "error_texts": [
                                "[436,1] class, interface, or enum expected\n"
                            ]
                        },
                        "437": {
                            "lines": [
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;"
                                },
                                {
                                    "line_no": 438,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[437,1] class, interface, or enum expected\n"
                            ]
                        },
                        "438": {
                            "lines": [
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;"
                                },
                                {
                                    "line_no": 438,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;"
                                },
                                {
                                    "line_no": 439,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;"
                                }
                            ],
                            "error_texts": [
                                "[438,1] class, interface, or enum expected\n"
                            ]
                        },
                        "439": {
                            "lines": [
                                {
                                    "line_no": 438,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;"
                                },
                                {
                                    "line_no": 439,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;"
                                },
                                {
                                    "line_no": 440,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;"
                                }
                            ],
                            "error_texts": [
                                "[439,1] class, interface, or enum expected\n"
                            ]
                        },
                        "440": {
                            "lines": [
                                {
                                    "line_no": 439,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;"
                                },
                                {
                                    "line_no": 440,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;"
                                },
                                {
                                    "line_no": 441,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[440,1] class, interface, or enum expected\n"
                            ]
                        },
                        "441": {
                            "lines": [
                                {
                                    "line_no": 440,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;"
                                },
                                {
                                    "line_no": 441,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;"
                                },
                                {
                                    "line_no": 442,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                }
                            ],
                            "error_texts": [
                                "[441,1] class, interface, or enum expected\n"
                            ]
                        },
                        "442": {
                            "lines": [
                                {
                                    "line_no": 441,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;"
                                },
                                {
                                    "line_no": 442,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                },
                                {
                                    "line_no": 443,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[442,1] class, interface, or enum expected\n"
                            ]
                        },
                        "443": {
                            "lines": [
                                {
                                    "line_no": 442,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                },
                                {
                                    "line_no": 443,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 444,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[443,1] class, interface, or enum expected\n"
                            ]
                        },
                        "444": {
                            "lines": [
                                {
                                    "line_no": 443,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 444,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 445,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[444,1] class, interface, or enum expected\n"
                            ]
                        },
                        "445": {
                            "lines": [
                                {
                                    "line_no": 444,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 445,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 446,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[445,1] class, interface, or enum expected\n"
                            ]
                        },
                        "446": {
                            "lines": [
                                {
                                    "line_no": 445,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 446,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 447,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[446,1] class, interface, or enum expected\n"
                            ]
                        },
                        "447": {
                            "lines": [
                                {
                                    "line_no": 446,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 447,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 448,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Status;"
                                }
                            ],
                            "error_texts": [
                                "[447,1] class, interface, or enum expected\n"
                            ]
                        },
                        "448": {
                            "lines": [
                                {
                                    "line_no": 447,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 448,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Status;"
                                },
                                {
                                    "line_no": 449,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;"
                                }
                            ],
                            "error_texts": [
                                "[448,1] class, interface, or enum expected\n"
                            ]
                        },
                        "449": {
                            "lines": [
                                {
                                    "line_no": 448,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Status;"
                                },
                                {
                                    "line_no": 449,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;"
                                },
                                {
                                    "line_no": 450,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[449,1] class, interface, or enum expected\n"
                            ]
                        },
                        "450": {
                            "lines": [
                                {
                                    "line_no": 449,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;"
                                },
                                {
                                    "line_no": 450,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;"
                                },
                                {
                                    "line_no": 451,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.UndeleteProjectRequest;"
                                }
                            ],
                            "error_texts": [
                                "[450,1] class, interface, or enum expected\n"
                            ]
                        },
                        "451": {
                            "lines": [
                                {
                                    "line_no": 450,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;"
                                },
                                {
                                    "line_no": 451,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.UndeleteProjectRequest;"
                                },
                                {
                                    "line_no": 452,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[451,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java": {
                        "216": {
                            "lines": [
                                {
                                    "line_no": 215,
                                    "content": "}"
                                },
                                {
                                    "line_no": 216,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 217,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[216,1] class, interface, or enum expected\n"
                            ]
                        },
                        "217": {
                            "lines": [
                                {
                                    "line_no": 216,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 217,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 218,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[217,1] class, interface, or enum expected\n"
                            ]
                        },
                        "218": {
                            "lines": [
                                {
                                    "line_no": 217,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 218,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 219,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[218,1] class, interface, or enum expected\n"
                            ]
                        },
                        "219": {
                            "lines": [
                                {
                                    "line_no": 218,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 219,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 220,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[219,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java": {
                        "296": {
                            "lines": [
                                {
                                    "line_no": 295,
                                    "content": "}"
                                },
                                {
                                    "line_no": 296,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.BooleanConstraint;"
                                },
                                {
                                    "line_no": 297,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                }
                            ],
                            "error_texts": [
                                "[296,1] class, interface, or enum expected\n"
                            ]
                        },
                        "297": {
                            "lines": [
                                {
                                    "line_no": 296,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.BooleanConstraint;"
                                },
                                {
                                    "line_no": 297,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 298,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListConstraint;"
                                }
                            ],
                            "error_texts": [
                                "[297,1] class, interface, or enum expected\n"
                            ]
                        },
                        "298": {
                            "lines": [
                                {
                                    "line_no": 297,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 298,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListConstraint;"
                                },
                                {
                                    "line_no": 299,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[298,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java": {
                        "508": {
                            "lines": [
                                {
                                    "line_no": 507,
                                    "content": "}"
                                },
                                {
                                    "line_no": 508,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 509,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[508,1] class, interface, or enum expected\n"
                            ]
                        },
                        "509": {
                            "lines": [
                                {
                                    "line_no": 508,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 509,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 510,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[509,1] class, interface, or enum expected\n"
                            ]
                        },
                        "510": {
                            "lines": [
                                {
                                    "line_no": 509,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 510,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 511,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[510,1] class, interface, or enum expected\n"
                            ]
                        },
                        "511": {
                            "lines": [
                                {
                                    "line_no": 510,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 511,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 512,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[511,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java": {
                        "100": {
                            "lines": [
                                {
                                    "line_no": 99,
                                    "content": "}"
                                },
                                {
                                    "line_no": 100,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Binding;"
                                },
                                {
                                    "line_no": 101,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[100,1] class, interface, or enum expected\n"
                            ]
                        },
                        "101": {
                            "lines": [
                                {
                                    "line_no": 100,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Binding;"
                                },
                                {
                                    "line_no": 101,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 102,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[101,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java": {
                        "288": {
                            "lines": [
                                {
                                    "line_no": 287,
                                    "content": "}"
                                },
                                {
                                    "line_no": 288,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 289,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[288,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java": {
                        "436": {
                            "lines": [
                                {
                                    "line_no": 435,
                                    "content": "}"
                                },
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ResourceId;"
                                }
                            ],
                            "error_texts": [
                                "[436,1] class, interface, or enum expected\n"
                            ]
                        },
                        "437": {
                            "lines": [
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ResourceId;"
                                },
                                {
                                    "line_no": 438,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[437,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 13844632646968638094
        },
        {
            "input": "```diff\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java\n@@ -391,6 +392,0 @@\n}\n-import com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;\n-import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;\n-import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n-import com.google.api.services.cloudresourcemanager.v3.model.RestoreDefault;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java\n@@ -287,6 +288,0 @@\n}\n-import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java\n@@ -435,6 +436,0 @@\n}\n-import com.google.api.services.cloudresourcemanager.v3.model.Project;\n-import com.google.api.services.cloudresourcemanager.v3.model.ResourceId;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java\n@@ -215,6 +216,0 @@\n}\n-import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n-import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n-import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n-import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java\n@@ -295,6 +296,0 @@\n}\n-import com.google.api.services.cloudresourcemanager.v3.model.BooleanConstraint;\n-import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n-import com.google.api.services.cloudresourcemanager.v3.model.ListConstraint;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java\n@@ -507,6 +508,0 @@\n}\n-import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n-import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n-import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n-import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java\n@@ -807,6 +808,0 @@\n}\n-import com.google.api.services.cloudresourcemanager.v3.model.Operation;\n-import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n-import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java\n@@ -99,6 +100,0 @@\n}\n-import com.google.api.services.cloudresourcemanager.v3.model.Binding;\n-import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java\n@@ -430,6 +431,0 @@\n}\n-import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;\n-import com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;\n-import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n-import com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;\n-import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;\n-import com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;\n-import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;\n-import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;\n-import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;\n-import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;\n-import com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;\n-import com.google.api.services.cloudresourcemanager.v3.model.Operation;\n-import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n-import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n-import com.google.api.services.cloudresourcemanager.v3.model.Project;\n-import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;\n-import com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;\n-import com.google.api.services.cloudresourcemanager.v3.model.Status;\n-import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;\n-import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;\n-import com.google.api.services.cloudresourcemanager.v3.model.UndeleteProjectRequest;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.BooleanPolicy;\nimport com.google.api.services.cloudresourcemanager.model.ListPolicy;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.RestoreDefault;\nimport com.google.common.base.Function;\nimport com.google.common.base.MoreObjects;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager organization policy metadata object.\n *\n * <p>Defines a Cloud Organization Policy which specifies constraints for configurations of Cloud\n * Platform resources.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class OrgPolicyInfo {\n\n  static final Function<OrgPolicy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =\n      new Function<OrgPolicy, OrgPolicyInfo>() {\n        @Override\n        public OrgPolicyInfo apply(OrgPolicy protobuf) {\n          return OrgPolicyInfo.fromProtobuf(protobuf);\n        }\n      };\n  static final Function<OrgPolicyInfo, OrgPolicy> TO_PROTOBUF_FUNCTION =\n      new Function<OrgPolicyInfo, OrgPolicy>() {\n        @Override\n        public OrgPolicy apply(OrgPolicyInfo orgPolicyInfo) {\n          return orgPolicyInfo.toProtobuf();\n        }\n      };\n\n  private BoolPolicy boolPolicy;\n  private String constraint;\n  private String etag;\n  private Policies policies;\n  private RestoreDefault restoreDefault;\n  private String updateTime;\n  private Integer version;\n\n  /** Used For boolean Constraints, whether to enforce the Constraint or not. */\n  static class BoolPolicy {\n\n    private final Boolean enforce;\n\n    BoolPolicy(Boolean enforce) {\n      this.enforce = enforce;\n    }\n\n    public boolean getEnforce() {\n      return enforce;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this).add(\"enforce\", getEnforce()).toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      BoolPolicy that = (BoolPolicy) o;\n      return Objects.equals(enforce, that.enforce);\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(enforce);\n    }\n\n    BooleanPolicy toProtobuf() {\n      return new BooleanPolicy().setEnforced(enforce);\n    }\n\n    static BoolPolicy fromProtobuf(BooleanPolicy booleanPolicy) {\n      return new BoolPolicy(booleanPolicy.getEnforced());\n    }\n  }\n\n  /**\n   * The organization ListPolicy object.\n   *\n   * <p>ListPolicy can define specific values and subtrees of Cloud Resource Manager resource\n   * hierarchy (Organizations, Folders, Projects) that are allowed or denied by setting the\n   * allowedValues and deniedValues fields. This is achieved by using the under: and optional is:\n   * prefixes. The under: prefix denotes resource subtree values. The is: prefix is used to denote\n   * specific values, and is required only if the value contains a \":\". Values prefixed with \"is:\"\n   * are treated the same as values with no prefix. Ancestry subtrees must be in one of the\n   * following formats: - \"projects/\", e.g. \"projects/tokyo-rain-123\" - \"folders/\", e.g.\n   * \"folders/1234\" - \"organizations/\", e.g. \"organizations/1234\" The supportsUnder field of the\n   * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues\n   * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are\n   * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues\n   * and deniedValues must be unset.\n   */\n  static class Policies {\n\n    private final String allValues;\n    private final List<String> allowedValues;\n    private final List<java.lang.String> deniedValues;\n    private final Boolean inheritFromParent;\n    private final String suggestedValue;\n\n    Policies(\n        String allValues,\n        List<String> allowedValues,\n        List<String> deniedValues,\n        Boolean inheritFromParent,\n        String suggestedValue) {\n      this.allValues = allValues;\n      this.allowedValues = allowedValues;\n      this.deniedValues = deniedValues;\n      this.inheritFromParent = inheritFromParent;\n      this.suggestedValue = suggestedValue;\n    }\n\n    /** Returns all the Values state of this policy. */\n    String getAllValues() {\n      return allValues;\n    }\n\n    /** Returns the list of allowed values of this resource */\n    List<String> getAllowedValues() {\n      return allowedValues;\n    }\n\n    /** Returns the list of denied values of this resource. */\n    List<String> getDeniedValues() {\n      return deniedValues;\n    }\n\n    /** Returns the inheritance behavior for this Policy */\n    Boolean getInheritFromParent() {\n      return inheritFromParent;\n    }\n\n    /** Returns the suggested value of this policy. */\n    String getSuggestedValue() {\n      return suggestedValue;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this)\n          .add(\"allValues\", getAllValues())\n          .add(\"allowedValues\", getAllowedValues())\n          .add(\"deniedValues\", getDeniedValues())\n          .add(\"inheritFromParent\", getInheritFromParent())\n          .add(\"suggestedValue\", getSuggestedValue())\n          .toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Policies policies = (Policies) o;\n      return Objects.equals(allValues, policies.allValues)\n          && Objects.equals(allowedValues, policies.allowedValues)\n          && Objects.equals(deniedValues, policies.deniedValues)\n          && Objects.equals(inheritFromParent, policies.inheritFromParent)\n          && Objects.equals(suggestedValue, policies.suggestedValue);\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(\n          allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);\n    }\n\n    ListPolicy toProtobuf() {\n      return new ListPolicy()\n          .setAllValues(allValues)\n          .setAllowedValues(allowedValues)\n          .setDeniedValues(deniedValues)\n          .setInheritFromParent(inheritFromParent)\n          .setSuggestedValue(suggestedValue);\n    }\n\n    static Policies fromProtobuf(ListPolicy listPolicy) {\n      return new Policies(\n          listPolicy.getAllValues(),\n          listPolicy.getAllowedValues(),\n          listPolicy.getDeniedValues(),\n          listPolicy.getInheritFromParent(),\n          listPolicy.getSuggestedValue());\n    }\n  }\n\n  /** Builder for {@code OrganizationPolicyInfo}. */\n  static class Builder {\n    private BoolPolicy boolPolicy;\n    private String constraint;\n    private String etag;\n    private Policies policies;\n    private RestoreDefault restoreDefault;\n    private String updateTime;\n    private Integer version;\n\n    Builder() {}\n\n    Builder(OrgPolicyInfo info) {\n      this.boolPolicy = info.boolPolicy;\n      this.constraint = info.constraint;\n      this.etag = info.etag;\n      this.policies = info.policies;\n      this.restoreDefault = info.restoreDefault;\n      this.updateTime = info.updateTime;\n      this.version = info.version;\n    }\n\n    Builder setBoolPolicy(BoolPolicy boolPolicy) {\n      this.boolPolicy = boolPolicy;\n      return this;\n    }\n\n    Builder setConstraint(String constraint) {\n      this.constraint = constraint;\n      return this;\n    }\n\n    Builder setEtag(String etag) {\n      this.etag = etag;\n      return this;\n    }\n\n    Builder setListPolicy(Policies policies) {\n      this.policies = policies;\n      return this;\n    }\n\n    Builder setRestoreDefault(RestoreDefault restoreDefault) {\n      this.restoreDefault = restoreDefault;\n      return this;\n    }\n\n    Builder setUpdateTime(String updateTime) {\n      this.updateTime = updateTime;\n      return this;\n    }\n\n    Builder setVersion(Integer version) {\n      this.version = version;\n      return this;\n    }\n\n    OrgPolicyInfo build() {\n      return new OrgPolicyInfo(this);\n    }\n  }\n\n  OrgPolicyInfo(Builder builder) {\n    this.boolPolicy = builder.boolPolicy;\n    this.constraint = builder.constraint;\n    this.etag = builder.etag;\n    this.policies = builder.policies;\n    this.restoreDefault = builder.restoreDefault;\n    this.updateTime = builder.updateTime;\n    this.version = builder.version;\n  }\n\n  /** Returns the boolean constraint to check whether the constraint is enforced or not. */\n  public BoolPolicy getBoolPolicy() {\n    return boolPolicy;\n  }\n\n  /** Returns the name of the Constraint. */\n  public String getConstraint() {\n    return constraint;\n  }\n\n  /** Returns the etag value of policy. */\n  public String getEtag() {\n    return etag;\n  }\n\n  /** Return the policies. */\n  public Policies getPolicies() {\n    return policies;\n  }\n\n  /** Restores the default behavior of the constraint. */\n  public RestoreDefault getRestoreDefault() {\n    return restoreDefault;\n  }\n\n  /** Returns the updated timestamp of policy. */\n  public String getUpdateTime() {\n    return updateTime;\n  }\n\n  /** Returns the version of the Policy, Default version is 0. */\n  public Integer getVersion() {\n    return version;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    OrgPolicyInfo policyInfo = (OrgPolicyInfo) o;\n    return Objects.equals(boolPolicy, policyInfo.boolPolicy)\n        && Objects.equals(constraint, policyInfo.constraint)\n        && Objects.equals(etag, policyInfo.etag)\n        && Objects.equals(policies, policyInfo.policies)\n        && Objects.equals(restoreDefault, policyInfo.restoreDefault)\n        && Objects.equals(updateTime, policyInfo.updateTime)\n        && Objects.equals(version, policyInfo.version);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);\n  }\n\n  /** Returns a builder for the {@link OrgPolicyInfo} object. */\n  public static Builder newBuilder() {\n    return new Builder();\n  }\n\n  /** Returns a builder for the {@link OrgPolicyInfo} object. */\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  OrgPolicy toProtobuf() {\n    OrgPolicy orgPolicyProto = new OrgPolicy();\n    if (boolPolicy != null) {\n      orgPolicyProto.setBooleanPolicy(boolPolicy.toProtobuf());\n    }\n    orgPolicyProto.setConstraint(constraint);\n    if (policies != null) {\n      orgPolicyProto.setListPolicy(policies.toProtobuf());\n    }\n    orgPolicyProto.setRestoreDefault(restoreDefault);\n    orgPolicyProto.setEtag(etag);\n    orgPolicyProto.setUpdateTime(updateTime);\n    orgPolicyProto.setVersion(version);\n    return orgPolicyProto;\n  }\n\n  static OrgPolicyInfo fromProtobuf(OrgPolicy orgPolicyProtobuf) {\n    Builder builder = newBuilder();\n    if (orgPolicyProtobuf.getBooleanPolicy() != null) {\n      builder.setBoolPolicy(BoolPolicy.fromProtobuf(orgPolicyProtobuf.getBooleanPolicy()));\n    }\n    builder.setConstraint(orgPolicyProtobuf.getConstraint());\n    if (orgPolicyProtobuf.getListPolicy() != null) {\n      builder.setListPolicy(Policies.fromProtobuf(orgPolicyProtobuf.getListPolicy()));\n    }\n    builder.setRestoreDefault(orgPolicyProtobuf.getRestoreDefault());\n    builder.setEtag(orgPolicyProtobuf.getEtag());\n    builder.setUpdateTime(orgPolicyProtobuf.getUpdateTime());\n    builder.setVersion(orgPolicyProtobuf.getVersion());\n    return builder.build();\n  }\n}\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.cloud.Policy;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager project object.\n *\n * <p>A Project is a high-level Google Cloud Platform entity. It is a container for ACLs, APIs,\n * AppEngine Apps, VMs, and other Google Cloud Platform resources. This class' member variables are\n * immutable. Methods that change or update the underlying Project information return a new Project\n * instance. {@code Project} adds a layer of service-related functionality over {@link ProjectInfo}.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class Project extends ProjectInfo {\n\n  private static final long serialVersionUID = 6767630161335155133L;\n\n  private final ResourceManagerOptions options;\n  private transient ResourceManager resourceManager;\n\n  /** Builder for {@code Project}. */\n  public static class Builder extends ProjectInfo.Builder {\n    private final ResourceManager resourceManager;\n    private final ProjectInfo.BuilderImpl infoBuilder;\n\n    Builder(Project project) {\n      this.resourceManager = project.resourceManager;\n      this.infoBuilder = new ProjectInfo.BuilderImpl(project);\n    }\n\n    @Override\n    public Builder setName(String name) {\n      infoBuilder.setName(name);\n      return this;\n    }\n\n    @Override\n    public Builder setProjectId(String projectId) {\n      infoBuilder.setProjectId(projectId);\n      return this;\n    }\n\n    @Override\n    public Builder addLabel(String key, String value) {\n      infoBuilder.addLabel(key, value);\n      return this;\n    }\n\n    @Override\n    public Builder removeLabel(String key) {\n      infoBuilder.removeLabel(key);\n      return this;\n    }\n\n    @Override\n    public Builder clearLabels() {\n      infoBuilder.clearLabels();\n      return this;\n    }\n\n    @Override\n    public Builder setLabels(Map<String, String> labels) {\n      infoBuilder.setLabels(labels);\n      return this;\n    }\n\n    @Override\n    Builder setProjectNumber(Long projectNumber) {\n      infoBuilder.setProjectNumber(projectNumber);\n      return this;\n    }\n\n    @Override\n    Builder setState(State state) {\n      infoBuilder.setState(state);\n      return this;\n    }\n\n    @Override\n    Builder setCreateTimeMillis(Long createTimeMillis) {\n      infoBuilder.setCreateTimeMillis(createTimeMillis);\n      return this;\n    }\n\n    @Override\n    public Builder setParent(ResourceId parent) {\n      infoBuilder.setParent(parent);\n      return this;\n    }\n\n    @Override\n    public Project build() {\n      return new Project(resourceManager, infoBuilder);\n    }\n  }\n\n  Project(ResourceManager resourceManager, ProjectInfo.BuilderImpl infoBuilder) {\n    super(infoBuilder);\n    this.resourceManager = checkNotNull(resourceManager);\n    this.options = resourceManager.getOptions();\n  }\n\n  /** Returns the {@link ResourceManager} service object associated with this Project. */\n  public ResourceManager getResourceManager() {\n    return resourceManager;\n  }\n\n  /**\n   * Fetches the project's latest information. Returns {@code null} if the project does not exist.\n   *\n   * @return Project containing the project's updated metadata or {@code null} if not found\n   * @throws ResourceManagerException upon failure\n   */\n  public Project reload() {\n    return resourceManager.get(getProjectId());\n  }\n\n  /**\n   * Marks the project identified by the specified project ID for deletion.\n   *\n   * <p>This method will only affect the project if the following criteria are met:\n   *\n   * <ul>\n   *   <li>The project does not have a billing account associated with it.\n   *   <li>The project has a lifecycle state of {@link ProjectInfo.State#ACTIVE}.\n   * </ul>\n   *\n   * This method changes the project's lifecycle state from {@link ProjectInfo.State#ACTIVE} to\n   * {@link ProjectInfo.State#DELETE_REQUESTED}. The deletion starts at an unspecified time, at\n   * which point the lifecycle state changes to {@link ProjectInfo.State#DELETE_IN_PROGRESS}. Until\n   * the deletion completes, you can check the lifecycle state checked by retrieving the project\n   * with {@link ResourceManager#get}, and the project remains visible to {@link\n   * ResourceManager#list}. However, you cannot update the project. After the deletion completes,\n   * the project is not retrievable by the {@link ResourceManager#get} and {@link\n   * ResourceManager#list} methods. The caller must have modify permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/delete\">Cloud\n   *     Resource Manager delete</a>\n   */\n  public void delete() {\n    resourceManager.delete(getProjectId());\n  }\n\n  /**\n   * Restores the project identified by the specified project ID.\n   *\n   * <p>You can only use this method for a project that has a lifecycle state of {@link\n   * ProjectInfo.State#DELETE_REQUESTED}. After deletion starts, as indicated by a lifecycle state\n   * of {@link ProjectInfo.State#DELETE_IN_PROGRESS}, the project cannot be restored. The caller\n   * must have modify permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure (including when the project can't be restored)\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/undelete\">Cloud\n   *     Resource Manager undelete</a>\n   */\n  public void undelete() {\n    resourceManager.undelete(getProjectId());\n  }\n\n  /**\n   * Replaces the attributes of the project with the attributes of this project.\n   *\n   * <p>The caller must have modify permissions for this project.\n   *\n   * @return the Project representing the new project metadata\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/update\">Cloud\n   *     Resource Manager update</a>\n   */\n  public Project replace() {\n    return resourceManager.replace(this);\n  }\n\n  /**\n   * Returns the IAM access control policy for this project. Returns {@code null} if the resource\n   * does not exist or if you do not have adequate permission to view the project or get the policy.\n   *\n   * @return the IAM policy for the project\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/getIamPolicy\">\n   *     Resource Manager getIamPolicy</a>\n   */\n  public Policy getPolicy() {\n    return resourceManager.getPolicy(getProjectId());\n  }\n\n  /**\n   * Sets the IAM access control policy for this project. Replaces any existing policy. It is\n   * recommended that you use the read-modify-write pattern. See code samples and important details\n   * of replacing policies in the documentation for {@link ResourceManager#replacePolicy}.\n   *\n   * @return the newly set IAM policy for this project\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/setIamPolicy\">\n   *     Resource Manager setIamPolicy</a>\n   */\n  public Policy replacePolicy(Policy newPolicy) {\n    return resourceManager.replacePolicy(getProjectId(), newPolicy);\n  }\n\n  /**\n   * Returns the permissions that a caller has on this project. You typically don't call this method\n   * if you're using Google Cloud Platform directly to manage permissions. This method is intended\n   * for integration with your proprietary software, such as a customized graphical user interface.\n   * For example, the Cloud Platform Console tests IAM permissions internally to determine which UI\n   * should be available to the logged-in user. Each service that supports IAM lists the possible\n   * permissions; see the <i>Supported Cloud Platform services</i> page below for links to these\n   * lists.\n   *\n   * @return a list of booleans representing whether the caller has the permissions specified (in\n   *     the order of the given permissions)\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/testIamPermissions\">\n   *     Resource Manager testIamPermissions</a>\n   * @see <a href= \"https://cloud.google.com/iam/#supported_cloud_platform_services\">Supported Cloud\n   *     Platform Services</a>\n   */\n  List<Boolean> testPermissions(List<String> permissions) {\n    return resourceManager.testPermissions(getProjectId(), permissions);\n  }\n\n  @Override\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  @Override\n  public final boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null || !obj.getClass().equals(Project.class)) {\n      return false;\n    }\n    Project other = (Project) obj;\n    return Objects.equals(toPb(), other.toPb()) && Objects.equals(options, other.options);\n  }\n\n  @Override\n  public final int hashCode() {\n    return Objects.hash(super.hashCode(), options);\n  }\n\n  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n    in.defaultReadObject();\n    this.resourceManager = options.getService();\n  }\n\n  static Project fromPb(\n      ResourceManager resourceManager,\n      com.google.api.services.cloudresourcemanager.model.Project answer) {\n    ProjectInfo info = ProjectInfo.fromPb(answer);\n    return new Project(resourceManager, new ProjectInfo.BuilderImpl(info));\n  }\n}\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.common.base.MoreObjects.firstNonNull;\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.api.client.util.Data;\nimport com.google.api.core.ApiFunction;\nimport com.google.cloud.StringEnumType;\nimport com.google.cloud.StringEnumValue;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\n\n/**\n * A Google Cloud Resource Manager project metadata object. A Project is a high-level Google Cloud\n * Platform entity. It is a container for ACLs, APIs, AppEngine Apps, VMs, and other Google Cloud\n * Platform resources.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class ProjectInfo implements Serializable {\n\n  public static final DateTimeFormatter DATE_TIME_FORMATTER =\n      DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC);\n  private static final long serialVersionUID = 9148970963697734236L;\n  private final String name;\n  private final String projectId;\n  private final Map<String, String> labels;\n  private final Long projectNumber;\n  private final State state;\n  private final Long createTimeMillis;\n  private final ResourceId parent;\n\n  /** The project lifecycle states. */\n  public static final class State extends StringEnumValue {\n    private static final long serialVersionUID = 869635563976629566L;\n\n    private static final ApiFunction<String, State> CONSTRUCTOR =\n        new ApiFunction<String, State>() {\n          @Override\n          public State apply(String constant) {\n            return new State(constant);\n          }\n        };\n\n    private static final StringEnumType<State> type = new StringEnumType(State.class, CONSTRUCTOR);\n\n    /** Only used/useful for distinguishing unset values. */\n    public static final State LIFECYCLE_STATE_UNSPECIFIED =\n        type.createAndRegister(\"LIFECYCLE_STATE_UNSPECIFIED\");\n\n    /** The normal and active state. */\n    public static final State ACTIVE = type.createAndRegister(\"ACTIVE\");\n\n    /**\n     * The project has been marked for deletion by the user or by the system (Google Cloud\n     * Platform). This can generally be reversed by calling {@link ResourceManager#undelete}.\n     */\n    public static final State DELETE_REQUESTED = type.createAndRegister(\"DELETE_REQUESTED\");\n\n    /**\n     * The process of deleting the project has begun. Reversing the deletion is no longer possible.\n     */\n    public static final State DELETE_IN_PROGRESS = type.createAndRegister(\"DELETE_IN_PROGRESS\");\n\n    private State(String constant) {\n      super(constant);\n    }\n\n    /**\n     * Get the State for the given String constant, and throw an exception if the constant is not\n     * recognized.\n     */\n    public static State valueOfStrict(String constant) {\n      return type.valueOfStrict(constant);\n    }\n\n    /** Get the State for the given String constant, and allow unrecognized values. */\n    public static State valueOf(String constant) {\n      return type.valueOf(constant);\n    }\n\n    /** Return the known values for State. */\n    public static State[] values() {\n      return type.values();\n    }\n  }\n\n  public static class ResourceId implements Serializable {\n\n    private static final long serialVersionUID = -325199985993344726L;\n\n    private final String id;\n    private final String type;\n\n    ResourceId(String id, String type) {\n      this.id = checkNotNull(id);\n      this.type = checkNotNull(type);\n    }\n\n    public static ResourceId of(String id, String type) {\n      return new ResourceId(checkNotNull(id), checkNotNull(type));\n    }\n\n    public String getId() {\n      return id;\n    }\n\n    public String getType() {\n      return type;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n      return obj instanceof ResourceId && Objects.equals(toPb(), ((ResourceId) obj).toPb());\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(id, type);\n    }\n\n    com.google.api.services.cloudresourcemanager.model.ResourceId toPb() {\n      com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb =\n          new com.google.api.services.cloudresourcemanager.model.ResourceId();\n      resourceIdPb.setId(id);\n      resourceIdPb.setType(type.toLowerCase());\n      return resourceIdPb;\n    }\n\n    static ResourceId fromPb(\n        com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb) {\n      return new ResourceId(resourceIdPb.getId(), resourceIdPb.getType());\n    }\n  }\n\n  /** Builder for {@code ProjectInfo}. */\n  public abstract static class Builder {\n\n    /**\n     * Set the user-assigned name of the project.\n     *\n     * <p>This field is optional and can remain unset. Allowed characters are: lowercase and\n     * uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point.\n     * This field can be changed after project creation.\n     */\n    public abstract Builder setName(String name);\n\n    /**\n     * Set the unique, user-assigned ID of the project.\n     *\n     * <p>The ID must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter.\n     * Trailing hyphens are prohibited. This field cannot be changed after the server creates the\n     * project.\n     */\n    public abstract Builder setProjectId(String projectId);\n\n    /**\n     * Add a label associated with this project.\n     *\n     * <p>See {@link #labels} for label restrictions.\n     */\n    public abstract Builder addLabel(String key, String value);\n\n    /** Remove a label associated with this project. */\n    public abstract Builder removeLabel(String key);\n\n    /** Clear the labels associated with this project. */\n    public abstract Builder clearLabels();\n\n    /**\n     * Set the labels associated with this project.\n     *\n     * <p>Label keys must be between 1 and 63 characters long and must conform to the following\n     * regular expression: [a-z]([-a-z0-9]*[a-z0-9])?. Label values must be between 0 and 63\n     * characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?. No\n     * more than 256 labels can be associated with a given resource. This field can be changed after\n     * project creation.\n     */\n    public abstract Builder setLabels(Map<String, String> labels);\n\n    abstract Builder setProjectNumber(Long projectNumber);\n\n    abstract Builder setState(State state);\n\n    abstract Builder setCreateTimeMillis(Long createTimeMillis);\n\n    public abstract Builder setParent(ResourceId parent);\n\n    public abstract ProjectInfo build();\n  }\n\n  static class BuilderImpl extends Builder {\n\n    private String name;\n    private String projectId;\n    private Map<String, String> labels = new HashMap<>();\n    private Long projectNumber;\n    private State state;\n    private Long createTimeMillis;\n    private ResourceId parent;\n\n    BuilderImpl(String projectId) {\n      this.projectId = projectId;\n    }\n\n    BuilderImpl(ProjectInfo info) {\n      this.name = info.name;\n      this.projectId = info.projectId;\n      this.labels.putAll(info.labels);\n      this.projectNumber = info.projectNumber;\n      this.state = info.state;\n      this.createTimeMillis = info.createTimeMillis;\n      this.parent = info.parent;\n    }\n\n    @Override\n    public Builder setName(String name) {\n      this.name = firstNonNull(name, Data.<String>nullOf(String.class));\n      return this;\n    }\n\n    @Override\n    public Builder setProjectId(String projectId) {\n      this.projectId = checkNotNull(projectId);\n      return this;\n    }\n\n    @Override\n    public Builder addLabel(String key, String value) {\n      this.labels.put(key, value);\n      return this;\n    }\n\n    @Override\n    public Builder removeLabel(String key) {\n      this.labels.remove(key);\n      return this;\n    }\n\n    @Override\n    public Builder clearLabels() {\n      this.labels.clear();\n      return this;\n    }\n\n    @Override\n    public Builder setLabels(Map<String, String> labels) {\n      this.labels = Maps.newHashMap(checkNotNull(labels));\n      return this;\n    }\n\n    @Override\n    Builder setProjectNumber(Long projectNumber) {\n      this.projectNumber = projectNumber;\n      return this;\n    }\n\n    @Override\n    Builder setState(State state) {\n      this.state = state;\n      return this;\n    }\n\n    @Override\n    Builder setCreateTimeMillis(Long createTimeMillis) {\n      this.createTimeMillis = createTimeMillis;\n      return this;\n    }\n\n    @Override\n    public Builder setParent(ResourceId parent) {\n      this.parent = parent;\n      return this;\n    }\n\n    @Override\n    public ProjectInfo build() {\n      return new ProjectInfo(this);\n    }\n  }\n\n  ProjectInfo(BuilderImpl builder) {\n    this.name = builder.name;\n    this.projectId = builder.projectId;\n    this.labels = ImmutableMap.copyOf(builder.labels);\n    this.projectNumber = builder.projectNumber;\n    this.state = builder.state;\n    this.createTimeMillis = builder.createTimeMillis;\n    this.parent = builder.parent;\n  }\n\n  /**\n   * Get the unique, user-assigned ID of the project.\n   *\n   * <p>This field cannot be changed after the server creates the project.\n   */\n  public String getProjectId() {\n    return projectId;\n  }\n\n  /**\n   * Get the user-assigned name of the project.\n   *\n   * <p>This field is optional, can remain unset, and can be changed after project creation.\n   */\n  public String getName() {\n    return Data.isNull(name) ? null : name;\n  }\n\n  /**\n   * Get number uniquely identifying the project.\n   *\n   * <p>This field is set by the server and is read-only.\n   */\n  public Long getProjectNumber() {\n    return projectNumber;\n  }\n\n  /** Get the immutable map of labels associated with this project. */\n  public Map<String, String> getLabels() {\n    return labels;\n  }\n\n  /**\n   * Get the project's lifecycle state.\n   *\n   * <p>This is a read-only field. To change the lifecycle state of your project, use the {@code\n   * delete} or {@code undelete} method.\n   */\n  public State getState() {\n    return state;\n  }\n\n  ResourceId getParent() {\n    return parent;\n  }\n\n  /**\n   * Get the project's creation time (in milliseconds).\n   *\n   * <p>This field is set by the server and is read-only.\n   */\n  public Long getCreateTimeMillis() {\n    return createTimeMillis;\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    return obj == this\n        || obj != null\n            && obj.getClass().equals(ProjectInfo.class)\n            && Objects.equals(toPb(), ((ProjectInfo) obj).toPb());\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(name, projectId, labels, projectNumber, state, createTimeMillis, parent);\n  }\n\n  public static Builder newBuilder(String id) {\n    return new BuilderImpl(id);\n  }\n\n  public Builder toBuilder() {\n    return new BuilderImpl(this);\n  }\n\n  com.google.api.services.cloudresourcemanager.model.Project toPb() {\n    com.google.api.services.cloudresourcemanager.model.Project projectPb =\n        new com.google.api.services.cloudresourcemanager.model.Project();\n    projectPb.setName(name);\n    projectPb.setProjectId(projectId);\n    projectPb.setLabels(labels);\n    projectPb.setProjectNumber(projectNumber);\n    if (state != null) {\n      projectPb.setLifecycleState(state.toString());\n    }\n    if (createTimeMillis != null) {\n      projectPb.setCreateTime(\n          DateTimeFormatter.ISO_DATE_TIME\n              .withZone(ZoneOffset.UTC)\n              .format(Instant.ofEpochMilli(createTimeMillis)));\n    }\n    if (parent != null) {\n      projectPb.setParent(parent.toPb());\n    }\n    return projectPb;\n  }\n\n  static ProjectInfo fromPb(com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n    Builder builder =\n        newBuilder(projectPb.getProjectId()).setProjectNumber(projectPb.getProjectNumber());\n    if (projectPb.getName() != null && !projectPb.getName().equals(\"Unnamed\")) {\n      builder.setName(projectPb.getName());\n    }\n    if (projectPb.getLabels() != null) {\n      builder.setLabels(projectPb.getLabels());\n    }\n    if (projectPb.getLifecycleState() != null) {\n      builder.setState(State.valueOf(projectPb.getLifecycleState()));\n    }\n    if (projectPb.getCreateTime() != null) {\n      builder.setCreateTimeMillis(\n          DATE_TIME_FORMATTER.parse(projectPb.getCreateTime(), Instant.FROM).toEpochMilli());\n    }\n    if (projectPb.getParent() != null) {\n      builder.setParent(ResourceId.fromPb(projectPb.getParent()));\n    }\n    return builder.build();\n  }\n}\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.spi.v1beta1;\n\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.cloud.ServiceRpc;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.ResourceManagerException;\nimport com.google.common.collect.ImmutableList;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\npublic interface ResourceManagerRpc extends ServiceRpc {\n\n  enum Option {\n    FILTER(\"filter\"),\n    FIELDS(\"fields\"),\n    PAGE_SIZE(\"pageSize\"),\n    PAGE_TOKEN(\"pageToken\");\n\n    private final String value;\n\n    Option(String value) {\n      this.value = value;\n    }\n\n    public String value() {\n      return value;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    <T> T get(Map<Option, ?> options) {\n      return (T) options.get(this);\n    }\n\n    String getString(Map<Option, ?> options) {\n      return get(options);\n    }\n\n    Integer getInt(Map<Option, ?> options) {\n      return get(options);\n    }\n  }\n\n  class ListResult<T> {\n\n    private final Iterable<T> results;\n    private final String pageToken;\n\n    ListResult(String pageToken, Iterable<T> results) {\n      this.results = ImmutableList.copyOf(results);\n      this.pageToken = pageToken;\n    }\n\n    public static <T> ListResult<T> of(String pageToken, Iterable<T> list) {\n      return new ListResult<>(pageToken, list);\n    }\n\n    public Iterable<T> results() {\n      return results;\n    }\n\n    public String pageToken() {\n      return pageToken;\n    }\n  }\n  /**\n   * Creates a new project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project create(Project project);\n\n  /**\n   * Marks the project identified by the specified project ID for deletion.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  void delete(String projectId);\n\n  /**\n   * Retrieves the project identified by the specified project ID. Returns {@code null} if the\n   * project is not found or if the user doesn't have read permissions for the project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project get(String projectId, Map<Option, ?> options);\n\n  /**\n   * Lists the projects visible to the current user.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Tuple<String, Iterable<Project>> list(Map<Option, ?> options);\n\n  /**\n   * Restores the project identified by the specified project ID. Undelete will only succeed if the\n   * project has a lifecycle state of {@code DELETE_REQUESTED} state. The caller must have modify\n   * permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  void undelete(String projectId);\n\n  /**\n   * Replaces the attributes of the project. The caller must have modify permissions for this\n   * project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project replace(Project project);\n\n  /**\n   * Returns the IAM policy associated with a project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Policy getPolicy(String projectId);\n\n  /**\n   * Replaces the IAM policy associated with the given project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Policy replacePolicy(String projectId, Policy newPolicy);\n\n  /**\n   * Tests whether the caller has the given permissions. Returns a list of booleans corresponding to\n   * whether or not the user has the permission in the same position of input list.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  List<Boolean> testPermissions(String projectId, List<String> permissions);\n\n  /**\n   * Tests whether the caller has the given permissions on the specified Organization. Returns the\n   * permissions and their results.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)\n      throws IOException;\n\n  // TODO(ajaykannan): implement \"Organization\" functionality when available (issue #319)\n\n  /** Clears the Policy from a resource. */\n  void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;\n\n  /**\n   * Gets the effective Policy on a resource.\n   *\n   * <p>This is the result of merging Policies in the resource hierarchy. The returned Policy does\n   * not have an etag set because it is a computed Policy across multiple resources. Subtrees of\n   * Resource Manager resource hierarchy with 'under:' prefix will not be expanded.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException;\n\n  /**\n   * Gets the Policy on a resource.\n   *\n   * <p>If no Policy is set on the resource, a Policy is returned with default values including\n   * POLICY_TYPE_NOT_SET for the policy_type oneof. The etag value can be used with\n   * projects.setOrgPolicy() to create or update a Policy during read-modify-write.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException;\n\n  /**\n   * Lists all the Constraints that can be applied on the specified resource.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  ListResult<Constraint> listAvailableOrgPolicyConstraints(String resource, Map<Option, ?> options)\n      throws IOException;\n\n  /**\n   * Lists all the Policies set for a particular resource.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options) throws IOException;\n\n  /**\n   * Updates the specified Policy on the resource. Creates a new Policy for that Constraint on the\n   * resource if one does not exist.\n   *\n   * <p>Not supplying an etag on the request Policy results in an unconditional write of the Policy.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;\n}\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.BooleanConstraint;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.ListConstraint;\nimport com.google.common.base.Function;\nimport com.google.common.base.MoreObjects;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager constraint metadata object.\n *\n * @see <a\n *     href=\"https://cloud.google.com/resource-manager/reference/rest/v1/ListAvailableOrgPolicyConstraintsResponse#Constraint\">Constraint</a>\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class ConstraintInfo {\n\n  static final Function<Constraint, ConstraintInfo> FROM_PROTOBUF_FUNCTION =\n      new Function<Constraint, ConstraintInfo>() {\n        @Override\n        public ConstraintInfo apply(Constraint protobuf) {\n          return ConstraintInfo.fromProtobuf(protobuf);\n        }\n      };\n  static final Function<ConstraintInfo, Constraint> TO_PROTOBUF_FUNCTION =\n      new Function<ConstraintInfo, Constraint>() {\n        @Override\n        public Constraint apply(ConstraintInfo constraintInfo) {\n          return constraintInfo.toProtobuf();\n        }\n      };\n\n  private BooleanConstraint booleanConstraint;\n  private String constraintDefault;\n  private String description;\n  private String displayName;\n  private Constraints constraints;\n  private String name;\n  private Integer version;\n\n  /**\n   * A Constraint that allows or disallows a list of string values, which are configured by an\n   * Organization's policy administrator with a Policy.\n   */\n  static class Constraints {\n\n    private final String suggestedValue;\n    private final Boolean supportsUnder;\n\n    Constraints(String suggestedValue, Boolean supportsUnder) {\n      this.suggestedValue = suggestedValue;\n      this.supportsUnder = supportsUnder;\n    }\n\n    /**\n     * The Google Cloud Console tries to default to a configuration that matches the value specified\n     * in this Constraint.\n     */\n    String getSuggestedValue() {\n      return suggestedValue;\n    }\n\n    /**\n     * Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in\n     * Policy.allowed_values and Policy.denied_values.\n     */\n    Boolean getSupportsUnder() {\n      return supportsUnder;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this)\n          .add(\"suggestedValue\", getSuggestedValue())\n          .add(\"supportsUnder\", getSupportsUnder())\n          .toString();\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(suggestedValue, supportsUnder);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Constraints that = (Constraints) o;\n      return Objects.equals(suggestedValue, that.suggestedValue)\n          && Objects.equals(supportsUnder, that.supportsUnder);\n    }\n\n    ListConstraint toProtobuf() {\n      return new ListConstraint().setSuggestedValue(suggestedValue).setSupportsUnder(supportsUnder);\n    }\n\n    static Constraints fromProtobuf(ListConstraint listConstraint) {\n      return new Constraints(listConstraint.getSuggestedValue(), listConstraint.getSupportsUnder());\n    }\n  }\n\n  /** Builder for {@code ConstraintInfo}. */\n  static class Builder {\n    private BooleanConstraint booleanConstraint;\n    private String constraintDefault;\n    private String description;\n    private String displayName;\n    private Constraints constraints;\n    private String name;\n    private Integer version;\n\n    Builder(String name) {\n      this.name = name;\n    }\n\n    Builder(ConstraintInfo info) {\n      this.booleanConstraint = info.booleanConstraint;\n      this.constraintDefault = info.constraintDefault;\n      this.description = info.description;\n      this.displayName = info.displayName;\n      this.constraints = info.constraints;\n      this.name = info.name;\n      this.version = info.version;\n    }\n\n    Builder setBooleanConstraint(BooleanConstraint booleanConstraint) {\n      this.booleanConstraint = booleanConstraint;\n      return this;\n    }\n\n    Builder setConstraintDefault(String constraintDefault) {\n      this.constraintDefault = constraintDefault;\n      return this;\n    }\n\n    Builder setDescription(String description) {\n      this.description = description;\n      return this;\n    }\n\n    Builder setDisplayName(String displayName) {\n      this.displayName = displayName;\n      return this;\n    }\n\n    Builder setConstraints(Constraints constraints) {\n      this.constraints = constraints;\n      return this;\n    }\n\n    Builder setName(String name) {\n      this.name = name;\n      return this;\n    }\n\n    Builder setVersion(Integer version) {\n      this.version = version;\n      return this;\n    }\n\n    ConstraintInfo build() {\n      return new ConstraintInfo(this);\n    }\n  }\n\n  ConstraintInfo(Builder builder) {\n    this.booleanConstraint = builder.booleanConstraint;\n    this.constraintDefault = builder.constraintDefault;\n    this.description = builder.description;\n    this.displayName = builder.displayName;\n    this.constraints = builder.constraints;\n    this.name = builder.name;\n    this.version = builder.version;\n  }\n\n  /** Returns the boolean constraint to check whether the constraint is enforced or not. */\n  public BooleanConstraint getBooleanConstraint() {\n    return booleanConstraint;\n  }\n\n  /** Returns the default behavior of the constraint. */\n  public String getConstraintDefault() {\n    return constraintDefault;\n  }\n\n  /** Returns the detailed description of the constraint. */\n  public String getDescription() {\n    return description;\n  }\n\n  /** Returns the human readable name of the constraint. */\n  public String getDisplayName() {\n    return displayName;\n  }\n\n  /** Returns the listConstraintInfo. */\n  public Constraints getConstraints() {\n    return constraints;\n  }\n\n  /** Returns the globally unique name of the constraint. */\n  public String getName() {\n    return name;\n  }\n\n  /** Returns the version of the Constraint. Default version is 0. */\n  public Integer getVersion() {\n    return version;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ConstraintInfo that = (ConstraintInfo) o;\n    return Objects.equals(booleanConstraint, that.booleanConstraint)\n        && Objects.equals(constraintDefault, that.constraintDefault)\n        && Objects.equals(description, that.description)\n        && Objects.equals(displayName, that.displayName)\n        && Objects.equals(constraints, that.constraints)\n        && Objects.equals(name, that.name)\n        && Objects.equals(version, that.version);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        booleanConstraint, constraintDefault, description, displayName, constraints, name, version);\n  }\n\n  /** Returns a builder for the {@link ConstraintInfo} object. */\n  public static Builder newBuilder(String name) {\n    return new Builder(name);\n  }\n\n  /** Returns a builder for the {@link ConstraintInfo} object. */\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  Constraint toProtobuf() {\n    Constraint constraintProto = new Constraint();\n    constraintProto.setBooleanConstraint(booleanConstraint);\n    constraintProto.setConstraintDefault(constraintDefault);\n    constraintProto.setDescription(description);\n    constraintProto.setDisplayName(displayName);\n    if (constraints != null) {\n      constraintProto.setListConstraint(constraints.toProtobuf());\n    }\n    constraintProto.setName(name);\n    constraintProto.setVersion(version);\n    return constraintProto;\n  }\n\n  static ConstraintInfo fromProtobuf(Constraint constraintProtobuf) {\n    Builder builder = newBuilder(constraintProtobuf.getName());\n    builder.setBooleanConstraint(constraintProtobuf.getBooleanConstraint());\n    builder.setConstraintDefault(constraintProtobuf.getConstraintDefault());\n    builder.setDescription(constraintProtobuf.getDescription());\n    builder.setDisplayName(constraintProtobuf.getDisplayName());\n    if (constraintProtobuf.getListConstraint() != null) {\n      builder.setConstraints(Constraints.fromProtobuf(constraintProtobuf.getListConstraint()));\n    }\n    if (constraintProtobuf.getName() != null && !constraintProtobuf.getName().equals(\"Unnamed\")) {\n      builder.setName(constraintProtobuf.getName());\n    }\n    builder.setVersion(constraintProtobuf.getVersion());\n    return builder.build();\n  }\n}\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.Preconditions.checkArgument;\n\nimport com.google.api.gax.paging.Page;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.cloud.BaseService;\nimport com.google.cloud.PageImpl;\nimport com.google.cloud.PageImpl.NextPageFetcher;\nimport com.google.cloud.Policy;\nimport com.google.cloud.RetryHelper.RetryHelperException;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc.ListResult;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Maps;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class ResourceManagerImpl extends BaseService<ResourceManagerOptions>\n    implements ResourceManager {\n\n  private final ResourceManagerRpc resourceManagerRpc;\n\n  ResourceManagerImpl(ResourceManagerOptions options) {\n    super(options);\n    resourceManagerRpc = options.getResourceManagerRpcV1Beta1();\n  }\n\n  @Override\n  public Project create(final ProjectInfo project) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.create(project.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void delete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.delete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project get(final String projectId, ProjectGetOption... options) {\n    final Map<ResourceManagerRpc.Option, ?> optionsMap = optionMap(options);\n    try {\n      com.google.api.services.cloudresourcemanager.model.Project answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.get(projectId, optionsMap);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : Project.fromPb(this, answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ProjectPageFetcher implements NextPageFetcher<Project> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ProjectPageFetcher(\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<Project> getNextPage() {\n      return listProjects(serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<Project> list(ProjectListOption... options) {\n    return listProjects(getOptions(), optionMap(options));\n  }\n\n  private static Page<Project> listProjects(\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      Tuple<String, Iterable<com.google.api.services.cloudresourcemanager.model.Project>> result =\n          runWithRetries(\n              new Callable<\n                  Tuple<\n                      String,\n                      Iterable<com.google.api.services.cloudresourcemanager.model.Project>>>() {\n                @Override\n                public Tuple<\n                        String,\n                        Iterable<com.google.api.services.cloudresourcemanager.model.Project>>\n                    call() {\n                  return serviceOptions.getResourceManagerRpcV1Beta1().list(optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = result.x();\n      Iterable<Project> projects =\n          result.y() == null\n              ? ImmutableList.<Project>of()\n              : Iterables.transform(\n                  result.y(),\n                  new Function<\n                      com.google.api.services.cloudresourcemanager.model.Project, Project>() {\n                    @Override\n                    public Project apply(\n                        com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n                      return new Project(\n                          serviceOptions.getService(),\n                          new ProjectInfo.BuilderImpl(ProjectInfo.fromPb(projectPb)));\n                    }\n                  });\n      return new PageImpl<>(\n          new ProjectPageFetcher(serviceOptions, cursor, optionsMap), cursor, projects);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project replace(final ProjectInfo newProject) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.replace(newProject.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void undelete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.undelete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(final String projectId) {\n    try {\n      com.google.api.services.cloudresourcemanager.model.Policy answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.getPolicy(projectId);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : PolicyMarshaller.INSTANCE.fromPb(answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(final String projectId, final Policy newPolicy) {\n    try {\n      return PolicyMarshaller.INSTANCE.fromPb(\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.replacePolicy(\n                      projectId, PolicyMarshaller.INSTANCE.toPb(newPolicy));\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(final String projectId, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<List<Boolean>>() {\n            @Override\n            public List<Boolean> call() {\n              return resourceManagerRpc.testPermissions(projectId, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(\n      final String resource, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<Map<String, Boolean>>() {\n            @Override\n            public Map<String, Boolean> call() throws IOException {\n              return resourceManagerRpc.testOrgPermissions(resource, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() throws IOException {\n              resourceManagerRpc.clearOrgPolicy(resource, orgPolicy.toProtobuf());\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getEffectiveOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getEffectiveOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ConstraintPageFetcher implements NextPageFetcher<ConstraintInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ConstraintPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<ConstraintInfo> getNextPage() {\n      return listAvailableOrgPolicyConstraints(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      String resource, ListOption... options) {\n    return listAvailableOrgPolicyConstraints(resource, getOptions(), optionMap(options));\n  }\n\n  private static Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<Constraint> constraintList =\n          runWithRetries(\n              new Callable<ListResult<Constraint>>() {\n                @Override\n                public ListResult<Constraint> call() throws IOException {\n                  return rpc.listAvailableOrgPolicyConstraints(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = constraintList.pageToken();\n      Iterable<ConstraintInfo> constraints =\n          constraintList.results() == null\n              ? ImmutableList.<ConstraintInfo>of()\n              : Iterables.transform(\n                  constraintList.results(), ConstraintInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new ConstraintPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          constraints);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class OrgPolicyPageFetcher implements NextPageFetcher<OrgPolicyInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    OrgPolicyPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<OrgPolicyInfo> getNextPage() {\n      return listOrgPolicies(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<OrgPolicyInfo> listOrgPolicies(final String resource, ListOption... options) {\n    return listOrgPolicies(resource, getOptions(), optionMap(options));\n  }\n\n  private static PageImpl<OrgPolicyInfo> listOrgPolicies(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<OrgPolicy> orgPolicy =\n          runWithRetries(\n              new Callable<ListResult<OrgPolicy>>() {\n                @Override\n                public ListResult<OrgPolicy> call() throws IOException {\n                  return rpc.listOrgPolicies(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = orgPolicy.pageToken();\n      Iterable<OrgPolicyInfo> orgPolicies =\n          orgPolicy.results() == null\n              ? ImmutableList.<OrgPolicyInfo>of()\n              : Iterables.transform(orgPolicy.results(), OrgPolicyInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new OrgPolicyPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          orgPolicies);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo replaceOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.replaceOrgPolicy(resource, orgPolicy.toProtobuf());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private Map<ResourceManagerRpc.Option, ?> optionMap(Option... options) {\n    Map<ResourceManagerRpc.Option, Object> temp = Maps.newEnumMap(ResourceManagerRpc.Option.class);\n    for (Option option : options) {\n      Object prev = temp.put(option.getRpcOption(), option.getValue());\n      checkArgument(prev == null, \"Duplicate option %s\", option);\n    }\n    return ImmutableMap.copyOf(temp);\n  }\n}\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.testing;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static java.net.HttpURLConnection.HTTP_OK;\n\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.cloud.NoCredentials;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Objects;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.io.ByteStreams;\nimport com.sun.net.httpserver.Headers;\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpServer;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.zip.GZIPInputStream;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\n\n/**\n * Utility to create a local Resource Manager mock for testing.\n *\n * <p>The mock runs in a separate thread, listening for HTTP requests on the local machine at an\n * ephemeral port. While this mock attempts to simulate the Cloud Resource Manager, there are some\n * divergences in behavior. The following is a non-exhaustive list of some of those behavioral\n * differences:\n *\n * <ul>\n *   <li>This mock assumes you have adequate permissions for any action. Related to this,\n *       <i>testIamPermissions</i> always indicates that the caller has all permissions listed in\n *       the request.\n *   <li>IAM policies are set to an empty policy with version 0 (only legacy roles supported) upon\n *       project creation. The actual service will not have an empty list of bindings and may also\n *       set your version to 1.\n *   <li>There is no input validation for the policy provided when replacing a policy or calling\n *       testIamPermissions.\n *   <li>In this mock, projects never move from the <i>DELETE_REQUESTED</i> lifecycle state to\n *       <i>DELETE_IN_PROGRESS</i> without an explicit call to the utility method {@link\n *       #changeLifecycleState}. Similarly, a project is never completely removed without an\n *       explicit call to the utility method {@link #removeProject}.\n *   <li>The messages in the error responses given by this mock do not necessarily match the\n *       messages given by the actual service.\n * </ul>\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\n@SuppressWarnings(\"restriction\")\npublic class LocalResourceManagerHelper {\n  private static final Logger log = Logger.getLogger(LocalResourceManagerHelper.class.getName());\n  private static final JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\n  private static final Random PROJECT_NUMBER_GENERATOR = new Random();\n  private static final String VERSION = \"v1\";\n  private static final String CONTEXT = \"/\" + VERSION + \"/projects\";\n  private static final String OPERATION_CONTEXT = \"/\" + VERSION + \"/operations\";\n  private static final URI BASE_CONTEXT;\n  private static final Set<String> SUPPORTED_COMPRESSION_ENCODINGS =\n      ImmutableSet.of(\"gzip\", \"x-gzip\");\n  private static final Pattern LIST_FIELDS_PATTERN =\n      Pattern.compile(\"(.*?)projects\\\\((.*?)\\\\)(.*?)\");\n  private static final String[] NO_FIELDS = {};\n\n  static {\n    try {\n      BASE_CONTEXT = new URI(CONTEXT);\n    } catch (URISyntaxException e) {\n      throw new RuntimeException(\n          \"Could not initialize LocalResourceManagerHelper due to URISyntaxException.\", e);\n    }\n  }\n\n  // see https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects\n  private static final Set<Character> PERMISSIBLE_PROJECT_NAME_PUNCTUATION =\n      ImmutableSet.of('-', '\\'', '\"', ' ', '!');\n\n  private final HttpServer server;\n  private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();\n  private final Map<String, Policy> policies = new HashMap<>();\n  private final int port;\n\n  private static class Response {\n    private final int code;\n    private final String body;\n\n    Response(int code, String body) {\n      this.code = code;\n      this.body = body;\n    }\n\n    int code() {\n      return code;\n    }\n\n    String body() {\n      return body;\n    }\n  }\n\n  private enum Error {\n    ABORTED(409, \"global\", \"aborted\", \"ABORTED\"),\n    ALREADY_EXISTS(409, \"global\", \"alreadyExists\", \"ALREADY_EXISTS\"),\n    PERMISSION_DENIED(403, \"global\", \"forbidden\", \"PERMISSION_DENIED\"),\n    FAILED_PRECONDITION(400, \"global\", \"failedPrecondition\", \"FAILED_PRECONDITION\"),\n    INVALID_ARGUMENT(400, \"global\", \"badRequest\", \"INVALID_ARGUMENT\"),\n    BAD_REQUEST(400, \"global\", \"badRequest\", \"BAD_REQUEST\"),\n    INTERNAL_ERROR(500, \"global\", \"internalError\", \"INTERNAL_ERROR\");\n\n    private final int code;\n    private final String domain;\n    private final String reason;\n    private final String status;\n\n    Error(int code, String domain, String reason, String status) {\n      this.code = code;\n      this.domain = domain;\n      this.reason = reason;\n      this.status = status;\n    }\n\n    Response response(String message) {\n      try {\n        return new Response(code, toJson(message));\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\"Error when generating JSON error response\");\n      }\n    }\n\n    private String toJson(String message) throws IOException {\n      Map<String, Object> errors = new HashMap<>();\n      errors.put(\"domain\", domain);\n      errors.put(\"message\", message);\n      errors.put(\"reason\", reason);\n      Map<String, Object> args = new HashMap<>();\n      args.put(\"errors\", ImmutableList.of(errors));\n      args.put(\"code\", code);\n      args.put(\"message\", message);\n      args.put(\"status\", status);\n      return jsonFactory.toString(ImmutableMap.of(\"error\", args));\n    }\n  }\n\n  private class RequestHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) {\n      // see https://cloud.google.com/resource-manager/reference/rest/\n      Response response;\n      String path = BASE_CONTEXT.relativize(exchange.getRequestURI()).getPath();\n      String requestMethod = exchange.getRequestMethod();\n      try {\n        switch (requestMethod) {\n          case \"POST\":\n            response = handlePost(exchange, path);\n            break;\n          case \"DELETE\":\n            response = delete(projectIdFromUri(path));\n            break;\n          case \"GET\":\n            if (!path.isEmpty()) {\n              response =\n                  get(projectIdFromUri(path), parseFields(exchange.getRequestURI().getQuery()));\n            } else {\n              response = list(parseListOptions(exchange.getRequestURI().getQuery()));\n            }\n            break;\n          case \"PUT\":\n            String requestBody =\n                decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n            response =\n                replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class));\n            break;\n          default:\n            response =\n                Error.BAD_REQUEST.response(\n                    \"The server could not understand the following request URI: \"\n                        + requestMethod\n                        + \" \"\n                        + path);\n        }\n      } catch (IOException e) {\n        response = Error.BAD_REQUEST.response(e.getMessage());\n      }\n      writeResponse(exchange, response);\n    }\n  }\n\n  private Response handlePost(HttpExchange exchange, String path) throws IOException {\n    String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n    if (!path.contains(\":\")) {\n      return create(jsonFactory.fromString(requestBody, Project.class));\n    } else {\n      switch (path.split(\":\", 2)[1]) {\n        case \"undelete\":\n          return undelete(projectIdFromUri(path));\n        case \"getIamPolicy\":\n          return getPolicy(projectIdFromUri(path));\n        case \"setIamPolicy\":\n          return replacePolicy(\n              projectIdFromUri(path),\n              jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy());\n        case \"testIamPermissions\":\n          return testPermissions(\n              projectIdFromUri(path),\n              jsonFactory\n                  .fromString(requestBody, TestIamPermissionsRequest.class)\n                  .getPermissions());\n        default:\n          return Error.BAD_REQUEST.response(\n              \"The server could not understand the following request URI: POST \" + path);\n      }\n    }\n  }\n\n  private class OperationRequestHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) {\n      // see https://cloud.google.com/resource-manager/reference/rest/\n      String projectId;\n      try {\n        projectId = new URI(OPERATION_CONTEXT).relativize(exchange.getRequestURI()).getPath();\n      } catch (URISyntaxException e) {\n        throw new IllegalStateException(e);\n      }\n      Response response;\n      String requestMethod = exchange.getRequestMethod();\n      switch (requestMethod) {\n        case \"GET\":\n          Project project = projects.get(projectId);\n          if (project == null) {\n            response = Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n            break;\n          }\n          try {\n            response =\n                new Response(\n                    HTTP_OK,\n                    jsonFactory.toString(new Operation().setDone(true).setResponse(project)));\n          } catch (IOException e) {\n            response =\n                Error.INTERNAL_ERROR.response(\n                    \"Error when serializing project \" + project.getProjectId());\n          }\n          break;\n        default:\n          response =\n              Error.BAD_REQUEST.response(\n                  \"The server could not understand the following request URI: \"\n                      + requestMethod\n                      + \" \"\n                      + projectId);\n      }\n      writeResponse(exchange, response);\n    }\n  }\n\n  private static void writeResponse(HttpExchange exchange, Response response) {\n    exchange.getResponseHeaders().set(\"Content-type\", \"application/json; charset=UTF-8\");\n    OutputStream outputStream = exchange.getResponseBody();\n    try {\n      exchange.getResponseHeaders().add(\"Connection\", \"close\");\n      exchange.sendResponseHeaders(response.code(), response.body().length());\n      outputStream.write(response.body().getBytes(StandardCharsets.UTF_8));\n      outputStream.close();\n    } catch (IOException e) {\n      log.log(Level.WARNING, \"IOException encountered when sending response.\", e);\n    }\n  }\n\n  private static String decodeContent(Headers headers, InputStream inputStream) throws IOException {\n    List<String> contentEncoding = headers.get(\"Content-encoding\");\n    InputStream input = inputStream;\n    try {\n      if (contentEncoding != null && !contentEncoding.isEmpty()) {\n        String encoding = contentEncoding.get(0);\n        if (SUPPORTED_COMPRESSION_ENCODINGS.contains(encoding)) {\n          input = new GZIPInputStream(inputStream);\n        } else if (!encoding.equals(\"identity\")) {\n          throw new IOException(\n              \"The request has the following unsupported HTTP content encoding: \" + encoding);\n        }\n      }\n      return new String(ByteStreams.toByteArray(input), StandardCharsets.UTF_8);\n    } catch (IOException e) {\n      throw new IOException(\"Exception encountered when decoding request content.\", e);\n    }\n  }\n\n  private static String projectIdFromUri(String path) throws IOException {\n    if (path.isEmpty()) {\n      throw new IOException(\"The URI path '\" + path + \"' doesn't have a project ID.\");\n    }\n    return path.split(\":\")[0];\n  }\n\n  private static String[] parseFields(String query) {\n    if (query != null && !query.isEmpty()) {\n      String[] querySplit = query.split(\"=\");\n      return querySplit.length > 1 ? querySplit[1].split(\",\") : null;\n    }\n    return null;\n  }\n\n  private static Map<String, Object> parseListOptions(String query) throws IOException {\n    Map<String, Object> options = new HashMap<>();\n    if (query != null) {\n      String[] args = query.split(\"&\");\n      for (String arg : args) {\n        String[] argEntry = arg.split(\"=\");\n        switch (argEntry[0]) {\n          case \"fields\":\n            // List fields are in the form \"projects(field1, field2, ...),nextPageToken\"\n            Matcher matcher = LIST_FIELDS_PATTERN.matcher(argEntry[1]);\n            if (matcher.matches()) {\n              options.put(\"projectFields\", matcher.group(2).split(\",\"));\n              options.put(\"listFields\", (matcher.group(1) + matcher.group(3)).split(\",\"));\n            } else {\n              options.put(\"projectFields\", NO_FIELDS);\n              options.put(\"listFields\", argEntry[1].split(\",\"));\n            }\n            break;\n          case \"filter\":\n            options.put(\"filter\", argEntry[1].split(\" \"));\n            break;\n          case \"pageToken\":\n            options.put(\"pageToken\", argEntry[1]);\n            break;\n          case \"pageSize\":\n            int pageSize = Integer.parseInt(argEntry[1]);\n            if (pageSize < 1) {\n              throw new IOException(\"Page size must be greater than 0.\");\n            }\n            options.put(\"pageSize\", pageSize);\n            break;\n        }\n      }\n    }\n    return options;\n  }\n\n  private static String checkForProjectErrors(Project project) {\n    if (project.getProjectId() == null) {\n      return \"Project ID cannot be empty.\";\n    }\n    if (!isValidIdOrLabel(project.getProjectId(), 6, 30)) {\n      return \"Project \"\n          + project.getProjectId()\n          + \" has an invalid ID.\"\n          + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n          + VERSION\n          + \"/projects\"\n          + \" for more information.\";\n    }\n    if (project.getName() != null) {\n      for (char c : project.getName().toCharArray()) {\n        if (!PERMISSIBLE_PROJECT_NAME_PUNCTUATION.contains(c) && !Character.isLetterOrDigit(c)) {\n          return \"Project \"\n              + project.getProjectId()\n              + \" has an invalid name.\"\n              + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n              + VERSION\n              + \"/projects for more information.\";\n        }\n      }\n    }\n    if (project.getLabels() != null) {\n      if (project.getLabels().size() > 256) {\n        return \"Project \" + project.getProjectId() + \" exceeds the limit of 256 labels.\";\n      }\n      for (Map.Entry<String, String> entry : project.getLabels().entrySet()) {\n        if (!isValidIdOrLabel(entry.getKey(), 1, 63)\n            || !isValidIdOrLabel(entry.getValue(), 0, 63)) {\n          return \"Project \"\n              + project.getProjectId()\n              + \" has an invalid label entry.\"\n              + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n              + VERSION\n              + \"/projects for more information.\";\n        }\n      }\n    }\n    return null;\n  }\n\n  private static boolean isValidIdOrLabel(String value, int minLength, int maxLength) {\n    for (char c : value.toCharArray()) {\n      if (c != '-' && !Character.isDigit(c) && !Character.isLowerCase(c)) {\n        return false;\n      }\n    }\n    if (!value.isEmpty() && (!Character.isLetter(value.charAt(0)) || value.endsWith(\"-\"))) {\n      return false;\n    }\n    return value.length() >= minLength && value.length() <= maxLength;\n  }\n\n  synchronized Response create(Project project) {\n    String customErrorMessage = checkForProjectErrors(project);\n    if (customErrorMessage != null) {\n      return Error.INVALID_ARGUMENT.response(customErrorMessage);\n    } else {\n      project.setLifecycleState(\"ACTIVE\");\n      project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));\n      project.setCreateTime(\n          DateTimeFormatter.ISO_DATE_TIME\n              .withZone(ZoneOffset.UTC)\n              .format(Instant.ofEpochMilli(System.currentTimeMillis())));\n      if (projects.putIfAbsent(project.getProjectId(), project) != null) {\n        return Error.ALREADY_EXISTS.response(\n            \"A project with the same project ID (\" + project.getProjectId() + \") already exists.\");\n      }\n      Policy emptyPolicy =\n          new Policy()\n              .setBindings(Collections.<Binding>emptyList())\n              .setEtag(UUID.randomUUID().toString())\n              .setVersion(0);\n      policies.put(project.getProjectId(), emptyPolicy);\n      try {\n        // Pretend it's not done yet.\n        String createdProjectStr =\n            jsonFactory.toString(\n                new Operation().setDone(false).setName(\"operations/\" + project.getProjectId()));\n        return new Response(HTTP_OK, createdProjectStr);\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\"Error serializing project \" + project.getProjectId());\n      }\n    }\n  }\n\n  synchronized Response delete(String projectId) {\n    Project project = projects.get(projectId);\n    if (project == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when deleting \" + projectId + \" because the project was not found.\");\n    }\n    if (!project.getLifecycleState().equals(\"ACTIVE\")) {\n      return Error.FAILED_PRECONDITION.response(\n          \"Error when deleting \" + projectId + \" because the lifecycle state was not ACTIVE.\");\n    } else {\n      project.setLifecycleState(\"DELETE_REQUESTED\");\n      return new Response(HTTP_OK, \"{}\");\n    }\n  }\n\n  Response get(String projectId, String[] fields) {\n    Project project = projects.get(projectId);\n    if (project != null) {\n      try {\n        return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields)));\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\n            \"Error when serializing project \" + project.getProjectId());\n      }\n    } else {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n  }\n\n  Response list(Map<String, Object> options) {\n    List<String> projectsSerialized = new ArrayList<>();\n    String[] filters = (String[]) options.get(\"filter\");\n    if (filters != null && !isValidFilter(filters)) {\n      return Error.INVALID_ARGUMENT.response(\"Could not parse the filter.\");\n    }\n    String[] projectFields = (String[]) options.get(\"projectFields\");\n    int count = 0;\n    String pageToken = (String) options.get(\"pageToken\");\n    Integer pageSize = (Integer) options.get(\"pageSize\");\n    String nextPageToken = null;\n    Map<String, Project> projectsToScan = projects;\n    if (pageToken != null) {\n      projectsToScan = projects.tailMap(pageToken);\n    }\n    for (Project p : projectsToScan.values()) {\n      if (pageSize != null && count >= pageSize) {\n        nextPageToken = p.getProjectId();\n        break;\n      }\n      boolean includeProject = includeProject(p, filters);\n      if (includeProject) {\n        count++;\n        try {\n          projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields)));\n        } catch (IOException e) {\n          return Error.INTERNAL_ERROR.response(\n              \"Error when serializing project \" + p.getProjectId());\n        }\n      }\n    }\n    String[] listFields = (String[]) options.get(\"listFields\");\n    StringBuilder responseBody = new StringBuilder();\n    responseBody.append('{');\n    // If fields parameter is set but no project field is selected we must return no projects.\n    if (!(projectFields != null && projectFields.length == 0)) {\n      responseBody.append(\"\\\"projects\\\": [\");\n      Joiner.on(\",\").appendTo(responseBody, projectsSerialized);\n      responseBody.append(']');\n    }\n    if (nextPageToken != null\n        && (listFields == null || ImmutableSet.copyOf(listFields).contains(\"nextPageToken\"))) {\n      if (responseBody.length() > 1) {\n        responseBody.append(',');\n      }\n      responseBody.append(\"\\\"nextPageToken\\\": \\\"\");\n      responseBody.append(nextPageToken);\n      responseBody.append('\"');\n    }\n    responseBody.append('}');\n    return new Response(HTTP_OK, responseBody.toString());\n  }\n\n  private static boolean isValidFilter(String[] filters) {\n    for (String filter : filters) {\n      String field = filter.toLowerCase().split(\":\")[0];\n      if (!(\"id\".equals(field) || \"name\".equals(field) || field.startsWith(\"labels.\"))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static boolean includeProject(Project project, String[] filters) {\n    if (filters == null) {\n      return true;\n    }\n    for (String filter : filters) {\n      String[] filterEntry = filter.toLowerCase().split(\":\");\n      String filterType = filterEntry[0];\n      if (\"id\".equals(filterType)) {\n        if (!satisfiesFilter(project.getProjectId(), filterEntry[1])) {\n          return false;\n        }\n      } else if (\"name\".equals(filterType)) {\n        if (!satisfiesFilter(project.getName(), filterEntry[1])) {\n          return false;\n        }\n      } else if (filterType.startsWith(\"labels.\")) {\n        String labelKey = filterType.substring(\"labels.\".length());\n        if (project.getLabels() != null) {\n          String labelValue = project.getLabels().get(labelKey);\n          if (!satisfiesFilter(labelValue, filterEntry[1])) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  private static boolean satisfiesFilter(String projectValue, String filterValue) {\n    if (projectValue == null) {\n      return false;\n    }\n    return \"*\".equals(filterValue) || filterValue.equals(projectValue.toLowerCase());\n  }\n\n  private static Project extractFields(Project fullProject, String[] fields) {\n    if (fields == null) {\n      return fullProject;\n    }\n    Project project = new Project();\n    for (String field : fields) {\n      switch (field) {\n        case \"createTime\":\n          project.setCreateTime(fullProject.getCreateTime());\n          break;\n        case \"labels\":\n          project.setLabels(fullProject.getLabels());\n          break;\n        case \"lifecycleState\":\n          project.setLifecycleState(fullProject.getLifecycleState());\n          break;\n        case \"name\":\n          project.setName(fullProject.getName());\n          break;\n        case \"parent\":\n          project.setParent(fullProject.getParent());\n          break;\n        case \"projectId\":\n          project.setProjectId(fullProject.getProjectId());\n          break;\n        case \"projectNumber\":\n          project.setProjectNumber(fullProject.getProjectNumber());\n          break;\n      }\n    }\n    return project;\n  }\n\n  synchronized Response replace(String projectId, Project project) {\n    Project originalProject = projects.get(projectId);\n    if (originalProject == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when replacing \" + projectId + \" because the project was not found.\");\n    } else if (!originalProject.getLifecycleState().equals(\"ACTIVE\")) {\n      return Error.FAILED_PRECONDITION.response(\n          \"Error when replacing \" + projectId + \" because the lifecycle state was not ACTIVE.\");\n    } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {\n      return Error.INVALID_ARGUMENT.response(\n          \"The server currently only supports setting the parent once \"\n              + \"and does not allow unsetting it.\");\n    }\n    project.setProjectId(projectId);\n    project.setLifecycleState(originalProject.getLifecycleState());\n    project.setCreateTime(originalProject.getCreateTime());\n    project.setProjectNumber(originalProject.getProjectNumber());\n    // replace cannot fail because both this method and removeProject are synchronized\n    projects.replace(projectId, project);\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(project));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + projectId);\n    }\n  }\n\n  synchronized Response undelete(String projectId) {\n    Project project = projects.get(projectId);\n    Response response;\n    if (project == null) {\n      response =\n          Error.PERMISSION_DENIED.response(\n              \"Error when undeleting \" + projectId + \" because the project was not found.\");\n    } else if (!project.getLifecycleState().equals(\"DELETE_REQUESTED\")) {\n      response =\n          Error.FAILED_PRECONDITION.response(\n              \"Error when undeleting \"\n                  + projectId\n                  + \" because the lifecycle state was not DELETE_REQUESTED.\");\n    } else {\n      project.setLifecycleState(\"ACTIVE\");\n      response = new Response(HTTP_OK, \"{}\");\n    }\n    return response;\n  }\n\n  synchronized Response getPolicy(String projectId) {\n    Policy policy = policies.get(projectId);\n    if (policy == null) {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(policy));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\n          \"Error when serializing the IAM policy for \" + projectId);\n    }\n  }\n\n  synchronized Response replacePolicy(String projectId, Policy policy) {\n    Policy originalPolicy = policies.get(projectId);\n    if (originalPolicy == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when replacing the policy for \"\n              + projectId\n              + \" because the project was not found.\");\n    }\n    String etag = policy.getEtag();\n    if (etag != null && !originalPolicy.getEtag().equals(etag)) {\n      return Error.ABORTED.response(\n          \"Policy etag mismatch when replacing the policy for project \"\n              + projectId\n              + \", please retry the read.\");\n    }\n    policy.setEtag(UUID.randomUUID().toString());\n    policy.setVersion(originalPolicy.getVersion());\n    policies.put(projectId, policy);\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(policy));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\n          \"Error when serializing the policy for project \" + projectId);\n    }\n  }\n\n  synchronized Response testPermissions(String projectId, List<String> permissions) {\n    if (!projects.containsKey(projectId)) {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n    try {\n      return new Response(\n          HTTP_OK,\n          jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\"Error when serializing permissions \" + permissions);\n    }\n  }\n\n  private LocalResourceManagerHelper() {\n    try {\n      server = HttpServer.create(new InetSocketAddress(0), 0);\n      port = server.getAddress().getPort();\n      server.createContext(CONTEXT, new RequestHandler());\n      server.createContext(OPERATION_CONTEXT, new OperationRequestHandler());\n    } catch (IOException e) {\n      throw new RuntimeException(\"Could not bind the mock Resource Manager server.\", e);\n    }\n  }\n\n  /**\n   * Creates a {@code LocalResourceManagerHelper} object that listens to requests on the local\n   * machine.\n   */\n  public static LocalResourceManagerHelper create() {\n    return new LocalResourceManagerHelper();\n  }\n\n  /**\n   * Returns a {@link ResourceManagerOptions} instance that sets the host to use the mock server.\n   */\n  public ResourceManagerOptions getOptions() {\n    return ResourceManagerOptions.newBuilder()\n        .setHost(\"http://localhost:\" + port)\n        .setCredentials(NoCredentials.getInstance())\n        .build();\n  }\n\n  /** Starts the thread that runs the Resource Manager server. */\n  public void start() {\n    server.start();\n  }\n\n  /** Stops the thread that runs the mock Resource Manager server. */\n  public void stop() {\n    server.stop(1);\n  }\n\n  /**\n   * Utility method to change the lifecycle state of the specified project.\n   *\n   * @return true if the lifecycle state was successfully updated, false otherwise\n   */\n  public synchronized boolean changeLifecycleState(String projectId, String lifecycleState) {\n    checkArgument(\n        \"ACTIVE\".equals(lifecycleState)\n            || \"DELETE_REQUESTED\".equals(lifecycleState)\n            || \"DELETE_IN_PROGRESS\".equals(lifecycleState),\n        \"Lifecycle state must be ACTIVE, DELETE_REQUESTED, or DELETE_IN_PROGRESS\");\n    Project project = projects.get(checkNotNull(projectId));\n    if (project != null) {\n      project.setLifecycleState(lifecycleState);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Utility method to remove the specified project.\n   *\n   * <p>This method can be used to fully remove a project (to mimic when the server completely\n   * deletes a project).\n   *\n   * @return true if the project was successfully deleted, false if the project didn't exist\n   */\n  public synchronized boolean removeProject(String projectId) {\n    // Because this method is synchronized, any code that relies on non-atomic read/write operations\n    // should not fail if that code is also synchronized.\n    policies.remove(checkNotNull(projectId));\n    return projects.remove(projectId) != null;\n  }\n}\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.cloud.Identity;\nimport com.google.cloud.Policy;\nimport com.google.cloud.Policy.Marshaller;\nimport com.google.cloud.Role;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Lists;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class PolicyMarshaller\n    extends Marshaller<com.google.api.services.cloudresourcemanager.model.Policy> {\n\n  static final PolicyMarshaller INSTANCE = new PolicyMarshaller();\n\n  private PolicyMarshaller() {}\n\n  private static class Builder extends Policy.Builder {\n\n    private Builder(Map<Role, Set<Identity>> bindings, String etag, Integer version) {\n      setBindings(bindings);\n      setEtag(etag);\n      if (version != null) {\n        setVersion(version);\n      }\n    }\n  }\n\n  @Override\n  protected Policy fromPb(com.google.api.services.cloudresourcemanager.model.Policy policyPb) {\n    Map<Role, Set<Identity>> bindings = new HashMap<>();\n    if (policyPb.getBindings() != null) {\n      for (Binding bindingPb : policyPb.getBindings()) {\n        bindings.put(\n            Role.of(bindingPb.getRole()),\n            ImmutableSet.copyOf(\n                Lists.transform(\n                    bindingPb.getMembers(),\n                    new Function<String, Identity>() {\n                      @Override\n                      public Identity apply(String s) {\n                        return IDENTITY_VALUE_OF_FUNCTION.apply(s);\n                      }\n                    })));\n      }\n    }\n    return new Builder(bindings, policyPb.getEtag(), policyPb.getVersion()).build();\n  }\n\n  @Override\n  protected com.google.api.services.cloudresourcemanager.model.Policy toPb(Policy policy) {\n    com.google.api.services.cloudresourcemanager.model.Policy policyPb =\n        new com.google.api.services.cloudresourcemanager.model.Policy();\n    List<Binding> bindingPbList = new LinkedList<>();\n    for (Map.Entry<Role, Set<Identity>> binding : policy.getBindings().entrySet()) {\n      Binding bindingPb = new Binding();\n      bindingPb.setRole(binding.getKey().getValue());\n      bindingPb.setMembers(\n          Lists.transform(\n              new ArrayList<>(binding.getValue()),\n              new Function<Identity, String>() {\n                @Override\n                public String apply(Identity identity) {\n                  return IDENTITY_STR_VALUE_FUNCTION.apply(identity);\n                }\n              }));\n      bindingPbList.add(bindingPb);\n    }\n    policyPb.setBindings(bindingPbList);\n    policyPb.setEtag(policy.getEtag());\n    policyPb.setVersion(policy.getVersion());\n    return policyPb;\n  }\n}\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.spi.v1beta1;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.MoreObjects.firstNonNull;\nimport static java.net.HttpURLConnection.HTTP_FORBIDDEN;\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.core.ApiClock;\nimport com.google.api.gax.retrying.ResultRetryAlgorithm;\nimport com.google.api.gax.retrying.RetrySettings;\nimport com.google.api.gax.retrying.TimedAttemptSettings;\nimport com.google.api.services.cloudresourcemanager.CloudResourceManager;\nimport com.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse;\nimport com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse;\nimport com.google.api.services.cloudresourcemanager.model.ListProjectsResponse;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.Status;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest;\nimport com.google.cloud.RetryHelper;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.http.BaseHttpServiceException;\nimport com.google.cloud.http.HttpTransportOptions;\nimport com.google.cloud.resourcemanager.ResourceManagerException;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.Callable;\nimport org.threeten.bp.Duration;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\npublic class HttpResourceManagerRpc implements ResourceManagerRpc {\n\n  private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();\n\n  // See doc of create() for more details:\n  // https://developers.google.com/resources/api-libraries/documentation/cloudresourcemanager/v1/java/latest/com/google/api/services/cloudresourcemanager/CloudResourceManager.Projects.html#create(com.google.api.services.cloudresourcemanager.model.Project)\n  private static final RetrySettings CREATE_RETRY_SETTINGS =\n      RetrySettings.newBuilder()\n          // SLO permits 30s at 90th percentile, 4x it for total limit.\n          // Observed latency is much lower: 11s at 95th percentile.\n          .setTotalTimeout(Duration.ofMinutes(2))\n          // Linked doc recommends polling at 5th second.\n          .setInitialRetryDelay(Duration.ofSeconds(5))\n          .setRetryDelayMultiplier(1.5)\n          // Observed P95 latency is 11s. We probably shouldn't sleep longer than this.\n          .setMaxRetryDelay(Duration.ofSeconds(11))\n          .setJittered(true)\n          .setInitialRpcTimeout(Duration.ofSeconds(5))\n          .setMaxRpcTimeout(Duration.ofSeconds(5))\n          .build();\n\n  // reference: https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  private static final ImmutableMap<Integer, Integer> RPC_TO_HTTP_CODES =\n      ImmutableMap.<Integer, Integer>builder()\n          .put(0, 200)\n          .put(1, 499)\n          .put(2, 500)\n          .put(3, 400)\n          .put(4, 504)\n          .put(5, 404)\n          .put(6, 409)\n          .put(7, 403)\n          .put(16, 401)\n          .put(8, 429)\n          .put(9, 400)\n          .put(10, 409)\n          .put(11, 400)\n          .put(12, 501)\n          .put(13, 500)\n          .put(14, 503)\n          .put(15, 500)\n          .build();\n\n  private static final ResultRetryAlgorithm<Operation> OPERATION_HANDLER =\n      new ResultRetryAlgorithm<Operation>() {\n        @Override\n        public TimedAttemptSettings createNextAttempt(\n            Throwable prevThrowable, Operation prevResponse, TimedAttemptSettings prevSettings) {\n          return null;\n        }\n\n        @Override\n        public boolean shouldRetry(Throwable prevThrowable, Operation prevOp) {\n          if (prevThrowable == null) {\n            return prevOp.getDone() == null || !prevOp.getDone();\n          }\n          return prevThrowable instanceof ResourceManagerException\n              && ((ResourceManagerException) prevThrowable).isRetryable();\n        }\n      };\n\n  private final CloudResourceManager resourceManager;\n  private final ApiClock clock;\n\n  public HttpResourceManagerRpc(ResourceManagerOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    resourceManager =\n        new CloudResourceManager.Builder(transport, JSON_FACTORY, initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    clock = options.getClock();\n  }\n\n  private static ResourceManagerException translate(IOException exception) {\n    return new ResourceManagerException(exception);\n  }\n\n  private static ResourceManagerException translate(Status status) {\n    Integer code = RPC_TO_HTTP_CODES.get(status.getCode());\n    if (code == null) {\n      code = BaseHttpServiceException.UNKNOWN_CODE;\n    }\n    return new ResourceManagerException(code, status.getMessage());\n  }\n\n  @Override\n  public Project create(Project project) {\n    final Operation operation;\n    try {\n      operation = resourceManager.projects().create(project).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n\n    Operation finishedOp =\n        runWithRetries(\n            new Callable<Operation>() {\n              @Override\n              public Operation call() {\n                try {\n                  return resourceManager.operations().get(operation.getName()).execute();\n                } catch (IOException ex) {\n                  throw translate(ex);\n                }\n              }\n            },\n            CREATE_RETRY_SETTINGS,\n            OPERATION_HANDLER,\n            clock);\n    if (finishedOp.getError() != null) {\n      throw translate(finishedOp.getError());\n    }\n\n    // NOTE(pongad): Operation.getResponse() returns a Map<String, Object>.\n    // 1. `(Project) finishedOp.getResponse()` doesn't work,\n    // because JSON deserializer in execute() didn't know to create a Project object.\n    // 2. `new Project().putAll(finishedOp.getResponse())` doesn't work either.\n    // 64-bit integers are sent as strings in JSON,\n    // so execute(), not knowing the type, parses it as String, not Long.\n    try {\n      String responseTxt = JSON_FACTORY.toString(finishedOp.getResponse());\n      return JSON_FACTORY.fromString(responseTxt, Project.class);\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public void delete(String projectId) {\n    try {\n      resourceManager.projects().delete(projectId).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Project get(String projectId, Map<Option, ?> options) {\n    try {\n      return resourceManager\n          .projects()\n          .get(projectId)\n          .setFields(Option.FIELDS.getString(options))\n          .execute();\n    } catch (IOException ex) {\n      ResourceManagerException translated = translate(ex);\n      if (translated.getCode() == HTTP_FORBIDDEN || translated.getCode() == HTTP_NOT_FOUND) {\n        // Service can return either 403 or 404 to signify that the project doesn't exist.\n        return null;\n      } else {\n        throw translated;\n      }\n    }\n  }\n\n  @Override\n  public Tuple<String, Iterable<Project>> list(Map<Option, ?> options) {\n    try {\n      ListProjectsResponse response =\n          resourceManager\n              .projects()\n              .list()\n              .setFields(Option.FIELDS.getString(options))\n              .setFilter(Option.FILTER.getString(options))\n              .setPageSize(Option.PAGE_SIZE.getInt(options))\n              .setPageToken(Option.PAGE_TOKEN.getString(options))\n              .execute();\n      return Tuple.<String, Iterable<Project>>of(\n          response.getNextPageToken(), response.getProjects());\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public void undelete(String projectId) {\n    try {\n      resourceManager.projects().undelete(projectId, new UndeleteProjectRequest()).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Project replace(Project project) {\n    try {\n      return resourceManager.projects().update(project.getProjectId(), project).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(String projectId) throws ResourceManagerException {\n    try {\n      return resourceManager\n          .projects()\n          .getIamPolicy(projectId, new GetIamPolicyRequest())\n          .execute();\n    } catch (IOException ex) {\n      ResourceManagerException translated = translate(ex);\n      if (translated.getCode() == HTTP_FORBIDDEN) {\n        // Service returns permission denied if policy doesn't exist.\n        return null;\n      } else {\n        throw translated;\n      }\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(String projectId, Policy newPolicy) throws ResourceManagerException {\n    try {\n      return resourceManager\n          .projects()\n          .setIamPolicy(projectId, new SetIamPolicyRequest().setPolicy(newPolicy))\n          .execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(String projectId, List<String> permissions)\n      throws ResourceManagerException {\n    try {\n      TestIamPermissionsResponse response =\n          resourceManager\n              .projects()\n              .testIamPermissions(\n                  projectId, new TestIamPermissionsRequest().setPermissions(permissions))\n              .execute();\n      Set<String> permissionsOwned =\n          ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));\n      ImmutableList.Builder<Boolean> answer = ImmutableList.builder();\n      for (String p : permissions) {\n        answer.add(permissionsOwned.contains(p));\n      }\n      return answer.build();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)\n      throws IOException {\n    try {\n      TestIamPermissionsResponse response =\n          resourceManager\n              .organizations()\n              .testIamPermissions(\n                  resource, new TestIamPermissionsRequest().setPermissions(permissions))\n              .execute();\n      Set<String> permissionsOwned =\n          ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));\n      ImmutableMap.Builder<String, Boolean> answer = ImmutableMap.builder();\n      for (String permission : permissions) {\n        answer.put(permission, permissionsOwned.contains(permission));\n      }\n      return answer.build();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException {\n    try {\n      resourceManager\n          .folders()\n          .clearOrgPolicy(\n              resource,\n              new ClearOrgPolicyRequest()\n                  .setConstraint(orgPolicy.getConstraint())\n                  .setEtag(orgPolicy.getEtag()))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .getEffectiveOrgPolicy(\n              resource, new GetEffectiveOrgPolicyRequest().setConstraint(constraint))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .getOrgPolicy(resource, new GetOrgPolicyRequest().setConstraint(constraint))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public ListResult<Constraint> listAvailableOrgPolicyConstraints(\n      String resource, Map<Option, ?> options) throws IOException {\n    try {\n      ListAvailableOrgPolicyConstraintsResponse response =\n          resourceManager\n              .folders()\n              .listAvailableOrgPolicyConstraints(\n                  resource,\n                  new ListAvailableOrgPolicyConstraintsRequest()\n                      .setPageSize(Option.PAGE_SIZE.getInt(options))\n                      .setPageToken(Option.PAGE_TOKEN.getString(options)))\n              .execute();\n      return ListResult.of(response.getNextPageToken(), response.getConstraints());\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options)\n      throws IOException {\n    try {\n      ListOrgPoliciesResponse response =\n          resourceManager\n              .folders()\n              .listOrgPolicies(\n                  resource,\n                  new ListOrgPoliciesRequest()\n                      .setPageSize(Option.PAGE_SIZE.getInt(options))\n                      .setPageToken(Option.PAGE_TOKEN.getString(options)))\n              .execute();\n      return ListResult.of(response.getNextPageToken(), response.getPolicies());\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .setOrgPolicy(resource, new SetOrgPolicyRequest().setPolicy(orgPolicy))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java": {
                        "19": {
                            "lines": [
                                {
                                    "line_no": 18,
                                    "content": ""
                                },
                                {
                                    "line_no": 19,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Constraint;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[19,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "20": {
                            "lines": [
                                {
                                    "line_no": 19,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Constraint;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 21,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[20,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "21": {
                            "lines": [
                                {
                                    "line_no": 20,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 21,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Policy;"
                                },
                                {
                                    "line_no": 22,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[21,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Policy;"
                                },
                                {
                                    "line_no": 22,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Project;"
                                },
                                {
                                    "line_no": 23,
                                    "content": "import com.google.cloud.ServiceRpc;"
                                }
                            ],
                            "error_texts": [
                                "[22,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "92": {
                            "lines": [
                                {
                                    "line_no": 91,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 92,
                                    "content": "  Project create(Project project);"
                                },
                                {
                                    "line_no": 93,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[92,3] cannot find symbol\n",
                                "[92,18] cannot find symbol\nsymbol: class Project\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[92,18] cannot find symbol\n",
                                "[92,3] cannot find symbol\nsymbol: class Project\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n"
                            ]
                        },
                        "107": {
                            "lines": [
                                {
                                    "line_no": 106,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 107,
                                    "content": "  Project get(String projectId, Map<Option, ?> options);"
                                },
                                {
                                    "line_no": 108,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[107,3] cannot find symbol\nsymbol: class Project\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[107,3] cannot find symbol\n"
                            ]
                        },
                        "114": {
                            "lines": [
                                {
                                    "line_no": 113,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 114,
                                    "content": "  Tuple<String, Iterable<Project>> list(Map<Option, ?> options);"
                                },
                                {
                                    "line_no": 115,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[114,26] cannot find symbol\n",
                                "[114,26] cannot find symbol\nsymbol: class Project\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n"
                            ]
                        },
                        "131": {
                            "lines": [
                                {
                                    "line_no": 130,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 131,
                                    "content": "  Project replace(Project project);"
                                },
                                {
                                    "line_no": 132,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[131,3] cannot find symbol\n",
                                "[131,19] cannot find symbol\nsymbol: class Project\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[131,3] cannot find symbol\nsymbol: class Project\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[131,19] cannot find symbol\n"
                            ]
                        },
                        "138": {
                            "lines": [
                                {
                                    "line_no": 137,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 138,
                                    "content": "  Policy getPolicy(String projectId);"
                                },
                                {
                                    "line_no": 139,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[138,3] cannot find symbol\n",
                                "[138,3] cannot find symbol\nsymbol: class Policy\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n"
                            ]
                        },
                        "145": {
                            "lines": [
                                {
                                    "line_no": 144,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 145,
                                    "content": "  Policy replacePolicy(String projectId, Policy newPolicy);"
                                },
                                {
                                    "line_no": 146,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[145,3] cannot find symbol\nsymbol: class Policy\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[145,42] cannot find symbol\n",
                                "[145,42] cannot find symbol\nsymbol: class Policy\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[145,3] cannot find symbol\n"
                            ]
                        },
                        "167": {
                            "lines": [
                                {
                                    "line_no": 166,
                                    "content": "  /** Clears the Policy from a resource. */"
                                },
                                {
                                    "line_no": 167,
                                    "content": "  void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;"
                                },
                                {
                                    "line_no": 168,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[167,40] cannot find symbol\nsymbol: class OrgPolicy\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[167,40] cannot find symbol\n"
                            ]
                        },
                        "178": {
                            "lines": [
                                {
                                    "line_no": 177,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 178,
                                    "content": "  OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException;"
                                },
                                {
                                    "line_no": 179,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[178,3] cannot find symbol\nsymbol: class OrgPolicy\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[178,3] cannot find symbol\n"
                            ]
                        },
                        "189": {
                            "lines": [
                                {
                                    "line_no": 188,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 189,
                                    "content": "  OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException;"
                                },
                                {
                                    "line_no": 190,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[189,3] cannot find symbol\n",
                                "[189,3] cannot find symbol\nsymbol: class OrgPolicy\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n"
                            ]
                        },
                        "196": {
                            "lines": [
                                {
                                    "line_no": 195,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 196,
                                    "content": "  ListResult<Constraint> listAvailableOrgPolicyConstraints(String resource, Map<Option, ?> options)"
                                },
                                {
                                    "line_no": 197,
                                    "content": "      throws IOException;"
                                }
                            ],
                            "error_texts": [
                                "[196,14] cannot find symbol\nsymbol: class Constraint\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[196,14] cannot find symbol\n"
                            ]
                        },
                        "204": {
                            "lines": [
                                {
                                    "line_no": 203,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 204,
                                    "content": "  ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options) throws IOException;"
                                },
                                {
                                    "line_no": 205,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[204,14] cannot find symbol\nsymbol: class OrgPolicy\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[204,14] cannot find symbol\n"
                            ]
                        },
                        "214": {
                            "lines": [
                                {
                                    "line_no": 213,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 214,
                                    "content": "  OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;"
                                },
                                {
                                    "line_no": 215,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[214,3] cannot find symbol\n",
                                "[214,47] cannot find symbol\nsymbol: class OrgPolicy\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n",
                                "[214,47] cannot find symbol\n",
                                "[214,3] cannot find symbol\nsymbol: class OrgPolicy\nlocation: interface com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java": {
                        "18": {
                            "lines": [
                                {
                                    "line_no": 17,
                                    "content": ""
                                },
                                {
                                    "line_no": 18,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.BooleanPolicy;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[18,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "19": {
                            "lines": [
                                {
                                    "line_no": 18,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.BooleanPolicy;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListPolicy;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[19,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "20": {
                            "lines": [
                                {
                                    "line_no": 19,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListPolicy;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 21,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.RestoreDefault;"
                                }
                            ],
                            "error_texts": [
                                "[20,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "21": {
                            "lines": [
                                {
                                    "line_no": 20,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 21,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.RestoreDefault;"
                                },
                                {
                                    "line_no": 22,
                                    "content": "import com.google.common.base.Function;"
                                }
                            ],
                            "error_texts": [
                                "[21,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": ""
                                },
                                {
                                    "line_no": 38,
                                    "content": "  static final Function<OrgPolicy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION ="
                                },
                                {
                                    "line_no": 39,
                                    "content": "      new Function<OrgPolicy, OrgPolicyInfo>() {"
                                }
                            ],
                            "error_texts": [
                                "[38,25] cannot find symbol\n",
                                "[38,25] cannot find symbol\nsymbol: class OrgPolicy\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo\n"
                            ]
                        },
                        "45": {
                            "lines": [
                                {
                                    "line_no": 44,
                                    "content": "      };"
                                },
                                {
                                    "line_no": 45,
                                    "content": "  static final Function<OrgPolicyInfo, OrgPolicy> TO_PROTOBUF_FUNCTION ="
                                },
                                {
                                    "line_no": 46,
                                    "content": "      new Function<OrgPolicyInfo, OrgPolicy>() {"
                                }
                            ],
                            "error_texts": [
                                "[45,40] cannot find symbol\n",
                                "[45,40] cannot find symbol\nsymbol: class OrgPolicy\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo\n"
                            ]
                        },
                        "57": {
                            "lines": [
                                {
                                    "line_no": 56,
                                    "content": "  private Policies policies;"
                                },
                                {
                                    "line_no": 57,
                                    "content": "  private RestoreDefault restoreDefault;"
                                },
                                {
                                    "line_no": 58,
                                    "content": "  private String updateTime;"
                                }
                            ],
                            "error_texts": [
                                "[57,11] cannot find symbol\nsymbol: class RestoreDefault\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo\n",
                                "[57,11] cannot find symbol\n"
                            ]
                        },
                        "312": {
                            "lines": [
                                {
                                    "line_no": 311,
                                    "content": "  /** Restores the default behavior of the constraint. */"
                                },
                                {
                                    "line_no": 312,
                                    "content": "  public RestoreDefault getRestoreDefault() {"
                                },
                                {
                                    "line_no": 313,
                                    "content": "    return restoreDefault;"
                                }
                            ],
                            "error_texts": [
                                "[312,10] cannot find symbol\n",
                                "[312,10] cannot find symbol\nsymbol: class RestoreDefault\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo\n"
                            ]
                        },
                        "360": {
                            "lines": [
                                {
                                    "line_no": 359,
                                    "content": ""
                                },
                                {
                                    "line_no": 360,
                                    "content": "  OrgPolicy toProtobuf() {"
                                },
                                {
                                    "line_no": 361,
                                    "content": "    OrgPolicy orgPolicyProto = new OrgPolicy();"
                                }
                            ],
                            "error_texts": [
                                "[360,3] cannot find symbol\nsymbol: class OrgPolicy\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo\n",
                                "[360,3] cannot find symbol\n"
                            ]
                        },
                        "376": {
                            "lines": [
                                {
                                    "line_no": 375,
                                    "content": ""
                                },
                                {
                                    "line_no": 376,
                                    "content": "  static OrgPolicyInfo fromProtobuf(OrgPolicy orgPolicyProtobuf) {"
                                },
                                {
                                    "line_no": 377,
                                    "content": "    Builder builder = newBuilder();"
                                }
                            ],
                            "error_texts": [
                                "[376,37] cannot find symbol\n",
                                "[376,37] cannot find symbol\nsymbol: class OrgPolicy\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo\n"
                            ]
                        },
                        "225": {
                            "lines": [
                                {
                                    "line_no": 224,
                                    "content": "    private Policies policies;"
                                },
                                {
                                    "line_no": 225,
                                    "content": "    private RestoreDefault restoreDefault;"
                                },
                                {
                                    "line_no": 226,
                                    "content": "    private String updateTime;"
                                }
                            ],
                            "error_texts": [
                                "[225,13] cannot find symbol\nsymbol: class RestoreDefault\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo.Builder\n",
                                "[225,13] cannot find symbol\n"
                            ]
                        },
                        "261": {
                            "lines": [
                                {
                                    "line_no": 260,
                                    "content": ""
                                },
                                {
                                    "line_no": 261,
                                    "content": "    Builder setRestoreDefault(RestoreDefault restoreDefault) {"
                                },
                                {
                                    "line_no": 262,
                                    "content": "      this.restoreDefault = restoreDefault;"
                                }
                            ],
                            "error_texts": [
                                "[261,31] cannot find symbol\n",
                                "[261,31] cannot find symbol\nsymbol: class RestoreDefault\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo.Builder\n"
                            ]
                        },
                        "200": {
                            "lines": [
                                {
                                    "line_no": 199,
                                    "content": ""
                                },
                                {
                                    "line_no": 200,
                                    "content": "    ListPolicy toProtobuf() {"
                                },
                                {
                                    "line_no": 201,
                                    "content": "      return new ListPolicy()"
                                }
                            ],
                            "error_texts": [
                                "[200,5] cannot find symbol\nsymbol: class ListPolicy\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo.Policies\n",
                                "[200,5] cannot find symbol\n"
                            ]
                        },
                        "209": {
                            "lines": [
                                {
                                    "line_no": 208,
                                    "content": ""
                                },
                                {
                                    "line_no": 209,
                                    "content": "    static Policies fromProtobuf(ListPolicy listPolicy) {"
                                },
                                {
                                    "line_no": 210,
                                    "content": "      return new Policies("
                                }
                            ],
                            "error_texts": [
                                "[209,34] cannot find symbol\nsymbol: class ListPolicy\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo.Policies\n",
                                "[209,34] cannot find symbol\n"
                            ]
                        },
                        "96": {
                            "lines": [
                                {
                                    "line_no": 95,
                                    "content": ""
                                },
                                {
                                    "line_no": 96,
                                    "content": "    BooleanPolicy toProtobuf() {"
                                },
                                {
                                    "line_no": 97,
                                    "content": "      return new BooleanPolicy().setEnforced(enforce);"
                                }
                            ],
                            "error_texts": [
                                "[96,5] cannot find symbol\nsymbol: class BooleanPolicy\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo.BoolPolicy\n",
                                "[96,5] cannot find symbol\n"
                            ]
                        },
                        "100": {
                            "lines": [
                                {
                                    "line_no": 99,
                                    "content": ""
                                },
                                {
                                    "line_no": 100,
                                    "content": "    static BoolPolicy fromProtobuf(BooleanPolicy booleanPolicy) {"
                                },
                                {
                                    "line_no": 101,
                                    "content": "      return new BoolPolicy(booleanPolicy.getEnforced());"
                                }
                            ],
                            "error_texts": [
                                "[100,36] cannot find symbol\n",
                                "[100,36] cannot find symbol\nsymbol: class BooleanPolicy\nlocation: class com.google.cloud.resourcemanager.OrgPolicyInfo.BoolPolicy\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java": {
                        "18": {
                            "lines": [
                                {
                                    "line_no": 17,
                                    "content": ""
                                },
                                {
                                    "line_no": 18,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.BooleanConstraint;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Constraint;"
                                }
                            ],
                            "error_texts": [
                                "[18,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "19": {
                            "lines": [
                                {
                                    "line_no": 18,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.BooleanConstraint;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Constraint;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListConstraint;"
                                }
                            ],
                            "error_texts": [
                                "[19,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "20": {
                            "lines": [
                                {
                                    "line_no": 19,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Constraint;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListConstraint;"
                                },
                                {
                                    "line_no": 21,
                                    "content": "import com.google.common.base.Function;"
                                }
                            ],
                            "error_texts": [
                                "[20,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": ""
                                },
                                {
                                    "line_no": 35,
                                    "content": "  static final Function<Constraint, ConstraintInfo> FROM_PROTOBUF_FUNCTION ="
                                },
                                {
                                    "line_no": 36,
                                    "content": "      new Function<Constraint, ConstraintInfo>() {"
                                }
                            ],
                            "error_texts": [
                                "[35,25] cannot find symbol\n",
                                "[35,25] cannot find symbol\nsymbol: class Constraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo\n"
                            ]
                        },
                        "42": {
                            "lines": [
                                {
                                    "line_no": 41,
                                    "content": "      };"
                                },
                                {
                                    "line_no": 42,
                                    "content": "  static final Function<ConstraintInfo, Constraint> TO_PROTOBUF_FUNCTION ="
                                },
                                {
                                    "line_no": 43,
                                    "content": "      new Function<ConstraintInfo, Constraint>() {"
                                }
                            ],
                            "error_texts": [
                                "[42,41] cannot find symbol\nsymbol: class Constraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo\n",
                                "[42,41] cannot find symbol\n"
                            ]
                        },
                        "50": {
                            "lines": [
                                {
                                    "line_no": 49,
                                    "content": ""
                                },
                                {
                                    "line_no": 50,
                                    "content": "  private BooleanConstraint booleanConstraint;"
                                },
                                {
                                    "line_no": 51,
                                    "content": "  private String constraintDefault;"
                                }
                            ],
                            "error_texts": [
                                "[50,11] cannot find symbol\n",
                                "[50,11] cannot find symbol\nsymbol: class BooleanConstraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo\n"
                            ]
                        },
                        "198": {
                            "lines": [
                                {
                                    "line_no": 197,
                                    "content": "  /** Returns the boolean constraint to check whether the constraint is enforced or not. */"
                                },
                                {
                                    "line_no": 198,
                                    "content": "  public BooleanConstraint getBooleanConstraint() {"
                                },
                                {
                                    "line_no": 199,
                                    "content": "    return booleanConstraint;"
                                }
                            ],
                            "error_texts": [
                                "[198,10] cannot find symbol\nsymbol: class BooleanConstraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo\n",
                                "[198,10] cannot find symbol\n"
                            ]
                        },
                        "266": {
                            "lines": [
                                {
                                    "line_no": 265,
                                    "content": ""
                                },
                                {
                                    "line_no": 266,
                                    "content": "  Constraint toProtobuf() {"
                                },
                                {
                                    "line_no": 267,
                                    "content": "    Constraint constraintProto = new Constraint();"
                                }
                            ],
                            "error_texts": [
                                "[266,3] cannot find symbol\n",
                                "[266,3] cannot find symbol\nsymbol: class Constraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo\n"
                            ]
                        },
                        "280": {
                            "lines": [
                                {
                                    "line_no": 279,
                                    "content": ""
                                },
                                {
                                    "line_no": 280,
                                    "content": "  static ConstraintInfo fromProtobuf(Constraint constraintProtobuf) {"
                                },
                                {
                                    "line_no": 281,
                                    "content": "    Builder builder = newBuilder(constraintProtobuf.getName());"
                                }
                            ],
                            "error_texts": [
                                "[280,38] cannot find symbol\n",
                                "[280,38] cannot find symbol\nsymbol: class Constraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo\n"
                            ]
                        },
                        "125": {
                            "lines": [
                                {
                                    "line_no": 124,
                                    "content": "  static class Builder {"
                                },
                                {
                                    "line_no": 125,
                                    "content": "    private BooleanConstraint booleanConstraint;"
                                },
                                {
                                    "line_no": 126,
                                    "content": "    private String constraintDefault;"
                                }
                            ],
                            "error_texts": [
                                "[125,13] cannot find symbol\n",
                                "[125,13] cannot find symbol\nsymbol: class BooleanConstraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo.Builder\n"
                            ]
                        },
                        "147": {
                            "lines": [
                                {
                                    "line_no": 146,
                                    "content": ""
                                },
                                {
                                    "line_no": 147,
                                    "content": "    Builder setBooleanConstraint(BooleanConstraint booleanConstraint) {"
                                },
                                {
                                    "line_no": 148,
                                    "content": "      this.booleanConstraint = booleanConstraint;"
                                }
                            ],
                            "error_texts": [
                                "[147,34] cannot find symbol\nsymbol: class BooleanConstraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo.Builder\n",
                                "[147,34] cannot find symbol\n"
                            ]
                        },
                        "114": {
                            "lines": [
                                {
                                    "line_no": 113,
                                    "content": ""
                                },
                                {
                                    "line_no": 114,
                                    "content": "    ListConstraint toProtobuf() {"
                                },
                                {
                                    "line_no": 115,
                                    "content": "      return new ListConstraint().setSuggestedValue(suggestedValue).setSupportsUnder(supportsUnder);"
                                }
                            ],
                            "error_texts": [
                                "[114,5] cannot find symbol\nsymbol: class ListConstraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo.Constraints\n",
                                "[114,5] cannot find symbol\n"
                            ]
                        },
                        "118": {
                            "lines": [
                                {
                                    "line_no": 117,
                                    "content": ""
                                },
                                {
                                    "line_no": 118,
                                    "content": "    static Constraints fromProtobuf(ListConstraint listConstraint) {"
                                },
                                {
                                    "line_no": 119,
                                    "content": "      return new Constraints(listConstraint.getSuggestedValue(), listConstraint.getSupportsUnder());"
                                }
                            ],
                            "error_texts": [
                                "[118,37] cannot find symbol\n",
                                "[118,37] cannot find symbol\nsymbol: class ListConstraint\nlocation: class com.google.cloud.resourcemanager.ConstraintInfo.Constraints\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java": {
                        "283": {
                            "lines": [
                                {
                                    "line_no": 282,
                                    "content": "      ResourceManager resourceManager,"
                                },
                                {
                                    "line_no": 283,
                                    "content": "      com.google.api.services.cloudresourcemanager.model.Project answer) {"
                                },
                                {
                                    "line_no": 284,
                                    "content": "    ProjectInfo info = ProjectInfo.fromPb(answer);"
                                }
                            ],
                            "error_texts": [
                                "[283,57] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java": {
                        "146": {
                            "lines": [
                                {
                                    "line_no": 145,
                                    "content": ""
                                },
                                {
                                    "line_no": 146,
                                    "content": "    com.google.api.services.cloudresourcemanager.model.ResourceId toPb() {"
                                },
                                {
                                    "line_no": 147,
                                    "content": "      com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb ="
                                }
                            ],
                            "error_texts": [
                                "[146,55] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "155": {
                            "lines": [
                                {
                                    "line_no": 154,
                                    "content": "    static ResourceId fromPb("
                                },
                                {
                                    "line_no": 155,
                                    "content": "        com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb) {"
                                },
                                {
                                    "line_no": 156,
                                    "content": "      return new ResourceId(resourceIdPb.getId(), resourceIdPb.getType());"
                                }
                            ],
                            "error_texts": [
                                "[155,59] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "392": {
                            "lines": [
                                {
                                    "line_no": 391,
                                    "content": ""
                                },
                                {
                                    "line_no": 392,
                                    "content": "  com.google.api.services.cloudresourcemanager.model.Project toPb() {"
                                },
                                {
                                    "line_no": 393,
                                    "content": "    com.google.api.services.cloudresourcemanager.model.Project projectPb ="
                                }
                            ],
                            "error_texts": [
                                "[392,53] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "414": {
                            "lines": [
                                {
                                    "line_no": 413,
                                    "content": ""
                                },
                                {
                                    "line_no": 414,
                                    "content": "  static ProjectInfo fromPb(com.google.api.services.cloudresourcemanager.model.Project projectPb) {"
                                },
                                {
                                    "line_no": 415,
                                    "content": "    Builder builder ="
                                }
                            ],
                            "error_texts": [
                                "[414,79] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java": {
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import com.google.api.client.json.gson.GsonFactory;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Binding;"
                                },
                                {
                                    "line_no": 26,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Operation;"
                                }
                            ],
                            "error_texts": [
                                "[25,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "26": {
                            "lines": [
                                {
                                    "line_no": 25,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Binding;"
                                },
                                {
                                    "line_no": 26,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Operation;"
                                },
                                {
                                    "line_no": 27,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[26,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "27": {
                            "lines": [
                                {
                                    "line_no": 26,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Operation;"
                                },
                                {
                                    "line_no": 27,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Policy;"
                                },
                                {
                                    "line_no": 28,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[27,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "28": {
                            "lines": [
                                {
                                    "line_no": 27,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Policy;"
                                },
                                {
                                    "line_no": 28,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Project;"
                                },
                                {
                                    "line_no": 29,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[28,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "29": {
                            "lines": [
                                {
                                    "line_no": 28,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Project;"
                                },
                                {
                                    "line_no": 29,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 30,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;"
                                }
                            ],
                            "error_texts": [
                                "[29,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "30": {
                            "lines": [
                                {
                                    "line_no": 29,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 30,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;"
                                },
                                {
                                    "line_no": 31,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[30,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "31": {
                            "lines": [
                                {
                                    "line_no": 30,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;"
                                },
                                {
                                    "line_no": 31,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;"
                                },
                                {
                                    "line_no": 32,
                                    "content": "import com.google.cloud.NoCredentials;"
                                }
                            ],
                            "error_texts": [
                                "[31,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "126": {
                            "lines": [
                                {
                                    "line_no": 125,
                                    "content": "  private final HttpServer server;"
                                },
                                {
                                    "line_no": 126,
                                    "content": "  private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();"
                                },
                                {
                                    "line_no": 127,
                                    "content": "  private final Map<String, Policy> policies = new HashMap<>();"
                                }
                            ],
                            "error_texts": [
                                "[126,47] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n",
                                "[126,47] cannot find symbol\n"
                            ]
                        },
                        "127": {
                            "lines": [
                                {
                                    "line_no": 126,
                                    "content": "  private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();"
                                },
                                {
                                    "line_no": 127,
                                    "content": "  private final Map<String, Policy> policies = new HashMap<>();"
                                },
                                {
                                    "line_no": 128,
                                    "content": "  private final int port;"
                                }
                            ],
                            "error_texts": [
                                "[127,29] cannot find symbol\nsymbol: class Policy\nlocation: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n",
                                "[127,29] cannot find symbol\n"
                            ]
                        },
                        "388": {
                            "lines": [
                                {
                                    "line_no": 387,
                                    "content": ""
                                },
                                {
                                    "line_no": 388,
                                    "content": "  private static String checkForProjectErrors(Project project) {"
                                },
                                {
                                    "line_no": 389,
                                    "content": "    if (project.getProjectId() == null) {"
                                }
                            ],
                            "error_texts": [
                                "[388,47] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n",
                                "[388,47] cannot find symbol\n"
                            ]
                        },
                        "444": {
                            "lines": [
                                {
                                    "line_no": 443,
                                    "content": ""
                                },
                                {
                                    "line_no": 444,
                                    "content": "  synchronized Response create(Project project) {"
                                },
                                {
                                    "line_no": 445,
                                    "content": "    String customErrorMessage = checkForProjectErrors(project);"
                                }
                            ],
                            "error_texts": [
                                "[444,32] cannot find symbol\n",
                                "[444,32] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n"
                            ]
                        },
                        "569": {
                            "lines": [
                                {
                                    "line_no": 568,
                                    "content": ""
                                },
                                {
                                    "line_no": 569,
                                    "content": "  private static boolean includeProject(Project project, String[] filters) {"
                                },
                                {
                                    "line_no": 570,
                                    "content": "    if (filters == null) {"
                                }
                            ],
                            "error_texts": [
                                "[569,41] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n",
                                "[569,41] cannot find symbol\n"
                            ]
                        },
                        "604": {
                            "lines": [
                                {
                                    "line_no": 603,
                                    "content": ""
                                },
                                {
                                    "line_no": 604,
                                    "content": "  private static Project extractFields(Project fullProject, String[] fields) {"
                                },
                                {
                                    "line_no": 605,
                                    "content": "    if (fields == null) {"
                                }
                            ],
                            "error_texts": [
                                "[604,40] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n",
                                "[604,40] cannot find symbol\n",
                                "[604,18] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n",
                                "[604,18] cannot find symbol\n"
                            ]
                        },
                        "637": {
                            "lines": [
                                {
                                    "line_no": 636,
                                    "content": ""
                                },
                                {
                                    "line_no": 637,
                                    "content": "  synchronized Response replace(String projectId, Project project) {"
                                },
                                {
                                    "line_no": 638,
                                    "content": "    Project originalProject = projects.get(projectId);"
                                }
                            ],
                            "error_texts": [
                                "[637,51] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n",
                                "[637,51] cannot find symbol\n"
                            ]
                        },
                        "696": {
                            "lines": [
                                {
                                    "line_no": 695,
                                    "content": ""
                                },
                                {
                                    "line_no": 696,
                                    "content": "  synchronized Response replacePolicy(String projectId, Policy policy) {"
                                },
                                {
                                    "line_no": 697,
                                    "content": "    Policy originalPolicy = policies.get(projectId);"
                                }
                            ],
                            "error_texts": [
                                "[696,57] cannot find symbol\n",
                                "[696,57] cannot find symbol\nsymbol: class Policy\nlocation: class com.google.cloud.resourcemanager.testing.LocalResourceManagerHelper\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java": {
                        "32": {
                            "lines": [
                                {
                                    "line_no": 31,
                                    "content": "import com.google.api.gax.retrying.TimedAttemptSettings;"
                                },
                                {
                                    "line_no": 32,
                                    "content": "import com.google.api.services.cloudresourcemanager.CloudResourceManager;"
                                },
                                {
                                    "line_no": 33,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[32,52] package com.google.api.services.cloudresourcemanager does not exist\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "import com.google.api.services.cloudresourcemanager.CloudResourceManager;"
                                },
                                {
                                    "line_no": 33,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 34,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Constraint;"
                                }
                            ],
                            "error_texts": [
                                "[33,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 34,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Constraint;"
                                },
                                {
                                    "line_no": 35,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[34,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Constraint;"
                                },
                                {
                                    "line_no": 35,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[35,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 37,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[36,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 37,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 38,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest;"
                                }
                            ],
                            "error_texts": [
                                "[37,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 38,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest;"
                                },
                                {
                                    "line_no": 39,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[38,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest;"
                                },
                                {
                                    "line_no": 39,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse;"
                                },
                                {
                                    "line_no": 40,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest;"
                                }
                            ],
                            "error_texts": [
                                "[39,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "40": {
                            "lines": [
                                {
                                    "line_no": 39,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse;"
                                },
                                {
                                    "line_no": 40,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest;"
                                },
                                {
                                    "line_no": 41,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse;"
                                }
                            ],
                            "error_texts": [
                                "[40,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "41": {
                            "lines": [
                                {
                                    "line_no": 40,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest;"
                                },
                                {
                                    "line_no": 41,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse;"
                                },
                                {
                                    "line_no": 42,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListProjectsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[41,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "42": {
                            "lines": [
                                {
                                    "line_no": 41,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse;"
                                },
                                {
                                    "line_no": 42,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListProjectsResponse;"
                                },
                                {
                                    "line_no": 43,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Operation;"
                                }
                            ],
                            "error_texts": [
                                "[42,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.ListProjectsResponse;"
                                },
                                {
                                    "line_no": 43,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Operation;"
                                },
                                {
                                    "line_no": 44,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[43,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "44": {
                            "lines": [
                                {
                                    "line_no": 43,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Operation;"
                                },
                                {
                                    "line_no": 44,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 45,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[44,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "45": {
                            "lines": [
                                {
                                    "line_no": 44,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 45,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Policy;"
                                },
                                {
                                    "line_no": 46,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[45,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "46": {
                            "lines": [
                                {
                                    "line_no": 45,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Policy;"
                                },
                                {
                                    "line_no": 46,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Project;"
                                },
                                {
                                    "line_no": 47,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[46,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "47": {
                            "lines": [
                                {
                                    "line_no": 46,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Project;"
                                },
                                {
                                    "line_no": 47,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 48,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[47,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "48": {
                            "lines": [
                                {
                                    "line_no": 47,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 48,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 49,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Status;"
                                }
                            ],
                            "error_texts": [
                                "[48,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 49,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Status;"
                                },
                                {
                                    "line_no": 50,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;"
                                }
                            ],
                            "error_texts": [
                                "[49,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "50": {
                            "lines": [
                                {
                                    "line_no": 49,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.Status;"
                                },
                                {
                                    "line_no": 50,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;"
                                },
                                {
                                    "line_no": 51,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[50,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "51": {
                            "lines": [
                                {
                                    "line_no": 50,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;"
                                },
                                {
                                    "line_no": 51,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;"
                                },
                                {
                                    "line_no": 52,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest;"
                                }
                            ],
                            "error_texts": [
                                "[51,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "52": {
                            "lines": [
                                {
                                    "line_no": 51,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;"
                                },
                                {
                                    "line_no": 52,
                                    "content": "import com.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest;"
                                },
                                {
                                    "line_no": 53,
                                    "content": "import com.google.cloud.RetryHelper;"
                                }
                            ],
                            "error_texts": [
                                "[52,58] package com.google.api.services.cloudresourcemanager.model does not exist\n"
                            ]
                        },
                        "114": {
                            "lines": [
                                {
                                    "line_no": 113,
                                    "content": ""
                                },
                                {
                                    "line_no": 114,
                                    "content": "  private static final ResultRetryAlgorithm<Operation> OPERATION_HANDLER ="
                                },
                                {
                                    "line_no": 115,
                                    "content": "      new ResultRetryAlgorithm<Operation>() {"
                                }
                            ],
                            "error_texts": [
                                "[114,45] cannot find symbol\nsymbol: class Operation\nlocation: class com.google.cloud.resourcemanager.spi.v1beta1.HttpResourceManagerRpc\n",
                                "[114,45] cannot find symbol\n"
                            ]
                        },
                        "132": {
                            "lines": [
                                {
                                    "line_no": 131,
                                    "content": ""
                                },
                                {
                                    "line_no": 132,
                                    "content": "  private final CloudResourceManager resourceManager;"
                                },
                                {
                                    "line_no": 133,
                                    "content": "  private final ApiClock clock;"
                                }
                            ],
                            "error_texts": [
                                "[132,17] cannot find symbol\nsymbol: class CloudResourceManager\nlocation: class com.google.cloud.resourcemanager.spi.v1beta1.HttpResourceManagerRpc\n",
                                "[132,17] cannot find symbol\n"
                            ]
                        },
                        "151": {
                            "lines": [
                                {
                                    "line_no": 150,
                                    "content": ""
                                },
                                {
                                    "line_no": 151,
                                    "content": "  private static ResourceManagerException translate(Status status) {"
                                },
                                {
                                    "line_no": 152,
                                    "content": "    Integer code = RPC_TO_HTTP_CODES.get(status.getCode());"
                                }
                            ],
                            "error_texts": [
                                "[151,53] cannot find symbol\nsymbol: class Status\nlocation: class com.google.cloud.resourcemanager.spi.v1beta1.HttpResourceManagerRpc\n",
                                "[151,53] cannot find symbol\n"
                            ]
                        },
                        "160": {
                            "lines": [
                                {
                                    "line_no": 159,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 160,
                                    "content": "  public Project create(Project project) {"
                                },
                                {
                                    "line_no": 161,
                                    "content": "    final Operation operation;"
                                }
                            ],
                            "error_texts": [
                                "[160,25] cannot find symbol\n",
                                "[160,10] cannot find symbol\n",
                                "[160,25] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.spi.v1beta1.HttpResourceManagerRpc\n",
                                "[160,10] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.spi.v1beta1.HttpResourceManagerRpc\n"
                            ]
                        },
                        "211": {
                            "lines": [
                                {
                                    "line_no": 210,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 211,
                                    "content": "  public Project get(String projectId, Map<Option, ?> options) {"
                                },
                                {
                                    "line_no": 212,
                                    "content": "    try {"
                                }
                            ],
                            "error_texts": [
                                "[211,10] cannot find symbol\n",
                                "[211,10] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.spi.v1beta1.HttpResourceManagerRpc\n"
                            ]
                        },
                        "230": {
                            "lines": [
                                {
                                    "line_no": 229,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 230,
                                    "content": "  public Tuple<String, Iterable<Project>> list(Map<Option, ?> options) {"
                                },
                                {
                                    "line_no": 231,
                                    "content": "    try {"
                                }
                            ],
                            "error_texts": [
                                "[230,33] cannot find symbol\n",
                                "[230,33] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.spi.v1beta1.HttpResourceManagerRpc\n"
                            ]
                        },
                        "258": {
                            "lines": [
                                {
                                    "line_no": 257,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 258,
                                    "content": "  public Project replace(Project project) {"
                                },
                                {
                                    "line_no": 259,
                                    "content": "    try {"
                                }
                            ],
                            "error_texts": [
                                "[258,10] cannot find symbol\n",
                                "[258,26] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.spi.v1beta1.HttpResourceManagerRpc\n",
                                "[258,10] cannot find symbol\nsymbol: class Project\nlocation: class com.google.cloud.resourcemanager.spi.v1beta1.HttpResourceManagerRpc\n",
                                "[258,26] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 15041144383464952612
        },
        {
            "input": "```diff\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java\n@@ -18,0 +19,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;\n+import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;\n+import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n+import com.google.api.services.cloudresourcemanager.v3.model.RestoreDefault;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java\n@@ -283,0 +284,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java\n@@ -146,0 +147,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n+import com.google.api.services.cloudresourcemanager.v3.model.ResourceId;\n@@ -392,0 +396,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java\n@@ -19,0 +20,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n+import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java\n@@ -18,0 +19,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.BooleanConstraint;\n+import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n+import com.google.api.services.cloudresourcemanager.v3.model.ListConstraint;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java\n@@ -283,0 +284,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n+import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java\n@@ -25,0 +26,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Operation;\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java\n@@ -100,0 +101,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.Binding;\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n--- java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java\n+++ java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java\n@@ -32,0 +33,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.v3.model.Constraint;\n+import com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;\n@@ -36,0 +40,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;\n+import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;\n@@ -40,0 +48,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;\n+import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;\n+import com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;\n+import com.google.api.services.cloudresourcemanager.v3.model.Operation;\n@@ -44,0 +56,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\n+import com.google.api.services.cloudresourcemanager.v3.model.Policy;\n+import com.google.api.services.cloudresourcemanager.v3.model.Project;\n+import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;\n@@ -48,0 +64,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.v3.model.Status;\n+import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;\n+import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;\n@@ -52,0 +72,4 @@\n+import com.google.api.services.cloudresourcemanager.v3.model.UndeleteProjectRequest;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.BooleanPolicy;\nimport com.google.api.services.cloudresourcemanager.model.ListPolicy;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.RestoreDefault;\nimport com.google.common.base.Function;\nimport com.google.common.base.MoreObjects;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager organization policy metadata object.\n *\n * <p>Defines a Cloud Organization Policy which specifies constraints for configurations of Cloud\n * Platform resources.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class OrgPolicyInfo {\n\n  static final Function<OrgPolicy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =\n      new Function<OrgPolicy, OrgPolicyInfo>() {\n        @Override\n        public OrgPolicyInfo apply(OrgPolicy protobuf) {\n          return OrgPolicyInfo.fromProtobuf(protobuf);\n        }\n      };\n  static final Function<OrgPolicyInfo, OrgPolicy> TO_PROTOBUF_FUNCTION =\n      new Function<OrgPolicyInfo, OrgPolicy>() {\n        @Override\n        public OrgPolicy apply(OrgPolicyInfo orgPolicyInfo) {\n          return orgPolicyInfo.toProtobuf();\n        }\n      };\n\n  private BoolPolicy boolPolicy;\n  private String constraint;\n  private String etag;\n  private Policies policies;\n  private RestoreDefault restoreDefault;\n  private String updateTime;\n  private Integer version;\n\n  /** Used For boolean Constraints, whether to enforce the Constraint or not. */\n  static class BoolPolicy {\n\n    private final Boolean enforce;\n\n    BoolPolicy(Boolean enforce) {\n      this.enforce = enforce;\n    }\n\n    public boolean getEnforce() {\n      return enforce;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this).add(\"enforce\", getEnforce()).toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      BoolPolicy that = (BoolPolicy) o;\n      return Objects.equals(enforce, that.enforce);\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(enforce);\n    }\n\n    BooleanPolicy toProtobuf() {\n      return new BooleanPolicy().setEnforced(enforce);\n    }\n\n    static BoolPolicy fromProtobuf(BooleanPolicy booleanPolicy) {\n      return new BoolPolicy(booleanPolicy.getEnforced());\n    }\n  }\n\n  /**\n   * The organization ListPolicy object.\n   *\n   * <p>ListPolicy can define specific values and subtrees of Cloud Resource Manager resource\n   * hierarchy (Organizations, Folders, Projects) that are allowed or denied by setting the\n   * allowedValues and deniedValues fields. This is achieved by using the under: and optional is:\n   * prefixes. The under: prefix denotes resource subtree values. The is: prefix is used to denote\n   * specific values, and is required only if the value contains a \":\". Values prefixed with \"is:\"\n   * are treated the same as values with no prefix. Ancestry subtrees must be in one of the\n   * following formats: - \"projects/\", e.g. \"projects/tokyo-rain-123\" - \"folders/\", e.g.\n   * \"folders/1234\" - \"organizations/\", e.g. \"organizations/1234\" The supportsUnder field of the\n   * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues\n   * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are\n   * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues\n   * and deniedValues must be unset.\n   */\n  static class Policies {\n\n    private final String allValues;\n    private final List<String> allowedValues;\n    private final List<java.lang.String> deniedValues;\n    private final Boolean inheritFromParent;\n    private final String suggestedValue;\n\n    Policies(\n        String allValues,\n        List<String> allowedValues,\n        List<String> deniedValues,\n        Boolean inheritFromParent,\n        String suggestedValue) {\n      this.allValues = allValues;\n      this.allowedValues = allowedValues;\n      this.deniedValues = deniedValues;\n      this.inheritFromParent = inheritFromParent;\n      this.suggestedValue = suggestedValue;\n    }\n\n    /** Returns all the Values state of this policy. */\n    String getAllValues() {\n      return allValues;\n    }\n\n    /** Returns the list of allowed values of this resource */\n    List<String> getAllowedValues() {\n      return allowedValues;\n    }\n\n    /** Returns the list of denied values of this resource. */\n    List<String> getDeniedValues() {\n      return deniedValues;\n    }\n\n    /** Returns the inheritance behavior for this Policy */\n    Boolean getInheritFromParent() {\n      return inheritFromParent;\n    }\n\n    /** Returns the suggested value of this policy. */\n    String getSuggestedValue() {\n      return suggestedValue;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this)\n          .add(\"allValues\", getAllValues())\n          .add(\"allowedValues\", getAllowedValues())\n          .add(\"deniedValues\", getDeniedValues())\n          .add(\"inheritFromParent\", getInheritFromParent())\n          .add(\"suggestedValue\", getSuggestedValue())\n          .toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Policies policies = (Policies) o;\n      return Objects.equals(allValues, policies.allValues)\n          && Objects.equals(allowedValues, policies.allowedValues)\n          && Objects.equals(deniedValues, policies.deniedValues)\n          && Objects.equals(inheritFromParent, policies.inheritFromParent)\n          && Objects.equals(suggestedValue, policies.suggestedValue);\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(\n          allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);\n    }\n\n    ListPolicy toProtobuf() {\n      return new ListPolicy()\n          .setAllValues(allValues)\n          .setAllowedValues(allowedValues)\n          .setDeniedValues(deniedValues)\n          .setInheritFromParent(inheritFromParent)\n          .setSuggestedValue(suggestedValue);\n    }\n\n    static Policies fromProtobuf(ListPolicy listPolicy) {\n      return new Policies(\n          listPolicy.getAllValues(),\n          listPolicy.getAllowedValues(),\n          listPolicy.getDeniedValues(),\n          listPolicy.getInheritFromParent(),\n          listPolicy.getSuggestedValue());\n    }\n  }\n\n  /** Builder for {@code OrganizationPolicyInfo}. */\n  static class Builder {\n    private BoolPolicy boolPolicy;\n    private String constraint;\n    private String etag;\n    private Policies policies;\n    private RestoreDefault restoreDefault;\n    private String updateTime;\n    private Integer version;\n\n    Builder() {}\n\n    Builder(OrgPolicyInfo info) {\n      this.boolPolicy = info.boolPolicy;\n      this.constraint = info.constraint;\n      this.etag = info.etag;\n      this.policies = info.policies;\n      this.restoreDefault = info.restoreDefault;\n      this.updateTime = info.updateTime;\n      this.version = info.version;\n    }\n\n    Builder setBoolPolicy(BoolPolicy boolPolicy) {\n      this.boolPolicy = boolPolicy;\n      return this;\n    }\n\n    Builder setConstraint(String constraint) {\n      this.constraint = constraint;\n      return this;\n    }\n\n    Builder setEtag(String etag) {\n      this.etag = etag;\n      return this;\n    }\n\n    Builder setListPolicy(Policies policies) {\n      this.policies = policies;\n      return this;\n    }\n\n    Builder setRestoreDefault(RestoreDefault restoreDefault) {\n      this.restoreDefault = restoreDefault;\n      return this;\n    }\n\n    Builder setUpdateTime(String updateTime) {\n      this.updateTime = updateTime;\n      return this;\n    }\n\n    Builder setVersion(Integer version) {\n      this.version = version;\n      return this;\n    }\n\n    OrgPolicyInfo build() {\n      return new OrgPolicyInfo(this);\n    }\n  }\n\n  OrgPolicyInfo(Builder builder) {\n    this.boolPolicy = builder.boolPolicy;\n    this.constraint = builder.constraint;\n    this.etag = builder.etag;\n    this.policies = builder.policies;\n    this.restoreDefault = builder.restoreDefault;\n    this.updateTime = builder.updateTime;\n    this.version = builder.version;\n  }\n\n  /** Returns the boolean constraint to check whether the constraint is enforced or not. */\n  public BoolPolicy getBoolPolicy() {\n    return boolPolicy;\n  }\n\n  /** Returns the name of the Constraint. */\n  public String getConstraint() {\n    return constraint;\n  }\n\n  /** Returns the etag value of policy. */\n  public String getEtag() {\n    return etag;\n  }\n\n  /** Return the policies. */\n  public Policies getPolicies() {\n    return policies;\n  }\n\n  /** Restores the default behavior of the constraint. */\n  public RestoreDefault getRestoreDefault() {\n    return restoreDefault;\n  }\n\n  /** Returns the updated timestamp of policy. */\n  public String getUpdateTime() {\n    return updateTime;\n  }\n\n  /** Returns the version of the Policy, Default version is 0. */\n  public Integer getVersion() {\n    return version;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    OrgPolicyInfo policyInfo = (OrgPolicyInfo) o;\n    return Objects.equals(boolPolicy, policyInfo.boolPolicy)\n        && Objects.equals(constraint, policyInfo.constraint)\n        && Objects.equals(etag, policyInfo.etag)\n        && Objects.equals(policies, policyInfo.policies)\n        && Objects.equals(restoreDefault, policyInfo.restoreDefault)\n        && Objects.equals(updateTime, policyInfo.updateTime)\n        && Objects.equals(version, policyInfo.version);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);\n  }\n\n  /** Returns a builder for the {@link OrgPolicyInfo} object. */\n  public static Builder newBuilder() {\n    return new Builder();\n  }\n\n  /** Returns a builder for the {@link OrgPolicyInfo} object. */\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  OrgPolicy toProtobuf() {\n    OrgPolicy orgPolicyProto = new OrgPolicy();\n    if (boolPolicy != null) {\n      orgPolicyProto.setBooleanPolicy(boolPolicy.toProtobuf());\n    }\n    orgPolicyProto.setConstraint(constraint);\n    if (policies != null) {\n      orgPolicyProto.setListPolicy(policies.toProtobuf());\n    }\n    orgPolicyProto.setRestoreDefault(restoreDefault);\n    orgPolicyProto.setEtag(etag);\n    orgPolicyProto.setUpdateTime(updateTime);\n    orgPolicyProto.setVersion(version);\n    return orgPolicyProto;\n  }\n\n  static OrgPolicyInfo fromProtobuf(OrgPolicy orgPolicyProtobuf) {\n    Builder builder = newBuilder();\n    if (orgPolicyProtobuf.getBooleanPolicy() != null) {\n      builder.setBoolPolicy(BoolPolicy.fromProtobuf(orgPolicyProtobuf.getBooleanPolicy()));\n    }\n    builder.setConstraint(orgPolicyProtobuf.getConstraint());\n    if (orgPolicyProtobuf.getListPolicy() != null) {\n      builder.setListPolicy(Policies.fromProtobuf(orgPolicyProtobuf.getListPolicy()));\n    }\n    builder.setRestoreDefault(orgPolicyProtobuf.getRestoreDefault());\n    builder.setEtag(orgPolicyProtobuf.getEtag());\n    builder.setUpdateTime(orgPolicyProtobuf.getUpdateTime());\n    builder.setVersion(orgPolicyProtobuf.getVersion());\n    return builder.build();\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.RestoreDefault;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.cloud.Policy;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager project object.\n *\n * <p>A Project is a high-level Google Cloud Platform entity. It is a container for ACLs, APIs,\n * AppEngine Apps, VMs, and other Google Cloud Platform resources. This class' member variables are\n * immutable. Methods that change or update the underlying Project information return a new Project\n * instance. {@code Project} adds a layer of service-related functionality over {@link ProjectInfo}.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class Project extends ProjectInfo {\n\n  private static final long serialVersionUID = 6767630161335155133L;\n\n  private final ResourceManagerOptions options;\n  private transient ResourceManager resourceManager;\n\n  /** Builder for {@code Project}. */\n  public static class Builder extends ProjectInfo.Builder {\n    private final ResourceManager resourceManager;\n    private final ProjectInfo.BuilderImpl infoBuilder;\n\n    Builder(Project project) {\n      this.resourceManager = project.resourceManager;\n      this.infoBuilder = new ProjectInfo.BuilderImpl(project);\n    }\n\n    @Override\n    public Builder setName(String name) {\n      infoBuilder.setName(name);\n      return this;\n    }\n\n    @Override\n    public Builder setProjectId(String projectId) {\n      infoBuilder.setProjectId(projectId);\n      return this;\n    }\n\n    @Override\n    public Builder addLabel(String key, String value) {\n      infoBuilder.addLabel(key, value);\n      return this;\n    }\n\n    @Override\n    public Builder removeLabel(String key) {\n      infoBuilder.removeLabel(key);\n      return this;\n    }\n\n    @Override\n    public Builder clearLabels() {\n      infoBuilder.clearLabels();\n      return this;\n    }\n\n    @Override\n    public Builder setLabels(Map<String, String> labels) {\n      infoBuilder.setLabels(labels);\n      return this;\n    }\n\n    @Override\n    Builder setProjectNumber(Long projectNumber) {\n      infoBuilder.setProjectNumber(projectNumber);\n      return this;\n    }\n\n    @Override\n    Builder setState(State state) {\n      infoBuilder.setState(state);\n      return this;\n    }\n\n    @Override\n    Builder setCreateTimeMillis(Long createTimeMillis) {\n      infoBuilder.setCreateTimeMillis(createTimeMillis);\n      return this;\n    }\n\n    @Override\n    public Builder setParent(ResourceId parent) {\n      infoBuilder.setParent(parent);\n      return this;\n    }\n\n    @Override\n    public Project build() {\n      return new Project(resourceManager, infoBuilder);\n    }\n  }\n\n  Project(ResourceManager resourceManager, ProjectInfo.BuilderImpl infoBuilder) {\n    super(infoBuilder);\n    this.resourceManager = checkNotNull(resourceManager);\n    this.options = resourceManager.getOptions();\n  }\n\n  /** Returns the {@link ResourceManager} service object associated with this Project. */\n  public ResourceManager getResourceManager() {\n    return resourceManager;\n  }\n\n  /**\n   * Fetches the project's latest information. Returns {@code null} if the project does not exist.\n   *\n   * @return Project containing the project's updated metadata or {@code null} if not found\n   * @throws ResourceManagerException upon failure\n   */\n  public Project reload() {\n    return resourceManager.get(getProjectId());\n  }\n\n  /**\n   * Marks the project identified by the specified project ID for deletion.\n   *\n   * <p>This method will only affect the project if the following criteria are met:\n   *\n   * <ul>\n   *   <li>The project does not have a billing account associated with it.\n   *   <li>The project has a lifecycle state of {@link ProjectInfo.State#ACTIVE}.\n   * </ul>\n   *\n   * This method changes the project's lifecycle state from {@link ProjectInfo.State#ACTIVE} to\n   * {@link ProjectInfo.State#DELETE_REQUESTED}. The deletion starts at an unspecified time, at\n   * which point the lifecycle state changes to {@link ProjectInfo.State#DELETE_IN_PROGRESS}. Until\n   * the deletion completes, you can check the lifecycle state checked by retrieving the project\n   * with {@link ResourceManager#get}, and the project remains visible to {@link\n   * ResourceManager#list}. However, you cannot update the project. After the deletion completes,\n   * the project is not retrievable by the {@link ResourceManager#get} and {@link\n   * ResourceManager#list} methods. The caller must have modify permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/delete\">Cloud\n   *     Resource Manager delete</a>\n   */\n  public void delete() {\n    resourceManager.delete(getProjectId());\n  }\n\n  /**\n   * Restores the project identified by the specified project ID.\n   *\n   * <p>You can only use this method for a project that has a lifecycle state of {@link\n   * ProjectInfo.State#DELETE_REQUESTED}. After deletion starts, as indicated by a lifecycle state\n   * of {@link ProjectInfo.State#DELETE_IN_PROGRESS}, the project cannot be restored. The caller\n   * must have modify permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure (including when the project can't be restored)\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/undelete\">Cloud\n   *     Resource Manager undelete</a>\n   */\n  public void undelete() {\n    resourceManager.undelete(getProjectId());\n  }\n\n  /**\n   * Replaces the attributes of the project with the attributes of this project.\n   *\n   * <p>The caller must have modify permissions for this project.\n   *\n   * @return the Project representing the new project metadata\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/update\">Cloud\n   *     Resource Manager update</a>\n   */\n  public Project replace() {\n    return resourceManager.replace(this);\n  }\n\n  /**\n   * Returns the IAM access control policy for this project. Returns {@code null} if the resource\n   * does not exist or if you do not have adequate permission to view the project or get the policy.\n   *\n   * @return the IAM policy for the project\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/getIamPolicy\">\n   *     Resource Manager getIamPolicy</a>\n   */\n  public Policy getPolicy() {\n    return resourceManager.getPolicy(getProjectId());\n  }\n\n  /**\n   * Sets the IAM access control policy for this project. Replaces any existing policy. It is\n   * recommended that you use the read-modify-write pattern. See code samples and important details\n   * of replacing policies in the documentation for {@link ResourceManager#replacePolicy}.\n   *\n   * @return the newly set IAM policy for this project\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/setIamPolicy\">\n   *     Resource Manager setIamPolicy</a>\n   */\n  public Policy replacePolicy(Policy newPolicy) {\n    return resourceManager.replacePolicy(getProjectId(), newPolicy);\n  }\n\n  /**\n   * Returns the permissions that a caller has on this project. You typically don't call this method\n   * if you're using Google Cloud Platform directly to manage permissions. This method is intended\n   * for integration with your proprietary software, such as a customized graphical user interface.\n   * For example, the Cloud Platform Console tests IAM permissions internally to determine which UI\n   * should be available to the logged-in user. Each service that supports IAM lists the possible\n   * permissions; see the <i>Supported Cloud Platform services</i> page below for links to these\n   * lists.\n   *\n   * @return a list of booleans representing whether the caller has the permissions specified (in\n   *     the order of the given permissions)\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/testIamPermissions\">\n   *     Resource Manager testIamPermissions</a>\n   * @see <a href= \"https://cloud.google.com/iam/#supported_cloud_platform_services\">Supported Cloud\n   *     Platform Services</a>\n   */\n  List<Boolean> testPermissions(List<String> permissions) {\n    return resourceManager.testPermissions(getProjectId(), permissions);\n  }\n\n  @Override\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  @Override\n  public final boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null || !obj.getClass().equals(Project.class)) {\n      return false;\n    }\n    Project other = (Project) obj;\n    return Objects.equals(toPb(), other.toPb()) && Objects.equals(options, other.options);\n  }\n\n  @Override\n  public final int hashCode() {\n    return Objects.hash(super.hashCode(), options);\n  }\n\n  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n    in.defaultReadObject();\n    this.resourceManager = options.getService();\n  }\n\n  static Project fromPb(\n      ResourceManager resourceManager,\n      com.google.api.services.cloudresourcemanager.model.Project answer) {\n    ProjectInfo info = ProjectInfo.fromPb(answer);\n    return new Project(resourceManager, new ProjectInfo.BuilderImpl(info));\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.common.base.MoreObjects.firstNonNull;\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.api.client.util.Data;\nimport com.google.api.core.ApiFunction;\nimport com.google.cloud.StringEnumType;\nimport com.google.cloud.StringEnumValue;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\n\n/**\n * A Google Cloud Resource Manager project metadata object. A Project is a high-level Google Cloud\n * Platform entity. It is a container for ACLs, APIs, AppEngine Apps, VMs, and other Google Cloud\n * Platform resources.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class ProjectInfo implements Serializable {\n\n  public static final DateTimeFormatter DATE_TIME_FORMATTER =\n      DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC);\n  private static final long serialVersionUID = 9148970963697734236L;\n  private final String name;\n  private final String projectId;\n  private final Map<String, String> labels;\n  private final Long projectNumber;\n  private final State state;\n  private final Long createTimeMillis;\n  private final ResourceId parent;\n\n  /** The project lifecycle states. */\n  public static final class State extends StringEnumValue {\n    private static final long serialVersionUID = 869635563976629566L;\n\n    private static final ApiFunction<String, State> CONSTRUCTOR =\n        new ApiFunction<String, State>() {\n          @Override\n          public State apply(String constant) {\n            return new State(constant);\n          }\n        };\n\n    private static final StringEnumType<State> type = new StringEnumType(State.class, CONSTRUCTOR);\n\n    /** Only used/useful for distinguishing unset values. */\n    public static final State LIFECYCLE_STATE_UNSPECIFIED =\n        type.createAndRegister(\"LIFECYCLE_STATE_UNSPECIFIED\");\n\n    /** The normal and active state. */\n    public static final State ACTIVE = type.createAndRegister(\"ACTIVE\");\n\n    /**\n     * The project has been marked for deletion by the user or by the system (Google Cloud\n     * Platform). This can generally be reversed by calling {@link ResourceManager#undelete}.\n     */\n    public static final State DELETE_REQUESTED = type.createAndRegister(\"DELETE_REQUESTED\");\n\n    /**\n     * The process of deleting the project has begun. Reversing the deletion is no longer possible.\n     */\n    public static final State DELETE_IN_PROGRESS = type.createAndRegister(\"DELETE_IN_PROGRESS\");\n\n    private State(String constant) {\n      super(constant);\n    }\n\n    /**\n     * Get the State for the given String constant, and throw an exception if the constant is not\n     * recognized.\n     */\n    public static State valueOfStrict(String constant) {\n      return type.valueOfStrict(constant);\n    }\n\n    /** Get the State for the given String constant, and allow unrecognized values. */\n    public static State valueOf(String constant) {\n      return type.valueOf(constant);\n    }\n\n    /** Return the known values for State. */\n    public static State[] values() {\n      return type.values();\n    }\n  }\n\n  public static class ResourceId implements Serializable {\n\n    private static final long serialVersionUID = -325199985993344726L;\n\n    private final String id;\n    private final String type;\n\n    ResourceId(String id, String type) {\n      this.id = checkNotNull(id);\n      this.type = checkNotNull(type);\n    }\n\n    public static ResourceId of(String id, String type) {\n      return new ResourceId(checkNotNull(id), checkNotNull(type));\n    }\n\n    public String getId() {\n      return id;\n    }\n\n    public String getType() {\n      return type;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n      return obj instanceof ResourceId && Objects.equals(toPb(), ((ResourceId) obj).toPb());\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(id, type);\n    }\n\n    com.google.api.services.cloudresourcemanager.model.ResourceId toPb() {\n      com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb =\n          new com.google.api.services.cloudresourcemanager.model.ResourceId();\n      resourceIdPb.setId(id);\n      resourceIdPb.setType(type.toLowerCase());\n      return resourceIdPb;\n    }\n\n    static ResourceId fromPb(\n        com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb) {\n      return new ResourceId(resourceIdPb.getId(), resourceIdPb.getType());\n    }\n  }\n\n  /** Builder for {@code ProjectInfo}. */\n  public abstract static class Builder {\n\n    /**\n     * Set the user-assigned name of the project.\n     *\n     * <p>This field is optional and can remain unset. Allowed characters are: lowercase and\n     * uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point.\n     * This field can be changed after project creation.\n     */\n    public abstract Builder setName(String name);\n\n    /**\n     * Set the unique, user-assigned ID of the project.\n     *\n     * <p>The ID must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter.\n     * Trailing hyphens are prohibited. This field cannot be changed after the server creates the\n     * project.\n     */\n    public abstract Builder setProjectId(String projectId);\n\n    /**\n     * Add a label associated with this project.\n     *\n     * <p>See {@link #labels} for label restrictions.\n     */\n    public abstract Builder addLabel(String key, String value);\n\n    /** Remove a label associated with this project. */\n    public abstract Builder removeLabel(String key);\n\n    /** Clear the labels associated with this project. */\n    public abstract Builder clearLabels();\n\n    /**\n     * Set the labels associated with this project.\n     *\n     * <p>Label keys must be between 1 and 63 characters long and must conform to the following\n     * regular expression: [a-z]([-a-z0-9]*[a-z0-9])?. Label values must be between 0 and 63\n     * characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?. No\n     * more than 256 labels can be associated with a given resource. This field can be changed after\n     * project creation.\n     */\n    public abstract Builder setLabels(Map<String, String> labels);\n\n    abstract Builder setProjectNumber(Long projectNumber);\n\n    abstract Builder setState(State state);\n\n    abstract Builder setCreateTimeMillis(Long createTimeMillis);\n\n    public abstract Builder setParent(ResourceId parent);\n\n    public abstract ProjectInfo build();\n  }\n\n  static class BuilderImpl extends Builder {\n\n    private String name;\n    private String projectId;\n    private Map<String, String> labels = new HashMap<>();\n    private Long projectNumber;\n    private State state;\n    private Long createTimeMillis;\n    private ResourceId parent;\n\n    BuilderImpl(String projectId) {\n      this.projectId = projectId;\n    }\n\n    BuilderImpl(ProjectInfo info) {\n      this.name = info.name;\n      this.projectId = info.projectId;\n      this.labels.putAll(info.labels);\n      this.projectNumber = info.projectNumber;\n      this.state = info.state;\n      this.createTimeMillis = info.createTimeMillis;\n      this.parent = info.parent;\n    }\n\n    @Override\n    public Builder setName(String name) {\n      this.name = firstNonNull(name, Data.<String>nullOf(String.class));\n      return this;\n    }\n\n    @Override\n    public Builder setProjectId(String projectId) {\n      this.projectId = checkNotNull(projectId);\n      return this;\n    }\n\n    @Override\n    public Builder addLabel(String key, String value) {\n      this.labels.put(key, value);\n      return this;\n    }\n\n    @Override\n    public Builder removeLabel(String key) {\n      this.labels.remove(key);\n      return this;\n    }\n\n    @Override\n    public Builder clearLabels() {\n      this.labels.clear();\n      return this;\n    }\n\n    @Override\n    public Builder setLabels(Map<String, String> labels) {\n      this.labels = Maps.newHashMap(checkNotNull(labels));\n      return this;\n    }\n\n    @Override\n    Builder setProjectNumber(Long projectNumber) {\n      this.projectNumber = projectNumber;\n      return this;\n    }\n\n    @Override\n    Builder setState(State state) {\n      this.state = state;\n      return this;\n    }\n\n    @Override\n    Builder setCreateTimeMillis(Long createTimeMillis) {\n      this.createTimeMillis = createTimeMillis;\n      return this;\n    }\n\n    @Override\n    public Builder setParent(ResourceId parent) {\n      this.parent = parent;\n      return this;\n    }\n\n    @Override\n    public ProjectInfo build() {\n      return new ProjectInfo(this);\n    }\n  }\n\n  ProjectInfo(BuilderImpl builder) {\n    this.name = builder.name;\n    this.projectId = builder.projectId;\n    this.labels = ImmutableMap.copyOf(builder.labels);\n    this.projectNumber = builder.projectNumber;\n    this.state = builder.state;\n    this.createTimeMillis = builder.createTimeMillis;\n    this.parent = builder.parent;\n  }\n\n  /**\n   * Get the unique, user-assigned ID of the project.\n   *\n   * <p>This field cannot be changed after the server creates the project.\n   */\n  public String getProjectId() {\n    return projectId;\n  }\n\n  /**\n   * Get the user-assigned name of the project.\n   *\n   * <p>This field is optional, can remain unset, and can be changed after project creation.\n   */\n  public String getName() {\n    return Data.isNull(name) ? null : name;\n  }\n\n  /**\n   * Get number uniquely identifying the project.\n   *\n   * <p>This field is set by the server and is read-only.\n   */\n  public Long getProjectNumber() {\n    return projectNumber;\n  }\n\n  /** Get the immutable map of labels associated with this project. */\n  public Map<String, String> getLabels() {\n    return labels;\n  }\n\n  /**\n   * Get the project's lifecycle state.\n   *\n   * <p>This is a read-only field. To change the lifecycle state of your project, use the {@code\n   * delete} or {@code undelete} method.\n   */\n  public State getState() {\n    return state;\n  }\n\n  ResourceId getParent() {\n    return parent;\n  }\n\n  /**\n   * Get the project's creation time (in milliseconds).\n   *\n   * <p>This field is set by the server and is read-only.\n   */\n  public Long getCreateTimeMillis() {\n    return createTimeMillis;\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    return obj == this\n        || obj != null\n            && obj.getClass().equals(ProjectInfo.class)\n            && Objects.equals(toPb(), ((ProjectInfo) obj).toPb());\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(name, projectId, labels, projectNumber, state, createTimeMillis, parent);\n  }\n\n  public static Builder newBuilder(String id) {\n    return new BuilderImpl(id);\n  }\n\n  public Builder toBuilder() {\n    return new BuilderImpl(this);\n  }\n\n  com.google.api.services.cloudresourcemanager.model.Project toPb() {\n    com.google.api.services.cloudresourcemanager.model.Project projectPb =\n        new com.google.api.services.cloudresourcemanager.model.Project();\n    projectPb.setName(name);\n    projectPb.setProjectId(projectId);\n    projectPb.setLabels(labels);\n    projectPb.setProjectNumber(projectNumber);\n    if (state != null) {\n      projectPb.setLifecycleState(state.toString());\n    }\n    if (createTimeMillis != null) {\n      projectPb.setCreateTime(\n          DateTimeFormatter.ISO_DATE_TIME\n              .withZone(ZoneOffset.UTC)\n              .format(Instant.ofEpochMilli(createTimeMillis)));\n    }\n    if (parent != null) {\n      projectPb.setParent(parent.toPb());\n    }\n    return projectPb;\n  }\n\n  static ProjectInfo fromPb(com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n    Builder builder =\n        newBuilder(projectPb.getProjectId()).setProjectNumber(projectPb.getProjectNumber());\n    if (projectPb.getName() != null && !projectPb.getName().equals(\"Unnamed\")) {\n      builder.setName(projectPb.getName());\n    }\n    if (projectPb.getLabels() != null) {\n      builder.setLabels(projectPb.getLabels());\n    }\n    if (projectPb.getLifecycleState() != null) {\n      builder.setState(State.valueOf(projectPb.getLifecycleState()));\n    }\n    if (projectPb.getCreateTime() != null) {\n      builder.setCreateTimeMillis(\n          DATE_TIME_FORMATTER.parse(projectPb.getCreateTime(), Instant.FROM).toEpochMilli());\n    }\n    if (projectPb.getParent() != null) {\n      builder.setParent(ResourceId.fromPb(projectPb.getParent()));\n    }\n    return builder.build();\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\nimport com.google.api.services.cloudresourcemanager.v3.model.ResourceId;\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.spi.v1beta1;\n\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.cloud.ServiceRpc;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.ResourceManagerException;\nimport com.google.common.collect.ImmutableList;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\npublic interface ResourceManagerRpc extends ServiceRpc {\n\n  enum Option {\n    FILTER(\"filter\"),\n    FIELDS(\"fields\"),\n    PAGE_SIZE(\"pageSize\"),\n    PAGE_TOKEN(\"pageToken\");\n\n    private final String value;\n\n    Option(String value) {\n      this.value = value;\n    }\n\n    public String value() {\n      return value;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    <T> T get(Map<Option, ?> options) {\n      return (T) options.get(this);\n    }\n\n    String getString(Map<Option, ?> options) {\n      return get(options);\n    }\n\n    Integer getInt(Map<Option, ?> options) {\n      return get(options);\n    }\n  }\n\n  class ListResult<T> {\n\n    private final Iterable<T> results;\n    private final String pageToken;\n\n    ListResult(String pageToken, Iterable<T> results) {\n      this.results = ImmutableList.copyOf(results);\n      this.pageToken = pageToken;\n    }\n\n    public static <T> ListResult<T> of(String pageToken, Iterable<T> list) {\n      return new ListResult<>(pageToken, list);\n    }\n\n    public Iterable<T> results() {\n      return results;\n    }\n\n    public String pageToken() {\n      return pageToken;\n    }\n  }\n  /**\n   * Creates a new project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project create(Project project);\n\n  /**\n   * Marks the project identified by the specified project ID for deletion.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  void delete(String projectId);\n\n  /**\n   * Retrieves the project identified by the specified project ID. Returns {@code null} if the\n   * project is not found or if the user doesn't have read permissions for the project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project get(String projectId, Map<Option, ?> options);\n\n  /**\n   * Lists the projects visible to the current user.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Tuple<String, Iterable<Project>> list(Map<Option, ?> options);\n\n  /**\n   * Restores the project identified by the specified project ID. Undelete will only succeed if the\n   * project has a lifecycle state of {@code DELETE_REQUESTED} state. The caller must have modify\n   * permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  void undelete(String projectId);\n\n  /**\n   * Replaces the attributes of the project. The caller must have modify permissions for this\n   * project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project replace(Project project);\n\n  /**\n   * Returns the IAM policy associated with a project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Policy getPolicy(String projectId);\n\n  /**\n   * Replaces the IAM policy associated with the given project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Policy replacePolicy(String projectId, Policy newPolicy);\n\n  /**\n   * Tests whether the caller has the given permissions. Returns a list of booleans corresponding to\n   * whether or not the user has the permission in the same position of input list.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  List<Boolean> testPermissions(String projectId, List<String> permissions);\n\n  /**\n   * Tests whether the caller has the given permissions on the specified Organization. Returns the\n   * permissions and their results.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)\n      throws IOException;\n\n  // TODO(ajaykannan): implement \"Organization\" functionality when available (issue #319)\n\n  /** Clears the Policy from a resource. */\n  void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;\n\n  /**\n   * Gets the effective Policy on a resource.\n   *\n   * <p>This is the result of merging Policies in the resource hierarchy. The returned Policy does\n   * not have an etag set because it is a computed Policy across multiple resources. Subtrees of\n   * Resource Manager resource hierarchy with 'under:' prefix will not be expanded.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException;\n\n  /**\n   * Gets the Policy on a resource.\n   *\n   * <p>If no Policy is set on the resource, a Policy is returned with default values including\n   * POLICY_TYPE_NOT_SET for the policy_type oneof. The etag value can be used with\n   * projects.setOrgPolicy() to create or update a Policy during read-modify-write.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException;\n\n  /**\n   * Lists all the Constraints that can be applied on the specified resource.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  ListResult<Constraint> listAvailableOrgPolicyConstraints(String resource, Map<Option, ?> options)\n      throws IOException;\n\n  /**\n   * Lists all the Policies set for a particular resource.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options) throws IOException;\n\n  /**\n   * Updates the specified Policy on the resource. Creates a new Policy for that Constraint on the\n   * resource if one does not exist.\n   *\n   * <p>Not supplying an etag on the request Policy results in an unconditional write of the Policy.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.BooleanConstraint;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.ListConstraint;\nimport com.google.common.base.Function;\nimport com.google.common.base.MoreObjects;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager constraint metadata object.\n *\n * @see <a\n *     href=\"https://cloud.google.com/resource-manager/reference/rest/v1/ListAvailableOrgPolicyConstraintsResponse#Constraint\">Constraint</a>\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class ConstraintInfo {\n\n  static final Function<Constraint, ConstraintInfo> FROM_PROTOBUF_FUNCTION =\n      new Function<Constraint, ConstraintInfo>() {\n        @Override\n        public ConstraintInfo apply(Constraint protobuf) {\n          return ConstraintInfo.fromProtobuf(protobuf);\n        }\n      };\n  static final Function<ConstraintInfo, Constraint> TO_PROTOBUF_FUNCTION =\n      new Function<ConstraintInfo, Constraint>() {\n        @Override\n        public Constraint apply(ConstraintInfo constraintInfo) {\n          return constraintInfo.toProtobuf();\n        }\n      };\n\n  private BooleanConstraint booleanConstraint;\n  private String constraintDefault;\n  private String description;\n  private String displayName;\n  private Constraints constraints;\n  private String name;\n  private Integer version;\n\n  /**\n   * A Constraint that allows or disallows a list of string values, which are configured by an\n   * Organization's policy administrator with a Policy.\n   */\n  static class Constraints {\n\n    private final String suggestedValue;\n    private final Boolean supportsUnder;\n\n    Constraints(String suggestedValue, Boolean supportsUnder) {\n      this.suggestedValue = suggestedValue;\n      this.supportsUnder = supportsUnder;\n    }\n\n    /**\n     * The Google Cloud Console tries to default to a configuration that matches the value specified\n     * in this Constraint.\n     */\n    String getSuggestedValue() {\n      return suggestedValue;\n    }\n\n    /**\n     * Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in\n     * Policy.allowed_values and Policy.denied_values.\n     */\n    Boolean getSupportsUnder() {\n      return supportsUnder;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this)\n          .add(\"suggestedValue\", getSuggestedValue())\n          .add(\"supportsUnder\", getSupportsUnder())\n          .toString();\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(suggestedValue, supportsUnder);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Constraints that = (Constraints) o;\n      return Objects.equals(suggestedValue, that.suggestedValue)\n          && Objects.equals(supportsUnder, that.supportsUnder);\n    }\n\n    ListConstraint toProtobuf() {\n      return new ListConstraint().setSuggestedValue(suggestedValue).setSupportsUnder(supportsUnder);\n    }\n\n    static Constraints fromProtobuf(ListConstraint listConstraint) {\n      return new Constraints(listConstraint.getSuggestedValue(), listConstraint.getSupportsUnder());\n    }\n  }\n\n  /** Builder for {@code ConstraintInfo}. */\n  static class Builder {\n    private BooleanConstraint booleanConstraint;\n    private String constraintDefault;\n    private String description;\n    private String displayName;\n    private Constraints constraints;\n    private String name;\n    private Integer version;\n\n    Builder(String name) {\n      this.name = name;\n    }\n\n    Builder(ConstraintInfo info) {\n      this.booleanConstraint = info.booleanConstraint;\n      this.constraintDefault = info.constraintDefault;\n      this.description = info.description;\n      this.displayName = info.displayName;\n      this.constraints = info.constraints;\n      this.name = info.name;\n      this.version = info.version;\n    }\n\n    Builder setBooleanConstraint(BooleanConstraint booleanConstraint) {\n      this.booleanConstraint = booleanConstraint;\n      return this;\n    }\n\n    Builder setConstraintDefault(String constraintDefault) {\n      this.constraintDefault = constraintDefault;\n      return this;\n    }\n\n    Builder setDescription(String description) {\n      this.description = description;\n      return this;\n    }\n\n    Builder setDisplayName(String displayName) {\n      this.displayName = displayName;\n      return this;\n    }\n\n    Builder setConstraints(Constraints constraints) {\n      this.constraints = constraints;\n      return this;\n    }\n\n    Builder setName(String name) {\n      this.name = name;\n      return this;\n    }\n\n    Builder setVersion(Integer version) {\n      this.version = version;\n      return this;\n    }\n\n    ConstraintInfo build() {\n      return new ConstraintInfo(this);\n    }\n  }\n\n  ConstraintInfo(Builder builder) {\n    this.booleanConstraint = builder.booleanConstraint;\n    this.constraintDefault = builder.constraintDefault;\n    this.description = builder.description;\n    this.displayName = builder.displayName;\n    this.constraints = builder.constraints;\n    this.name = builder.name;\n    this.version = builder.version;\n  }\n\n  /** Returns the boolean constraint to check whether the constraint is enforced or not. */\n  public BooleanConstraint getBooleanConstraint() {\n    return booleanConstraint;\n  }\n\n  /** Returns the default behavior of the constraint. */\n  public String getConstraintDefault() {\n    return constraintDefault;\n  }\n\n  /** Returns the detailed description of the constraint. */\n  public String getDescription() {\n    return description;\n  }\n\n  /** Returns the human readable name of the constraint. */\n  public String getDisplayName() {\n    return displayName;\n  }\n\n  /** Returns the listConstraintInfo. */\n  public Constraints getConstraints() {\n    return constraints;\n  }\n\n  /** Returns the globally unique name of the constraint. */\n  public String getName() {\n    return name;\n  }\n\n  /** Returns the version of the Constraint. Default version is 0. */\n  public Integer getVersion() {\n    return version;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ConstraintInfo that = (ConstraintInfo) o;\n    return Objects.equals(booleanConstraint, that.booleanConstraint)\n        && Objects.equals(constraintDefault, that.constraintDefault)\n        && Objects.equals(description, that.description)\n        && Objects.equals(displayName, that.displayName)\n        && Objects.equals(constraints, that.constraints)\n        && Objects.equals(name, that.name)\n        && Objects.equals(version, that.version);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        booleanConstraint, constraintDefault, description, displayName, constraints, name, version);\n  }\n\n  /** Returns a builder for the {@link ConstraintInfo} object. */\n  public static Builder newBuilder(String name) {\n    return new Builder(name);\n  }\n\n  /** Returns a builder for the {@link ConstraintInfo} object. */\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  Constraint toProtobuf() {\n    Constraint constraintProto = new Constraint();\n    constraintProto.setBooleanConstraint(booleanConstraint);\n    constraintProto.setConstraintDefault(constraintDefault);\n    constraintProto.setDescription(description);\n    constraintProto.setDisplayName(displayName);\n    if (constraints != null) {\n      constraintProto.setListConstraint(constraints.toProtobuf());\n    }\n    constraintProto.setName(name);\n    constraintProto.setVersion(version);\n    return constraintProto;\n  }\n\n  static ConstraintInfo fromProtobuf(Constraint constraintProtobuf) {\n    Builder builder = newBuilder(constraintProtobuf.getName());\n    builder.setBooleanConstraint(constraintProtobuf.getBooleanConstraint());\n    builder.setConstraintDefault(constraintProtobuf.getConstraintDefault());\n    builder.setDescription(constraintProtobuf.getDescription());\n    builder.setDisplayName(constraintProtobuf.getDisplayName());\n    if (constraintProtobuf.getListConstraint() != null) {\n      builder.setConstraints(Constraints.fromProtobuf(constraintProtobuf.getListConstraint()));\n    }\n    if (constraintProtobuf.getName() != null && !constraintProtobuf.getName().equals(\"Unnamed\")) {\n      builder.setName(constraintProtobuf.getName());\n    }\n    builder.setVersion(constraintProtobuf.getVersion());\n    return builder.build();\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.BooleanConstraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListConstraint;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.Preconditions.checkArgument;\n\nimport com.google.api.gax.paging.Page;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.cloud.BaseService;\nimport com.google.cloud.PageImpl;\nimport com.google.cloud.PageImpl.NextPageFetcher;\nimport com.google.cloud.Policy;\nimport com.google.cloud.RetryHelper.RetryHelperException;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc.ListResult;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Maps;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class ResourceManagerImpl extends BaseService<ResourceManagerOptions>\n    implements ResourceManager {\n\n  private final ResourceManagerRpc resourceManagerRpc;\n\n  ResourceManagerImpl(ResourceManagerOptions options) {\n    super(options);\n    resourceManagerRpc = options.getResourceManagerRpcV1Beta1();\n  }\n\n  @Override\n  public Project create(final ProjectInfo project) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.create(project.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void delete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.delete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project get(final String projectId, ProjectGetOption... options) {\n    final Map<ResourceManagerRpc.Option, ?> optionsMap = optionMap(options);\n    try {\n      com.google.api.services.cloudresourcemanager.model.Project answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.get(projectId, optionsMap);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : Project.fromPb(this, answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ProjectPageFetcher implements NextPageFetcher<Project> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ProjectPageFetcher(\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<Project> getNextPage() {\n      return listProjects(serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<Project> list(ProjectListOption... options) {\n    return listProjects(getOptions(), optionMap(options));\n  }\n\n  private static Page<Project> listProjects(\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      Tuple<String, Iterable<com.google.api.services.cloudresourcemanager.model.Project>> result =\n          runWithRetries(\n              new Callable<\n                  Tuple<\n                      String,\n                      Iterable<com.google.api.services.cloudresourcemanager.model.Project>>>() {\n                @Override\n                public Tuple<\n                        String,\n                        Iterable<com.google.api.services.cloudresourcemanager.model.Project>>\n                    call() {\n                  return serviceOptions.getResourceManagerRpcV1Beta1().list(optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = result.x();\n      Iterable<Project> projects =\n          result.y() == null\n              ? ImmutableList.<Project>of()\n              : Iterables.transform(\n                  result.y(),\n                  new Function<\n                      com.google.api.services.cloudresourcemanager.model.Project, Project>() {\n                    @Override\n                    public Project apply(\n                        com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n                      return new Project(\n                          serviceOptions.getService(),\n                          new ProjectInfo.BuilderImpl(ProjectInfo.fromPb(projectPb)));\n                    }\n                  });\n      return new PageImpl<>(\n          new ProjectPageFetcher(serviceOptions, cursor, optionsMap), cursor, projects);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project replace(final ProjectInfo newProject) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.replace(newProject.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void undelete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.undelete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(final String projectId) {\n    try {\n      com.google.api.services.cloudresourcemanager.model.Policy answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.getPolicy(projectId);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : PolicyMarshaller.INSTANCE.fromPb(answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(final String projectId, final Policy newPolicy) {\n    try {\n      return PolicyMarshaller.INSTANCE.fromPb(\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.replacePolicy(\n                      projectId, PolicyMarshaller.INSTANCE.toPb(newPolicy));\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(final String projectId, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<List<Boolean>>() {\n            @Override\n            public List<Boolean> call() {\n              return resourceManagerRpc.testPermissions(projectId, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(\n      final String resource, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<Map<String, Boolean>>() {\n            @Override\n            public Map<String, Boolean> call() throws IOException {\n              return resourceManagerRpc.testOrgPermissions(resource, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() throws IOException {\n              resourceManagerRpc.clearOrgPolicy(resource, orgPolicy.toProtobuf());\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getEffectiveOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getEffectiveOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ConstraintPageFetcher implements NextPageFetcher<ConstraintInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ConstraintPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<ConstraintInfo> getNextPage() {\n      return listAvailableOrgPolicyConstraints(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      String resource, ListOption... options) {\n    return listAvailableOrgPolicyConstraints(resource, getOptions(), optionMap(options));\n  }\n\n  private static Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<Constraint> constraintList =\n          runWithRetries(\n              new Callable<ListResult<Constraint>>() {\n                @Override\n                public ListResult<Constraint> call() throws IOException {\n                  return rpc.listAvailableOrgPolicyConstraints(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = constraintList.pageToken();\n      Iterable<ConstraintInfo> constraints =\n          constraintList.results() == null\n              ? ImmutableList.<ConstraintInfo>of()\n              : Iterables.transform(\n                  constraintList.results(), ConstraintInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new ConstraintPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          constraints);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class OrgPolicyPageFetcher implements NextPageFetcher<OrgPolicyInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    OrgPolicyPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<OrgPolicyInfo> getNextPage() {\n      return listOrgPolicies(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<OrgPolicyInfo> listOrgPolicies(final String resource, ListOption... options) {\n    return listOrgPolicies(resource, getOptions(), optionMap(options));\n  }\n\n  private static PageImpl<OrgPolicyInfo> listOrgPolicies(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<OrgPolicy> orgPolicy =\n          runWithRetries(\n              new Callable<ListResult<OrgPolicy>>() {\n                @Override\n                public ListResult<OrgPolicy> call() throws IOException {\n                  return rpc.listOrgPolicies(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = orgPolicy.pageToken();\n      Iterable<OrgPolicyInfo> orgPolicies =\n          orgPolicy.results() == null\n              ? ImmutableList.<OrgPolicyInfo>of()\n              : Iterables.transform(orgPolicy.results(), OrgPolicyInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new OrgPolicyPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          orgPolicies);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo replaceOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.replaceOrgPolicy(resource, orgPolicy.toProtobuf());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private Map<ResourceManagerRpc.Option, ?> optionMap(Option... options) {\n    Map<ResourceManagerRpc.Option, Object> temp = Maps.newEnumMap(ResourceManagerRpc.Option.class);\n    for (Option option : options) {\n      Object prev = temp.put(option.getRpcOption(), option.getValue());\n      checkArgument(prev == null, \"Duplicate option %s\", option);\n    }\n    return ImmutableMap.copyOf(temp);\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.testing;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static java.net.HttpURLConnection.HTTP_OK;\n\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.cloud.NoCredentials;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Objects;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.io.ByteStreams;\nimport com.sun.net.httpserver.Headers;\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpServer;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.zip.GZIPInputStream;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\n\n/**\n * Utility to create a local Resource Manager mock for testing.\n *\n * <p>The mock runs in a separate thread, listening for HTTP requests on the local machine at an\n * ephemeral port. While this mock attempts to simulate the Cloud Resource Manager, there are some\n * divergences in behavior. The following is a non-exhaustive list of some of those behavioral\n * differences:\n *\n * <ul>\n *   <li>This mock assumes you have adequate permissions for any action. Related to this,\n *       <i>testIamPermissions</i> always indicates that the caller has all permissions listed in\n *       the request.\n *   <li>IAM policies are set to an empty policy with version 0 (only legacy roles supported) upon\n *       project creation. The actual service will not have an empty list of bindings and may also\n *       set your version to 1.\n *   <li>There is no input validation for the policy provided when replacing a policy or calling\n *       testIamPermissions.\n *   <li>In this mock, projects never move from the <i>DELETE_REQUESTED</i> lifecycle state to\n *       <i>DELETE_IN_PROGRESS</i> without an explicit call to the utility method {@link\n *       #changeLifecycleState}. Similarly, a project is never completely removed without an\n *       explicit call to the utility method {@link #removeProject}.\n *   <li>The messages in the error responses given by this mock do not necessarily match the\n *       messages given by the actual service.\n * </ul>\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\n@SuppressWarnings(\"restriction\")\npublic class LocalResourceManagerHelper {\n  private static final Logger log = Logger.getLogger(LocalResourceManagerHelper.class.getName());\n  private static final JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\n  private static final Random PROJECT_NUMBER_GENERATOR = new Random();\n  private static final String VERSION = \"v1\";\n  private static final String CONTEXT = \"/\" + VERSION + \"/projects\";\n  private static final String OPERATION_CONTEXT = \"/\" + VERSION + \"/operations\";\n  private static final URI BASE_CONTEXT;\n  private static final Set<String> SUPPORTED_COMPRESSION_ENCODINGS =\n      ImmutableSet.of(\"gzip\", \"x-gzip\");\n  private static final Pattern LIST_FIELDS_PATTERN =\n      Pattern.compile(\"(.*?)projects\\\\((.*?)\\\\)(.*?)\");\n  private static final String[] NO_FIELDS = {};\n\n  static {\n    try {\n      BASE_CONTEXT = new URI(CONTEXT);\n    } catch (URISyntaxException e) {\n      throw new RuntimeException(\n          \"Could not initialize LocalResourceManagerHelper due to URISyntaxException.\", e);\n    }\n  }\n\n  // see https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects\n  private static final Set<Character> PERMISSIBLE_PROJECT_NAME_PUNCTUATION =\n      ImmutableSet.of('-', '\\'', '\"', ' ', '!');\n\n  private final HttpServer server;\n  private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();\n  private final Map<String, Policy> policies = new HashMap<>();\n  private final int port;\n\n  private static class Response {\n    private final int code;\n    private final String body;\n\n    Response(int code, String body) {\n      this.code = code;\n      this.body = body;\n    }\n\n    int code() {\n      return code;\n    }\n\n    String body() {\n      return body;\n    }\n  }\n\n  private enum Error {\n    ABORTED(409, \"global\", \"aborted\", \"ABORTED\"),\n    ALREADY_EXISTS(409, \"global\", \"alreadyExists\", \"ALREADY_EXISTS\"),\n    PERMISSION_DENIED(403, \"global\", \"forbidden\", \"PERMISSION_DENIED\"),\n    FAILED_PRECONDITION(400, \"global\", \"failedPrecondition\", \"FAILED_PRECONDITION\"),\n    INVALID_ARGUMENT(400, \"global\", \"badRequest\", \"INVALID_ARGUMENT\"),\n    BAD_REQUEST(400, \"global\", \"badRequest\", \"BAD_REQUEST\"),\n    INTERNAL_ERROR(500, \"global\", \"internalError\", \"INTERNAL_ERROR\");\n\n    private final int code;\n    private final String domain;\n    private final String reason;\n    private final String status;\n\n    Error(int code, String domain, String reason, String status) {\n      this.code = code;\n      this.domain = domain;\n      this.reason = reason;\n      this.status = status;\n    }\n\n    Response response(String message) {\n      try {\n        return new Response(code, toJson(message));\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\"Error when generating JSON error response\");\n      }\n    }\n\n    private String toJson(String message) throws IOException {\n      Map<String, Object> errors = new HashMap<>();\n      errors.put(\"domain\", domain);\n      errors.put(\"message\", message);\n      errors.put(\"reason\", reason);\n      Map<String, Object> args = new HashMap<>();\n      args.put(\"errors\", ImmutableList.of(errors));\n      args.put(\"code\", code);\n      args.put(\"message\", message);\n      args.put(\"status\", status);\n      return jsonFactory.toString(ImmutableMap.of(\"error\", args));\n    }\n  }\n\n  private class RequestHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) {\n      // see https://cloud.google.com/resource-manager/reference/rest/\n      Response response;\n      String path = BASE_CONTEXT.relativize(exchange.getRequestURI()).getPath();\n      String requestMethod = exchange.getRequestMethod();\n      try {\n        switch (requestMethod) {\n          case \"POST\":\n            response = handlePost(exchange, path);\n            break;\n          case \"DELETE\":\n            response = delete(projectIdFromUri(path));\n            break;\n          case \"GET\":\n            if (!path.isEmpty()) {\n              response =\n                  get(projectIdFromUri(path), parseFields(exchange.getRequestURI().getQuery()));\n            } else {\n              response = list(parseListOptions(exchange.getRequestURI().getQuery()));\n            }\n            break;\n          case \"PUT\":\n            String requestBody =\n                decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n            response =\n                replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class));\n            break;\n          default:\n            response =\n                Error.BAD_REQUEST.response(\n                    \"The server could not understand the following request URI: \"\n                        + requestMethod\n                        + \" \"\n                        + path);\n        }\n      } catch (IOException e) {\n        response = Error.BAD_REQUEST.response(e.getMessage());\n      }\n      writeResponse(exchange, response);\n    }\n  }\n\n  private Response handlePost(HttpExchange exchange, String path) throws IOException {\n    String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n    if (!path.contains(\":\")) {\n      return create(jsonFactory.fromString(requestBody, Project.class));\n    } else {\n      switch (path.split(\":\", 2)[1]) {\n        case \"undelete\":\n          return undelete(projectIdFromUri(path));\n        case \"getIamPolicy\":\n          return getPolicy(projectIdFromUri(path));\n        case \"setIamPolicy\":\n          return replacePolicy(\n              projectIdFromUri(path),\n              jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy());\n        case \"testIamPermissions\":\n          return testPermissions(\n              projectIdFromUri(path),\n              jsonFactory\n                  .fromString(requestBody, TestIamPermissionsRequest.class)\n                  .getPermissions());\n        default:\n          return Error.BAD_REQUEST.response(\n              \"The server could not understand the following request URI: POST \" + path);\n      }\n    }\n  }\n\n  private class OperationRequestHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) {\n      // see https://cloud.google.com/resource-manager/reference/rest/\n      String projectId;\n      try {\n        projectId = new URI(OPERATION_CONTEXT).relativize(exchange.getRequestURI()).getPath();\n      } catch (URISyntaxException e) {\n        throw new IllegalStateException(e);\n      }\n      Response response;\n      String requestMethod = exchange.getRequestMethod();\n      switch (requestMethod) {\n        case \"GET\":\n          Project project = projects.get(projectId);\n          if (project == null) {\n            response = Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n            break;\n          }\n          try {\n            response =\n                new Response(\n                    HTTP_OK,\n                    jsonFactory.toString(new Operation().setDone(true).setResponse(project)));\n          } catch (IOException e) {\n            response =\n                Error.INTERNAL_ERROR.response(\n                    \"Error when serializing project \" + project.getProjectId());\n          }\n          break;\n        default:\n          response =\n              Error.BAD_REQUEST.response(\n                  \"The server could not understand the following request URI: \"\n                      + requestMethod\n                      + \" \"\n                      + projectId);\n      }\n      writeResponse(exchange, response);\n    }\n  }\n\n  private static void writeResponse(HttpExchange exchange, Response response) {\n    exchange.getResponseHeaders().set(\"Content-type\", \"application/json; charset=UTF-8\");\n    OutputStream outputStream = exchange.getResponseBody();\n    try {\n      exchange.getResponseHeaders().add(\"Connection\", \"close\");\n      exchange.sendResponseHeaders(response.code(), response.body().length());\n      outputStream.write(response.body().getBytes(StandardCharsets.UTF_8));\n      outputStream.close();\n    } catch (IOException e) {\n      log.log(Level.WARNING, \"IOException encountered when sending response.\", e);\n    }\n  }\n\n  private static String decodeContent(Headers headers, InputStream inputStream) throws IOException {\n    List<String> contentEncoding = headers.get(\"Content-encoding\");\n    InputStream input = inputStream;\n    try {\n      if (contentEncoding != null && !contentEncoding.isEmpty()) {\n        String encoding = contentEncoding.get(0);\n        if (SUPPORTED_COMPRESSION_ENCODINGS.contains(encoding)) {\n          input = new GZIPInputStream(inputStream);\n        } else if (!encoding.equals(\"identity\")) {\n          throw new IOException(\n              \"The request has the following unsupported HTTP content encoding: \" + encoding);\n        }\n      }\n      return new String(ByteStreams.toByteArray(input), StandardCharsets.UTF_8);\n    } catch (IOException e) {\n      throw new IOException(\"Exception encountered when decoding request content.\", e);\n    }\n  }\n\n  private static String projectIdFromUri(String path) throws IOException {\n    if (path.isEmpty()) {\n      throw new IOException(\"The URI path '\" + path + \"' doesn't have a project ID.\");\n    }\n    return path.split(\":\")[0];\n  }\n\n  private static String[] parseFields(String query) {\n    if (query != null && !query.isEmpty()) {\n      String[] querySplit = query.split(\"=\");\n      return querySplit.length > 1 ? querySplit[1].split(\",\") : null;\n    }\n    return null;\n  }\n\n  private static Map<String, Object> parseListOptions(String query) throws IOException {\n    Map<String, Object> options = new HashMap<>();\n    if (query != null) {\n      String[] args = query.split(\"&\");\n      for (String arg : args) {\n        String[] argEntry = arg.split(\"=\");\n        switch (argEntry[0]) {\n          case \"fields\":\n            // List fields are in the form \"projects(field1, field2, ...),nextPageToken\"\n            Matcher matcher = LIST_FIELDS_PATTERN.matcher(argEntry[1]);\n            if (matcher.matches()) {\n              options.put(\"projectFields\", matcher.group(2).split(\",\"));\n              options.put(\"listFields\", (matcher.group(1) + matcher.group(3)).split(\",\"));\n            } else {\n              options.put(\"projectFields\", NO_FIELDS);\n              options.put(\"listFields\", argEntry[1].split(\",\"));\n            }\n            break;\n          case \"filter\":\n            options.put(\"filter\", argEntry[1].split(\" \"));\n            break;\n          case \"pageToken\":\n            options.put(\"pageToken\", argEntry[1]);\n            break;\n          case \"pageSize\":\n            int pageSize = Integer.parseInt(argEntry[1]);\n            if (pageSize < 1) {\n              throw new IOException(\"Page size must be greater than 0.\");\n            }\n            options.put(\"pageSize\", pageSize);\n            break;\n        }\n      }\n    }\n    return options;\n  }\n\n  private static String checkForProjectErrors(Project project) {\n    if (project.getProjectId() == null) {\n      return \"Project ID cannot be empty.\";\n    }\n    if (!isValidIdOrLabel(project.getProjectId(), 6, 30)) {\n      return \"Project \"\n          + project.getProjectId()\n          + \" has an invalid ID.\"\n          + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n          + VERSION\n          + \"/projects\"\n          + \" for more information.\";\n    }\n    if (project.getName() != null) {\n      for (char c : project.getName().toCharArray()) {\n        if (!PERMISSIBLE_PROJECT_NAME_PUNCTUATION.contains(c) && !Character.isLetterOrDigit(c)) {\n          return \"Project \"\n              + project.getProjectId()\n              + \" has an invalid name.\"\n              + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n              + VERSION\n              + \"/projects for more information.\";\n        }\n      }\n    }\n    if (project.getLabels() != null) {\n      if (project.getLabels().size() > 256) {\n        return \"Project \" + project.getProjectId() + \" exceeds the limit of 256 labels.\";\n      }\n      for (Map.Entry<String, String> entry : project.getLabels().entrySet()) {\n        if (!isValidIdOrLabel(entry.getKey(), 1, 63)\n            || !isValidIdOrLabel(entry.getValue(), 0, 63)) {\n          return \"Project \"\n              + project.getProjectId()\n              + \" has an invalid label entry.\"\n              + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n              + VERSION\n              + \"/projects for more information.\";\n        }\n      }\n    }\n    return null;\n  }\n\n  private static boolean isValidIdOrLabel(String value, int minLength, int maxLength) {\n    for (char c : value.toCharArray()) {\n      if (c != '-' && !Character.isDigit(c) && !Character.isLowerCase(c)) {\n        return false;\n      }\n    }\n    if (!value.isEmpty() && (!Character.isLetter(value.charAt(0)) || value.endsWith(\"-\"))) {\n      return false;\n    }\n    return value.length() >= minLength && value.length() <= maxLength;\n  }\n\n  synchronized Response create(Project project) {\n    String customErrorMessage = checkForProjectErrors(project);\n    if (customErrorMessage != null) {\n      return Error.INVALID_ARGUMENT.response(customErrorMessage);\n    } else {\n      project.setLifecycleState(\"ACTIVE\");\n      project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));\n      project.setCreateTime(\n          DateTimeFormatter.ISO_DATE_TIME\n              .withZone(ZoneOffset.UTC)\n              .format(Instant.ofEpochMilli(System.currentTimeMillis())));\n      if (projects.putIfAbsent(project.getProjectId(), project) != null) {\n        return Error.ALREADY_EXISTS.response(\n            \"A project with the same project ID (\" + project.getProjectId() + \") already exists.\");\n      }\n      Policy emptyPolicy =\n          new Policy()\n              .setBindings(Collections.<Binding>emptyList())\n              .setEtag(UUID.randomUUID().toString())\n              .setVersion(0);\n      policies.put(project.getProjectId(), emptyPolicy);\n      try {\n        // Pretend it's not done yet.\n        String createdProjectStr =\n            jsonFactory.toString(\n                new Operation().setDone(false).setName(\"operations/\" + project.getProjectId()));\n        return new Response(HTTP_OK, createdProjectStr);\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\"Error serializing project \" + project.getProjectId());\n      }\n    }\n  }\n\n  synchronized Response delete(String projectId) {\n    Project project = projects.get(projectId);\n    if (project == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when deleting \" + projectId + \" because the project was not found.\");\n    }\n    if (!project.getLifecycleState().equals(\"ACTIVE\")) {\n      return Error.FAILED_PRECONDITION.response(\n          \"Error when deleting \" + projectId + \" because the lifecycle state was not ACTIVE.\");\n    } else {\n      project.setLifecycleState(\"DELETE_REQUESTED\");\n      return new Response(HTTP_OK, \"{}\");\n    }\n  }\n\n  Response get(String projectId, String[] fields) {\n    Project project = projects.get(projectId);\n    if (project != null) {\n      try {\n        return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields)));\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\n            \"Error when serializing project \" + project.getProjectId());\n      }\n    } else {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n  }\n\n  Response list(Map<String, Object> options) {\n    List<String> projectsSerialized = new ArrayList<>();\n    String[] filters = (String[]) options.get(\"filter\");\n    if (filters != null && !isValidFilter(filters)) {\n      return Error.INVALID_ARGUMENT.response(\"Could not parse the filter.\");\n    }\n    String[] projectFields = (String[]) options.get(\"projectFields\");\n    int count = 0;\n    String pageToken = (String) options.get(\"pageToken\");\n    Integer pageSize = (Integer) options.get(\"pageSize\");\n    String nextPageToken = null;\n    Map<String, Project> projectsToScan = projects;\n    if (pageToken != null) {\n      projectsToScan = projects.tailMap(pageToken);\n    }\n    for (Project p : projectsToScan.values()) {\n      if (pageSize != null && count >= pageSize) {\n        nextPageToken = p.getProjectId();\n        break;\n      }\n      boolean includeProject = includeProject(p, filters);\n      if (includeProject) {\n        count++;\n        try {\n          projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields)));\n        } catch (IOException e) {\n          return Error.INTERNAL_ERROR.response(\n              \"Error when serializing project \" + p.getProjectId());\n        }\n      }\n    }\n    String[] listFields = (String[]) options.get(\"listFields\");\n    StringBuilder responseBody = new StringBuilder();\n    responseBody.append('{');\n    // If fields parameter is set but no project field is selected we must return no projects.\n    if (!(projectFields != null && projectFields.length == 0)) {\n      responseBody.append(\"\\\"projects\\\": [\");\n      Joiner.on(\",\").appendTo(responseBody, projectsSerialized);\n      responseBody.append(']');\n    }\n    if (nextPageToken != null\n        && (listFields == null || ImmutableSet.copyOf(listFields).contains(\"nextPageToken\"))) {\n      if (responseBody.length() > 1) {\n        responseBody.append(',');\n      }\n      responseBody.append(\"\\\"nextPageToken\\\": \\\"\");\n      responseBody.append(nextPageToken);\n      responseBody.append('\"');\n    }\n    responseBody.append('}');\n    return new Response(HTTP_OK, responseBody.toString());\n  }\n\n  private static boolean isValidFilter(String[] filters) {\n    for (String filter : filters) {\n      String field = filter.toLowerCase().split(\":\")[0];\n      if (!(\"id\".equals(field) || \"name\".equals(field) || field.startsWith(\"labels.\"))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static boolean includeProject(Project project, String[] filters) {\n    if (filters == null) {\n      return true;\n    }\n    for (String filter : filters) {\n      String[] filterEntry = filter.toLowerCase().split(\":\");\n      String filterType = filterEntry[0];\n      if (\"id\".equals(filterType)) {\n        if (!satisfiesFilter(project.getProjectId(), filterEntry[1])) {\n          return false;\n        }\n      } else if (\"name\".equals(filterType)) {\n        if (!satisfiesFilter(project.getName(), filterEntry[1])) {\n          return false;\n        }\n      } else if (filterType.startsWith(\"labels.\")) {\n        String labelKey = filterType.substring(\"labels.\".length());\n        if (project.getLabels() != null) {\n          String labelValue = project.getLabels().get(labelKey);\n          if (!satisfiesFilter(labelValue, filterEntry[1])) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  private static boolean satisfiesFilter(String projectValue, String filterValue) {\n    if (projectValue == null) {\n      return false;\n    }\n    return \"*\".equals(filterValue) || filterValue.equals(projectValue.toLowerCase());\n  }\n\n  private static Project extractFields(Project fullProject, String[] fields) {\n    if (fields == null) {\n      return fullProject;\n    }\n    Project project = new Project();\n    for (String field : fields) {\n      switch (field) {\n        case \"createTime\":\n          project.setCreateTime(fullProject.getCreateTime());\n          break;\n        case \"labels\":\n          project.setLabels(fullProject.getLabels());\n          break;\n        case \"lifecycleState\":\n          project.setLifecycleState(fullProject.getLifecycleState());\n          break;\n        case \"name\":\n          project.setName(fullProject.getName());\n          break;\n        case \"parent\":\n          project.setParent(fullProject.getParent());\n          break;\n        case \"projectId\":\n          project.setProjectId(fullProject.getProjectId());\n          break;\n        case \"projectNumber\":\n          project.setProjectNumber(fullProject.getProjectNumber());\n          break;\n      }\n    }\n    return project;\n  }\n\n  synchronized Response replace(String projectId, Project project) {\n    Project originalProject = projects.get(projectId);\n    if (originalProject == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when replacing \" + projectId + \" because the project was not found.\");\n    } else if (!originalProject.getLifecycleState().equals(\"ACTIVE\")) {\n      return Error.FAILED_PRECONDITION.response(\n          \"Error when replacing \" + projectId + \" because the lifecycle state was not ACTIVE.\");\n    } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {\n      return Error.INVALID_ARGUMENT.response(\n          \"The server currently only supports setting the parent once \"\n              + \"and does not allow unsetting it.\");\n    }\n    project.setProjectId(projectId);\n    project.setLifecycleState(originalProject.getLifecycleState());\n    project.setCreateTime(originalProject.getCreateTime());\n    project.setProjectNumber(originalProject.getProjectNumber());\n    // replace cannot fail because both this method and removeProject are synchronized\n    projects.replace(projectId, project);\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(project));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + projectId);\n    }\n  }\n\n  synchronized Response undelete(String projectId) {\n    Project project = projects.get(projectId);\n    Response response;\n    if (project == null) {\n      response =\n          Error.PERMISSION_DENIED.response(\n              \"Error when undeleting \" + projectId + \" because the project was not found.\");\n    } else if (!project.getLifecycleState().equals(\"DELETE_REQUESTED\")) {\n      response =\n          Error.FAILED_PRECONDITION.response(\n              \"Error when undeleting \"\n                  + projectId\n                  + \" because the lifecycle state was not DELETE_REQUESTED.\");\n    } else {\n      project.setLifecycleState(\"ACTIVE\");\n      response = new Response(HTTP_OK, \"{}\");\n    }\n    return response;\n  }\n\n  synchronized Response getPolicy(String projectId) {\n    Policy policy = policies.get(projectId);\n    if (policy == null) {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(policy));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\n          \"Error when serializing the IAM policy for \" + projectId);\n    }\n  }\n\n  synchronized Response replacePolicy(String projectId, Policy policy) {\n    Policy originalPolicy = policies.get(projectId);\n    if (originalPolicy == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when replacing the policy for \"\n              + projectId\n              + \" because the project was not found.\");\n    }\n    String etag = policy.getEtag();\n    if (etag != null && !originalPolicy.getEtag().equals(etag)) {\n      return Error.ABORTED.response(\n          \"Policy etag mismatch when replacing the policy for project \"\n              + projectId\n              + \", please retry the read.\");\n    }\n    policy.setEtag(UUID.randomUUID().toString());\n    policy.setVersion(originalPolicy.getVersion());\n    policies.put(projectId, policy);\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(policy));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\n          \"Error when serializing the policy for project \" + projectId);\n    }\n  }\n\n  synchronized Response testPermissions(String projectId, List<String> permissions) {\n    if (!projects.containsKey(projectId)) {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n    try {\n      return new Response(\n          HTTP_OK,\n          jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\"Error when serializing permissions \" + permissions);\n    }\n  }\n\n  private LocalResourceManagerHelper() {\n    try {\n      server = HttpServer.create(new InetSocketAddress(0), 0);\n      port = server.getAddress().getPort();\n      server.createContext(CONTEXT, new RequestHandler());\n      server.createContext(OPERATION_CONTEXT, new OperationRequestHandler());\n    } catch (IOException e) {\n      throw new RuntimeException(\"Could not bind the mock Resource Manager server.\", e);\n    }\n  }\n\n  /**\n   * Creates a {@code LocalResourceManagerHelper} object that listens to requests on the local\n   * machine.\n   */\n  public static LocalResourceManagerHelper create() {\n    return new LocalResourceManagerHelper();\n  }\n\n  /**\n   * Returns a {@link ResourceManagerOptions} instance that sets the host to use the mock server.\n   */\n  public ResourceManagerOptions getOptions() {\n    return ResourceManagerOptions.newBuilder()\n        .setHost(\"http://localhost:\" + port)\n        .setCredentials(NoCredentials.getInstance())\n        .build();\n  }\n\n  /** Starts the thread that runs the Resource Manager server. */\n  public void start() {\n    server.start();\n  }\n\n  /** Stops the thread that runs the mock Resource Manager server. */\n  public void stop() {\n    server.stop(1);\n  }\n\n  /**\n   * Utility method to change the lifecycle state of the specified project.\n   *\n   * @return true if the lifecycle state was successfully updated, false otherwise\n   */\n  public synchronized boolean changeLifecycleState(String projectId, String lifecycleState) {\n    checkArgument(\n        \"ACTIVE\".equals(lifecycleState)\n            || \"DELETE_REQUESTED\".equals(lifecycleState)\n            || \"DELETE_IN_PROGRESS\".equals(lifecycleState),\n        \"Lifecycle state must be ACTIVE, DELETE_REQUESTED, or DELETE_IN_PROGRESS\");\n    Project project = projects.get(checkNotNull(projectId));\n    if (project != null) {\n      project.setLifecycleState(lifecycleState);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Utility method to remove the specified project.\n   *\n   * <p>This method can be used to fully remove a project (to mimic when the server completely\n   * deletes a project).\n   *\n   * @return true if the project was successfully deleted, false if the project didn't exist\n   */\n  public synchronized boolean removeProject(String projectId) {\n    // Because this method is synchronized, any code that relies on non-atomic read/write operations\n    // should not fail if that code is also synchronized.\n    policies.remove(checkNotNull(projectId));\n    return projects.remove(projectId) != null;\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Operation;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.cloud.Identity;\nimport com.google.cloud.Policy;\nimport com.google.cloud.Policy.Marshaller;\nimport com.google.cloud.Role;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Lists;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class PolicyMarshaller\n    extends Marshaller<com.google.api.services.cloudresourcemanager.model.Policy> {\n\n  static final PolicyMarshaller INSTANCE = new PolicyMarshaller();\n\n  private PolicyMarshaller() {}\n\n  private static class Builder extends Policy.Builder {\n\n    private Builder(Map<Role, Set<Identity>> bindings, String etag, Integer version) {\n      setBindings(bindings);\n      setEtag(etag);\n      if (version != null) {\n        setVersion(version);\n      }\n    }\n  }\n\n  @Override\n  protected Policy fromPb(com.google.api.services.cloudresourcemanager.model.Policy policyPb) {\n    Map<Role, Set<Identity>> bindings = new HashMap<>();\n    if (policyPb.getBindings() != null) {\n      for (Binding bindingPb : policyPb.getBindings()) {\n        bindings.put(\n            Role.of(bindingPb.getRole()),\n            ImmutableSet.copyOf(\n                Lists.transform(\n                    bindingPb.getMembers(),\n                    new Function<String, Identity>() {\n                      @Override\n                      public Identity apply(String s) {\n                        return IDENTITY_VALUE_OF_FUNCTION.apply(s);\n                      }\n                    })));\n      }\n    }\n    return new Builder(bindings, policyPb.getEtag(), policyPb.getVersion()).build();\n  }\n\n  @Override\n  protected com.google.api.services.cloudresourcemanager.model.Policy toPb(Policy policy) {\n    com.google.api.services.cloudresourcemanager.model.Policy policyPb =\n        new com.google.api.services.cloudresourcemanager.model.Policy();\n    List<Binding> bindingPbList = new LinkedList<>();\n    for (Map.Entry<Role, Set<Identity>> binding : policy.getBindings().entrySet()) {\n      Binding bindingPb = new Binding();\n      bindingPb.setRole(binding.getKey().getValue());\n      bindingPb.setMembers(\n          Lists.transform(\n              new ArrayList<>(binding.getValue()),\n              new Function<Identity, String>() {\n                @Override\n                public String apply(Identity identity) {\n                  return IDENTITY_STR_VALUE_FUNCTION.apply(identity);\n                }\n              }));\n      bindingPbList.add(bindingPb);\n    }\n    policyPb.setBindings(bindingPbList);\n    policyPb.setEtag(policy.getEtag());\n    policyPb.setVersion(policy.getVersion());\n    return policyPb;\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.model.Binding;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\n",
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.spi.v1beta1;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.MoreObjects.firstNonNull;\nimport static java.net.HttpURLConnection.HTTP_FORBIDDEN;\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.core.ApiClock;\nimport com.google.api.gax.retrying.ResultRetryAlgorithm;\nimport com.google.api.gax.retrying.RetrySettings;\nimport com.google.api.gax.retrying.TimedAttemptSettings;\nimport com.google.api.services.cloudresourcemanager.CloudResourceManager;\nimport com.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse;\nimport com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse;\nimport com.google.api.services.cloudresourcemanager.model.ListProjectsResponse;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.Status;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest;\nimport com.google.cloud.RetryHelper;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.http.BaseHttpServiceException;\nimport com.google.cloud.http.HttpTransportOptions;\nimport com.google.cloud.resourcemanager.ResourceManagerException;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.Callable;\nimport org.threeten.bp.Duration;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\npublic class HttpResourceManagerRpc implements ResourceManagerRpc {\n\n  private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();\n\n  // See doc of create() for more details:\n  // https://developers.google.com/resources/api-libraries/documentation/cloudresourcemanager/v1/java/latest/com/google/api/services/cloudresourcemanager/CloudResourceManager.Projects.html#create(com.google.api.services.cloudresourcemanager.model.Project)\n  private static final RetrySettings CREATE_RETRY_SETTINGS =\n      RetrySettings.newBuilder()\n          // SLO permits 30s at 90th percentile, 4x it for total limit.\n          // Observed latency is much lower: 11s at 95th percentile.\n          .setTotalTimeout(Duration.ofMinutes(2))\n          // Linked doc recommends polling at 5th second.\n          .setInitialRetryDelay(Duration.ofSeconds(5))\n          .setRetryDelayMultiplier(1.5)\n          // Observed P95 latency is 11s. We probably shouldn't sleep longer than this.\n          .setMaxRetryDelay(Duration.ofSeconds(11))\n          .setJittered(true)\n          .setInitialRpcTimeout(Duration.ofSeconds(5))\n          .setMaxRpcTimeout(Duration.ofSeconds(5))\n          .build();\n\n  // reference: https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  private static final ImmutableMap<Integer, Integer> RPC_TO_HTTP_CODES =\n      ImmutableMap.<Integer, Integer>builder()\n          .put(0, 200)\n          .put(1, 499)\n          .put(2, 500)\n          .put(3, 400)\n          .put(4, 504)\n          .put(5, 404)\n          .put(6, 409)\n          .put(7, 403)\n          .put(16, 401)\n          .put(8, 429)\n          .put(9, 400)\n          .put(10, 409)\n          .put(11, 400)\n          .put(12, 501)\n          .put(13, 500)\n          .put(14, 503)\n          .put(15, 500)\n          .build();\n\n  private static final ResultRetryAlgorithm<Operation> OPERATION_HANDLER =\n      new ResultRetryAlgorithm<Operation>() {\n        @Override\n        public TimedAttemptSettings createNextAttempt(\n            Throwable prevThrowable, Operation prevResponse, TimedAttemptSettings prevSettings) {\n          return null;\n        }\n\n        @Override\n        public boolean shouldRetry(Throwable prevThrowable, Operation prevOp) {\n          if (prevThrowable == null) {\n            return prevOp.getDone() == null || !prevOp.getDone();\n          }\n          return prevThrowable instanceof ResourceManagerException\n              && ((ResourceManagerException) prevThrowable).isRetryable();\n        }\n      };\n\n  private final CloudResourceManager resourceManager;\n  private final ApiClock clock;\n\n  public HttpResourceManagerRpc(ResourceManagerOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    resourceManager =\n        new CloudResourceManager.Builder(transport, JSON_FACTORY, initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    clock = options.getClock();\n  }\n\n  private static ResourceManagerException translate(IOException exception) {\n    return new ResourceManagerException(exception);\n  }\n\n  private static ResourceManagerException translate(Status status) {\n    Integer code = RPC_TO_HTTP_CODES.get(status.getCode());\n    if (code == null) {\n      code = BaseHttpServiceException.UNKNOWN_CODE;\n    }\n    return new ResourceManagerException(code, status.getMessage());\n  }\n\n  @Override\n  public Project create(Project project) {\n    final Operation operation;\n    try {\n      operation = resourceManager.projects().create(project).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n\n    Operation finishedOp =\n        runWithRetries(\n            new Callable<Operation>() {\n              @Override\n              public Operation call() {\n                try {\n                  return resourceManager.operations().get(operation.getName()).execute();\n                } catch (IOException ex) {\n                  throw translate(ex);\n                }\n              }\n            },\n            CREATE_RETRY_SETTINGS,\n            OPERATION_HANDLER,\n            clock);\n    if (finishedOp.getError() != null) {\n      throw translate(finishedOp.getError());\n    }\n\n    // NOTE(pongad): Operation.getResponse() returns a Map<String, Object>.\n    // 1. `(Project) finishedOp.getResponse()` doesn't work,\n    // because JSON deserializer in execute() didn't know to create a Project object.\n    // 2. `new Project().putAll(finishedOp.getResponse())` doesn't work either.\n    // 64-bit integers are sent as strings in JSON,\n    // so execute(), not knowing the type, parses it as String, not Long.\n    try {\n      String responseTxt = JSON_FACTORY.toString(finishedOp.getResponse());\n      return JSON_FACTORY.fromString(responseTxt, Project.class);\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public void delete(String projectId) {\n    try {\n      resourceManager.projects().delete(projectId).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Project get(String projectId, Map<Option, ?> options) {\n    try {\n      return resourceManager\n          .projects()\n          .get(projectId)\n          .setFields(Option.FIELDS.getString(options))\n          .execute();\n    } catch (IOException ex) {\n      ResourceManagerException translated = translate(ex);\n      if (translated.getCode() == HTTP_FORBIDDEN || translated.getCode() == HTTP_NOT_FOUND) {\n        // Service can return either 403 or 404 to signify that the project doesn't exist.\n        return null;\n      } else {\n        throw translated;\n      }\n    }\n  }\n\n  @Override\n  public Tuple<String, Iterable<Project>> list(Map<Option, ?> options) {\n    try {\n      ListProjectsResponse response =\n          resourceManager\n              .projects()\n              .list()\n              .setFields(Option.FIELDS.getString(options))\n              .setFilter(Option.FILTER.getString(options))\n              .setPageSize(Option.PAGE_SIZE.getInt(options))\n              .setPageToken(Option.PAGE_TOKEN.getString(options))\n              .execute();\n      return Tuple.<String, Iterable<Project>>of(\n          response.getNextPageToken(), response.getProjects());\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public void undelete(String projectId) {\n    try {\n      resourceManager.projects().undelete(projectId, new UndeleteProjectRequest()).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Project replace(Project project) {\n    try {\n      return resourceManager.projects().update(project.getProjectId(), project).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(String projectId) throws ResourceManagerException {\n    try {\n      return resourceManager\n          .projects()\n          .getIamPolicy(projectId, new GetIamPolicyRequest())\n          .execute();\n    } catch (IOException ex) {\n      ResourceManagerException translated = translate(ex);\n      if (translated.getCode() == HTTP_FORBIDDEN) {\n        // Service returns permission denied if policy doesn't exist.\n        return null;\n      } else {\n        throw translated;\n      }\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(String projectId, Policy newPolicy) throws ResourceManagerException {\n    try {\n      return resourceManager\n          .projects()\n          .setIamPolicy(projectId, new SetIamPolicyRequest().setPolicy(newPolicy))\n          .execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(String projectId, List<String> permissions)\n      throws ResourceManagerException {\n    try {\n      TestIamPermissionsResponse response =\n          resourceManager\n              .projects()\n              .testIamPermissions(\n                  projectId, new TestIamPermissionsRequest().setPermissions(permissions))\n              .execute();\n      Set<String> permissionsOwned =\n          ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));\n      ImmutableList.Builder<Boolean> answer = ImmutableList.builder();\n      for (String p : permissions) {\n        answer.add(permissionsOwned.contains(p));\n      }\n      return answer.build();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)\n      throws IOException {\n    try {\n      TestIamPermissionsResponse response =\n          resourceManager\n              .organizations()\n              .testIamPermissions(\n                  resource, new TestIamPermissionsRequest().setPermissions(permissions))\n              .execute();\n      Set<String> permissionsOwned =\n          ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));\n      ImmutableMap.Builder<String, Boolean> answer = ImmutableMap.builder();\n      for (String permission : permissions) {\n        answer.put(permission, permissionsOwned.contains(permission));\n      }\n      return answer.build();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException {\n    try {\n      resourceManager\n          .folders()\n          .clearOrgPolicy(\n              resource,\n              new ClearOrgPolicyRequest()\n                  .setConstraint(orgPolicy.getConstraint())\n                  .setEtag(orgPolicy.getEtag()))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .getEffectiveOrgPolicy(\n              resource, new GetEffectiveOrgPolicyRequest().setConstraint(constraint))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .getOrgPolicy(resource, new GetOrgPolicyRequest().setConstraint(constraint))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public ListResult<Constraint> listAvailableOrgPolicyConstraints(\n      String resource, Map<Option, ?> options) throws IOException {\n    try {\n      ListAvailableOrgPolicyConstraintsResponse response =\n          resourceManager\n              .folders()\n              .listAvailableOrgPolicyConstraints(\n                  resource,\n                  new ListAvailableOrgPolicyConstraintsRequest()\n                      .setPageSize(Option.PAGE_SIZE.getInt(options))\n                      .setPageToken(Option.PAGE_TOKEN.getString(options)))\n              .execute();\n      return ListResult.of(response.getNextPageToken(), response.getConstraints());\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options)\n      throws IOException {\n    try {\n      ListOrgPoliciesResponse response =\n          resourceManager\n              .folders()\n              .listOrgPolicies(\n                  resource,\n                  new ListOrgPoliciesRequest()\n                      .setPageSize(Option.PAGE_SIZE.getInt(options))\n                      .setPageToken(Option.PAGE_TOKEN.getString(options)))\n              .execute();\n      return ListResult.of(response.getNextPageToken(), response.getPolicies());\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .setOrgPolicy(resource, new SetOrgPolicyRequest().setPolicy(orgPolicy))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n}\nimport com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;\nimport com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;\nimport com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;\nimport com.google.api.services.cloudresourcemanager.v3.model.Operation;\nimport com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Policy;\nimport com.google.api.services.cloudresourcemanager.v3.model.Project;\nimport com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.Status;\nimport com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;\nimport com.google.api.services.cloudresourcemanager.v3.model.UndeleteProjectRequest;\n"
                },
                "compile_error_details": {
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java": {
                        "392": {
                            "lines": [
                                {
                                    "line_no": 391,
                                    "content": "}"
                                },
                                {
                                    "line_no": 392,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;"
                                },
                                {
                                    "line_no": 393,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[392,1] class, interface, or enum expected\n"
                            ]
                        },
                        "393": {
                            "lines": [
                                {
                                    "line_no": 392,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.BooleanPolicy;"
                                },
                                {
                                    "line_no": 393,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;"
                                },
                                {
                                    "line_no": 394,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[393,1] class, interface, or enum expected\n"
                            ]
                        },
                        "394": {
                            "lines": [
                                {
                                    "line_no": 393,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListPolicy;"
                                },
                                {
                                    "line_no": 394,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 395,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.RestoreDefault;"
                                }
                            ],
                            "error_texts": [
                                "[394,1] class, interface, or enum expected\n"
                            ]
                        },
                        "395": {
                            "lines": [
                                {
                                    "line_no": 394,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 395,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.RestoreDefault;"
                                },
                                {
                                    "line_no": 396,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[395,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java": {
                        "808": {
                            "lines": [
                                {
                                    "line_no": 807,
                                    "content": "}"
                                },
                                {
                                    "line_no": 808,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                },
                                {
                                    "line_no": 809,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[808,1] class, interface, or enum expected\n"
                            ]
                        },
                        "809": {
                            "lines": [
                                {
                                    "line_no": 808,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                },
                                {
                                    "line_no": 809,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 810,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[809,1] class, interface, or enum expected\n"
                            ]
                        },
                        "810": {
                            "lines": [
                                {
                                    "line_no": 809,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 810,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 811,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[810,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java": {
                        "431": {
                            "lines": [
                                {
                                    "line_no": 430,
                                    "content": "}"
                                },
                                {
                                    "line_no": 431,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;"
                                },
                                {
                                    "line_no": 432,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[431,1] class, interface, or enum expected\n"
                            ]
                        },
                        "432": {
                            "lines": [
                                {
                                    "line_no": 431,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;"
                                },
                                {
                                    "line_no": 432,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 433,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                }
                            ],
                            "error_texts": [
                                "[432,1] class, interface, or enum expected\n"
                            ]
                        },
                        "433": {
                            "lines": [
                                {
                                    "line_no": 432,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ClearOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 433,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 434,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[433,1] class, interface, or enum expected\n"
                            ]
                        },
                        "434": {
                            "lines": [
                                {
                                    "line_no": 433,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 434,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 435,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[434,1] class, interface, or enum expected\n"
                            ]
                        },
                        "435": {
                            "lines": [
                                {
                                    "line_no": 434,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetEffectiveOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 435,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[435,1] class, interface, or enum expected\n"
                            ]
                        },
                        "436": {
                            "lines": [
                                {
                                    "line_no": 435,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;"
                                }
                            ],
                            "error_texts": [
                                "[436,1] class, interface, or enum expected\n"
                            ]
                        },
                        "437": {
                            "lines": [
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.GetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;"
                                },
                                {
                                    "line_no": 438,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[437,1] class, interface, or enum expected\n"
                            ]
                        },
                        "438": {
                            "lines": [
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsRequest;"
                                },
                                {
                                    "line_no": 438,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;"
                                },
                                {
                                    "line_no": 439,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;"
                                }
                            ],
                            "error_texts": [
                                "[438,1] class, interface, or enum expected\n"
                            ]
                        },
                        "439": {
                            "lines": [
                                {
                                    "line_no": 438,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListAvailableOrgPolicyConstraintsResponse;"
                                },
                                {
                                    "line_no": 439,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;"
                                },
                                {
                                    "line_no": 440,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;"
                                }
                            ],
                            "error_texts": [
                                "[439,1] class, interface, or enum expected\n"
                            ]
                        },
                        "440": {
                            "lines": [
                                {
                                    "line_no": 439,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesRequest;"
                                },
                                {
                                    "line_no": 440,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;"
                                },
                                {
                                    "line_no": 441,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[440,1] class, interface, or enum expected\n"
                            ]
                        },
                        "441": {
                            "lines": [
                                {
                                    "line_no": 440,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListOrgPoliciesResponse;"
                                },
                                {
                                    "line_no": 441,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;"
                                },
                                {
                                    "line_no": 442,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                }
                            ],
                            "error_texts": [
                                "[441,1] class, interface, or enum expected\n"
                            ]
                        },
                        "442": {
                            "lines": [
                                {
                                    "line_no": 441,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListProjectsResponse;"
                                },
                                {
                                    "line_no": 442,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                },
                                {
                                    "line_no": 443,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[442,1] class, interface, or enum expected\n"
                            ]
                        },
                        "443": {
                            "lines": [
                                {
                                    "line_no": 442,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Operation;"
                                },
                                {
                                    "line_no": 443,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 444,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[443,1] class, interface, or enum expected\n"
                            ]
                        },
                        "444": {
                            "lines": [
                                {
                                    "line_no": 443,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 444,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 445,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[444,1] class, interface, or enum expected\n"
                            ]
                        },
                        "445": {
                            "lines": [
                                {
                                    "line_no": 444,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 445,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 446,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[445,1] class, interface, or enum expected\n"
                            ]
                        },
                        "446": {
                            "lines": [
                                {
                                    "line_no": 445,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 446,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 447,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;"
                                }
                            ],
                            "error_texts": [
                                "[446,1] class, interface, or enum expected\n"
                            ]
                        },
                        "447": {
                            "lines": [
                                {
                                    "line_no": 446,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;"
                                },
                                {
                                    "line_no": 447,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 448,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Status;"
                                }
                            ],
                            "error_texts": [
                                "[447,1] class, interface, or enum expected\n"
                            ]
                        },
                        "448": {
                            "lines": [
                                {
                                    "line_no": 447,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.SetOrgPolicyRequest;"
                                },
                                {
                                    "line_no": 448,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Status;"
                                },
                                {
                                    "line_no": 449,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;"
                                }
                            ],
                            "error_texts": [
                                "[448,1] class, interface, or enum expected\n"
                            ]
                        },
                        "449": {
                            "lines": [
                                {
                                    "line_no": 448,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Status;"
                                },
                                {
                                    "line_no": 449,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;"
                                },
                                {
                                    "line_no": 450,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;"
                                }
                            ],
                            "error_texts": [
                                "[449,1] class, interface, or enum expected\n"
                            ]
                        },
                        "450": {
                            "lines": [
                                {
                                    "line_no": 449,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;"
                                },
                                {
                                    "line_no": 450,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;"
                                },
                                {
                                    "line_no": 451,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.UndeleteProjectRequest;"
                                }
                            ],
                            "error_texts": [
                                "[450,1] class, interface, or enum expected\n"
                            ]
                        },
                        "451": {
                            "lines": [
                                {
                                    "line_no": 450,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;"
                                },
                                {
                                    "line_no": 451,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.UndeleteProjectRequest;"
                                },
                                {
                                    "line_no": 452,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[451,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java": {
                        "216": {
                            "lines": [
                                {
                                    "line_no": 215,
                                    "content": "}"
                                },
                                {
                                    "line_no": 216,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 217,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[216,1] class, interface, or enum expected\n"
                            ]
                        },
                        "217": {
                            "lines": [
                                {
                                    "line_no": 216,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 217,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 218,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[217,1] class, interface, or enum expected\n"
                            ]
                        },
                        "218": {
                            "lines": [
                                {
                                    "line_no": 217,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 218,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 219,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[218,1] class, interface, or enum expected\n"
                            ]
                        },
                        "219": {
                            "lines": [
                                {
                                    "line_no": 218,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 219,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 220,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[219,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java": {
                        "296": {
                            "lines": [
                                {
                                    "line_no": 295,
                                    "content": "}"
                                },
                                {
                                    "line_no": 296,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.BooleanConstraint;"
                                },
                                {
                                    "line_no": 297,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                }
                            ],
                            "error_texts": [
                                "[296,1] class, interface, or enum expected\n"
                            ]
                        },
                        "297": {
                            "lines": [
                                {
                                    "line_no": 296,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.BooleanConstraint;"
                                },
                                {
                                    "line_no": 297,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 298,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListConstraint;"
                                }
                            ],
                            "error_texts": [
                                "[297,1] class, interface, or enum expected\n"
                            ]
                        },
                        "298": {
                            "lines": [
                                {
                                    "line_no": 297,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 298,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ListConstraint;"
                                },
                                {
                                    "line_no": 299,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[298,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java": {
                        "508": {
                            "lines": [
                                {
                                    "line_no": 507,
                                    "content": "}"
                                },
                                {
                                    "line_no": 508,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 509,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                }
                            ],
                            "error_texts": [
                                "[508,1] class, interface, or enum expected\n"
                            ]
                        },
                        "509": {
                            "lines": [
                                {
                                    "line_no": 508,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Constraint;"
                                },
                                {
                                    "line_no": 509,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 510,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[509,1] class, interface, or enum expected\n"
                            ]
                        },
                        "510": {
                            "lines": [
                                {
                                    "line_no": 509,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.OrgPolicy;"
                                },
                                {
                                    "line_no": 510,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 511,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[510,1] class, interface, or enum expected\n"
                            ]
                        },
                        "511": {
                            "lines": [
                                {
                                    "line_no": 510,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 511,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 512,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[511,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java": {
                        "100": {
                            "lines": [
                                {
                                    "line_no": 99,
                                    "content": "}"
                                },
                                {
                                    "line_no": 100,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Binding;"
                                },
                                {
                                    "line_no": 101,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                }
                            ],
                            "error_texts": [
                                "[100,1] class, interface, or enum expected\n"
                            ]
                        },
                        "101": {
                            "lines": [
                                {
                                    "line_no": 100,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Binding;"
                                },
                                {
                                    "line_no": 101,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Policy;"
                                },
                                {
                                    "line_no": 102,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[101,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java": {
                        "288": {
                            "lines": [
                                {
                                    "line_no": 287,
                                    "content": "}"
                                },
                                {
                                    "line_no": 288,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 289,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[288,1] class, interface, or enum expected\n"
                            ]
                        }
                    },
                    "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java": {
                        "436": {
                            "lines": [
                                {
                                    "line_no": 435,
                                    "content": "}"
                                },
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ResourceId;"
                                }
                            ],
                            "error_texts": [
                                "[436,1] class, interface, or enum expected\n"
                            ]
                        },
                        "437": {
                            "lines": [
                                {
                                    "line_no": 436,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ResourceId;"
                                },
                                {
                                    "line_no": 438,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                }
                            ],
                            "error_texts": [
                                "[437,1] class, interface, or enum expected\n"
                            ]
                        },
                        "438": {
                            "lines": [
                                {
                                    "line_no": 437,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.ResourceId;"
                                },
                                {
                                    "line_no": 438,
                                    "content": "import com.google.api.services.cloudresourcemanager.v3.model.Project;"
                                },
                                {
                                    "line_no": 439,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[438,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 8705579443028914545
        }
    ],
    "read_file": [
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/OrgPolicyInfo.java",
            "output": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.BooleanPolicy;\nimport com.google.api.services.cloudresourcemanager.model.ListPolicy;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.RestoreDefault;\nimport com.google.common.base.Function;\nimport com.google.common.base.MoreObjects;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager organization policy metadata object.\n *\n * <p>Defines a Cloud Organization Policy which specifies constraints for configurations of Cloud\n * Platform resources.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class OrgPolicyInfo {\n\n  static final Function<OrgPolicy, OrgPolicyInfo> FROM_PROTOBUF_FUNCTION =\n      new Function<OrgPolicy, OrgPolicyInfo>() {\n        @Override\n        public OrgPolicyInfo apply(OrgPolicy protobuf) {\n          return OrgPolicyInfo.fromProtobuf(protobuf);\n        }\n      };\n  static final Function<OrgPolicyInfo, OrgPolicy> TO_PROTOBUF_FUNCTION =\n      new Function<OrgPolicyInfo, OrgPolicy>() {\n        @Override\n        public OrgPolicy apply(OrgPolicyInfo orgPolicyInfo) {\n          return orgPolicyInfo.toProtobuf();\n        }\n      };\n\n  private BoolPolicy boolPolicy;\n  private String constraint;\n  private String etag;\n  private Policies policies;\n  private RestoreDefault restoreDefault;\n  private String updateTime;\n  private Integer version;\n\n  /** Used For boolean Constraints, whether to enforce the Constraint or not. */\n  static class BoolPolicy {\n\n    private final Boolean enforce;\n\n    BoolPolicy(Boolean enforce) {\n      this.enforce = enforce;\n    }\n\n    public boolean getEnforce() {\n      return enforce;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this).add(\"enforce\", getEnforce()).toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      BoolPolicy that = (BoolPolicy) o;\n      return Objects.equals(enforce, that.enforce);\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(enforce);\n    }\n\n    BooleanPolicy toProtobuf() {\n      return new BooleanPolicy().setEnforced(enforce);\n    }\n\n    static BoolPolicy fromProtobuf(BooleanPolicy booleanPolicy) {\n      return new BoolPolicy(booleanPolicy.getEnforced());\n    }\n  }\n\n  /**\n   * The organization ListPolicy object.\n   *\n   * <p>ListPolicy can define specific values and subtrees of Cloud Resource Manager resource\n   * hierarchy (Organizations, Folders, Projects) that are allowed or denied by setting the\n   * allowedValues and deniedValues fields. This is achieved by using the under: and optional is:\n   * prefixes. The under: prefix denotes resource subtree values. The is: prefix is used to denote\n   * specific values, and is required only if the value contains a \":\". Values prefixed with \"is:\"\n   * are treated the same as values with no prefix. Ancestry subtrees must be in one of the\n   * following formats: - \"projects/\", e.g. \"projects/tokyo-rain-123\" - \"folders/\", e.g.\n   * \"folders/1234\" - \"organizations/\", e.g. \"organizations/1234\" The supportsUnder field of the\n   * associated Constraint defines whether ancestry prefixes can be used. You can set allowedValues\n   * and deniedValues in the same Policy if allValues is ALL_VALUES_UNSPECIFIED. ALLOW or DENY are\n   * used to allow or deny all values. If allValues is set to either ALLOW or DENY, allowedValues\n   * and deniedValues must be unset.\n   */\n  static class Policies {\n\n    private final String allValues;\n    private final List<String> allowedValues;\n    private final List<java.lang.String> deniedValues;\n    private final Boolean inheritFromParent;\n    private final String suggestedValue;\n\n    Policies(\n        String allValues,\n        List<String> allowedValues,\n        List<String> deniedValues,\n        Boolean inheritFromParent,\n        String suggestedValue) {\n      this.allValues = allValues;\n      this.allowedValues = allowedValues;\n      this.deniedValues = deniedValues;\n      this.inheritFromParent = inheritFromParent;\n      this.suggestedValue = suggestedValue;\n    }\n\n    /** Returns all the Values state of this policy. */\n    String getAllValues() {\n      return allValues;\n    }\n\n    /** Returns the list of allowed values of this resource */\n    List<String> getAllowedValues() {\n      return allowedValues;\n    }\n\n    /** Returns the list of denied values of this resource. */\n    List<String> getDeniedValues() {\n      return deniedValues;\n    }\n\n    /** Returns the inheritance behavior for this Policy */\n    Boolean getInheritFromParent() {\n      return inheritFromParent;\n    }\n\n    /** Returns the suggested value of this policy. */\n    String getSuggestedValue() {\n      return suggestedValue;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this)\n          .add(\"allValues\", getAllValues())\n          .add(\"allowedValues\", getAllowedValues())\n          .add(\"deniedValues\", getDeniedValues())\n          .add(\"inheritFromParent\", getInheritFromParent())\n          .add(\"suggestedValue\", getSuggestedValue())\n          .toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Policies policies = (Policies) o;\n      return Objects.equals(allValues, policies.allValues)\n          && Objects.equals(allowedValues, policies.allowedValues)\n          && Objects.equals(deniedValues, policies.deniedValues)\n          && Objects.equals(inheritFromParent, policies.inheritFromParent)\n          && Objects.equals(suggestedValue, policies.suggestedValue);\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(\n          allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);\n    }\n\n    ListPolicy toProtobuf() {\n      return new ListPolicy()\n          .setAllValues(allValues)\n          .setAllowedValues(allowedValues)\n          .setDeniedValues(deniedValues)\n          .setInheritFromParent(inheritFromParent)\n          .setSuggestedValue(suggestedValue);\n    }\n\n    static Policies fromProtobuf(ListPolicy listPolicy) {\n      return new Policies(\n          listPolicy.getAllValues(),\n          listPolicy.getAllowedValues(),\n          listPolicy.getDeniedValues(),\n          listPolicy.getInheritFromParent(),\n          listPolicy.getSuggestedValue());\n    }\n  }\n\n  /** Builder for {@code OrganizationPolicyInfo}. */\n  static class Builder {\n    private BoolPolicy boolPolicy;\n    private String constraint;\n    private String etag;\n    private Policies policies;\n    private RestoreDefault restoreDefault;\n    private String updateTime;\n    private Integer version;\n\n    Builder() {}\n\n    Builder(OrgPolicyInfo info) {\n      this.boolPolicy = info.boolPolicy;\n      this.constraint = info.constraint;\n      this.etag = info.etag;\n      this.policies = info.policies;\n      this.restoreDefault = info.restoreDefault;\n      this.updateTime = info.updateTime;\n      this.version = info.version;\n    }\n\n    Builder setBoolPolicy(BoolPolicy boolPolicy) {\n      this.boolPolicy = boolPolicy;\n      return this;\n    }\n\n    Builder setConstraint(String constraint) {\n      this.constraint = constraint;\n      return this;\n    }\n\n    Builder setEtag(String etag) {\n      this.etag = etag;\n      return this;\n    }\n\n    Builder setListPolicy(Policies policies) {\n      this.policies = policies;\n      return this;\n    }\n\n    Builder setRestoreDefault(RestoreDefault restoreDefault) {\n      this.restoreDefault = restoreDefault;\n      return this;\n    }\n\n    Builder setUpdateTime(String updateTime) {\n      this.updateTime = updateTime;\n      return this;\n    }\n\n    Builder setVersion(Integer version) {\n      this.version = version;\n      return this;\n    }\n\n    OrgPolicyInfo build() {\n      return new OrgPolicyInfo(this);\n    }\n  }\n\n  OrgPolicyInfo(Builder builder) {\n    this.boolPolicy = builder.boolPolicy;\n    this.constraint = builder.constraint;\n    this.etag = builder.etag;\n    this.policies = builder.policies;\n    this.restoreDefault = builder.restoreDefault;\n    this.updateTime = builder.updateTime;\n    this.version = builder.version;\n  }\n\n  /** Returns the boolean constraint to check whether the constraint is enforced or not. */\n  public BoolPolicy getBoolPolicy() {\n    return boolPolicy;\n  }\n\n  /** Returns the name of the Constraint. */\n  public String getConstraint() {\n    return constraint;\n  }\n\n  /** Returns the etag value of policy. */\n  public String getEtag() {\n    return etag;\n  }\n\n  /** Return the policies. */\n  public Policies getPolicies() {\n    return policies;\n  }\n\n  /** Restores the default behavior of the constraint. */\n  public RestoreDefault getRestoreDefault() {\n    return restoreDefault;\n  }\n\n  /** Returns the updated timestamp of policy. */\n  public String getUpdateTime() {\n    return updateTime;\n  }\n\n  /** Returns the version of the Policy, Default version is 0. */\n  public Integer getVersion() {\n    return version;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    OrgPolicyInfo policyInfo = (OrgPolicyInfo) o;\n    return Objects.equals(boolPolicy, policyInfo.boolPolicy)\n        && Objects.equals(constraint, policyInfo.constraint)\n        && Objects.equals(etag, policyInfo.etag)\n        && Objects.equals(policies, policyInfo.policies)\n        && Objects.equals(restoreDefault, policyInfo.restoreDefault)\n        && Objects.equals(updateTime, policyInfo.updateTime)\n        && Objects.equals(version, policyInfo.version);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        boolPolicy, constraint, etag, policies, restoreDefault, updateTime, version);\n  }\n\n  /** Returns a builder for the {@link OrgPolicyInfo} object. */\n  public static Builder newBuilder() {\n    return new Builder();\n  }\n\n  /** Returns a builder for the {@link OrgPolicyInfo} object. */\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  OrgPolicy toProtobuf() {\n    OrgPolicy orgPolicyProto = new OrgPolicy();\n    if (boolPolicy != null) {\n      orgPolicyProto.setBooleanPolicy(boolPolicy.toProtobuf());\n    }\n    orgPolicyProto.setConstraint(constraint);\n    if (policies != null) {\n      orgPolicyProto.setListPolicy(policies.toProtobuf());\n    }\n    orgPolicyProto.setRestoreDefault(restoreDefault);\n    orgPolicyProto.setEtag(etag);\n    orgPolicyProto.setUpdateTime(updateTime);\n    orgPolicyProto.setVersion(version);\n    return orgPolicyProto;\n  }\n\n  static OrgPolicyInfo fromProtobuf(OrgPolicy orgPolicyProtobuf) {\n    Builder builder = newBuilder();\n    if (orgPolicyProtobuf.getBooleanPolicy() != null) {\n      builder.setBoolPolicy(BoolPolicy.fromProtobuf(orgPolicyProtobuf.getBooleanPolicy()));\n    }\n    builder.setConstraint(orgPolicyProtobuf.getConstraint());\n    if (orgPolicyProtobuf.getListPolicy() != null) {\n      builder.setListPolicy(Policies.fromProtobuf(orgPolicyProtobuf.getListPolicy()));\n    }\n    builder.setRestoreDefault(orgPolicyProtobuf.getRestoreDefault());\n    builder.setEtag(orgPolicyProtobuf.getEtag());\n    builder.setUpdateTime(orgPolicyProtobuf.getUpdateTime());\n    builder.setVersion(orgPolicyProtobuf.getVersion());\n    return builder.build();\n  }\n}\n",
            "error": "",
            "span_id": 5808594128010419832
        },
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/Project.java",
            "output": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.cloud.Policy;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager project object.\n *\n * <p>A Project is a high-level Google Cloud Platform entity. It is a container for ACLs, APIs,\n * AppEngine Apps, VMs, and other Google Cloud Platform resources. This class' member variables are\n * immutable. Methods that change or update the underlying Project information return a new Project\n * instance. {@code Project} adds a layer of service-related functionality over {@link ProjectInfo}.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class Project extends ProjectInfo {\n\n  private static final long serialVersionUID = 6767630161335155133L;\n\n  private final ResourceManagerOptions options;\n  private transient ResourceManager resourceManager;\n\n  /** Builder for {@code Project}. */\n  public static class Builder extends ProjectInfo.Builder {\n    private final ResourceManager resourceManager;\n    private final ProjectInfo.BuilderImpl infoBuilder;\n\n    Builder(Project project) {\n      this.resourceManager = project.resourceManager;\n      this.infoBuilder = new ProjectInfo.BuilderImpl(project);\n    }\n\n    @Override\n    public Builder setName(String name) {\n      infoBuilder.setName(name);\n      return this;\n    }\n\n    @Override\n    public Builder setProjectId(String projectId) {\n      infoBuilder.setProjectId(projectId);\n      return this;\n    }\n\n    @Override\n    public Builder addLabel(String key, String value) {\n      infoBuilder.addLabel(key, value);\n      return this;\n    }\n\n    @Override\n    public Builder removeLabel(String key) {\n      infoBuilder.removeLabel(key);\n      return this;\n    }\n\n    @Override\n    public Builder clearLabels() {\n      infoBuilder.clearLabels();\n      return this;\n    }\n\n    @Override\n    public Builder setLabels(Map<String, String> labels) {\n      infoBuilder.setLabels(labels);\n      return this;\n    }\n\n    @Override\n    Builder setProjectNumber(Long projectNumber) {\n      infoBuilder.setProjectNumber(projectNumber);\n      return this;\n    }\n\n    @Override\n    Builder setState(State state) {\n      infoBuilder.setState(state);\n      return this;\n    }\n\n    @Override\n    Builder setCreateTimeMillis(Long createTimeMillis) {\n      infoBuilder.setCreateTimeMillis(createTimeMillis);\n      return this;\n    }\n\n    @Override\n    public Builder setParent(ResourceId parent) {\n      infoBuilder.setParent(parent);\n      return this;\n    }\n\n    @Override\n    public Project build() {\n      return new Project(resourceManager, infoBuilder);\n    }\n  }\n\n  Project(ResourceManager resourceManager, ProjectInfo.BuilderImpl infoBuilder) {\n    super(infoBuilder);\n    this.resourceManager = checkNotNull(resourceManager);\n    this.options = resourceManager.getOptions();\n  }\n\n  /** Returns the {@link ResourceManager} service object associated with this Project. */\n  public ResourceManager getResourceManager() {\n    return resourceManager;\n  }\n\n  /**\n   * Fetches the project's latest information. Returns {@code null} if the project does not exist.\n   *\n   * @return Project containing the project's updated metadata or {@code null} if not found\n   * @throws ResourceManagerException upon failure\n   */\n  public Project reload() {\n    return resourceManager.get(getProjectId());\n  }\n\n  /**\n   * Marks the project identified by the specified project ID for deletion.\n   *\n   * <p>This method will only affect the project if the following criteria are met:\n   *\n   * <ul>\n   *   <li>The project does not have a billing account associated with it.\n   *   <li>The project has a lifecycle state of {@link ProjectInfo.State#ACTIVE}.\n   * </ul>\n   *\n   * This method changes the project's lifecycle state from {@link ProjectInfo.State#ACTIVE} to\n   * {@link ProjectInfo.State#DELETE_REQUESTED}. The deletion starts at an unspecified time, at\n   * which point the lifecycle state changes to {@link ProjectInfo.State#DELETE_IN_PROGRESS}. Until\n   * the deletion completes, you can check the lifecycle state checked by retrieving the project\n   * with {@link ResourceManager#get}, and the project remains visible to {@link\n   * ResourceManager#list}. However, you cannot update the project. After the deletion completes,\n   * the project is not retrievable by the {@link ResourceManager#get} and {@link\n   * ResourceManager#list} methods. The caller must have modify permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/delete\">Cloud\n   *     Resource Manager delete</a>\n   */\n  public void delete() {\n    resourceManager.delete(getProjectId());\n  }\n\n  /**\n   * Restores the project identified by the specified project ID.\n   *\n   * <p>You can only use this method for a project that has a lifecycle state of {@link\n   * ProjectInfo.State#DELETE_REQUESTED}. After deletion starts, as indicated by a lifecycle state\n   * of {@link ProjectInfo.State#DELETE_IN_PROGRESS}, the project cannot be restored. The caller\n   * must have modify permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure (including when the project can't be restored)\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/undelete\">Cloud\n   *     Resource Manager undelete</a>\n   */\n  public void undelete() {\n    resourceManager.undelete(getProjectId());\n  }\n\n  /**\n   * Replaces the attributes of the project with the attributes of this project.\n   *\n   * <p>The caller must have modify permissions for this project.\n   *\n   * @return the Project representing the new project metadata\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/update\">Cloud\n   *     Resource Manager update</a>\n   */\n  public Project replace() {\n    return resourceManager.replace(this);\n  }\n\n  /**\n   * Returns the IAM access control policy for this project. Returns {@code null} if the resource\n   * does not exist or if you do not have adequate permission to view the project or get the policy.\n   *\n   * @return the IAM policy for the project\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/getIamPolicy\">\n   *     Resource Manager getIamPolicy</a>\n   */\n  public Policy getPolicy() {\n    return resourceManager.getPolicy(getProjectId());\n  }\n\n  /**\n   * Sets the IAM access control policy for this project. Replaces any existing policy. It is\n   * recommended that you use the read-modify-write pattern. See code samples and important details\n   * of replacing policies in the documentation for {@link ResourceManager#replacePolicy}.\n   *\n   * @return the newly set IAM policy for this project\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/setIamPolicy\">\n   *     Resource Manager setIamPolicy</a>\n   */\n  public Policy replacePolicy(Policy newPolicy) {\n    return resourceManager.replacePolicy(getProjectId(), newPolicy);\n  }\n\n  /**\n   * Returns the permissions that a caller has on this project. You typically don't call this method\n   * if you're using Google Cloud Platform directly to manage permissions. This method is intended\n   * for integration with your proprietary software, such as a customized graphical user interface.\n   * For example, the Cloud Platform Console tests IAM permissions internally to determine which UI\n   * should be available to the logged-in user. Each service that supports IAM lists the possible\n   * permissions; see the <i>Supported Cloud Platform services</i> page below for links to these\n   * lists.\n   *\n   * @return a list of booleans representing whether the caller has the permissions specified (in\n   *     the order of the given permissions)\n   * @throws ResourceManagerException upon failure\n   * @see <a href=\n   *     \"https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects/testIamPermissions\">\n   *     Resource Manager testIamPermissions</a>\n   * @see <a href= \"https://cloud.google.com/iam/#supported_cloud_platform_services\">Supported Cloud\n   *     Platform Services</a>\n   */\n  List<Boolean> testPermissions(List<String> permissions) {\n    return resourceManager.testPermissions(getProjectId(), permissions);\n  }\n\n  @Override\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  @Override\n  public final boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null || !obj.getClass().equals(Project.class)) {\n      return false;\n    }\n    Project other = (Project) obj;\n    return Objects.equals(toPb(), other.toPb()) && Objects.equals(options, other.options);\n  }\n\n  @Override\n  public final int hashCode() {\n    return Objects.hash(super.hashCode(), options);\n  }\n\n  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n    in.defaultReadObject();\n    this.resourceManager = options.getService();\n  }\n\n  static Project fromPb(\n      ResourceManager resourceManager,\n      com.google.api.services.cloudresourcemanager.model.Project answer) {\n    ProjectInfo info = ProjectInfo.fromPb(answer);\n    return new Project(resourceManager, new ProjectInfo.BuilderImpl(info));\n  }\n}\n",
            "error": "",
            "span_id": 7375956342186418725
        },
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/ResourceManagerRpc.java",
            "output": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.spi.v1beta1;\n\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.cloud.ServiceRpc;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.ResourceManagerException;\nimport com.google.common.collect.ImmutableList;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\npublic interface ResourceManagerRpc extends ServiceRpc {\n\n  enum Option {\n    FILTER(\"filter\"),\n    FIELDS(\"fields\"),\n    PAGE_SIZE(\"pageSize\"),\n    PAGE_TOKEN(\"pageToken\");\n\n    private final String value;\n\n    Option(String value) {\n      this.value = value;\n    }\n\n    public String value() {\n      return value;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    <T> T get(Map<Option, ?> options) {\n      return (T) options.get(this);\n    }\n\n    String getString(Map<Option, ?> options) {\n      return get(options);\n    }\n\n    Integer getInt(Map<Option, ?> options) {\n      return get(options);\n    }\n  }\n\n  class ListResult<T> {\n\n    private final Iterable<T> results;\n    private final String pageToken;\n\n    ListResult(String pageToken, Iterable<T> results) {\n      this.results = ImmutableList.copyOf(results);\n      this.pageToken = pageToken;\n    }\n\n    public static <T> ListResult<T> of(String pageToken, Iterable<T> list) {\n      return new ListResult<>(pageToken, list);\n    }\n\n    public Iterable<T> results() {\n      return results;\n    }\n\n    public String pageToken() {\n      return pageToken;\n    }\n  }\n  /**\n   * Creates a new project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project create(Project project);\n\n  /**\n   * Marks the project identified by the specified project ID for deletion.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  void delete(String projectId);\n\n  /**\n   * Retrieves the project identified by the specified project ID. Returns {@code null} if the\n   * project is not found or if the user doesn't have read permissions for the project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project get(String projectId, Map<Option, ?> options);\n\n  /**\n   * Lists the projects visible to the current user.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Tuple<String, Iterable<Project>> list(Map<Option, ?> options);\n\n  /**\n   * Restores the project identified by the specified project ID. Undelete will only succeed if the\n   * project has a lifecycle state of {@code DELETE_REQUESTED} state. The caller must have modify\n   * permissions for this project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  void undelete(String projectId);\n\n  /**\n   * Replaces the attributes of the project. The caller must have modify permissions for this\n   * project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Project replace(Project project);\n\n  /**\n   * Returns the IAM policy associated with a project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Policy getPolicy(String projectId);\n\n  /**\n   * Replaces the IAM policy associated with the given project.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Policy replacePolicy(String projectId, Policy newPolicy);\n\n  /**\n   * Tests whether the caller has the given permissions. Returns a list of booleans corresponding to\n   * whether or not the user has the permission in the same position of input list.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  List<Boolean> testPermissions(String projectId, List<String> permissions);\n\n  /**\n   * Tests whether the caller has the given permissions on the specified Organization. Returns the\n   * permissions and their results.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)\n      throws IOException;\n\n  // TODO(ajaykannan): implement \"Organization\" functionality when available (issue #319)\n\n  /** Clears the Policy from a resource. */\n  void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;\n\n  /**\n   * Gets the effective Policy on a resource.\n   *\n   * <p>This is the result of merging Policies in the resource hierarchy. The returned Policy does\n   * not have an etag set because it is a computed Policy across multiple resources. Subtrees of\n   * Resource Manager resource hierarchy with 'under:' prefix will not be expanded.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException;\n\n  /**\n   * Gets the Policy on a resource.\n   *\n   * <p>If no Policy is set on the resource, a Policy is returned with default values including\n   * POLICY_TYPE_NOT_SET for the policy_type oneof. The etag value can be used with\n   * projects.setOrgPolicy() to create or update a Policy during read-modify-write.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException;\n\n  /**\n   * Lists all the Constraints that can be applied on the specified resource.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  ListResult<Constraint> listAvailableOrgPolicyConstraints(String resource, Map<Option, ?> options)\n      throws IOException;\n\n  /**\n   * Lists all the Policies set for a particular resource.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options) throws IOException;\n\n  /**\n   * Updates the specified Policy on the resource. Creates a new Policy for that Constraint on the\n   * resource if one does not exist.\n   *\n   * <p>Not supplying an etag on the request Policy results in an unconditional write of the Policy.\n   *\n   * @throws ResourceManagerException upon failure\n   */\n  OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException;\n}\n",
            "error": "",
            "span_id": 12212809381857191804
        },
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ProjectInfo.java",
            "output": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.common.base.MoreObjects.firstNonNull;\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.api.client.util.Data;\nimport com.google.api.core.ApiFunction;\nimport com.google.cloud.StringEnumType;\nimport com.google.cloud.StringEnumValue;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\n\n/**\n * A Google Cloud Resource Manager project metadata object. A Project is a high-level Google Cloud\n * Platform entity. It is a container for ACLs, APIs, AppEngine Apps, VMs, and other Google Cloud\n * Platform resources.\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class ProjectInfo implements Serializable {\n\n  public static final DateTimeFormatter DATE_TIME_FORMATTER =\n      DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC);\n  private static final long serialVersionUID = 9148970963697734236L;\n  private final String name;\n  private final String projectId;\n  private final Map<String, String> labels;\n  private final Long projectNumber;\n  private final State state;\n  private final Long createTimeMillis;\n  private final ResourceId parent;\n\n  /** The project lifecycle states. */\n  public static final class State extends StringEnumValue {\n    private static final long serialVersionUID = 869635563976629566L;\n\n    private static final ApiFunction<String, State> CONSTRUCTOR =\n        new ApiFunction<String, State>() {\n          @Override\n          public State apply(String constant) {\n            return new State(constant);\n          }\n        };\n\n    private static final StringEnumType<State> type = new StringEnumType(State.class, CONSTRUCTOR);\n\n    /** Only used/useful for distinguishing unset values. */\n    public static final State LIFECYCLE_STATE_UNSPECIFIED =\n        type.createAndRegister(\"LIFECYCLE_STATE_UNSPECIFIED\");\n\n    /** The normal and active state. */\n    public static final State ACTIVE = type.createAndRegister(\"ACTIVE\");\n\n    /**\n     * The project has been marked for deletion by the user or by the system (Google Cloud\n     * Platform). This can generally be reversed by calling {@link ResourceManager#undelete}.\n     */\n    public static final State DELETE_REQUESTED = type.createAndRegister(\"DELETE_REQUESTED\");\n\n    /**\n     * The process of deleting the project has begun. Reversing the deletion is no longer possible.\n     */\n    public static final State DELETE_IN_PROGRESS = type.createAndRegister(\"DELETE_IN_PROGRESS\");\n\n    private State(String constant) {\n      super(constant);\n    }\n\n    /**\n     * Get the State for the given String constant, and throw an exception if the constant is not\n     * recognized.\n     */\n    public static State valueOfStrict(String constant) {\n      return type.valueOfStrict(constant);\n    }\n\n    /** Get the State for the given String constant, and allow unrecognized values. */\n    public static State valueOf(String constant) {\n      return type.valueOf(constant);\n    }\n\n    /** Return the known values for State. */\n    public static State[] values() {\n      return type.values();\n    }\n  }\n\n  public static class ResourceId implements Serializable {\n\n    private static final long serialVersionUID = -325199985993344726L;\n\n    private final String id;\n    private final String type;\n\n    ResourceId(String id, String type) {\n      this.id = checkNotNull(id);\n      this.type = checkNotNull(type);\n    }\n\n    public static ResourceId of(String id, String type) {\n      return new ResourceId(checkNotNull(id), checkNotNull(type));\n    }\n\n    public String getId() {\n      return id;\n    }\n\n    public String getType() {\n      return type;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n      return obj instanceof ResourceId && Objects.equals(toPb(), ((ResourceId) obj).toPb());\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(id, type);\n    }\n\n    com.google.api.services.cloudresourcemanager.model.ResourceId toPb() {\n      com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb =\n          new com.google.api.services.cloudresourcemanager.model.ResourceId();\n      resourceIdPb.setId(id);\n      resourceIdPb.setType(type.toLowerCase());\n      return resourceIdPb;\n    }\n\n    static ResourceId fromPb(\n        com.google.api.services.cloudresourcemanager.model.ResourceId resourceIdPb) {\n      return new ResourceId(resourceIdPb.getId(), resourceIdPb.getType());\n    }\n  }\n\n  /** Builder for {@code ProjectInfo}. */\n  public abstract static class Builder {\n\n    /**\n     * Set the user-assigned name of the project.\n     *\n     * <p>This field is optional and can remain unset. Allowed characters are: lowercase and\n     * uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point.\n     * This field can be changed after project creation.\n     */\n    public abstract Builder setName(String name);\n\n    /**\n     * Set the unique, user-assigned ID of the project.\n     *\n     * <p>The ID must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter.\n     * Trailing hyphens are prohibited. This field cannot be changed after the server creates the\n     * project.\n     */\n    public abstract Builder setProjectId(String projectId);\n\n    /**\n     * Add a label associated with this project.\n     *\n     * <p>See {@link #labels} for label restrictions.\n     */\n    public abstract Builder addLabel(String key, String value);\n\n    /** Remove a label associated with this project. */\n    public abstract Builder removeLabel(String key);\n\n    /** Clear the labels associated with this project. */\n    public abstract Builder clearLabels();\n\n    /**\n     * Set the labels associated with this project.\n     *\n     * <p>Label keys must be between 1 and 63 characters long and must conform to the following\n     * regular expression: [a-z]([-a-z0-9]*[a-z0-9])?. Label values must be between 0 and 63\n     * characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?. No\n     * more than 256 labels can be associated with a given resource. This field can be changed after\n     * project creation.\n     */\n    public abstract Builder setLabels(Map<String, String> labels);\n\n    abstract Builder setProjectNumber(Long projectNumber);\n\n    abstract Builder setState(State state);\n\n    abstract Builder setCreateTimeMillis(Long createTimeMillis);\n\n    public abstract Builder setParent(ResourceId parent);\n\n    public abstract ProjectInfo build();\n  }\n\n  static class BuilderImpl extends Builder {\n\n    private String name;\n    private String projectId;\n    private Map<String, String> labels = new HashMap<>();\n    private Long projectNumber;\n    private State state;\n    private Long createTimeMillis;\n    private ResourceId parent;\n\n    BuilderImpl(String projectId) {\n      this.projectId = projectId;\n    }\n\n    BuilderImpl(ProjectInfo info) {\n      this.name = info.name;\n      this.projectId = info.projectId;\n      this.labels.putAll(info.labels);\n      this.projectNumber = info.projectNumber;\n      this.state = info.state;\n      this.createTimeMillis = info.createTimeMillis;\n      this.parent = info.parent;\n    }\n\n    @Override\n    public Builder setName(String name) {\n      this.name = firstNonNull(name, Data.<String>nullOf(String.class));\n      return this;\n    }\n\n    @Override\n    public Builder setProjectId(String projectId) {\n      this.projectId = checkNotNull(projectId);\n      return this;\n    }\n\n    @Override\n    public Builder addLabel(String key, String value) {\n      this.labels.put(key, value);\n      return this;\n    }\n\n    @Override\n    public Builder removeLabel(String key) {\n      this.labels.remove(key);\n      return this;\n    }\n\n    @Override\n    public Builder clearLabels() {\n      this.labels.clear();\n      return this;\n    }\n\n    @Override\n    public Builder setLabels(Map<String, String> labels) {\n      this.labels = Maps.newHashMap(checkNotNull(labels));\n      return this;\n    }\n\n    @Override\n    Builder setProjectNumber(Long projectNumber) {\n      this.projectNumber = projectNumber;\n      return this;\n    }\n\n    @Override\n    Builder setState(State state) {\n      this.state = state;\n      return this;\n    }\n\n    @Override\n    Builder setCreateTimeMillis(Long createTimeMillis) {\n      this.createTimeMillis = createTimeMillis;\n      return this;\n    }\n\n    @Override\n    public Builder setParent(ResourceId parent) {\n      this.parent = parent;\n      return this;\n    }\n\n    @Override\n    public ProjectInfo build() {\n      return new ProjectInfo(this);\n    }\n  }\n\n  ProjectInfo(BuilderImpl builder) {\n    this.name = builder.name;\n    this.projectId = builder.projectId;\n    this.labels = ImmutableMap.copyOf(builder.labels);\n    this.projectNumber = builder.projectNumber;\n    this.state = builder.state;\n    this.createTimeMillis = builder.createTimeMillis;\n    this.parent = builder.parent;\n  }\n\n  /**\n   * Get the unique, user-assigned ID of the project.\n   *\n   * <p>This field cannot be changed after the server creates the project.\n   */\n  public String getProjectId() {\n    return projectId;\n  }\n\n  /**\n   * Get the user-assigned name of the project.\n   *\n   * <p>This field is optional, can remain unset, and can be changed after project creation.\n   */\n  public String getName() {\n    return Data.isNull(name) ? null : name;\n  }\n\n  /**\n   * Get number uniquely identifying the project.\n   *\n   * <p>This field is set by the server and is read-only.\n   */\n  public Long getProjectNumber() {\n    return projectNumber;\n  }\n\n  /** Get the immutable map of labels associated with this project. */\n  public Map<String, String> getLabels() {\n    return labels;\n  }\n\n  /**\n   * Get the project's lifecycle state.\n   *\n   * <p>This is a read-only field. To change the lifecycle state of your project, use the {@code\n   * delete} or {@code undelete} method.\n   */\n  public State getState() {\n    return state;\n  }\n\n  ResourceId getParent() {\n    return parent;\n  }\n\n  /**\n   * Get the project's creation time (in milliseconds).\n   *\n   * <p>This field is set by the server and is read-only.\n   */\n  public Long getCreateTimeMillis() {\n    return createTimeMillis;\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    return obj == this\n        || obj != null\n            && obj.getClass().equals(ProjectInfo.class)\n            && Objects.equals(toPb(), ((ProjectInfo) obj).toPb());\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(name, projectId, labels, projectNumber, state, createTimeMillis, parent);\n  }\n\n  public static Builder newBuilder(String id) {\n    return new BuilderImpl(id);\n  }\n\n  public Builder toBuilder() {\n    return new BuilderImpl(this);\n  }\n\n  com.google.api.services.cloudresourcemanager.model.Project toPb() {\n    com.google.api.services.cloudresourcemanager.model.Project projectPb =\n        new com.google.api.services.cloudresourcemanager.model.Project();\n    projectPb.setName(name);\n    projectPb.setProjectId(projectId);\n    projectPb.setLabels(labels);\n    projectPb.setProjectNumber(projectNumber);\n    if (state != null) {\n      projectPb.setLifecycleState(state.toString());\n    }\n    if (createTimeMillis != null) {\n      projectPb.setCreateTime(\n          DateTimeFormatter.ISO_DATE_TIME\n              .withZone(ZoneOffset.UTC)\n              .format(Instant.ofEpochMilli(createTimeMillis)));\n    }\n    if (parent != null) {\n      projectPb.setParent(parent.toPb());\n    }\n    return projectPb;\n  }\n\n  static ProjectInfo fromPb(com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n    Builder builder =\n        newBuilder(projectPb.getProjectId()).setProjectNumber(projectPb.getProjectNumber());\n    if (projectPb.getName() != null && !projectPb.getName().equals(\"Unnamed\")) {\n      builder.setName(projectPb.getName());\n    }\n    if (projectPb.getLabels() != null) {\n      builder.setLabels(projectPb.getLabels());\n    }\n    if (projectPb.getLifecycleState() != null) {\n      builder.setState(State.valueOf(projectPb.getLifecycleState()));\n    }\n    if (projectPb.getCreateTime() != null) {\n      builder.setCreateTimeMillis(\n          DATE_TIME_FORMATTER.parse(projectPb.getCreateTime(), Instant.FROM).toEpochMilli());\n    }\n    if (projectPb.getParent() != null) {\n      builder.setParent(ResourceId.fromPb(projectPb.getParent()));\n    }\n    return builder.build();\n  }\n}\n",
            "error": "",
            "span_id": 12057750847359048923
        },
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ResourceManagerImpl.java",
            "output": "/*\n * Copyright 2015 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.Preconditions.checkArgument;\n\nimport com.google.api.gax.paging.Page;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.cloud.BaseService;\nimport com.google.cloud.PageImpl;\nimport com.google.cloud.PageImpl.NextPageFetcher;\nimport com.google.cloud.Policy;\nimport com.google.cloud.RetryHelper.RetryHelperException;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc;\nimport com.google.cloud.resourcemanager.spi.v1beta1.ResourceManagerRpc.ListResult;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Maps;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class ResourceManagerImpl extends BaseService<ResourceManagerOptions>\n    implements ResourceManager {\n\n  private final ResourceManagerRpc resourceManagerRpc;\n\n  ResourceManagerImpl(ResourceManagerOptions options) {\n    super(options);\n    resourceManagerRpc = options.getResourceManagerRpcV1Beta1();\n  }\n\n  @Override\n  public Project create(final ProjectInfo project) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.create(project.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void delete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.delete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project get(final String projectId, ProjectGetOption... options) {\n    final Map<ResourceManagerRpc.Option, ?> optionsMap = optionMap(options);\n    try {\n      com.google.api.services.cloudresourcemanager.model.Project answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.get(projectId, optionsMap);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : Project.fromPb(this, answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ProjectPageFetcher implements NextPageFetcher<Project> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ProjectPageFetcher(\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<Project> getNextPage() {\n      return listProjects(serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<Project> list(ProjectListOption... options) {\n    return listProjects(getOptions(), optionMap(options));\n  }\n\n  private static Page<Project> listProjects(\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      Tuple<String, Iterable<com.google.api.services.cloudresourcemanager.model.Project>> result =\n          runWithRetries(\n              new Callable<\n                  Tuple<\n                      String,\n                      Iterable<com.google.api.services.cloudresourcemanager.model.Project>>>() {\n                @Override\n                public Tuple<\n                        String,\n                        Iterable<com.google.api.services.cloudresourcemanager.model.Project>>\n                    call() {\n                  return serviceOptions.getResourceManagerRpcV1Beta1().list(optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = result.x();\n      Iterable<Project> projects =\n          result.y() == null\n              ? ImmutableList.<Project>of()\n              : Iterables.transform(\n                  result.y(),\n                  new Function<\n                      com.google.api.services.cloudresourcemanager.model.Project, Project>() {\n                    @Override\n                    public Project apply(\n                        com.google.api.services.cloudresourcemanager.model.Project projectPb) {\n                      return new Project(\n                          serviceOptions.getService(),\n                          new ProjectInfo.BuilderImpl(ProjectInfo.fromPb(projectPb)));\n                    }\n                  });\n      return new PageImpl<>(\n          new ProjectPageFetcher(serviceOptions, cursor, optionsMap), cursor, projects);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Project replace(final ProjectInfo newProject) {\n    try {\n      return Project.fromPb(\n          this,\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Project>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Project call() {\n                  return resourceManagerRpc.replace(newProject.toPb());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void undelete(final String projectId) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() {\n              resourceManagerRpc.undelete(projectId);\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(final String projectId) {\n    try {\n      com.google.api.services.cloudresourcemanager.model.Policy answer =\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.getPolicy(projectId);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock());\n      return answer == null ? null : PolicyMarshaller.INSTANCE.fromPb(answer);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(final String projectId, final Policy newPolicy) {\n    try {\n      return PolicyMarshaller.INSTANCE.fromPb(\n          runWithRetries(\n              new Callable<com.google.api.services.cloudresourcemanager.model.Policy>() {\n                @Override\n                public com.google.api.services.cloudresourcemanager.model.Policy call() {\n                  return resourceManagerRpc.replacePolicy(\n                      projectId, PolicyMarshaller.INSTANCE.toPb(newPolicy));\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(final String projectId, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<List<Boolean>>() {\n            @Override\n            public List<Boolean> call() {\n              return resourceManagerRpc.testPermissions(projectId, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(\n      final String resource, final List<String> permissions) {\n    try {\n      return runWithRetries(\n          new Callable<Map<String, Boolean>>() {\n            @Override\n            public Map<String, Boolean> call() throws IOException {\n              return resourceManagerRpc.testOrgPermissions(resource, permissions);\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      runWithRetries(\n          new Callable<Void>() {\n            @Override\n            public Void call() throws IOException {\n              resourceManagerRpc.clearOrgPolicy(resource, orgPolicy.toProtobuf());\n              return null;\n            }\n          },\n          getOptions().getRetrySettings(),\n          EXCEPTION_HANDLER,\n          getOptions().getClock());\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getEffectiveOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getEffectiveOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo getOrgPolicy(final String resource, final String constraint) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.getOrgPolicy(resource, constraint);\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class ConstraintPageFetcher implements NextPageFetcher<ConstraintInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    ConstraintPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<ConstraintInfo> getNextPage() {\n      return listAvailableOrgPolicyConstraints(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      String resource, ListOption... options) {\n    return listAvailableOrgPolicyConstraints(resource, getOptions(), optionMap(options));\n  }\n\n  private static Page<ConstraintInfo> listAvailableOrgPolicyConstraints(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<Constraint> constraintList =\n          runWithRetries(\n              new Callable<ListResult<Constraint>>() {\n                @Override\n                public ListResult<Constraint> call() throws IOException {\n                  return rpc.listAvailableOrgPolicyConstraints(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = constraintList.pageToken();\n      Iterable<ConstraintInfo> constraints =\n          constraintList.results() == null\n              ? ImmutableList.<ConstraintInfo>of()\n              : Iterables.transform(\n                  constraintList.results(), ConstraintInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new ConstraintPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          constraints);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private static class OrgPolicyPageFetcher implements NextPageFetcher<OrgPolicyInfo> {\n\n    private static final long serialVersionUID = 2158209410430566961L;\n    private final String resource;\n    private final Map<ResourceManagerRpc.Option, ?> requestOptions;\n    private final ResourceManagerOptions serviceOptions;\n\n    OrgPolicyPageFetcher(\n        String resource,\n        ResourceManagerOptions serviceOptions,\n        String cursor,\n        Map<ResourceManagerRpc.Option, ?> optionMap) {\n      this.resource = resource;\n      this.requestOptions =\n          PageImpl.nextRequestOptions(ResourceManagerRpc.Option.PAGE_TOKEN, cursor, optionMap);\n      this.serviceOptions = serviceOptions;\n    }\n\n    @Override\n    public Page<OrgPolicyInfo> getNextPage() {\n      return listOrgPolicies(resource, serviceOptions, requestOptions);\n    }\n  }\n\n  @Override\n  public Page<OrgPolicyInfo> listOrgPolicies(final String resource, ListOption... options) {\n    return listOrgPolicies(resource, getOptions(), optionMap(options));\n  }\n\n  private static PageImpl<OrgPolicyInfo> listOrgPolicies(\n      final String resource,\n      final ResourceManagerOptions serviceOptions,\n      final Map<ResourceManagerRpc.Option, ?> optionsMap) {\n    try {\n      final ResourceManagerRpc rpc = serviceOptions.getResourceManagerRpcV1Beta1();\n      ListResult<OrgPolicy> orgPolicy =\n          runWithRetries(\n              new Callable<ListResult<OrgPolicy>>() {\n                @Override\n                public ListResult<OrgPolicy> call() throws IOException {\n                  return rpc.listOrgPolicies(resource, optionsMap);\n                }\n              },\n              serviceOptions.getRetrySettings(),\n              EXCEPTION_HANDLER,\n              serviceOptions.getClock());\n      String cursor = orgPolicy.pageToken();\n      Iterable<OrgPolicyInfo> orgPolicies =\n          orgPolicy.results() == null\n              ? ImmutableList.<OrgPolicyInfo>of()\n              : Iterables.transform(orgPolicy.results(), OrgPolicyInfo.FROM_PROTOBUF_FUNCTION);\n      return new PageImpl<>(\n          new OrgPolicyPageFetcher(resource, serviceOptions, cursor, optionsMap),\n          cursor,\n          orgPolicies);\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicyInfo replaceOrgPolicy(final String resource, final OrgPolicyInfo orgPolicy) {\n    try {\n      return OrgPolicyInfo.fromProtobuf(\n          runWithRetries(\n              new Callable<OrgPolicy>() {\n                @Override\n                public OrgPolicy call() throws IOException {\n                  return resourceManagerRpc.replaceOrgPolicy(resource, orgPolicy.toProtobuf());\n                }\n              },\n              getOptions().getRetrySettings(),\n              EXCEPTION_HANDLER,\n              getOptions().getClock()));\n    } catch (RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  private Map<ResourceManagerRpc.Option, ?> optionMap(Option... options) {\n    Map<ResourceManagerRpc.Option, Object> temp = Maps.newEnumMap(ResourceManagerRpc.Option.class);\n    for (Option option : options) {\n      Object prev = temp.put(option.getRpcOption(), option.getValue());\n      checkArgument(prev == null, \"Duplicate option %s\", option);\n    }\n    return ImmutableMap.copyOf(temp);\n  }\n}\n",
            "error": "",
            "span_id": 10086094154098288480
        },
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/testing/LocalResourceManagerHelper.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.testing;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static java.net.HttpURLConnection.HTTP_OK;\n\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.cloud.NoCredentials;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Objects;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.io.ByteStreams;\nimport com.sun.net.httpserver.Headers;\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpServer;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.zip.GZIPInputStream;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.ZoneOffset;\nimport org.threeten.bp.format.DateTimeFormatter;\n\n/**\n * Utility to create a local Resource Manager mock for testing.\n *\n * <p>The mock runs in a separate thread, listening for HTTP requests on the local machine at an\n * ephemeral port. While this mock attempts to simulate the Cloud Resource Manager, there are some\n * divergences in behavior. The following is a non-exhaustive list of some of those behavioral\n * differences:\n *\n * <ul>\n *   <li>This mock assumes you have adequate permissions for any action. Related to this,\n *       <i>testIamPermissions</i> always indicates that the caller has all permissions listed in\n *       the request.\n *   <li>IAM policies are set to an empty policy with version 0 (only legacy roles supported) upon\n *       project creation. The actual service will not have an empty list of bindings and may also\n *       set your version to 1.\n *   <li>There is no input validation for the policy provided when replacing a policy or calling\n *       testIamPermissions.\n *   <li>In this mock, projects never move from the <i>DELETE_REQUESTED</i> lifecycle state to\n *       <i>DELETE_IN_PROGRESS</i> without an explicit call to the utility method {@link\n *       #changeLifecycleState}. Similarly, a project is never completely removed without an\n *       explicit call to the utility method {@link #removeProject}.\n *   <li>The messages in the error responses given by this mock do not necessarily match the\n *       messages given by the actual service.\n * </ul>\n *\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\n@SuppressWarnings(\"restriction\")\npublic class LocalResourceManagerHelper {\n  private static final Logger log = Logger.getLogger(LocalResourceManagerHelper.class.getName());\n  private static final JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\n  private static final Random PROJECT_NUMBER_GENERATOR = new Random();\n  private static final String VERSION = \"v1\";\n  private static final String CONTEXT = \"/\" + VERSION + \"/projects\";\n  private static final String OPERATION_CONTEXT = \"/\" + VERSION + \"/operations\";\n  private static final URI BASE_CONTEXT;\n  private static final Set<String> SUPPORTED_COMPRESSION_ENCODINGS =\n      ImmutableSet.of(\"gzip\", \"x-gzip\");\n  private static final Pattern LIST_FIELDS_PATTERN =\n      Pattern.compile(\"(.*?)projects\\\\((.*?)\\\\)(.*?)\");\n  private static final String[] NO_FIELDS = {};\n\n  static {\n    try {\n      BASE_CONTEXT = new URI(CONTEXT);\n    } catch (URISyntaxException e) {\n      throw new RuntimeException(\n          \"Could not initialize LocalResourceManagerHelper due to URISyntaxException.\", e);\n    }\n  }\n\n  // see https://cloud.google.com/resource-manager/reference/rest/v1beta1/projects\n  private static final Set<Character> PERMISSIBLE_PROJECT_NAME_PUNCTUATION =\n      ImmutableSet.of('-', '\\'', '\"', ' ', '!');\n\n  private final HttpServer server;\n  private final ConcurrentSkipListMap<String, Project> projects = new ConcurrentSkipListMap<>();\n  private final Map<String, Policy> policies = new HashMap<>();\n  private final int port;\n\n  private static class Response {\n    private final int code;\n    private final String body;\n\n    Response(int code, String body) {\n      this.code = code;\n      this.body = body;\n    }\n\n    int code() {\n      return code;\n    }\n\n    String body() {\n      return body;\n    }\n  }\n\n  private enum Error {\n    ABORTED(409, \"global\", \"aborted\", \"ABORTED\"),\n    ALREADY_EXISTS(409, \"global\", \"alreadyExists\", \"ALREADY_EXISTS\"),\n    PERMISSION_DENIED(403, \"global\", \"forbidden\", \"PERMISSION_DENIED\"),\n    FAILED_PRECONDITION(400, \"global\", \"failedPrecondition\", \"FAILED_PRECONDITION\"),\n    INVALID_ARGUMENT(400, \"global\", \"badRequest\", \"INVALID_ARGUMENT\"),\n    BAD_REQUEST(400, \"global\", \"badRequest\", \"BAD_REQUEST\"),\n    INTERNAL_ERROR(500, \"global\", \"internalError\", \"INTERNAL_ERROR\");\n\n    private final int code;\n    private final String domain;\n    private final String reason;\n    private final String status;\n\n    Error(int code, String domain, String reason, String status) {\n      this.code = code;\n      this.domain = domain;\n      this.reason = reason;\n      this.status = status;\n    }\n\n    Response response(String message) {\n      try {\n        return new Response(code, toJson(message));\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\"Error when generating JSON error response\");\n      }\n    }\n\n    private String toJson(String message) throws IOException {\n      Map<String, Object> errors = new HashMap<>();\n      errors.put(\"domain\", domain);\n      errors.put(\"message\", message);\n      errors.put(\"reason\", reason);\n      Map<String, Object> args = new HashMap<>();\n      args.put(\"errors\", ImmutableList.of(errors));\n      args.put(\"code\", code);\n      args.put(\"message\", message);\n      args.put(\"status\", status);\n      return jsonFactory.toString(ImmutableMap.of(\"error\", args));\n    }\n  }\n\n  private class RequestHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) {\n      // see https://cloud.google.com/resource-manager/reference/rest/\n      Response response;\n      String path = BASE_CONTEXT.relativize(exchange.getRequestURI()).getPath();\n      String requestMethod = exchange.getRequestMethod();\n      try {\n        switch (requestMethod) {\n          case \"POST\":\n            response = handlePost(exchange, path);\n            break;\n          case \"DELETE\":\n            response = delete(projectIdFromUri(path));\n            break;\n          case \"GET\":\n            if (!path.isEmpty()) {\n              response =\n                  get(projectIdFromUri(path), parseFields(exchange.getRequestURI().getQuery()));\n            } else {\n              response = list(parseListOptions(exchange.getRequestURI().getQuery()));\n            }\n            break;\n          case \"PUT\":\n            String requestBody =\n                decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n            response =\n                replace(projectIdFromUri(path), jsonFactory.fromString(requestBody, Project.class));\n            break;\n          default:\n            response =\n                Error.BAD_REQUEST.response(\n                    \"The server could not understand the following request URI: \"\n                        + requestMethod\n                        + \" \"\n                        + path);\n        }\n      } catch (IOException e) {\n        response = Error.BAD_REQUEST.response(e.getMessage());\n      }\n      writeResponse(exchange, response);\n    }\n  }\n\n  private Response handlePost(HttpExchange exchange, String path) throws IOException {\n    String requestBody = decodeContent(exchange.getRequestHeaders(), exchange.getRequestBody());\n    if (!path.contains(\":\")) {\n      return create(jsonFactory.fromString(requestBody, Project.class));\n    } else {\n      switch (path.split(\":\", 2)[1]) {\n        case \"undelete\":\n          return undelete(projectIdFromUri(path));\n        case \"getIamPolicy\":\n          return getPolicy(projectIdFromUri(path));\n        case \"setIamPolicy\":\n          return replacePolicy(\n              projectIdFromUri(path),\n              jsonFactory.fromString(requestBody, SetIamPolicyRequest.class).getPolicy());\n        case \"testIamPermissions\":\n          return testPermissions(\n              projectIdFromUri(path),\n              jsonFactory\n                  .fromString(requestBody, TestIamPermissionsRequest.class)\n                  .getPermissions());\n        default:\n          return Error.BAD_REQUEST.response(\n              \"The server could not understand the following request URI: POST \" + path);\n      }\n    }\n  }\n\n  private class OperationRequestHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) {\n      // see https://cloud.google.com/resource-manager/reference/rest/\n      String projectId;\n      try {\n        projectId = new URI(OPERATION_CONTEXT).relativize(exchange.getRequestURI()).getPath();\n      } catch (URISyntaxException e) {\n        throw new IllegalStateException(e);\n      }\n      Response response;\n      String requestMethod = exchange.getRequestMethod();\n      switch (requestMethod) {\n        case \"GET\":\n          Project project = projects.get(projectId);\n          if (project == null) {\n            response = Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n            break;\n          }\n          try {\n            response =\n                new Response(\n                    HTTP_OK,\n                    jsonFactory.toString(new Operation().setDone(true).setResponse(project)));\n          } catch (IOException e) {\n            response =\n                Error.INTERNAL_ERROR.response(\n                    \"Error when serializing project \" + project.getProjectId());\n          }\n          break;\n        default:\n          response =\n              Error.BAD_REQUEST.response(\n                  \"The server could not understand the following request URI: \"\n                      + requestMethod\n                      + \" \"\n                      + projectId);\n      }\n      writeResponse(exchange, response);\n    }\n  }\n\n  private static void writeResponse(HttpExchange exchange, Response response) {\n    exchange.getResponseHeaders().set(\"Content-type\", \"application/json; charset=UTF-8\");\n    OutputStream outputStream = exchange.getResponseBody();\n    try {\n      exchange.getResponseHeaders().add(\"Connection\", \"close\");\n      exchange.sendResponseHeaders(response.code(), response.body().length());\n      outputStream.write(response.body().getBytes(StandardCharsets.UTF_8));\n      outputStream.close();\n    } catch (IOException e) {\n      log.log(Level.WARNING, \"IOException encountered when sending response.\", e);\n    }\n  }\n\n  private static String decodeContent(Headers headers, InputStream inputStream) throws IOException {\n    List<String> contentEncoding = headers.get(\"Content-encoding\");\n    InputStream input = inputStream;\n    try {\n      if (contentEncoding != null && !contentEncoding.isEmpty()) {\n        String encoding = contentEncoding.get(0);\n        if (SUPPORTED_COMPRESSION_ENCODINGS.contains(encoding)) {\n          input = new GZIPInputStream(inputStream);\n        } else if (!encoding.equals(\"identity\")) {\n          throw new IOException(\n              \"The request has the following unsupported HTTP content encoding: \" + encoding);\n        }\n      }\n      return new String(ByteStreams.toByteArray(input), StandardCharsets.UTF_8);\n    } catch (IOException e) {\n      throw new IOException(\"Exception encountered when decoding request content.\", e);\n    }\n  }\n\n  private static String projectIdFromUri(String path) throws IOException {\n    if (path.isEmpty()) {\n      throw new IOException(\"The URI path '\" + path + \"' doesn't have a project ID.\");\n    }\n    return path.split(\":\")[0];\n  }\n\n  private static String[] parseFields(String query) {\n    if (query != null && !query.isEmpty()) {\n      String[] querySplit = query.split(\"=\");\n      return querySplit.length > 1 ? querySplit[1].split(\",\") : null;\n    }\n    return null;\n  }\n\n  private static Map<String, Object> parseListOptions(String query) throws IOException {\n    Map<String, Object> options = new HashMap<>();\n    if (query != null) {\n      String[] args = query.split(\"&\");\n      for (String arg : args) {\n        String[] argEntry = arg.split(\"=\");\n        switch (argEntry[0]) {\n          case \"fields\":\n            // List fields are in the form \"projects(field1, field2, ...),nextPageToken\"\n            Matcher matcher = LIST_FIELDS_PATTERN.matcher(argEntry[1]);\n            if (matcher.matches()) {\n              options.put(\"projectFields\", matcher.group(2).split(\",\"));\n              options.put(\"listFields\", (matcher.group(1) + matcher.group(3)).split(\",\"));\n            } else {\n              options.put(\"projectFields\", NO_FIELDS);\n              options.put(\"listFields\", argEntry[1].split(\",\"));\n            }\n            break;\n          case \"filter\":\n            options.put(\"filter\", argEntry[1].split(\" \"));\n            break;\n          case \"pageToken\":\n            options.put(\"pageToken\", argEntry[1]);\n            break;\n          case \"pageSize\":\n            int pageSize = Integer.parseInt(argEntry[1]);\n            if (pageSize < 1) {\n              throw new IOException(\"Page size must be greater than 0.\");\n            }\n            options.put(\"pageSize\", pageSize);\n            break;\n        }\n      }\n    }\n    return options;\n  }\n\n  private static String checkForProjectErrors(Project project) {\n    if (project.getProjectId() == null) {\n      return \"Project ID cannot be empty.\";\n    }\n    if (!isValidIdOrLabel(project.getProjectId(), 6, 30)) {\n      return \"Project \"\n          + project.getProjectId()\n          + \" has an invalid ID.\"\n          + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n          + VERSION\n          + \"/projects\"\n          + \" for more information.\";\n    }\n    if (project.getName() != null) {\n      for (char c : project.getName().toCharArray()) {\n        if (!PERMISSIBLE_PROJECT_NAME_PUNCTUATION.contains(c) && !Character.isLetterOrDigit(c)) {\n          return \"Project \"\n              + project.getProjectId()\n              + \" has an invalid name.\"\n              + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n              + VERSION\n              + \"/projects for more information.\";\n        }\n      }\n    }\n    if (project.getLabels() != null) {\n      if (project.getLabels().size() > 256) {\n        return \"Project \" + project.getProjectId() + \" exceeds the limit of 256 labels.\";\n      }\n      for (Map.Entry<String, String> entry : project.getLabels().entrySet()) {\n        if (!isValidIdOrLabel(entry.getKey(), 1, 63)\n            || !isValidIdOrLabel(entry.getValue(), 0, 63)) {\n          return \"Project \"\n              + project.getProjectId()\n              + \" has an invalid label entry.\"\n              + \" See https://cloud.google.com/resource-manager/reference/rest/\"\n              + VERSION\n              + \"/projects for more information.\";\n        }\n      }\n    }\n    return null;\n  }\n\n  private static boolean isValidIdOrLabel(String value, int minLength, int maxLength) {\n    for (char c : value.toCharArray()) {\n      if (c != '-' && !Character.isDigit(c) && !Character.isLowerCase(c)) {\n        return false;\n      }\n    }\n    if (!value.isEmpty() && (!Character.isLetter(value.charAt(0)) || value.endsWith(\"-\"))) {\n      return false;\n    }\n    return value.length() >= minLength && value.length() <= maxLength;\n  }\n\n  synchronized Response create(Project project) {\n    String customErrorMessage = checkForProjectErrors(project);\n    if (customErrorMessage != null) {\n      return Error.INVALID_ARGUMENT.response(customErrorMessage);\n    } else {\n      project.setLifecycleState(\"ACTIVE\");\n      project.setProjectNumber(Math.abs(PROJECT_NUMBER_GENERATOR.nextLong() % Long.MAX_VALUE));\n      project.setCreateTime(\n          DateTimeFormatter.ISO_DATE_TIME\n              .withZone(ZoneOffset.UTC)\n              .format(Instant.ofEpochMilli(System.currentTimeMillis())));\n      if (projects.putIfAbsent(project.getProjectId(), project) != null) {\n        return Error.ALREADY_EXISTS.response(\n            \"A project with the same project ID (\" + project.getProjectId() + \") already exists.\");\n      }\n      Policy emptyPolicy =\n          new Policy()\n              .setBindings(Collections.<Binding>emptyList())\n              .setEtag(UUID.randomUUID().toString())\n              .setVersion(0);\n      policies.put(project.getProjectId(), emptyPolicy);\n      try {\n        // Pretend it's not done yet.\n        String createdProjectStr =\n            jsonFactory.toString(\n                new Operation().setDone(false).setName(\"operations/\" + project.getProjectId()));\n        return new Response(HTTP_OK, createdProjectStr);\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\"Error serializing project \" + project.getProjectId());\n      }\n    }\n  }\n\n  synchronized Response delete(String projectId) {\n    Project project = projects.get(projectId);\n    if (project == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when deleting \" + projectId + \" because the project was not found.\");\n    }\n    if (!project.getLifecycleState().equals(\"ACTIVE\")) {\n      return Error.FAILED_PRECONDITION.response(\n          \"Error when deleting \" + projectId + \" because the lifecycle state was not ACTIVE.\");\n    } else {\n      project.setLifecycleState(\"DELETE_REQUESTED\");\n      return new Response(HTTP_OK, \"{}\");\n    }\n  }\n\n  Response get(String projectId, String[] fields) {\n    Project project = projects.get(projectId);\n    if (project != null) {\n      try {\n        return new Response(HTTP_OK, jsonFactory.toString(extractFields(project, fields)));\n      } catch (IOException e) {\n        return Error.INTERNAL_ERROR.response(\n            \"Error when serializing project \" + project.getProjectId());\n      }\n    } else {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n  }\n\n  Response list(Map<String, Object> options) {\n    List<String> projectsSerialized = new ArrayList<>();\n    String[] filters = (String[]) options.get(\"filter\");\n    if (filters != null && !isValidFilter(filters)) {\n      return Error.INVALID_ARGUMENT.response(\"Could not parse the filter.\");\n    }\n    String[] projectFields = (String[]) options.get(\"projectFields\");\n    int count = 0;\n    String pageToken = (String) options.get(\"pageToken\");\n    Integer pageSize = (Integer) options.get(\"pageSize\");\n    String nextPageToken = null;\n    Map<String, Project> projectsToScan = projects;\n    if (pageToken != null) {\n      projectsToScan = projects.tailMap(pageToken);\n    }\n    for (Project p : projectsToScan.values()) {\n      if (pageSize != null && count >= pageSize) {\n        nextPageToken = p.getProjectId();\n        break;\n      }\n      boolean includeProject = includeProject(p, filters);\n      if (includeProject) {\n        count++;\n        try {\n          projectsSerialized.add(jsonFactory.toString(extractFields(p, projectFields)));\n        } catch (IOException e) {\n          return Error.INTERNAL_ERROR.response(\n              \"Error when serializing project \" + p.getProjectId());\n        }\n      }\n    }\n    String[] listFields = (String[]) options.get(\"listFields\");\n    StringBuilder responseBody = new StringBuilder();\n    responseBody.append('{');\n    // If fields parameter is set but no project field is selected we must return no projects.\n    if (!(projectFields != null && projectFields.length == 0)) {\n      responseBody.append(\"\\\"projects\\\": [\");\n      Joiner.on(\",\").appendTo(responseBody, projectsSerialized);\n      responseBody.append(']');\n    }\n    if (nextPageToken != null\n        && (listFields == null || ImmutableSet.copyOf(listFields).contains(\"nextPageToken\"))) {\n      if (responseBody.length() > 1) {\n        responseBody.append(',');\n      }\n      responseBody.append(\"\\\"nextPageToken\\\": \\\"\");\n      responseBody.append(nextPageToken);\n      responseBody.append('\"');\n    }\n    responseBody.append('}');\n    return new Response(HTTP_OK, responseBody.toString());\n  }\n\n  private static boolean isValidFilter(String[] filters) {\n    for (String filter : filters) {\n      String field = filter.toLowerCase().split(\":\")[0];\n      if (!(\"id\".equals(field) || \"name\".equals(field) || field.startsWith(\"labels.\"))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static boolean includeProject(Project project, String[] filters) {\n    if (filters == null) {\n      return true;\n    }\n    for (String filter : filters) {\n      String[] filterEntry = filter.toLowerCase().split(\":\");\n      String filterType = filterEntry[0];\n      if (\"id\".equals(filterType)) {\n        if (!satisfiesFilter(project.getProjectId(), filterEntry[1])) {\n          return false;\n        }\n      } else if (\"name\".equals(filterType)) {\n        if (!satisfiesFilter(project.getName(), filterEntry[1])) {\n          return false;\n        }\n      } else if (filterType.startsWith(\"labels.\")) {\n        String labelKey = filterType.substring(\"labels.\".length());\n        if (project.getLabels() != null) {\n          String labelValue = project.getLabels().get(labelKey);\n          if (!satisfiesFilter(labelValue, filterEntry[1])) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  private static boolean satisfiesFilter(String projectValue, String filterValue) {\n    if (projectValue == null) {\n      return false;\n    }\n    return \"*\".equals(filterValue) || filterValue.equals(projectValue.toLowerCase());\n  }\n\n  private static Project extractFields(Project fullProject, String[] fields) {\n    if (fields == null) {\n      return fullProject;\n    }\n    Project project = new Project();\n    for (String field : fields) {\n      switch (field) {\n        case \"createTime\":\n          project.setCreateTime(fullProject.getCreateTime());\n          break;\n        case \"labels\":\n          project.setLabels(fullProject.getLabels());\n          break;\n        case \"lifecycleState\":\n          project.setLifecycleState(fullProject.getLifecycleState());\n          break;\n        case \"name\":\n          project.setName(fullProject.getName());\n          break;\n        case \"parent\":\n          project.setParent(fullProject.getParent());\n          break;\n        case \"projectId\":\n          project.setProjectId(fullProject.getProjectId());\n          break;\n        case \"projectNumber\":\n          project.setProjectNumber(fullProject.getProjectNumber());\n          break;\n      }\n    }\n    return project;\n  }\n\n  synchronized Response replace(String projectId, Project project) {\n    Project originalProject = projects.get(projectId);\n    if (originalProject == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when replacing \" + projectId + \" because the project was not found.\");\n    } else if (!originalProject.getLifecycleState().equals(\"ACTIVE\")) {\n      return Error.FAILED_PRECONDITION.response(\n          \"Error when replacing \" + projectId + \" because the lifecycle state was not ACTIVE.\");\n    } else if (!Objects.equal(originalProject.getParent(), project.getParent())) {\n      return Error.INVALID_ARGUMENT.response(\n          \"The server currently only supports setting the parent once \"\n              + \"and does not allow unsetting it.\");\n    }\n    project.setProjectId(projectId);\n    project.setLifecycleState(originalProject.getLifecycleState());\n    project.setCreateTime(originalProject.getCreateTime());\n    project.setProjectNumber(originalProject.getProjectNumber());\n    // replace cannot fail because both this method and removeProject are synchronized\n    projects.replace(projectId, project);\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(project));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\"Error when serializing project \" + projectId);\n    }\n  }\n\n  synchronized Response undelete(String projectId) {\n    Project project = projects.get(projectId);\n    Response response;\n    if (project == null) {\n      response =\n          Error.PERMISSION_DENIED.response(\n              \"Error when undeleting \" + projectId + \" because the project was not found.\");\n    } else if (!project.getLifecycleState().equals(\"DELETE_REQUESTED\")) {\n      response =\n          Error.FAILED_PRECONDITION.response(\n              \"Error when undeleting \"\n                  + projectId\n                  + \" because the lifecycle state was not DELETE_REQUESTED.\");\n    } else {\n      project.setLifecycleState(\"ACTIVE\");\n      response = new Response(HTTP_OK, \"{}\");\n    }\n    return response;\n  }\n\n  synchronized Response getPolicy(String projectId) {\n    Policy policy = policies.get(projectId);\n    if (policy == null) {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(policy));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\n          \"Error when serializing the IAM policy for \" + projectId);\n    }\n  }\n\n  synchronized Response replacePolicy(String projectId, Policy policy) {\n    Policy originalPolicy = policies.get(projectId);\n    if (originalPolicy == null) {\n      return Error.PERMISSION_DENIED.response(\n          \"Error when replacing the policy for \"\n              + projectId\n              + \" because the project was not found.\");\n    }\n    String etag = policy.getEtag();\n    if (etag != null && !originalPolicy.getEtag().equals(etag)) {\n      return Error.ABORTED.response(\n          \"Policy etag mismatch when replacing the policy for project \"\n              + projectId\n              + \", please retry the read.\");\n    }\n    policy.setEtag(UUID.randomUUID().toString());\n    policy.setVersion(originalPolicy.getVersion());\n    policies.put(projectId, policy);\n    try {\n      return new Response(HTTP_OK, jsonFactory.toString(policy));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\n          \"Error when serializing the policy for project \" + projectId);\n    }\n  }\n\n  synchronized Response testPermissions(String projectId, List<String> permissions) {\n    if (!projects.containsKey(projectId)) {\n      return Error.PERMISSION_DENIED.response(\"Project \" + projectId + \" not found.\");\n    }\n    try {\n      return new Response(\n          HTTP_OK,\n          jsonFactory.toString(new TestIamPermissionsResponse().setPermissions(permissions)));\n    } catch (IOException e) {\n      return Error.INTERNAL_ERROR.response(\"Error when serializing permissions \" + permissions);\n    }\n  }\n\n  private LocalResourceManagerHelper() {\n    try {\n      server = HttpServer.create(new InetSocketAddress(0), 0);\n      port = server.getAddress().getPort();\n      server.createContext(CONTEXT, new RequestHandler());\n      server.createContext(OPERATION_CONTEXT, new OperationRequestHandler());\n    } catch (IOException e) {\n      throw new RuntimeException(\"Could not bind the mock Resource Manager server.\", e);\n    }\n  }\n\n  /**\n   * Creates a {@code LocalResourceManagerHelper} object that listens to requests on the local\n   * machine.\n   */\n  public static LocalResourceManagerHelper create() {\n    return new LocalResourceManagerHelper();\n  }\n\n  /**\n   * Returns a {@link ResourceManagerOptions} instance that sets the host to use the mock server.\n   */\n  public ResourceManagerOptions getOptions() {\n    return ResourceManagerOptions.newBuilder()\n        .setHost(\"http://localhost:\" + port)\n        .setCredentials(NoCredentials.getInstance())\n        .build();\n  }\n\n  /** Starts the thread that runs the Resource Manager server. */\n  public void start() {\n    server.start();\n  }\n\n  /** Stops the thread that runs the mock Resource Manager server. */\n  public void stop() {\n    server.stop(1);\n  }\n\n  /**\n   * Utility method to change the lifecycle state of the specified project.\n   *\n   * @return true if the lifecycle state was successfully updated, false otherwise\n   */\n  public synchronized boolean changeLifecycleState(String projectId, String lifecycleState) {\n    checkArgument(\n        \"ACTIVE\".equals(lifecycleState)\n            || \"DELETE_REQUESTED\".equals(lifecycleState)\n            || \"DELETE_IN_PROGRESS\".equals(lifecycleState),\n        \"Lifecycle state must be ACTIVE, DELETE_REQUESTED, or DELETE_IN_PROGRESS\");\n    Project project = projects.get(checkNotNull(projectId));\n    if (project != null) {\n      project.setLifecycleState(lifecycleState);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Utility method to remove the specified project.\n   *\n   * <p>This method can be used to fully remove a project (to mimic when the server completely\n   * deletes a project).\n   *\n   * @return true if the project was successfully deleted, false if the project didn't exist\n   */\n  public synchronized boolean removeProject(String projectId) {\n    // Because this method is synchronized, any code that relies on non-atomic read/write operations\n    // should not fail if that code is also synchronized.\n    policies.remove(checkNotNull(projectId));\n    return projects.remove(projectId) != null;\n  }\n}\n",
            "error": "",
            "span_id": 7624525665803179966
        },
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/PolicyMarshaller.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.Binding;\nimport com.google.cloud.Identity;\nimport com.google.cloud.Policy;\nimport com.google.cloud.Policy.Marshaller;\nimport com.google.cloud.Role;\nimport com.google.common.base.Function;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Lists;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\nfinal class PolicyMarshaller\n    extends Marshaller<com.google.api.services.cloudresourcemanager.model.Policy> {\n\n  static final PolicyMarshaller INSTANCE = new PolicyMarshaller();\n\n  private PolicyMarshaller() {}\n\n  private static class Builder extends Policy.Builder {\n\n    private Builder(Map<Role, Set<Identity>> bindings, String etag, Integer version) {\n      setBindings(bindings);\n      setEtag(etag);\n      if (version != null) {\n        setVersion(version);\n      }\n    }\n  }\n\n  @Override\n  protected Policy fromPb(com.google.api.services.cloudresourcemanager.model.Policy policyPb) {\n    Map<Role, Set<Identity>> bindings = new HashMap<>();\n    if (policyPb.getBindings() != null) {\n      for (Binding bindingPb : policyPb.getBindings()) {\n        bindings.put(\n            Role.of(bindingPb.getRole()),\n            ImmutableSet.copyOf(\n                Lists.transform(\n                    bindingPb.getMembers(),\n                    new Function<String, Identity>() {\n                      @Override\n                      public Identity apply(String s) {\n                        return IDENTITY_VALUE_OF_FUNCTION.apply(s);\n                      }\n                    })));\n      }\n    }\n    return new Builder(bindings, policyPb.getEtag(), policyPb.getVersion()).build();\n  }\n\n  @Override\n  protected com.google.api.services.cloudresourcemanager.model.Policy toPb(Policy policy) {\n    com.google.api.services.cloudresourcemanager.model.Policy policyPb =\n        new com.google.api.services.cloudresourcemanager.model.Policy();\n    List<Binding> bindingPbList = new LinkedList<>();\n    for (Map.Entry<Role, Set<Identity>> binding : policy.getBindings().entrySet()) {\n      Binding bindingPb = new Binding();\n      bindingPb.setRole(binding.getKey().getValue());\n      bindingPb.setMembers(\n          Lists.transform(\n              new ArrayList<>(binding.getValue()),\n              new Function<Identity, String>() {\n                @Override\n                public String apply(Identity identity) {\n                  return IDENTITY_STR_VALUE_FUNCTION.apply(identity);\n                }\n              }));\n      bindingPbList.add(bindingPb);\n    }\n    policyPb.setBindings(bindingPbList);\n    policyPb.setEtag(policy.getEtag());\n    policyPb.setVersion(policy.getVersion());\n    return policyPb;\n  }\n}\n",
            "error": "",
            "span_id": 15199821669021248129
        },
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/spi/v1beta1/HttpResourceManagerRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.resourcemanager.spi.v1beta1;\n\nimport static com.google.cloud.RetryHelper.runWithRetries;\nimport static com.google.common.base.MoreObjects.firstNonNull;\nimport static java.net.HttpURLConnection.HTTP_FORBIDDEN;\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.core.ApiClock;\nimport com.google.api.gax.retrying.ResultRetryAlgorithm;\nimport com.google.api.gax.retrying.RetrySettings;\nimport com.google.api.gax.retrying.TimedAttemptSettings;\nimport com.google.api.services.cloudresourcemanager.CloudResourceManager;\nimport com.google.api.services.cloudresourcemanager.model.ClearOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.GetEffectiveOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.GetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListAvailableOrgPolicyConstraintsResponse;\nimport com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesRequest;\nimport com.google.api.services.cloudresourcemanager.model.ListOrgPoliciesResponse;\nimport com.google.api.services.cloudresourcemanager.model.ListProjectsResponse;\nimport com.google.api.services.cloudresourcemanager.model.Operation;\nimport com.google.api.services.cloudresourcemanager.model.OrgPolicy;\nimport com.google.api.services.cloudresourcemanager.model.Policy;\nimport com.google.api.services.cloudresourcemanager.model.Project;\nimport com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.SetOrgPolicyRequest;\nimport com.google.api.services.cloudresourcemanager.model.Status;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsRequest;\nimport com.google.api.services.cloudresourcemanager.model.TestIamPermissionsResponse;\nimport com.google.api.services.cloudresourcemanager.model.UndeleteProjectRequest;\nimport com.google.cloud.RetryHelper;\nimport com.google.cloud.Tuple;\nimport com.google.cloud.http.BaseHttpServiceException;\nimport com.google.cloud.http.HttpTransportOptions;\nimport com.google.cloud.resourcemanager.ResourceManagerException;\nimport com.google.cloud.resourcemanager.ResourceManagerOptions;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.Callable;\nimport org.threeten.bp.Duration;\n\n/** @deprecated v3 GAPIC client of ResourceManager is now available */\n@Deprecated\npublic class HttpResourceManagerRpc implements ResourceManagerRpc {\n\n  private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();\n\n  // See doc of create() for more details:\n  // https://developers.google.com/resources/api-libraries/documentation/cloudresourcemanager/v1/java/latest/com/google/api/services/cloudresourcemanager/CloudResourceManager.Projects.html#create(com.google.api.services.cloudresourcemanager.model.Project)\n  private static final RetrySettings CREATE_RETRY_SETTINGS =\n      RetrySettings.newBuilder()\n          // SLO permits 30s at 90th percentile, 4x it for total limit.\n          // Observed latency is much lower: 11s at 95th percentile.\n          .setTotalTimeout(Duration.ofMinutes(2))\n          // Linked doc recommends polling at 5th second.\n          .setInitialRetryDelay(Duration.ofSeconds(5))\n          .setRetryDelayMultiplier(1.5)\n          // Observed P95 latency is 11s. We probably shouldn't sleep longer than this.\n          .setMaxRetryDelay(Duration.ofSeconds(11))\n          .setJittered(true)\n          .setInitialRpcTimeout(Duration.ofSeconds(5))\n          .setMaxRpcTimeout(Duration.ofSeconds(5))\n          .build();\n\n  // reference: https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  private static final ImmutableMap<Integer, Integer> RPC_TO_HTTP_CODES =\n      ImmutableMap.<Integer, Integer>builder()\n          .put(0, 200)\n          .put(1, 499)\n          .put(2, 500)\n          .put(3, 400)\n          .put(4, 504)\n          .put(5, 404)\n          .put(6, 409)\n          .put(7, 403)\n          .put(16, 401)\n          .put(8, 429)\n          .put(9, 400)\n          .put(10, 409)\n          .put(11, 400)\n          .put(12, 501)\n          .put(13, 500)\n          .put(14, 503)\n          .put(15, 500)\n          .build();\n\n  private static final ResultRetryAlgorithm<Operation> OPERATION_HANDLER =\n      new ResultRetryAlgorithm<Operation>() {\n        @Override\n        public TimedAttemptSettings createNextAttempt(\n            Throwable prevThrowable, Operation prevResponse, TimedAttemptSettings prevSettings) {\n          return null;\n        }\n\n        @Override\n        public boolean shouldRetry(Throwable prevThrowable, Operation prevOp) {\n          if (prevThrowable == null) {\n            return prevOp.getDone() == null || !prevOp.getDone();\n          }\n          return prevThrowable instanceof ResourceManagerException\n              && ((ResourceManagerException) prevThrowable).isRetryable();\n        }\n      };\n\n  private final CloudResourceManager resourceManager;\n  private final ApiClock clock;\n\n  public HttpResourceManagerRpc(ResourceManagerOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    resourceManager =\n        new CloudResourceManager.Builder(transport, JSON_FACTORY, initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    clock = options.getClock();\n  }\n\n  private static ResourceManagerException translate(IOException exception) {\n    return new ResourceManagerException(exception);\n  }\n\n  private static ResourceManagerException translate(Status status) {\n    Integer code = RPC_TO_HTTP_CODES.get(status.getCode());\n    if (code == null) {\n      code = BaseHttpServiceException.UNKNOWN_CODE;\n    }\n    return new ResourceManagerException(code, status.getMessage());\n  }\n\n  @Override\n  public Project create(Project project) {\n    final Operation operation;\n    try {\n      operation = resourceManager.projects().create(project).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n\n    Operation finishedOp =\n        runWithRetries(\n            new Callable<Operation>() {\n              @Override\n              public Operation call() {\n                try {\n                  return resourceManager.operations().get(operation.getName()).execute();\n                } catch (IOException ex) {\n                  throw translate(ex);\n                }\n              }\n            },\n            CREATE_RETRY_SETTINGS,\n            OPERATION_HANDLER,\n            clock);\n    if (finishedOp.getError() != null) {\n      throw translate(finishedOp.getError());\n    }\n\n    // NOTE(pongad): Operation.getResponse() returns a Map<String, Object>.\n    // 1. `(Project) finishedOp.getResponse()` doesn't work,\n    // because JSON deserializer in execute() didn't know to create a Project object.\n    // 2. `new Project().putAll(finishedOp.getResponse())` doesn't work either.\n    // 64-bit integers are sent as strings in JSON,\n    // so execute(), not knowing the type, parses it as String, not Long.\n    try {\n      String responseTxt = JSON_FACTORY.toString(finishedOp.getResponse());\n      return JSON_FACTORY.fromString(responseTxt, Project.class);\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public void delete(String projectId) {\n    try {\n      resourceManager.projects().delete(projectId).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Project get(String projectId, Map<Option, ?> options) {\n    try {\n      return resourceManager\n          .projects()\n          .get(projectId)\n          .setFields(Option.FIELDS.getString(options))\n          .execute();\n    } catch (IOException ex) {\n      ResourceManagerException translated = translate(ex);\n      if (translated.getCode() == HTTP_FORBIDDEN || translated.getCode() == HTTP_NOT_FOUND) {\n        // Service can return either 403 or 404 to signify that the project doesn't exist.\n        return null;\n      } else {\n        throw translated;\n      }\n    }\n  }\n\n  @Override\n  public Tuple<String, Iterable<Project>> list(Map<Option, ?> options) {\n    try {\n      ListProjectsResponse response =\n          resourceManager\n              .projects()\n              .list()\n              .setFields(Option.FIELDS.getString(options))\n              .setFilter(Option.FILTER.getString(options))\n              .setPageSize(Option.PAGE_SIZE.getInt(options))\n              .setPageToken(Option.PAGE_TOKEN.getString(options))\n              .execute();\n      return Tuple.<String, Iterable<Project>>of(\n          response.getNextPageToken(), response.getProjects());\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public void undelete(String projectId) {\n    try {\n      resourceManager.projects().undelete(projectId, new UndeleteProjectRequest()).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Project replace(Project project) {\n    try {\n      return resourceManager.projects().update(project.getProjectId(), project).execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Policy getPolicy(String projectId) throws ResourceManagerException {\n    try {\n      return resourceManager\n          .projects()\n          .getIamPolicy(projectId, new GetIamPolicyRequest())\n          .execute();\n    } catch (IOException ex) {\n      ResourceManagerException translated = translate(ex);\n      if (translated.getCode() == HTTP_FORBIDDEN) {\n        // Service returns permission denied if policy doesn't exist.\n        return null;\n      } else {\n        throw translated;\n      }\n    }\n  }\n\n  @Override\n  public Policy replacePolicy(String projectId, Policy newPolicy) throws ResourceManagerException {\n    try {\n      return resourceManager\n          .projects()\n          .setIamPolicy(projectId, new SetIamPolicyRequest().setPolicy(newPolicy))\n          .execute();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public List<Boolean> testPermissions(String projectId, List<String> permissions)\n      throws ResourceManagerException {\n    try {\n      TestIamPermissionsResponse response =\n          resourceManager\n              .projects()\n              .testIamPermissions(\n                  projectId, new TestIamPermissionsRequest().setPermissions(permissions))\n              .execute();\n      Set<String> permissionsOwned =\n          ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));\n      ImmutableList.Builder<Boolean> answer = ImmutableList.builder();\n      for (String p : permissions) {\n        answer.add(permissionsOwned.contains(p));\n      }\n      return answer.build();\n    } catch (IOException ex) {\n      throw translate(ex);\n    }\n  }\n\n  @Override\n  public Map<String, Boolean> testOrgPermissions(String resource, List<String> permissions)\n      throws IOException {\n    try {\n      TestIamPermissionsResponse response =\n          resourceManager\n              .organizations()\n              .testIamPermissions(\n                  resource, new TestIamPermissionsRequest().setPermissions(permissions))\n              .execute();\n      Set<String> permissionsOwned =\n          ImmutableSet.copyOf(firstNonNull(response.getPermissions(), ImmutableList.<String>of()));\n      ImmutableMap.Builder<String, Boolean> answer = ImmutableMap.builder();\n      for (String permission : permissions) {\n        answer.put(permission, permissionsOwned.contains(permission));\n      }\n      return answer.build();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public void clearOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException {\n    try {\n      resourceManager\n          .folders()\n          .clearOrgPolicy(\n              resource,\n              new ClearOrgPolicyRequest()\n                  .setConstraint(orgPolicy.getConstraint())\n                  .setEtag(orgPolicy.getEtag()))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy getEffectiveOrgPolicy(String resource, String constraint) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .getEffectiveOrgPolicy(\n              resource, new GetEffectiveOrgPolicyRequest().setConstraint(constraint))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy getOrgPolicy(String resource, String constraint) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .getOrgPolicy(resource, new GetOrgPolicyRequest().setConstraint(constraint))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public ListResult<Constraint> listAvailableOrgPolicyConstraints(\n      String resource, Map<Option, ?> options) throws IOException {\n    try {\n      ListAvailableOrgPolicyConstraintsResponse response =\n          resourceManager\n              .folders()\n              .listAvailableOrgPolicyConstraints(\n                  resource,\n                  new ListAvailableOrgPolicyConstraintsRequest()\n                      .setPageSize(Option.PAGE_SIZE.getInt(options))\n                      .setPageToken(Option.PAGE_TOKEN.getString(options)))\n              .execute();\n      return ListResult.of(response.getNextPageToken(), response.getConstraints());\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public ListResult<OrgPolicy> listOrgPolicies(String resource, Map<Option, ?> options)\n      throws IOException {\n    try {\n      ListOrgPoliciesResponse response =\n          resourceManager\n              .folders()\n              .listOrgPolicies(\n                  resource,\n                  new ListOrgPoliciesRequest()\n                      .setPageSize(Option.PAGE_SIZE.getInt(options))\n                      .setPageToken(Option.PAGE_TOKEN.getString(options)))\n              .execute();\n      return ListResult.of(response.getNextPageToken(), response.getPolicies());\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n\n  @Override\n  public OrgPolicy replaceOrgPolicy(String resource, OrgPolicy orgPolicy) throws IOException {\n    try {\n      return resourceManager\n          .folders()\n          .setOrgPolicy(resource, new SetOrgPolicyRequest().setPolicy(orgPolicy))\n          .execute();\n    } catch (RetryHelper.RetryHelperException ex) {\n      throw ResourceManagerException.translateAndThrow(ex);\n    }\n  }\n}\n",
            "error": "",
            "span_id": 3375483076313556971
        },
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager/ConstraintInfo.java",
            "output": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.cloud.resourcemanager;\n\nimport com.google.api.services.cloudresourcemanager.model.BooleanConstraint;\nimport com.google.api.services.cloudresourcemanager.model.Constraint;\nimport com.google.api.services.cloudresourcemanager.model.ListConstraint;\nimport com.google.common.base.Function;\nimport com.google.common.base.MoreObjects;\nimport java.util.Objects;\n\n/**\n * A Google Cloud Resource Manager constraint metadata object.\n *\n * @see <a\n *     href=\"https://cloud.google.com/resource-manager/reference/rest/v1/ListAvailableOrgPolicyConstraintsResponse#Constraint\">Constraint</a>\n * @deprecated v3 GAPIC client of ResourceManager is now available\n */\n@Deprecated\npublic class ConstraintInfo {\n\n  static final Function<Constraint, ConstraintInfo> FROM_PROTOBUF_FUNCTION =\n      new Function<Constraint, ConstraintInfo>() {\n        @Override\n        public ConstraintInfo apply(Constraint protobuf) {\n          return ConstraintInfo.fromProtobuf(protobuf);\n        }\n      };\n  static final Function<ConstraintInfo, Constraint> TO_PROTOBUF_FUNCTION =\n      new Function<ConstraintInfo, Constraint>() {\n        @Override\n        public Constraint apply(ConstraintInfo constraintInfo) {\n          return constraintInfo.toProtobuf();\n        }\n      };\n\n  private BooleanConstraint booleanConstraint;\n  private String constraintDefault;\n  private String description;\n  private String displayName;\n  private Constraints constraints;\n  private String name;\n  private Integer version;\n\n  /**\n   * A Constraint that allows or disallows a list of string values, which are configured by an\n   * Organization's policy administrator with a Policy.\n   */\n  static class Constraints {\n\n    private final String suggestedValue;\n    private final Boolean supportsUnder;\n\n    Constraints(String suggestedValue, Boolean supportsUnder) {\n      this.suggestedValue = suggestedValue;\n      this.supportsUnder = supportsUnder;\n    }\n\n    /**\n     * The Google Cloud Console tries to default to a configuration that matches the value specified\n     * in this Constraint.\n     */\n    String getSuggestedValue() {\n      return suggestedValue;\n    }\n\n    /**\n     * Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in\n     * Policy.allowed_values and Policy.denied_values.\n     */\n    Boolean getSupportsUnder() {\n      return supportsUnder;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this)\n          .add(\"suggestedValue\", getSuggestedValue())\n          .add(\"supportsUnder\", getSupportsUnder())\n          .toString();\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(suggestedValue, supportsUnder);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Constraints that = (Constraints) o;\n      return Objects.equals(suggestedValue, that.suggestedValue)\n          && Objects.equals(supportsUnder, that.supportsUnder);\n    }\n\n    ListConstraint toProtobuf() {\n      return new ListConstraint().setSuggestedValue(suggestedValue).setSupportsUnder(supportsUnder);\n    }\n\n    static Constraints fromProtobuf(ListConstraint listConstraint) {\n      return new Constraints(listConstraint.getSuggestedValue(), listConstraint.getSupportsUnder());\n    }\n  }\n\n  /** Builder for {@code ConstraintInfo}. */\n  static class Builder {\n    private BooleanConstraint booleanConstraint;\n    private String constraintDefault;\n    private String description;\n    private String displayName;\n    private Constraints constraints;\n    private String name;\n    private Integer version;\n\n    Builder(String name) {\n      this.name = name;\n    }\n\n    Builder(ConstraintInfo info) {\n      this.booleanConstraint = info.booleanConstraint;\n      this.constraintDefault = info.constraintDefault;\n      this.description = info.description;\n      this.displayName = info.displayName;\n      this.constraints = info.constraints;\n      this.name = info.name;\n      this.version = info.version;\n    }\n\n    Builder setBooleanConstraint(BooleanConstraint booleanConstraint) {\n      this.booleanConstraint = booleanConstraint;\n      return this;\n    }\n\n    Builder setConstraintDefault(String constraintDefault) {\n      this.constraintDefault = constraintDefault;\n      return this;\n    }\n\n    Builder setDescription(String description) {\n      this.description = description;\n      return this;\n    }\n\n    Builder setDisplayName(String displayName) {\n      this.displayName = displayName;\n      return this;\n    }\n\n    Builder setConstraints(Constraints constraints) {\n      this.constraints = constraints;\n      return this;\n    }\n\n    Builder setName(String name) {\n      this.name = name;\n      return this;\n    }\n\n    Builder setVersion(Integer version) {\n      this.version = version;\n      return this;\n    }\n\n    ConstraintInfo build() {\n      return new ConstraintInfo(this);\n    }\n  }\n\n  ConstraintInfo(Builder builder) {\n    this.booleanConstraint = builder.booleanConstraint;\n    this.constraintDefault = builder.constraintDefault;\n    this.description = builder.description;\n    this.displayName = builder.displayName;\n    this.constraints = builder.constraints;\n    this.name = builder.name;\n    this.version = builder.version;\n  }\n\n  /** Returns the boolean constraint to check whether the constraint is enforced or not. */\n  public BooleanConstraint getBooleanConstraint() {\n    return booleanConstraint;\n  }\n\n  /** Returns the default behavior of the constraint. */\n  public String getConstraintDefault() {\n    return constraintDefault;\n  }\n\n  /** Returns the detailed description of the constraint. */\n  public String getDescription() {\n    return description;\n  }\n\n  /** Returns the human readable name of the constraint. */\n  public String getDisplayName() {\n    return displayName;\n  }\n\n  /** Returns the listConstraintInfo. */\n  public Constraints getConstraints() {\n    return constraints;\n  }\n\n  /** Returns the globally unique name of the constraint. */\n  public String getName() {\n    return name;\n  }\n\n  /** Returns the version of the Constraint. Default version is 0. */\n  public Integer getVersion() {\n    return version;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ConstraintInfo that = (ConstraintInfo) o;\n    return Objects.equals(booleanConstraint, that.booleanConstraint)\n        && Objects.equals(constraintDefault, that.constraintDefault)\n        && Objects.equals(description, that.description)\n        && Objects.equals(displayName, that.displayName)\n        && Objects.equals(constraints, that.constraints)\n        && Objects.equals(name, that.name)\n        && Objects.equals(version, that.version);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        booleanConstraint, constraintDefault, description, displayName, constraints, name, version);\n  }\n\n  /** Returns a builder for the {@link ConstraintInfo} object. */\n  public static Builder newBuilder(String name) {\n    return new Builder(name);\n  }\n\n  /** Returns a builder for the {@link ConstraintInfo} object. */\n  public Builder toBuilder() {\n    return new Builder(this);\n  }\n\n  Constraint toProtobuf() {\n    Constraint constraintProto = new Constraint();\n    constraintProto.setBooleanConstraint(booleanConstraint);\n    constraintProto.setConstraintDefault(constraintDefault);\n    constraintProto.setDescription(description);\n    constraintProto.setDisplayName(displayName);\n    if (constraints != null) {\n      constraintProto.setListConstraint(constraints.toProtobuf());\n    }\n    constraintProto.setName(name);\n    constraintProto.setVersion(version);\n    return constraintProto;\n  }\n\n  static ConstraintInfo fromProtobuf(Constraint constraintProtobuf) {\n    Builder builder = newBuilder(constraintProtobuf.getName());\n    builder.setBooleanConstraint(constraintProtobuf.getBooleanConstraint());\n    builder.setConstraintDefault(constraintProtobuf.getConstraintDefault());\n    builder.setDescription(constraintProtobuf.getDescription());\n    builder.setDisplayName(constraintProtobuf.getDisplayName());\n    if (constraintProtobuf.getListConstraint() != null) {\n      builder.setConstraints(Constraints.fromProtobuf(constraintProtobuf.getListConstraint()));\n    }\n    if (constraintProtobuf.getName() != null && !constraintProtobuf.getName().equals(\"Unnamed\")) {\n      builder.setName(constraintProtobuf.getName());\n    }\n    builder.setVersion(constraintProtobuf.getVersion());\n    return builder.build();\n  }\n}\n",
            "error": "",
            "span_id": 6533010446732717770
        }
    ],
    "get_directory_tree": [
        {
            "input": "java-resourcemanager/google-cloud-resourcemanager/src/main/java/com/google/cloud/resourcemanager",
            "output": "[\n    {\n        \"name\": \"Option.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ResourceManagerOptions.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"package-info.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"PolicyMarshaller.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"spi\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"v1beta1\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"HttpResourceManagerRpc.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ResourceManagerRpc.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"ResourceManagerRpcFactory.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"v3\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"FoldersSettings.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"gapic_metadata.json\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"OrganizationsSettings.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"TagBindingsSettings.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"package-info.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"stub\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"GrpcTagValuesStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonFoldersStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TagKeysStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcProjectsCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcTagValuesCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ProjectsStubSettings.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonProjectsCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonTagValuesCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcTagKeysStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonOrganizationsCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcTagBindingsCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TagKeysStubSettings.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonTagKeysStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonTagBindingsCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonOrganizationsStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TagValuesStubSettings.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"FoldersStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcTagBindingsStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonTagKeysCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TagBindingsStubSettings.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcOrganizationsCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcProjectsStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcTagKeysCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonProjectsStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ProjectsStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonTagValuesStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcFoldersStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"FoldersStubSettings.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TagBindingsStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"OrganizationsStubSettings.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonFoldersCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonTagBindingsStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcOrganizationsStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"GrpcFoldersCallableFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"OrganizationsStub.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TagValuesStub.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"TagValuesSettings.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"FoldersClient.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"TagKeysClient.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ProjectsClient.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"TagKeysSettings.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ProjectsSettings.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"TagBindingsClient.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"OrganizationsClient.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"TagValuesClient.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"testing\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"package-info.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"LocalResourceManagerHelper.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"OrgPolicyInfo.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ResourceManager.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Project.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ResourceManagerException.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ConstraintInfo.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ResourceManagerFactory.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ResourceManagerImpl.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ProjectInfo.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 15519370188979320576
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}