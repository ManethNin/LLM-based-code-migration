{
    "validate_diffs": [
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n import eu.europa.esig.dss.pades.CertificationPermission;\n+import eu.europa.esig.dss.enumerations.CertificationPermission;\n \n```",
            "output": "{'src/main/java/org/openpdfsign/Signer.java': 'package org.openpdfsign;\\n\\nimport com.beust.jcommander.Strings;\\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\\nimport eu.europa.esig.dss.model.*;\\nimport eu.europa.esig.dss.pades.CertificationPermission;\\nimport eu.europa.esig.dss.enumerations.CertificationPermission;\\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\\nimport eu.europa.esig.dss.pades.signature.PAdESService;\\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\\nimport eu.europa.esig.dss.token.JKSSignatureToken;\\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.io.IOUtils;\\nimport org.apache.pdfbox.pdmodel.PDDocument;\\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\\n\\nimport java.io.IOException;\\nimport java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.security.KeyStore;\\nimport java.time.ZoneId;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.TimeZone;\\n\\n@Slf4j\\npublic class Signer {\\n\\n    //see PDRectangle\\n    private static final float POINTS_PER_INCH = 72;\\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\\n\\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\\n        boolean visibleSignature = params.getPage() != null;\\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\\n        //load PDF file\\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\\n\\n        //load PDF file in DSSDocument format\\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\\n\\n        //load certificate and private key\\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\\n\\n        log.debug(\"Keystore created for signing\");\\n        //PAdES parameters\\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\\n        //signatureParameters.bLevel().setSigningDate(new Date());\\n        String keyAlias = \"alias\";\\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\\n}\\n;\\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\\n} else {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\\n}\\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\\n\\n        // Create common certificate verifier\\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\\n        // Create PAdESService for signature\\n        PAdESService service = new PAdESService(commonCertificateVerifier);\\n\\n        log.debug(\"Signature service initialized\");\\n\\n        // Initialize visual signature and configure\\n        if (visibleSignature) {\\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\\n            imageParameters.setFieldParameters(fieldParameters);\\n\\n            if (!Strings.isStringEmpty(params.getImageFile())) {\\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\\n} else {\\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\\n}\\n\\n            if (params.getPage() < 0) {\\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\\n                int pageCount = pdDocument.getNumberOfPages();\\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\\n                pdDocument.close();\\n                log.debug(\"PDF page count: \" + pageCount);\\n\\n} else {\\n                fieldParameters.setPage(params.getPage());\\n}\\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\\n\\n            // Get the SignedInfo segment that need to be signed.\\n            // respect local timezone\\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\\n            // user-provided timezone, if any\\n            if (params.getTimezone() != null) {\\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\\n}\\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\\n            if (!Strings.isStringEmpty(params.getHint())) {\\n                fieldParameters.setHint(params.getHint());\\n} else {\\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\\n}\\n\\n            signatureParameters.setImageParameters(imageParameters);\\n\\n\\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\\n            log.debug(\"Visible signature parameters set\");\\n}\\n\\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\\n        //only use TSP source, if parameter is set\\n        //if it is set to an url, us this\\n        //otherwise, default\\n        if (params.getUseTimestamp() || params.getTSA() != null) {\\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\\n            Map<String, TSPSource> tspSources = new HashMap<>();\\n            compositeTSPSource.setTspSources(tspSources);\\n            if (params.getTSA().isEmpty()) {\\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n});\\n} else {\\n                params.getTSA().stream().forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n});\\n}\\n            service.setTspSource(compositeTSPSource);\\n}\\n\\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\\n\\n        // This function obtains the signature value for signed information using the\\n        // private key and specified algorithm\\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\\n        log.debug(\"Data to be signed loaded\");\\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\\n\\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\\n            log.debug(\"is true\");\\n}*/\\n        log.debug(\"Signature value calculated\");\\n\\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\\n        log.debug(\"Document signing complete\");\\n        if (binary) {\\n            signedDocument.writeTo(System.out);\\n} else {\\n            signedDocument.save(outputFile.toAbsolutePath().toString());\\n    }\\n}\\n}'}",
            "error": "",
            "span_id": 4329977744166908856
        },
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n-import eu.europa.esig.dss.pades.CertificationPermission;\n+import eu.europa.esig.dss.enumerations.CertificationPermission;\n \n```",
            "output": "{'src/main/java/org/openpdfsign/Signer.java': 'package org.openpdfsign;\\n\\nimport com.beust.jcommander.Strings;\\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\\nimport eu.europa.esig.dss.model.*;\\nimport eu.europa.esig.dss.enumerations.CertificationPermission;\\nimport eu.europa.esig.dss.enumerations.CertificationPermission;\\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\\nimport eu.europa.esig.dss.pades.signature.PAdESService;\\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\\nimport eu.europa.esig.dss.token.JKSSignatureToken;\\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.io.IOUtils;\\nimport org.apache.pdfbox.pdmodel.PDDocument;\\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\\n\\nimport java.io.IOException;\\nimport java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.security.KeyStore;\\nimport java.time.ZoneId;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.TimeZone;\\n\\n@Slf4j\\npublic class Signer {\\n\\n    //see PDRectangle\\n    private static final float POINTS_PER_INCH = 72;\\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\\n\\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\\n        boolean visibleSignature = params.getPage() != null;\\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\\n        //load PDF file\\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\\n\\n        //load PDF file in DSSDocument format\\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\\n\\n        //load certificate and private key\\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\\n\\n        log.debug(\"Keystore created for signing\");\\n        //PAdES parameters\\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\\n        //signatureParameters.bLevel().setSigningDate(new Date());\\n        String keyAlias = \"alias\";\\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\\n}\\n;\\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\\n} else {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\\n}\\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\\n\\n        // Create common certificate verifier\\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\\n        // Create PAdESService for signature\\n        PAdESService service = new PAdESService(commonCertificateVerifier);\\n\\n        log.debug(\"Signature service initialized\");\\n\\n        // Initialize visual signature and configure\\n        if (visibleSignature) {\\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\\n            imageParameters.setFieldParameters(fieldParameters);\\n\\n            if (!Strings.isStringEmpty(params.getImageFile())) {\\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\\n} else {\\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\\n}\\n\\n            if (params.getPage() < 0) {\\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\\n                int pageCount = pdDocument.getNumberOfPages();\\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\\n                pdDocument.close();\\n                log.debug(\"PDF page count: \" + pageCount);\\n\\n} else {\\n                fieldParameters.setPage(params.getPage());\\n}\\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\\n\\n            // Get the SignedInfo segment that need to be signed.\\n            // respect local timezone\\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\\n            // user-provided timezone, if any\\n            if (params.getTimezone() != null) {\\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\\n}\\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\\n            if (!Strings.isStringEmpty(params.getHint())) {\\n                fieldParameters.setHint(params.getHint());\\n} else {\\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\\n}\\n\\n            signatureParameters.setImageParameters(imageParameters);\\n\\n\\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\\n            log.debug(\"Visible signature parameters set\");\\n}\\n\\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\\n        //only use TSP source, if parameter is set\\n        //if it is set to an url, us this\\n        //otherwise, default\\n        if (params.getUseTimestamp() || params.getTSA() != null) {\\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\\n            Map<String, TSPSource> tspSources = new HashMap<>();\\n            compositeTSPSource.setTspSources(tspSources);\\n            if (params.getTSA().isEmpty()) {\\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n});\\n} else {\\n                params.getTSA().stream().forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n});\\n}\\n            service.setTspSource(compositeTSPSource);\\n}\\n\\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\\n\\n        // This function obtains the signature value for signed information using the\\n        // private key and specified algorithm\\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\\n        log.debug(\"Data to be signed loaded\");\\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\\n\\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\\n            log.debug(\"is true\");\\n}*/\\n        log.debug(\"Signature value calculated\");\\n\\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\\n        log.debug(\"Document signing complete\");\\n        if (binary) {\\n            signedDocument.writeTo(System.out);\\n} else {\\n            signedDocument.save(outputFile.toAbsolutePath().toString());\\n    }\\n}\\n}'}",
            "error": "",
            "span_id": 9740101566716391887
        },
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n-import eu.europa.esig.dss.enumerations.CertificationPermission;\n+import eu.europa.esig.dss.model.CertificationPermission;\n \n```",
            "output": "{'src/main/java/org/openpdfsign/Signer.java': 'package org.openpdfsign;\\n\\nimport com.beust.jcommander.Strings;\\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\\nimport eu.europa.esig.dss.model.*;\\nimport eu.europa.esig.dss.model.CertificationPermission;\\nimport eu.europa.esig.dss.model.CertificationPermission;\\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\\nimport eu.europa.esig.dss.pades.signature.PAdESService;\\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\\nimport eu.europa.esig.dss.token.JKSSignatureToken;\\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.io.IOUtils;\\nimport org.apache.pdfbox.pdmodel.PDDocument;\\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\\n\\nimport java.io.IOException;\\nimport java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.security.KeyStore;\\nimport java.time.ZoneId;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.TimeZone;\\n\\n@Slf4j\\npublic class Signer {\\n\\n    //see PDRectangle\\n    private static final float POINTS_PER_INCH = 72;\\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\\n\\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\\n        boolean visibleSignature = params.getPage() != null;\\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\\n        //load PDF file\\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\\n\\n        //load PDF file in DSSDocument format\\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\\n\\n        //load certificate and private key\\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\\n\\n        log.debug(\"Keystore created for signing\");\\n        //PAdES parameters\\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\\n        //signatureParameters.bLevel().setSigningDate(new Date());\\n        String keyAlias = \"alias\";\\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\\n}\\n;\\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\\n} else {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\\n}\\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\\n\\n        // Create common certificate verifier\\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\\n        // Create PAdESService for signature\\n        PAdESService service = new PAdESService(commonCertificateVerifier);\\n\\n        log.debug(\"Signature service initialized\");\\n\\n        // Initialize visual signature and configure\\n        if (visibleSignature) {\\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\\n            imageParameters.setFieldParameters(fieldParameters);\\n\\n            if (!Strings.isStringEmpty(params.getImageFile())) {\\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\\n} else {\\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\\n}\\n\\n            if (params.getPage() < 0) {\\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\\n                int pageCount = pdDocument.getNumberOfPages();\\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\\n                pdDocument.close();\\n                log.debug(\"PDF page count: \" + pageCount);\\n\\n} else {\\n                fieldParameters.setPage(params.getPage());\\n}\\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\\n\\n            // Get the SignedInfo segment that need to be signed.\\n            // respect local timezone\\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\\n            // user-provided timezone, if any\\n            if (params.getTimezone() != null) {\\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\\n}\\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\\n            if (!Strings.isStringEmpty(params.getHint())) {\\n                fieldParameters.setHint(params.getHint());\\n} else {\\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\\n}\\n\\n            signatureParameters.setImageParameters(imageParameters);\\n\\n\\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\\n            log.debug(\"Visible signature parameters set\");\\n}\\n\\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\\n        //only use TSP source, if parameter is set\\n        //if it is set to an url, us this\\n        //otherwise, default\\n        if (params.getUseTimestamp() || params.getTSA() != null) {\\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\\n            Map<String, TSPSource> tspSources = new HashMap<>();\\n            compositeTSPSource.setTspSources(tspSources);\\n            if (params.getTSA().isEmpty()) {\\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n});\\n} else {\\n                params.getTSA().stream().forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n});\\n}\\n            service.setTspSource(compositeTSPSource);\\n}\\n\\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\\n\\n        // This function obtains the signature value for signed information using the\\n        // private key and specified algorithm\\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\\n        log.debug(\"Data to be signed loaded\");\\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\\n\\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\\n            log.debug(\"is true\");\\n}*/\\n        log.debug(\"Signature value calculated\");\\n\\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\\n        log.debug(\"Document signing complete\");\\n        if (binary) {\\n            signedDocument.writeTo(System.out);\\n} else {\\n            signedDocument.save(outputFile.toAbsolutePath().toString());\\n    }\\n}\\n}'}",
            "error": "",
            "span_id": 1830882617158747855
        },
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n-import eu.europa.esig.dss.pades.CertificationPermission;\n+import eu.europa.esig.dss.enumerations.CertificationPermission;\n \n```",
            "output": "{'src/main/java/org/openpdfsign/Signer.java': 'package org.openpdfsign;\\n\\nimport com.beust.jcommander.Strings;\\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\\nimport eu.europa.esig.dss.model.*;\\nimport eu.europa.esig.dss.enumerations.CertificationPermission;\\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\\nimport eu.europa.esig.dss.pades.signature.PAdESService;\\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\\nimport eu.europa.esig.dss.token.JKSSignatureToken;\\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.io.IOUtils;\\nimport org.apache.pdfbox.pdmodel.PDDocument;\\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\\n\\nimport java.io.IOException;\\nimport java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.security.KeyStore;\\nimport java.time.ZoneId;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.TimeZone;\\n\\n@Slf4j\\npublic class Signer {\\n\\n    //see PDRectangle\\n    private static final float POINTS_PER_INCH = 72;\\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\\n\\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\\n        boolean visibleSignature = params.getPage() != null;\\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\\n        //load PDF file\\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\\n\\n        //load PDF file in DSSDocument format\\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\\n\\n        //load certificate and private key\\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\\n\\n        log.debug(\"Keystore created for signing\");\\n        //PAdES parameters\\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\\n        //signatureParameters.bLevel().setSigningDate(new Date());\\n        String keyAlias = \"alias\";\\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\\n        }\\n        ;\\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\\n        } else {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\\n        }\\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\\n\\n        // Create common certificate verifier\\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\\n        // Create PAdESService for signature\\n        PAdESService service = new PAdESService(commonCertificateVerifier);\\n\\n        log.debug(\"Signature service initialized\");\\n\\n        // Initialize visual signature and configure\\n        if (visibleSignature) {\\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\\n            imageParameters.setFieldParameters(fieldParameters);\\n\\n            if (!Strings.isStringEmpty(params.getImageFile())) {\\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\\n            } else {\\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\\n            }\\n\\n            if (params.getPage() < 0) {\\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\\n                int pageCount = pdDocument.getNumberOfPages();\\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\\n                pdDocument.close();\\n                log.debug(\"PDF page count: \" + pageCount);\\n\\n            } else {\\n                fieldParameters.setPage(params.getPage());\\n            }\\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\\n\\n            // Get the SignedInfo segment that need to be signed.\\n            // respect local timezone\\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\\n            // user-provided timezone, if any\\n            if (params.getTimezone() != null) {\\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\\n            }\\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\\n            if (!Strings.isStringEmpty(params.getHint())) {\\n                fieldParameters.setHint(params.getHint());\\n            } else {\\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\\n            }\\n\\n            signatureParameters.setImageParameters(imageParameters);\\n\\n\\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\\n            log.debug(\"Visible signature parameters set\");\\n        }\\n\\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\\n        //only use TSP source, if parameter is set\\n        //if it is set to an url, us this\\n        //otherwise, default\\n        if (params.getUseTimestamp() || params.getTSA() != null) {\\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\\n            Map<String, TSPSource> tspSources = new HashMap<>();\\n            compositeTSPSource.setTspSources(tspSources);\\n            if (params.getTSA().isEmpty()) {\\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n                });\\n            } else {\\n                params.getTSA().stream().forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n                });\\n            }\\n            service.setTspSource(compositeTSPSource);\\n        }\\n\\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\\n\\n        // This function obtains the signature value for signed information using the\\n        // private key and specified algorithm\\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\\n        log.debug(\"Data to be signed loaded\");\\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\\n\\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\\n            log.debug(\"is true\");\\n        }*/\\n        log.debug(\"Signature value calculated\");\\n\\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\\n        log.debug(\"Document signing complete\");\\n        if (binary) {\\n            signedDocument.writeTo(System.out);\\n        } else {\\n            signedDocument.save(outputFile.toAbsolutePath().toString());\\n        }\\n    }\\n}'}",
            "error": "",
            "span_id": 14158485129737584098
        },
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n-import eu.europa.esig.dss.enumerations.CertificationPermission;\n+import eu.europa.esig.dss.model.CertificationPermission;\n \n```",
            "output": "{'src/main/java/org/openpdfsign/Signer.java': 'package org.openpdfsign;\\n\\nimport com.beust.jcommander.Strings;\\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\\nimport eu.europa.esig.dss.model.*;\\nimport eu.europa.esig.dss.model.CertificationPermission;\\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\\nimport eu.europa.esig.dss.pades.signature.PAdESService;\\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\\nimport eu.europa.esig.dss.token.JKSSignatureToken;\\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.io.IOUtils;\\nimport org.apache.pdfbox.pdmodel.PDDocument;\\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\\n\\nimport java.io.IOException;\\nimport java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.security.KeyStore;\\nimport java.time.ZoneId;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.TimeZone;\\n\\n@Slf4j\\npublic class Signer {\\n\\n    //see PDRectangle\\n    private static final float POINTS_PER_INCH = 72;\\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\\n\\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\\n        boolean visibleSignature = params.getPage() != null;\\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\\n        //load PDF file\\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\\n\\n        //load PDF file in DSSDocument format\\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\\n\\n        //load certificate and private key\\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\\n\\n        log.debug(\"Keystore created for signing\");\\n        //PAdES parameters\\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\\n        //signatureParameters.bLevel().setSigningDate(new Date());\\n        String keyAlias = \"alias\";\\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\\n        }\\n        ;\\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\\n        } else {\\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\\n        }\\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\\n\\n        // Create common certificate verifier\\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\\n        // Create PAdESService for signature\\n        PAdESService service = new PAdESService(commonCertificateVerifier);\\n\\n        log.debug(\"Signature service initialized\");\\n\\n        // Initialize visual signature and configure\\n        if (visibleSignature) {\\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\\n            imageParameters.setFieldParameters(fieldParameters);\\n\\n            if (!Strings.isStringEmpty(params.getImageFile())) {\\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\\n            } else {\\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\\n            }\\n\\n            if (params.getPage() < 0) {\\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\\n                int pageCount = pdDocument.getNumberOfPages();\\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\\n                pdDocument.close();\\n                log.debug(\"PDF page count: \" + pageCount);\\n\\n            } else {\\n                fieldParameters.setPage(params.getPage());\\n            }\\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\\n\\n            // Get the SignedInfo segment that need to be signed.\\n            // respect local timezone\\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\\n            // user-provided timezone, if any\\n            if (params.getTimezone() != null) {\\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\\n            }\\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\\n            if (!Strings.isStringEmpty(params.getHint())) {\\n                fieldParameters.setHint(params.getHint());\\n            } else {\\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\\n            }\\n\\n            signatureParameters.setImageParameters(imageParameters);\\n\\n\\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\\n            log.debug(\"Visible signature parameters set\");\\n        }\\n\\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\\n        //only use TSP source, if parameter is set\\n        //if it is set to an url, us this\\n        //otherwise, default\\n        if (params.getUseTimestamp() || params.getTSA() != null) {\\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\\n            Map<String, TSPSource> tspSources = new HashMap<>();\\n            compositeTSPSource.setTspSources(tspSources);\\n            if (params.getTSA().isEmpty()) {\\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n                });\\n            } else {\\n                params.getTSA().stream().forEach(source -> {\\n                    tspSources.put(source, new OnlineTSPSource(source));\\n                });\\n            }\\n            service.setTspSource(compositeTSPSource);\\n        }\\n\\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\\n\\n        // This function obtains the signature value for signed information using the\\n        // private key and specified algorithm\\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\\n        log.debug(\"Data to be signed loaded\");\\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\\n\\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\\n            log.debug(\"is true\");\\n        }*/\\n        log.debug(\"Signature value calculated\");\\n\\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\\n        log.debug(\"Document signing complete\");\\n        if (binary) {\\n            signedDocument.writeTo(System.out);\\n        } else {\\n            signedDocument.save(outputFile.toAbsolutePath().toString());\\n        }\\n    }\\n}'}",
            "error": "",
            "span_id": 760817817962918426
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n import eu.europa.esig.dss.pades.CertificationPermission;\n+import eu.europa.esig.dss.enumerations.CertificationPermission;\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/openpdfsign/Signer.java": "package org.openpdfsign;\n\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.pades.CertificationPermission;\nimport eu.europa.esig.dss.enumerations.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class Signer {\n\n    //see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n}\n;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n} else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n}\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n} else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n}\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n} else {\n                fieldParameters.setPage(params.getPage());\n}\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n}\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n} else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n}\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n}\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n});\n} else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n});\n}\n            service.setTspSource(compositeTSPSource);\n}\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n}*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n} else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n    }\n}\n}"
                },
                "compile_error_details": {
                    "src/main/java/org/openpdfsign/Signer.java": {
                        "7": {
                            "lines": [
                                {
                                    "line_no": 6,
                                    "content": "import eu.europa.esig.dss.model.*;"
                                },
                                {
                                    "line_no": 7,
                                    "content": "import eu.europa.esig.dss.pades.CertificationPermission;"
                                },
                                {
                                    "line_no": 8,
                                    "content": "import eu.europa.esig.dss.enumerations.CertificationPermission;"
                                }
                            ],
                            "error_texts": [
                                "[7,32] cannot find symbol\n",
                                "[7,32] cannot find symbol\nsymbol: class CertificationPermission\nlocation: package eu.europa.esig.dss.pades\n"
                            ]
                        },
                        "8": {
                            "lines": [
                                {
                                    "line_no": 7,
                                    "content": "import eu.europa.esig.dss.pades.CertificationPermission;"
                                },
                                {
                                    "line_no": 8,
                                    "content": "import eu.europa.esig.dss.enumerations.CertificationPermission;"
                                },
                                {
                                    "line_no": 9,
                                    "content": "import eu.europa.esig.dss.pades.PAdESSignatureParameters;"
                                }
                            ],
                            "error_texts": [
                                "[8,39] cannot find symbol\nsymbol: class CertificationPermission\nlocation: package eu.europa.esig.dss.enumerations\n",
                                "[8,39] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 15402349379187292134
        },
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n-import eu.europa.esig.dss.pades.CertificationPermission;\n+import eu.europa.esig.dss.enumerations.CertificationPermission;\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/openpdfsign/Signer.java": "package org.openpdfsign;\n\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.enumerations.CertificationPermission;\nimport eu.europa.esig.dss.enumerations.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class Signer {\n\n    //see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n}\n;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n} else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n}\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n} else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n}\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n} else {\n                fieldParameters.setPage(params.getPage());\n}\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n}\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n} else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n}\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n}\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n});\n} else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n});\n}\n            service.setTspSource(compositeTSPSource);\n}\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n}*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n} else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n    }\n}\n}"
                },
                "compile_error_details": {
                    "src/main/java/org/openpdfsign/Signer.java": {
                        "7": {
                            "lines": [
                                {
                                    "line_no": 6,
                                    "content": "import eu.europa.esig.dss.model.*;"
                                },
                                {
                                    "line_no": 7,
                                    "content": "import eu.europa.esig.dss.enumerations.CertificationPermission;"
                                },
                                {
                                    "line_no": 8,
                                    "content": "import eu.europa.esig.dss.enumerations.CertificationPermission;"
                                }
                            ],
                            "error_texts": [
                                "[7,39] cannot find symbol\nsymbol: class CertificationPermission\nlocation: package eu.europa.esig.dss.enumerations\n",
                                "[7,39] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 13146644333983748277
        },
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n-import eu.europa.esig.dss.enumerations.CertificationPermission;\n+import eu.europa.esig.dss.model.CertificationPermission;\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/openpdfsign/Signer.java": "package org.openpdfsign;\n\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.model.CertificationPermission;\nimport eu.europa.esig.dss.model.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class Signer {\n\n    //see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n}\n;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n} else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n}\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n} else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n}\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n} else {\n                fieldParameters.setPage(params.getPage());\n}\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n}\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n} else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n}\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n}\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n});\n} else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n});\n}\n            service.setTspSource(compositeTSPSource);\n}\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n}*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n} else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n    }\n}\n}"
                },
                "compile_error_details": {
                    "src/main/java/org/openpdfsign/Signer.java": {
                        "7": {
                            "lines": [
                                {
                                    "line_no": 6,
                                    "content": "import eu.europa.esig.dss.model.*;"
                                },
                                {
                                    "line_no": 7,
                                    "content": "import eu.europa.esig.dss.model.CertificationPermission;"
                                },
                                {
                                    "line_no": 8,
                                    "content": "import eu.europa.esig.dss.model.CertificationPermission;"
                                }
                            ],
                            "error_texts": [
                                "[7,32] cannot find symbol\nsymbol: class CertificationPermission\nlocation: package eu.europa.esig.dss.model\n",
                                "[7,32] cannot find symbol\n"
                            ]
                        },
                        "8": {
                            "lines": [
                                {
                                    "line_no": 7,
                                    "content": "import eu.europa.esig.dss.model.CertificationPermission;"
                                },
                                {
                                    "line_no": 8,
                                    "content": "import eu.europa.esig.dss.model.CertificationPermission;"
                                },
                                {
                                    "line_no": 9,
                                    "content": "import eu.europa.esig.dss.pades.PAdESSignatureParameters;"
                                }
                            ],
                            "error_texts": [
                                "[8,32] cannot find symbol\nsymbol: class CertificationPermission\nlocation: package eu.europa.esig.dss.model\n",
                                "[8,32] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 18172449617414701038
        },
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n-import eu.europa.esig.dss.pades.CertificationPermission;\n+import eu.europa.esig.dss.enumerations.CertificationPermission;\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/openpdfsign/Signer.java": "package org.openpdfsign;\n\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.enumerations.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class Signer {\n\n    //see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n        }\n        ;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n            }\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n        }*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}"
                },
                "compile_error_details": {
                    "src/main/java/org/openpdfsign/Signer.java": {
                        "7": {
                            "lines": [
                                {
                                    "line_no": 6,
                                    "content": "import eu.europa.esig.dss.model.*;"
                                },
                                {
                                    "line_no": 7,
                                    "content": "import eu.europa.esig.dss.enumerations.CertificationPermission;"
                                },
                                {
                                    "line_no": 8,
                                    "content": "import eu.europa.esig.dss.pades.PAdESSignatureParameters;"
                                }
                            ],
                            "error_texts": [
                                "[7,39] cannot find symbol\nsymbol: class CertificationPermission\nlocation: package eu.europa.esig.dss.enumerations\n",
                                "[7,39] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 13214508124106308544
        },
        {
            "input": "```diff\n--- src/main/java/org/openpdfsign/Signer.java\n+++ src/main/java/org/openpdfsign/Signer.java\n@@\n-import eu.europa.esig.dss.enumerations.CertificationPermission;\n+import eu.europa.esig.dss.model.CertificationPermission;\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/openpdfsign/Signer.java": "package org.openpdfsign;\n\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.model.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class Signer {\n\n    //see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n        }\n        ;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n            }\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n        }*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}"
                },
                "compile_error_details": {
                    "src/main/java/org/openpdfsign/Signer.java": {
                        "7": {
                            "lines": [
                                {
                                    "line_no": 6,
                                    "content": "import eu.europa.esig.dss.model.*;"
                                },
                                {
                                    "line_no": 7,
                                    "content": "import eu.europa.esig.dss.model.CertificationPermission;"
                                },
                                {
                                    "line_no": 8,
                                    "content": "import eu.europa.esig.dss.pades.PAdESSignatureParameters;"
                                }
                            ],
                            "error_texts": [
                                "[7,32] cannot find symbol\nsymbol: class CertificationPermission\nlocation: package eu.europa.esig.dss.model\n",
                                "[7,32] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 11652471645707099736
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/org/openpdfsign/Signer.java",
            "output": "package org.openpdfsign;\n\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.pades.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class Signer {\n\n    //see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n        }\n        ;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n            }\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n        }*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}\n",
            "error": "",
            "span_id": 17543580177405833571
        },
        {
            "input": "src/main/java/org/openpdfsign/Signer.java",
            "output": "package org.openpdfsign;\n\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.pades.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class Signer {\n\n    //see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n        }\n        ;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n            }\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n        }*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}\n",
            "error": "",
            "span_id": 13650110180294843912
        },
        {
            "input": "src/main/java/org/openpdfsign/Signer.java",
            "output": "package org.openpdfsign;\n\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.enumerations.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class Signer {\n\n    //see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n        }\n        ;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n            }\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n        }*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}",
            "error": "",
            "span_id": 16738577024316298768
        },
        {
            "input": "src/main/java/org/openpdfsign/Signer.java",
            "output": "package org.openpdfsign;\n\nimport com.beust.jcommander.Strings;\nimport eu.europa.esig.dss.enumerations.DigestAlgorithm;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.*;\nimport eu.europa.esig.dss.model.CertificationPermission;\nimport eu.europa.esig.dss.pades.PAdESSignatureParameters;\nimport eu.europa.esig.dss.pades.SignatureImageParameters;\nimport eu.europa.esig.dss.pades.signature.PAdESService;\nimport eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory;\nimport eu.europa.esig.dss.service.tsp.OnlineTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;\nimport eu.europa.esig.dss.spi.x509.tsp.TSPSource;\nimport eu.europa.esig.dss.token.JKSSignatureToken;\nimport eu.europa.esig.dss.token.KSPrivateKeyEntry;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n@Slf4j\npublic class Signer {\n\n    //see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n    private static final float POINTS_PER_MM = 1 / (10 * 2.54f) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n        }\n        ;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n            }\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n        }*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}",
            "error": "",
            "span_id": 12385060375913568624
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 3603942019901901604
        }
    ]
}