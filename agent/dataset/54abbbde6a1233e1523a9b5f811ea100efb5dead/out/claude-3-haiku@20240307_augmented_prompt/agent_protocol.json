{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- a/src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ b/src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -30,7 +30,7 @@ import com.jcabi.aspects.Immutable;\n import com.jcabi.aspects.Loggable;\n import com.jcabi.log.Logger;\n import com.jcabi.ssh.Shell.Plain;\n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Tv;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.concurrent.TimeUnit;\n@@ -74,7 +74,7 @@ public final class SshByPassword implements Shell {\n     @Override\n     public int exec(final String... commands) throws IOException {\n         try {\n-            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n+            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n         } catch (final IOException ex) {\n             Logger.error(this, \"#exec(%s): %s\", commands, ex.getMessage());\n             throw ex;\n--- a/src/main/java/com/jcabi/ssh/Ssh.java\n+++ b/src/main/java/com/jcabi/ssh/Ssh.java\n@@ -30,7 +30,7 @@ import com.jcabi.aspects.Immutable;\n import com.jcabi.aspects.Loggable;\n import com.jcabi.log.Logger;\n import com.jcabi.ssh.Shell.Plain;\n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Tv;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.concurrent.TimeUnit;\n@@ -232,7 +232,7 @@ public final class Ssh implements Shell {\n     @Override\n     public int exec(final String... commands) throws IOException {\n         try {\n-            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n+            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n         } catch (final IOException ex) {\n             Logger.error(this, \"#exec(%s): %s\", commands, ex.getMessage());\n             throw ex;\n```\n\nThe issue is caused by the updated dependency `com.jcabi:jcabi-aspects` from version `0.24.1` to `0.25.1`. The new version has changed the package structure, and the classes `Tv` are now located in `com.jcabi.aspects` instead of the previous package.\n\nThe provided diff updates the imports in the two affected files, `SshByPassword.java` and `Ssh.java`, to use the new package location for the `Tv` class.",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
            "span_id": 1524507171944193897
        },
        {
            "input": "```diff\n--- a/src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ b/src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -30,7 +30,7 @@ import com.jcabi.aspects.Immutable;\n import com.jcabi.aspects.Loggable;\n import com.jcabi.log.Logger;\n import com.jcabi.ssh.Shell.Plain;\n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Tv;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.concurrent.TimeUnit;\n@@ -74,7 +74,7 @@ public final class SshByPassword implements Shell {\n     @Override\n     public int exec(final String... commands) throws IOException {\n         try {\n-            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n+            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n         } catch (final IOException ex) {\n             Logger.error(this, \"#exec(%s): %s\", commands, ex.getMessage());\n             throw ex;\n--- a/src/main/java/com/jcabi/ssh/Ssh.java\n+++ b/src/main/java/com/jcabi/ssh/Ssh.java\n@@ -30,7 +30,7 @@ import com.jcabi.aspects.Immutable;\n import com.jcabi.aspects.Loggable;\n import com.jcabi.log.Logger;\n import com.jcabi.ssh.Shell.Plain;\n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Tv;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.concurrent.TimeUnit;\n@@ -232,7 +232,7 @@ public final class Ssh implements Shell {\n     @Override\n     public int exec(final String... commands) throws IOException {\n         try {\n-            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n+            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n         } catch (final IOException ex) {\n             Logger.error(this, \"#exec(%s): %s\", commands, ex.getMessage());\n             throw ex;\n```\n",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
            "span_id": 16755859200552546183
        },
        {
            "input": "```diff\n--- a/src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ b/src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -30,7 +30,7 @@ import com.jcabi.aspects.Immutable;\n import com.jcabi.aspects.Loggable;\n import com.jcabi.log.Logger;\n import com.jcabi.ssh.Shell.Plain;\n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Tv;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.concurrent.TimeUnit;\n@@ -74,7 +74,7 @@ public final class SshByPassword implements Shell {\n     @Override\n     public int exec(final String... commands) throws IOException {\n         try {\n-            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n+            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n         } catch (final IOException ex) {\n             Logger.error(this, \"#exec(%s): %s\", commands, ex.getMessage());\n             throw ex;\n--- a/src/main/java/com/jcabi/ssh/Ssh.java\n+++ b/src/main/java/com/jcabi/ssh/Ssh.java\n@@ -30,7 +30,7 @@ import com.jcabi.aspects.Immutable;\n import com.jcabi.aspects.Loggable;\n import com.jcabi.log.Logger;\n import com.jcabi.ssh.Shell.Plain;\n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Tv;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.concurrent.TimeUnit;\n@@ -232,7 +232,7 @@ public final class Ssh implements Shell {\n     @Override\n     public int exec(final String... commands) throws IOException {\n         try {\n-            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n+            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n         } catch (final IOException ex) {\n             Logger.error(this, \"#exec(%s): %s\", commands, ex.getMessage());\n             throw ex;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
            "span_id": 6897009180437860407
        },
        {
            "input": "```diff\n--- a/src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ b/src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -30,7 +30,7 @@ import com.jcabi.aspects.Immutable;\n import com.jcabi.aspects.Loggable;\n import com.jcabi.log.Logger;\n import com.jcabi.ssh.Shell.Plain;\n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Tv;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.concurrent.TimeUnit;\n@@ -74,7 +74,7 @@ public final class SshByPassword implements Shell {\n     @Override\n     public int exec(final String... commands) throws IOException {\n         try {\n-            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n+            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n         } catch (final IOException ex) {\n             Logger.error(this, \"#exec(%s): %s\", commands, ex.getMessage());\n             throw ex;\n--- a/src/main/java/com/jcabi/ssh/Ssh.java\n+++ b/src/main/java/com/jcabi/ssh/Ssh.java\n@@ -30,7 +30,7 @@ import com.jcabi.aspects.Immutable;\n import com.jcabi.aspects.Loggable;\n import com.jcabi.log.Logger;\n import com.jcabi.ssh.Shell.Plain;\n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Tv;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.concurrent.TimeUnit;\n@@ -232,7 +232,7 @@ public final class Ssh implements Shell {\n     @Override\n     public int exec(final String... commands) throws IOException {\n         try {\n-            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n+            return this.session.exec(Tv.FIVE, TimeUnit.MINUTES, commands);\n         } catch (final IOException ex) {\n             Logger.error(this, \"#exec(%s): %s\", commands, ex.getMessage());\n             throw ex;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
            "span_id": 14826537521580239398
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/com/jcabi/ssh/SshByPassword.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Tv;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.IOException;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\n/**\n * SSH channel with authentication by password.\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends AbstractSshShell {\n\n    /**\n     * User password.\n     */\n    private final transient String password;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param passwd Password\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final String adr, final int prt,\n        final String user, final String passwd)\n        throws UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (auth with password)...\",\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            final Session session = jsch.getSession(\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(this.password);\n            session.setServerAliveInterval(\n                (int) TimeUnit.SECONDS.toMillis(Tv.TEN)\n            );\n            session.setServerAliveCountMax(Tv.MILLION);\n            session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            return session;\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        }\n    }\n}\n",
            "error": "",
            "span_id": 17194534419850972785
        },
        {
            "input": "src/main/java/com/jcabi/ssh/Ssh.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Tv;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.URL;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\nimport org.cactoos.io.TeeInput;\nimport org.cactoos.scalar.LengthOf;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Single SSH Channel.\n *\n * <p>This class implements {@link Shell} interface. In order to use\n * it, just make an instance and call\n * {@link #exec(String, InputStream, OutputStream, OutputStream)} method:\n *\n * <pre> String hello = new Shell.Plain(\n *   new SSH(\n *     \"ssh.example.com\", 22,\n *     \"yegor\", \"-----BEGIN RSA PRIVATE KEY-----...\"\n *   )\n * ).exec(\"echo 'Hello, world!'\");</pre>\n *\n * <p>It is highly recommended to use classes from {@link Shell} interface,\n * they will simplify operations.</p>\n *\n * <p>Instances of this class are NOT reusable. Once you do\n * {@link Ssh#exec(String, InputStream, OutputStream, OutputStream)},\n * the connection is lost. You have to create a new {@link Ssh} object, if\n * you need to execute a new command.</p>\n *\n * @since 1.0\n * @see <a href=\"http://www.yegor256.com/2014/09/02/java-ssh-client.html\">article by Yegor Bugayenko</a>\n * @todo #30:30min Refactor this class into smaller ones to avoid null\n *  checking of passphrase. There should probably be separate classes for\n *  encrypted/unencrypted private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"key\", callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class Ssh extends AbstractSshShell {\n\n    /**\n     * Default SSH port.\n     */\n    public static final int PORT = 22;\n\n    /**\n     * Private SSH key.\n     */\n    private final transient String key;\n\n    /**\n     * Private SSH key pass phrase.\n     */\n    private final transient String passphrase;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr.getCanonicalHostName(), Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(adr, prt, user, new UncheckedText(new TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final InetAddress adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(\n            adr.getCanonicalHostName(), prt, user,\n            new UncheckedText(new TextOf(priv)).asString()\n        );\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv) throws UnknownHostException {\n        this(adr, prt, user, priv, null);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @param passphrs Pass phrase for encrypted priv. key\n     * @throws UnknownHostException when host is unknown.\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv,\n        final String passphrs\n    ) throws UnknownHostException {\n        super(adr, prt, user);\n        this.key = priv;\n        this.passphrase = passphrs;\n    }\n\n    /**\n     * Escape SSH argument.\n     * @param arg Argument to escape\n     * @return Escaped\n     */\n    @SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\n    public static String escape(final String arg) {\n        return String.format(\"'%s'\", arg.replace(\"'\", \"'\\\\''\"));\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        final File file = File.createTempFile(\"jcabi-ssh\", \".key\");\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            new Unchecked<>(\n                new LengthOf(\n                    new TeeInput(\n                        this.key.replaceAll(\"\\r\", \"\")\n                            .replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\")\n                            .trim(),\n                        file\n                    )\n                )\n            ).value();\n            jsch.setHostKeyRepository(new EasyRepo());\n            if (this.passphrase == null) {\n                jsch.addIdentity(file.getAbsolutePath());\n            } else {\n                jsch.addIdentity(\n                    this.getLogin(),\n                    this.key.getBytes(StandardCharsets.UTF_8),\n                    null,\n                    this.passphrase.getBytes(StandardCharsets.UTF_8)\n                );\n            }\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\",\n                this.getLogin(), this.getAddr(), this.getPort(),\n                file.length()\n            );\n            return this.session(jsch);\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        } finally {\n            Files.deleteIfExists(file.toPath());\n        }\n    }\n\n    /**\n     * Make session.\n     * @param sch The JSch\n     * @return The session\n     * @throws JSchException If fails\n     */\n    private Session session(final JSch sch) throws JSchException {\n        final Session session = sch.getSession(\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\n        session.setTimeout((int) TimeUnit.MINUTES.toMillis(1L));\n        session.setServerAliveInterval((int) TimeUnit.SECONDS.toMillis(1L));\n        session.setServerAliveCountMax(Tv.MILLION);\n        session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n        Logger.debug(\n            this,\n            \"SSH session opened to %s@%s:%s\",\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        return session;\n    }\n}\n",
            "error": "",
            "span_id": 8218690709489540950
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 9194857413057962266
        }
    ]
}