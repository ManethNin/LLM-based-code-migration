diff --git a/src/main/java/com/jcabi/ssh/Ssh.java b/src/main/java/com/jcabi/ssh/Ssh.java
index 50375ba..f049d3a 100644
--- a/src/main/java/com/jcabi/ssh/Ssh.java
+++ b/src/main/java/com/jcabi/ssh/Ssh.java
@@ -27,6 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  * OF THE POSSIBILITY OF SUCH DAMAGE.
  */
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
 package com.jcabi.ssh;
 
 import com.jcabi.aspects.RetryOnFailure;
@@ -55,105 +56,113 @@ import org.cactoos.text.UncheckedText;
 
 /**
  * Single SSH Channel.
- *
+*
  * <p>This class implements {@link Shell} interface. In order to use
  * it, just make an instance and call
  * {@link #exec(String, InputStream, OutputStream, OutputStream)} method:
- *
+*
  * <pre> String hello = new Shell.Plain(
- *   new SSH(
+*   new SSH(
  *     "ssh.example.com", 22,
  *     "yegor", "-----BEGIN RSA PRIVATE KEY-----..."
- *   )
+*   )
  * ).exec("echo 'Hello, world!'");</pre>
- *
+*
  * <p>It is highly recommended to use classes from {@link Shell} interface,
  * they will simplify operations.</p>
- *
+*
  * <p>Instances of this class are NOT reusable. Once you do
  * {@link Ssh#exec(String, InputStream, OutputStream, OutputStream)},
  * the connection is lost. You have to create a new {@link Ssh} object, if
  * you need to execute a new command.</p>
- *
+*
  * @since 1.0
  * @see <a href="http://www.yegor256.com/2014/09/02/java-ssh-client.html">article by Yegor Bugayenko</a>
  * @todo #30:30min Refactor this class into smaller ones to avoid null
  *  checking of passphrase. There should probably be separate classes for
  *  encrypted/unencrypted private key.
- */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
 @ToString
 @EqualsAndHashCode(of = "key", callSuper = true)
 @SuppressWarnings("PMD.TooManyMethods")
 public final class Ssh extends AbstractSshShell {
 
-    /**
+/**
      * Default SSH port.
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public static final int PORT = 22;
 
-    /**
+/**
      * Private SSH key.
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     private final transient String key;
 
-    /**
+/**
      * Private SSH key pass phrase.
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     private final transient String passphrase;
 
-    /**
+/**
      * Constructor.
      * @param adr IP address
      * @param user Login
      * @param priv Private SSH key
      * @throws IOException If fails
      * @since 1.4
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public Ssh(final String adr, final String user, final URL priv)
         throws IOException {
         this(adr, Ssh.PORT, user, priv);
-    }
+}
 
-    /**
+/**
      * Constructor.
      * @param adr IP address
      * @param user Login
      * @param priv Private SSH key
      * @throws IOException If fails
      * @since 1.4
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public Ssh(final InetAddress adr, final String user, final URL priv)
         throws IOException {
         this(adr, Ssh.PORT, user, priv);
-    }
+}
 
-    /**
+/**
      * Constructor.
      * @param adr IP address
      * @param user Login
      * @param priv Private SSH key
      * @throws UnknownHostException If fails
      * @since 1.4
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public Ssh(final String adr, final String user, final String priv)
         throws UnknownHostException {
         this(adr, Ssh.PORT, user, priv);
-    }
+}
 
-    /**
+/**
      * Constructor.
      * @param adr IP address
      * @param user Login
      * @param priv Private SSH key
      * @throws UnknownHostException If fails
      * @since 1.4
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public Ssh(final InetAddress adr, final String user, final String priv)
         throws UnknownHostException {
         this(adr.getCanonicalHostName(), Ssh.PORT, user, priv);
-    }
+}
 
-    /**
+/**
      * Constructor.
      * @param adr IP address
      * @param prt Port of server
@@ -162,13 +171,14 @@ public final class Ssh extends AbstractSshShell {
      * @throws IOException If fails
      * @since 1.4
      * @checkstyle ParameterNumberCheck (6 lines)
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public Ssh(final String adr, final int prt,
         final String user, final URL priv) throws IOException {
         this(adr, prt, user, new UncheckedText(new TextOf(priv)).asString());
-    }
+}
 
-    /**
+/**
      * Constructor.
      * @param adr IP address
      * @param prt Port of server
@@ -177,16 +187,17 @@ public final class Ssh extends AbstractSshShell {
      * @throws IOException If fails
      * @since 1.4
      * @checkstyle ParameterNumberCheck (6 lines)
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public Ssh(final InetAddress adr, final int prt,
         final String user, final URL priv) throws IOException {
-        this(
+this(
             adr.getCanonicalHostName(), prt, user,
             new UncheckedText(new TextOf(priv)).asString()
-        );
-    }
+);
+}
 
-    /**
+/**
      * Constructor.
      * @param adr IP address
      * @param prt Port of server
@@ -194,13 +205,14 @@ public final class Ssh extends AbstractSshShell {
      * @param priv Private SSH key
      * @throws UnknownHostException If fails
      * @checkstyle ParameterNumberCheck (6 lines)
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public Ssh(final String adr, final int prt,
         final String user, final String priv) throws UnknownHostException {
         this(adr, prt, user, priv, null);
-    }
+}
 
-    /**
+/**
      * Constructor.
      * @param adr IP address
      * @param prt Port of server
@@ -209,7 +221,8 @@ public final class Ssh extends AbstractSshShell {
      * @param passphrs Pass phrase for encrypted priv. key
      * @throws UnknownHostException when host is unknown.
      * @checkstyle ParameterNumberCheck (6 lines)
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public Ssh(final String adr, final int prt,
         final String user, final String priv,
         final String passphrs
@@ -217,30 +230,31 @@ public final class Ssh extends AbstractSshShell {
         super(adr, prt, user);
         this.key = priv;
         this.passphrase = passphrs;
-    }
+}
 
-    /**
+/**
      * Escape SSH argument.
      * @param arg Argument to escape
      * @return Escaped
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     @SuppressWarnings("PMD.ProhibitPublicStaticMethods")
     public static String escape(final String arg) {
         return String.format("'%s'", arg.replace("'", "'\\''"));
-    }
+}
 
     // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
-    @Override
+@Override
     @RetryOnFailure(
         attempts = Tv.SEVEN,
-        delay = 1,
+delay = 1,
         unit = TimeUnit.MINUTES,
         verbose = false,
         types = IOException.class
-    )
+                )
     protected Session session() throws IOException {
         final File file = File.createTempFile("jcabi-ssh", ".key");
-        try {
+try {
             JSch.setLogger(new JschLogger());
             final JSch jsch = new JSch();
             new Unchecked<>(
@@ -248,56 +262,57 @@ public final class Ssh extends AbstractSshShell {
                     new TeeInput(
                         this.key.replaceAll("\r", "")
                             .replaceAll("\n\\s+|\n{2,}", "\n")
-                            .trim(),
-                        file
-                    )
-                )
+.trim(),
+file
+)
+)
             ).value();
             jsch.setHostKeyRepository(new EasyRepo());
             if (this.passphrase == null) {
                 jsch.addIdentity(file.getAbsolutePath());
-            } else {
+} else {
                 jsch.addIdentity(
                     this.getLogin(),
                     this.key.getBytes(StandardCharsets.UTF_8),
-                    null,
+null,
                     this.passphrase.getBytes(StandardCharsets.UTF_8)
-                );
-            }
+);
+}
             Logger.debug(
-                this,
+this,
                 "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...",
                 this.getLogin(), this.getAddr(), this.getPort(),
                 file.length()
-            );
+);
             return this.session(jsch);
         } catch (final JSchException ex) {
             throw new IOException(ex);
-        } finally {
+} finally {
             Files.deleteIfExists(file.toPath());
-        }
-    }
+}
+}
 
-    /**
+/**
      * Make session.
      * @param sch The JSch
      * @return The session
      * @throws JSchException If fails
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     private Session session(final JSch sch) throws JSchException {
         final Session session = sch.getSession(
             this.getLogin(), this.getAddr(), this.getPort()
-        );
+);
         session.setConfig("StrictHostKeyChecking", "no");
         session.setTimeout((int) TimeUnit.MINUTES.toMillis(1L));
         session.setServerAliveInterval((int) TimeUnit.SECONDS.toMillis(1L));
         session.setServerAliveCountMax(Tv.MILLION);
         session.connect((int) TimeUnit.SECONDS.toMillis(10L));
-        Logger.debug(
-            this,
+            Logger.debug(
+this,
             "SSH session opened to %s@%s:%s",
             this.getLogin(), this.getAddr(), this.getPort()
-        );
+);
         return session;
-    }
 }
+}
\ No newline at end of file
diff --git a/src/main/java/com/jcabi/ssh/SshByPassword.java b/src/main/java/com/jcabi/ssh/SshByPassword.java
index e94facc..e10f103 100644
--- a/src/main/java/com/jcabi/ssh/SshByPassword.java
+++ b/src/main/java/com/jcabi/ssh/SshByPassword.java
@@ -27,6 +27,8 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  * OF THE POSSIBILITY OF SUCH DAMAGE.
  */
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
 package com.jcabi.ssh;
 
 import com.jcabi.aspects.RetryOnFailure;
@@ -45,17 +47,21 @@ import lombok.ToString;
  * SSH channel with authentication by password.
  * @since 1.4
  * @see Ssh For SSH channel with authenticaton using private key.
- */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
 @ToString
 @EqualsAndHashCode(of = "password", callSuper = true)
 public final class SshByPassword extends AbstractSshShell {
 
-    /**
+/**
      * User password.
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     private final transient String password;
 
-    /**
+/**
      * Constructor.
      * @param adr IP address
      * @param prt Port of server
@@ -63,45 +69,47 @@ public final class SshByPassword extends AbstractSshShell {
      * @param passwd Password
      * @throws UnknownHostException If fails
      * @checkstyle ParameterNumberCheck (6 lines)
-     */
+*/
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
+@RetryOnFailure(attempts = 3, delay = 1, unit = TimeUnit.SECONDS)
     public SshByPassword(final String adr, final int prt,
         final String user, final String passwd)
         throws UnknownHostException {
         super(adr, prt, user);
         this.password = passwd;
-    }
+}
 
     // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
-    @Override
+@Override
     @RetryOnFailure(
         attempts = Tv.SEVEN,
-        delay = 1,
+delay = 1,
         unit = TimeUnit.MINUTES,
         verbose = false,
         types = IOException.class
-    )
+)
     protected Session session() throws IOException {
-        try {
+try {
             JSch.setLogger(new JschLogger());
             final JSch jsch = new JSch();
             Logger.debug(
-                this,
+this,
                 "Opening SSH session to %s@%s:%s (auth with password)...",
                 this.getLogin(), this.getAddr(), this.getPort()
-            );
+);
             final Session session = jsch.getSession(
                 this.getLogin(), this.getAddr(), this.getPort()
-            );
+);
             session.setConfig("StrictHostKeyChecking", "no");
             session.setPassword(this.password);
             session.setServerAliveInterval(
                 (int) TimeUnit.SECONDS.toMillis(Tv.TEN)
-            );
+);
             session.setServerAliveCountMax(Tv.MILLION);
             session.connect((int) TimeUnit.SECONDS.toMillis(10L));
             return session;
         } catch (final JSchException ex) {
             throw new IOException(ex);
-        }
-    }
 }
+}
+}
\ No newline at end of file