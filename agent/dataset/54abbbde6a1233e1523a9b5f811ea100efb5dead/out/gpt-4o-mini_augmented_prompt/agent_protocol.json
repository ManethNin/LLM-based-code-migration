{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public final class SshByPassword implements Ssh {\n \n@@ -76,6 +76,6 @@\n         return new Through<>(this).value();\n     }\n }\n--- src/main/java/com/jcabi/ssh/Ssh.java\n+++ src/main/java/com/jcabi/ssh/Ssh.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public interface Ssh {\n \n@@ -234,6 +234,6 @@\n         return new Through<>(this).value();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------< com.jcabi:jcabi-ssh >-------------------------\n[INFO] Building jcabi-ssh 2.0-SNAPSHOT\n[INFO] from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[WARNING] The artifact org.slf4j:slf4j-log4j12:jar:2.0.7 has been relocated to org.slf4j:slf4j-reload4j:jar:2.0.7\n[INFO] Artifact log4j:log4j:jar:1.2.17 is present in the local repository, but cached from a remote repository ID that is unavailable in current build context, verifying that is downloadable from [central (https://repo.maven.apache.org/maven2, default, releases)]\n[INFO] Artifact log4j:log4j:jar:1.2.17 is present in the local repository, but cached from a remote repository ID that is unavailable in current build context, verifying that is downloadable from [central (https://repo.maven.apache.org/maven2, default, releases)]\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ jcabi-ssh ---\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ jcabi-ssh ---\n[INFO]\n[INFO] --- buildnumber:3.0.0:create (jcabi-build-number) @ jcabi-ssh ---\n[INFO] ShortRevision tag detected. The value is '7'.\n[INFO] Executing: /bin/sh -c cd '/mnt/repo' && 'git' 'rev-parse' '--verify' '--short=7' 'HEAD'\n[INFO] Working directory: /mnt/repo\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:08 min\n[INFO] Finished at: 2024-08-01T18:54:48Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.codehaus.mojo:buildnumber-maven-plugin:3.0.0:create (jcabi-build-number) on project jcabi-ssh: Cannot get the revision information from the scm repository :\n[ERROR] Exception while executing SCM command. Error while executing command. Error while executing process. Cannot run program \"git\" (in directory \"/mnt/repo\"): error=2, No such file or directory\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
                "updated_files": {
                    "src/main/java/com/jcabi/ssh/SshByPassword.java": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.IOException;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\n/**\n * SSH channel with authentication by password.\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends AbstractSshShell {\n\n    /**\n     * User password.\n     */\n    private final transient String password;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param passwd Password\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final String adr, final int prt,\n        final String user, final String passwd)\n        throws UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (auth with password)...\",\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            final Session session = jsch.getSession(\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(this.password);\n            session.setServerAliveInterval(\n                (int) TimeUnit.SECONDS.toMillis(Tv.TEN)\n            );\n            session.setServerAliveCountMax(Tv.MILLION);\n            session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            return session;\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        }\n    }\n}",
                    "src/main/java/com/jcabi/ssh/Ssh.java": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.URL;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\nimport org.cactoos.io.TeeInput;\nimport org.cactoos.scalar.LengthOf;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Single SSH Channel.\n *\n * <p>This class implements {@link Shell} interface. In order to use\n * it, just make an instance and call\n * {@link #exec(String, InputStream, OutputStream, OutputStream)} method:\n *\n * <pre> String hello = new Shell.Plain(\n *   new SSH(\n *     \"ssh.example.com\", 22,\n *     \"yegor\", \"-----BEGIN RSA PRIVATE KEY-----...\"\n *   )\n * ).exec(\"echo 'Hello, world!'\");</pre>\n *\n * <p>It is highly recommended to use classes from {@link Shell} interface,\n * they will simplify operations.</p>\n *\n * <p>Instances of this class are NOT reusable. Once you do\n * {@link Ssh#exec(String, InputStream, OutputStream, OutputStream)},\n * the connection is lost. You have to create a new {@link Ssh} object, if\n * you need to execute a new command.</p>\n *\n * @since 1.0\n * @see <a href=\"http://www.yegor256.com/2014/09/02/java-ssh-client.html\">article by Yegor Bugayenko</a>\n * @todo #30:30min Refactor this class into smaller ones to avoid null\n *  checking of passphrase. There should probably be separate classes for\n *  encrypted/unencrypted private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"key\", callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class Ssh extends AbstractSshShell {\n\n    /**\n     * Default SSH port.\n     */\n    public static final int PORT = 22;\n\n    /**\n     * Private SSH key.\n     */\n    private final transient String key;\n\n    /**\n     * Private SSH key pass phrase.\n     */\n    private final transient String passphrase;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr.getCanonicalHostName(), Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(adr, prt, user, new UncheckedText(new TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final InetAddress adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(\n            adr.getCanonicalHostName(), prt, user,\n            new UncheckedText(new TextOf(priv)).asString()\n        );\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv) throws UnknownHostException {\n        this(adr, prt, user, priv, null);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @param passphrs Pass phrase for encrypted priv. key\n     * @throws UnknownHostException when host is unknown.\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv,\n        final String passphrs\n    ) throws UnknownHostException {\n        super(adr, prt, user);\n        this.key = priv;\n        this.passphrase = passphrs;\n    }\n\n    /**\n     * Escape SSH argument.\n     * @param arg Argument to escape\n     * @return Escaped\n     */\n    @SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\n    public static String escape(final String arg) {\n        return String.format(\"'%s'\", arg.replace(\"'\", \"'\\\\''\"));\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        final File file = File.createTempFile(\"jcabi-ssh\", \".key\");\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            new Unchecked<>(\n                new LengthOf(\n                    new TeeInput(\n                        this.key.replaceAll(\"\\r\", \"\")\n                            .replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\")\n                            .trim(),\n                        file\n                    )\n                )\n            ).value();\n            jsch.setHostKeyRepository(new EasyRepo());\n            if (this.passphrase == null) {\n                jsch.addIdentity(file.getAbsolutePath());\n            } else {\n                jsch.addIdentity(\n                    this.getLogin(),\n                    this.key.getBytes(StandardCharsets.UTF_8),\n                    null,\n                    this.passphrase.getBytes(StandardCharsets.UTF_8)\n                );\n            }\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\",\n                this.getLogin(), this.getAddr(), this.getPort(),\n                file.length()\n            );\n            return this.session(jsch);\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        } finally {\n            Files.deleteIfExists(file.toPath());\n        }\n    }\n\n    /**\n     * Make session.\n     * @param sch The JSch\n     * @return The session\n     * @throws JSchException If fails\n     */\n    private Session session(final JSch sch) throws JSchException {\n        final Session session = sch.getSession(\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\n        session.setTimeout((int) TimeUnit.MINUTES.toMillis(1L));\n        session.setServerAliveInterval((int) TimeUnit.SECONDS.toMillis(1L));\n        session.setServerAliveCountMax(Tv.MILLION);\n        session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            Logger.debug(\n            this,\n            \"SSH session opened to %s@%s:%s\",\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        return session;\n    }\n}"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------< com.jcabi:jcabi-ssh >-------------------------\n[INFO] Building jcabi-ssh 2.0-SNAPSHOT\n[INFO] from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[WARNING] The artifact org.slf4j:slf4j-log4j12:jar:2.0.7 has been relocated to org.slf4j:slf4j-reload4j:jar:2.0.7\n[INFO] Artifact log4j:log4j:jar:1.2.17 is present in the local repository, but cached from a remote repository ID that is unavailable in current build context, verifying that is downloadable from [central (https://repo.maven.apache.org/maven2, default, releases)]\n[INFO] Artifact log4j:log4j:jar:1.2.17 is present in the local repository, but cached from a remote repository ID that is unavailable in current build context, verifying that is downloadable from [central (https://repo.maven.apache.org/maven2, default, releases)]\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ jcabi-ssh ---\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ jcabi-ssh ---\n[INFO]\n[INFO] --- buildnumber:3.0.0:create (jcabi-build-number) @ jcabi-ssh ---\n[INFO] ShortRevision tag detected. The value is '7'.\n[INFO] Executing: /bin/sh -c cd '/mnt/repo' && 'git' 'rev-parse' '--verify' '--short=7' 'HEAD'\n[INFO] Working directory: /mnt/repo\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:08 min\n[INFO] Finished at: 2024-08-01T18:54:48Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.codehaus.mojo:buildnumber-maven-plugin:3.0.0:create (jcabi-build-number) on project jcabi-ssh: Cannot get the revision information from the scm repository :\n[ERROR] Exception while executing SCM command. Error while executing command. Error while executing process. Cannot run program \"git\" (in directory \"/mnt/repo\"): error=2, No such file or directory\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
            "span_id": 24388686123433024
        },
        {
            "input": "```diff\n--- src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public final class SshByPassword implements Ssh {\n \n@@ -76,6 +76,6 @@\n         return new Through<>(this).value();\n     }\n }\n--- src/main/java/com/jcabi/ssh/Ssh.java\n+++ src/main/java/com/jcabi/ssh/Ssh.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public interface Ssh {\n \n@@ -234,6 +234,6 @@\n         return new Through<>(this).value();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
            "span_id": 4935390024372101799
        },
        {
            "input": "```diff\n--- src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public final class SshByPassword implements Ssh {\n \n@@ -76,6 +76,6 @@\n         return new Through<>(this).value();\n     }\n }\n--- src/main/java/com/jcabi/ssh/Ssh.java\n+++ src/main/java/com/jcabi/ssh/Ssh.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public interface Ssh {\n \n@@ -234,6 +234,6 @@\n         return new Through<>(this).value();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
            "span_id": 17444985368685243997
        },
        {
            "input": "```diff\n--- src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public final class SshByPassword implements Ssh {\n \n@@ -76,6 +76,6 @@\n         return new Through<>(this).value();\n     }\n }\n--- src/main/java/com/jcabi/ssh/Ssh.java\n+++ src/main/java/com/jcabi/ssh/Ssh.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public interface Ssh {\n \n@@ -234,6 +234,6 @@\n         return new Through<>(this).value();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
            "span_id": 8241285221552683208
        },
        {
            "input": "```diff\n--- src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public final class SshByPassword implements Ssh {\n \n@@ -76,6 +76,6 @@\n         return new Through<>(this).value();\n     }\n }\n--- src/main/java/com/jcabi/ssh/Ssh.java\n+++ src/main/java/com/jcabi/ssh/Ssh.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public interface Ssh {\n \n@@ -234,6 +234,6 @@\n         return new Through<>(this).value();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
            "span_id": 16179339996390294674
        },
        {
            "input": "```diff\n--- src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public final class SshByPassword implements Ssh {\n \n@@ -76,6 +76,6 @@\n         return new Through<>(this).value();\n     }\n }\n--- src/main/java/com/jcabi/ssh/Ssh.java\n+++ src/main/java/com/jcabi/ssh/Ssh.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public interface Ssh {\n \n@@ -234,6 +234,6 @@\n         return new Through<>(this).value();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
            "span_id": 10679265918216926597
        },
        {
            "input": "```diff\n--- src/main/java/com/jcabi/ssh/SshByPassword.java\n+++ src/main/java/com/jcabi/ssh/SshByPassword.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public final class SshByPassword implements Ssh {\n \n@@ -76,6 +76,6 @@\n         return new Through<>(this).value();\n     }\n }\n--- src/main/java/com/jcabi/ssh/Ssh.java\n+++ src/main/java/com/jcabi/ssh/Ssh.java\n@@ -1,5 +1,5 @@\n package com.jcabi.ssh;\n \n-import com.jcabi.aspects.Tv;\n+import com.jcabi.aspects.Through;\n \n public interface Ssh {\n \n@@ -234,6 +234,6 @@\n         return new Through<>(this).value();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/SshByPassword.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/SshByPassword.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic final class SshByPassword implements Ssh {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/ssh/Ssh.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/ssh/Ssh.java does not contain these 6 exact lines in a row:\n```\npackage com.jcabi.ssh;\nimport com.jcabi.aspects.Tv;\npublic interface Ssh {\n```",
            "span_id": 16350452047084254790
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/com/jcabi/ssh/SshByPassword.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.IOException;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\n/**\n * SSH channel with authentication by password.\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends AbstractSshShell {\n\n    /**\n     * User password.\n     */\n    private final transient String password;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param passwd Password\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final String adr, final int prt,\n        final String user, final String passwd)\n        throws UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (auth with password)...\",\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            final Session session = jsch.getSession(\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(this.password);\n            session.setServerAliveInterval(\n                (int) TimeUnit.SECONDS.toMillis(Tv.TEN)\n            );\n            session.setServerAliveCountMax(Tv.MILLION);\n            session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            return session;\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        }\n    }\n}",
            "error": "",
            "span_id": 4562910679639209400
        },
        {
            "input": "src/main/java/com/jcabi/ssh/Ssh.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.URL;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\nimport org.cactoos.io.TeeInput;\nimport org.cactoos.scalar.LengthOf;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Single SSH Channel.\n *\n * <p>This class implements {@link Shell} interface. In order to use\n * it, just make an instance and call\n * {@link #exec(String, InputStream, OutputStream, OutputStream)} method:\n *\n * <pre> String hello = new Shell.Plain(\n *   new SSH(\n *     \"ssh.example.com\", 22,\n *     \"yegor\", \"-----BEGIN RSA PRIVATE KEY-----...\"\n *   )\n * ).exec(\"echo 'Hello, world!'\");</pre>\n *\n * <p>It is highly recommended to use classes from {@link Shell} interface,\n * they will simplify operations.</p>\n *\n * <p>Instances of this class are NOT reusable. Once you do\n * {@link Ssh#exec(String, InputStream, OutputStream, OutputStream)},\n * the connection is lost. You have to create a new {@link Ssh} object, if\n * you need to execute a new command.</p>\n *\n * @since 1.0\n * @see <a href=\"http://www.yegor256.com/2014/09/02/java-ssh-client.html\">article by Yegor Bugayenko</a>\n * @todo #30:30min Refactor this class into smaller ones to avoid null\n *  checking of passphrase. There should probably be separate classes for\n *  encrypted/unencrypted private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"key\", callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class Ssh extends AbstractSshShell {\n\n    /**\n     * Default SSH port.\n     */\n    public static final int PORT = 22;\n\n    /**\n     * Private SSH key.\n     */\n    private final transient String key;\n\n    /**\n     * Private SSH key pass phrase.\n     */\n    private final transient String passphrase;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr.getCanonicalHostName(), Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(adr, prt, user, new UncheckedText(new TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final InetAddress adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(\n            adr.getCanonicalHostName(), prt, user,\n            new UncheckedText(new TextOf(priv)).asString()\n        );\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv) throws UnknownHostException {\n        this(adr, prt, user, priv, null);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @param passphrs Pass phrase for encrypted priv. key\n     * @throws UnknownHostException when host is unknown.\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv,\n        final String passphrs\n    ) throws UnknownHostException {\n        super(adr, prt, user);\n        this.key = priv;\n        this.passphrase = passphrs;\n    }\n\n    /**\n     * Escape SSH argument.\n     * @param arg Argument to escape\n     * @return Escaped\n     */\n    @SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\n    public static String escape(final String arg) {\n        return String.format(\"'%s'\", arg.replace(\"'\", \"'\\\\''\"));\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        final File file = File.createTempFile(\"jcabi-ssh\", \".key\");\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            new Unchecked<>(\n                new LengthOf(\n                    new TeeInput(\n                        this.key.replaceAll(\"\\r\", \"\")\n                            .replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\")\n                            .trim(),\n                        file\n                    )\n                )\n            ).value();\n            jsch.setHostKeyRepository(new EasyRepo());\n            if (this.passphrase == null) {\n                jsch.addIdentity(file.getAbsolutePath());\n            } else {\n                jsch.addIdentity(\n                    this.getLogin(),\n                    this.key.getBytes(StandardCharsets.UTF_8),\n                    null,\n                    this.passphrase.getBytes(StandardCharsets.UTF_8)\n                );\n            }\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\",\n                this.getLogin(), this.getAddr(), this.getPort(),\n                file.length()\n            );\n            return this.session(jsch);\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        } finally {\n            Files.deleteIfExists(file.toPath());\n        }\n    }\n\n    /**\n     * Make session.\n     * @param sch The JSch\n     * @return The session\n     * @throws JSchException If fails\n     */\n    private Session session(final JSch sch) throws JSchException {\n        final Session session = sch.getSession(\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\n        session.setTimeout((int) TimeUnit.MINUTES.toMillis(1L));\n        session.setServerAliveInterval((int) TimeUnit.SECONDS.toMillis(1L));\n        session.setServerAliveCountMax(Tv.MILLION);\n        session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            Logger.debug(\n            this,\n            \"SSH session opened to %s@%s:%s\",\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        return session;\n    }\n}",
            "error": "",
            "span_id": 13503756833159949835
        },
        {
            "input": "src/main/java/com/jcabi/ssh/SshByPassword.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.IOException;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\n/**\n * SSH channel with authentication by password.\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends AbstractSshShell {\n\n    /**\n     * User password.\n     */\n    private final transient String password;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param passwd Password\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final String adr, final int prt,\n        final String user, final String passwd)\n        throws UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (auth with password)...\",\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            final Session session = jsch.getSession(\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(this.password);\n            session.setServerAliveInterval(\n                (int) TimeUnit.SECONDS.toMillis(Tv.TEN)\n            );\n            session.setServerAliveCountMax(Tv.MILLION);\n            session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            return session;\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        }\n    }\n}",
            "error": "",
            "span_id": 9124549588379647335
        },
        {
            "input": "src/main/java/com/jcabi/ssh/Ssh.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.URL;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\nimport org.cactoos.io.TeeInput;\nimport org.cactoos.scalar.LengthOf;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Single SSH Channel.\n *\n * <p>This class implements {@link Shell} interface. In order to use\n * it, just make an instance and call\n * {@link #exec(String, InputStream, OutputStream, OutputStream)} method:\n *\n * <pre> String hello = new Shell.Plain(\n *   new SSH(\n *     \"ssh.example.com\", 22,\n *     \"yegor\", \"-----BEGIN RSA PRIVATE KEY-----...\"\n *   )\n * ).exec(\"echo 'Hello, world!'\");</pre>\n *\n * <p>It is highly recommended to use classes from {@link Shell} interface,\n * they will simplify operations.</p>\n *\n * <p>Instances of this class are NOT reusable. Once you do\n * {@link Ssh#exec(String, InputStream, OutputStream, OutputStream)},\n * the connection is lost. You have to create a new {@link Ssh} object, if\n * you need to execute a new command.</p>\n *\n * @since 1.0\n * @see <a href=\"http://www.yegor256.com/2014/09/02/java-ssh-client.html\">article by Yegor Bugayenko</a>\n * @todo #30:30min Refactor this class into smaller ones to avoid null\n *  checking of passphrase. There should probably be separate classes for\n *  encrypted/unencrypted private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"key\", callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class Ssh extends AbstractSshShell {\n\n    /**\n     * Default SSH port.\n     */\n    public static final int PORT = 22;\n\n    /**\n     * Private SSH key.\n     */\n    private final transient String key;\n\n    /**\n     * Private SSH key pass phrase.\n     */\n    private final transient String passphrase;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr.getCanonicalHostName(), Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(adr, prt, user, new UncheckedText(new TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final InetAddress adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(\n            adr.getCanonicalHostName(), prt, user,\n            new UncheckedText(new TextOf(priv)).asString()\n        );\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv) throws UnknownHostException {\n        this(adr, prt, user, priv, null);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @param passphrs Pass phrase for encrypted priv. key\n     * @throws UnknownHostException when host is unknown.\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv,\n        final String passphrs\n    ) throws UnknownHostException {\n        super(adr, prt, user);\n        this.key = priv;\n        this.passphrase = passphrs;\n    }\n\n    /**\n     * Escape SSH argument.\n     * @param arg Argument to escape\n     * @return Escaped\n     */\n    @SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\n    public static String escape(final String arg) {\n        return String.format(\"'%s'\", arg.replace(\"'\", \"'\\\\''\"));\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        final File file = File.createTempFile(\"jcabi-ssh\", \".key\");\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            new Unchecked<>(\n                new LengthOf(\n                    new TeeInput(\n                        this.key.replaceAll(\"\\r\", \"\")\n                            .replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\")\n                            .trim(),\n                        file\n                    )\n                )\n            ).value();\n            jsch.setHostKeyRepository(new EasyRepo());\n            if (this.passphrase == null) {\n                jsch.addIdentity(file.getAbsolutePath());\n            } else {\n                jsch.addIdentity(\n                    this.getLogin(),\n                    this.key.getBytes(StandardCharsets.UTF_8),\n                    null,\n                    this.passphrase.getBytes(StandardCharsets.UTF_8)\n                );\n            }\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\",\n                this.getLogin(), this.getAddr(), this.getPort(),\n                file.length()\n            );\n            return this.session(jsch);\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        } finally {\n            Files.deleteIfExists(file.toPath());\n        }\n    }\n\n    /**\n     * Make session.\n     * @param sch The JSch\n     * @return The session\n     * @throws JSchException If fails\n     */\n    private Session session(final JSch sch) throws JSchException {\n        final Session session = sch.getSession(\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\n        session.setTimeout((int) TimeUnit.MINUTES.toMillis(1L));\n        session.setServerAliveInterval((int) TimeUnit.SECONDS.toMillis(1L));\n        session.setServerAliveCountMax(Tv.MILLION);\n        session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            Logger.debug(\n            this,\n            \"SSH session opened to %s@%s:%s\",\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        return session;\n    }\n}",
            "error": "",
            "span_id": 1412490598176982369
        },
        {
            "input": "src/main/java/com/jcabi/ssh/SshByPassword.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.IOException;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\n/**\n * SSH channel with authentication by password.\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends AbstractSshShell {\n\n    /**\n     * User password.\n     */\n    private final transient String password;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param passwd Password\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final String adr, final int prt,\n        final String user, final String passwd)\n        throws UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (auth with password)...\",\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            final Session session = jsch.getSession(\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(this.password);\n            session.setServerAliveInterval(\n                (int) TimeUnit.SECONDS.toMillis(Tv.TEN)\n            );\n            session.setServerAliveCountMax(Tv.MILLION);\n            session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            return session;\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        }\n    }\n}",
            "error": "",
            "span_id": 12582701549405388048
        },
        {
            "input": "src/main/java/com/jcabi/ssh/Ssh.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.URL;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\nimport org.cactoos.io.TeeInput;\nimport org.cactoos.scalar.LengthOf;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Single SSH Channel.\n *\n * <p>This class implements {@link Shell} interface. In order to use\n * it, just make an instance and call\n * {@link #exec(String, InputStream, OutputStream, OutputStream)} method:\n *\n * <pre> String hello = new Shell.Plain(\n *   new SSH(\n *     \"ssh.example.com\", 22,\n *     \"yegor\", \"-----BEGIN RSA PRIVATE KEY-----...\"\n *   )\n * ).exec(\"echo 'Hello, world!'\");</pre>\n *\n * <p>It is highly recommended to use classes from {@link Shell} interface,\n * they will simplify operations.</p>\n *\n * <p>Instances of this class are NOT reusable. Once you do\n * {@link Ssh#exec(String, InputStream, OutputStream, OutputStream)},\n * the connection is lost. You have to create a new {@link Ssh} object, if\n * you need to execute a new command.</p>\n *\n * @since 1.0\n * @see <a href=\"http://www.yegor256.com/2014/09/02/java-ssh-client.html\">article by Yegor Bugayenko</a>\n * @todo #30:30min Refactor this class into smaller ones to avoid null\n *  checking of passphrase. There should probably be separate classes for\n *  encrypted/unencrypted private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"key\", callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class Ssh extends AbstractSshShell {\n\n    /**\n     * Default SSH port.\n     */\n    public static final int PORT = 22;\n\n    /**\n     * Private SSH key.\n     */\n    private final transient String key;\n\n    /**\n     * Private SSH key pass phrase.\n     */\n    private final transient String passphrase;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr.getCanonicalHostName(), Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(adr, prt, user, new UncheckedText(new TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final InetAddress adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(\n            adr.getCanonicalHostName(), prt, user,\n            new UncheckedText(new TextOf(priv)).asString()\n        );\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv) throws UnknownHostException {\n        this(adr, prt, user, priv, null);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @param passphrs Pass phrase for encrypted priv. key\n     * @throws UnknownHostException when host is unknown.\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv,\n        final String passphrs\n    ) throws UnknownHostException {\n        super(adr, prt, user);\n        this.key = priv;\n        this.passphrase = passphrs;\n    }\n\n    /**\n     * Escape SSH argument.\n     * @param arg Argument to escape\n     * @return Escaped\n     */\n    @SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\n    public static String escape(final String arg) {\n        return String.format(\"'%s'\", arg.replace(\"'\", \"'\\\\''\"));\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        final File file = File.createTempFile(\"jcabi-ssh\", \".key\");\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            new Unchecked<>(\n                new LengthOf(\n                    new TeeInput(\n                        this.key.replaceAll(\"\\r\", \"\")\n                            .replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\")\n                            .trim(),\n                        file\n                    )\n                )\n            ).value();\n            jsch.setHostKeyRepository(new EasyRepo());\n            if (this.passphrase == null) {\n                jsch.addIdentity(file.getAbsolutePath());\n            } else {\n                jsch.addIdentity(\n                    this.getLogin(),\n                    this.key.getBytes(StandardCharsets.UTF_8),\n                    null,\n                    this.passphrase.getBytes(StandardCharsets.UTF_8)\n                );\n            }\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\",\n                this.getLogin(), this.getAddr(), this.getPort(),\n                file.length()\n            );\n            return this.session(jsch);\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        } finally {\n            Files.deleteIfExists(file.toPath());\n        }\n    }\n\n    /**\n     * Make session.\n     * @param sch The JSch\n     * @return The session\n     * @throws JSchException If fails\n     */\n    private Session session(final JSch sch) throws JSchException {\n        final Session session = sch.getSession(\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\n        session.setTimeout((int) TimeUnit.MINUTES.toMillis(1L));\n        session.setServerAliveInterval((int) TimeUnit.SECONDS.toMillis(1L));\n        session.setServerAliveCountMax(Tv.MILLION);\n        session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            Logger.debug(\n            this,\n            \"SSH session opened to %s@%s:%s\",\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        return session;\n    }\n}",
            "error": "",
            "span_id": 484922695176075391
        },
        {
            "input": "src/main/java/com/jcabi/ssh/SshByPassword.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.IOException;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\n/**\n * SSH channel with authentication by password.\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends AbstractSshShell {\n\n    /**\n     * User password.\n     */\n    private final transient String password;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param passwd Password\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final String adr, final int prt,\n        final String user, final String passwd)\n        throws UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (auth with password)...\",\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            final Session session = jsch.getSession(\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(this.password);\n            session.setServerAliveInterval(\n                (int) TimeUnit.SECONDS.toMillis(Tv.TEN)\n            );\n            session.setServerAliveCountMax(Tv.MILLION);\n            session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            return session;\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        }\n    }\n}",
            "error": "",
            "span_id": 18113760827013625845
        },
        {
            "input": "src/main/java/com/jcabi/ssh/Ssh.java",
            "output": "/*\n * Copyright (c) 2014-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.ssh;\n\nimport com.jcabi.aspects.RetryOnFailure;\nimport com.jcabi.aspects.Through;\nimport com.jcabi.log.Logger;\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.JSchException;\nimport com.jcraft.jsch.Session;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.URL;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.util.concurrent.TimeUnit;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\nimport org.cactoos.io.TeeInput;\nimport org.cactoos.scalar.LengthOf;\nimport org.cactoos.scalar.Unchecked;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.UncheckedText;\n\n/**\n * Single SSH Channel.\n *\n * <p>This class implements {@link Shell} interface. In order to use\n * it, just make an instance and call\n * {@link #exec(String, InputStream, OutputStream, OutputStream)} method:\n *\n * <pre> String hello = new Shell.Plain(\n *   new SSH(\n *     \"ssh.example.com\", 22,\n *     \"yegor\", \"-----BEGIN RSA PRIVATE KEY-----...\"\n *   )\n * ).exec(\"echo 'Hello, world!'\");</pre>\n *\n * <p>It is highly recommended to use classes from {@link Shell} interface,\n * they will simplify operations.</p>\n *\n * <p>Instances of this class are NOT reusable. Once you do\n * {@link Ssh#exec(String, InputStream, OutputStream, OutputStream)},\n * the connection is lost. You have to create a new {@link Ssh} object, if\n * you need to execute a new command.</p>\n *\n * @since 1.0\n * @see <a href=\"http://www.yegor256.com/2014/09/02/java-ssh-client.html\">article by Yegor Bugayenko</a>\n * @todo #30:30min Refactor this class into smaller ones to avoid null\n *  checking of passphrase. There should probably be separate classes for\n *  encrypted/unencrypted private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"key\", callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class Ssh extends AbstractSshShell {\n\n    /**\n     * Default SSH port.\n     */\n    public static final int PORT = 22;\n\n    /**\n     * Private SSH key.\n     */\n    private final transient String key;\n\n    /**\n     * Private SSH key pass phrase.\n     */\n    private final transient String passphrase;\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final URL priv)\n        throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final String priv)\n        throws UnknownHostException {\n        this(adr.getCanonicalHostName(), Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(adr, prt, user, new UncheckedText(new TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws IOException If fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final InetAddress adr, final int prt,\n        final String user, final URL priv) throws IOException {\n        this(\n            adr.getCanonicalHostName(), prt, user,\n            new UncheckedText(new TextOf(priv)).asString()\n        );\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @throws UnknownHostException If fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv) throws UnknownHostException {\n        this(adr, prt, user, priv, null);\n    }\n\n    /**\n     * Constructor.\n     * @param adr IP address\n     * @param prt Port of server\n     * @param user Login\n     * @param priv Private SSH key\n     * @param passphrs Pass phrase for encrypted priv. key\n     * @throws UnknownHostException when host is unknown.\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt,\n        final String user, final String priv,\n        final String passphrs\n    ) throws UnknownHostException {\n        super(adr, prt, user);\n        this.key = priv;\n        this.passphrase = passphrs;\n    }\n\n    /**\n     * Escape SSH argument.\n     * @param arg Argument to escape\n     * @return Escaped\n     */\n    @SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\n    public static String escape(final String arg) {\n        return String.format(\"'%s'\", arg.replace(\"'\", \"'\\\\''\"));\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        final File file = File.createTempFile(\"jcabi-ssh\", \".key\");\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            new Unchecked<>(\n                new LengthOf(\n                    new TeeInput(\n                        this.key.replaceAll(\"\\r\", \"\")\n                            .replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\")\n                            .trim(),\n                        file\n                    )\n                )\n            ).value();\n            jsch.setHostKeyRepository(new EasyRepo());\n            if (this.passphrase == null) {\n                jsch.addIdentity(file.getAbsolutePath());\n            } else {\n                jsch.addIdentity(\n                    this.getLogin(),\n                    this.key.getBytes(StandardCharsets.UTF_8),\n                    null,\n                    this.passphrase.getBytes(StandardCharsets.UTF_8)\n                );\n            }\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\",\n                this.getLogin(), this.getAddr(), this.getPort(),\n                file.length()\n            );\n            return this.session(jsch);\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        } finally {\n            Files.deleteIfExists(file.toPath());\n        }\n    }\n\n    /**\n     * Make session.\n     * @param sch The JSch\n     * @return The session\n     * @throws JSchException If fails\n     */\n    private Session session(final JSch sch) throws JSchException {\n        final Session session = sch.getSession(\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\n        session.setTimeout((int) TimeUnit.MINUTES.toMillis(1L));\n        session.setServerAliveInterval((int) TimeUnit.SECONDS.toMillis(1L));\n        session.setServerAliveCountMax(Tv.MILLION);\n        session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            Logger.debug(\n            this,\n            \"SSH session opened to %s@%s:%s\",\n            this.getLogin(), this.getAddr(), this.getPort()\n        );\n        return session;\n    }\n}",
            "error": "",
            "span_id": 2639021537600632704
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}