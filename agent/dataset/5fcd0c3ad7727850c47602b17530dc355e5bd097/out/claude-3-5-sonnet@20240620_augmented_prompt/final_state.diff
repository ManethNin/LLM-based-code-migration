diff --git a/src/main/java/org/pitest/elements/MutationReportListener.java b/src/main/java/org/pitest/elements/MutationReportListener.java
index b9031f6..aa258e5 100644
--- a/src/main/java/org/pitest/elements/MutationReportListener.java
+++ b/src/main/java/org/pitest/elements/MutationReportListener.java
@@ -16,6 +16,9 @@ import java.io.Writer;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.Optional;
+import java.util.Collection;
+import java.util.stream.Collectors;
 
 public class MutationReportListener implements MutationResultListener {
 
@@ -102,7 +105,7 @@ public class MutationReportListener implements MutationResultListener {
   private MutationTestSummaryData createSummaryData(
       final CoverageDatabase coverage, final ClassMutationResults data) {
     return new MutationTestSummaryData(data.getFileName(),
-        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));
+        data.getMutations(), null);
   }
 
   private void updatePackageSummary(
diff --git a/src/test/java/org/pitest/elements/MutationHtmlReportListenerTest.java b/src/test/java/org/pitest/elements/MutationHtmlReportListenerTest.java
index 81233e5..06ebd5e 100644
--- a/src/test/java/org/pitest/elements/MutationHtmlReportListenerTest.java
+++ b/src/test/java/org/pitest/elements/MutationHtmlReportListenerTest.java
@@ -1,8 +1,7 @@
 package org.pitest.elements;
 
-import org.junit.jupiter.api.*;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.pitest.classinfo.ClassInfo;
 import org.pitest.classinfo.ClassName;
 import org.pitest.coverage.CoverageDatabase;
@@ -11,42 +10,34 @@ import org.pitest.util.ResultOutputStrategy;
 
 import java.io.File;
 import java.io.Writer;
+import java.io.StringWriter;
+import java.util.Collection;
 import java.util.Collections;
 
 import static org.mockito.ArgumentMatchers.anyCollection;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.*;
 import static org.mockito.Mockito.when;
 
 public class MutationHtmlReportListenerTest {
 
   private MutationReportListener testee;
 
-  @Mock
   private CoverageDatabase coverageDb;
 
-  @Mock
   private ResultOutputStrategy outputStrategy;
 
-  @Mock
   private SourceLocator sourceLocator;
 
-  @Mock
   private Writer writer;
 
-  @Mock
-  private ClassInfo classInfo;
-
   @BeforeEach
   public void setUp() {
-    MockitoAnnotations.openMocks(this);
-
-    when(this.outputStrategy.createWriterForFile(any(String.class)))
-        .thenReturn(this.writer);
-    when(this.classInfo.getName()).thenReturn(ClassName.fromString("foo"));
-    when(this.coverageDb.getClassInfo(anyCollection())).thenReturn(
-        Collections.singleton(this.classInfo));
-
+    this.coverageDb = mock(CoverageDatabase.class);
+    this.outputStrategy = mock(ResultOutputStrategy.class);
+    this.sourceLocator = mock(SourceLocator.class);
+    this.writer = new StringWriter();
+    when(this.outputStrategy.createWriterForFile(any())).thenReturn(this.writer);
     this.testee = new MutationReportListener(this.coverageDb,
         this.outputStrategy, this.sourceLocator);
   }
diff --git a/src/test/java/org/pitest/elements/utils/JsonParserTest.java b/src/test/java/org/pitest/elements/utils/JsonParserTest.java
index 5386809..d752e54 100644
--- a/src/test/java/org/pitest/elements/utils/JsonParserTest.java
+++ b/src/test/java/org/pitest/elements/utils/JsonParserTest.java
@@ -72,10 +72,10 @@ public class JsonParserTest {
   private PackageSummaryMap createPackageSummaryMap(
       final Map<String, List<MutationResult>> mutantsByFile) {
     final PackageSummaryMap map = new PackageSummaryMap();
-    for (final String fileName : mutantsByFile.keySet()) {
-      final ClassInfo classInfo = new MockClassInfo(fileName);
+    for (final Map.Entry<String, List<MutationResult>> entry : mutantsByFile.entrySet()) {
+      final String fileName = entry.getKey();
       final MutationTestSummaryData data = new MutationTestSummaryData(fileName,
-          mutantsByFile.get(fileName), Collections.singletonList(classInfo));
+          entry.getValue(), null);
       map.update("package", data);
     }
     return map;
@@ -83,10 +83,9 @@ public class JsonParserTest {
 
   private PackageSummaryMap createPackageSummaryMap(List<String> files) {
     final PackageSummaryMap map = new PackageSummaryMap();
-    for (String fileName : files) {
-      final ClassInfo classInfo = new MockClassInfo(fileName);
+    for (final String fileName : files) {
       final MutationTestSummaryData data = new MutationTestSummaryData(fileName,
-          Collections.emptyList(), Collections.singletonList(classInfo));
+          Collections.emptyList(), null);
       map.update("package", data);
     }
     return map;
@@ -136,15 +135,13 @@ class MockSourceLocator implements SourceLocator {
   }
 }
 
-class MockClassInfo extends ClassInfo {
+class MockClassInfo {
   final private String fileName;
 
-  MockClassInfo(final String fileName) {
-    super(null, null, new MockClassInfoBuilder());
+  public MockClassInfo(final String fileName) {
     this.fileName = fileName;
   }
 
-  @Override
   public ClassName getName() {
     return ClassName.fromString("package." + fileName);
   }