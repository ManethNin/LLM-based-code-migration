{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.createClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.createClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.createClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\nsymbol: method createClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n",
                                "[105,38] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 17955979262735979197
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.createClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\n",
                                "[105,38] cannot find symbol\nsymbol: method getClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 18216559279770582688
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.getCoveredClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getCoveredClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.getCoveredClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\n",
                                "[105,38] cannot find symbol\nsymbol: method getCoveredClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 17837277222315266408
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.getCoveredClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.createCoveredClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.createCoveredClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.createCoveredClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\nsymbol: method createCoveredClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n",
                                "[105,38] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 10041490724312610757
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.createCoveredClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.computeClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.computeClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.computeClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\n",
                                "[105,38] cannot find symbol\nsymbol: method computeClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 2676512660239214268
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.computeClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\n",
                                "[105,38] cannot find symbol\nsymbol: method getClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 7820815267001073513
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClassName())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClassName())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClassName())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,78] cannot find symbol\n",
                                "[105,78] cannot find symbol\nsymbol: method getMutatedClassName()\nlocation: variable data of type org.pitest.mutationtest.ClassMutationResults\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 15233055412337060762
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClassName())));\n+        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass().getName())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass().getName())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass().getName())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,96] cannot find symbol\n",
                                "[105,96] cannot find symbol\nsymbol: method getName()\nlocation: class org.pitest.classinfo.ClassName\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 12868797016529187626
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass().getName())));\n+        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\n",
                                "[105,38] cannot find symbol\nsymbol: method getClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 8165397325017400653
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.getClassInfo(data.getMutatedClass()));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getClassInfo(data.getMutatedClass()));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.getClassInfo(data.getMutatedClass()));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\n",
                                "[105,38] cannot find symbol\nsymbol: method getClassInfo(org.pitest.classinfo.ClassName)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 1973072255072620618
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.getClassInfo(data.getMutatedClass()));\n+        data.getMutations(), coverage.computeClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.computeClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.computeClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\n",
                                "[105,38] cannot find symbol\nsymbol: method computeClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 17910704340979460784
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.computeClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.createClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.createClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.createClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\nsymbol: method createClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n",
                                "[105,38] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 15217416120167343450
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.createClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\n",
                                "[105,38] cannot find symbol\nsymbol: method getClassInfo(java.util.Set<org.pitest.classinfo.ClassName>)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 3184313307526818272
        },
        {
            "input": "```diff\nsrc/main/java/org/pitest/elements/MutationReportListener.java\n@@\n-        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n+        data.getMutations(), coverage.getClassInfo(data.getMutatedClass()));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getClassInfo(data.getMutatedClass()));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/org/pitest/elements/MutationReportListener.java": {
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "    return new MutationTestSummaryData(data.getFileName(),"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        data.getMutations(), coverage.getClassInfo(data.getMutatedClass()));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[105,38] cannot find symbol\n",
                                "[105,38] cannot find symbol\nsymbol: method getClassInfo(org.pitest.classinfo.ClassName)\nlocation: variable coverage of type org.pitest.coverage.CoverageDatabase\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 333246940382754122
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/org/pitest/elements/MutationReportListener.java",
            "output": "package org.pitest.elements;\n\nimport org.pitest.coverage.CoverageDatabase;\nimport org.pitest.mutationtest.ClassMutationResults;\nimport org.pitest.mutationtest.MutationResultListener;\nimport org.pitest.mutationtest.SourceLocator;\nimport org.pitest.elements.models.MutationTestSummaryData;\nimport org.pitest.elements.models.PackageSummaryMap;\nimport org.pitest.elements.utils.JsonParser;\nimport org.pitest.util.FileUtil;\nimport org.pitest.util.ResultOutputStrategy;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\n\npublic class MutationReportListener implements MutationResultListener {\n\n  private final ResultOutputStrategy outputStrategy;\n\n  private final JsonParser jsonParser;\n\n  private final CoverageDatabase  coverage;\n  private final PackageSummaryMap packageSummaryData = new PackageSummaryMap();\n\n  private static final String HTML_PAGE = \"<!DOCTYPE html>\\n\" + \"<html lang=\\\"en\\\">\\n\"\n    + \"<head>\\n\"\n    + \"  <meta charset=\\\"UTF-8\\\">\\n\"\n    + \"  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\"\n    + \"  <script src=\\\"mutation-test-elements.js\\\"></script>\\n\"\n    + \"</head>\\n\"\n    + \"<body>\\n\"\n    + \"  <mutation-test-report-app title-postfix=\\\"Pit Test Coverage Report\\\">\\n\"\n    + \"    Your browser doesn't support <a href=\\\"https://caniuse.com/#search=custom%20elements\\\">custom elements</a>.\\n\"\n    + \"    Please use a latest version of an evergreen browser (Firefox, Chrome, Safari, Opera, etc).\\n\"\n    + \"  </mutation-test-report-app>\\n\"\n    + \"  <script>\\n\"\n    + \"    const app = document.getElementsByTagName('mutation-test-report-app').item(0);\\n\"\n    + \"    function updateTheme() {\\n\"\n    + \"    document.body.style.backgroundColor = app.themeBackgroundColor;\\n\"\n    + \"    }\\n\"\n    + \"    app.addEventListener('theme-changed', updateTheme);\\n\"\n    + \"    updateTheme();\\n\"\n    + \"  </script>\\n\"\n    + \"  <script src=\\\"report.js\\\"></script>\\n\"\n    + \"</body>\\n\"\n    + \"</html>\";\n\n  public MutationReportListener(final CoverageDatabase coverage,\n      final ResultOutputStrategy outputStrategy, final SourceLocator... locators) {\n    this.coverage = coverage;\n    this.outputStrategy = outputStrategy;\n    this.jsonParser = new JsonParser(\n        new HashSet<>(Arrays.asList(locators)));\n  }\n\n  private String loadMutationTestElementsJs() throws IOException {\n    final String htmlReportResource = \"elements/mutation-test-elements.js\";\n    return FileUtil.readToString(this.getClass().getClassLoader().getResourceAsStream(htmlReportResource));\n  }\n\n  private void createHtml() {\n    final String content = HTML_PAGE;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"index.html\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private void createJs(final String json) {\n    final String content =\n        \"document.querySelector('mutation-test-report-app').report = \" + json;\n    final Writer writer = this.outputStrategy\n        .createWriterForFile(\"html2\" + File.separatorChar + \"report.js\");\n    try {\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n  private void createMutationTestingElementsJs() {\n    final Writer writer = this.outputStrategy\n      .createWriterForFile(\"html2\" + File.separatorChar + \"mutation-test-elements.js\");\n    try {\n      final String content = this.loadMutationTestElementsJs();\n      writer.write(content);\n      writer.close();\n    } catch (final IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  private MutationTestSummaryData createSummaryData(\n      final CoverageDatabase coverage, final ClassMutationResults data) {\n    return new MutationTestSummaryData(data.getFileName(),\n        data.getMutations(), coverage.getClassInfo(Collections.singleton(data.getMutatedClass())));\n  }\n\n  private void updatePackageSummary(\n      final ClassMutationResults mutationMetaData) {\n    final String packageName = mutationMetaData.getPackageName();\n\n    this.packageSummaryData.update(packageName,\n        createSummaryData(this.coverage, mutationMetaData));\n  }\n\n  @Override\n  public void runStart() {\n    // Nothing to do\n  }\n\n  @Override\n  public void handleMutationResult(ClassMutationResults metaData) {\n    updatePackageSummary(metaData);\n  }\n\n  @Override\n  public void runEnd() {\n    try {\n      String json = jsonParser.toJson(this.packageSummaryData);\n      createHtml();\n      createMutationTestingElementsJs();\n      createJs(json);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n",
            "error": "",
            "span_id": 12006245810728547886
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}