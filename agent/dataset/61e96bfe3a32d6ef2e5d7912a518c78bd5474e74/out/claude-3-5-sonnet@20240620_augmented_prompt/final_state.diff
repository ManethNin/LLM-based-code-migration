diff --git a/thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java b/thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java
index 4fc31f6..93a7ab8 100644
--- a/thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java
+++ b/thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java
@@ -17,6 +17,7 @@ package com.pinterest.singer.client.logback;
 
 import com.pinterest.singer.thrift.LogMessage;
 
+import ch.qos.logback.core.status.ErrorStatus;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.Context;
 import ch.qos.logback.core.encoder.EncoderBase;
@@ -28,6 +29,7 @@ import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.protocol.TProtocol;
 import org.apache.thrift.transport.TFastFramedTransport;
+import org.apache.thrift.transport.TMemoryBuffer;
 import org.apache.thrift.transport.TIOStreamTransport;
 import org.apache.thrift.transport.TTransport;
 
@@ -51,30 +53,44 @@ public class AppenderUtils {
   public static class LogMessageEncoder extends EncoderBase<LogMessage> {
 
     private TTransport framedTransport;
-    private TProtocol protocol;
-    private OutputStream os;
+    private TBinaryProtocol protocol;
 
-    @Override
     public void init(OutputStream os) {
-      this.os = os;
       // Use the TFlushingFastFramedTransport to be compatible with singer_thrift
       // log.
       final int bufferCapacity = 10;
       framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),
-          bufferCapacity);
+          bufferCapacity, bufferCapacity);
       protocol = new TBinaryProtocol(framedTransport);
     }
 
     @Override
-    public void doEncode(LogMessage logMessage) throws IOException {
+    public byte[] encode(LogMessage event) {
       try {
-        logMessage.write(protocol);
+        TMemoryBuffer memoryBuffer = new TMemoryBuffer(1024);
+        TBinaryProtocol tempProtocol = new TBinaryProtocol(memoryBuffer);
+        event.write(tempProtocol);
+        event.write(protocol);
         framedTransport.flush();
+        byte[] result = memoryBuffer.getArray();
+        return result;
       } catch (TException e) {
-        throw new IOException(e);
+        addStatus(new ErrorStatus("Failed to encode LogMessage", this, e));
+        throw new RuntimeException(e);
       }
     }
 
+    @Override
+    @Override
+    public byte[] headerBytes() {
+      return new byte[0];
+    }
+
+    @Override
+    public byte[] footerBytes() {
+      return new byte[0];
+    }
+
     @Override
     public void close() throws IOException {
       framedTransport.close();