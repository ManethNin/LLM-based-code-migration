{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java\n+++ thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java\n@@ -51,6 +51,7 @@\n     @Override\n     public void init(OutputStream os) {\n       this.os = os;\n+      super.init(os);\n       // Use the TFlushingFastFramedTransport to be compatible with singer_thrift\n       // log.\n       final int bufferCapacity = 10;\n@@ -57,6 +58,7 @@\n     public void doEncode(LogMessage logMessage) throws IOException {\n       try {\n         logMessage.write(protocol);\n+        super.doEncode(logMessage);\n         framedTransport.flush();\n       } catch (TException e) {\n         throw new IOException(e);\n@@ -68,6 +70,7 @@\n     public void close() throws IOException {\n       framedTransport.close();\n+      super.close();\n     }\n   }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java": "/**\n * Copyright 2019 Pinterest, Inc.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *    http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.pinterest.singer.client.logback;\n\nimport com.pinterest.singer.thrift.LogMessage;\n\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.core.Context;\nimport ch.qos.logback.core.encoder.EncoderBase;\nimport ch.qos.logback.core.rolling.RollingFileAppender;\nimport ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP;\nimport ch.qos.logback.core.rolling.TimeBasedRollingPolicy;\nimport ch.qos.logback.core.util.FileSize;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.protocol.TProtocol;\nimport org.apache.thrift.transport.TFastFramedTransport;\nimport org.apache.thrift.transport.TIOStreamTransport;\nimport org.apache.thrift.transport.TTransport;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n/**\n * Utils to create logback appenders\n */\npublic class AppenderUtils {\n\n  public static final String PATH_SEP = \"/\";\n\n  private AppenderUtils() {\n  }\n\n  /**\n   * Encoder for LogMessage objects.\n   */\n  public static class LogMessageEncoder extends EncoderBase<LogMessage> {\n\n    private TTransport framedTransport;\n    private TProtocol protocol;\n    private OutputStream os;\n\n    @Override\n    public void init(OutputStream os) {\n      this.os = os;\n      super.init(os);\n      // Use the TFlushingFastFramedTransport to be compatible with singer_thrift\n      // log.\n      final int bufferCapacity = 10;\n      framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),\n          bufferCapacity);\n      protocol = new TBinaryProtocol(framedTransport);\n    }\n\n    @Override\n    public void doEncode(LogMessage logMessage) throws IOException {\n      try {\n        logMessage.write(protocol);\n        super.doEncode(logMessage);\n        framedTransport.flush();\n      } catch (TException e) {\n        throw new IOException(e);\n      }\n    }\n\n    @Override\n    public void close() throws IOException {\n      framedTransport.close();\n      super.close();\n    }\n  }\n\n  /**\n   * Create the basic thrift appender which logs to a file\n   * and rolls the file when it exceeds a certain size.\n   *\n   * @param basePath base directory the files are under.\n   * @param topic the topic name for the current appender.\n   * @param rotateThresholdKBytes threshold in kilobytes to rotate after.\n   * @param context the logback context.\n   */\n  public static Appender<LogMessage> createFileRollingThriftAppender(\n      File basePath,\n      String topic,\n      long rotateThresholdKBytes,\n      Context context,\n      int maxRetentionHours) {\n    RollingFileAppender<LogMessage> appender = new RollingFileAppender<LogMessage>();\n    appender.setContext(context);\n    appender.setAppend(true);\n    appender.setPrudent(false);\n\n    LogMessageEncoder encoder = new LogMessageEncoder();\n    appender.setEncoder(encoder);\n    appender.setFile(basePath + PATH_SEP + topic);\n\n    TimeBasedRollingPolicy policy = new TimeBasedRollingPolicy();\n    policy.setMaxHistory(maxRetentionHours);\n    policy.setFileNamePattern(basePath + PATH_SEP + topic + \".%d{yyyy-MM-dd-HH}.%i\");\n    policy.setCleanHistoryOnStart(false);\n    policy.setContext(context);\n    policy.setParent(appender);\n\n    // Also impose a max size per file policy.\n    SizeAndTimeBasedFNATP fnatp = new SizeAndTimeBasedFNATP();\n    fnatp.setContext(context);\n    fnatp.setTimeBasedRollingPolicy(policy);\n    fnatp.setMaxFileSize(FileSize.valueOf(String.format(\"%sKB\", rotateThresholdKBytes)));\n\n    policy.setTimeBasedFileNamingAndTriggeringPolicy(fnatp);\n    appender.setRollingPolicy(policy);\n    appender.setTriggeringPolicy(policy);\n\n    policy.start();\n    appender.start();\n\n    return appender;\n  }\n}\n"
                },
                "compile_error_details": {
                    "thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java": {
                        "51": {
                            "lines": [
                                {
                                    "line_no": 50,
                                    "content": "   */"
                                },
                                {
                                    "line_no": 51,
                                    "content": "  public static class LogMessageEncoder extends EncoderBase<LogMessage> {"
                                },
                                {
                                    "line_no": 52,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[51,17] com.pinterest.singer.client.logback.AppenderUtils.LogMessageEncoder is not abstract and does not override abstract method footerBytes() in ch.qos.logback.core.encoder.Encoder\n"
                            ]
                        },
                        "57": {
                            "lines": [
                                {
                                    "line_no": 56,
                                    "content": ""
                                },
                                {
                                    "line_no": 57,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 58,
                                    "content": "    public void init(OutputStream os) {"
                                }
                            ],
                            "error_texts": [
                                "[57,5] method does not override or implement a method from a supertype\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "      this.os = os;"
                                },
                                {
                                    "line_no": 60,
                                    "content": "      super.init(os);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "      // Use the TFlushingFastFramedTransport to be compatible with singer_thrift"
                                }
                            ],
                            "error_texts": [
                                "[60,12] cannot find symbol\n",
                                "[60,12] cannot find symbol\nsymbol: method init(java.io.OutputStream)\n"
                            ]
                        },
                        "69": {
                            "lines": [
                                {
                                    "line_no": 68,
                                    "content": ""
                                },
                                {
                                    "line_no": 69,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 70,
                                    "content": "    public void doEncode(LogMessage logMessage) throws IOException {"
                                }
                            ],
                            "error_texts": [
                                "[69,5] method does not override or implement a method from a supertype\n"
                            ]
                        },
                        "73": {
                            "lines": [
                                {
                                    "line_no": 72,
                                    "content": "        logMessage.write(protocol);"
                                },
                                {
                                    "line_no": 73,
                                    "content": "        super.doEncode(logMessage);"
                                },
                                {
                                    "line_no": 74,
                                    "content": "        framedTransport.flush();"
                                }
                            ],
                            "error_texts": [
                                "[73,14] cannot find symbol\nsymbol: method doEncode(com.pinterest.singer.thrift.LogMessage)\n",
                                "[73,14] cannot find symbol\n"
                            ]
                        },
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": ""
                                },
                                {
                                    "line_no": 80,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 81,
                                    "content": "    public void close() throws IOException {"
                                }
                            ],
                            "error_texts": [
                                "[80,5] method does not override or implement a method from a supertype\n"
                            ]
                        },
                        "83": {
                            "lines": [
                                {
                                    "line_no": 82,
                                    "content": "      framedTransport.close();"
                                },
                                {
                                    "line_no": 83,
                                    "content": "      super.close();"
                                },
                                {
                                    "line_no": 84,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[83,12] cannot find symbol\nsymbol: method close()\n",
                                "[83,12] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 15779729128510663104
        }
    ],
    "read_file": [
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java",
            "output": "/**\n * Copyright 2019 Pinterest, Inc.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *    http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.pinterest.singer.client.logback;\n\nimport com.pinterest.singer.thrift.LogMessage;\n\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.core.Context;\nimport ch.qos.logback.core.encoder.EncoderBase;\nimport ch.qos.logback.core.rolling.RollingFileAppender;\nimport ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP;\nimport ch.qos.logback.core.rolling.TimeBasedRollingPolicy;\nimport ch.qos.logback.core.util.FileSize;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.protocol.TProtocol;\nimport org.apache.thrift.transport.TFastFramedTransport;\nimport org.apache.thrift.transport.TIOStreamTransport;\nimport org.apache.thrift.transport.TTransport;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n/**\n * Utils to create logback appenders\n */\npublic class AppenderUtils {\n\n  public static final String PATH_SEP = \"/\";\n\n  private AppenderUtils() {\n  }\n\n  /**\n   * Encoder for LogMessage objects.\n   */\n  public static class LogMessageEncoder extends EncoderBase<LogMessage> {\n\n    private TTransport framedTransport;\n    private TProtocol protocol;\n    private OutputStream os;\n\n    @Override\n    public void init(OutputStream os) {\n      this.os = os;\n      // Use the TFlushingFastFramedTransport to be compatible with singer_thrift\n      // log.\n      final int bufferCapacity = 10;\n      framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),\n          bufferCapacity);\n      protocol = new TBinaryProtocol(framedTransport);\n    }\n\n    @Override\n    public void doEncode(LogMessage logMessage) throws IOException {\n      try {\n        logMessage.write(protocol);\n        framedTransport.flush();\n      } catch (TException e) {\n        throw new IOException(e);\n      }\n    }\n\n    @Override\n    public void close() throws IOException {\n      framedTransport.close();\n    }\n  }\n\n  /**\n   * Create the basic thrift appender which logs to a file\n   * and rolls the file when it exceeds a certain size.\n   *\n   * @param basePath base directory the files are under.\n   * @param topic the topic name for the current appender.\n   * @param rotateThresholdKBytes threshold in kilobytes to rotate after.\n   * @param context the logback context.\n   */\n  public static Appender<LogMessage> createFileRollingThriftAppender(\n      File basePath,\n      String topic,\n      long rotateThresholdKBytes,\n      Context context,\n      int maxRetentionHours) {\n    RollingFileAppender<LogMessage> appender = new RollingFileAppender<LogMessage>();\n    appender.setContext(context);\n    appender.setAppend(true);\n    appender.setPrudent(false);\n\n    LogMessageEncoder encoder = new LogMessageEncoder();\n    appender.setEncoder(encoder);\n    appender.setFile(basePath + PATH_SEP + topic);\n\n    TimeBasedRollingPolicy policy = new TimeBasedRollingPolicy();\n    policy.setMaxHistory(maxRetentionHours);\n    policy.setFileNamePattern(basePath + PATH_SEP + topic + \".%d{yyyy-MM-dd-HH}.%i\");\n    policy.setCleanHistoryOnStart(false);\n    policy.setContext(context);\n    policy.setParent(appender);\n\n    // Also impose a max size per file policy.\n    SizeAndTimeBasedFNATP fnatp = new SizeAndTimeBasedFNATP();\n    fnatp.setContext(context);\n    fnatp.setTimeBasedRollingPolicy(policy);\n    fnatp.setMaxFileSize(FileSize.valueOf(String.format(\"%sKB\", rotateThresholdKBytes)));\n\n    policy.setTimeBasedFileNamingAndTriggeringPolicy(fnatp);\n    appender.setRollingPolicy(policy);\n    appender.setTriggeringPolicy(policy);\n\n    policy.start();\n    appender.start();\n\n    return appender;\n  }\n}\n",
            "error": "",
            "span_id": 1402262580924123472
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/client/logback/AppenderUtils.java",
            "output": "/**\n * Copyright 2019 Pinterest, Inc.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *    http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.pinterest.singer.client.logback;\n\nimport com.pinterest.singer.thrift.LogMessage;\n\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.core.Context;\nimport ch.qos.logback.core.encoder.EncoderBase;\nimport ch.qos.logback.core.rolling.RollingFileAppender;\nimport ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP;\nimport ch.qos.logback.core.rolling.TimeBasedRollingPolicy;\nimport ch.qos.logback.core.util.FileSize;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.protocol.TProtocol;\nimport org.apache.thrift.transport.TFastFramedTransport;\nimport org.apache.thrift.transport.TIOStreamTransport;\nimport org.apache.thrift.transport.TTransport;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n/**\n * Utils to create logback appenders\n */\npublic class AppenderUtils {\n\n  public static final String PATH_SEP = \"/\";\n\n  private AppenderUtils() {\n  }\n\n  /**\n   * Encoder for LogMessage objects.\n   */\n  public static class LogMessageEncoder extends EncoderBase<LogMessage> {\n\n    private TTransport framedTransport;\n    private TProtocol protocol;\n    private OutputStream os;\n\n    @Override\n    public void init(OutputStream os) {\n      this.os = os;\n      super.init(os);\n      // Use the TFlushingFastFramedTransport to be compatible with singer_thrift\n      // log.\n      final int bufferCapacity = 10;\n      framedTransport = new TFastFramedTransport(new TIOStreamTransport(os),\n          bufferCapacity);\n      protocol = new TBinaryProtocol(framedTransport);\n    }\n\n    @Override\n    public void doEncode(LogMessage logMessage) throws IOException {\n      try {\n        logMessage.write(protocol);\n        super.doEncode(logMessage);\n        framedTransport.flush();\n      } catch (TException e) {\n        throw new IOException(e);\n      }\n    }\n\n    @Override\n    public void close() throws IOException {\n      framedTransport.close();\n      super.close();\n    }\n  }\n\n  /**\n   * Create the basic thrift appender which logs to a file\n   * and rolls the file when it exceeds a certain size.\n   *\n   * @param basePath base directory the files are under.\n   * @param topic the topic name for the current appender.\n   * @param rotateThresholdKBytes threshold in kilobytes to rotate after.\n   * @param context the logback context.\n   */\n  public static Appender<LogMessage> createFileRollingThriftAppender(\n      File basePath,\n      String topic,\n      long rotateThresholdKBytes,\n      Context context,\n      int maxRetentionHours) {\n    RollingFileAppender<LogMessage> appender = new RollingFileAppender<LogMessage>();\n    appender.setContext(context);\n    appender.setAppend(true);\n    appender.setPrudent(false);\n\n    LogMessageEncoder encoder = new LogMessageEncoder();\n    appender.setEncoder(encoder);\n    appender.setFile(basePath + PATH_SEP + topic);\n\n    TimeBasedRollingPolicy policy = new TimeBasedRollingPolicy();\n    policy.setMaxHistory(maxRetentionHours);\n    policy.setFileNamePattern(basePath + PATH_SEP + topic + \".%d{yyyy-MM-dd-HH}.%i\");\n    policy.setCleanHistoryOnStart(false);\n    policy.setContext(context);\n    policy.setParent(appender);\n\n    // Also impose a max size per file policy.\n    SizeAndTimeBasedFNATP fnatp = new SizeAndTimeBasedFNATP();\n    fnatp.setContext(context);\n    fnatp.setTimeBasedRollingPolicy(policy);\n    fnatp.setMaxFileSize(FileSize.valueOf(String.format(\"%sKB\", rotateThresholdKBytes)));\n\n    policy.setTimeBasedFileNamingAndTriggeringPolicy(fnatp);\n    appender.setRollingPolicy(policy);\n    appender.setTriggeringPolicy(policy);\n\n    policy.start();\n    appender.start();\n\n    return appender;\n  }\n}\n",
            "error": "",
            "span_id": 11867349221053543835
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/thrift/LogMessage.java",
            "output": "Error: RetryError[<Future at 0x739313f0dd60 state=finished raised FileNotFoundError>]",
            "error": "RetryError[<Future at 0x739313f0dd60 state=finished raised FileNotFoundError>]",
            "span_id": 872904399493705540
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/client/LogMessage.java",
            "output": "Error: RetryError[<Future at 0x739311d0c8f0 state=finished raised FileNotFoundError>]",
            "error": "RetryError[<Future at 0x739311d0c8f0 state=finished raised FileNotFoundError>]",
            "span_id": 3351181806174186926
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/client/logback/LogbackThriftLoggerFactory.java",
            "output": "/**\n * Copyright 2019 Pinterest, Inc.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *    http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.pinterest.singer.client.logback;\n\nimport com.pinterest.singer.thrift.LogMessage;\nimport com.pinterest.singer.client.BaseThriftLoggerFactory;\nimport com.pinterest.singer.client.LogbackThriftLogger;\nimport com.pinterest.singer.client.ThriftLogger;\nimport com.pinterest.singer.client.ThriftLoggerConfig;\n\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.core.ContextBase;\n\nimport java.io.File;\n\n/**\n * Factory that creates a logback-based logger.\n *\n * By default we use a file-rolling appender.\n */\npublic class LogbackThriftLoggerFactory extends BaseThriftLoggerFactory {\n\n  protected final File basePath;\n  protected final int rotateThresholdKBytes;\n  protected final ContextBase contextBase = new ContextBase();\n\n  @Deprecated\n  public LogbackThriftLoggerFactory(File basePath, int rotateThresholdKBytes) {\n    this.basePath = basePath;\n    this.rotateThresholdKBytes = rotateThresholdKBytes;\n  }\n\n  public LogbackThriftLoggerFactory() {\n    basePath = null;\n    rotateThresholdKBytes = -1;\n  }\n\n  @Deprecated\n  @Override\n  protected synchronized ThriftLogger createLogger(String topic, int maxRetentionHours) {\n    if (basePath == null || rotateThresholdKBytes <= 0) {\n      throw new IllegalArgumentException(\n          \"basePath or rotateThresholdKBytes are invalid. Please pass in a ThriftLoggerConfig.\");\n    }\n\n    return new LogbackThriftLogger(AppenderUtils.createFileRollingThriftAppender(\n        basePath,\n        topic,\n        rotateThresholdKBytes,\n        contextBase,\n        maxRetentionHours));\n  }\n\n  @Override\n  protected synchronized ThriftLogger createLogger(ThriftLoggerConfig thriftLoggerConfig) {\n    Appender<LogMessage> appender = AppenderUtils.createFileRollingThriftAppender(\n        thriftLoggerConfig.baseDir,\n        thriftLoggerConfig.kafkaTopic,\n        thriftLoggerConfig.logRotationThresholdBytes / 1024, // convert to KB\n        contextBase,\n        thriftLoggerConfig.maxRetentionSecs / (60 * 60));    // lowest granularity is hours\n\n    return new LogbackThriftLogger(thriftLoggerConfig.kafkaTopic, appender);\n  }\n}\n",
            "error": "",
            "span_id": 14492491107827813380
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/client/ThriftLogger.java",
            "output": "/**\n * Copyright 2019 Pinterest, Inc.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *    http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.pinterest.singer.client;\n\nimport org.apache.thrift.TBase;\nimport org.apache.thrift.TException;\n\n/**\n * ThriftLogger lets you log messages to Singer.\n *\n * Messages are written to disk per topic. Singer is responsible\n * for copying these to Kafka.\n */\npublic interface ThriftLogger {\n\n  /**\n   * Append a message to the given topic.\n   * @param partitionKey an optional partition key.\n   * @param message the message in bytes.\n   * @param timeNanos timestamp of the message in nanoseconds.\n   */\n  void append(byte[] partitionKey, byte[] message, long timeNanos);\n\n  /**\n   * Append a thrift message to the given topic.\n   * @param partitionKey an optional partition key.\n   * @param thriftMessage the thrift object to log\n   * @param timeNanos timestamp of the message in nanoseconds.\n   */\n  void append(byte[] partitionKey, TBase thriftMessage, long timeNanos) throws TException;\n\n  /**\n   * Append a thrift message to the given topic.\n   * No partition key will be used, and the current wall-clock time will be logged\n   * with the message.\n   *\n   * @param thriftMessage the thrift object to log\n   */\n  void append(TBase thriftMessage) throws TException;\n\n  /**\n   * Append a byte array to the given topic.\n   * No partition key will be used, and the current wall-clock time will be logged\n   * with the message.\n   *\n   * @param message the byte array to log\n   */\n  void append(byte[] message) throws TException;\n\n  /**\n   * Close the logger and flush and stop the underlying streams.\n   */\n  void close();\n}\n",
            "error": "",
            "span_id": 291076484341226422
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/client/BaseThriftLoggerFactory.java",
            "output": "/**\n * Copyright 2019 Pinterest, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.pinterest.singer.client;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * Base ThriftLogger factory takes care of managing the loggers for each topic. In the current\n * implementation we only limit one logger per topic. If multiple loggers are created for the same\n * topic with different configurations the logger will be created with the first configuration. So,\n * the uniqueness of a logger is ensured by the kafka topic name alone.\n */\npublic abstract class BaseThriftLoggerFactory\n    implements ThriftLoggerFactory.ThriftLoggerFactoryInterface {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(BaseThriftLoggerFactory.class);\n\n  protected ConcurrentHashMap<String, ThriftLogger> loggersByTopic\n      = new ConcurrentHashMap<String, ThriftLogger>();\n\n  private int sleepInSecBeforeCloseLoggers = -1;\n\n  public int getSleepInSecBeforeCloseLoggers() {\n    return sleepInSecBeforeCloseLoggers;\n  }\n\n  public void setSleepInSecBeforeCloseLoggers(int sleepInSecBeforeCloseLoggers) {\n    this.sleepInSecBeforeCloseLoggers = sleepInSecBeforeCloseLoggers;\n  }\n\n  @Deprecated\n  public ThriftLogger getLogger(String topic, int maxRetentionHours) {\n    ThriftLogger existingLogger = loggersByTopic.get(topic);\n    if (existingLogger != null) {\n      return existingLogger;\n    }\n\n    return getOrCreateLogger(topic, maxRetentionHours);\n  }\n\n  public ThriftLogger getLogger(ThriftLoggerConfig thriftLoggerConfig) {\n    ThriftLogger existingLogger = loggersByTopic.get(thriftLoggerConfig.kafkaTopic);\n    if (existingLogger != null) {\n      return existingLogger;\n    }\n\n    return getOrCreateLogger(thriftLoggerConfig);\n  }\n\n  @Deprecated\n  private synchronized ThriftLogger getOrCreateLogger(String topic, int maxRetentionHours) {\n    // This is called by getLogger above only when there's no logger\n    // for this topic, to make sure the logger creation is threadsafe.\n    // First check again if the logger has been initialized by now.\n    ThriftLogger existingLogger = loggersByTopic.get(topic);\n    if (existingLogger != null) {\n      LOGGER.info(\"Returning an existing logger for topic: \" + topic);\n      return existingLogger;\n    }\n\n    LOGGER.info(\"Creating a new logger for topic \" + topic);\n    ThriftLogger newLogger = createLogger(topic, maxRetentionHours);\n    loggersByTopic.put(topic, newLogger);\n    return newLogger;\n  }\n\n  private synchronized ThriftLogger getOrCreateLogger(ThriftLoggerConfig thriftLoggerConfig) {\n    // This is called by getLogger above only when there's no logger\n    // for this topic, to make sure the logger creation is threadsafe.\n    // First check again if the logger has been initialized by now.\n    ThriftLogger existingLogger = loggersByTopic.get(thriftLoggerConfig.kafkaTopic);\n    if (existingLogger != null) {\n      LOGGER.info(\"Returning an existing logger for topic: \" + thriftLoggerConfig.kafkaTopic);\n      return existingLogger;\n    }\n\n    ThriftLogger newLogger = createLogger(thriftLoggerConfig);\n    loggersByTopic.put(thriftLoggerConfig.kafkaTopic, newLogger);\n    LOGGER.info(String.format(\"Created a  new logger for topic %s with config %s\",\n        thriftLoggerConfig.kafkaTopic, thriftLoggerConfig.toString()));\n    return newLogger;\n  }\n\n  @Deprecated\n  protected abstract ThriftLogger createLogger(String topic, int maxRetentionHours);\n\n  protected abstract ThriftLogger createLogger(ThriftLoggerConfig thriftLoggerConfig);\n\n  public synchronized void shutdown() {\n    try {\n      if (sleepInSecBeforeCloseLoggers > 0) {\n        LOGGER.info(\"Before closing loggers, sleep {} seconds\", sleepInSecBeforeCloseLoggers);\n        Thread.sleep(sleepInSecBeforeCloseLoggers * 1000);\n        LOGGER.info(\"After {} seconds, start to close loggers\", sleepInSecBeforeCloseLoggers);\n      }\n    } catch (InterruptedException e) {\n      LOGGER.warn(\"Thread got interrupted\", e);\n    } finally {\n      for (Map.Entry<String, ThriftLogger> entry : loggersByTopic.entrySet()) {\n        entry.getValue().close();\n        LOGGER.info(\"Logger for topic {} is closed.\", entry.getKey());\n      }\n    }\n  }\n}\n",
            "error": "",
            "span_id": 11258995345433387342
        }
    ],
    "get_directory_tree": [
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/thrift",
            "output": "[\n    {\n        \"name\": \"File Not Found\",\n        \"type\": \"error\"\n    }\n]",
            "error": "",
            "span_id": 1331483577518136239
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer",
            "output": "[\n    {\n        \"name\": \"client\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"ThriftLoggerFactory.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AuditableLogbackThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BaseThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"logback\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"LogbackThriftLoggerFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AppenderUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AuditableLogbackThriftLoggerFactory.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"ThriftCodec.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BaseThriftLoggerFactory.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"NoopLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"LogbackThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ThriftLoggerConfig.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BUILD\",\n                \"type\": \"file\"\n            }\n        ]\n    }\n]",
            "error": "",
            "span_id": 1305953976340975644
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/thrift",
            "output": "[\n    {\n        \"name\": \"File Not Found\",\n        \"type\": \"error\"\n    }\n]",
            "error": "",
            "span_id": 8275715084778635951
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer",
            "output": "[\n    {\n        \"name\": \"client\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"ThriftLoggerFactory.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AuditableLogbackThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BaseThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"logback\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"LogbackThriftLoggerFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AppenderUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AuditableLogbackThriftLoggerFactory.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"ThriftCodec.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BaseThriftLoggerFactory.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"NoopLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"LogbackThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ThriftLoggerConfig.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BUILD\",\n                \"type\": \"file\"\n            }\n        ]\n    }\n]",
            "error": "",
            "span_id": 17889929964504723671
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/client",
            "output": "[\n    {\n        \"name\": \"ThriftLoggerFactory.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AuditableLogbackThriftLogger.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"BaseThriftLogger.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"logback\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"LogbackThriftLoggerFactory.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AppenderUtils.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AuditableLogbackThriftLoggerFactory.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"ThriftCodec.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"BaseThriftLoggerFactory.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"MockThriftLogger.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"NoopLogger.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"LogbackThriftLogger.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ThriftLoggerConfig.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ThriftLogger.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"BUILD\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 6766132153913152165
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer",
            "output": "[\n    {\n        \"name\": \"client\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"ThriftLoggerFactory.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AuditableLogbackThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BaseThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"logback\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"LogbackThriftLoggerFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AppenderUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AuditableLogbackThriftLoggerFactory.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"ThriftCodec.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BaseThriftLoggerFactory.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"NoopLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"LogbackThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ThriftLoggerConfig.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ThriftLogger.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BUILD\",\n                \"type\": \"file\"\n            }\n        ]\n    }\n]",
            "error": "",
            "span_id": 5970389669830720668
        },
        {
            "input": "thrift-logger/src/main/java/com/pinterest/singer/client/logback",
            "output": "[\n    {\n        \"name\": \"LogbackThriftLoggerFactory.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AppenderUtils.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AuditableLogbackThriftLoggerFactory.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 18258204820705899694
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}