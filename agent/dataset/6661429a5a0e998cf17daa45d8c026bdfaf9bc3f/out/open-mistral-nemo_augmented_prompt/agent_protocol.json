{
    "validate_diffs": [
        {
            "input": "```diff\n--- ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,10 +1,10 @@\n-package io.jenkins.plugins.coverage.util;\n+\n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+\n import org.jenkinsci.test.acceptance.po.PageObject;\n\n /**\n  * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n  */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-           ScriptResult scriptResult = new ScriptResult(result);\n+           return result.toString();\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-               if (scriptResult != null) {\n+               if (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n```",
            "output": "{'ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java': '\\n\\nimport org.openqa.selenium.By;\\nimport org.openqa.selenium.NoSuchElementException;\\nimport org.openqa.selenium.WebElement;\\n\\n\\nimport org.jenkinsci.test.acceptance.po.PageObject;\\n\\n/**\\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\\n */\\n@SuppressWarnings(\"hideutilityclassconstructor\")\\n// TODO: Move this code to ATH so we can reuse it from other plugins\\npublic class ChartUtil {\\n    private static final int MAX_ATTEMPTS = 5;\\n\\n    /**\\n     * Returns a chart\\'s data by its id.\\n     *\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n     *         of chart\\n     *\\n     * @return data as json\\n     */\\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\\n            Object result = pageObject.executeScript(String.format(\\n                    \"delete(window.Array.prototype.toJSON) %n\"\\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\\\"%s\\\\\")).getOption())\",\\n                    elementId));\\nreturn result.toString();\\n            return scriptResult.getJavaScriptResult().toString();\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * Returns data of only chart with given tool attribute value on page.\\n     *\\n     * @param pageObject\\n     *         which contains only one chart with given tool attribute value\\n     * @param toolAttribute\\n     *         value in div tag of chart\\n     *\\n     * @return data as json\\n     */\\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\\n            final String toolAttribute) {\\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\\n            Object result = pageObject.executeScript(String.format(\\n                    \"delete(window.Array.prototype.toJSON) %n\"\\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\\\"div [tool=\\'%s\\']\\\\\")).getOption())\",\\n                        toolAttribute));\\n\\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\\nif (result != null) {\\n                    return scriptResult.toString();\\n                }\\n                pageObject.elasticSleep(1000);\\n            }\\n        }\\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID \\'%s\\'\\'\" + toolAttribute);\\n    }\\n\\n    /**\\n     * Returns if chart is displayed.\\n     *\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n     *         of chart\\n     *\\n     * @return if chart is displayed\\n     */\\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\\n        try {\\n            WebElement chart = pageObject.find(By.id(elementId));\\n            return chart != null && chart.isDisplayed();\\n        }\\n        catch (NoSuchElementException exception) {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * Returns if a chart with given tool attribute in div tag is displayed.\\n     *\\n     * @param pageObject\\n     *         which contains chart\\n     * @param toolAttribute\\n     *         of div tag of chart\\n     *\\n     * @return if chart is displayed\\n     */\\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\\n        try {\\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool=\\'\" + toolAttribute + \"\\']\"));\\n            return chart != null && chart.isDisplayed();\\n        }\\n        catch (NoSuchElementException exception) {\\n            return false;\\n        }\\n\\n    }\\n\\n}'}",
            "error": "",
            "span_id": 14495246633196339362
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
            "span_id": 3691550258472586127
        },
        {
            "input": "```diff\n--- ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,10 +1,10 @@\n-package io.jenkins.plugins.coverage.util;\n+\n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+\n import org.jenkinsci.test.acceptance.po.PageObject;\n\n /**\n  * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n  */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-           ScriptResult scriptResult = new ScriptResult(result);\n+           return result.toString();\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-               if (scriptResult != null) {\n+               if (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\nreturn result.toString();\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\nif (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "15": {
                            "lines": [
                                {
                                    "line_no": 14,
                                    "content": "// TODO: Move this code to ATH so we can reuse it from other plugins"
                                },
                                {
                                    "line_no": 15,
                                    "content": "public class ChartUtil {"
                                },
                                {
                                    "line_no": 16,
                                    "content": "    private static final int MAX_ATTEMPTS = 5;"
                                }
                            ],
                            "error_texts": [
                                "[15,7] error: duplicate class: ChartUtil\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "return result.toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[35,19] error: cannot find symbol\n",
                                "[35,19] error: cannot find symbol\nsymbol: variable scriptResult\nlocation: class ChartUtil\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,42] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[59,42] error: cannot find symbol\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/CoverageReport.java": {
                        "14": {
                            "lines": [
                                {
                                    "line_no": 13,
                                    "content": ""
                                },
                                {
                                    "line_no": 14,
                                    "content": "import static io.jenkins.plugins.coverage.util.ChartUtil.*;"
                                },
                                {
                                    "line_no": 15,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[14,46] error: cannot access ChartUtil\n",
                                "[14,46] error: cannot access ChartUtil\nbad source file: ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\nfile does not contain class io.jenkins.plugins.coverage.util.ChartUtil\nPlease remove or make sure it appears in the correct subdirectory of the sourcepath.\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        return getChartDataById(this, COVERAGE_OVERVIEW_CHART);"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[49,15] error: cannot find symbol\n",
                                "[49,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        return getChartDataById(this, COVERAGE_TREE_CHART);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[60,15] error: cannot find symbol\n",
                                "[60,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/MainPanel.java": {
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        waitFor().until(this::isChartDisplayed);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        return ChartUtil.getDataOfOnlyChartOnPageWithGivenToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[34,15] error: cannot find symbol\n",
                                "[34,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "        ensureMainPanelPageIsOpen();"
                                },
                                {
                                    "line_no": 43,
                                    "content": "        return ChartUtil.isChartDisplayedByDivToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 44,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[43,15] error: cannot find symbol\n",
                                "[43,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 6898370114218192994
        },
        {
            "input": "```diff\n--- ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,10 +1,10 @@\n-package io.jenkins.plugins.coverage.util;\n+\n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+\n import org.jenkinsci.test.acceptance.po.PageObject;\n\n /**\n  * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n  */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-           ScriptResult scriptResult = new ScriptResult(result);\n+           return result.toString();\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-               if (scriptResult != null) {\n+               if (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\nreturn result.toString();\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\nif (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "15": {
                            "lines": [
                                {
                                    "line_no": 14,
                                    "content": "// TODO: Move this code to ATH so we can reuse it from other plugins"
                                },
                                {
                                    "line_no": 15,
                                    "content": "public class ChartUtil {"
                                },
                                {
                                    "line_no": 16,
                                    "content": "    private static final int MAX_ATTEMPTS = 5;"
                                }
                            ],
                            "error_texts": [
                                "[15,7] error: duplicate class: ChartUtil\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "return result.toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[35,19] error: cannot find symbol\n",
                                "[35,19] error: cannot find symbol\nsymbol: variable scriptResult\nlocation: class ChartUtil\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,42] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[59,42] error: cannot find symbol\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/CoverageReport.java": {
                        "14": {
                            "lines": [
                                {
                                    "line_no": 13,
                                    "content": ""
                                },
                                {
                                    "line_no": 14,
                                    "content": "import static io.jenkins.plugins.coverage.util.ChartUtil.*;"
                                },
                                {
                                    "line_no": 15,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[14,46] error: cannot access ChartUtil\n",
                                "[14,46] error: cannot access ChartUtil\nbad source file: ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\nfile does not contain class io.jenkins.plugins.coverage.util.ChartUtil\nPlease remove or make sure it appears in the correct subdirectory of the sourcepath.\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        return getChartDataById(this, COVERAGE_OVERVIEW_CHART);"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[49,15] error: cannot find symbol\n",
                                "[49,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        return getChartDataById(this, COVERAGE_TREE_CHART);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[60,15] error: cannot find symbol\n",
                                "[60,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/MainPanel.java": {
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        waitFor().until(this::isChartDisplayed);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        return ChartUtil.getDataOfOnlyChartOnPageWithGivenToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[34,15] error: cannot find symbol\n",
                                "[34,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "        ensureMainPanelPageIsOpen();"
                                },
                                {
                                    "line_no": 43,
                                    "content": "        return ChartUtil.isChartDisplayedByDivToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 44,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[43,15] error: cannot find symbol\n",
                                "[43,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 17967616138826197000
        },
        {
            "input": "```diff\n--- ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,10 +1,10 @@\n-package io.jenkins.plugins.coverage.util;\n+\n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+\n import org.jenkinsci.test.acceptance.po.PageObject;\n\n /**\n  * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n  */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\nreturn result.toString();\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\nif (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            ScriptResult scriptResult = new ScriptResult(result);\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n                if (scriptResult != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "15": {
                            "lines": [
                                {
                                    "line_no": 14,
                                    "content": "// TODO: Move this code to ATH so we can reuse it from other plugins"
                                },
                                {
                                    "line_no": 15,
                                    "content": "public class ChartUtil {"
                                },
                                {
                                    "line_no": 16,
                                    "content": "    private static final int MAX_ATTEMPTS = 5;"
                                }
                            ],
                            "error_texts": [
                                "[15,7] error: duplicate class: ChartUtil\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 34,
                                    "content": "            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[34,12] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[34,44] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[34,44] error: cannot find symbol\n",
                                "[34,12] error: cannot find symbol\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,42] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[59,42] error: cannot find symbol\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/CoverageReport.java": {
                        "14": {
                            "lines": [
                                {
                                    "line_no": 13,
                                    "content": ""
                                },
                                {
                                    "line_no": 14,
                                    "content": "import static io.jenkins.plugins.coverage.util.ChartUtil.*;"
                                },
                                {
                                    "line_no": 15,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[14,46] error: cannot access ChartUtil\n",
                                "[14,46] error: cannot access ChartUtil\nbad source file: ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\nfile does not contain class io.jenkins.plugins.coverage.util.ChartUtil\nPlease remove or make sure it appears in the correct subdirectory of the sourcepath.\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        return getChartDataById(this, COVERAGE_OVERVIEW_CHART);"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[49,15] error: cannot find symbol\n",
                                "[49,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        return getChartDataById(this, COVERAGE_TREE_CHART);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[60,15] error: cannot find symbol\n",
                                "[60,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/MainPanel.java": {
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        waitFor().until(this::isChartDisplayed);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        return ChartUtil.getDataOfOnlyChartOnPageWithGivenToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[34,15] error: cannot find symbol\n",
                                "[34,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "        ensureMainPanelPageIsOpen();"
                                },
                                {
                                    "line_no": 43,
                                    "content": "        return ChartUtil.isChartDisplayedByDivToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 44,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[43,15] error: cannot find symbol\n",
                                "[43,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 8483934811978996594
        },
        {
            "input": "```diff\n--- ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,10 +1,10 @@\n-package io.jenkins.plugins.coverage.util;\n+\n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+\n import org.jenkinsci.test.acceptance.po.PageObject;\n\n /**\n  * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n  */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\nreturn result.toString();\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\nif (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            ScriptResult scriptResult = new ScriptResult(result);\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n                if (scriptResult != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "15": {
                            "lines": [
                                {
                                    "line_no": 14,
                                    "content": "// TODO: Move this code to ATH so we can reuse it from other plugins"
                                },
                                {
                                    "line_no": 15,
                                    "content": "public class ChartUtil {"
                                },
                                {
                                    "line_no": 16,
                                    "content": "    private static final int MAX_ATTEMPTS = 5;"
                                }
                            ],
                            "error_texts": [
                                "[15,7] error: duplicate class: ChartUtil\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 34,
                                    "content": "            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[34,12] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[34,44] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[34,44] error: cannot find symbol\n",
                                "[34,12] error: cannot find symbol\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,42] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[59,42] error: cannot find symbol\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/CoverageReport.java": {
                        "14": {
                            "lines": [
                                {
                                    "line_no": 13,
                                    "content": ""
                                },
                                {
                                    "line_no": 14,
                                    "content": "import static io.jenkins.plugins.coverage.util.ChartUtil.*;"
                                },
                                {
                                    "line_no": 15,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[14,46] error: cannot access ChartUtil\n",
                                "[14,46] error: cannot access ChartUtil\nbad source file: ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\nfile does not contain class io.jenkins.plugins.coverage.util.ChartUtil\nPlease remove or make sure it appears in the correct subdirectory of the sourcepath.\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        return getChartDataById(this, COVERAGE_OVERVIEW_CHART);"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[49,15] error: cannot find symbol\n",
                                "[49,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        return getChartDataById(this, COVERAGE_TREE_CHART);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[60,15] error: cannot find symbol\n",
                                "[60,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/MainPanel.java": {
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        waitFor().until(this::isChartDisplayed);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        return ChartUtil.getDataOfOnlyChartOnPageWithGivenToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[34,15] error: cannot find symbol\n",
                                "[34,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "        ensureMainPanelPageIsOpen();"
                                },
                                {
                                    "line_no": 43,
                                    "content": "        return ChartUtil.isChartDisplayedByDivToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 44,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[43,15] error: cannot find symbol\n",
                                "[43,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 12476628632634797114
        },
        {
            "input": "```diff\n--- ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,10 +1,10 @@\n-package io.jenkins.plugins.coverage.util;\n+\n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+\n import org.jenkinsci.test.acceptance.po.PageObject;\n\n /**\n  * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n  */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\nreturn result.toString();\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\nif (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            ScriptResult scriptResult = new ScriptResult(result);\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n                if (scriptResult != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "15": {
                            "lines": [
                                {
                                    "line_no": 14,
                                    "content": "// TODO: Move this code to ATH so we can reuse it from other plugins"
                                },
                                {
                                    "line_no": 15,
                                    "content": "public class ChartUtil {"
                                },
                                {
                                    "line_no": 16,
                                    "content": "    private static final int MAX_ATTEMPTS = 5;"
                                }
                            ],
                            "error_texts": [
                                "[15,7] error: duplicate class: ChartUtil\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 34,
                                    "content": "            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[34,12] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[34,44] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[34,44] error: cannot find symbol\n",
                                "[34,12] error: cannot find symbol\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,42] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[59,42] error: cannot find symbol\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/CoverageReport.java": {
                        "14": {
                            "lines": [
                                {
                                    "line_no": 13,
                                    "content": ""
                                },
                                {
                                    "line_no": 14,
                                    "content": "import static io.jenkins.plugins.coverage.util.ChartUtil.*;"
                                },
                                {
                                    "line_no": 15,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[14,46] error: cannot access ChartUtil\n",
                                "[14,46] error: cannot access ChartUtil\nbad source file: ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\nfile does not contain class io.jenkins.plugins.coverage.util.ChartUtil\nPlease remove or make sure it appears in the correct subdirectory of the sourcepath.\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        return getChartDataById(this, COVERAGE_OVERVIEW_CHART);"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[49,15] error: cannot find symbol\n",
                                "[49,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        return getChartDataById(this, COVERAGE_TREE_CHART);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[60,15] error: cannot find symbol\n",
                                "[60,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/MainPanel.java": {
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        waitFor().until(this::isChartDisplayed);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        return ChartUtil.getDataOfOnlyChartOnPageWithGivenToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[34,15] error: cannot find symbol\n",
                                "[34,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "        ensureMainPanelPageIsOpen();"
                                },
                                {
                                    "line_no": 43,
                                    "content": "        return ChartUtil.isChartDisplayedByDivToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 44,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[43,15] error: cannot find symbol\n",
                                "[43,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 12482000583245941583
        },
        {
            "input": "```diff\n--- ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,10 +1,10 @@\n-package io.jenkins.plugins.coverage.util;\n+\n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+\n import org.jenkinsci.test.acceptance.po.PageObject;\n\n /**\n  * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n  */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\nreturn result.toString();\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\nif (result != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            ScriptResult scriptResult = new ScriptResult(result);\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n                if (scriptResult != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "15": {
                            "lines": [
                                {
                                    "line_no": 14,
                                    "content": "// TODO: Move this code to ATH so we can reuse it from other plugins"
                                },
                                {
                                    "line_no": 15,
                                    "content": "public class ChartUtil {"
                                },
                                {
                                    "line_no": 16,
                                    "content": "    private static final int MAX_ATTEMPTS = 5;"
                                }
                            ],
                            "error_texts": [
                                "[15,7] error: duplicate class: ChartUtil\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 34,
                                    "content": "            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[34,12] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[34,44] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[34,44] error: cannot find symbol\n",
                                "[34,12] error: cannot find symbol\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,42] error: cannot find symbol\nsymbol: class ScriptResult\nlocation: class ChartUtil\n",
                                "[59,42] error: cannot find symbol\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/CoverageReport.java": {
                        "14": {
                            "lines": [
                                {
                                    "line_no": 13,
                                    "content": ""
                                },
                                {
                                    "line_no": 14,
                                    "content": "import static io.jenkins.plugins.coverage.util.ChartUtil.*;"
                                },
                                {
                                    "line_no": 15,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[14,46] error: cannot access ChartUtil\n",
                                "[14,46] error: cannot access ChartUtil\nbad source file: ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\nfile does not contain class io.jenkins.plugins.coverage.util.ChartUtil\nPlease remove or make sure it appears in the correct subdirectory of the sourcepath.\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 49,
                                    "content": "        return getChartDataById(this, COVERAGE_OVERVIEW_CHART);"
                                },
                                {
                                    "line_no": 50,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[49,15] error: cannot find symbol\n",
                                "[49,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "        ensureCoverageTreeTabIsActive();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "        return getChartDataById(this, COVERAGE_TREE_CHART);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[60,15] error: cannot find symbol\n",
                                "[60,15] error: cannot find symbol\nsymbol: method getChartDataById(CoverageReport,String)\nlocation: class CoverageReport\n"
                            ]
                        }
                    },
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/MainPanel.java": {
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        waitFor().until(this::isChartDisplayed);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        return ChartUtil.getDataOfOnlyChartOnPageWithGivenToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[34,15] error: cannot find symbol\n",
                                "[34,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "        ensureMainPanelPageIsOpen();"
                                },
                                {
                                    "line_no": 43,
                                    "content": "        return ChartUtil.isChartDisplayedByDivToolAttribute(this, VALUE_OF_TOOL_ATTRIBUTE_IN_CHART);"
                                },
                                {
                                    "line_no": 44,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[43,15] error: cannot find symbol\n",
                                "[43,15] error: cannot find symbol\nsymbol: variable ChartUtil\nlocation: class MainPanel\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 6238461296418836551
        }
    ],
    "read_file": [
        {
            "input": "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java",
            "output": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport com.gargoylesoftware.htmlunit.ScriptResult;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            ScriptResult scriptResult = new ScriptResult(result);\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n                if (scriptResult != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n",
            "error": "",
            "span_id": 14930328446858593304
        }
    ],
    "get_directory_tree": [
        {
            "input": "ui-tests/src/main/java/io/jenkins/plugins/coverage/util",
            "output": "[\n    {\n        \"name\": \"ChartUtil.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 13953416977995300522
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 8493475821255684983
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 3253251869484111219
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 14308272553011908834
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 5306035016599740540
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 16179115627371017917
        }
    ]
}