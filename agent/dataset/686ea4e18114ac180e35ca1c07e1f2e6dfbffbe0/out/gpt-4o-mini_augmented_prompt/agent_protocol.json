{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/com/wire/lithium/server/monitoring/VersionResource.java\n+++ src/main/java/com/wire/lithium/server/monitoring/VersionResource.java\n@@ -1,6 +1,6 @@\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.Response;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.Response;\n\n @Path(\"/version\")\n public class VersionResource {\n--- src/main/java/com/wire/lithium/Server.java\n+++ src/main/java/com/wire/lithium/Server.java\n@@ -1,6 +1,6 @@\n-import io.dropwizard.Application;\n-import io.dropwizard.setup.Environment;\n+import io.dropwizard.core.Application;\n+import io.dropwizard.setup.Bootstrap;\n+import io.dropwizard.setup.Environment;\n\n public class Server extends Application<Config> {\n--- src/main/java/com/wire/lithium/Configuration.java\n+++ src/main/java/com/wire/lithium/Configuration.java\n@@ -1,1 +1,1 @@\n-import io.dropwizard.Configuration;\n+import io.dropwizard.core.Configuration;\n--- src/main/java/com/wire/lithium/API.java\n+++ src/main/java/com/wire/lithium/API.java\n@@ -1,6 +1,6 @@\n-import javax.ws.rs.Path;\n-import javax.ws.rs.client.Client;\n-import javax.ws.rs.client.WebTarget;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.client.Client;\n+import jakarta.ws.rs.client.WebTarget;\n\n public class API {\n--- src/main/java/com/wire/lithium/server/resources/MessageResource.java\n+++ src/main/java/com/wire/lithium/server/resources/MessageResource.java\n@@ -1,6 +1,6 @@\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.Response;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Consumes;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.Response;\n\n public class MessageResource {\n--- src/main/java/com/wire/lithium/server/resources/BotsResource.java\n+++ src/main/java/com/wire/lithium/server/resources/BotsResource.java\n@@ -1,6 +1,6 @@\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.Response;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Consumes;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.Response;\n\n public class BotsResource {\n--- src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java\n+++ src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java\n@@ -1,6 +1,6 @@\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.ContainerRequestFilter;\n-import javax.ws.rs.ext.Provider;\n+import jakarta.ws.rs.container.ContainerRequestContext;\n+import jakarta.ws.rs.container.ContainerRequestFilter;\n+import jakarta.ws.rs.ext.Provider;\n\n public class AuthenticationFilter implements ContainerRequestFilter {\n--- src/main/java/com/wire/lithium/server/monitoring/RequestMdcFactoryFilter.java\n+++ src/main/java/com/wire/lithium/server/monitoring/RequestMdcFactoryFilter.java\n@@ -1,6 +1,6 @@\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.ContainerRequestFilter;\n-import javax.ws.rs.ext.Provider;\n+import jakarta.ws.rs.container.ContainerRequestContext;\n+import jakarta.ws.rs.container.ContainerRequestFilter;\n+import jakarta.ws.rs.ext.Provider;\n\n public class RequestMdcFactoryFilter implements ContainerRequestFilter {\n--- src/main/java/com/wire/lithium/server/monitoring/StatusResource.java\n+++ src/main/java/com/wire/lithium/server/monitoring/StatusResource.java\n@@ -1,6 +1,6 @@\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.Response;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.Response;\n\n public class StatusResource {\n--- src/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java\n+++ src/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java\n@@ -1,6 +1,6 @@\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.ContainerRequestFilter;\n-import javax.ws.rs.ext.Provider;\n+import jakarta.ws.rs.container.ContainerRequestContext;\n+import jakarta.ws.rs.container.ContainerRequestFilter;\n+import jakarta.ws.rs.ext.Provider;\n\n public class StatusCheckFilter implements ContainerRequestFilter {\n--- src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java\n+++ src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java\n@@ -1,6 +1,6 @@\n-import io.dropwizard.logging.AbstractAppenderFactory;\n-import io.dropwizard.logging.LayoutFactory;\n-import io.dropwizard.logging.LevelFilterFactory;\n-import io.dropwizard.logging.async.AsyncAppenderFactory;\n+import io.dropwizard.logging.appender.AbstractAppenderFactory;\n+import io.dropwizard.logging.layout.LayoutFactory;\n+import io.dropwizard.logging.filter.LevelFilterFactory;\n+import io.dropwizard.logging.async.AsyncAppenderFactory;\n\n public class WireAppenderFactory<T> {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/monitoring/VersionResource.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/monitoring/VersionResource.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/monitoring/VersionResource.java does not contain these 6 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Response;\n@Path(\"/version\")\npublic class VersionResource {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/Configuration.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/Configuration.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/Configuration.java does not contain these 1 exact lines in a row:\n```\nimport io.dropwizard.Configuration;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/API.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/API.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/API.java does not contain these 5 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.WebTarget;\npublic class API {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/resources/MessageResource.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/resources/MessageResource.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/resources/MessageResource.java does not contain these 6 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Response;\npublic class MessageResource {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/resources/BotsResource.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/resources/BotsResource.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/resources/BotsResource.java does not contain these 6 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Response;\npublic class BotsResource {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java does not contain these 5 exact lines in a row:\n```\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerRequestFilter;\nimport javax.ws.rs.ext.Provider;\npublic class AuthenticationFilter implements ContainerRequestFilter {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/monitoring/StatusResource.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/monitoring/StatusResource.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/monitoring/StatusResource.java does not contain these 5 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Response;\npublic class StatusResource {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java does not contain these 5 exact lines in a row:\n```\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerRequestFilter;\nimport javax.ws.rs.ext.Provider;\npublic class StatusCheckFilter implements ContainerRequestFilter {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java does not contain these 6 exact lines in a row:\n```\nimport io.dropwizard.logging.AbstractAppenderFactory;\nimport io.dropwizard.logging.LayoutFactory;\nimport io.dropwizard.logging.LevelFilterFactory;\nimport io.dropwizard.logging.async.AsyncAppenderFactory;\npublic class WireAppenderFactory<T> {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/monitoring/VersionResource.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/monitoring/VersionResource.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/monitoring/VersionResource.java does not contain these 6 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Response;\n@Path(\"/version\")\npublic class VersionResource {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/Configuration.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/Configuration.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/Configuration.java does not contain these 1 exact lines in a row:\n```\nimport io.dropwizard.Configuration;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/API.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/API.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/API.java does not contain these 5 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.WebTarget;\npublic class API {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/resources/MessageResource.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/resources/MessageResource.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/resources/MessageResource.java does not contain these 6 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Response;\npublic class MessageResource {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/resources/BotsResource.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/resources/BotsResource.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/resources/BotsResource.java does not contain these 6 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Response;\npublic class BotsResource {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java does not contain these 5 exact lines in a row:\n```\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerRequestFilter;\nimport javax.ws.rs.ext.Provider;\npublic class AuthenticationFilter implements ContainerRequestFilter {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/monitoring/StatusResource.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/monitoring/StatusResource.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/monitoring/StatusResource.java does not contain these 5 exact lines in a row:\n```\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Response;\npublic class StatusResource {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java does not contain these 5 exact lines in a row:\n```\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerRequestFilter;\nimport javax.ws.rs.ext.Provider;\npublic class StatusCheckFilter implements ContainerRequestFilter {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java does not contain these 6 exact lines in a row:\n```\nimport io.dropwizard.logging.AbstractAppenderFactory;\nimport io.dropwizard.logging.LayoutFactory;\nimport io.dropwizard.logging.LevelFilterFactory;\nimport io.dropwizard.logging.async.AsyncAppenderFactory;\npublic class WireAppenderFactory<T> {\n```",
            "span_id": 17406481182690958193
        },
        {
            "input": "```diff\n--- src/main/java/com/wire/lithium/server/monitoring/VersionResource.java\n+++ src/main/java/com/wire/lithium/server/monitoring/VersionResource.java\n@@ -1,6 +1,6 @@\n package com.wire.lithium.server.monitoring;\n\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n\n-import javax.validation.constraints.NotEmpty;\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n+import jakarta.validation.constraints.NotEmpty;\n+import jakarta.validation.constraints.NotNull;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.MediaType;\n+import jakarta.ws.rs.core.Response;\n \n @Api\n @Path(\"/version\")\n @Produces(MediaType.APPLICATION_JSON)\n public class VersionResource {\n     @GET\n     @ApiOperation(value = \"Returns version of the running code.\")\n     @ApiResponses(value = {\n             @ApiResponse(code = 200, response = Version.class, message = \"Version\")\n     })\n     public Response get() {\n         return Response\n                 .ok(getVersion())\n                 .build();\n     }\n\n     private Version getVersion() {\n         final String path = System.getenv(\"RELEASE_FILE_PATH\");\n\n         String version = null;\n         if (path != null) {\n             try (final RandomAccessFile file = new RandomAccessFile(path, \"r\")) {\n                 version = file.readLine();\n             } catch (Exception ignored) {\n             }\n         }\n\n         if (version == null) {\n             version = \"development\";\n         }\n         return new Version(version);\n     }\n\n     static class Version {\n         @NotNull\n         @NotEmpty\n         public final String version;\n\n         public Version(String version) {\n             this.version = version;\n         }\n     }\n }\n--- src/main/java/com/wire/lithium/Configuration.java\n+++ src/main/java/com/wire/lithium/Configuration.java\n@@ -1,1 +1,1 @@\n-import io.dropwizard.Configuration;\n+import io.dropwizard.core.Configuration;\n--- src/main/java/com/wire/lithium/API.java\n+++ src/main/java/com/wire/lithium/API.java\n@@ -1,6 +1,6 @@\n package com.wire.lithium;\n\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.wire.lithium.models.NewBotResponseModel;\n import com.wire.xenon.Const;\n import com.wire.xenon.WireAPI;\n import com.wire.xenon.assets.IAsset;\n import com.wire.xenon.backend.models.Conversation;\n import com.wire.xenon.backend.models.User;\n import com.wire.xenon.exceptions.HttpException;\n import com.wire.xenon.models.AssetKey;\n import com.wire.xenon.models.otr.*;\n import com.wire.xenon.tools.Logger;\n import com.wire.xenon.tools.Util;\n import org.glassfish.jersey.client.ClientProperties;\n import org.glassfish.jersey.logging.LoggingFeature;\n import org.glassfish.jersey.media.multipart.BodyPart;\n import org.glassfish.jersey.media.multipart.MultiPart;\n\n-import javax.annotation.Nullable;\n-import javax.ws.rs.NotSupportedException;\n-import javax.ws.rs.client.Client;\n-import javax.ws.rs.client.Entity;\n-import javax.ws.rs.client.Invocation;\n-import javax.ws.rs.client.WebTarget;\n-import javax.ws.rs.core.*;\n+import jakarta.annotation.Nullable;\n+import jakarta.ws.rs.NotSupportedException;\n+import jakarta.ws.rs.client.Client;\n+import jakarta.ws.rs.client.Entity;\n+import jakarta.ws.rs.client.Invocation;\n+import jakarta.ws.rs.client.WebTarget;\n+import jakarta.ws.rs.core.*;\n \n public class API implements WireAPI {\n     private final String wireHost;\n\n     private final WebTarget messages;\n     private final WebTarget assets;\n     private final WebTarget client;\n     private final WebTarget prekeys;\n     private final WebTarget users;\n     private final WebTarget conversation;\n     private final WebTarget bot;\n\n     private final Client httpClient;\n     private final String token;\n\n     public API(Client httpClient, String token) {\n         this(httpClient, token, deriveHost());\n     }\n\n     public API(Client httpClient, String token, String wireHost) {\n         this.httpClient = httpClient;\n         this.token = token;\n\n         this.wireHost = wireHost;\n\n         bot = httpClient\n                 .target(wireHost)\n                 .path(\"bot\");\n         messages = bot\n                 .path(\"messages\");\n         assets = bot\n                 .path(\"assets\");\n         users = bot\n                 .path(\"users\");\n         conversation = bot\n                 .path(\"conversation\");\n         client = bot\n                 .path(\"client\")\n                 .path(\"prekeys\");\n         prekeys = users\n                 .path(\"prekeys\");\n\n         if (Logger.getLevel() == Level.FINE) {\n             Feature feature = new LoggingFeature(Logger.getLOGGER(), Level.FINE, null, null);\n             assets.register(feature);\n             users.register(feature);\n         }\n     }\n\n     private static String deriveHost() {\n         String host = System.getProperty(Const.WIRE_BOTS_SDK_API, System.getenv(\"WIRE_API_HOST\"));\n         return host != null ? host : \"https://prod-nginz-https.wire.com\";\n     }\n\n     public Response status() {\n         return httpClient.target(wireHost)\n                 .path(\"status\")\n                 .request()\n                 .get();\n     }\n\n     public String getWireHost() {\n         return this.wireHost;\n     }\n\n     /**\n      * This method sends the OtrMessage to BE. Message must contain cipher for all participants and all their clients.\n      *\n      * @param msg           OtrMessage object containing ciphers for all clients\n      * @param ignoreMissing If TRUE ignore missing clients and deliver the message to available clients\n      * @return List of missing devices in case of fail or an empty list.\n      * @throws HttpException Http Exception is thrown when status {@literal >}= 400\n      */\n     @Override\n     public Devices sendMessage(OtrMessage msg, Object... ignoreMissing) throws HttpException {\n         Response response = messages\n                 .queryParam(\"ignore_missing\", ignoreMissing)\n                 .request(MediaType.APPLICATION_JSON)\n                 .header(HttpHeaders.AUTHORIZATION, bearer())\n                 .post(Entity.entity(msg, MediaType.APPLICATION_JSON));\n\n         int statusCode = response.getStatus();\n         if (statusCode == 412) {\n             // This message was not sent due to missing clients. Parse those missing clients so the caller can add them\n             return response.readEntity(Devices.class);\n         }\n\n         if (statusCode >= 400) {\n             throw new HttpException(response.readEntity(String.class), statusCode);\n         }\n\n         return response.readEntity(Devices.class);\n     }\n\n     @Override\n     public Devices sendPartialMessage(OtrMessage msg, UUID userId) throws HttpException {\n         Response response = messages\n                 .queryParam(\"report_missing\", userId)\n                 .request(MediaType.APPLICATION_JSON)\n                 .header(HttpHeaders.AUTHORIZATION, bearer())\n                 .post(Entity.entity(msg, MediaType.APPLICATION_JSON));\n\n         int statusCode = response.getStatus();\n         if (statusCode == 412) {\n             // This message was not sent due to missing clients. Parse those missing clients so the caller can add them\n             return response.readEntity(Devices.class);\n         }\n\n         if (statusCode >= 400) {\n             throw new HttpException(response.readEntity(String.class), statusCode);\n         }\n\n         return response.readEntity(Devices.class);\n     }\n\n     @Override\n     public Collection<User> getUsers(Collection<UUID> ids) {\n         return users\n                 .queryParam(\"ids\", ids.toArray())\n                 .request(MediaType.APPLICATION_JSON)\n                 .header(HttpHeaders.AUTHORIZATION, bearer())\n                 .get(new GenericType<ArrayList<User>>() {\n                 });\n     }\n\n     @Override\n     public User getSelf() {\n         return bot\n                 .path(\"self\")\n                 .request(MediaType.APPLICATION_JSON)\n                 .header(HttpHeaders.AUTHORIZATION, bearer())\n                 .get(User.class);\n     }\n\n     @Override\n     public Conversation getConversation() {\n         return conversation\n                 .request()\n                 .header(HttpHeaders.AUTHORIZATION, bearer())\n                 .accept(MediaType.APPLICATION_JSON)\n                 .get(Conversation.class);\n     }\n\n     @Override\n     public PreKeys getPreKeys(Missing missing) {\n         return prekeys\n                 .request(MediaType.APPLICATION_JSON)\n                 .header(HttpHeaders.AUTHORIZATION, bearer())\n                 .accept(MediaType.APPLICATION_JSON)\n                 .post(Entity.entity(missing, MediaType.APPLICATION_JSON), PreKeys.class);\n     }\n\n     @Override\n     public ArrayList<Integer> getAvailablePrekeys(@Nullable String clientId) {\n         return client\n                 .request()\n                 .header(HttpHeaders.AUTHORIZATION, bearer())\n                 .accept(MediaType.APPLICATION_JSON)\n                 .get(new GenericType<>() {\n                 });\n     }\n\n     @Override\n     public void uploadPreKeys(ArrayList<PreKey> preKeys) throws IOException {\n         NewBotResponseModel model = new NewBotResponseModel();\n         model.preKeys = preKeys;\n\n         Response res = client\n                 .request(MediaType.APPLICATION_JSON)\n                 .header(HttpHeaders.AUTHORIZATION, bearer())\n                 .accept(MediaType.APPLICATION_JSON)\n                 .post(Entity.entity(model, MediaType.APPLICATION_JSON));\n\n         int statusCode = res.getStatus();\n         if (statusCode >= 400) {\n             throw new IOException(res.readEntity(String.class));\n         }\n     }\n\n     @Override\n     public AssetKey uploadAsset(IAsset asset) throws Exception {\n         StringBuilder sb = new StringBuilder();\n\n         // Part 1\n         String strMetadata = String.format(\"{\\\"public\\\": %s, \\\"retention\\\": \\\"%s\\\"}\",\n                 asset.isPublic(),\n                 asset.getRetention());\n         sb.append(\"--frontier\\r\\n\");\n         sb.append(\"Content-Type: application/json; charset=utf-8\\r\\n\");\n         sb.append(\"Content-Length: \")\n                 .append(strMetadata.length())\n                 .append(\"\\r\\n\\r\\n\");\n         sb.append(strMetadata)\n                 .append(\"\\r\\n\");\n\n         // Part 2\n         sb.append(\"--frontier\\r\\n\");\n         sb.append(\"Content-Type: \")\n                 .append(asset.getMimeType())\n                 .append(\"\\r\\n\");\n         sb.append(\"Content-Length: \")\n                 .append(asset.getEncryptedData().length)\n                 .append(\"\\r\\n\");\n         sb.append(\"Content-MD5: \")\n                 .append(Util.calcMd5(asset.getEncryptedData()))\n                 .append(\"\\r\\n\\r\\n\");\n\n         // Complete\n         ByteArrayOutputStream os = new ByteArrayOutputStream();\n         os.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n         os.write(asset.getEncryptedData());\n         os.write(\"\\r\\n--frontier--\\r\\n\".getBytes(StandardCharsets.UTF_8));\n\n         Response response = assets\n                 .request(MediaType.APPLICATION_JSON_TYPE)\n                 .header(HttpHeaders.AUTHORIZATION, bearer())\n                 .post(Entity.entity(os.toByteArray(), \"multipart/mixed; boundary=frontier\"));\n\n         if (response.getStatus() >= 400) {\n             throw new HttpException(response.readEntity(String.class), response.getStatus());\n         }\n\n         return response.readEntity(AssetKey.class);\n     }\n\n     private MultiPart getMultiPart(IAsset asset) throws NoSuchAlgorithmException {\n         MetaData metaData = new MetaData();\n         metaData.retention = asset.getRetention();\n         metaData.scope = asset.isPublic();\n\n         BodyPart bodyPart1 = new BodyPart(metaData, MediaType.APPLICATION_JSON_TYPE);\n         BodyPart bodyPart2 = new BodyPart().entity(asset.getEncryptedData());\n\n         MultivaluedMap<String, String> headers = bodyPart2.getHeaders();\n         headers.add(\"Content-Type\", asset.getMimeType());\n         headers.add(\"Content-MD5\", Util.calcMd5(asset.getEncryptedData()));\n\n         return new MultiPart()\n                 .bodyPart(bodyPart1)\n                 .bodyPart(bodyPart2);\n     }\n\n     @Override\n     public byte[] downloadAsset(String assetId, String assetToken) throws HttpException {\n         Invocation.Builder req = assets\n                 .path(assetId)\n                 .request()\n                 .property(ClientProperties.FOLLOW_REDIRECTS, Boolean.FALSE)\n                 .header(HttpHeaders.AUTHORIZATION, bearer());\n\n         if (assetToken != null && !assetToken.isBlank())\n             req.header(\"Asset-Token\", assetToken);\n\n         Response response = req.get();\n\n         if (response.getStatus() >= 400) {\n             throw new HttpException(response.readEntity(String.class), response.getStatus());\n         }\n\n         final String location = response.getHeaderString(HttpHeaders.LOCATION);\n         response.close();\n\n         response = httpClient\n                 .target(location)\n                 .request()\n                 .get();\n\n         if (response.getStatus() >= 400) {\n             throw new HttpException(response.readEntity(String.class), response.getStatus());\n         }\n\n         return response.readEntity(byte[].class);\n     }\n\n     @Override\n     public boolean deleteConversation(UUID teamId) {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public User addService(UUID serviceId, UUID providerId) {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public User addParticipants(UUID... userIds) {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public Conversation createConversation(String name, UUID teamId, List<UUID> users) {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public Conversation createOne2One(UUID teamId, UUID userId) {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public void leaveConversation(UUID user) {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public User getUser(UUID userId) {\n         return getUsers(Collections.singletonList(userId))\n                 .stream()\n                 .findFirst()\n                 .orElse(null);\n     }\n\n     @Override\n     public UUID getUserId(String handle) {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public boolean hasDevice(UUID userId, String clientId) {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public UUID getTeam() {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public Collection<UUID> getTeamMembers(UUID teamId) {\n         throw new NotSupportedException();\n     }\n\n     @Override\n     public void acceptConnection(UUID user) {\n         throw new NotSupportedException();\n     }\n\n     private String bearer() {\n         return String.format(\"Bearer %s\", token);\n     }\n\n     public static class MetaData {\n         @JsonProperty(\"public\")\n         public boolean scope;\n         @JsonProperty\n         public String retention;\n     }\n }\n--- src/main/java/com/wire/lithium/server/resources/MessageResource.java\n+++ src/main/java/com/wire/lithium/server/resources/MessageResource.java\n@@ -1,6 +1,6 @@\n package com.wire.lithium.server.resources;\n\n import com.codahale.metrics.annotation.Metered;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.wire.bots.cryptobox.CryptoException;\n import com.wire.lithium.ClientRepo;\n import com.wire.lithium.server.monitoring.MDCUtils;\n import com.wire.xenon.MessageHandlerBase;\n import com.wire.xenon.MessageResourceBase;\n import com.wire.xenon.WireClient;\n import com.wire.xenon.assets.Reaction;\n import com.wire.xenon.backend.models.ErrorMessage;\n import com.wire.xenon.backend.models.Payload;\n import com.wire.xenon.exceptions.MissingStateException;\n import com.wire.xenon.tools.Logger;\n import io.swagger.annotations.*;\n\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.*;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import java.io.IOException;\n import java.util.UUID;\n import java.util.logging.Level;\n\n @Api\n @Produces(MediaType.APPLICATION_JSON)\n @Consumes(MediaType.APPLICATION_JSON)\n @Path(\"/bots/{bot}/messages\")\n public class MessageResource extends MessageResourceBase {\n     private final ObjectMapper objectMapper = new ObjectMapper();\n     private final ClientRepo repo;\n\n     public MessageResource(MessageHandlerBase handler, ClientRepo repo) {\n         super(handler);\n         this.repo = repo;\n     }\n\n     @POST\n     @ApiOperation(value = \"New OTR Message\")\n     @ApiResponses(value = {\n             @ApiResponse(code = 403, message = \"Invalid Authorization\", response = ErrorMessage.class),\n             @ApiResponse(code = 503, message = \"Missing bot's state object\", response = ErrorMessage.class),\n             @ApiResponse(code = 200, message = \"Alles gute\")})\n     @Authorization(\"Bearer\")\n     @Metered\n     public Response newMessage(@ApiParam(\"UUID Bot instance id\") @PathParam(\"bot\") UUID botId,\n                                @ApiParam(\"UUID Unique event id\") @QueryParam(\"id\") UUID eventId,\n                                @ApiParam @Valid @NotNull Payload payload) throws IOException {\n\n         if (eventId == null) {\n             eventId = UUID.randomUUID(); //todo fix this once Wire BE adds eventId into payload\n         }\n\n         if (Logger.getLevel() == Level.FINE) {\n             Logger.debug(\"eventId: %s, botId: %s, %s\",\n                     eventId,\n                     botId,\n                     objectMapper.writeValueAsString(payload));\n         }\n\n         // put tracing information to logs\n         MDCUtils.put(\"botId\", botId);\n         MDCUtils.put(\"eventId\", eventId);\n         MDCUtils.put(\"conversationId\", payload.conversation.id);\n\n         try (WireClient client = getWireClient(botId, payload)) {\n             handleMessage(eventId, payload, client);\n         } catch (CryptoException e) {\n             Logger.exception(\"newMessage: %s %s\", e, botId, e.getMessage());\n             respondWithError(botId, payload);\n             return Response.\n                     status(503).\n                     entity(new ErrorMessage(e.getMessage())).\n                     build();\n         } catch (MissingStateException e) {\n             Logger.exception(\"newMessage: %s %s\", e, botId, e.getMessage());\n             return Response.\n                     status(410).\n                     entity(new ErrorMessage(e.getMessage())).\n                     build();\n         } catch (Exception e) {\n             Logger.exception(\"newMessage: %s %s\", e, botId, e.getMessage());\n             return Response.\n                     status(400).\n                     entity(new ErrorMessage(e.getMessage())).\n                     build();\n         }\n\n         return Response.\n                 ok().\n                 status(200).\n                 build();\n     }\n\n     private void respondWithError(UUID botId, Payload payload) {\n         try (WireClient client = getWireClient(botId, payload)) {\n             client.send(new Reaction(UUID.randomUUID(), \"\"));\n         } catch (Exception e) {\n             Logger.exception(\"respondWithError: bot: %s %s\", e, botId, e.getMessage());\n         }\n     }\n\n     protected WireClient getWireClient(UUID botId, Payload payload) throws IOException, CryptoException {\n         return repo.getClient(botId);\n     }\n }\n--- src/main/java/com/wire/lithium/server/resources/BotsResource.java\n+++ src/main/java/com/wire/lithium/server/resources/BotsResource.java\n@@ -1,6 +1,6 @@\n package com.wire.lithium.server.resources;\n\n import com.codahale.metrics.annotation.Metered;\n import com.wire.lithium.models.NewBotResponseModel;\n import com.wire.lithium.server.monitoring.MDCUtils;\n import com.wire.xenon.MessageHandlerBase;\n import com.wire.xenon.backend.models.ErrorMessage;\n import com.wire.xenon.backend.models.NewBot;\n import com.wire.xenon.crypto.Crypto;\n import com.wire.xenon.factories.CryptoFactory;\n import com.wire.xenon.factories.StorageFactory;\n import com.wire.xenon.tools.Logger;\n import io.swagger.annotations.*;\n\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.container.ContainerRequestContext;\n import javax.ws.rs.core.Context;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import java.util.UUID;\n\n @Api\n @Produces(MediaType.APPLICATION_JSON)\n @Consumes(MediaType.APPLICATION_JSON)\n @Path(\"/bots\")\n public class BotsResource {\n     protected final MessageHandlerBase handler;\n\n     protected final StorageFactory storageF;\n     protected final CryptoFactory cryptoF;\n\n     public BotsResource(MessageHandlerBase handler, StorageFactory storageF, CryptoFactory cryptoF) {\n         this.handler = handler;\n         this.storageF = storageF;\n         this.cryptoF = cryptoF;\n     }\n\n     @POST\n     @ApiOperation(value = \"New Bot instance\", response = NewBotResponseModel.class, code = 201)\n     @ApiResponses(value = {\n             @ApiResponse(code = 401, message = \"Unauthorized\", response = ErrorMessage.class),\n             @ApiResponse(code = 409, message = \"Bot not accepted (whitelist?)\", response = ErrorMessage.class),\n             @ApiResponse(code = 201, message = \"Alles gute\")})\n     @Authorization(\"Bearer\")\n     @Metered\n     public Response newBot(@Context ContainerRequestContext context,\n                            @ApiParam @Valid @NotNull NewBot newBot) {\n\n         NewBotResponseModel ret = new NewBotResponseModel();\n\n         try {\n             UUID botId = newBot.id;\n             // put information to every log for more information\n             MDCUtils.put(\"botId\", botId);\n             MDCUtils.put(\"conversationId\", newBot.conversation.id);\n             MDCUtils.put(\"userId\", newBot.origin.id);\n\n             String token = (String) context.getProperty(\"wire-auth\");\n             if (!onNewBot(newBot, token)) {\n                 return Response\n                         .status(409)\n                         .entity(new ErrorMessage(\"User not whitelisted or service does not accept new instances atm\"))\n                         .build();\n             }\n\n             boolean saveState = storageF.create(botId).saveState(newBot);\n             if (!saveState) {\n                 Logger.warning(\"Failed to save the state. Bot: %s\", botId);\n             }\n\n             ret.name = handler.getName(newBot);\n             ret.accentId = handler.getAccentColour();\n             String profilePreview = handler.getSmallProfilePicture();\n             if (profilePreview != null) {\n                 ret.addAsset(profilePreview, \"preview\");\n             }\n\n             String profileBig = handler.getBigProfilePicture();\n             if (profileBig != null) {\n                 ret.addAsset(profileBig, \"complete\");\n             }\n\n             try (Crypto crypto = cryptoF.create(botId)) {\n                 ret.lastPreKey = crypto.newLastPreKey();\n                 ret.preKeys = crypto.newPreKeys(0, 50);\n             }\n\n         } catch (Exception e) {\n             Logger.exception(\"newBot: %s\", e, e.getMessage());\n             return Response.\n                     status(500).\n                     entity(new ErrorMessage(e.getMessage())).\n                     build();\n         }\n\n         return Response.\n                 ok(ret).\n                 status(201).\n                 build();\n     }\n\n     protected boolean onNewBot(NewBot newBot, String auth) {\n         return handler.onNewBot(newBot, auth);\n     }\n }\n--- src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java\n+++ src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java\n@@ -1,6 +1,6 @@\n package com.wire.lithium.server.filters;\n\n import com.wire.xenon.Const;\n import com.wire.xenon.tools.Logger;\n import com.wire.xenon.tools.Util;\n\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.ContainerRequestFilter;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.ext.Provider;\n+import jakarta.ws.rs.WebApplicationException;\n+import jakarta.ws.rs.container.ContainerRequestContext;\n+import jakarta.ws.rs.container.ContainerRequestFilter;\n+import jakarta.ws.rs.core.HttpHeaders;\n+import jakarta.ws.rs.core.Response;\n+import jakarta.ws.rs.ext.Provider;\n\n @Provider\n public class AuthenticationFilter implements ContainerRequestFilter {\n     @Override\n     public void filter(ContainerRequestContext requestContext) {\n         String auth = requestContext.getHeaderString(HttpHeaders.AUTHORIZATION);\n         if (auth == null) {\n             Exception cause = new IllegalArgumentException(\"Missing Authorization\");\n             throw new WebApplicationException(cause, Response.Status.UNAUTHORIZED);\n         }\n\n         String serviceToken = System.getProperty(Const.WIRE_BOTS_SDK_TOKEN, System.getenv(\"SERVICE_TOKEN\"));\n\n         if (!Util.compareAuthorizations(auth, serviceToken)) {\n             Logger.warning(\"Wrong service token\");\n             Exception cause = new IllegalArgumentException(\"Wrong service token\");\n             throw new WebApplicationException(cause, Response.Status.UNAUTHORIZED);\n         }\n\n         requestContext.setProperty(\"wire-auth\", Util.extractToken(auth));\n     }\n }\n--- src/main/java/com/wire/lithium/server/monitoring/StatusResource.java\n+++ src/main/java/com/wire/lithium/server/monitoring/StatusResource.java\n@@ -1,6 +1,6 @@\n package com.wire.lithium.server.monitoring;\n\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n\n @Api\n @Path(\"/status\")\n @Produces(MediaType.TEXT_PLAIN)\n public class StatusResource {\n     @GET\n     @ApiOperation(value = \"Status\")\n     public Response statusEmpty() {\n         return Response\n                 .ok()\n                 .build();\n     }\n }\n--- src/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java\n+++ src/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java\n@@ -1,6 +1,6 @@\n package com.wire.lithium.server.monitoring;\n\n import ch.qos.logback.access.spi.IAccessEvent;\n import ch.qos.logback.core.filter.Filter;\n import ch.qos.logback.core.spi.FilterReply;\n import com.fasterxml.jackson.annotation.JsonTypeName;\n import io.dropwizard.logging.filter.FilterFactory;\n\n \n @JsonTypeName(\"status-filter-factory\")\n public class StatusCheckFilter implements FilterFactory<IAccessEvent> {\n     @Override\n     public Filter<IAccessEvent> build() {\n         return new Filter<>() {\n             @Override\n             public FilterReply decide(IAccessEvent event) {\n                 if (event.getRequestURI().contains(\"/status\")) {\n                     return FilterReply.DENY;\n                 }\n                 if (event.getRequestURI().contains(\"/swagger\")) {\n                     return FilterReply.DENY;\n                 }\n                 if (event.getRequestURI().contains(\"/metrics\")) {\n                     return FilterReply.DENY;\n                 }\n                 return FilterReply.NEUTRAL;\n             }\n         };\n     }\n }\n--- src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java\n+++ src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java\n@@ -1,6 +1,6 @@\n package com.wire.lithium.server.monitoring;\n\n import ch.qos.logback.access.spi.IAccessEvent;\n import ch.qos.logback.classic.LoggerContext;\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.core.Appender;\n import ch.qos.logback.core.ConsoleAppender;\n import ch.qos.logback.core.Layout;\n import ch.qos.logback.core.filter.Filter;\n import ch.qos.logback.core.spi.DeferredProcessingAware;\n import com.fasterxml.jackson.annotation.JsonTypeName;\n import io.dropwizard.logging.AbstractAppenderFactory;\n import io.dropwizard.logging.async.AsyncAppenderFactory;\n import io.dropwizard.logging.filter.LevelFilterFactory;\n import io.dropwizard.logging.layout.LayoutFactory;\n import io.dropwizard.request.logging.layout.LogbackAccessRequestLayoutFactory;\n\n import java.util.List;\n import java.util.stream.Collectors;\n\n /**\n  * Production console appender using logging to JSON.\n  */\n @JsonTypeName(\"json-console\")\n public class WireAppenderFactory<T extends DeferredProcessingAware> extends AbstractAppenderFactory<T> {\n\n     @Override\n     public Appender<T> build(\n             LoggerContext loggerContext,\n             String serviceName,\n             LayoutFactory<T> layoutFactory,\n             LevelFilterFactory<T> levelFilterFactory,\n             AsyncAppenderFactory<T> asyncAppenderFactory) {\n\n         final ConsoleAppender<T> appender = new ConsoleAppender<>();\n         appender.setContext(loggerContext);\n         appender.setTarget(\"System.out\");\n\n         final Filter<T> levelFilter = levelFilterFactory.build(threshold);\n         Layout<T> layout;\n         // this is quite ugly hack to achieve just a single name for the logger\n         if (layoutFactory instanceof LogbackAccessRequestLayoutFactory) {\n             layout = prepareAccessEventLayout(levelFilter);\n         } else {\n             layout = prepareLoggingEventLayout(levelFilter);\n         }\n\n         appender.setLayout(layout);\n         appender.start();\n\n         return appender;\n     }\n\n     // we know that T is either ILoggingEvent or IAccessEvent\n     // so this is in a fact checked cast\n     // moreover thanks to the generics erasure during runtime, its safe anyway\n     @SuppressWarnings(\"unchecked\")\n     private Layout<T> prepareAccessEventLayout(Filter<T> levelFilter) {\n         List<Filter<IAccessEvent>> ac = getFilterFactories().stream()\n                 .map(filter -> (Filter<IAccessEvent>) filter.build())\n                 .collect(Collectors.toList());\n         ac.add((Filter<IAccessEvent>) levelFilter);\n         return (Layout<T>) new AccessEventJsonLayout(ac);\n     }\n\n     @SuppressWarnings(\"unchecked\")\n     private Layout<T> prepareLoggingEventLayout(Filter<T> levelFilter) {\n         List<Filter<ILoggingEvent>> ac = getFilterFactories().stream()\n                 .map(filter -> (Filter<ILoggingEvent>) filter.build())\n                 .collect(Collectors.toList());\n         ac.add((Filter<ILoggingEvent>) levelFilter);\n         return (Layout<T>) new LoggingEventJsonLayout(ac);\n     }\n\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/Configuration.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/Configuration.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/Configuration.java does not contain these 1 exact lines in a row:\n```\nimport io.dropwizard.Configuration;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/Configuration.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/Configuration.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/Configuration.java does not contain these 1 exact lines in a row:\n```\nimport io.dropwizard.Configuration;\n```",
            "span_id": 4323128481951568957
        },
        {
            "input": "```diff\n--- src/main/java/com/wire/lithium/Configuration.java\n+++ src/main/java/com/wire/lithium/Configuration.java\n@@ -1,1 +1,1 @@\n-import io.dropwizard.Configuration;\n+import io.dropwizard.core.Configuration;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/Configuration.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/Configuration.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/Configuration.java does not contain these 1 exact lines in a row:\n```\nimport io.dropwizard.Configuration;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/wire/lithium/Configuration.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/wire/lithium/Configuration.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/wire/lithium/Configuration.java does not contain these 1 exact lines in a row:\n```\nimport io.dropwizard.Configuration;\n```",
            "span_id": 10911446825841199736
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/com/wire/lithium/server/monitoring/VersionResource.java",
            "output": "package com.wire.lithium.server.monitoring;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiResponse;\nimport io.swagger.annotations.ApiResponses;\n\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport java.io.RandomAccessFile;\n\n@Api\n@Path(\"/version\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class VersionResource {\n    @GET\n    @ApiOperation(value = \"Returns version of the running code.\")\n    @ApiResponses(value = {\n            @ApiResponse(code = 200, response = Version.class, message = \"Version\")\n    })\n    public Response get() {\n        return Response\n                .ok(getVersion())\n                .build();\n    }\n\n    private Version getVersion() {\n        final String path = System.getenv(\"RELEASE_FILE_PATH\");\n\n        String version = null;\n        if (path != null) {\n            try (final RandomAccessFile file = new RandomAccessFile(path, \"r\")) {\n                version = file.readLine();\n            } catch (Exception ignored) {\n            }\n        }\n\n        if (version == null) {\n            version = \"development\";\n        }\n        return new Version(version);\n    }\n\n    static class Version {\n        @NotNull\n        @NotEmpty\n        public final String version;\n\n        public Version(String version) {\n            this.version = version;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 975899358612414715
        },
        {
            "input": "src/main/java/com/wire/lithium/Configuration.java",
            "output": "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.dropwizard.client.JerseyClientConfiguration;\nimport io.dropwizard.db.DataSourceFactory;\nimport io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;\n\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\n/**\n * Application configuration class. Extend this class to add your custom configuration\n */\npublic class Configuration extends io.dropwizard.Configuration {\n    @JsonProperty\n    @Valid\n    public Database database = new Database();\n\n    @JsonProperty\n    @NotNull\n    public String token;   // Service token. Obtained when the Service is registered with Wire\n\n    @JsonProperty\n    public boolean healthchecks = true;\n\n    @Valid\n    private _JerseyClientConfiguration jerseyClient = new _JerseyClientConfiguration();\n\n    @JsonProperty(\"swagger\")\n    public SwaggerBundleConfiguration swagger = new _SwaggerBundleConfiguration();\n\n    @JsonProperty\n    public String apiHost = \"https://prod-nginz-https.wire.com\";\n\n    @JsonProperty(\"jerseyClient\")\n    public JerseyClientConfiguration getJerseyClient() {\n        return jerseyClient;\n    }\n\n    @JsonProperty(\"jerseyClient\")\n    public void setJerseyClient(_JerseyClientConfiguration jerseyClient) {\n        this.jerseyClient = jerseyClient;\n    }\n\n    public static class Database extends DataSourceFactory {\n        @JsonProperty\n        public boolean baseline;\n    }\n\n    public static class _JerseyClientConfiguration extends JerseyClientConfiguration {\n        public _JerseyClientConfiguration() {\n            setChunkedEncodingEnabled(false);\n            setGzipEnabled(false);\n            setGzipEnabledForRequests(false);\n        }\n    }\n\n    private static class _SwaggerBundleConfiguration extends SwaggerBundleConfiguration {\n        _SwaggerBundleConfiguration() {\n            setResourcePackage(\"com.wire.lithium.server.resources\");\n        }\n    }\n}\n",
            "error": "",
            "span_id": 1224041782837350318
        },
        {
            "input": "src/main/java/com/wire/lithium/API.java",
            "output": "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.wire.lithium.models.NewBotResponseModel;\nimport com.wire.xenon.Const;\nimport com.wire.xenon.WireAPI;\nimport com.wire.xenon.assets.IAsset;\nimport com.wire.xenon.backend.models.Conversation;\nimport com.wire.xenon.backend.models.User;\nimport com.wire.xenon.exceptions.HttpException;\nimport com.wire.xenon.models.AssetKey;\nimport com.wire.xenon.models.otr.*;\nimport com.wire.xenon.tools.Logger;\nimport com.wire.xenon.tools.Util;\nimport org.glassfish.jersey.client.ClientProperties;\nimport org.glassfish.jersey.logging.LoggingFeature;\nimport org.glassfish.jersey.media.multipart.BodyPart;\nimport org.glassfish.jersey.media.multipart.MultiPart;\n\nimport javax.annotation.Nullable;\nimport javax.ws.rs.NotSupportedException;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.Entity;\nimport javax.ws.rs.client.Invocation;\nimport javax.ws.rs.client.WebTarget;\nimport javax.ws.rs.core.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.*;\nimport java.util.logging.Level;\n\npublic class API implements WireAPI {\n    private final String wireHost;\n\n    private final WebTarget messages;\n    private final WebTarget assets;\n    private final WebTarget client;\n    private final WebTarget prekeys;\n    private final WebTarget users;\n    private final WebTarget conversation;\n    private final WebTarget bot;\n\n    private final Client httpClient;\n    private final String token;\n\n    public API(Client httpClient, String token) {\n        this(httpClient, token, deriveHost());\n    }\n\n    public API(Client httpClient, String token, String wireHost) {\n        this.httpClient = httpClient;\n        this.token = token;\n\n        this.wireHost = wireHost;\n\n        bot = httpClient\n                .target(wireHost)\n                .path(\"bot\");\n        messages = bot\n                .path(\"messages\");\n        assets = bot\n                .path(\"assets\");\n        users = bot\n                .path(\"users\");\n        conversation = bot\n                .path(\"conversation\");\n        client = bot\n                .path(\"client\")\n                .path(\"prekeys\");\n        prekeys = users\n                .path(\"prekeys\");\n\n        if (Logger.getLevel() == Level.FINE) {\n            Feature feature = new LoggingFeature(Logger.getLOGGER(), Level.FINE, null, null);\n            assets.register(feature);\n            users.register(feature);\n        }\n    }\n\n    private static String deriveHost() {\n        String host = System.getProperty(Const.WIRE_BOTS_SDK_API, System.getenv(\"WIRE_API_HOST\"));\n        return host != null ? host : \"https://prod-nginz-https.wire.com\";\n    }\n\n    public Response status() {\n        return httpClient.target(wireHost)\n                .path(\"status\")\n                .request()\n                .get();\n    }\n\n    public String getWireHost() {\n        return this.wireHost;\n    }\n\n    /**\n     * This method sends the OtrMessage to BE. Message must contain cipher for all participants and all their clients.\n     *\n     * @param msg           OtrMessage object containing ciphers for all clients\n     * @param ignoreMissing If TRUE ignore missing clients and deliver the message to available clients\n     * @return List of missing devices in case of fail or an empty list.\n     * @throws HttpException Http Exception is thrown when status {@literal >}= 400\n     */\n    @Override\n    public Devices sendMessage(OtrMessage msg, Object... ignoreMissing) throws HttpException {\n        Response response = messages\n                .queryParam(\"ignore_missing\", ignoreMissing)\n                .request(MediaType.APPLICATION_JSON)\n                .header(HttpHeaders.AUTHORIZATION, bearer())\n                .post(Entity.entity(msg, MediaType.APPLICATION_JSON));\n\n        int statusCode = response.getStatus();\n        if (statusCode == 412) {\n            // This message was not sent due to missing clients. Parse those missing clients so the caller can add them\n            return response.readEntity(Devices.class);\n        }\n\n        if (statusCode >= 400) {\n            throw new HttpException(response.readEntity(String.class), statusCode);\n        }\n\n        return response.readEntity(Devices.class);\n    }\n\n    @Override\n    public Devices sendPartialMessage(OtrMessage msg, UUID userId) throws HttpException {\n        Response response = messages\n                .queryParam(\"report_missing\", userId)\n                .request(MediaType.APPLICATION_JSON)\n                .header(HttpHeaders.AUTHORIZATION, bearer())\n                .post(Entity.entity(msg, MediaType.APPLICATION_JSON));\n\n        int statusCode = response.getStatus();\n        if (statusCode == 412) {\n            // This message was not sent due to missing clients. Parse those missing clients so the caller can add them\n            return response.readEntity(Devices.class);\n        }\n\n        if (statusCode >= 400) {\n            throw new HttpException(response.readEntity(String.class), statusCode);\n        }\n\n        return response.readEntity(Devices.class);\n    }\n\n    @Override\n    public Collection<User> getUsers(Collection<UUID> ids) {\n        return users\n                .queryParam(\"ids\", ids.toArray())\n                .request(MediaType.APPLICATION_JSON)\n                .header(HttpHeaders.AUTHORIZATION, bearer())\n                .get(new GenericType<ArrayList<User>>() {\n                });\n    }\n\n    @Override\n    public User getSelf() {\n        return bot\n                .path(\"self\")\n                .request(MediaType.APPLICATION_JSON)\n                .header(HttpHeaders.AUTHORIZATION, bearer())\n                .get(User.class);\n    }\n\n    @Override\n    public Conversation getConversation() {\n        return conversation\n                .request()\n                .header(HttpHeaders.AUTHORIZATION, bearer())\n                .accept(MediaType.APPLICATION_JSON)\n                .get(Conversation.class);\n    }\n\n    @Override\n    public PreKeys getPreKeys(Missing missing) {\n        return prekeys\n                .request(MediaType.APPLICATION_JSON)\n                .header(HttpHeaders.AUTHORIZATION, bearer())\n                .accept(MediaType.APPLICATION_JSON)\n                .post(Entity.entity(missing, MediaType.APPLICATION_JSON), PreKeys.class);\n    }\n\n    @Override\n    public ArrayList<Integer> getAvailablePrekeys(@Nullable String clientId) {\n        return client\n                .request()\n                .header(HttpHeaders.AUTHORIZATION, bearer())\n                .accept(MediaType.APPLICATION_JSON)\n                .get(new GenericType<>() {\n                });\n    }\n\n    @Override\n    public void uploadPreKeys(ArrayList<PreKey> preKeys) throws IOException {\n        NewBotResponseModel model = new NewBotResponseModel();\n        model.preKeys = preKeys;\n\n        Response res = client\n                .request(MediaType.APPLICATION_JSON)\n                .header(HttpHeaders.AUTHORIZATION, bearer())\n                .accept(MediaType.APPLICATION_JSON)\n                .post(Entity.entity(model, MediaType.APPLICATION_JSON));\n\n        int statusCode = res.getStatus();\n        if (statusCode >= 400) {\n            throw new IOException(res.readEntity(String.class));\n        }\n    }\n\n    @Override\n    public AssetKey uploadAsset(IAsset asset) throws Exception {\n        StringBuilder sb = new StringBuilder();\n\n        // Part 1\n        String strMetadata = String.format(\"{\\\"public\\\": %s, \\\"retention\\\": \\\"%s\\\"}\",\n                asset.isPublic(),\n                asset.getRetention());\n        sb.append(\"--frontier\\r\\n\");\n        sb.append(\"Content-Type: application/json; charset=utf-8\\r\\n\");\n        sb.append(\"Content-Length: \")\n                .append(strMetadata.length())\n                .append(\"\\r\\n\\r\\n\");\n        sb.append(strMetadata)\n                .append(\"\\r\\n\");\n\n        // Part 2\n        sb.append(\"--frontier\\r\\n\");\n        sb.append(\"Content-Type: \")\n                .append(asset.getMimeType())\n                .append(\"\\r\\n\");\n        sb.append(\"Content-Length: \")\n                .append(asset.getEncryptedData().length)\n                .append(\"\\r\\n\");\n        sb.append(\"Content-MD5: \")\n                .append(Util.calcMd5(asset.getEncryptedData()))\n                .append(\"\\r\\n\\r\\n\");\n\n        // Complete\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        os.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n        os.write(asset.getEncryptedData());\n        os.write(\"\\r\\n--frontier--\\r\\n\".getBytes(StandardCharsets.UTF_8));\n\n        Response response = assets\n                .request(MediaType.APPLICATION_JSON_TYPE)\n                .header(HttpHeaders.AUTHORIZATION, bearer())\n                .post(Entity.entity(os.toByteArray(), \"multipart/mixed; boundary=frontier\"));\n\n        if (response.getStatus() >= 400) {\n            throw new HttpException(response.readEntity(String.class), response.getStatus());\n        }\n\n        return response.readEntity(AssetKey.class);\n    }\n\n    private MultiPart getMultiPart(IAsset asset) throws NoSuchAlgorithmException {\n        MetaData metaData = new MetaData();\n        metaData.retention = asset.getRetention();\n        metaData.scope = asset.isPublic();\n\n        BodyPart bodyPart1 = new BodyPart(metaData, MediaType.APPLICATION_JSON_TYPE);\n        BodyPart bodyPart2 = new BodyPart().entity(asset.getEncryptedData());\n\n        MultivaluedMap<String, String> headers = bodyPart2.getHeaders();\n        headers.add(\"Content-Type\", asset.getMimeType());\n        headers.add(\"Content-MD5\", Util.calcMd5(asset.getEncryptedData()));\n\n        return new MultiPart()\n                .bodyPart(bodyPart1)\n                .bodyPart(bodyPart2);\n    }\n\n    @Override\n    public byte[] downloadAsset(String assetId, String assetToken) throws HttpException {\n        Invocation.Builder req = assets\n                .path(assetId)\n                .request()\n                .property(ClientProperties.FOLLOW_REDIRECTS, Boolean.FALSE)\n                .header(HttpHeaders.AUTHORIZATION, bearer());\n\n        if (assetToken != null && !assetToken.isBlank())\n            req.header(\"Asset-Token\", assetToken);\n\n        Response response = req.get();\n\n        if (response.getStatus() >= 400) {\n            throw new HttpException(response.readEntity(String.class), response.getStatus());\n        }\n\n        final String location = response.getHeaderString(HttpHeaders.LOCATION);\n        response.close();\n\n        response = httpClient\n                .target(location)\n                .request()\n                .get();\n\n        if (response.getStatus() >= 400) {\n            throw new HttpException(response.readEntity(String.class), response.getStatus());\n        }\n\n        return response.readEntity(byte[].class);\n    }\n\n    @Override\n    public boolean deleteConversation(UUID teamId) {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public User addService(UUID serviceId, UUID providerId) {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public User addParticipants(UUID... userIds) {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public Conversation createConversation(String name, UUID teamId, List<UUID> users) {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public Conversation createOne2One(UUID teamId, UUID userId) {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public void leaveConversation(UUID user) {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public User getUser(UUID userId) {\n        return getUsers(Collections.singletonList(userId))\n                .stream()\n                .findFirst()\n                .orElse(null);\n    }\n\n    @Override\n    public UUID getUserId(String handle) {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public boolean hasDevice(UUID userId, String clientId) {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public UUID getTeam() {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public Collection<UUID> getTeamMembers(UUID teamId) {\n        throw new NotSupportedException();\n    }\n\n    @Override\n    public void acceptConnection(UUID user) {\n        throw new NotSupportedException();\n    }\n\n    private String bearer() {\n        return String.format(\"Bearer %s\", token);\n    }\n\n    public static class MetaData {\n        @JsonProperty(\"public\")\n        public boolean scope;\n        @JsonProperty\n        public String retention;\n    }\n}\n",
            "error": "",
            "span_id": 303653815599744322
        },
        {
            "input": "src/main/java/com/wire/lithium/server/resources/MessageResource.java",
            "output": "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium.server.resources;\n\nimport com.codahale.metrics.annotation.Metered;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.wire.bots.cryptobox.CryptoException;\nimport com.wire.lithium.ClientRepo;\nimport com.wire.lithium.server.monitoring.MDCUtils;\nimport com.wire.xenon.MessageHandlerBase;\nimport com.wire.xenon.MessageResourceBase;\nimport com.wire.xenon.WireClient;\nimport com.wire.xenon.assets.Reaction;\nimport com.wire.xenon.backend.models.ErrorMessage;\nimport com.wire.xenon.backend.models.Payload;\nimport com.wire.xenon.exceptions.MissingStateException;\nimport com.wire.xenon.tools.Logger;\nimport io.swagger.annotations.*;\n\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\nimport javax.ws.rs.*;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport java.io.IOException;\nimport java.util.UUID;\nimport java.util.logging.Level;\n\n@Api\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\n@Path(\"/bots/{bot}/messages\")\npublic class MessageResource extends MessageResourceBase {\n    private final ObjectMapper objectMapper = new ObjectMapper();\n    private final ClientRepo repo;\n\n    public MessageResource(MessageHandlerBase handler, ClientRepo repo) {\n        super(handler);\n        this.repo = repo;\n    }\n\n    @POST\n    @ApiOperation(value = \"New OTR Message\")\n    @ApiResponses(value = {\n            @ApiResponse(code = 403, message = \"Invalid Authorization\", response = ErrorMessage.class),\n            @ApiResponse(code = 503, message = \"Missing bot's state object\", response = ErrorMessage.class),\n            @ApiResponse(code = 200, message = \"Alles gute\")})\n    @Authorization(\"Bearer\")\n    @Metered\n    public Response newMessage(@ApiParam(\"UUID Bot instance id\") @PathParam(\"bot\") UUID botId,\n                               @ApiParam(\"UUID Unique event id\") @QueryParam(\"id\") UUID eventId,\n                               @ApiParam @Valid @NotNull Payload payload) throws IOException {\n\n        if (eventId == null) {\n            eventId = UUID.randomUUID(); //todo fix this once Wire BE adds eventId into payload\n        }\n\n        if (Logger.getLevel() == Level.FINE) {\n            Logger.debug(\"eventId: %s, botId: %s, %s\",\n                    eventId,\n                    botId,\n                    objectMapper.writeValueAsString(payload));\n        }\n\n        // put tracing information to logs\n        MDCUtils.put(\"botId\", botId);\n        MDCUtils.put(\"eventId\", eventId);\n        MDCUtils.put(\"conversationId\", payload.conversation.id);\n\n        try (WireClient client = getWireClient(botId, payload)) {\n            handleMessage(eventId, payload, client);\n        } catch (CryptoException e) {\n            Logger.exception(\"newMessage: %s %s\", e, botId, e.getMessage());\n            respondWithError(botId, payload);\n            return Response.\n                    status(503).\n                    entity(new ErrorMessage(e.getMessage())).\n                    build();\n        } catch (MissingStateException e) {\n            Logger.exception(\"newMessage: %s %s\", e, botId, e.getMessage());\n            return Response.\n                    status(410).\n                    entity(new ErrorMessage(e.getMessage())).\n                    build();\n        } catch (Exception e) {\n            Logger.exception(\"newMessage: %s %s\", e, botId, e.getMessage());\n            return Response.\n                    status(400).\n                    entity(new ErrorMessage(e.getMessage())).\n                    build();\n        }\n\n        return Response.\n                ok().\n                status(200).\n                build();\n    }\n\n    private void respondWithError(UUID botId, Payload payload) {\n        try (WireClient client = getWireClient(botId, payload)) {\n            client.send(new Reaction(UUID.randomUUID(), \"\"));\n        } catch (Exception e) {\n            Logger.exception(\"respondWithError: bot: %s %s\", e, botId, e.getMessage());\n        }\n    }\n\n    protected WireClient getWireClient(UUID botId, Payload payload) throws IOException, CryptoException {\n        return repo.getClient(botId);\n    }\n}\n",
            "error": "",
            "span_id": 17904144261302079794
        },
        {
            "input": "src/main/java/com/wire/lithium/server/resources/BotsResource.java",
            "output": "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium.server.resources;\n\nimport com.codahale.metrics.annotation.Metered;\nimport com.wire.lithium.models.NewBotResponseModel;\nimport com.wire.lithium.server.monitoring.MDCUtils;\nimport com.wire.xenon.MessageHandlerBase;\nimport com.wire.xenon.backend.models.ErrorMessage;\nimport com.wire.xenon.backend.models.NewBot;\nimport com.wire.xenon.crypto.Crypto;\nimport com.wire.xenon.factories.CryptoFactory;\nimport com.wire.xenon.factories.StorageFactory;\nimport com.wire.xenon.tools.Logger;\nimport io.swagger.annotations.*;\n\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport java.util.UUID;\n\n@Api\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\n@Path(\"/bots\")\npublic class BotsResource {\n    protected final MessageHandlerBase handler;\n\n    protected final StorageFactory storageF;\n    protected final CryptoFactory cryptoF;\n\n    public BotsResource(MessageHandlerBase handler, StorageFactory storageF, CryptoFactory cryptoF) {\n        this.handler = handler;\n        this.storageF = storageF;\n        this.cryptoF = cryptoF;\n    }\n\n    @POST\n    @ApiOperation(value = \"New Bot instance\", response = NewBotResponseModel.class, code = 201)\n    @ApiResponses(value = {\n            @ApiResponse(code = 401, message = \"Unauthorized\", response = ErrorMessage.class),\n            @ApiResponse(code = 409, message = \"Bot not accepted (whitelist?)\", response = ErrorMessage.class),\n            @ApiResponse(code = 201, message = \"Alles gute\")})\n    @Authorization(\"Bearer\")\n    @Metered\n    public Response newBot(@Context ContainerRequestContext context,\n                           @ApiParam @Valid @NotNull NewBot newBot) {\n\n        NewBotResponseModel ret = new NewBotResponseModel();\n\n        try {\n            UUID botId = newBot.id;\n            // put information to every log for more information\n            MDCUtils.put(\"botId\", botId);\n            MDCUtils.put(\"conversationId\", newBot.conversation.id);\n            MDCUtils.put(\"userId\", newBot.origin.id);\n\n            String token = (String) context.getProperty(\"wire-auth\");\n            if (!onNewBot(newBot, token)) {\n                return Response\n                        .status(409)\n                        .entity(new ErrorMessage(\"User not whitelisted or service does not accept new instances atm\"))\n                        .build();\n            }\n\n            boolean saveState = storageF.create(botId).saveState(newBot);\n            if (!saveState) {\n                Logger.warning(\"Failed to save the state. Bot: %s\", botId);\n            }\n\n            ret.name = handler.getName(newBot);\n            ret.accentId = handler.getAccentColour();\n            String profilePreview = handler.getSmallProfilePicture();\n            if (profilePreview != null) {\n                ret.addAsset(profilePreview, \"preview\");\n            }\n\n            String profileBig = handler.getBigProfilePicture();\n            if (profileBig != null) {\n                ret.addAsset(profileBig, \"complete\");\n            }\n\n            try (Crypto crypto = cryptoF.create(botId)) {\n                ret.lastPreKey = crypto.newLastPreKey();\n                ret.preKeys = crypto.newPreKeys(0, 50);\n            }\n\n        } catch (Exception e) {\n            Logger.exception(\"newBot: %s\", e, e.getMessage());\n            return Response.\n                    status(500).\n                    entity(new ErrorMessage(e.getMessage())).\n                    build();\n        }\n\n        return Response.\n                ok(ret).\n                status(201).\n                build();\n    }\n\n    protected boolean onNewBot(NewBot newBot, String auth) {\n        return handler.onNewBot(newBot, auth);\n    }\n}\n",
            "error": "",
            "span_id": 1081579906179142441
        },
        {
            "input": "src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java",
            "output": "package com.wire.lithium.server.filters;\n\nimport com.wire.xenon.Const;\nimport com.wire.xenon.tools.Logger;\nimport com.wire.xenon.tools.Util;\n\nimport javax.ws.rs.WebApplicationException;\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerRequestFilter;\nimport javax.ws.rs.core.HttpHeaders;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.ext.Provider;\n\n@Provider\npublic class AuthenticationFilter implements ContainerRequestFilter {\n    @Override\n    public void filter(ContainerRequestContext requestContext) {\n        String auth = requestContext.getHeaderString(HttpHeaders.AUTHORIZATION);\n        if (auth == null) {\n            Exception cause = new IllegalArgumentException(\"Missing Authorization\");\n            throw new WebApplicationException(cause, Response.Status.UNAUTHORIZED);\n        }\n\n        String serviceToken = System.getProperty(Const.WIRE_BOTS_SDK_TOKEN, System.getenv(\"SERVICE_TOKEN\"));\n\n        if (!Util.compareAuthorizations(auth, serviceToken)) {\n            Logger.warning(\"Wrong service token\");\n            Exception cause = new IllegalArgumentException(\"Wrong service token\");\n            throw new WebApplicationException(cause, Response.Status.UNAUTHORIZED);\n        }\n\n        requestContext.setProperty(\"wire-auth\", Util.extractToken(auth));\n    }\n}",
            "error": "",
            "span_id": 4016439193912763423
        },
        {
            "input": "src/main/java/com/wire/lithium/server/monitoring/StatusResource.java",
            "output": "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium.server.monitoring;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\n@Api\n@Path(\"/status\")\n@Produces(MediaType.TEXT_PLAIN)\npublic class StatusResource {\n    @GET\n    @ApiOperation(value = \"Status\")\n    public Response statusEmpty() {\n        return Response\n                .ok()\n                .build();\n    }\n}\n",
            "error": "",
            "span_id": 9909630741866697859
        },
        {
            "input": "src/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java",
            "output": "package com.wire.lithium.server.monitoring;\n\nimport ch.qos.logback.access.spi.IAccessEvent;\nimport ch.qos.logback.core.filter.Filter;\nimport ch.qos.logback.core.spi.FilterReply;\nimport com.fasterxml.jackson.annotation.JsonTypeName;\nimport io.dropwizard.logging.filter.FilterFactory;\n\n\n@JsonTypeName(\"status-filter-factory\")\npublic class StatusCheckFilter implements FilterFactory<IAccessEvent> {\n    @Override\n    public Filter<IAccessEvent> build() {\n        return new Filter<>() {\n            @Override\n            public FilterReply decide(IAccessEvent event) {\n                if (event.getRequestURI().contains(\"/status\")) {\n                    return FilterReply.DENY;\n                }\n                if (event.getRequestURI().contains(\"/swagger\")) {\n                    return FilterReply.DENY;\n                }\n                if (event.getRequestURI().contains(\"/metrics\")) {\n                    return FilterReply.DENY;\n                }\n                return FilterReply.NEUTRAL;\n            }\n        };\n    }\n}\n\n",
            "error": "",
            "span_id": 4888091162611159274
        },
        {
            "input": "src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java",
            "output": "package com.wire.lithium.server.monitoring;\n\nimport ch.qos.logback.access.spi.IAccessEvent;\nimport ch.qos.logback.classic.LoggerContext;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.core.ConsoleAppender;\nimport ch.qos.logback.core.Layout;\nimport ch.qos.logback.core.filter.Filter;\nimport ch.qos.logback.core.spi.DeferredProcessingAware;\nimport com.fasterxml.jackson.annotation.JsonTypeName;\nimport io.dropwizard.logging.AbstractAppenderFactory;\nimport io.dropwizard.logging.async.AsyncAppenderFactory;\nimport io.dropwizard.logging.filter.LevelFilterFactory;\nimport io.dropwizard.logging.layout.LayoutFactory;\nimport io.dropwizard.request.logging.layout.LogbackAccessRequestLayoutFactory;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * Production console appender using logging to JSON.\n */\n@JsonTypeName(\"json-console\")\npublic class WireAppenderFactory<T extends DeferredProcessingAware> extends AbstractAppenderFactory<T> {\n\n    @Override\n    public Appender<T> build(\n            LoggerContext loggerContext,\n            String serviceName,\n            LayoutFactory<T> layoutFactory,\n            LevelFilterFactory<T> levelFilterFactory,\n            AsyncAppenderFactory<T> asyncAppenderFactory) {\n\n        final ConsoleAppender<T> appender = new ConsoleAppender<>();\n        appender.setContext(loggerContext);\n        appender.setTarget(\"System.out\");\n\n        final Filter<T> levelFilter = levelFilterFactory.build(threshold);\n        Layout<T> layout;\n        // this is quite ugly hack to achieve just a single name for the logger\n        if (layoutFactory instanceof LogbackAccessRequestLayoutFactory) {\n            layout = prepareAccessEventLayout(levelFilter);\n        } else {\n            layout = prepareLoggingEventLayout(levelFilter);\n        }\n\n        appender.setLayout(layout);\n        appender.start();\n\n        return appender;\n    }\n\n    // we know that T is either ILoggingEvent or IAccessEvent\n    // so this is in a fact checked cast\n    // moreover thanks to the generics erasure during runtime, its safe anyway\n    @SuppressWarnings(\"unchecked\")\n    private Layout<T> prepareAccessEventLayout(Filter<T> levelFilter) {\n        List<Filter<IAccessEvent>> ac = getFilterFactories().stream()\n                .map(filter -> (Filter<IAccessEvent>) filter.build())\n                .collect(Collectors.toList());\n        ac.add((Filter<IAccessEvent>) levelFilter);\n        return (Layout<T>) new AccessEventJsonLayout(ac);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private Layout<T> prepareLoggingEventLayout(Filter<T> levelFilter) {\n        List<Filter<ILoggingEvent>> ac = getFilterFactories().stream()\n                .map(filter -> (Filter<ILoggingEvent>) filter.build())\n                .collect(Collectors.toList());\n        ac.add((Filter<ILoggingEvent>) levelFilter);\n        return (Layout<T>) new LoggingEventJsonLayout(ac);\n    }\n\n}\n",
            "error": "",
            "span_id": 18371120540328438331
        },
        {
            "input": "src/main/java/com/wire/lithium/Server.java",
            "output": "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium;\n\nimport com.codahale.metrics.Gauge;\nimport com.codahale.metrics.health.HealthCheck;\nimport com.codahale.metrics.jmx.JmxReporter;\nimport com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\nimport com.wire.lithium.healthchecks.Alice2Bob;\nimport com.wire.lithium.healthchecks.CryptoHealthCheck;\nimport com.wire.lithium.healthchecks.Outbound;\nimport com.wire.lithium.healthchecks.StorageHealthCheck;\nimport com.wire.lithium.server.filters.AuthenticationFeature;\nimport com.wire.lithium.server.monitoring.RequestMdcFactoryFilter;\nimport com.wire.lithium.server.monitoring.StatusResource;\nimport com.wire.lithium.server.monitoring.VersionResource;\nimport com.wire.lithium.server.resources.BotsResource;\nimport com.wire.lithium.server.resources.MessageResource;\nimport com.wire.lithium.server.tasks.AvailablePrekeysTask;\nimport com.wire.lithium.server.tasks.ConversationTask;\nimport com.wire.xenon.Const;\nimport com.wire.xenon.MessageHandlerBase;\nimport com.wire.xenon.crypto.CryptoDatabase;\nimport com.wire.xenon.crypto.CryptoFile;\nimport com.wire.xenon.crypto.storage.JdbiStorage;\nimport com.wire.xenon.factories.CryptoFactory;\nimport com.wire.xenon.factories.StorageFactory;\nimport com.wire.xenon.state.FileState;\nimport com.wire.xenon.state.JdbiState;\nimport com.wire.xenon.tools.Logger;\nimport io.dropwizard.Application;\nimport io.dropwizard.client.JerseyClientBuilder;\nimport io.dropwizard.configuration.EnvironmentVariableSubstitutor;\nimport io.dropwizard.configuration.SubstitutingSourceProvider;\nimport io.dropwizard.servlets.tasks.Task;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\nimport io.federecio.dropwizard.swagger.SwaggerBundle;\nimport io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;\nimport org.flywaydb.core.Flyway;\nimport org.glassfish.jersey.media.multipart.MultiPartFeature;\nimport org.jdbi.v3.core.Jdbi;\nimport org.jdbi.v3.sqlobject.SqlObjectPlugin;\n\nimport javax.annotation.Nullable;\nimport javax.ws.rs.client.Client;\nimport java.util.SortedMap;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Entry point for your Application\n *\n * @param <Config> Dropwizard configuration\n */\npublic abstract class Server<Config extends Configuration> extends Application<Config> {\n    protected ClientRepo repo;\n    protected Config config;\n    protected Environment environment;\n    protected Client client;\n    protected MessageHandlerBase messageHandler;\n    protected Jdbi jdbi;\n\n    /**\n     * This method is called once by the sdk in order to create the main message handler\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @return Instance of your class that implements {@link MessageHandlerBase}\n     * @throws Exception allowed to throw exception\n     */\n    protected abstract MessageHandlerBase createHandler(Config config, Environment env) throws Exception;\n\n    /**\n     * Override this method to put your custom initialization\n     * NOTE: MessageHandler is not yet set when this method is invoked!\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @throws Exception allowed to throw exception\n     */\n    @SuppressWarnings(\"RedundantThrows\") // this method can be overridden\n    protected void initialize(Config config, Environment env) throws Exception {\n\n    }\n\n    /**\n     * Override this method in case you need to add custom Resource and/or Task\n     * {@link #addResource(Object)}\n     * and {@link #addTask(io.dropwizard.servlets.tasks.Task)}\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @throws Exception allowed to throw exception\n     */\n    @SuppressWarnings(\"RedundantThrows\") // this method can be overridden\n    protected void onRun(Config config, Environment env) throws Exception {\n\n    }\n\n    @Override\n    public void initialize(Bootstrap<Config> bootstrap) {\n        bootstrap.setConfigurationSourceProvider(new SubstitutingSourceProvider(\n                bootstrap.getConfigurationSourceProvider(), new EnvironmentVariableSubstitutor(false)));\n        bootstrap.addBundle(new SwaggerBundle<>() {\n            @Override\n            protected SwaggerBundleConfiguration getSwaggerBundleConfiguration(Config configuration) {\n                return configuration.swagger;\n            }\n        });\n    }\n\n    @Override\n    public void run(final Config config, Environment env) throws Exception {\n        this.config = config;\n        this.environment = env;\n\n        System.setProperty(Const.WIRE_BOTS_SDK_TOKEN, config.token);\n        System.setProperty(Const.WIRE_BOTS_SDK_API, config.apiHost);\n\n        setupDatabase(config.database);\n\n        jdbi = buildJdbi(config.database, env);\n\n        client = createHttpClient(config, env);\n\n        repo = createClientRepo();\n\n        initialize(config, env);\n\n        messageHandler = createHandler(config, env);\n\n        addResources();\n\n        initTelemetry();\n\n        if (config.healthchecks) {\n            runHealthChecks();\n        }\n\n        onRun(config, env);\n    }\n\n    private Client createHttpClient(Config config, Environment env) {\n        return new JerseyClientBuilder(env)\n                .using(config.getJerseyClient())\n                .withProvider(MultiPartFeature.class)\n                .withProvider(JacksonJsonProvider.class)\n                .build(getName());\n    }\n\n    protected ClientRepo createClientRepo() {\n        StorageFactory storageFactory = getStorageFactory();\n        CryptoFactory cryptoFactory = getCryptoFactory();\n        return new ClientRepo(getClient(), cryptoFactory, storageFactory);\n    }\n\n    @Nullable\n    protected Jdbi buildJdbi(Configuration.Database database, Environment env) {\n        if (database.getDriverClass().equalsIgnoreCase(\"fs\"))\n            return null;\n\n        return Jdbi\n                .create(database.build(env.metrics(), getName()))\n                .installPlugin(new SqlObjectPlugin());\n    }\n\n    protected void setupDatabase(Configuration.Database database) {\n        if (!database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            Flyway flyway = Flyway\n                    .configure()\n                    .dataSource(database.getUrl(), database.getUser(), database.getPassword())\n                    .baselineOnMigrate(database.baseline)\n                    .load();\n            flyway.migrate();\n        }\n    }\n\n    public StorageFactory getStorageFactory() {\n        if (config.database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            return botId -> new FileState(config.database.getUrl(), botId);\n        }\n\n        return botId -> new JdbiState(botId, getJdbi());\n    }\n\n    public CryptoFactory getCryptoFactory() {\n        if (config.database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            return (botId) -> new CryptoFile(config.database.getUrl(), botId);\n        }\n\n        return (botId) -> new CryptoDatabase(botId, new JdbiStorage(getJdbi()));\n    }\n\n    private void addResources() {\n        /* --- Wire Common --- */\n        addResource(new VersionResource()); // add version endpoint\n        addResource(new StatusResource()); // empty status for k8s\n        addResource(new RequestMdcFactoryFilter()); // MDC data\n        /* //- Wire Common --- */\n\n        botResource();\n        messageResource();\n\n        addTask(new ConversationTask(getRepo()));\n        addTask(new AvailablePrekeysTask(getRepo()));\n    }\n\n    protected void messageResource() {\n        addResource(new MessageResource(messageHandler, getRepo()));\n    }\n\n    protected void botResource() {\n        StorageFactory storageFactory = getStorageFactory();\n        CryptoFactory cryptoFactory = getCryptoFactory();\n\n        addResource(new BotsResource(messageHandler, storageFactory, cryptoFactory));\n    }\n\n    protected void addTask(Task task) {\n        environment.admin().addTask(task);\n    }\n\n    protected void addResource(Object component) {\n        environment.jersey().register(component);\n    }\n\n    private void initTelemetry() {\n        /* --- Wire Common --- */\n        environment.jersey().register(new RequestMdcFactoryFilter());\n        /* //- Wire Common --- */\n\n        final CryptoFactory cryptoFactory = getCryptoFactory();\n        final StorageFactory storageFactory = getStorageFactory();\n\n        registerFeatures();\n\n        environment.healthChecks().register(\"Storage\", new StorageHealthCheck(storageFactory));\n        environment.healthChecks().register(\"Crypto\", new CryptoHealthCheck(cryptoFactory));\n        environment.healthChecks().register(\"Alice2Bob\", new Alice2Bob(cryptoFactory));\n        environment.healthChecks().register(\"Outbound\", new Outbound(getClient()));\n\n        environment.metrics().register(\"logger.errors\", (Gauge<Integer>) Logger::getErrorCount);\n        environment.metrics().register(\"logger.warnings\", (Gauge<Integer>) Logger::getWarningCount);\n\n        JmxReporter jmxReporter = JmxReporter.forRegistry(environment.metrics())\n                .convertRatesTo(TimeUnit.SECONDS)\n                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                .build();\n        jmxReporter.start();\n    }\n\n    private void runHealthChecks() {\n        Logger.info(\"Running health checks...\");\n        final SortedMap<String, HealthCheck.Result> results = environment.healthChecks().runHealthChecks();\n        for (String name : results.keySet()) {\n            final HealthCheck.Result result = results.get(name);\n            if (!result.isHealthy()) {\n                Logger.error(\"%s failed with: %s\", name, result.getMessage());\n                throw new RuntimeException(result.getError());\n            }\n        }\n    }\n\n    protected void registerFeatures() {\n        this.environment.jersey().register(AuthenticationFeature.class);\n    }\n\n    public ClientRepo getRepo() {\n        return repo;\n    }\n\n    public Config getConfig() {\n        return config;\n    }\n\n    public Environment getEnvironment() {\n        return environment;\n    }\n\n    public Client getClient() {\n        return client;\n    }\n\n    public Jdbi getJdbi() {\n        return jdbi;\n    }\n}\n",
            "error": "",
            "span_id": 12283665406750420978
        },
        {
            "input": "src/main/java/com/wire/lithium/Configuration.java",
            "output": "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.dropwizard.client.JerseyClientConfiguration;\nimport io.dropwizard.db.DataSourceFactory;\nimport io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;\n\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\n/**\n * Application configuration class. Extend this class to add your custom configuration\n */\npublic class Configuration extends io.dropwizard.Configuration {\n    @JsonProperty\n    @Valid\n    public Database database = new Database();\n\n    @JsonProperty\n    @NotNull\n    public String token;   // Service token. Obtained when the Service is registered with Wire\n\n    @JsonProperty\n    public boolean healthchecks = true;\n\n    @Valid\n    private _JerseyClientConfiguration jerseyClient = new _JerseyClientConfiguration();\n\n    @JsonProperty(\"swagger\")\n    public SwaggerBundleConfiguration swagger = new _SwaggerBundleConfiguration();\n\n    @JsonProperty\n    public String apiHost = \"https://prod-nginz-https.wire.com\";\n\n    @JsonProperty(\"jerseyClient\")\n    public JerseyClientConfiguration getJerseyClient() {\n        return jerseyClient;\n    }\n\n    @JsonProperty(\"jerseyClient\")\n    public void setJerseyClient(_JerseyClientConfiguration jerseyClient) {\n        this.jerseyClient = jerseyClient;\n    }\n\n    public static class Database extends DataSourceFactory {\n        @JsonProperty\n        public boolean baseline;\n    }\n\n    public static class _JerseyClientConfiguration extends JerseyClientConfiguration {\n        public _JerseyClientConfiguration() {\n            setChunkedEncodingEnabled(false);\n            setGzipEnabled(false);\n            setGzipEnabledForRequests(false);\n        }\n    }\n\n    private static class _SwaggerBundleConfiguration extends SwaggerBundleConfiguration {\n        _SwaggerBundleConfiguration() {\n            setResourcePackage(\"com.wire.lithium.server.resources\");\n        }\n    }\n}\n",
            "error": "",
            "span_id": 11457118502462979131
        },
        {
            "input": "src/main/java/com/wire/lithium/Server.java",
            "output": "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\npackage com.wire.lithium;\n\nimport com.codahale.metrics.Gauge;\nimport com.codahale.metrics.health.HealthCheck;\nimport com.codahale.metrics.jmx.JmxReporter;\nimport com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\nimport com.wire.lithium.healthchecks.Alice2Bob;\nimport com.wire.lithium.healthchecks.CryptoHealthCheck;\nimport com.wire.lithium.healthchecks.Outbound;\nimport com.wire.lithium.healthchecks.StorageHealthCheck;\nimport com.wire.lithium.server.filters.AuthenticationFeature;\nimport com.wire.lithium.server.monitoring.RequestMdcFactoryFilter;\nimport com.wire.lithium.server.monitoring.StatusResource;\nimport com.wire.lithium.server.monitoring.VersionResource;\nimport com.wire.lithium.server.resources.BotsResource;\nimport com.wire.lithium.server.resources.MessageResource;\nimport com.wire.lithium.server.tasks.AvailablePrekeysTask;\nimport com.wire.lithium.server.tasks.ConversationTask;\nimport com.wire.xenon.Const;\nimport com.wire.xenon.MessageHandlerBase;\nimport com.wire.xenon.crypto.CryptoDatabase;\nimport com.wire.xenon.crypto.CryptoFile;\nimport com.wire.xenon.crypto.storage.JdbiStorage;\nimport com.wire.xenon.factories.CryptoFactory;\nimport com.wire.xenon.factories.StorageFactory;\nimport com.wire.xenon.state.FileState;\nimport com.wire.xenon.state.JdbiState;\nimport com.wire.xenon.tools.Logger;\nimport io.dropwizard.Application;\nimport io.dropwizard.client.JerseyClientBuilder;\nimport io.dropwizard.configuration.EnvironmentVariableSubstitutor;\nimport io.dropwizard.configuration.SubstitutingSourceProvider;\nimport io.dropwizard.servlets.tasks.Task;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\nimport io.federecio.dropwizard.swagger.SwaggerBundle;\nimport io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;\nimport org.flywaydb.core.Flyway;\nimport org.glassfish.jersey.media.multipart.MultiPartFeature;\nimport org.jdbi.v3.core.Jdbi;\nimport org.jdbi.v3.sqlobject.SqlObjectPlugin;\n\nimport javax.annotation.Nullable;\nimport javax.ws.rs.client.Client;\nimport java.util.SortedMap;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Entry point for your Application\n *\n * @param <Config> Dropwizard configuration\n */\npublic abstract class Server<Config extends Configuration> extends Application<Config> {\n    protected ClientRepo repo;\n    protected Config config;\n    protected Environment environment;\n    protected Client client;\n    protected MessageHandlerBase messageHandler;\n    protected Jdbi jdbi;\n\n    /**\n     * This method is called once by the sdk in order to create the main message handler\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @return Instance of your class that implements {@link MessageHandlerBase}\n     * @throws Exception allowed to throw exception\n     */\n    protected abstract MessageHandlerBase createHandler(Config config, Environment env) throws Exception;\n\n    /**\n     * Override this method to put your custom initialization\n     * NOTE: MessageHandler is not yet set when this method is invoked!\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @throws Exception allowed to throw exception\n     */\n    @SuppressWarnings(\"RedundantThrows\") // this method can be overridden\n    protected void initialize(Config config, Environment env) throws Exception {\n\n    }\n\n    /**\n     * Override this method in case you need to add custom Resource and/or Task\n     * {@link #addResource(Object)}\n     * and {@link #addTask(io.dropwizard.servlets.tasks.Task)}\n     *\n     * @param config Configuration object (yaml)\n     * @param env    Environment object\n     * @throws Exception allowed to throw exception\n     */\n    @SuppressWarnings(\"RedundantThrows\") // this method can be overridden\n    protected void onRun(Config config, Environment env) throws Exception {\n\n    }\n\n    @Override\n    public void initialize(Bootstrap<Config> bootstrap) {\n        bootstrap.setConfigurationSourceProvider(new SubstitutingSourceProvider(\n                bootstrap.getConfigurationSourceProvider(), new EnvironmentVariableSubstitutor(false)));\n        bootstrap.addBundle(new SwaggerBundle<>() {\n            @Override\n            protected SwaggerBundleConfiguration getSwaggerBundleConfiguration(Config configuration) {\n                return configuration.swagger;\n            }\n        });\n    }\n\n    @Override\n    public void run(final Config config, Environment env) throws Exception {\n        this.config = config;\n        this.environment = env;\n\n        System.setProperty(Const.WIRE_BOTS_SDK_TOKEN, config.token);\n        System.setProperty(Const.WIRE_BOTS_SDK_API, config.apiHost);\n\n        setupDatabase(config.database);\n\n        jdbi = buildJdbi(config.database, env);\n\n        client = createHttpClient(config, env);\n\n        repo = createClientRepo();\n\n        initialize(config, env);\n\n        messageHandler = createHandler(config, env);\n\n        addResources();\n\n        initTelemetry();\n\n        if (config.healthchecks) {\n            runHealthChecks();\n        }\n\n        onRun(config, env);\n    }\n\n    private Client createHttpClient(Config config, Environment env) {\n        return new JerseyClientBuilder(env)\n                .using(config.getJerseyClient())\n                .withProvider(MultiPartFeature.class)\n                .withProvider(JacksonJsonProvider.class)\n                .build(getName());\n    }\n\n    protected ClientRepo createClientRepo() {\n        StorageFactory storageFactory = getStorageFactory();\n        CryptoFactory cryptoFactory = getCryptoFactory();\n        return new ClientRepo(getClient(), cryptoFactory, storageFactory);\n    }\n\n    @Nullable\n    protected Jdbi buildJdbi(Configuration.Database database, Environment env) {\n        if (database.getDriverClass().equalsIgnoreCase(\"fs\"))\n            return null;\n\n        return Jdbi\n                .create(database.build(env.metrics(), getName()))\n                .installPlugin(new SqlObjectPlugin());\n    }\n\n    protected void setupDatabase(Configuration.Database database) {\n        if (!database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            Flyway flyway = Flyway\n                    .configure()\n                    .dataSource(database.getUrl(), database.getUser(), database.getPassword())\n                    .baselineOnMigrate(database.baseline)\n                    .load();\n            flyway.migrate();\n        }\n    }\n\n    public StorageFactory getStorageFactory() {\n        if (config.database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            return botId -> new FileState(config.database.getUrl(), botId);\n        }\n\n        return botId -> new JdbiState(botId, getJdbi());\n    }\n\n    public CryptoFactory getCryptoFactory() {\n        if (config.database.getDriverClass().equalsIgnoreCase(\"fs\")) {\n            return (botId) -> new CryptoFile(config.database.getUrl(), botId);\n        }\n\n        return (botId) -> new CryptoDatabase(botId, new JdbiStorage(getJdbi()));\n    }\n\n    private void addResources() {\n        /* --- Wire Common --- */\n        addResource(new VersionResource()); // add version endpoint\n        addResource(new StatusResource()); // empty status for k8s\n        addResource(new RequestMdcFactoryFilter()); // MDC data\n        /* //- Wire Common --- */\n\n        botResource();\n        messageResource();\n\n        addTask(new ConversationTask(getRepo()));\n        addTask(new AvailablePrekeysTask(getRepo()));\n    }\n\n    protected void messageResource() {\n        addResource(new MessageResource(messageHandler, getRepo()));\n    }\n\n    protected void botResource() {\n        StorageFactory storageFactory = getStorageFactory();\n        CryptoFactory cryptoFactory = getCryptoFactory();\n\n        addResource(new BotsResource(messageHandler, storageFactory, cryptoFactory));\n    }\n\n    protected void addTask(Task task) {\n        environment.admin().addTask(task);\n    }\n\n    protected void addResource(Object component) {\n        environment.jersey().register(component);\n    }\n\n    private void initTelemetry() {\n        /* --- Wire Common --- */\n        environment.jersey().register(new RequestMdcFactoryFilter());\n        /* //- Wire Common --- */\n\n        final CryptoFactory cryptoFactory = getCryptoFactory();\n        final StorageFactory storageFactory = getStorageFactory();\n\n        registerFeatures();\n\n        environment.healthChecks().register(\"Storage\", new StorageHealthCheck(storageFactory));\n        environment.healthChecks().register(\"Crypto\", new CryptoHealthCheck(cryptoFactory));\n        environment.healthChecks().register(\"Alice2Bob\", new Alice2Bob(cryptoFactory));\n        environment.healthChecks().register(\"Outbound\", new Outbound(getClient()));\n\n        environment.metrics().register(\"logger.errors\", (Gauge<Integer>) Logger::getErrorCount);\n        environment.metrics().register(\"logger.warnings\", (Gauge<Integer>) Logger::getWarningCount);\n\n        JmxReporter jmxReporter = JmxReporter.forRegistry(environment.metrics())\n                .convertRatesTo(TimeUnit.SECONDS)\n                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                .build();\n        jmxReporter.start();\n    }\n\n    private void runHealthChecks() {\n        Logger.info(\"Running health checks...\");\n        final SortedMap<String, HealthCheck.Result> results = environment.healthChecks().runHealthChecks();\n        for (String name : results.keySet()) {\n            final HealthCheck.Result result = results.get(name);\n            if (!result.isHealthy()) {\n                Logger.error(\"%s failed with: %s\", name, result.getMessage());\n                throw new RuntimeException(result.getError());\n            }\n        }\n    }\n\n    protected void registerFeatures() {\n        this.environment.jersey().register(AuthenticationFeature.class);\n    }\n\n    public ClientRepo getRepo() {\n        return repo;\n    }\n\n    public Config getConfig() {\n        return config;\n    }\n\n    public Environment getEnvironment() {\n        return environment;\n    }\n\n    public Client getClient() {\n        return client;\n    }\n\n    public Jdbi getJdbi() {\n        return jdbi;\n    }\n}\n",
            "error": "",
            "span_id": 2867600342949691595
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}