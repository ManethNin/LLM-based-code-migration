{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java\n+++ src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java\n@@ -1,6 +1,7 @@\n package io.simplelocalize.cli.client;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.jayway.jsonpath.JsonPath;\n import com.jayway.jsonpath.Option;\n import io.simplelocalize.cli.client.dto.DownloadRequest;\n@@ -88,7 +89,7 @@\n     String body = httpResponse.body();\n-    ExportResponse exportResponse = objectMapper.readValue(body, ExportResponse.class);\n+    ExportResponse exportResponse = readValue(body, ExportResponse.class);\n     return exportResponse.getFiles();\n   }\n \n@@ -104,6 +105,12 @@\n   private String safeCastHttpBodyToString(Object responseBody)\n   {\n     if (responseBody instanceof byte[])\n     {\n       return new String((byte[]) responseBody);\n     } else if (responseBody instanceof String)\n     {\n       return (String) responseBody;\n     }\n     return \"\";\n   }\n+\n+  private <T> T readValue(String content, Class<T> valueType) throws JsonProcessingException {\n+    return objectMapper.readValue(content, valueType);\n+  }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot access com.fasterxml.jackson.core.exc.StreamReadException\n",
                "updated_files": {
                    "src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java": "package io.simplelocalize.cli.client;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.Option;\nimport io.simplelocalize.cli.client.dto.DownloadRequest;\nimport io.simplelocalize.cli.client.dto.DownloadableFile;\nimport io.simplelocalize.cli.client.dto.ExportResponse;\nimport io.simplelocalize.cli.client.dto.UploadRequest;\nimport io.simplelocalize.cli.exception.ApiRequestException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.time.Duration;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\nimport static io.simplelocalize.cli.TemplateKeys.LANGUAGE_TEMPLATE_KEY;\nimport static io.simplelocalize.cli.TemplateKeys.NAMESPACE_TEMPLATE_KEY;\n\npublic class SimpleLocalizeClient\n{\n\n  private static final String ERROR_MESSAGE_PATH = \"$.msg\";\n  private final HttpClient httpClient;\n  private final SimpleLocalizeHttpRequestFactory httpRequestFactory;\n  private final SimpleLocalizeUriFactory uriFactory;\n\n  private final Logger log = LoggerFactory.getLogger(SimpleLocalizeClient.class);\n  private final ObjectMapper objectMapper;\n\n  public SimpleLocalizeClient(String baseUrl, String apiKey)\n  {\n\n    Objects.requireNonNull(baseUrl);\n    Objects.requireNonNull(apiKey);\n    this.uriFactory = new SimpleLocalizeUriFactory(baseUrl);\n    this.httpRequestFactory = new SimpleLocalizeHttpRequestFactory(apiKey);\n    this.objectMapper = new ObjectMapper();\n    this.httpClient = HttpClient.newBuilder()\n            .connectTimeout(Duration.ofMinutes(5))\n            .build();\n  }\n\n  public static SimpleLocalizeClient create(String baseUrl, String apiKey)\n  {\n    return new SimpleLocalizeClient(baseUrl, apiKey);\n  }\n\n  public void uploadKeys(Collection<String> keys) throws IOException, InterruptedException\n  {\n    URI uri = uriFactory.buildSendKeysURI();\n    HttpRequest httpRequest = httpRequestFactory.createSendKeysRequest(uri, keys);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    int keysProcessed = JsonPath.read(httpResponse.body(), \"$.data.uniqueKeysProcessed\");\n    log.info(\"Successfully uploaded {} keys\", keysProcessed);\n  }\n\n  public void uploadFile(UploadRequest uploadRequest) throws IOException, InterruptedException\n  {\n    Path uploadPath = uploadRequest.getPath();\n    log.info(\"Uploading {}\", uploadPath);\n    URI uri = uriFactory.buildUploadUri(uploadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createUploadFileRequest(uri, uploadRequest);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n  }\n\n  public List<DownloadableFile> fetchDownloadableFiles(DownloadRequest downloadRequest) throws IOException, InterruptedException\n  {\n    log.info(\"Preparing files to download\");\n    URI downloadUri = uriFactory.buildDownloadUri(downloadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(downloadUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String body = httpResponse.body();\n    ExportResponse exportResponse = readValue(body, ExportResponse.class);\n    return exportResponse.getFiles();\n  }\n\n  public void downloadFile(DownloadableFile downloadableFile, String downloadPathTemplate)\n  {\n    Optional<DownloadableFile> optionalDownloadableFile = Optional.of(downloadableFile);\n    String downloadPath = downloadPathTemplate\n            .replace(NAMESPACE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getNamespace).orElse(\"\"))\n            .replace(LANGUAGE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getLanguage).orElse(\"\"));\n    String url = downloadableFile.getUrl();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(URI.create(url)).build();\n    Path savePath = Path.of(downloadPath);\n    try\n    {\n      Path parentDirectory = savePath.getParent();\n      if (parentDirectory != null)\n      {\n        Files.createDirectories(parentDirectory);\n      }\n      log.info(\"Downloading {}\", savePath);\n      httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofFile(savePath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING));\n    } catch (IOException e)\n    {\n      log.error(\"Download failed: {}\", savePath, e);\n    } catch (InterruptedException e)\n    {\n      log.error(\"Download interrupted: {}\", savePath, e);\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  public int validateGate() throws IOException, InterruptedException\n  {\n    URI validateUri = uriFactory.buildValidateGateUri();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(validateUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String json = httpResponse.body();\n    Boolean passed = JsonPath.read(json, \"$.data.passed\");\n    String message = JsonPath.read(json, \"$.data.message\");\n    int status = JsonPath.read(json, \"$.data.status\");\n    log.info(\"Gate result: {} (status: {}, message: {})\", passed, status, message);\n    return status;\n  }\n\n  private void throwOnError(HttpResponse<?> httpResponse)\n  {\n    if (httpResponse.statusCode() != 200)\n    {\n      com.jayway.jsonpath.Configuration parseContext = com.jayway.jsonpath.Configuration\n              .defaultConfiguration()\n              .addOptions(Option.SUPPRESS_EXCEPTIONS);\n\n      Object responseBody = httpResponse.body();\n      String stringBody = safeCastHttpBodyToString(responseBody);\n      String message = JsonPath.using(parseContext).parse(stringBody).read(ERROR_MESSAGE_PATH);\n      if (message == null)\n      {\n        message = \"Unknown error, HTTP Status: \" + httpResponse.statusCode();\n      }\n      log.error(\"Request failed: {}\", message);\n      throw new ApiRequestException(message, httpResponse);\n    }\n  }\n\n  private String safeCastHttpBodyToString(Object responseBody)\n  {\n    if (responseBody instanceof byte[])\n    {\n      return new String((byte[]) responseBody);\n    } else if (responseBody instanceof String)\n    {\n      return (String) responseBody;\n    }\n    return \"\";\n  }\n\n  private <T> T readValue(String content, Class<T> valueType) throws JsonProcessingException {\n    return objectMapper.readValue(content, valueType);\n  }\n\n\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java": {
                        "168": {
                            "lines": [
                                {
                                    "line_no": 167,
                                    "content": "  private <T> T readValue(String content, Class<T> valueType) throws JsonProcessingException {"
                                },
                                {
                                    "line_no": 168,
                                    "content": "    return objectMapper.readValue(content, valueType);"
                                },
                                {
                                    "line_no": 169,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[168,24] cannot access com.fasterxml.jackson.core.exc.StreamReadException\n",
                                "[168,24] cannot access com.fasterxml.jackson.core.exc.StreamReadException\nclass file for com.fasterxml.jackson.core.exc.StreamReadException not found\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot access com.fasterxml.jackson.core.exc.StreamReadException\n",
            "span_id": 14513495150058050239
        },
        {
            "input": "```diff\n--- src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java\n+++ src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java\n@@ -1,6 +1,7 @@\n package io.simplelocalize.cli.client;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.jayway.jsonpath.JsonPath;\n import com.jayway.jsonpath.Option;\n import io.simplelocalize.cli.client.dto.DownloadRequest;\n@@ -88,7 +89,7 @@\n     String body = httpResponse.body();\n-    ExportResponse exportResponse = objectMapper.readValue(body, ExportResponse.class);\n+    ExportResponse exportResponse = readValue(body, ExportResponse.class);\n     return exportResponse.getFiles();\n   }\n \n@@ -104,6 +105,12 @@\n   private String safeCastHttpBodyToString(Object responseBody)\n   {\n     if (responseBody instanceof byte[])\n     {\n       return new String((byte[]) responseBody);\n     } else if (responseBody instanceof String)\n     {\n       return (String) responseBody;\n     }\n     return \"\";\n   }\n+\n+  private <T> T readValue(String content, Class<T> valueType) throws JsonProcessingException {\n+    return objectMapper.readValue(content, valueType);\n+  }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot access com.fasterxml.jackson.core.exc.StreamReadException\n",
                "updated_files": {
                    "src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java": "package io.simplelocalize.cli.client;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.Option;\nimport io.simplelocalize.cli.client.dto.DownloadRequest;\nimport io.simplelocalize.cli.client.dto.DownloadableFile;\nimport io.simplelocalize.cli.client.dto.ExportResponse;\nimport io.simplelocalize.cli.client.dto.UploadRequest;\nimport io.simplelocalize.cli.exception.ApiRequestException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.time.Duration;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\nimport static io.simplelocalize.cli.TemplateKeys.LANGUAGE_TEMPLATE_KEY;\nimport static io.simplelocalize.cli.TemplateKeys.NAMESPACE_TEMPLATE_KEY;\n\npublic class SimpleLocalizeClient\n{\n\n  private static final String ERROR_MESSAGE_PATH = \"$.msg\";\n  private final HttpClient httpClient;\n  private final SimpleLocalizeHttpRequestFactory httpRequestFactory;\n  private final SimpleLocalizeUriFactory uriFactory;\n\n  private final Logger log = LoggerFactory.getLogger(SimpleLocalizeClient.class);\n  private final ObjectMapper objectMapper;\n\n  public SimpleLocalizeClient(String baseUrl, String apiKey)\n  {\n\n    Objects.requireNonNull(baseUrl);\n    Objects.requireNonNull(apiKey);\n    this.uriFactory = new SimpleLocalizeUriFactory(baseUrl);\n    this.httpRequestFactory = new SimpleLocalizeHttpRequestFactory(apiKey);\n    this.objectMapper = new ObjectMapper();\n    this.httpClient = HttpClient.newBuilder()\n            .connectTimeout(Duration.ofMinutes(5))\n            .build();\n  }\n\n  public static SimpleLocalizeClient create(String baseUrl, String apiKey)\n  {\n    return new SimpleLocalizeClient(baseUrl, apiKey);\n  }\n\n  public void uploadKeys(Collection<String> keys) throws IOException, InterruptedException\n  {\n    URI uri = uriFactory.buildSendKeysURI();\n    HttpRequest httpRequest = httpRequestFactory.createSendKeysRequest(uri, keys);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    int keysProcessed = JsonPath.read(httpResponse.body(), \"$.data.uniqueKeysProcessed\");\n    log.info(\"Successfully uploaded {} keys\", keysProcessed);\n  }\n\n  public void uploadFile(UploadRequest uploadRequest) throws IOException, InterruptedException\n  {\n    Path uploadPath = uploadRequest.getPath();\n    log.info(\"Uploading {}\", uploadPath);\n    URI uri = uriFactory.buildUploadUri(uploadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createUploadFileRequest(uri, uploadRequest);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n  }\n\n  public List<DownloadableFile> fetchDownloadableFiles(DownloadRequest downloadRequest) throws IOException, InterruptedException\n  {\n    log.info(\"Preparing files to download\");\n    URI downloadUri = uriFactory.buildDownloadUri(downloadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(downloadUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String body = httpResponse.body();\n    ExportResponse exportResponse = readValue(body, ExportResponse.class);\n    return exportResponse.getFiles();\n  }\n\n  public void downloadFile(DownloadableFile downloadableFile, String downloadPathTemplate)\n  {\n    Optional<DownloadableFile> optionalDownloadableFile = Optional.of(downloadableFile);\n    String downloadPath = downloadPathTemplate\n            .replace(NAMESPACE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getNamespace).orElse(\"\"))\n            .replace(LANGUAGE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getLanguage).orElse(\"\"));\n    String url = downloadableFile.getUrl();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(URI.create(url)).build();\n    Path savePath = Path.of(downloadPath);\n    try\n    {\n      Path parentDirectory = savePath.getParent();\n      if (parentDirectory != null)\n      {\n        Files.createDirectories(parentDirectory);\n      }\n      log.info(\"Downloading {}\", savePath);\n      httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofFile(savePath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING));\n    } catch (IOException e)\n    {\n      log.error(\"Download failed: {}\", savePath, e);\n    } catch (InterruptedException e)\n    {\n      log.error(\"Download interrupted: {}\", savePath, e);\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  public int validateGate() throws IOException, InterruptedException\n  {\n    URI validateUri = uriFactory.buildValidateGateUri();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(validateUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String json = httpResponse.body();\n    Boolean passed = JsonPath.read(json, \"$.data.passed\");\n    String message = JsonPath.read(json, \"$.data.message\");\n    int status = JsonPath.read(json, \"$.data.status\");\n    log.info(\"Gate result: {} (status: {}, message: {})\", passed, status, message);\n    return status;\n  }\n\n  private void throwOnError(HttpResponse<?> httpResponse)\n  {\n    if (httpResponse.statusCode() != 200)\n    {\n      com.jayway.jsonpath.Configuration parseContext = com.jayway.jsonpath.Configuration\n              .defaultConfiguration()\n              .addOptions(Option.SUPPRESS_EXCEPTIONS);\n\n      Object responseBody = httpResponse.body();\n      String stringBody = safeCastHttpBodyToString(responseBody);\n      String message = JsonPath.using(parseContext).parse(stringBody).read(ERROR_MESSAGE_PATH);\n      if (message == null)\n      {\n        message = \"Unknown error, HTTP Status: \" + httpResponse.statusCode();\n      }\n      log.error(\"Request failed: {}\", message);\n      throw new ApiRequestException(message, httpResponse);\n    }\n  }\n\n  private String safeCastHttpBodyToString(Object responseBody)\n  {\n    if (responseBody instanceof byte[])\n    {\n      return new String((byte[]) responseBody);\n    } else if (responseBody instanceof String)\n    {\n      return (String) responseBody;\n    }\n    return \"\";\n  }\n\n  private <T> T readValue(String content, Class<T> valueType) throws JsonProcessingException {\n    return objectMapper.readValue(content, valueType);\n  }\n\n\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java": {
                        "168": {
                            "lines": [
                                {
                                    "line_no": 167,
                                    "content": "  private <T> T readValue(String content, Class<T> valueType) throws JsonProcessingException {"
                                },
                                {
                                    "line_no": 168,
                                    "content": "    return objectMapper.readValue(content, valueType);"
                                },
                                {
                                    "line_no": 169,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[168,24] cannot access com.fasterxml.jackson.core.exc.StreamReadException\n",
                                "[168,24] cannot access com.fasterxml.jackson.core.exc.StreamReadException\nclass file for com.fasterxml.jackson.core.exc.StreamReadException not found\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot access com.fasterxml.jackson.core.exc.StreamReadException\n",
            "span_id": 610380643793043359
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java",
            "output": "package io.simplelocalize.cli.client;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.Option;\nimport io.simplelocalize.cli.client.dto.DownloadRequest;\nimport io.simplelocalize.cli.client.dto.DownloadableFile;\nimport io.simplelocalize.cli.client.dto.ExportResponse;\nimport io.simplelocalize.cli.client.dto.UploadRequest;\nimport io.simplelocalize.cli.exception.ApiRequestException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.time.Duration;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\nimport static io.simplelocalize.cli.TemplateKeys.LANGUAGE_TEMPLATE_KEY;\nimport static io.simplelocalize.cli.TemplateKeys.NAMESPACE_TEMPLATE_KEY;\n\npublic class SimpleLocalizeClient\n{\n\n  private static final String ERROR_MESSAGE_PATH = \"$.msg\";\n  private final HttpClient httpClient;\n  private final SimpleLocalizeHttpRequestFactory httpRequestFactory;\n  private final SimpleLocalizeUriFactory uriFactory;\n\n  private final Logger log = LoggerFactory.getLogger(SimpleLocalizeClient.class);\n  private final ObjectMapper objectMapper;\n\n  public SimpleLocalizeClient(String baseUrl, String apiKey)\n  {\n\n    Objects.requireNonNull(baseUrl);\n    Objects.requireNonNull(apiKey);\n    this.uriFactory = new SimpleLocalizeUriFactory(baseUrl);\n    this.httpRequestFactory = new SimpleLocalizeHttpRequestFactory(apiKey);\n    this.objectMapper = new ObjectMapper();\n    this.httpClient = HttpClient.newBuilder()\n            .connectTimeout(Duration.ofMinutes(5))\n            .build();\n  }\n\n  public static SimpleLocalizeClient create(String baseUrl, String apiKey)\n  {\n    return new SimpleLocalizeClient(baseUrl, apiKey);\n  }\n\n  public void uploadKeys(Collection<String> keys) throws IOException, InterruptedException\n  {\n    URI uri = uriFactory.buildSendKeysURI();\n    HttpRequest httpRequest = httpRequestFactory.createSendKeysRequest(uri, keys);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    int keysProcessed = JsonPath.read(httpResponse.body(), \"$.data.uniqueKeysProcessed\");\n    log.info(\"Successfully uploaded {} keys\", keysProcessed);\n  }\n\n  public void uploadFile(UploadRequest uploadRequest) throws IOException, InterruptedException\n  {\n    Path uploadPath = uploadRequest.getPath();\n    log.info(\"Uploading {}\", uploadPath);\n    URI uri = uriFactory.buildUploadUri(uploadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createUploadFileRequest(uri, uploadRequest);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n  }\n\n  public List<DownloadableFile> fetchDownloadableFiles(DownloadRequest downloadRequest) throws IOException, InterruptedException\n  {\n    log.info(\"Preparing files to download\");\n    URI downloadUri = uriFactory.buildDownloadUri(downloadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(downloadUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String body = httpResponse.body();\n    ExportResponse exportResponse = objectMapper.readValue(body, ExportResponse.class);\n    return exportResponse.getFiles();\n  }\n\n  public void downloadFile(DownloadableFile downloadableFile, String downloadPathTemplate)\n  {\n    Optional<DownloadableFile> optionalDownloadableFile = Optional.of(downloadableFile);\n    String downloadPath = downloadPathTemplate\n            .replace(NAMESPACE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getNamespace).orElse(\"\"))\n            .replace(LANGUAGE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getLanguage).orElse(\"\"));\n    String url = downloadableFile.getUrl();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(URI.create(url)).build();\n    Path savePath = Path.of(downloadPath);\n    try\n    {\n      Path parentDirectory = savePath.getParent();\n      if (parentDirectory != null)\n      {\n        Files.createDirectories(parentDirectory);\n      }\n      log.info(\"Downloading {}\", savePath);\n      httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofFile(savePath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING));\n    } catch (IOException e)\n    {\n      log.error(\"Download failed: {}\", savePath, e);\n    } catch (InterruptedException e)\n    {\n      log.error(\"Download interrupted: {}\", savePath, e);\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  public int validateGate() throws IOException, InterruptedException\n  {\n    URI validateUri = uriFactory.buildValidateGateUri();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(validateUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String json = httpResponse.body();\n    Boolean passed = JsonPath.read(json, \"$.data.passed\");\n    String message = JsonPath.read(json, \"$.data.message\");\n    int status = JsonPath.read(json, \"$.data.status\");\n    log.info(\"Gate result: {} (status: {}, message: {})\", passed, status, message);\n    return status;\n  }\n\n  private void throwOnError(HttpResponse<?> httpResponse)\n  {\n    if (httpResponse.statusCode() != 200)\n    {\n      com.jayway.jsonpath.Configuration parseContext = com.jayway.jsonpath.Configuration\n              .defaultConfiguration()\n              .addOptions(Option.SUPPRESS_EXCEPTIONS);\n\n      Object responseBody = httpResponse.body();\n      String stringBody = safeCastHttpBodyToString(responseBody);\n      String message = JsonPath.using(parseContext).parse(stringBody).read(ERROR_MESSAGE_PATH);\n      if (message == null)\n      {\n        message = \"Unknown error, HTTP Status: \" + httpResponse.statusCode();\n      }\n      log.error(\"Request failed: {}\", message);\n      throw new ApiRequestException(message, httpResponse);\n    }\n  }\n\n  private String safeCastHttpBodyToString(Object responseBody)\n  {\n    if (responseBody instanceof byte[])\n    {\n      return new String((byte[]) responseBody);\n    } else if (responseBody instanceof String)\n    {\n      return (String) responseBody;\n    }\n    return \"\";\n  }\n\n\n}\n",
            "error": "",
            "span_id": 3665991078657729538
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/ExportResponse.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@Introspected\npublic class ExportResponse\n{\n  @JsonProperty(\"files\")\n  private List<DownloadableFile> files;\n  @JsonIgnore\n  private Map<String, Object> additionalProperties = new HashMap<>();\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ExportResponse that = (ExportResponse) o;\n    return files.equals(that.files) && additionalProperties.equals(that.additionalProperties);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(files, additionalProperties);\n  }\n\n  public List<DownloadableFile> getFiles()\n  {\n    return files;\n  }\n\n  public void setFiles(List<DownloadableFile> files)\n  {\n    this.files = files;\n  }\n\n\n  @JsonAnyGetter\n  public Map<String, Object> getAdditionalProperties()\n  {\n    return this.additionalProperties;\n  }\n\n  @JsonAnySetter\n  public void setAdditionalProperty(String name, Object value)\n  {\n    this.additionalProperties.put(name, value);\n  }\n\n}\n",
            "error": "",
            "span_id": 1435208506402586352
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/DownloadableFile.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\n\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.Objects;\n\n@Introspected\npublic class DownloadableFile\n{\n  private String url;\n  private String namespace;\n  private String language;\n\n  public void setUrl(String url)\n  {\n    this.url = url;\n  }\n\n  public String getNamespace()\n  {\n    return namespace;\n  }\n\n  public void setNamespace(String namespace)\n  {\n    this.namespace = namespace;\n  }\n\n  public String getUrl()\n  {\n    return url;\n  }\n\n  public String getLanguage()\n  {\n    return language;\n  }\n\n  public void setLanguage(String language)\n  {\n    this.language = language;\n  }\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    DownloadableFile that = (DownloadableFile) o;\n    return Objects.equals(url, that.url) && Objects.equals(namespace, that.namespace) && Objects.equals(language, that.language);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(url, namespace, language);\n  }\n\n\n  public static final class DownloadableFileBuilder\n  {\n    private String url;\n    private String namespace;\n    private String language;\n\n    private DownloadableFileBuilder()\n    {\n    }\n\n    public static DownloadableFileBuilder aDownloadableFile()\n    {\n      return new DownloadableFileBuilder();\n    }\n\n    public DownloadableFileBuilder withUrl(String url)\n    {\n      this.url = url;\n      return this;\n    }\n\n    public DownloadableFileBuilder withNamespace(String namespace)\n    {\n      this.namespace = namespace;\n      return this;\n    }\n\n    public DownloadableFileBuilder withLanguage(String language)\n    {\n      this.language = language;\n      return this;\n    }\n\n    public DownloadableFile build()\n    {\n      DownloadableFile downloadableFile = new DownloadableFile();\n      downloadableFile.url = this.url;\n      downloadableFile.language = this.language;\n      downloadableFile.namespace = this.namespace;\n      return downloadableFile;\n    }\n  }\n}\n",
            "error": "",
            "span_id": 2810333821335681039
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/DownloadableFile.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\n\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.Objects;\n\n@Introspected\npublic class DownloadableFile\n{\n  private String url;\n  private String namespace;\n  private String language;\n\n  public void setUrl(String url)\n  {\n    this.url = url;\n  }\n\n  public String getNamespace()\n  {\n    return namespace;\n  }\n\n  public void setNamespace(String namespace)\n  {\n    this.namespace = namespace;\n  }\n\n  public String getUrl()\n  {\n    return url;\n  }\n\n  public String getLanguage()\n  {\n    return language;\n  }\n\n  public void setLanguage(String language)\n  {\n    this.language = language;\n  }\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    DownloadableFile that = (DownloadableFile) o;\n    return Objects.equals(url, that.url) && Objects.equals(namespace, that.namespace) && Objects.equals(language, that.language);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(url, namespace, language);\n  }\n\n\n  public static final class DownloadableFileBuilder\n  {\n    private String url;\n    private String namespace;\n    private String language;\n\n    private DownloadableFileBuilder()\n    {\n    }\n\n    public static DownloadableFileBuilder aDownloadableFile()\n    {\n      return new DownloadableFileBuilder();\n    }\n\n    public DownloadableFileBuilder withUrl(String url)\n    {\n      this.url = url;\n      return this;\n    }\n\n    public DownloadableFileBuilder withNamespace(String namespace)\n    {\n      this.namespace = namespace;\n      return this;\n    }\n\n    public DownloadableFileBuilder withLanguage(String language)\n    {\n      this.language = language;\n      return this;\n    }\n\n    public DownloadableFile build()\n    {\n      DownloadableFile downloadableFile = new DownloadableFile();\n      downloadableFile.url = this.url;\n      downloadableFile.language = this.language;\n      downloadableFile.namespace = this.namespace;\n      return downloadableFile;\n    }\n  }\n}\n",
            "error": "",
            "span_id": 4321541426787718890
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/ExportResponse.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@Introspected\npublic class ExportResponse\n{\n  @JsonProperty(\"files\")\n  private List<DownloadableFile> files;\n  @JsonIgnore\n  private Map<String, Object> additionalProperties = new HashMap<>();\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ExportResponse that = (ExportResponse) o;\n    return files.equals(that.files) && additionalProperties.equals(that.additionalProperties);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(files, additionalProperties);\n  }\n\n  public List<DownloadableFile> getFiles()\n  {\n    return files;\n  }\n\n  public void setFiles(List<DownloadableFile> files)\n  {\n    this.files = files;\n  }\n\n\n  @JsonAnyGetter\n  public Map<String, Object> getAdditionalProperties()\n  {\n    return this.additionalProperties;\n  }\n\n  @JsonAnySetter\n  public void setAdditionalProperty(String name, Object value)\n  {\n    this.additionalProperties.put(name, value);\n  }\n\n}\n",
            "error": "",
            "span_id": 646101958028921422
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/DownloadableFile.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\n\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.Objects;\n\n@Introspected\npublic class DownloadableFile\n{\n  private String url;\n  private String namespace;\n  private String language;\n\n  public void setUrl(String url)\n  {\n    this.url = url;\n  }\n\n  public String getNamespace()\n  {\n    return namespace;\n  }\n\n  public void setNamespace(String namespace)\n  {\n    this.namespace = namespace;\n  }\n\n  public String getUrl()\n  {\n    return url;\n  }\n\n  public String getLanguage()\n  {\n    return language;\n  }\n\n  public void setLanguage(String language)\n  {\n    this.language = language;\n  }\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    DownloadableFile that = (DownloadableFile) o;\n    return Objects.equals(url, that.url) && Objects.equals(namespace, that.namespace) && Objects.equals(language, that.language);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(url, namespace, language);\n  }\n\n\n  public static final class DownloadableFileBuilder\n  {\n    private String url;\n    private String namespace;\n    private String language;\n\n    private DownloadableFileBuilder()\n    {\n    }\n\n    public static DownloadableFileBuilder aDownloadableFile()\n    {\n      return new DownloadableFileBuilder();\n    }\n\n    public DownloadableFileBuilder withUrl(String url)\n    {\n      this.url = url;\n      return this;\n    }\n\n    public DownloadableFileBuilder withNamespace(String namespace)\n    {\n      this.namespace = namespace;\n      return this;\n    }\n\n    public DownloadableFileBuilder withLanguage(String language)\n    {\n      this.language = language;\n      return this;\n    }\n\n    public DownloadableFile build()\n    {\n      DownloadableFile downloadableFile = new DownloadableFile();\n      downloadableFile.url = this.url;\n      downloadableFile.language = this.language;\n      downloadableFile.namespace = this.namespace;\n      return downloadableFile;\n    }\n  }\n}\n",
            "error": "",
            "span_id": 3973251712340572520
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/ExportResponse.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@Introspected\npublic class ExportResponse\n{\n  @JsonProperty(\"files\")\n  private List<DownloadableFile> files;\n  @JsonIgnore\n  private Map<String, Object> additionalProperties = new HashMap<>();\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ExportResponse that = (ExportResponse) o;\n    return files.equals(that.files) && additionalProperties.equals(that.additionalProperties);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(files, additionalProperties);\n  }\n\n  public List<DownloadableFile> getFiles()\n  {\n    return files;\n  }\n\n  public void setFiles(List<DownloadableFile> files)\n  {\n    this.files = files;\n  }\n\n\n  @JsonAnyGetter\n  public Map<String, Object> getAdditionalProperties()\n  {\n    return this.additionalProperties;\n  }\n\n  @JsonAnySetter\n  public void setAdditionalProperty(String name, Object value)\n  {\n    this.additionalProperties.put(name, value);\n  }\n\n}\n",
            "error": "",
            "span_id": 7927835698643116778
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java",
            "output": "package io.simplelocalize.cli.client;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.Option;\nimport io.simplelocalize.cli.client.dto.DownloadRequest;\nimport io.simplelocalize.cli.client.dto.DownloadableFile;\nimport io.simplelocalize.cli.client.dto.ExportResponse;\nimport io.simplelocalize.cli.client.dto.UploadRequest;\nimport io.simplelocalize.cli.exception.ApiRequestException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.time.Duration;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\nimport static io.simplelocalize.cli.TemplateKeys.LANGUAGE_TEMPLATE_KEY;\nimport static io.simplelocalize.cli.TemplateKeys.NAMESPACE_TEMPLATE_KEY;\n\npublic class SimpleLocalizeClient\n{\n\n  private static final String ERROR_MESSAGE_PATH = \"$.msg\";\n  private final HttpClient httpClient;\n  private final SimpleLocalizeHttpRequestFactory httpRequestFactory;\n  private final SimpleLocalizeUriFactory uriFactory;\n\n  private final Logger log = LoggerFactory.getLogger(SimpleLocalizeClient.class);\n  private final ObjectMapper objectMapper;\n\n  public SimpleLocalizeClient(String baseUrl, String apiKey)\n  {\n\n    Objects.requireNonNull(baseUrl);\n    Objects.requireNonNull(apiKey);\n    this.uriFactory = new SimpleLocalizeUriFactory(baseUrl);\n    this.httpRequestFactory = new SimpleLocalizeHttpRequestFactory(apiKey);\n    this.objectMapper = new ObjectMapper();\n    this.httpClient = HttpClient.newBuilder()\n            .connectTimeout(Duration.ofMinutes(5))\n            .build();\n  }\n\n  public static SimpleLocalizeClient create(String baseUrl, String apiKey)\n  {\n    return new SimpleLocalizeClient(baseUrl, apiKey);\n  }\n\n  public void uploadKeys(Collection<String> keys) throws IOException, InterruptedException\n  {\n    URI uri = uriFactory.buildSendKeysURI();\n    HttpRequest httpRequest = httpRequestFactory.createSendKeysRequest(uri, keys);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    int keysProcessed = JsonPath.read(httpResponse.body(), \"$.data.uniqueKeysProcessed\");\n    log.info(\"Successfully uploaded {} keys\", keysProcessed);\n  }\n\n  public void uploadFile(UploadRequest uploadRequest) throws IOException, InterruptedException\n  {\n    Path uploadPath = uploadRequest.getPath();\n    log.info(\"Uploading {}\", uploadPath);\n    URI uri = uriFactory.buildUploadUri(uploadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createUploadFileRequest(uri, uploadRequest);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n  }\n\n  public List<DownloadableFile> fetchDownloadableFiles(DownloadRequest downloadRequest) throws IOException, InterruptedException\n  {\n    log.info(\"Preparing files to download\");\n    URI downloadUri = uriFactory.buildDownloadUri(downloadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(downloadUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String body = httpResponse.body();\n    ExportResponse exportResponse = objectMapper.readValue(body, ExportResponse.class);\n    return exportResponse.getFiles();\n  }\n\n  public void downloadFile(DownloadableFile downloadableFile, String downloadPathTemplate)\n  {\n    Optional<DownloadableFile> optionalDownloadableFile = Optional.of(downloadableFile);\n    String downloadPath = downloadPathTemplate\n            .replace(NAMESPACE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getNamespace).orElse(\"\"))\n            .replace(LANGUAGE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getLanguage).orElse(\"\"));\n    String url = downloadableFile.getUrl();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(URI.create(url)).build();\n    Path savePath = Path.of(downloadPath);\n    try\n    {\n      Path parentDirectory = savePath.getParent();\n      if (parentDirectory != null)\n      {\n        Files.createDirectories(parentDirectory);\n      }\n      log.info(\"Downloading {}\", savePath);\n      httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofFile(savePath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING));\n    } catch (IOException e)\n    {\n      log.error(\"Download failed: {}\", savePath, e);\n    } catch (InterruptedException e)\n    {\n      log.error(\"Download interrupted: {}\", savePath, e);\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  public int validateGate() throws IOException, InterruptedException\n  {\n    URI validateUri = uriFactory.buildValidateGateUri();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(validateUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String json = httpResponse.body();\n    Boolean passed = JsonPath.read(json, \"$.data.passed\");\n    String message = JsonPath.read(json, \"$.data.message\");\n    int status = JsonPath.read(json, \"$.data.status\");\n    log.info(\"Gate result: {} (status: {}, message: {})\", passed, status, message);\n    return status;\n  }\n\n  private void throwOnError(HttpResponse<?> httpResponse)\n  {\n    if (httpResponse.statusCode() != 200)\n    {\n      com.jayway.jsonpath.Configuration parseContext = com.jayway.jsonpath.Configuration\n              .defaultConfiguration()\n              .addOptions(Option.SUPPRESS_EXCEPTIONS);\n\n      Object responseBody = httpResponse.body();\n      String stringBody = safeCastHttpBodyToString(responseBody);\n      String message = JsonPath.using(parseContext).parse(stringBody).read(ERROR_MESSAGE_PATH);\n      if (message == null)\n      {\n        message = \"Unknown error, HTTP Status: \" + httpResponse.statusCode();\n      }\n      log.error(\"Request failed: {}\", message);\n      throw new ApiRequestException(message, httpResponse);\n    }\n  }\n\n  private String safeCastHttpBodyToString(Object responseBody)\n  {\n    if (responseBody instanceof byte[])\n    {\n      return new String((byte[]) responseBody);\n    } else if (responseBody instanceof String)\n    {\n      return (String) responseBody;\n    }\n    return \"\";\n  }\n\n\n}\n",
            "error": "",
            "span_id": 3015231183006954381
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java",
            "output": "package io.simplelocalize.cli.client;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.Option;\nimport io.simplelocalize.cli.client.dto.DownloadRequest;\nimport io.simplelocalize.cli.client.dto.DownloadableFile;\nimport io.simplelocalize.cli.client.dto.ExportResponse;\nimport io.simplelocalize.cli.client.dto.UploadRequest;\nimport io.simplelocalize.cli.exception.ApiRequestException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.time.Duration;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\nimport static io.simplelocalize.cli.TemplateKeys.LANGUAGE_TEMPLATE_KEY;\nimport static io.simplelocalize.cli.TemplateKeys.NAMESPACE_TEMPLATE_KEY;\n\npublic class SimpleLocalizeClient\n{\n\n  private static final String ERROR_MESSAGE_PATH = \"$.msg\";\n  private final HttpClient httpClient;\n  private final SimpleLocalizeHttpRequestFactory httpRequestFactory;\n  private final SimpleLocalizeUriFactory uriFactory;\n\n  private final Logger log = LoggerFactory.getLogger(SimpleLocalizeClient.class);\n  private final ObjectMapper objectMapper;\n\n  public SimpleLocalizeClient(String baseUrl, String apiKey)\n  {\n\n    Objects.requireNonNull(baseUrl);\n    Objects.requireNonNull(apiKey);\n    this.uriFactory = new SimpleLocalizeUriFactory(baseUrl);\n    this.httpRequestFactory = new SimpleLocalizeHttpRequestFactory(apiKey);\n    this.objectMapper = new ObjectMapper();\n    this.httpClient = HttpClient.newBuilder()\n            .connectTimeout(Duration.ofMinutes(5))\n            .build();\n  }\n\n  public static SimpleLocalizeClient create(String baseUrl, String apiKey)\n  {\n    return new SimpleLocalizeClient(baseUrl, apiKey);\n  }\n\n  public void uploadKeys(Collection<String> keys) throws IOException, InterruptedException\n  {\n    URI uri = uriFactory.buildSendKeysURI();\n    HttpRequest httpRequest = httpRequestFactory.createSendKeysRequest(uri, keys);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    int keysProcessed = JsonPath.read(httpResponse.body(), \"$.data.uniqueKeysProcessed\");\n    log.info(\"Successfully uploaded {} keys\", keysProcessed);\n  }\n\n  public void uploadFile(UploadRequest uploadRequest) throws IOException, InterruptedException\n  {\n    Path uploadPath = uploadRequest.getPath();\n    log.info(\"Uploading {}\", uploadPath);\n    URI uri = uriFactory.buildUploadUri(uploadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createUploadFileRequest(uri, uploadRequest);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n  }\n\n  public List<DownloadableFile> fetchDownloadableFiles(DownloadRequest downloadRequest) throws IOException, InterruptedException\n  {\n    log.info(\"Preparing files to download\");\n    URI downloadUri = uriFactory.buildDownloadUri(downloadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(downloadUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String body = httpResponse.body();\n    ExportResponse exportResponse = readValue(body, ExportResponse.class);\n    return exportResponse.getFiles();\n  }\n\n  public void downloadFile(DownloadableFile downloadableFile, String downloadPathTemplate)\n  {\n    Optional<DownloadableFile> optionalDownloadableFile = Optional.of(downloadableFile);\n    String downloadPath = downloadPathTemplate\n            .replace(NAMESPACE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getNamespace).orElse(\"\"))\n            .replace(LANGUAGE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getLanguage).orElse(\"\"));\n    String url = downloadableFile.getUrl();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(URI.create(url)).build();\n    Path savePath = Path.of(downloadPath);\n    try\n    {\n      Path parentDirectory = savePath.getParent();\n      if (parentDirectory != null)\n      {\n        Files.createDirectories(parentDirectory);\n      }\n      log.info(\"Downloading {}\", savePath);\n      httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofFile(savePath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING));\n    } catch (IOException e)\n    {\n      log.error(\"Download failed: {}\", savePath, e);\n    } catch (InterruptedException e)\n    {\n      log.error(\"Download interrupted: {}\", savePath, e);\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  public int validateGate() throws IOException, InterruptedException\n  {\n    URI validateUri = uriFactory.buildValidateGateUri();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(validateUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String json = httpResponse.body();\n    Boolean passed = JsonPath.read(json, \"$.data.passed\");\n    String message = JsonPath.read(json, \"$.data.message\");\n    int status = JsonPath.read(json, \"$.data.status\");\n    log.info(\"Gate result: {} (status: {}, message: {})\", passed, status, message);\n    return status;\n  }\n\n  private void throwOnError(HttpResponse<?> httpResponse)\n  {\n    if (httpResponse.statusCode() != 200)\n    {\n      com.jayway.jsonpath.Configuration parseContext = com.jayway.jsonpath.Configuration\n              .defaultConfiguration()\n              .addOptions(Option.SUPPRESS_EXCEPTIONS);\n\n      Object responseBody = httpResponse.body();\n      String stringBody = safeCastHttpBodyToString(responseBody);\n      String message = JsonPath.using(parseContext).parse(stringBody).read(ERROR_MESSAGE_PATH);\n      if (message == null)\n      {\n        message = \"Unknown error, HTTP Status: \" + httpResponse.statusCode();\n      }\n      log.error(\"Request failed: {}\", message);\n      throw new ApiRequestException(message, httpResponse);\n    }\n  }\n\n  private String safeCastHttpBodyToString(Object responseBody)\n  {\n    if (responseBody instanceof byte[])\n    {\n      return new String((byte[]) responseBody);\n    } else if (responseBody instanceof String)\n    {\n      return (String) responseBody;\n    }\n    return \"\";\n  }\n\n  private <T> T readValue(String content, Class<T> valueType) throws JsonProcessingException {\n    return objectMapper.readValue(content, valueType);\n  }\n\n\n}\n",
            "error": "",
            "span_id": 8936036477928503480
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/DownloadableFile.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\n\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.Objects;\n\n@Introspected\npublic class DownloadableFile\n{\n  private String url;\n  private String namespace;\n  private String language;\n\n  public void setUrl(String url)\n  {\n    this.url = url;\n  }\n\n  public String getNamespace()\n  {\n    return namespace;\n  }\n\n  public void setNamespace(String namespace)\n  {\n    this.namespace = namespace;\n  }\n\n  public String getUrl()\n  {\n    return url;\n  }\n\n  public String getLanguage()\n  {\n    return language;\n  }\n\n  public void setLanguage(String language)\n  {\n    this.language = language;\n  }\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    DownloadableFile that = (DownloadableFile) o;\n    return Objects.equals(url, that.url) && Objects.equals(namespace, that.namespace) && Objects.equals(language, that.language);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(url, namespace, language);\n  }\n\n\n  public static final class DownloadableFileBuilder\n  {\n    private String url;\n    private String namespace;\n    private String language;\n\n    private DownloadableFileBuilder()\n    {\n    }\n\n    public static DownloadableFileBuilder aDownloadableFile()\n    {\n      return new DownloadableFileBuilder();\n    }\n\n    public DownloadableFileBuilder withUrl(String url)\n    {\n      this.url = url;\n      return this;\n    }\n\n    public DownloadableFileBuilder withNamespace(String namespace)\n    {\n      this.namespace = namespace;\n      return this;\n    }\n\n    public DownloadableFileBuilder withLanguage(String language)\n    {\n      this.language = language;\n      return this;\n    }\n\n    public DownloadableFile build()\n    {\n      DownloadableFile downloadableFile = new DownloadableFile();\n      downloadableFile.url = this.url;\n      downloadableFile.language = this.language;\n      downloadableFile.namespace = this.namespace;\n      return downloadableFile;\n    }\n  }\n}\n",
            "error": "",
            "span_id": 6516800028232632600
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/ExportResponse.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@Introspected\npublic class ExportResponse\n{\n  @JsonProperty(\"files\")\n  private List<DownloadableFile> files;\n  @JsonIgnore\n  private Map<String, Object> additionalProperties = new HashMap<>();\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ExportResponse that = (ExportResponse) o;\n    return files.equals(that.files) && additionalProperties.equals(that.additionalProperties);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(files, additionalProperties);\n  }\n\n  public List<DownloadableFile> getFiles()\n  {\n    return files;\n  }\n\n  public void setFiles(List<DownloadableFile> files)\n  {\n    this.files = files;\n  }\n\n\n  @JsonAnyGetter\n  public Map<String, Object> getAdditionalProperties()\n  {\n    return this.additionalProperties;\n  }\n\n  @JsonAnySetter\n  public void setAdditionalProperty(String name, Object value)\n  {\n    this.additionalProperties.put(name, value);\n  }\n\n}\n",
            "error": "",
            "span_id": 16657677579672351628
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/DownloadableFile.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\n\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.Objects;\n\n@Introspected\npublic class DownloadableFile\n{\n  private String url;\n  private String namespace;\n  private String language;\n\n  public void setUrl(String url)\n  {\n    this.url = url;\n  }\n\n  public String getNamespace()\n  {\n    return namespace;\n  }\n\n  public void setNamespace(String namespace)\n  {\n    this.namespace = namespace;\n  }\n\n  public String getUrl()\n  {\n    return url;\n  }\n\n  public String getLanguage()\n  {\n    return language;\n  }\n\n  public void setLanguage(String language)\n  {\n    this.language = language;\n  }\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    DownloadableFile that = (DownloadableFile) o;\n    return Objects.equals(url, that.url) && Objects.equals(namespace, that.namespace) && Objects.equals(language, that.language);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(url, namespace, language);\n  }\n\n\n  public static final class DownloadableFileBuilder\n  {\n    private String url;\n    private String namespace;\n    private String language;\n\n    private DownloadableFileBuilder()\n    {\n    }\n\n    public static DownloadableFileBuilder aDownloadableFile()\n    {\n      return new DownloadableFileBuilder();\n    }\n\n    public DownloadableFileBuilder withUrl(String url)\n    {\n      this.url = url;\n      return this;\n    }\n\n    public DownloadableFileBuilder withNamespace(String namespace)\n    {\n      this.namespace = namespace;\n      return this;\n    }\n\n    public DownloadableFileBuilder withLanguage(String language)\n    {\n      this.language = language;\n      return this;\n    }\n\n    public DownloadableFile build()\n    {\n      DownloadableFile downloadableFile = new DownloadableFile();\n      downloadableFile.url = this.url;\n      downloadableFile.language = this.language;\n      downloadableFile.namespace = this.namespace;\n      return downloadableFile;\n    }\n  }\n}\n",
            "error": "",
            "span_id": 10947927203344264537
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/ExportResponse.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@Introspected\npublic class ExportResponse\n{\n  @JsonProperty(\"files\")\n  private List<DownloadableFile> files;\n  @JsonIgnore\n  private Map<String, Object> additionalProperties = new HashMap<>();\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ExportResponse that = (ExportResponse) o;\n    return files.equals(that.files) && additionalProperties.equals(that.additionalProperties);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(files, additionalProperties);\n  }\n\n  public List<DownloadableFile> getFiles()\n  {\n    return files;\n  }\n\n  public void setFiles(List<DownloadableFile> files)\n  {\n    this.files = files;\n  }\n\n\n  @JsonAnyGetter\n  public Map<String, Object> getAdditionalProperties()\n  {\n    return this.additionalProperties;\n  }\n\n  @JsonAnySetter\n  public void setAdditionalProperty(String name, Object value)\n  {\n    this.additionalProperties.put(name, value);\n  }\n\n}\n",
            "error": "",
            "span_id": 1823718963557429030
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java",
            "output": "package io.simplelocalize.cli.client;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.Option;\nimport io.simplelocalize.cli.client.dto.DownloadRequest;\nimport io.simplelocalize.cli.client.dto.DownloadableFile;\nimport io.simplelocalize.cli.client.dto.ExportResponse;\nimport io.simplelocalize.cli.client.dto.UploadRequest;\nimport io.simplelocalize.cli.exception.ApiRequestException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.time.Duration;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\nimport static io.simplelocalize.cli.TemplateKeys.LANGUAGE_TEMPLATE_KEY;\nimport static io.simplelocalize.cli.TemplateKeys.NAMESPACE_TEMPLATE_KEY;\n\npublic class SimpleLocalizeClient\n{\n\n  private static final String ERROR_MESSAGE_PATH = \"$.msg\";\n  private final HttpClient httpClient;\n  private final SimpleLocalizeHttpRequestFactory httpRequestFactory;\n  private final SimpleLocalizeUriFactory uriFactory;\n\n  private final Logger log = LoggerFactory.getLogger(SimpleLocalizeClient.class);\n  private final ObjectMapper objectMapper;\n\n  public SimpleLocalizeClient(String baseUrl, String apiKey)\n  {\n\n    Objects.requireNonNull(baseUrl);\n    Objects.requireNonNull(apiKey);\n    this.uriFactory = new SimpleLocalizeUriFactory(baseUrl);\n    this.httpRequestFactory = new SimpleLocalizeHttpRequestFactory(apiKey);\n    this.objectMapper = new ObjectMapper();\n    this.httpClient = HttpClient.newBuilder()\n            .connectTimeout(Duration.ofMinutes(5))\n            .build();\n  }\n\n  public static SimpleLocalizeClient create(String baseUrl, String apiKey)\n  {\n    return new SimpleLocalizeClient(baseUrl, apiKey);\n  }\n\n  public void uploadKeys(Collection<String> keys) throws IOException, InterruptedException\n  {\n    URI uri = uriFactory.buildSendKeysURI();\n    HttpRequest httpRequest = httpRequestFactory.createSendKeysRequest(uri, keys);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    int keysProcessed = JsonPath.read(httpResponse.body(), \"$.data.uniqueKeysProcessed\");\n    log.info(\"Successfully uploaded {} keys\", keysProcessed);\n  }\n\n  public void uploadFile(UploadRequest uploadRequest) throws IOException, InterruptedException\n  {\n    Path uploadPath = uploadRequest.getPath();\n    log.info(\"Uploading {}\", uploadPath);\n    URI uri = uriFactory.buildUploadUri(uploadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createUploadFileRequest(uri, uploadRequest);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n  }\n\n  public List<DownloadableFile> fetchDownloadableFiles(DownloadRequest downloadRequest) throws IOException, InterruptedException\n  {\n    log.info(\"Preparing files to download\");\n    URI downloadUri = uriFactory.buildDownloadUri(downloadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(downloadUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String body = httpResponse.body();\n    ExportResponse exportResponse = readValue(body, ExportResponse.class);\n    return exportResponse.getFiles();\n  }\n\n  public void downloadFile(DownloadableFile downloadableFile, String downloadPathTemplate)\n  {\n    Optional<DownloadableFile> optionalDownloadableFile = Optional.of(downloadableFile);\n    String downloadPath = downloadPathTemplate\n            .replace(NAMESPACE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getNamespace).orElse(\"\"))\n            .replace(LANGUAGE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getLanguage).orElse(\"\"));\n    String url = downloadableFile.getUrl();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(URI.create(url)).build();\n    Path savePath = Path.of(downloadPath);\n    try\n    {\n      Path parentDirectory = savePath.getParent();\n      if (parentDirectory != null)\n      {\n        Files.createDirectories(parentDirectory);\n      }\n      log.info(\"Downloading {}\", savePath);\n      httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofFile(savePath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING));\n    } catch (IOException e)\n    {\n      log.error(\"Download failed: {}\", savePath, e);\n    } catch (InterruptedException e)\n    {\n      log.error(\"Download interrupted: {}\", savePath, e);\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  public int validateGate() throws IOException, InterruptedException\n  {\n    URI validateUri = uriFactory.buildValidateGateUri();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(validateUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String json = httpResponse.body();\n    Boolean passed = JsonPath.read(json, \"$.data.passed\");\n    String message = JsonPath.read(json, \"$.data.message\");\n    int status = JsonPath.read(json, \"$.data.status\");\n    log.info(\"Gate result: {} (status: {}, message: {})\", passed, status, message);\n    return status;\n  }\n\n  private void throwOnError(HttpResponse<?> httpResponse)\n  {\n    if (httpResponse.statusCode() != 200)\n    {\n      com.jayway.jsonpath.Configuration parseContext = com.jayway.jsonpath.Configuration\n              .defaultConfiguration()\n              .addOptions(Option.SUPPRESS_EXCEPTIONS);\n\n      Object responseBody = httpResponse.body();\n      String stringBody = safeCastHttpBodyToString(responseBody);\n      String message = JsonPath.using(parseContext).parse(stringBody).read(ERROR_MESSAGE_PATH);\n      if (message == null)\n      {\n        message = \"Unknown error, HTTP Status: \" + httpResponse.statusCode();\n      }\n      log.error(\"Request failed: {}\", message);\n      throw new ApiRequestException(message, httpResponse);\n    }\n  }\n\n  private String safeCastHttpBodyToString(Object responseBody)\n  {\n    if (responseBody instanceof byte[])\n    {\n      return new String((byte[]) responseBody);\n    } else if (responseBody instanceof String)\n    {\n      return (String) responseBody;\n    }\n    return \"\";\n  }\n\n  private <T> T readValue(String content, Class<T> valueType) throws JsonProcessingException {\n    return objectMapper.readValue(content, valueType);\n  }\n\n\n}\n",
            "error": "",
            "span_id": 10377152900371147599
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/SimpleLocalizeClient.java",
            "output": "package io.simplelocalize.cli.client;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.Option;\nimport io.simplelocalize.cli.client.dto.DownloadRequest;\nimport io.simplelocalize.cli.client.dto.DownloadableFile;\nimport io.simplelocalize.cli.client.dto.ExportResponse;\nimport io.simplelocalize.cli.client.dto.UploadRequest;\nimport io.simplelocalize.cli.exception.ApiRequestException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.time.Duration;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\nimport static io.simplelocalize.cli.TemplateKeys.LANGUAGE_TEMPLATE_KEY;\nimport static io.simplelocalize.cli.TemplateKeys.NAMESPACE_TEMPLATE_KEY;\n\npublic class SimpleLocalizeClient\n{\n\n  private static final String ERROR_MESSAGE_PATH = \"$.msg\";\n  private final HttpClient httpClient;\n  private final SimpleLocalizeHttpRequestFactory httpRequestFactory;\n  private final SimpleLocalizeUriFactory uriFactory;\n\n  private final Logger log = LoggerFactory.getLogger(SimpleLocalizeClient.class);\n  private final ObjectMapper objectMapper;\n\n  public SimpleLocalizeClient(String baseUrl, String apiKey)\n  {\n\n    Objects.requireNonNull(baseUrl);\n    Objects.requireNonNull(apiKey);\n    this.uriFactory = new SimpleLocalizeUriFactory(baseUrl);\n    this.httpRequestFactory = new SimpleLocalizeHttpRequestFactory(apiKey);\n    this.objectMapper = new ObjectMapper();\n    this.httpClient = HttpClient.newBuilder()\n            .connectTimeout(Duration.ofMinutes(5))\n            .build();\n  }\n\n  public static SimpleLocalizeClient create(String baseUrl, String apiKey)\n  {\n    return new SimpleLocalizeClient(baseUrl, apiKey);\n  }\n\n  public void uploadKeys(Collection<String> keys) throws IOException, InterruptedException\n  {\n    URI uri = uriFactory.buildSendKeysURI();\n    HttpRequest httpRequest = httpRequestFactory.createSendKeysRequest(uri, keys);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    int keysProcessed = JsonPath.read(httpResponse.body(), \"$.data.uniqueKeysProcessed\");\n    log.info(\"Successfully uploaded {} keys\", keysProcessed);\n  }\n\n  public void uploadFile(UploadRequest uploadRequest) throws IOException, InterruptedException\n  {\n    Path uploadPath = uploadRequest.getPath();\n    log.info(\"Uploading {}\", uploadPath);\n    URI uri = uriFactory.buildUploadUri(uploadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createUploadFileRequest(uri, uploadRequest);\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n  }\n\n  public List<DownloadableFile> fetchDownloadableFiles(DownloadRequest downloadRequest) throws IOException, InterruptedException\n  {\n    log.info(\"Preparing files to download\");\n    URI downloadUri = uriFactory.buildDownloadUri(downloadRequest);\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(downloadUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String body = httpResponse.body();\n    ExportResponse exportResponse = readValue(body, ExportResponse.class);\n    return exportResponse.getFiles();\n  }\n\n  public void downloadFile(DownloadableFile downloadableFile, String downloadPathTemplate)\n  {\n    Optional<DownloadableFile> optionalDownloadableFile = Optional.of(downloadableFile);\n    String downloadPath = downloadPathTemplate\n            .replace(NAMESPACE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getNamespace).orElse(\"\"))\n            .replace(LANGUAGE_TEMPLATE_KEY, optionalDownloadableFile.map(DownloadableFile::getLanguage).orElse(\"\"));\n    String url = downloadableFile.getUrl();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(URI.create(url)).build();\n    Path savePath = Path.of(downloadPath);\n    try\n    {\n      Path parentDirectory = savePath.getParent();\n      if (parentDirectory != null)\n      {\n        Files.createDirectories(parentDirectory);\n      }\n      log.info(\"Downloading {}\", savePath);\n      httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofFile(savePath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING));\n    } catch (IOException e)\n    {\n      log.error(\"Download failed: {}\", savePath, e);\n    } catch (InterruptedException e)\n    {\n      log.error(\"Download interrupted: {}\", savePath, e);\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  public int validateGate() throws IOException, InterruptedException\n  {\n    URI validateUri = uriFactory.buildValidateGateUri();\n    HttpRequest httpRequest = httpRequestFactory.createGetRequest(validateUri).build();\n    HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n    throwOnError(httpResponse);\n    String json = httpResponse.body();\n    Boolean passed = JsonPath.read(json, \"$.data.passed\");\n    String message = JsonPath.read(json, \"$.data.message\");\n    int status = JsonPath.read(json, \"$.data.status\");\n    log.info(\"Gate result: {} (status: {}, message: {})\", passed, status, message);\n    return status;\n  }\n\n  private void throwOnError(HttpResponse<?> httpResponse)\n  {\n    if (httpResponse.statusCode() != 200)\n    {\n      com.jayway.jsonpath.Configuration parseContext = com.jayway.jsonpath.Configuration\n              .defaultConfiguration()\n              .addOptions(Option.SUPPRESS_EXCEPTIONS);\n\n      Object responseBody = httpResponse.body();\n      String stringBody = safeCastHttpBodyToString(responseBody);\n      String message = JsonPath.using(parseContext).parse(stringBody).read(ERROR_MESSAGE_PATH);\n      if (message == null)\n      {\n        message = \"Unknown error, HTTP Status: \" + httpResponse.statusCode();\n      }\n      log.error(\"Request failed: {}\", message);\n      throw new ApiRequestException(message, httpResponse);\n    }\n  }\n\n  private String safeCastHttpBodyToString(Object responseBody)\n  {\n    if (responseBody instanceof byte[])\n    {\n      return new String((byte[]) responseBody);\n    } else if (responseBody instanceof String)\n    {\n      return (String) responseBody;\n    }\n    return \"\";\n  }\n\n  private <T> T readValue(String content, Class<T> valueType) throws JsonProcessingException {\n    return objectMapper.readValue(content, valueType);\n  }\n\n\n}\n",
            "error": "",
            "span_id": 13744375717775943564
        },
        {
            "input": "src/main/java/io/simplelocalize/cli/client/dto/DownloadableFile.java",
            "output": "package io.simplelocalize.cli.client.dto;\n\n\nimport io.micronaut.core.annotation.Introspected;\n\nimport java.util.Objects;\n\n@Introspected\npublic class DownloadableFile\n{\n  private String url;\n  private String namespace;\n  private String language;\n\n  public void setUrl(String url)\n  {\n    this.url = url;\n  }\n\n  public String getNamespace()\n  {\n    return namespace;\n  }\n\n  public void setNamespace(String namespace)\n  {\n    this.namespace = namespace;\n  }\n\n  public String getUrl()\n  {\n    return url;\n  }\n\n  public String getLanguage()\n  {\n    return language;\n  }\n\n  public void setLanguage(String language)\n  {\n    this.language = language;\n  }\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    DownloadableFile that = (DownloadableFile) o;\n    return Objects.equals(url, that.url) && Objects.equals(namespace, that.namespace) && Objects.equals(language, that.language);\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return Objects.hash(url, namespace, language);\n  }\n\n\n  public static final class DownloadableFileBuilder\n  {\n    private String url;\n    private String namespace;\n    private String language;\n\n    private DownloadableFileBuilder()\n    {\n    }\n\n    public static DownloadableFileBuilder aDownloadableFile()\n    {\n      return new DownloadableFileBuilder();\n    }\n\n    public DownloadableFileBuilder withUrl(String url)\n    {\n      this.url = url;\n      return this;\n    }\n\n    public DownloadableFileBuilder withNamespace(String namespace)\n    {\n      this.namespace = namespace;\n      return this;\n    }\n\n    public DownloadableFileBuilder withLanguage(String language)\n    {\n      this.language = language;\n      return this;\n    }\n\n    public DownloadableFile build()\n    {\n      DownloadableFile downloadableFile = new DownloadableFile();\n      downloadableFile.url = this.url;\n      downloadableFile.language = this.language;\n      downloadableFile.namespace = this.namespace;\n      return downloadableFile;\n    }\n  }\n}\n",
            "error": "",
            "span_id": 2448950783180456945
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 12253870233156377031
        }
    ]
}