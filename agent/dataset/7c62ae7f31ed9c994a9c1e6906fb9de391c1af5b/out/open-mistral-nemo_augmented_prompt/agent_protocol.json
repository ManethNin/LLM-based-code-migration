{
    "validate_diffs": [],
    "compile_maven": [],
    "read_file": [
        {
            "input": "onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl/ServiceDateUserType.java",
            "output": "/**\n * Copyright (C) 2011 Brian Ferris <bdferris@onebusaway.org>\n * Copyright (C) 2011 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.onebusaway.gtfs.impl;\n\nimport java.io.Serializable;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Types;\nimport java.text.ParseException;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.engine.spi.SessionImplementor;\nimport org.hibernate.usertype.UserType;\nimport org.onebusaway.gtfs.model.calendar.ServiceDate;\n\npublic class ServiceDateUserType implements UserType {\n\n  private static final int[] SQL_TYPES = {Types.VARCHAR};\n\n  @Override\n  public Class<?> returnedClass() {\n    return ServiceDate.class;\n  }\n\n  @Override\n  public int[] sqlTypes() {\n    return SQL_TYPES;\n  }\n\n  @Override\n  public boolean equals(Object x, Object y) throws HibernateException {\n    return x == y;\n  }\n\n  @Override\n  public int hashCode(Object x) throws HibernateException {\n    return x.hashCode();\n  }\n\n  @Override\n  public boolean isMutable() {\n    return false;\n  }\n\n  @Override\n  public Object deepCopy(Object value) throws HibernateException {\n    if (value == null) {\n      return null;\n    }\n    return new ServiceDate((ServiceDate) value);\n  }\n\n  @Override\n  public Object nullSafeGet(ResultSet rs, String[] names, SessionImplementor sessionImplementor, Object owner)\n      throws HibernateException, SQLException {\n\n    String value = rs.getString(names[0]);\n\n    if (rs.wasNull())\n      return null;\n\n    try {\n      return ServiceDate.parseString(value);\n    } catch (ParseException ex) {\n      throw new SQLException(\"error parsing service date value: \" + value, ex);\n    }\n  }\n\n  @Override\n  public void nullSafeSet(PreparedStatement st, Object value, int index, SessionImplementor sessionImplementor)\n      throws HibernateException, SQLException {\n\n    if (value == null) {\n      st.setNull(index, SQL_TYPES[0]);\n    } else {\n      ServiceDate serviceDate = (ServiceDate) value;\n      st.setString(index, serviceDate.getAsString());\n    }\n  }\n\n  @Override\n  public Object assemble(Serializable cached, Object owner)\n      throws HibernateException {\n    return deepCopy(cached);\n  }\n\n  @Override\n  public Serializable disassemble(Object value) throws HibernateException {\n    return (Serializable) deepCopy(value);\n  }\n\n  @Override\n  public Object replace(Object original, Object target, Object owner)\n      throws HibernateException {\n    if (original == null)\n      return null;\n    return deepCopy(original);\n  }\n}\n",
            "error": "",
            "span_id": 8787570627019761769
        },
        {
            "input": "onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl/HibernateOperationsImpl.java",
            "output": "/**\n * Copyright (C) 2011 Brian Ferris <bdferris@onebusaway.org>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.onebusaway.gtfs.impl;\n\nimport java.io.Serializable;\nimport java.sql.SQLException;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.Transaction;\nimport org.onebusaway.gtfs.services.HibernateOperation;\nimport org.onebusaway.gtfs.services.HibernateOperations;\n\n/**\n * Manually manage hibernate operations instead of via Spring.  This\n * does essentially the same as the Spring Transactional annotation.\n * Refactored for Hibernate4 where some of the hibernate semantics have changed!\n */\npublic class HibernateOperationsImpl implements HibernateOperations {\n\n  private static final int BUFFER_SIZE = 1000;\n\n  private SessionFactory _sessionFactory;\n\n  private Session _session;\n\n  private int _count = 0;\n\n  public HibernateOperationsImpl() {\n\n  }\n\n  public HibernateOperationsImpl(SessionFactory sessionFactory) {\n    setSessionFactory(sessionFactory);\n  }\n  \n  @Override\n  public SessionFactory getSessionFactory() {\n    return _sessionFactory;\n  }\n\n  public void setSessionFactory(SessionFactory sessionFactory) {\n    _sessionFactory = sessionFactory;\n  }\n\n  @Override\n  public void open() {\n    _session = _sessionFactory.openSession();\n    _session.beginTransaction();\n  }\n\n  @Override\n  public void close() {\n    Transaction tx = _session.getTransaction();\n    tx.commit();\n\n    _session.close();\n    _session = null;\n  }\n\n  @Override\n  public Object execute(HibernateOperation callback) {\n    if (_session == null) {\n      // re-use the session if already active\n      Session session = _sessionFactory.getCurrentSession();\n      if (session == null) {\n        session = _sessionFactory.openSession();\n      }\n      Transaction tx;\n      if (session.getTransaction() != null\n        && session.getTransaction().isActive()) {\n        // re-use existing transactions, beginTransaction is no-longer reentrant\n        tx = session.getTransaction();\n\n      } else {\n        tx = session.beginTransaction();\n      }\n\n      try {\n        Object result = callback.doInHibernate(session);\n        tx.commit();\n        return result;\n      } catch (Exception ex) {\n        tx.rollback();\n        throw new IllegalStateException(ex);\n      } finally {\n        if (session.isOpen()) {\n          // close is no longer re-entrant\n          session.close();\n        }\n      }\n    } else {\n      try {\n        return callback.doInHibernate(_session);\n      } catch (Exception ex) {\n        throw new IllegalStateException(ex);\n      }\n    }\n  }\n\n  @Override\n  public <T> List<T> find(String queryString) {\n    return findWithNamedParams(queryString, null, null);\n  }\n\n  @Override\n  public <T> List<T> findWithNamedParam(String queryString, String paramName,\n      Object value) {\n    return findWithNamedParams(queryString, new String[] {paramName},\n        new Object[] {value});\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  public <T> List<T> findWithNamedParams(final String queryString,\n      final String[] paramNames, final Object[] values) {\n    return (List<T>) execute(new HibernateOperation() {\n      public Object doInHibernate(Session session) throws HibernateException {\n        Query queryObject = session.createQuery(queryString);\n        if (values != null) {\n          for (int i = 0; i < values.length; i++)\n            applyNamedParameterToQuery(queryObject, paramNames[i], values[i]);\n        }\n        return queryObject.list();\n      }\n    });\n  }\n\n  @Override\n  public <T> List<T> findByNamedQuery(String namedQuery) {\n    return findByNamedQueryAndNamedParams(namedQuery, null, null);\n  }\n\n  @Override\n  public <T> List<T> findByNamedQueryAndNamedParam(final String namedQuery,\n      String paramName, Object paramValue) {\n    return findByNamedQueryAndNamedParams(namedQuery, new String[] {paramName},\n        new Object[] {paramValue});\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  public <T> List<T> findByNamedQueryAndNamedParams(final String namedQuery,\n      final String[] paramNames, final Object[] values) {\n    return (List<T>) execute(new HibernateOperation() {\n      public Object doInHibernate(Session session) throws HibernateException {\n        Query queryObject = session.getNamedQuery(namedQuery);\n        if (values != null) {\n          for (int i = 0; i < values.length; i++)\n            applyNamedParameterToQuery(queryObject, paramNames[i], values[i]);\n        }\n        return queryObject.list();\n      }\n    });\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public <T> T get(final Class<T> entityType, final Serializable id) {\n    return (T) execute(new HibernateOperation() {\n      public Object doInHibernate(Session session) throws HibernateException {\n        return session.get(entityType, id);\n      }\n    });\n  }\n\n  @Override\n  public void update(final Object entity) {\n    execute(new HibernateOperation() {\n      @Override\n      public Object doInHibernate(Session session) throws HibernateException,\n          SQLException {\n        session.update(entity);\n        return null;\n      }\n    });\n  }\n\n  @Override\n  public void save(final Object entity) {\n    execute(new HibernateOperation() {\n      @Override\n      public Object doInHibernate(Session session) throws HibernateException,\n          SQLException {\n\n        Object obj = session.save(entity);\n\n        _count++;\n\n        if (_count >= BUFFER_SIZE) {\n          session.flush();\n          session.clear();\n          _count = 0;\n        }\n\n        return obj;\n      }\n    });\n  }\n\n  @Override\n  public void saveOrUpdate(final Object entity) {\n    execute(new HibernateOperation() {\n      @Override\n      public Object doInHibernate(Session session) throws HibernateException,\n          SQLException {\n\n        session.saveOrUpdate(entity);\n\n        _count++;\n\n        if (_count >= BUFFER_SIZE) {\n          session.flush();\n          session.clear();\n          _count = 0;\n        }\n\n        return null;\n      }\n    });\n  }\n\n  @Override\n  public <T> void clearAllEntitiesForType(final Class<T> type) {\n    execute(new HibernateOperation() {\n      @Override\n      public Object doInHibernate(Session session) throws HibernateException,\n          SQLException {\n        Query query = session.createQuery(\"delete from \" + type.getName());\n        return query.executeUpdate();\n      }\n    });\n  }\n\n  @Override\n  public <T> void removeEntity(final T entity) {\n    execute(new HibernateOperation() {\n      @Override\n      public Object doInHibernate(Session session) throws HibernateException,\n          SQLException {\n        session.delete(entity);\n        return null;\n      }\n    });\n  }\n\n  @Override\n  public void flush() {\n    execute(new HibernateOperation() {\n      public Object doInHibernate(Session session) throws HibernateException {\n        session.flush();\n        _count = 0;\n        return null;\n      }\n    });\n  }\n\n  protected void applyNamedParameterToQuery(Query queryObject,\n      String paramName, Object value) throws HibernateException {\n\n    if (value instanceof Collection<?>) {\n      queryObject.setParameterList(paramName, (Collection<?>) value);\n    } else if (value instanceof Object[]) {\n      queryObject.setParameterList(paramName, (Object[]) value);\n    } else {\n      queryObject.setParameter(paramName, value);\n    }\n  }\n}\n",
            "error": "",
            "span_id": 17862454042075313714
        },
        {
            "input": "onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl/HibernateGtfsRelationalDaoImpl.java",
            "output": "/**\n * Copyright (C) 2011 Brian Ferris <bdferris@onebusaway.org>\n * Copyright (C) 2011 Google, Inc.\n * Copyright (C) 2011 Laurent Gregoire <laurent.gregoire@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.onebusaway.gtfs.impl;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport org.hibernate.SessionFactory;\nimport org.onebusaway.gtfs.model.*;\nimport org.onebusaway.gtfs.services.GtfsMutableRelationalDao;\nimport org.onebusaway.gtfs.services.GtfsRelationalDao;\nimport org.onebusaway.gtfs.services.HibernateOperation;\nimport org.onebusaway.gtfs.services.HibernateOperations;\n\npublic class HibernateGtfsRelationalDaoImpl implements GtfsMutableRelationalDao {\n\n  protected HibernateOperations _ops;\n\n  public HibernateGtfsRelationalDaoImpl() {\n\n  }\n\n  public HibernateGtfsRelationalDaoImpl(SessionFactory sessionFactory) {\n    setSessionFactory(sessionFactory);\n  }\n\n  public void setSessionFactory(SessionFactory sessionFactory) {\n    _ops = new HibernateOperationsImpl(sessionFactory);\n  }\n\n  public SessionFactory getSessionFactory() {\n    if (_ops == null)\n      return null;\n    return _ops.getSessionFactory();\n  }\n\n  public Object execute(HibernateOperation callback) {\n    return _ops.execute(callback);\n  }\n\n  @Override\n  public <T> Collection<T> getAllEntitiesForType(Class<T> type) {\n    return _ops.find(\"from \" + type.getName());\n  }\n\n  @Override\n  public <T> T getEntityForId(Class<T> type, Serializable id) {\n    return (T) _ops.get(type, id);\n  }\n\n  @Override\n  public List<Agency> getAllAgencies() {\n    return _ops.find(\"from Agency\");\n  }\n\n  @Override\n  public List<Block> getAllBlocks() {\n    return _ops.find(\"from Block\");\n  }\n  \n  @Override\n  public List<ServiceCalendar> getAllCalendars() {\n    return _ops.find(\"FROM ServiceCalendar\");\n  }\n\n  @Override\n  public List<ServiceCalendarDate> getAllCalendarDates() {\n    return _ops.find(\"FROM ServiceCalendarDate\");\n  }\n\n  @Override\n  public Collection<FareAttribute> getAllFareAttributes() {\n    return _ops.find(\"FROM FareAttribute\");\n  }\n\n  @Override\n  public Collection<FareRule> getAllFareRules() {\n    return _ops.find(\"FROM FareRule\");\n  }\n\n  @Override\n  public Collection<FeedInfo> getAllFeedInfos() {\n    return _ops.find(\"FROM FeedInfo\");\n  }\n\n  @Override\n  public Collection<Frequency> getAllFrequencies() {\n    return _ops.find(\"FROM Frequency\");\n  }\n\n  @Override\n  public List<Route> getAllRoutes() {\n    return _ops.find(\"FROM Route route\");\n  }\n\n  @Override\n  public List<Stop> getAllStops() {\n    return _ops.find(\"FROM Stop\");\n  }\n\n  @Override\n  public List<Pathway> getAllPathways() {\n    return _ops.find(\"FROM Pathway\");\n  }\n\n  @Override\n  public List<Level> getAllLevels() {\n    return _ops.find(\"FROM Level\");\n  }\n\n  @Override\n  public List<Trip> getAllTrips() {\n    return _ops.find(\"FROM Trip\");\n  }\n\n  @Override\n  public List<StopTime> getAllStopTimes() {\n    return _ops.find(\"FROM StopTime\");\n  }\n\n  @Override\n  public Collection<ShapePoint> getAllShapePoints() {\n    return _ops.find(\"FROM ShapePoint\");\n  }\n\n  @Override\n  public Collection<Transfer> getAllTransfers() {\n    return _ops.find(\"FROM Transfer\");\n  }\n\n  @Override\n  public Collection<Ridership> getAllRiderships() { return _ops.find(\"FROM Ridership\"); }\n\n  @Override\n  public Agency getAgencyForId(String id) {\n    return (Agency) _ops.get(Agency.class, id);\n  }\n\n  @Override\n  public Block getBlockForId(int id) {\n    return (Block) _ops.get(Block.class, id);\n  }\n\n  @Override\n  public FareAttribute getFareAttributeForId(AgencyAndId id) {\n    return (FareAttribute) _ops.get(FareAttribute.class, id);\n  }\n\n  @Override\n  public FareRule getFareRuleForId(int id) {\n    return (FareRule) _ops.get(FareRule.class, id);\n  }\n\n  @Override\n  public FeedInfo getFeedInfoForId(String id) {\n    return (FeedInfo) _ops.get(FeedInfo.class, id);\n  }\n\n  @Override\n  public Frequency getFrequencyForId(int id) {\n    return (Frequency) _ops.get(Frequency.class, id);\n  }\n\n  @Override\n  public Pathway getPathwayForId(AgencyAndId agencyAndId) {\n    return (Pathway) _ops.get(Pathway.class, agencyAndId);\n  }\n\n  @Override\n  public Level getLevelForId(AgencyAndId agencyAndId) {\n    return (Level) _ops.get(Level.class, agencyAndId);\n  }\n\n  @Override\n  public Route getRouteForId(AgencyAndId id) {\n    return (Route) _ops.get(Route.class, id);\n  }\n\n  @Override\n  public ServiceCalendar getCalendarForId(int id) {\n    return (ServiceCalendar) _ops.get(ServiceCalendar.class, id);\n  }\n\n  @Override\n  public ServiceCalendarDate getCalendarDateForId(int id) {\n    return (ServiceCalendarDate) _ops.get(ServiceCalendarDate.class, id);\n  }\n\n  @Override\n  public ShapePoint getShapePointForId(int id) {\n    return (ShapePoint) _ops.get(ShapePoint.class, id);\n  }\n\n  @Override\n  public Stop getStopForId(AgencyAndId agencyAndId) {\n    return (Stop) _ops.get(Stop.class, agencyAndId);\n  }\n\n  @Override\n  public StopTime getStopTimeForId(int id) {\n    return (StopTime) _ops.get(StopTime.class, id);\n  }\n\n  @Override\n  public Transfer getTransferForId(int id) {\n    return (Transfer) _ops.get(Transfer.class, id);\n  }\n\n  @Override\n  public Trip getTripForId(AgencyAndId id) {\n    return (Trip) _ops.get(Trip.class, id);\n  }\n\n  @Override\n  public Collection<Area> getAllAreas() {\n    return _ops.find(\"from Area\");\n  }\n\n  @Override\n  public Collection<LocationGroupElement> getAllLocationGroupElements() {\n    Collection<LocationGroup> groups = _ops.find(\"FROM LocationGroup\");\n    return groups.stream().flatMap(group -> group.getLocations().stream().map(stopLocation -> {\n      LocationGroupElement locationGroupElement = new LocationGroupElement();\n      locationGroupElement.setLocationGroupId(group.getId());\n      locationGroupElement.setName(group.getName());\n      locationGroupElement.setLocation(stopLocation);\n      return locationGroupElement;\n    })).collect(Collectors.toList());\n  }\n\n  @Override\n  public Collection<LocationGroup> getAllLocationGroups() {\n    return _ops.find(\"FROM LocationGroup\");\n  }\n\n  @Override\n  public Collection<Location> getAllLocations() {\n    return _ops.find(\"FROM Location\");\n  }\n\n  @Override\n  public Collection<BookingRule> getAllBookingRules() {\n    return _ops.find(\"from BookingRule\");\n  }\n\n  @Override\n  public Collection<Translation> getAllTranslations() {\n    return _ops.find(\"from Translation\");\n  }\n\n  /****\n   * {@link GtfsRelationalDao} Interface\n   ****/\n\n  @Override\n  public List<String> getTripAgencyIdsReferencingServiceId(AgencyAndId serviceId) {\n    return _ops.findByNamedQueryAndNamedParam(\"agencyIdsReferencingServiceId\",\n        \"serviceId\", serviceId);\n  }\n\n  @Override\n  public List<Route> getRoutesForAgency(Agency agency) {\n    return _ops.findByNamedQueryAndNamedParam(\"routesForAgency\", \"agency\",\n        agency);\n  }\n\n  @Override\n  public List<Stop> getStopsForStation(Stop station) {\n    String[] names = { \"stationId\", \"agencyId\" };\n    Object[] values = { station.getId().getId(), station.getId().getAgencyId() };\n    return _ops.findByNamedQueryAndNamedParams(\"stopsForStation\", names, values);\n  }\n\n  @Override\n  public List<Trip> getTripsForRoute(Route route) {\n    return _ops.findByNamedQueryAndNamedParam(\"tripsByRoute\", \"route\", route);\n  }\n  \n\n  @Override\n  public List<Trip> getTripsForShapeId(AgencyAndId shapeId) {\n    return _ops.findByNamedQueryAndNamedParam(\"tripsByShapeId\", \"shapeId\", shapeId);\n  }\n\n  @Override\n  public List<Trip> getTripsForServiceId(AgencyAndId serviceId) {\n    return _ops.findByNamedQueryAndNamedParam(\"tripsByServiceId\", \"serviceId\", serviceId);\n  }\n\n  @Override\n  public List<Trip> getTripsForBlockId(AgencyAndId blockId) {\n    String[] names = {\"agencyId\", \"blockId\"};\n    Object[] values = {blockId.getAgencyId(), blockId.getId()};\n    return _ops.findByNamedQueryAndNamedParams(\"tripsByBlockId\", names, values);\n  }\n\n  @Override\n  public List<StopTime> getStopTimesForTrip(Trip trip) {\n    return _ops.findByNamedQueryAndNamedParam(\"stopTimesByTrip\", \"trip\", trip);\n  }\n\n  @Override\n  public List<StopTime> getStopTimesForStop(Stop stop) {\n    return _ops.findByNamedQueryAndNamedParam(\"stopTimesByStop\", \"stop\", stop);\n  }\n\n  @Override\n  public List<AgencyAndId> getAllShapeIds() {\n    return _ops.findByNamedQuery(\"allShapeIds\");\n  }\n\n  @Override\n  public List<ShapePoint> getShapePointsForShapeId(AgencyAndId shapeId) {\n    return _ops.findByNamedQueryAndNamedParam(\"shapePointsForShapeId\",\n        \"shapeId\", shapeId);\n  }\n\n  @Override\n  public List<Frequency> getFrequenciesForTrip(Trip trip) {\n    return _ops.findByNamedQueryAndNamedParam(\"frequenciesForTrip\", \"trip\",\n        trip);\n  }\n  \n  @Override\n  public List<AgencyAndId> getAllServiceIds() {\n    List<AgencyAndId> calendarIds = _ops.findByNamedQuery(\"calendarServiceIds\");\n    List<AgencyAndId> calendarDateIds = _ops.findByNamedQuery(\"calendarDateServiceIds\");\n    Set<AgencyAndId> allIds = new HashSet<AgencyAndId>();\n    allIds.addAll(calendarIds);\n    allIds.addAll(calendarDateIds);\n    return new ArrayList<AgencyAndId>(allIds);\n  }\n\n  @Override\n  public List<ServiceCalendarDate> getCalendarDatesForServiceId(\n      AgencyAndId serviceId) {\n    return _ops.findByNamedQueryAndNamedParam(\"calendarDatesForServiceId\",\n        \"serviceId\", serviceId);\n  }\n\n  @Override\n  public ServiceCalendar getCalendarForServiceId(AgencyAndId serviceId) {\n\n    List<ServiceCalendar> calendars = _ops.findByNamedQueryAndNamedParam(\n        \"calendarsForServiceId\", \"serviceId\", serviceId);\n\n    switch (calendars.size()) {\n      case 0:\n        return null;\n      case 1:\n        return calendars.get(0);\n    }\n\n    throw new MultipleCalendarsForServiceIdException(serviceId);\n  }\n\n  @Override\n  public List<FareRule> getFareRulesForFareAttribute(FareAttribute fareAttribute) {\n    return _ops.findByNamedQueryAndNamedParam(\"fareRulesForFareAttribute\",\n        \"fareAttribute\", fareAttribute);\n  }\n\n  @Override\n  public List<Ridership> getRidershipForTrip(AgencyAndId tripId) {\n    return _ops.findByNamedQueryAndNamedParam(\"ridershipsForTripId\",\n            \"tripId\", tripId.getId());\n  }\n\n  /****\n   * Mutable Methods\n   ****/\n\n  @Override\n  public void open() {\n    _ops.open();\n  }\n\n  @Override\n  public void close() {\n    _ops.close();\n  }\n\n  @Override\n  public void flush() {\n    _ops.flush();\n  }\n\n  @Override\n  public <K extends Serializable, T extends IdentityBean<K>> void removeEntity(\n      T entity) {\n    _ops.removeEntity(entity);\n  }\n\n  @Override\n  public void updateEntity(Object entity) {\n    _ops.update(entity);\n  }\n\n  @Override\n  public void saveEntity(Object entity) {\n    _ops.save(entity);\n  }\n\n  @Override\n  public void saveOrUpdateEntity(Object entity) {\n    _ops.saveOrUpdate(entity);\n  }\n\n  @Override\n  public <T> void clearAllEntitiesForType(Class<T> type) {\n    _ops.clearAllEntitiesForType(type);\n  }\n}",
            "error": "",
            "span_id": 1797342050875856369
        }
    ],
    "get_directory_tree": [
        {
            "input": "onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl",
            "output": "[\n    {\n        \"name\": \"ServiceDateUserType.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"HibernateOperationsImpl.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"HibernateGtfsRelationalDaoImpl.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 17642906846718288486
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}