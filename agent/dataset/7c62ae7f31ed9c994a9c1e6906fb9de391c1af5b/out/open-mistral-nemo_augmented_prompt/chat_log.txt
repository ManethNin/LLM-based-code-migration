================================ System Message ================================

Act as an expert Java software developer.
The program has issues after a version upgrade of a dependency.
Try using minimal changes to the code to fix the issues. 
Do not explain your actions or ask questions, just provide diffs that always adhere to the rules.
When you think you are done, reply with the diff that fixes the issues, after that a final verification step will happen and the conversation will be ended if it was successful. If not you get the error back.

# File editing rules:
Return edits similar to unified diffs that `diff -U0` would produce.
The diff has to be in a markdown code block, like this: ```diff ```.

Make sure you include the first 2 lines with the file paths.
Don't include timestamps with the file paths.

Start each hunk of changes with a `@@ ... @@` line.
Don't include line numbers like `diff -U0` does.
The user's patch tool doesn't need them.

The user's patch tool needs CORRECT patches that apply cleanly against the current contents of the file!
Think carefully and make sure you include and mark all lines that need to be removed or changed as `-` lines.
Make sure you mark all new or modified lines with `+`.
Don't leave out any lines or the diff patch won't apply correctly.
Dont add in new comments or change existing comments.
Make sure the diff is minimal and only includes the changes needed to fix the issue plus at least one context line so the tool can apply the diff correctly.

Indentation matters in the diffs!

Start a new hunk for each section of the file that needs changes.
Dont include unnescessary context, but include at least one line of it.
If no context is included, the tool will try to apply the changes at the end of the line.

Only output hunks that specify changes with `+` or `-` lines.
Skip any hunks that are entirely unchanging ` ` lines.

Output hunks in whatever order makes the most sense.
Hunks don't need to be in any particular order.

When editing a function, method, loop, etc use a hunk to replace the *entire* code block.
Delete the entire existing version with `-` lines and then add a new, updated version with `+` lines.
This will help you generate correct code and correct diffs.

To make a new file, show a diff from `--- /dev/null` to `+++ path/to/new/file.ext`.


================================ Human Message =================================


Updated Dependency Details: org.hibernate:hibernate-core 4.0.1.Final -> 5.4.24.Final

Initial Error: [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.0:compile (default-compile) on project onebusaway-gtfs-hibernate: Compilation failure: Compilation failure:
[ERROR] onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl/ServiceDateUserType.java:[31,8] org.onebusaway.gtfs.impl.ServiceDateUserType is not abstract and does not override abstract method nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.spi.SharedSessionContractImplementor) in org.hibernate.usertype.UserType
[ERROR] onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl/ServiceDateUserType.java:[68,3] method does not override or implement a method from a supertype
[ERROR] onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl/ServiceDateUserType.java:[84,3] method does not override or implement a method from a supertype
[ERROR] -> [Help 1]

Revapi/japicmp API Changes, which describe changes in the APIs used by this project: {"japicmpResult": {}, "elementLines": {}, "revapiResult": {}, "allPotentialBreakingElements": [], "elementPatterns": {}, "project": "onebusaway-gtfs-modules"}


================================== Ai Message ==================================
Tool Calls:
  get_directory_tree_for_path (z4zgaxKK8)
 Call ID: z4zgaxKK8
  Args:
    relative_directory_path: onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl

================================= Tool Message =================================
Name: get_directory_tree_for_path

[
    {
        "name": "ServiceDateUserType.java",
        "type": "file"
    },
    {
        "name": "HibernateOperationsImpl.java",
        "type": "file"
    },
    {
        "name": "HibernateGtfsRelationalDaoImpl.java",
        "type": "file"
    }
]

================================== Ai Message ==================================
Tool Calls:
  read_file (G7wcaAEBB)
 Call ID: G7wcaAEBB
  Args:
    file_path: onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl/ServiceDateUserType.java
  read_file (H6DBUgOUO)
 Call ID: H6DBUgOUO
  Args:
    file_path: onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl/HibernateOperationsImpl.java
  read_file (nj0QMSkaM)
 Call ID: nj0QMSkaM
  Args:
    file_path: onebusaway-gtfs-hibernate/src/main/java/org/onebusaway/gtfs/impl/HibernateGtfsRelationalDaoImpl.java

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2011 Brian Ferris <bdferris@onebusaway.org>
 * Copyright (C) 2011 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.onebusaway.gtfs.impl;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.ParseException;

import org.hibernate.HibernateException;
import org.hibernate.engine.spi.SessionImplementor;
import org.hibernate.usertype.UserType;
import org.onebusaway.gtfs.model.calendar.ServiceDate;

public class ServiceDateUserType implements UserType {

  private static final int[] SQL_TYPES = {Types.VARCHAR};

  @Override
  public Class<?> returnedClass() {
    return ServiceDate.class;
  }

  @Override
  public int[] sqlTypes() {
    return SQL_TYPES;
  }

  @Override
  public boolean equals(Object x, Object y) throws HibernateException {
    return x == y;
  }

  @Override
  public int hashCode(Object x) throws HibernateException {
    return x.hashCode();
  }

  @Override
  public boolean isMutable() {
    return false;
  }

  @Override
  public Object deepCopy(Object value) throws HibernateException {
    if (value == null) {
      return null;
    }
    return new ServiceDate((ServiceDate) value);
  }

  @Override
  public Object nullSafeGet(ResultSet rs, String[] names, SessionImplementor sessionImplementor, Object owner)
      throws HibernateException, SQLException {

    String value = rs.getString(names[0]);

    if (rs.wasNull())
      return null;

    try {
      return ServiceDate.parseString(value);
    } catch (ParseException ex) {
      throw new SQLException("error parsing service date value: " + value, ex);
    }
  }

  @Override
  public void nullSafeSet(PreparedStatement st, Object value, int index, SessionImplementor sessionImplementor)
      throws HibernateException, SQLException {

    if (value == null) {
      st.setNull(index, SQL_TYPES[0]);
    } else {
      ServiceDate serviceDate = (ServiceDate) value;
      st.setString(index, serviceDate.getAsString());
    }
  }

  @Override
  public Object assemble(Serializable cached, Object owner)
      throws HibernateException {
    return deepCopy(cached);
  }

  @Override
  public Serializable disassemble(Object value) throws HibernateException {
    return (Serializable) deepCopy(value);
  }

  @Override
  public Object replace(Object original, Object target, Object owner)
      throws HibernateException {
    if (original == null)
      return null;
    return deepCopy(original);
  }
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2011 Brian Ferris <bdferris@onebusaway.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.onebusaway.gtfs.impl;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.onebusaway.gtfs.services.HibernateOperation;
import org.onebusaway.gtfs.services.HibernateOperations;

/**
 * Manually manage hibernate operations instead of via Spring.  This
 * does essentially the same as the Spring Transactional annotation.
 * Refactored for Hibernate4 where some of the hibernate semantics have changed!
 */
public class HibernateOperationsImpl implements HibernateOperations {

  private static final int BUFFER_SIZE = 1000;

  private SessionFactory _sessionFactory;

  private Session _session;

  private int _count = 0;

  public HibernateOperationsImpl() {

  }

  public HibernateOperationsImpl(SessionFactory sessionFactory) {
    setSessionFactory(sessionFactory);
  }
  
  @Override
  public SessionFactory getSessionFactory() {
    return _sessionFactory;
  }

  public void setSessionFactory(SessionFactory sessionFactory) {
    _sessionFactory = sessionFactory;
  }

  @Override
  public void open() {
    _session = _sessionFactory.openSession();
    _session.beginTransaction();
  }

  @Override
  public void close() {
    Transaction tx = _session.getTransaction();
    tx.commit();

    _session.close();
    _session = null;
  }

  @Override
  public Object execute(HibernateOperation callback) {
    if (_session == null) {
      // re-use the session if already active
      Session session = _sessionFactory.getCurrentSession();
      if (session == null) {
        session = _sessionFactory.openSession();
      }
      Transaction tx;
      if (session.getTransaction() != null
        && session.getTransaction().isActive()) {
        // re-use existing transactions, beginTransaction is no-longer reentrant
        tx = session.getTransaction();

      } else {
        tx = session.beginTransaction();
      }

      try {
        Object result = callback.doInHibernate(session);
        tx.commit();
        return result;
      } catch (Exception ex) {
        tx.rollback();
        throw new IllegalStateException(ex);
      } finally {
        if (session.isOpen()) {
          // close is no longer re-entrant
          session.close();
        }
      }
    } else {
      try {
        return callback.doInHibernate(_session);
      } catch (Exception ex) {
        throw new IllegalStateException(ex);
      }
    }
  }

  @Override
  public <T> List<T> find(String queryString) {
    return findWithNamedParams(queryString, null, null);
  }

  @Override
  public <T> List<T> findWithNamedParam(String queryString, String paramName,
      Object value) {
    return findWithNamedParams(queryString, new String[] {paramName},
        new Object[] {value});
  }

  @SuppressWarnings("unchecked")
  public <T> List<T> findWithNamedParams(final String queryString,
      final String[] paramNames, final Object[] values) {
    return (List<T>) execute(new HibernateOperation() {
      public Object doInHibernate(Session session) throws HibernateException {
        Query queryObject = session.createQuery(queryString);
        if (values != null) {
          for (int i = 0; i < values.length; i++)
            applyNamedParameterToQuery(queryObject, paramNames[i], values[i]);
        }
        return queryObject.list();
      }
    });
  }

  @Override
  public <T> List<T> findByNamedQuery(String namedQuery) {
    return findByNamedQueryAndNamedParams(namedQuery, null, null);
  }

  @Override
  public <T> List<T> findByNamedQueryAndNamedParam(final String namedQuery,
      String paramName, Object paramValue) {
    return findByNamedQueryAndNamedParams(namedQuery, new String[] {paramName},
        new Object[] {paramValue});
  }

  @SuppressWarnings("unchecked")
  public <T> List<T> findByNamedQueryAndNamedParams(final String namedQuery,
      final String[] paramNames, final Object[] values) {
    return (List<T>) execute(new HibernateOperation() {
      public Object doInHibernate(Session session) throws HibernateException {
        Query queryObject = session.getNamedQuery(namedQuery);
        if (values != null) {
          for (int i = 0; i < values.length; i++)
            applyNamedParameterToQuery(queryObject, paramNames[i], values[i]);
        }
        return queryObject.list();
      }
    });
  }

  @SuppressWarnings("unchecked")
  @Override
  public <T> T get(final Class<T> entityType, final Serializable id) {
    return (T) execute(new HibernateOperation() {
      public Object doInHibernate(Session session) throws HibernateException {
        return session.get(entityType, id);
      }
    });
  }

  @Override
  public void update(final Object entity) {
    execute(new HibernateOperation() {
      @Override
      public Object doInHibernate(Session session) throws HibernateException,
          SQLException {
        session.update(entity);
        return null;
      }
    });
  }

  @Override
  public void save(final Object entity) {
    execute(new HibernateOperation() {
      @Override
      public Object doInHibernate(Session session) throws HibernateException,
          SQLException {

        Object obj = session.save(entity);

        _count++;

        if (_count >= BUFFER_SIZE) {
          session.flush();
          session.clear();
          _count = 0;
        }

        return obj;
      }
    });
  }

  @Override
  public void saveOrUpdate(final Object entity) {
    execute(new HibernateOperation() {
      @Override
      public Object doInHibernate(Session session) throws HibernateException,
          SQLException {

        session.saveOrUpdate(entity);

        _count++;

        if (_count >= BUFFER_SIZE) {
          session.flush();
          session.clear();
          _count = 0;
        }

        return null;
      }
    });
  }

  @Override
  public <T> void clearAllEntitiesForType(final Class<T> type) {
    execute(new HibernateOperation() {
      @Override
      public Object doInHibernate(Session session) throws HibernateException,
          SQLException {
        Query query = session.createQuery("delete from " + type.getName());
        return query.executeUpdate();
      }
    });
  }

  @Override
  public <T> void removeEntity(final T entity) {
    execute(new HibernateOperation() {
      @Override
      public Object doInHibernate(Session session) throws HibernateException,
          SQLException {
        session.delete(entity);
        return null;
      }
    });
  }

  @Override
  public void flush() {
    execute(new HibernateOperation() {
      public Object doInHibernate(Session session) throws HibernateException {
        session.flush();
        _count = 0;
        return null;
      }
    });
  }

  protected void applyNamedParameterToQuery(Query queryObject,
      String paramName, Object value) throws HibernateException {

    if (value instanceof Collection<?>) {
      queryObject.setParameterList(paramName, (Collection<?>) value);
    } else if (value instanceof Object[]) {
      queryObject.setParameterList(paramName, (Object[]) value);
    } else {
      queryObject.setParameter(paramName, value);
    }
  }
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2011 Brian Ferris <bdferris@onebusaway.org>
 * Copyright (C) 2011 Google, Inc.
 * Copyright (C) 2011 Laurent Gregoire <laurent.gregoire@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.onebusaway.gtfs.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.hibernate.SessionFactory;
import org.onebusaway.gtfs.model.*;
import org.onebusaway.gtfs.services.GtfsMutableRelationalDao;
import org.onebusaway.gtfs.services.GtfsRelationalDao;
import org.onebusaway.gtfs.services.HibernateOperation;
import org.onebusaway.gtfs.services.HibernateOperations;

public class HibernateGtfsRelationalDaoImpl implements GtfsMutableRelationalDao {

  protected HibernateOperations _ops;

  public HibernateGtfsRelationalDaoImpl() {

  }

  public HibernateGtfsRelationalDaoImpl(SessionFactory sessionFactory) {
    setSessionFactory(sessionFactory);
  }

  public void setSessionFactory(SessionFactory sessionFactory) {
    _ops = new HibernateOperationsImpl(sessionFactory);
  }

  public SessionFactory getSessionFactory() {
    if (_ops == null)
      return null;
    return _ops.getSessionFactory();
  }

  public Object execute(HibernateOperation callback) {
    return _ops.execute(callback);
  }

  @Override
  public <T> Collection<T> getAllEntitiesForType(Class<T> type) {
    return _ops.find("from " + type.getName());
  }

  @Override
  public <T> T getEntityForId(Class<T> type, Serializable id) {
    return (T) _ops.get(type, id);
  }

  @Override
  public List<Agency> getAllAgencies() {
    return _ops.find("from Agency");
  }

  @Override
  public List<Block> getAllBlocks() {
    return _ops.find("from Block");
  }
  
  @Override
  public List<ServiceCalendar> getAllCalendars() {
    return _ops.find("FROM ServiceCalendar");
  }

  @Override
  public List<ServiceCalendarDate> getAllCalendarDates() {
    return _ops.find("FROM ServiceCalendarDate");
  }

  @Override
  public Collection<FareAttribute> getAllFareAttributes() {
    return _ops.find("FROM FareAttribute");
  }

  @Override
  public Collection<FareRule> getAllFareRules() {
    return _ops.find("FROM FareRule");
  }

  @Override
  public Collection<FeedInfo> getAllFeedInfos() {
    return _ops.find("FROM FeedInfo");
  }

  @Override
  public Collection<Frequency> getAllFrequencies() {
    return _ops.find("FROM Frequency");
  }

  @Override
  public List<Route> getAllRoutes() {
    return _ops.find("FROM Route route");
  }

  @Override
  public List<Stop> getAllStops() {
    return _ops.find("FROM Stop");
  }

  @Override
  public List<Pathway> getAllPathways() {
    return _ops.find("FROM Pathway");
  }

  @Override
  public List<Level> getAllLevels() {
    return _ops.find("FROM Level");
  }

  @Override
  public List<Trip> getAllTrips() {
    return _ops.find("FROM Trip");
  }

  @Override
  public List<StopTime> getAllStopTimes() {
    return _ops.find("FROM StopTime");
  }

  @Override
  public Collection<ShapePoint> getAllShapePoints() {
    return _ops.find("FROM ShapePoint");
  }

  @Override
  public Collection<Transfer> getAllTransfers() {
    return _ops.find("FROM Transfer");
  }

  @Override
  public Collection<Ridership> getAllRiderships() { return _ops.find("FROM Ridership"); }

  @Override
  public Agency getAgencyForId(String id) {
    return (Agency) _ops.get(Agency.class, id);
  }

  @Override
  public Block getBlockForId(int id) {
    return (Block) _ops.get(Block.class, id);
  }

  @Override
  public FareAttribute getFareAttributeForId(AgencyAndId id) {
    return (FareAttribute) _ops.get(FareAttribute.class, id);
  }

  @Override
  public FareRule getFareRuleForId(int id) {
    return (FareRule) _ops.get(FareRule.class, id);
  }

  @Override
  public FeedInfo getFeedInfoForId(String id) {
    return (FeedInfo) _ops.get(FeedInfo.class, id);
  }

  @Override
  public Frequency getFrequencyForId(int id) {
    return (Frequency) _ops.get(Frequency.class, id);
  }

  @Override
  public Pathway getPathwayForId(AgencyAndId agencyAndId) {
    return (Pathway) _ops.get(Pathway.class, agencyAndId);
  }

  @Override
  public Level getLevelForId(AgencyAndId agencyAndId) {
    return (Level) _ops.get(Level.class, agencyAndId);
  }

  @Override
  public Route getRouteForId(AgencyAndId id) {
    return (Route) _ops.get(Route.class, id);
  }

  @Override
  public ServiceCalendar getCalendarForId(int id) {
    return (ServiceCalendar) _ops.get(ServiceCalendar.class, id);
  }

  @Override
  public ServiceCalendarDate getCalendarDateForId(int id) {
    return (ServiceCalendarDate) _ops.get(ServiceCalendarDate.class, id);
  }

  @Override
  public ShapePoint getShapePointForId(int id) {
    return (ShapePoint) _ops.get(ShapePoint.class, id);
  }

  @Override
  public Stop getStopForId(AgencyAndId agencyAndId) {
    return (Stop) _ops.get(Stop.class, agencyAndId);
  }

  @Override
  public StopTime getStopTimeForId(int id) {
    return (StopTime) _ops.get(StopTime.class, id);
  }

  @Override
  public Transfer getTransferForId(int id) {
    return (Transfer) _ops.get(Transfer.class, id);
  }

  @Override
  public Trip getTripForId(AgencyAndId id) {
    return (Trip) _ops.get(Trip.class, id);
  }

  @Override
  public Collection<Area> getAllAreas() {
    return _ops.find("from Area");
  }

  @Override
  public Collection<LocationGroupElement> getAllLocationGroupElements() {
    Collection<LocationGroup> groups = _ops.find("FROM LocationGroup");
    return groups.stream().flatMap(group -> group.getLocations().stream().map(stopLocation -> {
      LocationGroupElement locationGroupElement = new LocationGroupElement();
      locationGroupElement.setLocationGroupId(group.getId());
      locationGroupElement.setName(group.getName());
      locationGroupElement.setLocation(stopLocation);
      return locationGroupElement;
    })).collect(Collectors.toList());
  }

  @Override
  public Collection<LocationGroup> getAllLocationGroups() {
    return _ops.find("FROM LocationGroup");
  }

  @Override
  public Collection<Location> getAllLocations() {
    return _ops.find("FROM Location");
  }

  @Override
  public Collection<BookingRule> getAllBookingRules() {
    return _ops.find("from BookingRule");
  }

  @Override
  public Collection<Translation> getAllTranslations() {
    return _ops.find("from Translation");
  }

  /****
   * {@link GtfsRelationalDao} Interface
   ****/

  @Override
  public List<String> getTripAgencyIdsReferencingServiceId(AgencyAndId serviceId) {
    return _ops.findByNamedQueryAndNamedParam("agencyIdsReferencingServiceId",
        "serviceId", serviceId);
  }

  @Override
  public List<Route> getRoutesForAgency(Agency agency) {
    return _ops.findByNamedQueryAndNamedParam("routesForAgency", "agency",
        agency);
  }

  @Override
  public List<Stop> getStopsForStation(Stop station) {
    String[] names = { "stationId", "agencyId" };
    Object[] values = { station.getId().getId(), station.getId().getAgencyId() };
    return _ops.findByNamedQueryAndNamedParams("stopsForStation", names, values);
  }

  @Override
  public List<Trip> getTripsForRoute(Route route) {
    return _ops.findByNamedQueryAndNamedParam("tripsByRoute", "route", route);
  }
  

  @Override
  public List<Trip> getTripsForShapeId(AgencyAndId shapeId) {
    return _ops.findByNamedQueryAndNamedParam("tripsByShapeId", "shapeId", shapeId);
  }

  @Override
  public List<Trip> getTripsForServiceId(AgencyAndId serviceId) {
    return _ops.findByNamedQueryAndNamedParam("tripsByServiceId", "serviceId", serviceId);
  }

  @Override
  public List<Trip> getTripsForBlockId(AgencyAndId blockId) {
    String[] names = {"agencyId", "blockId"};
    Object[] values = {blockId.getAgencyId(), blockId.getId()};
    return _ops.findByNamedQueryAndNamedParams("tripsByBlockId", names, values);
  }

  @Override
  public List<StopTime> getStopTimesForTrip(Trip trip) {
    return _ops.findByNamedQueryAndNamedParam("stopTimesByTrip", "trip", trip);
  }

  @Override
  public List<StopTime> getStopTimesForStop(Stop stop) {
    return _ops.findByNamedQueryAndNamedParam("stopTimesByStop", "stop", stop);
  }

  @Override
  public List<AgencyAndId> getAllShapeIds() {
    return _ops.findByNamedQuery("allShapeIds");
  }

  @Override
  public List<ShapePoint> getShapePointsForShapeId(AgencyAndId shapeId) {
    return _ops.findByNamedQueryAndNamedParam("shapePointsForShapeId",
        "shapeId", shapeId);
  }

  @Override
  public List<Frequency> getFrequenciesForTrip(Trip trip) {
    return _ops.findByNamedQueryAndNamedParam("frequenciesForTrip", "trip",
        trip);
  }
  
  @Override
  public List<AgencyAndId> getAllServiceIds() {
    List<AgencyAndId> calendarIds = _ops.findByNamedQuery("calendarServiceIds");
    List<AgencyAndId> calendarDateIds = _ops.findByNamedQuery("calendarDateServiceIds");
    Set<AgencyAndId> allIds = new HashSet<AgencyAndId>();
    allIds.addAll(calendarIds);
    allIds.addAll(calendarDateIds);
    return new ArrayList<AgencyAndId>(allIds);
  }

  @Override
  public List<ServiceCalendarDate> getCalendarDatesForServiceId(
      AgencyAndId serviceId) {
    return _ops.findByNamedQueryAndNamedParam("calendarDatesForServiceId",
        "serviceId", serviceId);
  }

  @Override
  public ServiceCalendar getCalendarForServiceId(AgencyAndId serviceId) {

    List<ServiceCalendar> calendars = _ops.findByNamedQueryAndNamedParam(
        "calendarsForServiceId", "serviceId", serviceId);

    switch (calendars.size()) {
      case 0:
        return null;
      case 1:
        return calendars.get(0);
    }

    throw new MultipleCalendarsForServiceIdException(serviceId);
  }

  @Override
  public List<FareRule> getFareRulesForFareAttribute(FareAttribute fareAttribute) {
    return _ops.findByNamedQueryAndNamedParam("fareRulesForFareAttribute",
        "fareAttribute", fareAttribute);
  }

  @Override
  public List<Ridership> getRidershipForTrip(AgencyAndId tripId) {
    return _ops.findByNamedQueryAndNamedParam("ridershipsForTripId",
            "tripId", tripId.getId());
  }

  /****
   * Mutable Methods
   ****/

  @Override
  public void open() {
    _ops.open();
  }

  @Override
  public void close() {
    _ops.close();
  }

  @Override
  public void flush() {
    _ops.flush();
  }

  @Override
  public <K extends Serializable, T extends IdentityBean<K>> void removeEntity(
      T entity) {
    _ops.removeEntity(entity);
  }

  @Override
  public void updateEntity(Object entity) {
    _ops.update(entity);
  }

  @Override
  public void saveEntity(Object entity) {
    _ops.save(entity);
  }

  @Override
  public void saveOrUpdateEntity(Object entity) {
    _ops.saveOrUpdate(entity);
  }

  @Override
  public <T> void clearAllEntitiesForType(Class<T> type) {
    _ops.clearAllEntitiesForType(type);
  }
}