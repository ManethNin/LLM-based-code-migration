package com.google.cloud.dns.spi.v1;

import static java.net.HttpURLConnection.HTTP_NOT_FOUND;
import com.google.api.client.googleapis.batch.BatchRequest;
import com.google.api.client.googleapis.batch.json.JsonBatchCallback;
import com.google.api.client.googleapis.json.GoogleJsonError;
import com.google.api.client.http.HttpHeaders;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.Change;
import com.google.api.services.dns.model.ChangesListResponse;
import com.google.api.services.dns.model.ManagedZone;
import com.google.api.services.dns.model.ManagedZonesListResponse;
import com.google.api.services.dns.model.Project;
import com.google.api.services.dns.model.ResourceRecordSet;
import com.google.api.services.dns.model.ResourceRecordSetsListResponse;
import com.google.cloud.dns.DnsException;
import com.google.cloud.dns.DnsOptions;
import com.google.cloud.http.HttpTransportOptions;
import java.io.IOException;
import java.util.Map;

/** A default implementation of the DnsRpc interface. */
public class HttpDnsRpc implements DnsRpc {
  private static final String SORT_BY = "changeSequence";

  private final Dns dns;

  private final DnsOptions options;

  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)
      throws IOException {
    return dns.managedZones()
        .create(this.options.getProjectId(), zone)
        .setFields(Option.FIELDS.getString(options));
  }

  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)
      throws IOException {
    return dns.managedZones()
        .get(this.options.getProjectId(), zoneName)
        .setFields(Option.FIELDS.getString(options));
  }

  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {
    return dns.managedZones()
        .list(this.options.getProjectId())
        .setFields(Option.FIELDS.getString(options))
        .setMaxResults(Option.PAGE_SIZE.getInt(options))
        .setDnsName(Option.DNS_NAME.getString(options))
        .setPageToken(Option.PAGE_TOKEN.getString(options));
  }

  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {
    return dns.managedZones().delete(this.options.getProjectId(), zoneName);
  }

  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)
      throws IOException {
    // options are fields, page token, dns name, type
    return dns.resourceRecordSets()
        .list(this.options.getProjectId(), zoneName)
        .setFields(Option.FIELDS.getString(options))
        .setPageToken(Option.PAGE_TOKEN.getString(options))
        .setMaxResults(Option.PAGE_SIZE.getInt(options))
        .setName(Option.NAME.getString(options))
        .setType(Option.DNS_TYPE.getString(options));
  }

  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {
    return dns.projects()
        .get(this.options.getProjectId())
        .setFields(Option.FIELDS.getString(options));
  }

  private Dns.Changes.Create applyChangeRequestCall(
      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {
    return dns.changes()
        .create(this.options.getProjectId(), zoneName, changeRequest)
        .setFields(Option.FIELDS.getString(options));
  }

  private Dns.Changes.Get getChangeRequestCall(
      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {
    return dns.changes()
        .get(this.options.getProjectId(), zoneName, changeRequestId)
        .setFields(Option.FIELDS.getString(options));
  }

  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)
      throws IOException {
    // options are fields, page token, page size, sort order
    Dns.Changes.List request =
        dns.changes()
            .list(this.options.getProjectId(), zoneName)
            .setFields(Option.FIELDS.getString(options))
            .setMaxResults(Option.PAGE_SIZE.getInt(options))
            .setPageToken(Option.PAGE_TOKEN.getString(options));
    if (Option.SORTING_ORDER.getString(options) != null) {
      // todo check and change if more sorting options are implemented, issue #604
      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));
    }
    return request;
  }

}