{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java\n+++ java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java\n@@ -208,9 +208,9 @@\n         return dns.managedZones().create(projectId, zone).execute();\n     }\n \n-    public ManagedZone get(String projectId, String managedZone) throws IOException {\n+    public ManagedZone get(String projectId, String managedZone, String fields) throws IOException {\n         return dns.managedZones().get(projectId, managedZone).execute();\n     }\n \n-    public List<ManagedZone> list(String projectId) throws IOException {\n+    public List<ManagedZone> list(String projectId, String fields) throws IOException {\n         return dns.managedZones().list(projectId).execute().getManagedZones();\n     }\n \n@@ -270,9 +270,9 @@\n         return dns.managedZones().delete(projectId, managedZone).execute();\n     }\n \n-    public List<ResourceRecordSet> list(String projectId, String managedZone) throws IOException {\n+    public List<ResourceRecordSet> list(String projectId, String managedZone, String fields) throws IOException {\n         return dns.resourceRecordSets().list(projectId, managedZone).execute().getRrsets();\n     }\n \n-    public ResourceRecordSet get(String projectId, String managedZone, String name) throws IOException {\n+    public ResourceRecordSet get(String projectId, String managedZone, String name, String type) throws IOException {\n         return dns.resourceRecordSets().get(projectId, managedZone, name, type).execute();\n     }\n \n@@ -324,9 +324,9 @@\n         return dns.changes().create(projectId, managedZone, change).execute();\n     }\n \n-    public Change get(String projectId, String managedZone, String changeId) throws IOException {\n+    public Change get(String projectId, String managedZone, String changeId, String fields) throws IOException {\n         return dns.changes().get(projectId, managedZone, changeId).execute();\n     }\n \n-    public List<Change> list(String projectId, String managedZone) throws IOException {\n+    public List<Change> list(String projectId, String managedZone, String fields) throws IOException {\n         return dns.changes().list(projectId, managedZone).execute().getChanges();\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().create(projectId, zone).execute();\n}\npublic ManagedZone get(String projectId, String managedZone) throws IOException {\nreturn dns.managedZones().get(projectId, managedZone).execute();\n}\npublic List<ManagedZone> list(String projectId) throws IOException {\nreturn dns.managedZones().list(projectId).execute().getManagedZones();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().delete(projectId, managedZone).execute();\n}\npublic List<ResourceRecordSet> list(String projectId, String managedZone) throws IOException {\nreturn dns.resourceRecordSets().list(projectId, managedZone).execute().getRrsets();\n}\npublic ResourceRecordSet get(String projectId, String managedZone, String name) throws IOException {\nreturn dns.resourceRecordSets().get(projectId, managedZone, name, type).execute();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 10 exact lines in a row:\n```\nreturn dns.changes().create(projectId, managedZone, change).execute();\n}\npublic Change get(String projectId, String managedZone, String changeId) throws IOException {\nreturn dns.changes().get(projectId, managedZone, changeId).execute();\n}\npublic List<Change> list(String projectId, String managedZone) throws IOException {\nreturn dns.changes().list(projectId, managedZone).execute().getChanges();\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().create(projectId, zone).execute();\n}\npublic ManagedZone get(String projectId, String managedZone) throws IOException {\nreturn dns.managedZones().get(projectId, managedZone).execute();\n}\npublic List<ManagedZone> list(String projectId) throws IOException {\nreturn dns.managedZones().list(projectId).execute().getManagedZones();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().delete(projectId, managedZone).execute();\n}\npublic List<ResourceRecordSet> list(String projectId, String managedZone) throws IOException {\nreturn dns.resourceRecordSets().list(projectId, managedZone).execute().getRrsets();\n}\npublic ResourceRecordSet get(String projectId, String managedZone, String name) throws IOException {\nreturn dns.resourceRecordSets().get(projectId, managedZone, name, type).execute();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 10 exact lines in a row:\n```\nreturn dns.changes().create(projectId, managedZone, change).execute();\n}\npublic Change get(String projectId, String managedZone, String changeId) throws IOException {\nreturn dns.changes().get(projectId, managedZone, changeId).execute();\n}\npublic List<Change> list(String projectId, String managedZone) throws IOException {\nreturn dns.changes().list(projectId, managedZone).execute().getChanges();\n}\n```",
            "span_id": 10947830930226804923
        },
        {
            "input": "```diff\n--- java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java\n+++ java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java\n@@ -208,9 +208,9 @@\n         return dns.managedZones().create(this.options.getProjectId(), zone).execute();\n     }\n \n-    public ManagedZone get(String projectId, String managedZone) throws IOException {\n+    public ManagedZone get(String projectId, String managedZone, String fields) throws IOException {\n         return dns.managedZones().get(projectId, managedZone).setFields(fields).execute();\n     }\n \n-    public List<ManagedZone> list(String projectId) throws IOException {\n+    public List<ManagedZone> list(String projectId, String fields) throws IOException {\n         return dns.managedZones().list(projectId).setFields(fields).execute().getManagedZones();\n     }\n \n@@ -270,9 +270,9 @@\n         return dns.managedZones().delete(this.options.getProjectId(), zoneName).execute();\n     }\n \n-    public List<ResourceRecordSet> list(String projectId, String managedZone) throws IOException {\n+    public List<ResourceRecordSet> list(String projectId, String managedZone, String fields) throws IOException {\n         return dns.resourceRecordSets().list(projectId, managedZone).setFields(fields).execute().getRrsets();\n     }\n \n-    public ResourceRecordSet get(String projectId, String managedZone, String name) throws IOException {\n+    public ResourceRecordSet get(String projectId, String managedZone, String name, String type) throws IOException {\n         return dns.resourceRecordSets().get(projectId, managedZone, name, type).execute();\n     }\n \n@@ -324,9 +324,9 @@\n         return dns.changes().create(this.options.getProjectId(), zoneName, change).execute();\n     }\n \n-    public Change get(String projectId, String managedZone, String changeId) throws IOException {\n+    public Change get(String projectId, String managedZone, String changeId, String fields) throws IOException {\n         return dns.changes().get(projectId, managedZone, changeId).setFields(fields).execute();\n     }\n \n-    public List<Change> list(String projectId, String managedZone) throws IOException {\n+    public List<Change> list(String projectId, String managedZone, String fields) throws IOException {\n         return dns.changes().list(projectId, managedZone).setFields(fields).execute().getChanges();\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().create(this.options.getProjectId(), zone).execute();\n}\npublic ManagedZone get(String projectId, String managedZone) throws IOException {\nreturn dns.managedZones().get(projectId, managedZone).setFields(fields).execute();\n}\npublic List<ManagedZone> list(String projectId) throws IOException {\nreturn dns.managedZones().list(projectId).setFields(fields).execute().getManagedZones();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().delete(this.options.getProjectId(), zoneName).execute();\n}\npublic List<ResourceRecordSet> list(String projectId, String managedZone) throws IOException {\nreturn dns.resourceRecordSets().list(projectId, managedZone).setFields(fields).execute().getRrsets();\n}\npublic ResourceRecordSet get(String projectId, String managedZone, String name) throws IOException {\nreturn dns.resourceRecordSets().get(projectId, managedZone, name, type).execute();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 10 exact lines in a row:\n```\nreturn dns.changes().create(this.options.getProjectId(), zoneName, change).execute();\n}\npublic Change get(String projectId, String managedZone, String changeId) throws IOException {\nreturn dns.changes().get(projectId, managedZone, changeId).setFields(fields).execute();\n}\npublic List<Change> list(String projectId, String managedZone) throws IOException {\nreturn dns.changes().list(projectId, managedZone).setFields(fields).execute().getChanges();\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().create(this.options.getProjectId(), zone).execute();\n}\npublic ManagedZone get(String projectId, String managedZone) throws IOException {\nreturn dns.managedZones().get(projectId, managedZone).setFields(fields).execute();\n}\npublic List<ManagedZone> list(String projectId) throws IOException {\nreturn dns.managedZones().list(projectId).setFields(fields).execute().getManagedZones();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().delete(this.options.getProjectId(), zoneName).execute();\n}\npublic List<ResourceRecordSet> list(String projectId, String managedZone) throws IOException {\nreturn dns.resourceRecordSets().list(projectId, managedZone).setFields(fields).execute().getRrsets();\n}\npublic ResourceRecordSet get(String projectId, String managedZone, String name) throws IOException {\nreturn dns.resourceRecordSets().get(projectId, managedZone, name, type).execute();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 10 exact lines in a row:\n```\nreturn dns.changes().create(this.options.getProjectId(), zoneName, change).execute();\n}\npublic Change get(String projectId, String managedZone, String changeId) throws IOException {\nreturn dns.changes().get(projectId, managedZone, changeId).setFields(fields).execute();\n}\npublic List<Change> list(String projectId, String managedZone) throws IOException {\nreturn dns.changes().list(projectId, managedZone).setFields(fields).execute().getChanges();\n}\n```",
            "span_id": 12226740788907807259
        },
        {
            "input": "```diff\n--- java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java\n+++ java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java\n@@ -208,9 +208,9 @@\n         return dns.managedZones().create(this.options.getProjectId(), zone).execute();\n     }\n \n-    public ManagedZone get(String projectId, String managedZone) throws IOException {\n+    public ManagedZone get(String projectId, String managedZone, String fields) throws IOException {\n         return dns.managedZones().get(projectId, managedZone).setFields(fields).execute();\n     }\n \n-    public List<ManagedZone> list(String projectId) throws IOException {\n+    public List<ManagedZone> list(String projectId, String fields) throws IOException {\n         return dns.managedZones().list(projectId).setFields(fields).execute().getManagedZones();\n     }\n \n@@ -270,9 +270,9 @@\n         return dns.managedZones().delete(this.options.getProjectId(), zoneName).execute();\n     }\n \n-    public List<ResourceRecordSet> list(String projectId, String managedZone) throws IOException {\n+    public List<ResourceRecordSet> list(String projectId, String managedZone, String fields) throws IOException {\n         return dns.resourceRecordSets().list(projectId, managedZone).setFields(fields).execute().getRrsets();\n     }\n \n-    public ResourceRecordSet get(String projectId, String managedZone, String name) throws IOException {\n+    public ResourceRecordSet get(String projectId, String managedZone, String name, String type) throws IOException {\n         return dns.resourceRecordSets().get(projectId, managedZone, name, type).execute();\n     }\n \n@@ -324,9 +324,9 @@\n         return dns.changes().create(this.options.getProjectId(), zoneName, change).execute();\n     }\n \n-    public Change get(String projectId, String managedZone, String changeId) throws IOException {\n+    public Change get(String projectId, String managedZone, String changeId, String fields) throws IOException {\n         return dns.changes().get(projectId, managedZone, changeId).setFields(fields).execute();\n     }\n \n-    public List<Change> list(String projectId, String managedZone) throws IOException {\n+    public List<Change> list(String projectId, String managedZone, String fields) throws IOException {\n         return dns.changes().list(projectId, managedZone).setFields(fields).execute().getChanges();\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().create(this.options.getProjectId(), zone).execute();\n}\npublic ManagedZone get(String projectId, String managedZone) throws IOException {\nreturn dns.managedZones().get(projectId, managedZone).setFields(fields).execute();\n}\npublic List<ManagedZone> list(String projectId) throws IOException {\nreturn dns.managedZones().list(projectId).setFields(fields).execute().getManagedZones();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().delete(this.options.getProjectId(), zoneName).execute();\n}\npublic List<ResourceRecordSet> list(String projectId, String managedZone) throws IOException {\nreturn dns.resourceRecordSets().list(projectId, managedZone).setFields(fields).execute().getRrsets();\n}\npublic ResourceRecordSet get(String projectId, String managedZone, String name) throws IOException {\nreturn dns.resourceRecordSets().get(projectId, managedZone, name, type).execute();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 10 exact lines in a row:\n```\nreturn dns.changes().create(this.options.getProjectId(), zoneName, change).execute();\n}\npublic Change get(String projectId, String managedZone, String changeId) throws IOException {\nreturn dns.changes().get(projectId, managedZone, changeId).setFields(fields).execute();\n}\npublic List<Change> list(String projectId, String managedZone) throws IOException {\nreturn dns.changes().list(projectId, managedZone).setFields(fields).execute().getChanges();\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().create(this.options.getProjectId(), zone).execute();\n}\npublic ManagedZone get(String projectId, String managedZone) throws IOException {\nreturn dns.managedZones().get(projectId, managedZone).setFields(fields).execute();\n}\npublic List<ManagedZone> list(String projectId) throws IOException {\nreturn dns.managedZones().list(projectId).setFields(fields).execute().getManagedZones();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 11 exact lines in a row:\n```\nreturn dns.managedZones().delete(this.options.getProjectId(), zoneName).execute();\n}\npublic List<ResourceRecordSet> list(String projectId, String managedZone) throws IOException {\nreturn dns.resourceRecordSets().list(projectId, managedZone).setFields(fields).execute().getRrsets();\n}\npublic ResourceRecordSet get(String projectId, String managedZone, String name) throws IOException {\nreturn dns.resourceRecordSets().get(projectId, managedZone, name, type).execute();\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java!\nMake extra sure the indentation is correct.\njava-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java does not contain these 10 exact lines in a row:\n```\nreturn dns.changes().create(this.options.getProjectId(), zoneName, change).execute();\n}\npublic Change get(String projectId, String managedZone, String changeId) throws IOException {\nreturn dns.changes().get(projectId, managedZone, changeId).setFields(fields).execute();\n}\npublic List<Change> list(String projectId, String managedZone) throws IOException {\nreturn dns.changes().list(projectId, managedZone).setFields(fields).execute().getChanges();\n}\n```",
            "span_id": 1470704737724760955
        }
    ],
    "read_file": [
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 14141793272037796055
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 1958138359446365481
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 13896657578200700305
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 13082322096492345929
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 3430123235171118799
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 14990493824653235534
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 13012165221033208592
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 10267811501145785395
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 17027302892994811543
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 673332712815688396
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 15856761374991801473
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 15708180710282362320
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 12229092653856676369
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 10076717547177558669
        },
        {
            "input": "java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java",
            "output": "/*\n * Copyright 2016 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.cloud.dns.spi.v1;\n\nimport static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n\nimport com.google.api.client.googleapis.batch.BatchRequest;\nimport com.google.api.client.googleapis.batch.json.JsonBatchCallback;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.http.HttpHeaders;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.dns.Dns;\nimport com.google.api.services.dns.model.Change;\nimport com.google.api.services.dns.model.ChangesListResponse;\nimport com.google.api.services.dns.model.ManagedZone;\nimport com.google.api.services.dns.model.ManagedZonesListResponse;\nimport com.google.api.services.dns.model.Project;\nimport com.google.api.services.dns.model.ResourceRecordSet;\nimport com.google.api.services.dns.model.ResourceRecordSetsListResponse;\nimport com.google.cloud.dns.DnsException;\nimport com.google.cloud.dns.DnsOptions;\nimport com.google.cloud.http.HttpTransportOptions;\nimport java.io.IOException;\nimport java.util.Map;\n\n/** A default implementation of the DnsRpc interface. */\npublic class HttpDnsRpc implements DnsRpc {\n\n  private static final String SORT_BY = \"changeSequence\";\n  private final Dns dns;\n  private final DnsOptions options;\n\n  private class DefaultRpcBatch implements RpcBatch {\n\n    private final BatchRequest batch;\n\n    private DefaultRpcBatch(BatchRequest batch) {\n      this.batch = batch;\n    }\n\n    @Override\n    public void addListZones(\n        RpcBatch.Callback<ManagedZonesListResponse> callback, Map<DnsRpc.Option, ?> options) {\n      try {\n        listZonesCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addCreateZone(\n        ManagedZone zone, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        createZoneCall(zone, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetZone(\n        String zoneName, RpcBatch.Callback<ManagedZone> callback, Map<Option, ?> options) {\n      try {\n        getZoneCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addDeleteZone(String zoneName, RpcBatch.Callback<Void> callback) {\n      try {\n        deleteZoneCall(zoneName).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetProject(RpcBatch.Callback<Project> callback, Map<Option, ?> options) {\n      try {\n        getProjectCall(options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListRecordSets(\n        String zoneName,\n        RpcBatch.Callback<ResourceRecordSetsListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listRecordSetsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addListChangeRequests(\n        String zoneName,\n        RpcBatch.Callback<ChangesListResponse> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        listChangeRequestsCall(zoneName, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addGetChangeRequest(\n        String zoneName,\n        String changeRequestId,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        getChangeRequestCall(zoneName, changeRequestId, options)\n            .queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void addApplyChangeRequest(\n        String zoneName,\n        Change change,\n        RpcBatch.Callback<Change> callback,\n        Map<DnsRpc.Option, ?> options) {\n      try {\n        applyChangeRequestCall(zoneName, change, options).queue(batch, toJsonCallback(callback));\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n\n    @Override\n    public void submit() {\n      try {\n        batch.execute();\n      } catch (IOException ex) {\n        throw translate(ex, false);\n      }\n    }\n  }\n\n  private static <T> JsonBatchCallback<T> toJsonCallback(final RpcBatch.Callback<T> callback) {\n    return new JsonBatchCallback<T>() {\n      @Override\n      public void onSuccess(T response, HttpHeaders httpHeaders) throws IOException {\n        callback.onSuccess(response);\n      }\n\n      @Override\n      public void onFailure(GoogleJsonError googleJsonError, HttpHeaders httpHeaders)\n          throws IOException {\n        callback.onFailure(googleJsonError);\n      }\n    };\n  }\n\n  private static DnsException translate(IOException exception, boolean idempotent) {\n    return new DnsException(exception, idempotent);\n  }\n\n  /** Constructs an instance of this rpc client with provided {@link DnsOptions}. */\n  public HttpDnsRpc(DnsOptions options) {\n    HttpTransportOptions transportOptions = (HttpTransportOptions) options.getTransportOptions();\n    HttpTransport transport = transportOptions.getHttpTransportFactory().create();\n    HttpRequestInitializer initializer = transportOptions.getHttpRequestInitializer(options);\n    this.dns =\n        new Dns.Builder(transport, new JacksonFactory(), initializer)\n            .setRootUrl(options.getHost())\n            .setApplicationName(options.getApplicationName())\n            .build();\n    this.options = options;\n  }\n\n  @Override\n  public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {\n    try {\n      return createZoneCall(zone, options).execute();\n    } catch (IOException ex) {\n      // todo this can cause misleading report of a failure, intended to be fixed within #924\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .create(this.options.getProjectId(), zone)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {\n    // just fields option\n    try {\n      return getZoneCall(zoneName, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return null;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    return dns.managedZones()\n        .get(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {\n    // fields, page token, page size\n    try {\n      ManagedZonesListResponse zoneList = listZonesCall(options).execute();\n      return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {\n    return dns.managedZones()\n        .list(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setDnsName(Option.DNS_NAME.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options));\n  }\n\n  @Override\n  public boolean deleteZone(String zoneName) throws DnsException {\n    try {\n      deleteZoneCall(zoneName).execute();\n      return true;\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, false);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        return false;\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {\n    return dns.managedZones().delete(this.options.getProjectId(), zoneName);\n  }\n\n  @Override\n  public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getRrsets());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, dns name, type\n    return dns.resourceRecordSets()\n        .list(this.options.getProjectId(), zoneName)\n        .setFields(Option.FIELDS.getString(options))\n        .setPageToken(Option.PAGE_TOKEN.getString(options))\n        .setMaxResults(Option.PAGE_SIZE.getInt(options))\n        .setName(Option.NAME.getString(options))\n        .setType(Option.DNS_TYPE.getString(options));\n  }\n\n  @Override\n  public Project getProject(Map<Option, ?> options) throws DnsException {\n    try {\n      return getProjectCall(options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {\n    return dns.projects()\n        .get(this.options.getProjectId())\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return applyChangeRequestCall(zoneName, changeRequest, options).execute();\n    } catch (IOException ex) {\n      throw translate(ex, false);\n    }\n  }\n\n  private Dns.Changes.Create applyChangeRequestCall(\n      String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .create(this.options.getProjectId(), zoneName, changeRequest)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      return getChangeRequestCall(zoneName, changeRequestId, options).execute();\n    } catch (IOException ex) {\n      DnsException serviceException = translate(ex, true);\n      if (serviceException.getCode() == HTTP_NOT_FOUND) {\n        if (\"entity.parameters.changeId\".equals(serviceException.getLocation())\n            || (serviceException.getMessage() != null\n                && serviceException.getMessage().contains(\"parameters.changeId\"))) {\n          // the change id was not found, but the zone exists\n          return null;\n        }\n        // the zone does not exist, so throw an exception\n      }\n      throw serviceException;\n    }\n  }\n\n  private Dns.Changes.Get getChangeRequestCall(\n      String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {\n    return dns.changes()\n        .get(this.options.getProjectId(), zoneName, changeRequestId)\n        .setFields(Option.FIELDS.getString(options));\n  }\n\n  @Override\n  public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)\n      throws DnsException {\n    try {\n      ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();\n      return ListResult.of(response.getNextPageToken(), response.getChanges());\n    } catch (IOException ex) {\n      throw translate(ex, true);\n    }\n  }\n\n  private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)\n      throws IOException {\n    // options are fields, page token, page size, sort order\n    Dns.Changes.List request =\n        dns.changes()\n            .list(this.options.getProjectId(), zoneName)\n            .setFields(Option.FIELDS.getString(options))\n            .setMaxResults(Option.PAGE_SIZE.getInt(options))\n            .setPageToken(Option.PAGE_TOKEN.getString(options));\n    if (Option.SORTING_ORDER.getString(options) != null) {\n      // todo check and change if more sorting options are implemented, issue #604\n      request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));\n    }\n    return request;\n  }\n\n  @Override\n  public RpcBatch createBatch() {\n    return new DefaultRpcBatch(dns.batch());\n  }\n}\n",
            "error": "",
            "span_id": 4627635571470227585
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}