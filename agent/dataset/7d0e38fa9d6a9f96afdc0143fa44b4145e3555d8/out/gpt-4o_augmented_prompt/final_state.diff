diff --git a/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java b/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java
index d651994e712..2f421d60391 100644
--- a/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java
+++ b/java-dns/src/main/java/com/google/cloud/dns/spi/v1/HttpDnsRpc.java
@@ -199,189 +199,180 @@ public class HttpDnsRpc implements DnsRpc {
   public ManagedZone create(ManagedZone zone, Map<Option, ?> options) throws DnsException {
     try {
       return createZoneCall(zone, options).execute();
-    } catch (IOException ex) {
+      } catch (IOException ex) {
       // todo this can cause misleading report of a failure, intended to be fixed within #924
       throw translate(ex, true);
     }
   }
 
   private Dns.ManagedZones.Create createZoneCall(ManagedZone zone, Map<Option, ?> options)
-      throws IOException {
-    return dns.managedZones()
-        .create(this.options.getProjectId(), zone)
+          throws IOException {
+return dns.managedZones().create(this.options.getProjectId(), this.options.getProjectId(), zone)
         .setFields(Option.FIELDS.getString(options));
-  }
+}
 
-  @Override
+@Override
   public ManagedZone getZone(String zoneName, Map<Option, ?> options) throws DnsException {
     // just fields option
-    try {
+try {
       return getZoneCall(zoneName, options).execute();
-    } catch (IOException ex) {
+      } catch (IOException ex) {
       DnsException serviceException = translate(ex, true);
       if (serviceException.getCode() == HTTP_NOT_FOUND) {
         return null;
-      }
+}
       throw serviceException;
+}
     }
-  }
 
   private Dns.ManagedZones.Get getZoneCall(String zoneName, Map<Option, ?> options)
-      throws IOException {
-    return dns.managedZones()
-        .get(this.options.getProjectId(), zoneName)
+          throws IOException {
+return dns.managedZones().get(this.options.getProjectId(), this.options.getProjectId(), zoneName)
         .setFields(Option.FIELDS.getString(options));
-  }
+}
 
-  @Override
+@Override
   public ListResult<ManagedZone> listZones(Map<Option, ?> options) throws DnsException {
     // fields, page token, page size
-    try {
+try {
       ManagedZonesListResponse zoneList = listZonesCall(options).execute();
       return ListResult.of(zoneList.getNextPageToken(), zoneList.getManagedZones());
-    } catch (IOException ex) {
+      } catch (IOException ex) {
       throw translate(ex, true);
-    }
-  }
+}
+}
 
   private Dns.ManagedZones.List listZonesCall(Map<DnsRpc.Option, ?> options) throws IOException {
-    return dns.managedZones()
-        .list(this.options.getProjectId())
+return dns.managedZones().list(this.options.getProjectId(), this.options.getProjectId())
         .setFields(Option.FIELDS.getString(options))
         .setMaxResults(Option.PAGE_SIZE.getInt(options))
         .setDnsName(Option.DNS_NAME.getString(options))
         .setPageToken(Option.PAGE_TOKEN.getString(options));
-  }
+}
 
-  @Override
+@Override
   public boolean deleteZone(String zoneName) throws DnsException {
-    try {
+try {
       deleteZoneCall(zoneName).execute();
       return true;
-    } catch (IOException ex) {
+      } catch (IOException ex) {
       DnsException serviceException = translate(ex, false);
       if (serviceException.getCode() == HTTP_NOT_FOUND) {
         return false;
-      }
+}
       throw serviceException;
-    }
-  }
+}
+}
 
   private Dns.ManagedZones.Delete deleteZoneCall(String zoneName) throws IOException {
-    return dns.managedZones().delete(this.options.getProjectId(), zoneName);
-  }
+    return dns.managedZones().delete(this.options.getProjectId(), this.options.getProjectId(), zoneName);
+}
 
-  @Override
+@Override
   public ListResult<ResourceRecordSet> listRecordSets(String zoneName, Map<Option, ?> options)
       throws DnsException {
-    try {
+try {
       ResourceRecordSetsListResponse response = listRecordSetsCall(zoneName, options).execute();
       return ListResult.of(response.getNextPageToken(), response.getRrsets());
-    } catch (IOException ex) {
+      } catch (IOException ex) {
       throw translate(ex, true);
-    }
-  }
+}
+}
 
   private Dns.ResourceRecordSets.List listRecordSetsCall(String zoneName, Map<Option, ?> options)
-      throws IOException {
+          throws IOException {
     // options are fields, page token, dns name, type
-    return dns.resourceRecordSets()
-        .list(this.options.getProjectId(), zoneName)
+return dns.resourceRecordSets().list(this.options.getProjectId(), this.options.getProjectId(), zoneName)
         .setFields(Option.FIELDS.getString(options))
         .setPageToken(Option.PAGE_TOKEN.getString(options))
         .setMaxResults(Option.PAGE_SIZE.getInt(options))
         .setName(Option.NAME.getString(options))
         .setType(Option.DNS_TYPE.getString(options));
-  }
+}
 
-  @Override
+@Override
   public Project getProject(Map<Option, ?> options) throws DnsException {
-    try {
+try {
       return getProjectCall(options).execute();
-    } catch (IOException ex) {
+      } catch (IOException ex) {
       throw translate(ex, true);
-    }
-  }
+}
+}
 
   private Dns.Projects.Get getProjectCall(Map<Option, ?> options) throws IOException {
-    return dns.projects()
-        .get(this.options.getProjectId())
+return dns.projects().get(this.options.getProjectId(), this.options.getProjectId())
         .setFields(Option.FIELDS.getString(options));
-  }
+}
 
-  @Override
+@Override
   public Change applyChangeRequest(String zoneName, Change changeRequest, Map<Option, ?> options)
       throws DnsException {
-    try {
+try {
       return applyChangeRequestCall(zoneName, changeRequest, options).execute();
-    } catch (IOException ex) {
-      throw translate(ex, false);
-    }
-  }
+      } catch (IOException ex) {
+        throw translate(ex, false);
+}
+}
 
   private Dns.Changes.Create applyChangeRequestCall(
       String zoneName, Change changeRequest, Map<Option, ?> options) throws IOException {
-    return dns.changes()
-        .create(this.options.getProjectId(), zoneName, changeRequest)
+return dns.changes().create(this.options.getProjectId(), this.options.getProjectId(), zoneName, changeRequest)
         .setFields(Option.FIELDS.getString(options));
-  }
+}
 
-  @Override
+@Override
   public Change getChangeRequest(String zoneName, String changeRequestId, Map<Option, ?> options)
       throws DnsException {
-    try {
+try {
       return getChangeRequestCall(zoneName, changeRequestId, options).execute();
-    } catch (IOException ex) {
+      } catch (IOException ex) {
       DnsException serviceException = translate(ex, true);
       if (serviceException.getCode() == HTTP_NOT_FOUND) {
         if ("entity.parameters.changeId".equals(serviceException.getLocation())
             || (serviceException.getMessage() != null
                 && serviceException.getMessage().contains("parameters.changeId"))) {
           // the change id was not found, but the zone exists
-          return null;
-        }
+        return null;
+}
         // the zone does not exist, so throw an exception
-      }
+}
       throw serviceException;
-    }
-  }
+}
+}
 
   private Dns.Changes.Get getChangeRequestCall(
       String zoneName, String changeRequestId, Map<Option, ?> options) throws IOException {
-    return dns.changes()
-        .get(this.options.getProjectId(), zoneName, changeRequestId)
+return dns.changes().get(this.options.getProjectId(), this.options.getProjectId(), zoneName, changeRequestId)
         .setFields(Option.FIELDS.getString(options));
-  }
+}
 
-  @Override
+@Override
   public ListResult<Change> listChangeRequests(String zoneName, Map<Option, ?> options)
       throws DnsException {
-    try {
+try {
       ChangesListResponse response = listChangeRequestsCall(zoneName, options).execute();
       return ListResult.of(response.getNextPageToken(), response.getChanges());
-    } catch (IOException ex) {
+      } catch (IOException ex) {
       throw translate(ex, true);
-    }
-  }
+}
+}
 
   private Dns.Changes.List listChangeRequestsCall(String zoneName, Map<Option, ?> options)
-      throws IOException {
+          throws IOException {
     // options are fields, page token, page size, sort order
-    Dns.Changes.List request =
-        dns.changes()
-            .list(this.options.getProjectId(), zoneName)
-            .setFields(Option.FIELDS.getString(options))
-            .setMaxResults(Option.PAGE_SIZE.getInt(options))
-            .setPageToken(Option.PAGE_TOKEN.getString(options));
+Dns.Changes.List request = dns.changes().list(this.options.getProjectId(), this.options.getProjectId(), zoneName)
+        .setFields(Option.FIELDS.getString(options))
+        .setMaxResults(Option.PAGE_SIZE.getInt(options))
+        .setPageToken(Option.PAGE_TOKEN.getString(options));
     if (Option.SORTING_ORDER.getString(options) != null) {
       // todo check and change if more sorting options are implemented, issue #604
       request = request.setSortBy(SORT_BY).setSortOrder(Option.SORTING_ORDER.getString(options));
-    }
+}
     return request;
-  }
+}
 
-  @Override
+@Override
   public RpcBatch createBatch() {
     return new DefaultRpcBatch(dns.batch());
-  }
 }
+}
\ No newline at end of file