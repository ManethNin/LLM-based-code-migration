{
    "validate_diffs": [
        {
            "input": "```diff\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -5,8 +5,6 @@\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n@@ -20,14 +18,14 @@\n *\n * @return data as json\n */\n public static String getChartDataById(final PageObject pageObject, final String elementId) {\n if (isChartDisplayedByElementId(pageObject, elementId)) {\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n elementId));\n-ScriptResult scriptResult = new ScriptResult(result);\n-return scriptResult.getJavaScriptResult().toString();\n+ return result.toString();\n }\n return null;\n }\n@@ -38,14 +36,14 @@\n *\n * @return data as json\n */\n public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n final String toolAttribute) {\n if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n for (int i = 0; i < MAX_ATTEMPTS; i++) {\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n toolAttribute));\n\n- Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n- if (scriptResult != null) {\n- return scriptResult.toString();\n+ if (result != null) {\n+ return result.toString();\n }\n pageObject.elasticSleep(1000);\n }\n```",
            "output": "{'ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java': 'package io.jenkins.plugins.coverage.util;\\n\\nimport org.openqa.selenium.By;\\nimport org.openqa.selenium.NoSuchElementException;\\nimport org.openqa.selenium.WebElement;\\n\\nimport org.jenkinsci.test.acceptance.po.PageObject;\\n\\n/**\\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\\n */\\n@SuppressWarnings(\"hideutilityclassconstructor\")\\n// TODO: Move this code to ATH so we can reuse it from other plugins\\npublic class ChartUtil {\\n    private static final int MAX_ATTEMPTS = 5;\\n\\n    /**\\n     * Returns a chart\\'s data by its id.\\n     *\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n     *         of chart\\n     *\\n     * @return data as json\\n     */\\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\\n            Object result = pageObject.executeScript(String.format(\\n                    \"delete(window.Array.prototype.toJSON) %n\"\\n\"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\\\"%s\\\\\")).getOption())\",\\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\\\"%s\\\\\")).getOption())\",\\n                    elementId));\\nreturn result.toString();\\n}\\n        return null;\\n}\\n\\n/**\\n     * Returns data of only chart with given tool attribute value on page.\\n*\\n     * @param pageObject\\n     *         which contains only one chart with given tool attribute value\\n     * @param toolAttribute\\n     *         value in div tag of chart\\n*\\n     * @return data as json\\n*/\\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\\n            final String toolAttribute) {\\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\\n            Object result = pageObject.executeScript(String.format(\\n                    \"delete(window.Array.prototype.toJSON) %n\"\\n\"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\\\"div [tool=\\'%s\\']\\\\\")).getOption())\",\\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\\\"div [tool=\\'%s\\']\\\\\")).getOption())\",\\n                        toolAttribute));\\n\\nif (result != null) {\\nreturn result.toString();\\n}\\n                pageObject.elasticSleep(1000);\\n}\\n        }\\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID \\'%s\\'\\'\" + toolAttribute);\\n}\\n\\n/**\\n     * Returns if chart is displayed.\\n*\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n*         of chart\\n*\\n     * @return if chart is displayed\\n*/\\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\\ntry {\\n            WebElement chart = pageObject.find(By.id(elementId));\\n            return chart != null && chart.isDisplayed();\\n}\\n        catch (NoSuchElementException exception) {\\n            return false;\\n}\\n    }\\n\\n/**\\n     * Returns if a chart with given tool attribute in div tag is displayed.\\n*\\n     * @param pageObject\\n     *         which contains chart\\n     * @param toolAttribute\\n     *         of div tag of chart\\n*\\n     * @return if chart is displayed\\n*/\\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\\ntry {\\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool=\\'\" + toolAttribute + \"\\']\"));\\n            return chart != null && chart.isDisplayed();\\n}\\n        catch (NoSuchElementException exception) {\\n            return false;\\n}\\n\\n}\\n\\n}'}",
            "error": "",
            "span_id": 1861913781859068138
        },
        {
            "input": "```diff\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -30,7 +30,6 @@\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n- \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n elementId));\n@@ -54,7 +53,6 @@\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n- \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n toolAttribute));\n```",
            "output": "{'ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java': 'package io.jenkins.plugins.coverage.util;\\n\\nimport org.openqa.selenium.By;\\nimport org.openqa.selenium.NoSuchElementException;\\nimport org.openqa.selenium.WebElement;\\n\\nimport org.jenkinsci.test.acceptance.po.PageObject;\\n\\n/**\\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\\n */\\n@SuppressWarnings(\"hideutilityclassconstructor\")\\n// TODO: Move this code to ATH so we can reuse it from other plugins\\npublic class ChartUtil {\\n    private static final int MAX_ATTEMPTS = 5;\\n\\n    /**\\n     * Returns a chart\\'s data by its id.\\n     *\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n     *         of chart\\n     *\\n     * @return data as json\\n     */\\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\\n            Object result = pageObject.executeScript(String.format(\\n                    \"delete(window.Array.prototype.toJSON) %n\"\\n\"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\\\"%s\\\\\")).getOption())\",\\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\\\"%s\\\\\")).getOption())\",\\n                    elementId));\\nreturn result.toString();\\n}\\n        return null;\\n}\\n\\n/**\\n     * Returns data of only chart with given tool attribute value on page.\\n*\\n     * @param pageObject\\n     *         which contains only one chart with given tool attribute value\\n     * @param toolAttribute\\n     *         value in div tag of chart\\n*\\n     * @return data as json\\n*/\\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\\n            final String toolAttribute) {\\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\\n            Object result = pageObject.executeScript(String.format(\\n                    \"delete(window.Array.prototype.toJSON) %n\"\\n\"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\\\"div [tool=\\'%s\\']\\\\\")).getOption())\",\\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\\\"div [tool=\\'%s\\']\\\\\")).getOption())\",\\n                        toolAttribute));\\n\\nif (result != null) {\\nreturn result.toString();\\n}\\n                pageObject.elasticSleep(1000);\\n}\\n        }\\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID \\'%s\\'\\'\" + toolAttribute);\\n}\\n\\n/**\\n     * Returns if chart is displayed.\\n*\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n*         of chart\\n*\\n     * @return if chart is displayed\\n*/\\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\\ntry {\\n            WebElement chart = pageObject.find(By.id(elementId));\\n            return chart != null && chart.isDisplayed();\\n}\\n        catch (NoSuchElementException exception) {\\n            return false;\\n}\\n    }\\n\\n/**\\n     * Returns if a chart with given tool attribute in div tag is displayed.\\n*\\n     * @param pageObject\\n     *         which contains chart\\n     * @param toolAttribute\\n     *         of div tag of chart\\n*\\n     * @return if chart is displayed\\n*/\\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\\ntry {\\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool=\\'\" + toolAttribute + \"\\']\"));\\n            return chart != null && chart.isDisplayed();\\n}\\n        catch (NoSuchElementException exception) {\\n            return false;\\n}\\n\\n}\\n\\n}'}",
            "error": "",
            "span_id": 1716984090845694820
        },
        {
            "input": "```diff\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -30,7 +30,6 @@\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n- \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n elementId));\n@@ -54,7 +53,6 @@\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n- \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n toolAttribute));\n```",
            "output": "{'ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java': 'package io.jenkins.plugins.coverage.util;\\n\\nimport org.openqa.selenium.By;\\nimport org.openqa.selenium.NoSuchElementException;\\nimport org.openqa.selenium.WebElement;\\n\\nimport org.jenkinsci.test.acceptance.po.PageObject;\\n\\n/**\\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\\n */\\n@SuppressWarnings(\"hideutilityclassconstructor\")\\n// TODO: Move this code to ATH so we can reuse it from other plugins\\npublic class ChartUtil {\\n    private static final int MAX_ATTEMPTS = 5;\\n\\n    /**\\n     * Returns a chart\\'s data by its id.\\n     *\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n     *         of chart\\n     *\\n     * @return data as json\\n     */\\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\\n            Object result = pageObject.executeScript(String.format(\\n                    \"delete(window.Array.prototype.toJSON) %n\"\\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\\\"%s\\\\\")).getOption())\",\\n                    elementId));\\nreturn result.toString();\\n}\\n        return null;\\n}\\n\\n/**\\n     * Returns data of only chart with given tool attribute value on page.\\n*\\n     * @param pageObject\\n     *         which contains only one chart with given tool attribute value\\n     * @param toolAttribute\\n     *         value in div tag of chart\\n*\\n     * @return data as json\\n*/\\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\\n            final String toolAttribute) {\\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\\n            Object result = pageObject.executeScript(String.format(\\n                    \"delete(window.Array.prototype.toJSON) %n\"\\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\\\"div [tool=\\'%s\\']\\\\\")).getOption())\",\\n                        toolAttribute));\\n\\nif (result != null) {\\nreturn result.toString();\\n}\\n                pageObject.elasticSleep(1000);\\n}\\n}\\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID \\'%s\\'\\'\" + toolAttribute);\\n}\\n\\n/**\\n     * Returns if chart is displayed.\\n*\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n*         of chart\\n*\\n     * @return if chart is displayed\\n*/\\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\\ntry {\\n            WebElement chart = pageObject.find(By.id(elementId));\\n            return chart != null && chart.isDisplayed();\\n}\\n        catch (NoSuchElementException exception) {\\n            return false;\\n}\\n}\\n\\n/**\\n     * Returns if a chart with given tool attribute in div tag is displayed.\\n*\\n     * @param pageObject\\n     *         which contains chart\\n     * @param toolAttribute\\n     *         of div tag of chart\\n*\\n     * @return if chart is displayed\\n*/\\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\\ntry {\\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool=\\'\" + toolAttribute + \"\\']\"));\\n            return chart != null && chart.isDisplayed();\\n}\\n        catch (NoSuchElementException exception) {\\n            return false;\\n}\\n\\n}\\n\\n}'}",
            "error": "",
            "span_id": 6409005173242098200
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -5,8 +5,6 @@\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n@@ -20,14 +18,14 @@\n *\n * @return data as json\n */\n public static String getChartDataById(final PageObject pageObject, final String elementId) {\n if (isChartDisplayedByElementId(pageObject, elementId)) {\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n elementId));\n-ScriptResult scriptResult = new ScriptResult(result);\n-return scriptResult.getJavaScriptResult().toString();\n+ return result.toString();\n }\n return null;\n }\n@@ -38,14 +36,14 @@\n *\n * @return data as json\n */\n public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n final String toolAttribute) {\n if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n for (int i = 0; i < MAX_ATTEMPTS; i++) {\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n toolAttribute));\n\n- Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n- if (scriptResult != null) {\n- return scriptResult.toString();\n+ if (result != null) {\n+ return result.toString();\n }\n pageObject.elasticSleep(1000);\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: ';' expected\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n\"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\nreturn result.toString();\n}\n        return null;\n}\n\n/**\n     * Returns data of only chart with given tool attribute value on page.\n*\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n*\n     * @return data as json\n*/\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n\"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\nif (result != null) {\nreturn result.toString();\n}\n                pageObject.elasticSleep(1000);\n}\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n}\n\n/**\n     * Returns if chart is displayed.\n*\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n*         of chart\n*\n     * @return if chart is displayed\n*/\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\ntry {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n}\n        catch (NoSuchElementException exception) {\n            return false;\n}\n    }\n\n/**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n*\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n*\n     * @return if chart is displayed\n*/\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\ntry {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n}\n        catch (NoSuchElementException exception) {\n            return false;\n}\n\n}\n\n}"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "30": {
                            "lines": [
                                {
                                    "line_no": 29,
                                    "content": "            Object result = pageObject.executeScript(String.format("
                                },
                                {
                                    "line_no": 30,
                                    "content": "                    \"delete(window.Array.prototype.toJSON) %n\""
                                },
                                {
                                    "line_no": 31,
                                    "content": "\"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\","
                                }
                            ],
                            "error_texts": [
                                "[30,62] error: ')' expected\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\","
                                },
                                {
                                    "line_no": 33,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 34,
                                    "content": "return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[33,20] error: not a statement\n",
                                "[33,29] error: ';' expected\n"
                            ]
                        },
                        "54": {
                            "lines": [
                                {
                                    "line_no": 53,
                                    "content": "            Object result = pageObject.executeScript(String.format("
                                },
                                {
                                    "line_no": 54,
                                    "content": "                    \"delete(window.Array.prototype.toJSON) %n\""
                                },
                                {
                                    "line_no": 55,
                                    "content": "\"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\","
                                }
                            ],
                            "error_texts": [
                                "[54,62] error: ')' expected\n"
                            ]
                        },
                        "57": {
                            "lines": [
                                {
                                    "line_no": 56,
                                    "content": "                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\","
                                },
                                {
                                    "line_no": 57,
                                    "content": "                        toolAttribute));"
                                },
                                {
                                    "line_no": 58,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[57,37] error: ';' expected\n",
                                "[57,24] error: not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: ';' expected\n",
            "span_id": 1330786064408680923
        },
        {
            "input": "```diff\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -30,7 +30,6 @@\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n- \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n elementId));\n@@ -54,7 +53,6 @@\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n- \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n toolAttribute));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: ';' expected\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n\"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\nreturn result.toString();\n}\n        return null;\n}\n\n/**\n     * Returns data of only chart with given tool attribute value on page.\n*\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n*\n     * @return data as json\n*/\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n\"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\nif (result != null) {\nreturn result.toString();\n}\n                pageObject.elasticSleep(1000);\n}\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n}\n\n/**\n     * Returns if chart is displayed.\n*\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n*         of chart\n*\n     * @return if chart is displayed\n*/\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\ntry {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n}\n        catch (NoSuchElementException exception) {\n            return false;\n}\n    }\n\n/**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n*\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n*\n     * @return if chart is displayed\n*/\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\ntry {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n}\n        catch (NoSuchElementException exception) {\n            return false;\n}\n\n}\n\n}"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "30": {
                            "lines": [
                                {
                                    "line_no": 29,
                                    "content": "            Object result = pageObject.executeScript(String.format("
                                },
                                {
                                    "line_no": 30,
                                    "content": "                    \"delete(window.Array.prototype.toJSON) %n\""
                                },
                                {
                                    "line_no": 31,
                                    "content": "\"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\","
                                }
                            ],
                            "error_texts": [
                                "[30,62] error: ')' expected\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\","
                                },
                                {
                                    "line_no": 33,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 34,
                                    "content": "return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[33,20] error: not a statement\n",
                                "[33,29] error: ';' expected\n"
                            ]
                        },
                        "54": {
                            "lines": [
                                {
                                    "line_no": 53,
                                    "content": "            Object result = pageObject.executeScript(String.format("
                                },
                                {
                                    "line_no": 54,
                                    "content": "                    \"delete(window.Array.prototype.toJSON) %n\""
                                },
                                {
                                    "line_no": 55,
                                    "content": "\"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\","
                                }
                            ],
                            "error_texts": [
                                "[54,62] error: ')' expected\n"
                            ]
                        },
                        "57": {
                            "lines": [
                                {
                                    "line_no": 56,
                                    "content": "                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\","
                                },
                                {
                                    "line_no": 57,
                                    "content": "                        toolAttribute));"
                                },
                                {
                                    "line_no": 58,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[57,37] error: ';' expected\n",
                                "[57,24] error: not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: ';' expected\n",
            "span_id": 15117259989117518568
        },
        {
            "input": "```diff\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -30,7 +30,6 @@\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n- \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n elementId));\n@@ -54,7 +53,6 @@\n Object result = pageObject.executeScript(String.format(\n \"delete(window.Array.prototype.toJSON) %n\"\n- \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n toolAttribute));\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": true,
                "error_text": "",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\nreturn result.toString();\n}\n        return null;\n}\n\n/**\n     * Returns data of only chart with given tool attribute value on page.\n*\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n*\n     * @return data as json\n*/\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\nif (result != null) {\nreturn result.toString();\n}\n                pageObject.elasticSleep(1000);\n}\n}\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n}\n\n/**\n     * Returns if chart is displayed.\n*\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n*         of chart\n*\n     * @return if chart is displayed\n*/\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\ntry {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n}\n        catch (NoSuchElementException exception) {\n            return false;\n}\n}\n\n/**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n*\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n*\n     * @return if chart is displayed\n*/\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\ntry {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n}\n        catch (NoSuchElementException exception) {\n            return false;\n}\n\n}\n\n}"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 323, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] -----------< io.jenkins.plugins:code-coverage-api-ui-tests >------------\n[INFO] Building UI Tests of Code Coverage Plugin UNVERSIONED [2/3]\n[INFO] from ui-tests/pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ code-coverage-api-ui-tests ---\n[INFO] Deleting /mnt/repo/ui-tests/target\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-require-property-diverges) @ code-coverage-api-ui-tests ---\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-java) @ code-coverage-api-ui-tests ---\n[INFO]\n[INFO] --- resources:3.2.0:resources (default-resources) @ code-coverage-api-ui-tests ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] Using 'UTF-8' encoding to copy filtered properties files.\n[INFO] skip non existing resourceDirectory /mnt/repo/ui-tests/src/main/resources\n[INFO]\n[INFO] --- resources:3.2.0:copy-resources (copy-resources) @ code-coverage-api-ui-tests ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] Using 'UTF-8' encoding to copy filtered properties files.\n[INFO] Copying 0 resource\n[INFO]\n[INFO] --- compiler:3.10.1:compile (default-compile) @ code-coverage-api-ui-tests ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 11 source files to /mnt/repo/ui-tests/target/classes\n[WARNING] [options] bootstrap class path not set in conjunction with -source 8\n[WARNING] /mnt/repo/ui-tests/src/main/java/io/jenkins/plugins/coverage/CoverageReport.java:[188,39] [UnnecessaryParentheses] These grouping parentheses are unnecessary; it is unlikely the code will be misinterpreted without them\n(see https://errorprone.info/bugpattern/UnnecessaryParentheses)\nDid you mean 'fileTable = getElement( By.id(\"source-file-unavailable\"));'?\n[WARNING] /mnt/repo/ui-tests/src/main/java/io/jenkins/plugins/coverage/CoveragePublisher/Adapter.java:[76,25] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var adapterThreshold = new AdapterThreshold(this, path);'?\n[WARNING] /mnt/repo/ui-tests/src/main/java/io/jenkins/plugins/coverage/CoveragePublisher/CoveragePublisher.java:[80,33] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var panel = new SourceCodeDirectoryPanel(this, path);'?\n[WARNING] /mnt/repo/ui-tests/src/main/java/io/jenkins/plugins/coverage/CoveragePublisher/CoveragePublisher.java:[184,16] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var newAdapter = new Adapter(this, path);'?\n[WARNING] /mnt/repo/ui-tests/src/main/java/io/jenkins/plugins/coverage/CoveragePublisher/CoveragePublisher.java:[218,24] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var threshold = new GlobalThreshold(this, path);'?\n[WARNING] /mnt/repo/ui-tests/src/main/java/io/jenkins/plugins/coverage/CoveragePublisher/CoveragePublisher.java:[242,8] [MemberName] Static variables should be named in UPPER_SNAKE_CASE if deeply immutable or lowerCamelCase if not.\n(see https://google.github.io/styleguide/javaguide.html#s5.2-specific-identifier-names)\n[INFO]\n[INFO] --- help:3.4.0:active-profiles (show-profiles) @ code-coverage-api-ui-tests ---\n[INFO]\nActive Profiles for Project 'io.jenkins.plugins:code-coverage-api:hpi:4.2.0-SNAPSHOT':\nThe following profiles are active:\n- all-tests (source: org.jenkins-ci.plugins:plugin:4.56)\n- consume-incrementals (source: org.jenkins-ci.plugins:plugin:4.56)\n- might-produce-incrementals (source: org.jenkins-ci.plugins:plugin:4.56)\nActive Profiles for Project 'io.jenkins.plugins:code-coverage-api-ui-tests:jar:UNVERSIONED':\nThe following profiles are active:\n- consume-incrementals (source: io.jenkins.plugins:code-coverage-api-ui-tests:UNVERSIONED)\n- might-produce-incrementals (source: io.jenkins.plugins:code-coverage-api-ui-tests:UNVERSIONED)\nActive Profiles for Project 'io.jenkins.plugins:code-coverage-api-parent:pom:UNVERSIONED':\nThe following profiles are active:\n[INFO]\n[INFO] --- assertj:2.2.0:generate-assertions (default) @ code-coverage-api-ui-tests ---\n[INFO]\n[INFO] --- resources:3.2.0:testResources (default-testResources) @ code-coverage-api-ui-tests ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] Using 'UTF-8' encoding to copy filtered properties files.\n[INFO] Copying 3 resources\n[INFO]\n[INFO] --- compiler:3.10.1:testCompile (default-testCompile) @ code-coverage-api-ui-tests ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 23 source files to /mnt/repo/ui-tests/target/test-classes\n[WARNING] [options] bootstrap class path not set in conjunction with -source 8\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/CoverageSummaryTest.java:[34,24] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var cs = new CoverageSummary(build, \"coverage\");'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/CoverageSummaryTest.java:[53,24] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var cs = new CoverageSummary(build, \"coverage\");'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/CoverageSummaryTest.java:[76,24] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var cs = new CoverageSummary(build, \"coverage\");'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/CoverageSummaryTest.java:[96,24] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var cs = new CoverageSummary(build, \"coverage\");'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/CoveragePublisherTest.java:[109,23] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var report = new CoverageReport(build);'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/SmokeTests.java:[35,23] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var report = new CoverageReport(secondBuild);'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/SmokeTests.java:[52,18] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var mainPanel = new MainPanel(job);'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/CoverageReportTest.java:[31,23] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var report = new CoverageReport(build);'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/CoverageReportTest.java:[55,23] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var report = new CoverageReport(secondBuild);'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/CoverageReportTest.java:[81,23] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var report = new CoverageReport(secondBuild);'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/CoverageReportTest.java:[104,23] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var report = new CoverageReport(secondBuild);'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/MainPanelTest.java:[25,18] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var mainPanel = new MainPanel(job);'?\n[WARNING] /mnt/repo/ui-tests/src/test/java/io/jenkins/plugins/coverage/MainPanelTest.java:[37,18] [Varifier] Consider using `var` here to avoid boilerplate.\n(see https://errorprone.info/bugpattern/Varifier)\nDid you mean 'var mainPanel = new MainPanel(job);'?\n[INFO]\n[INFO] --- jacoco:0.8.8:prepare-agent (default) @ code-coverage-api-ui-tests ---\n[INFO] Skipping JaCoCo execution because property jacoco.skip is set.\n[INFO]\n[INFO] --- surefire:3.0.0-M7:test (default-test) @ code-coverage-api-ui-tests ---\n[INFO] Tests are skipped.\n[INFO]\n[INFO] ------------< io.jenkins.plugins:code-coverage-api-parent >-------------\n[INFO] Building Aggregator for Code Coverage Plugin UNVERSIONED [3/3]\n[INFO] from pom.xml\n[INFO] --------------------------------[ pom ]---------------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ code-coverage-api-parent ---\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO]\n[INFO] Code Coverage API Plugin 4.2.0-SNAPSHOT ............ SUCCESS [09:27 min]\n[INFO] UI Tests of Code Coverage Plugin UNVERSIONED ....... SUCCESS [01:49 min]\n[INFO] Aggregator for Code Coverage Plugin UNVERSIONED .... SUCCESS [ 0.028 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13:47 min\n[INFO] Finished at: 2024-08-09T14:25:34Z\n[INFO] ------------------------------------------------------------------------",
            "span_id": 14598589685848918850
        }
    ],
    "read_file": [
        {
            "input": "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java",
            "output": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport com.gargoylesoftware.htmlunit.ScriptResult;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            ScriptResult scriptResult = new ScriptResult(result);\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n                if (scriptResult != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n",
            "error": "",
            "span_id": 9031952080271398469
        }
    ],
    "get_directory_tree": [
        {
            "input": "ui-tests/src/main/java/io/jenkins/plugins/coverage/util",
            "output": "[\n    {\n        \"name\": \"ChartUtil.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 12261894984571746842
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}