{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -10,8 +10,8 @@\n import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n import javax.servlet.ServletException;\n+import org.eclipse.jetty.server.ServerConnector;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n@@ -29,19 +29,17 @@\n \n     public JettyStubHttpServer(StubbingRulesProvider stubbingRulesProvider) {\n         this.stubbingRulesProvider = stubbingRulesProvider;\n-        server = new Server();\n-        server.setSendServerVersion(false);\n-        server.setSendDateHeader(false);\n-        Connector httpConnector = new SelectChannelConnector();\n-        httpConnector.setPort(port);\n+        server = new Server(port);\n+        ServerConnector httpConnector = new ServerConnector(server);\n+        server.addConnector(httpConnector);\n         server.setHandler(new JadlerHandler());\n     }\n \n     @Override\n     public void start() throws Exception {\n         server.start();\n-        port = httpConnector.getLocalPort();\n+        port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n     }\n \n     @Override\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 8 exact lines in a row:\n```\nimport org.eclipse.jetty.server.handler.AbstractHandler;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 19 exact lines in a row:\n```\npublic JettyStubHttpServer(StubbingRulesProvider stubbingRulesProvider) {\nthis.stubbingRulesProvider = stubbingRulesProvider;\nserver = new Server();\nserver.setSendServerVersion(false);\nserver.setSendDateHeader(false);\nConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nserver.setHandler(new JadlerHandler());\n}\n@Override\npublic void start() throws Exception {\nserver.start();\nport = httpConnector.getLocalPort();\n}\n@Override\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 8 exact lines in a row:\n```\nimport org.eclipse.jetty.server.handler.AbstractHandler;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 19 exact lines in a row:\n```\npublic JettyStubHttpServer(StubbingRulesProvider stubbingRulesProvider) {\nthis.stubbingRulesProvider = stubbingRulesProvider;\nserver = new Server();\nserver.setSendServerVersion(false);\nserver.setSendDateHeader(false);\nConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nserver.setHandler(new JadlerHandler());\n}\n@Override\npublic void start() throws Exception {\nserver.start();\nport = httpConnector.getLocalPort();\n}\n@Override\n```",
            "span_id": 16615654080407301822
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -7,10 +7,11 @@\n \n package net.jadler.stubbing.server.jetty;\n \n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.Server;\n-import javax.servlet.ServletException;\n import org.eclipse.jetty.server.ServerConnector;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n \n public class JettyStubHttpServer implements StubHttpServer {\n \n@@ -29,17 +30,19 @@\n \n     public JettyStubHttpServer(StubbingRulesProvider stubbingRulesProvider) {\n         this.stubbingRulesProvider = stubbingRulesProvider;\n-        server = new Server(port);\n+        server = new Server();\n+        server.setStopAtShutdown(true);\n         ServerConnector httpConnector = new ServerConnector(server);\n+        httpConnector.setPort(port);\n         server.addConnector(httpConnector);\n         server.setHandler(new JadlerHandler());\n     }\n \n     @Override\n     public void start() throws Exception {\n+\n         server.start();\n-        port = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n+        port = ((ServerConnector)server.getConnectors()[0]).getLocalPort();\n     }\n \n     @Override\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 17 exact lines in a row:\n```\npublic JettyStubHttpServer(StubbingRulesProvider stubbingRulesProvider) {\nthis.stubbingRulesProvider = stubbingRulesProvider;\nserver = new Server(port);\nServerConnector httpConnector = new ServerConnector(server);\nserver.addConnector(httpConnector);\nserver.setHandler(new JadlerHandler());\n}\n@Override\npublic void start() throws Exception {\nserver.start();\nport = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n}\n@Override\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 17 exact lines in a row:\n```\npublic JettyStubHttpServer(StubbingRulesProvider stubbingRulesProvider) {\nthis.stubbingRulesProvider = stubbingRulesProvider;\nserver = new Server(port);\nServerConnector httpConnector = new ServerConnector(server);\nserver.addConnector(httpConnector);\nserver.setHandler(new JadlerHandler());\n}\n@Override\npublic void start() throws Exception {\nserver.start();\nport = ((ServerConnector) server.getConnectors()[0]).getLocalPort();\n}\n@Override\n```",
            "span_id": 10195218073522605849
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -39,7 +39,6 @@\n \n     @Override\n     public void start() throws Exception {\n-\n         server.start();\n         port = ((ServerConnector)server.getConnectors()[0]).getLocalPort();\n     }\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: method does not override or implement a method from a supertype\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\npublic void start() throws Exception {logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n}\n\n\n/**\n     * {@inheritDoc}\n*/\n@Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n}\n    }"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "12": {
                            "lines": [
                                {
                                    "line_no": 11,
                                    "content": "import org.eclipse.jetty.server.Server;"
                                },
                                {
                                    "line_no": 12,
                                    "content": "import org.eclipse.jetty.server.nio.SelectChannelConnector;"
                                },
                                {
                                    "line_no": 13,
                                    "content": "import org.slf4j.Logger;"
                                }
                            ],
                            "error_texts": [
                                "[12,35] error: package org.eclipse.jetty.server.nio does not exist\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                },
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[33,19] error: cannot find symbol\n",
                                "[33,19] error: cannot find symbol\nsymbol: method setSendServerVersion(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 35,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[34,19] error: cannot find symbol\n",
                                "[34,19] error: cannot find symbol\nsymbol: method setSendDateHeader(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": ""
                                },
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[36,33] error: cannot find symbol\n",
                                "[36,33] error: cannot find symbol\nsymbol: class SelectChannelConnector\nlocation: class JettyStubHttpServer\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                }
                            ],
                            "error_texts": [
                                "[37,26] error: cannot find symbol\nsymbol: method setPort(int)\nlocation: variable httpConnector of type Connector\n",
                                "[37,26] error: cannot find symbol\n"
                            ]
                        },
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 79,
                                    "content": "        return httpConnector.getLocalPort();"
                                },
                                {
                                    "line_no": 80,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[79,28] error: cannot find symbol\nsymbol: method getLocalPort()\nlocation: variable httpConnector of type Connector\n",
                                "[79,28] error: cannot find symbol\n"
                            ]
                        }
                    },
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": {
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": " */"
                                },
                                {
                                    "line_no": 25,
                                    "content": "class JadlerHandler extends AbstractHandler {"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: JadlerHandler is not abstract and does not override abstract method handle(String,Request,HttpServletRequest,HttpServletResponse) in AbstractHandler\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": ""
                                },
                                {
                                    "line_no": 39,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 40,
                                    "content": "    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,"
                                }
                            ],
                            "error_texts": [
                                "[39,4] error: method does not override or implement a method from a supertype\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: method does not override or implement a method from a supertype\n",
            "span_id": 2856069206605703437
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -10,6 +10,7 @@\n import java.io.IOException;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n+import net.jadler.RequestManager;\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n import javax.servlet.http.HttpServletResponse;\n@@ -24,7 +25,11 @@\n  * @author clongo\n  */\n \n-class JadlerHandler extends AbstractHandler {\n+class JadlerHandler extends AbstractHandler  {\n+    \n+    private final RequestManager requestManager;\n+    \n+    public JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.KeyValues;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.StubResponse;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport net.jadler.RequestManager;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler  {\n\n    private final RequestManager requestManager;\n\n    public JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n\n    private final RequestManager requestManager;\n\n\n    /**\n     * @param requestManager request manager instance to retrieve stub responses\n     */\n    JadlerHandler(final RequestManager requestManager) {\n        Validate.notNull(requestManager, \"requestManager cannot be null\");\n        this.requestManager = requestManager;\n    }\n\n\n    @Override\n    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n\n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n\n        baseRequest.setHandled(true);\n\n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n    }\n\n\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n        }\n    }\n\n\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key : headers.getKeys()) {\n\n            for (final String value : headers.getValues(key)) {\n                response.addHeader(key, value);\n            }\n        }\n    }\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\n            try {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": {
                        "32": {
                            "lines": [
                                {
                                    "line_no": 31,
                                    "content": ""
                                },
                                {
                                    "line_no": 32,
                                    "content": "    private final RequestManager requestManager;"
                                },
                                {
                                    "line_no": 33,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[32,33] error: variable requestManager is already defined in class JadlerHandler\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 38,
                                    "content": "    JadlerHandler(final RequestManager requestManager) {"
                                },
                                {
                                    "line_no": 39,
                                    "content": "        Validate.notNull(requestManager, \"requestManager cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[38,4] error: constructor JadlerHandler(RequestManager) is already defined in class JadlerHandler\n"
                            ]
                        },
                        "26": {
                            "lines": [
                                {
                                    "line_no": 25,
                                    "content": " */"
                                },
                                {
                                    "line_no": 26,
                                    "content": "class JadlerHandler extends AbstractHandler  {"
                                },
                                {
                                    "line_no": 27,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[26,] error: JadlerHandler is not abstract and does not override abstract method handle(String,Request,HttpServletRequest,HttpServletResponse) in AbstractHandler\n"
                            ]
                        },
                        "44": {
                            "lines": [
                                {
                                    "line_no": 43,
                                    "content": ""
                                },
                                {
                                    "line_no": 44,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 45,
                                    "content": "    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,"
                                }
                            ],
                            "error_texts": [
                                "[44,4] error: method does not override or implement a method from a supertype\n"
                            ]
                        }
                    },
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "12": {
                            "lines": [
                                {
                                    "line_no": 11,
                                    "content": "import org.eclipse.jetty.server.Server;"
                                },
                                {
                                    "line_no": 12,
                                    "content": "import org.eclipse.jetty.server.nio.SelectChannelConnector;"
                                },
                                {
                                    "line_no": 13,
                                    "content": "import org.slf4j.Logger;"
                                }
                            ],
                            "error_texts": [
                                "[12,35] error: package org.eclipse.jetty.server.nio does not exist\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                },
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[33,19] error: cannot find symbol\n",
                                "[33,19] error: cannot find symbol\nsymbol: method setSendServerVersion(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 35,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[34,19] error: cannot find symbol\n",
                                "[34,19] error: cannot find symbol\nsymbol: method setSendDateHeader(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": ""
                                },
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[36,33] error: cannot find symbol\n",
                                "[36,33] error: cannot find symbol\nsymbol: class SelectChannelConnector\nlocation: class JettyStubHttpServer\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                }
                            ],
                            "error_texts": [
                                "[37,26] error: cannot find symbol\nsymbol: method setPort(int)\nlocation: variable httpConnector of type Connector\n",
                                "[37,26] error: cannot find symbol\n"
                            ]
                        },
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 79,
                                    "content": "        return httpConnector.getLocalPort();"
                                },
                                {
                                    "line_no": 80,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[79,28] error: cannot find symbol\nsymbol: method getLocalPort()\nlocation: variable httpConnector of type Connector\n",
                                "[79,28] error: cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 17777775108043324087
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -23,20 +23,15 @@\n  * Jetty Handler which handles all http communication by returning an http response according to a stub response\n  * obtained from a {@link RequestManager} instance.\n  * @author clongo\n+ * @author stefanbirkner\n  */\n-\n class JadlerHandler extends AbstractHandler  {\n     \n     private final RequestManager requestManager;\n     \n-    public JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n+    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n-    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n-                       final HttpServletResponse response) throws IOException, ServletException {\\n\\n        final net.jadler.Request req = RequestUtils.convert(request);\\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\\n\\n        response.setStatus(stubResponse.getStatus());\\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\\n\\n        baseRequest.setHandled(true);\\n\\n        this.processDelay(stubResponse.getDelay());\\n        this.insertResponseBody(stubResponse.getBody(), response);\\n    }\\n\\n\\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\\n        if (body.length > 0) {\\n            final OutputStream os = response.getOutputStream();\\n            os.write(body);\\n        }\\n    }\\n\\n\\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\\n        for (final String key : headers.getKeys()) {\\n\\n            for (final String value : headers.getValues(key)) {\\n                response.addHeader(key, value);\\n            }\\n        }\\n    }\\n\\n\\n    private void processDelay(final long delay) {\\n        if (delay > 0) {\\n            try {\\n                Thread.sleep(delay);\\n            } catch (final InterruptedException e) {\\n                Thread.currentThread().interrupt();\\n            }\\n        }\\n    }\\n}\n+    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n+        final net.jadler.Request req = RequestUtils.convert(request);\n+        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n+        response.setStatus(stubResponse.getStatus());\n+        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n+        baseRequest.setHandled(true);\n+        this.processDelay(stubResponse.getDelay());\n+        this.insertResponseBody(stubResponse.getBody(), response);\n+    }\n+\n+    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n+        if (body.length > 0) {\n+            final OutputStream os = response.getOutputStream();\n+            os.write(body);\n+        }\n+    }\n+\n+    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n+        for (final String key : headers.getKeys()) {\n+            for (final String value : headers.getValues(key)) {\n+                response.addHeader(key, value);\n+            }\n+        }\n+    }\n+\n+    private void processDelay(final long delay) {\n+        if (delay > 0) {\n+            try {\n+                Thread.sleep(delay);\n+            } catch (final InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+            }\n+        }\n+    }\n+}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 14 exact lines in a row:\n```\n* Jetty Handler which handles all http communication by returning an http response according to a stub response\n* obtained from a {@link RequestManager} instance.\n* @author clongo\n*/\nclass JadlerHandler extends AbstractHandler {\nprivate final RequestManager requestManager;\npublic JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(final String target, final Request baseRequest, final HttpServletRequest request,\nfinal HttpServletResponse response) throws IOException, ServletException {\\n\\n final net.jadler.Request req = RequestUtils.convert(request);\\n final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\\n\\n response.setStatus(stubResponse.getStatus());\\n this.insertResponseHeaders(stubResponse.getHeaders(), response);\\n\\n baseRequest.setHandled(true);\\n\\n this.processDelay(stubResponse.getDelay());\\n this.insertResponseBody(stubResponse.getBody(), response);\\n }\\n\\n\\n private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\\n if (body.length > 0) {\\n final OutputStream os = response.getOutputStream();\\n os.write(body);\\n }\\n }\\n\\n\\n private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\\n for (final String key : headers.getKeys()) {\\n\\n for (final String value : headers.getValues(key)) {\\n response.addHeader(key, value);\\n }\\n }\\n }\\n\\n\\n private void processDelay(final long delay) {\\n if (delay > 0) {\\n try {\\n Thread.sleep(delay);\\n } catch (final InterruptedException e) {\\n Thread.currentThread().interrupt();\\n }\\n }\\n }\\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 14 exact lines in a row:\n```\n* Jetty Handler which handles all http communication by returning an http response according to a stub response\n* obtained from a {@link RequestManager} instance.\n* @author clongo\n*/\nclass JadlerHandler extends AbstractHandler {\nprivate final RequestManager requestManager;\npublic JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(final String target, final Request baseRequest, final HttpServletRequest request,\nfinal HttpServletResponse response) throws IOException, ServletException {\\n\\n final net.jadler.Request req = RequestUtils.convert(request);\\n final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\\n\\n response.setStatus(stubResponse.getStatus());\\n this.insertResponseHeaders(stubResponse.getHeaders(), response);\\n\\n baseRequest.setHandled(true);\\n\\n this.processDelay(stubResponse.getDelay());\\n this.insertResponseBody(stubResponse.getBody(), response);\\n }\\n\\n\\n private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\\n if (body.length > 0) {\\n final OutputStream os = response.getOutputStream();\\n os.write(body);\\n }\\n }\\n\\n\\n private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\\n for (final String key : headers.getKeys()) {\\n\\n for (final String value : headers.getValues(key)) {\\n response.addHeader(key, value);\\n }\\n }\\n }\\n\\n\\n private void processDelay(final long delay) {\\n if (delay > 0) {\\n try {\\n Thread.sleep(delay);\\n } catch (final InterruptedException e) {\\n Thread.currentThread().interrupt();\\n }\\n }\\n }\\n}\n```",
            "span_id": 6784578597241348324
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -25,10 +25,10 @@\n  * @author clongo\n  * @author stefanbirkner\n  */\n-class JadlerHandler extends AbstractHandler  {\n+class JadlerHandler extends AbstractHandler {\n     \n     private final RequestManager requestManager;\n     \n-    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n+    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; } \n \n     @Override\n     public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.KeyValues;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.StubResponse;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport net.jadler.RequestManager;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler {\n\n    private final RequestManager requestManager;\n\npublic JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; } \n\n    private final RequestManager requestManager;\n\n\n    /**\n     * @param requestManager request manager instance to retrieve stub responses\n     */\n    JadlerHandler(final RequestManager requestManager) {\n        Validate.notNull(requestManager, \"requestManager cannot be null\");\n        this.requestManager = requestManager;\n    }\n\n\n    @Override\n    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n\n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n\n        baseRequest.setHandled(true);\n\n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n    }\n\n\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n        }\n    }\n\n\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key : headers.getKeys()) {\n\n            for (final String value : headers.getValues(key)) {\n                response.addHeader(key, value);\n            }\n        }\n    }\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\n            try {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": {
                        "32": {
                            "lines": [
                                {
                                    "line_no": 31,
                                    "content": ""
                                },
                                {
                                    "line_no": 32,
                                    "content": "    private final RequestManager requestManager;"
                                },
                                {
                                    "line_no": 33,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[32,33] error: variable requestManager is already defined in class JadlerHandler\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 38,
                                    "content": "    JadlerHandler(final RequestManager requestManager) {"
                                },
                                {
                                    "line_no": 39,
                                    "content": "        Validate.notNull(requestManager, \"requestManager cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[38,4] error: constructor JadlerHandler(RequestManager) is already defined in class JadlerHandler\n"
                            ]
                        },
                        "26": {
                            "lines": [
                                {
                                    "line_no": 25,
                                    "content": " */"
                                },
                                {
                                    "line_no": 26,
                                    "content": "class JadlerHandler extends AbstractHandler {"
                                },
                                {
                                    "line_no": 27,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[26,] error: JadlerHandler is not abstract and does not override abstract method handle(String,Request,HttpServletRequest,HttpServletResponse) in AbstractHandler\n"
                            ]
                        },
                        "44": {
                            "lines": [
                                {
                                    "line_no": 43,
                                    "content": ""
                                },
                                {
                                    "line_no": 44,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 45,
                                    "content": "    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,"
                                }
                            ],
                            "error_texts": [
                                "[44,4] error: method does not override or implement a method from a supertype\n"
                            ]
                        }
                    },
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "12": {
                            "lines": [
                                {
                                    "line_no": 11,
                                    "content": "import org.eclipse.jetty.server.Server;"
                                },
                                {
                                    "line_no": 12,
                                    "content": "import org.eclipse.jetty.server.nio.SelectChannelConnector;"
                                },
                                {
                                    "line_no": 13,
                                    "content": "import org.slf4j.Logger;"
                                }
                            ],
                            "error_texts": [
                                "[12,35] error: package org.eclipse.jetty.server.nio does not exist\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                },
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[33,19] error: cannot find symbol\n",
                                "[33,19] error: cannot find symbol\nsymbol: method setSendServerVersion(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 35,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[34,19] error: cannot find symbol\n",
                                "[34,19] error: cannot find symbol\nsymbol: method setSendDateHeader(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": ""
                                },
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[36,33] error: cannot find symbol\n",
                                "[36,33] error: cannot find symbol\nsymbol: class SelectChannelConnector\nlocation: class JettyStubHttpServer\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                }
                            ],
                            "error_texts": [
                                "[37,26] error: cannot find symbol\nsymbol: method setPort(int)\nlocation: variable httpConnector of type Connector\n",
                                "[37,26] error: cannot find symbol\n"
                            ]
                        },
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 79,
                                    "content": "        return httpConnector.getLocalPort();"
                                },
                                {
                                    "line_no": 80,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[79,28] error: cannot find symbol\nsymbol: method getLocalPort()\nlocation: variable httpConnector of type Connector\n",
                                "[79,28] error: cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 13190051557508191559
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -29,7 +29,7 @@\n     \n     private final RequestManager requestManager;\n     \n-    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; } \n+    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n     public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.KeyValues;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.StubResponse;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport net.jadler.RequestManager;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler {\n\n    private final RequestManager requestManager;\n\npublic JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n\n    private final RequestManager requestManager;\n\n\n    /**\n     * @param requestManager request manager instance to retrieve stub responses\n     */\n    JadlerHandler(final RequestManager requestManager) {\n        Validate.notNull(requestManager, \"requestManager cannot be null\");\n        this.requestManager = requestManager;\n    }\n\n\n    @Override\n    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n\n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n\n        baseRequest.setHandled(true);\n\n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n    }\n\n\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n        }\n    }\n\n\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key : headers.getKeys()) {\n\n            for (final String value : headers.getValues(key)) {\n                response.addHeader(key, value);\n            }\n        }\n    }\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\n            try {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": {
                        "32": {
                            "lines": [
                                {
                                    "line_no": 31,
                                    "content": ""
                                },
                                {
                                    "line_no": 32,
                                    "content": "    private final RequestManager requestManager;"
                                },
                                {
                                    "line_no": 33,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[32,33] error: variable requestManager is already defined in class JadlerHandler\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 38,
                                    "content": "    JadlerHandler(final RequestManager requestManager) {"
                                },
                                {
                                    "line_no": 39,
                                    "content": "        Validate.notNull(requestManager, \"requestManager cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[38,4] error: constructor JadlerHandler(RequestManager) is already defined in class JadlerHandler\n"
                            ]
                        },
                        "26": {
                            "lines": [
                                {
                                    "line_no": 25,
                                    "content": " */"
                                },
                                {
                                    "line_no": 26,
                                    "content": "class JadlerHandler extends AbstractHandler {"
                                },
                                {
                                    "line_no": 27,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[26,] error: JadlerHandler is not abstract and does not override abstract method handle(String,Request,HttpServletRequest,HttpServletResponse) in AbstractHandler\n"
                            ]
                        },
                        "44": {
                            "lines": [
                                {
                                    "line_no": 43,
                                    "content": ""
                                },
                                {
                                    "line_no": 44,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 45,
                                    "content": "    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,"
                                }
                            ],
                            "error_texts": [
                                "[44,4] error: method does not override or implement a method from a supertype\n"
                            ]
                        }
                    },
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "12": {
                            "lines": [
                                {
                                    "line_no": 11,
                                    "content": "import org.eclipse.jetty.server.Server;"
                                },
                                {
                                    "line_no": 12,
                                    "content": "import org.eclipse.jetty.server.nio.SelectChannelConnector;"
                                },
                                {
                                    "line_no": 13,
                                    "content": "import org.slf4j.Logger;"
                                }
                            ],
                            "error_texts": [
                                "[12,35] error: package org.eclipse.jetty.server.nio does not exist\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                },
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[33,19] error: cannot find symbol\n",
                                "[33,19] error: cannot find symbol\nsymbol: method setSendServerVersion(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 35,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[34,19] error: cannot find symbol\n",
                                "[34,19] error: cannot find symbol\nsymbol: method setSendDateHeader(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": ""
                                },
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[36,33] error: cannot find symbol\n",
                                "[36,33] error: cannot find symbol\nsymbol: class SelectChannelConnector\nlocation: class JettyStubHttpServer\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                }
                            ],
                            "error_texts": [
                                "[37,26] error: cannot find symbol\nsymbol: method setPort(int)\nlocation: variable httpConnector of type Connector\n",
                                "[37,26] error: cannot find symbol\n"
                            ]
                        },
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 79,
                                    "content": "        return httpConnector.getLocalPort();"
                                },
                                {
                                    "line_no": 80,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[79,28] error: cannot find symbol\nsymbol: method getLocalPort()\nlocation: variable httpConnector of type Connector\n",
                                "[79,28] error: cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 6257220500875115463
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -26,9 +26,7 @@\n  * @author stefanbirkner\n  */\n class JadlerHandler extends AbstractHandler {\n-    \n     private final RequestManager requestManager;\n-    \n     JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.KeyValues;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.StubResponse;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport net.jadler.RequestManager;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler {\n    private final RequestManager requestManager;\n\npublic JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n\n    private final RequestManager requestManager;\n\n\n    /**\n     * @param requestManager request manager instance to retrieve stub responses\n     */\n    JadlerHandler(final RequestManager requestManager) {\n        Validate.notNull(requestManager, \"requestManager cannot be null\");\n        this.requestManager = requestManager;\n    }\n\n\n    @Override\n    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n\n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n\n        baseRequest.setHandled(true);\n\n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n    }\n\n\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n        }\n    }\n\n\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key : headers.getKeys()) {\n\n            for (final String value : headers.getValues(key)) {\n                response.addHeader(key, value);\n            }\n        }\n    }\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\n            try {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": {
                        "31": {
                            "lines": [
                                {
                                    "line_no": 30,
                                    "content": ""
                                },
                                {
                                    "line_no": 31,
                                    "content": "    private final RequestManager requestManager;"
                                },
                                {
                                    "line_no": 32,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[31,33] error: variable requestManager is already defined in class JadlerHandler\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 37,
                                    "content": "    JadlerHandler(final RequestManager requestManager) {"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        Validate.notNull(requestManager, \"requestManager cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[37,4] error: constructor JadlerHandler(RequestManager) is already defined in class JadlerHandler\n"
                            ]
                        },
                        "26": {
                            "lines": [
                                {
                                    "line_no": 25,
                                    "content": " */"
                                },
                                {
                                    "line_no": 26,
                                    "content": "class JadlerHandler extends AbstractHandler {"
                                },
                                {
                                    "line_no": 27,
                                    "content": "    private final RequestManager requestManager;"
                                }
                            ],
                            "error_texts": [
                                "[26,] error: JadlerHandler is not abstract and does not override abstract method handle(String,Request,HttpServletRequest,HttpServletResponse) in AbstractHandler\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": ""
                                },
                                {
                                    "line_no": 43,
                                    "content": "    @Override"
                                },
                                {
                                    "line_no": 44,
                                    "content": "    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,"
                                }
                            ],
                            "error_texts": [
                                "[43,4] error: method does not override or implement a method from a supertype\n"
                            ]
                        }
                    },
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "12": {
                            "lines": [
                                {
                                    "line_no": 11,
                                    "content": "import org.eclipse.jetty.server.Server;"
                                },
                                {
                                    "line_no": 12,
                                    "content": "import org.eclipse.jetty.server.nio.SelectChannelConnector;"
                                },
                                {
                                    "line_no": 13,
                                    "content": "import org.slf4j.Logger;"
                                }
                            ],
                            "error_texts": [
                                "[12,35] error: package org.eclipse.jetty.server.nio does not exist\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                },
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[33,19] error: cannot find symbol\n",
                                "[33,19] error: cannot find symbol\nsymbol: method setSendServerVersion(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 35,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[34,19] error: cannot find symbol\n",
                                "[34,19] error: cannot find symbol\nsymbol: method setSendDateHeader(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": ""
                                },
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[36,33] error: cannot find symbol\n",
                                "[36,33] error: cannot find symbol\nsymbol: class SelectChannelConnector\nlocation: class JettyStubHttpServer\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                }
                            ],
                            "error_texts": [
                                "[37,26] error: cannot find symbol\nsymbol: method setPort(int)\nlocation: variable httpConnector of type Connector\n",
                                "[37,26] error: cannot find symbol\n"
                            ]
                        },
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 79,
                                    "content": "        return httpConnector.getLocalPort();"
                                },
                                {
                                    "line_no": 80,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[79,28] error: cannot find symbol\nsymbol: method getLocalPort()\nlocation: variable httpConnector of type Connector\n",
                                "[79,28] error: cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 16624291709533874415
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -27,7 +27,9 @@\n   */\n class JadlerHandler extends AbstractHandler {\n     private final RequestManager requestManager;\n-    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n+    JadlerHandler(final RequestManager requestManager) {\n+        this.requestManager = requestManager;\n+    }\n \n     @Override\n     public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.KeyValues;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.StubResponse;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport net.jadler.RequestManager;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler {\n    private final RequestManager requestManager;\n\npublic JadlerHandler(final RequestManager requestManager) {\n        this.requestManager = requestManager;\n}\n\n    private final RequestManager requestManager;\n\n\n/**\n     * @param requestManager request manager instance to retrieve stub responses\n*/\n    JadlerHandler(final RequestManager requestManager) {\n        Validate.notNull(requestManager, \"requestManager cannot be null\");\n        this.requestManager = requestManager;\n}\n\n\n@Override\n    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n\n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n\n        baseRequest.setHandled(true);\n\n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n}\n\n\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n}\n}\n\n\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key : headers.getKeys()) {\n\n            for (final String value : headers.getValues(key)) {\n                response.addHeader(key, value);\n    }\n}\n}\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\ntry {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n    }\n}\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": {
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": ""
                                },
                                {
                                    "line_no": 33,
                                    "content": "    private final RequestManager requestManager;"
                                },
                                {
                                    "line_no": 34,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[33,33] error: variable requestManager is already defined in class JadlerHandler\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": "*/"
                                },
                                {
                                    "line_no": 39,
                                    "content": "    JadlerHandler(final RequestManager requestManager) {"
                                },
                                {
                                    "line_no": 40,
                                    "content": "        Validate.notNull(requestManager, \"requestManager cannot be null\");"
                                }
                            ],
                            "error_texts": [
                                "[39,4] error: constructor JadlerHandler(RequestManager) is already defined in class JadlerHandler\n"
                            ]
                        },
                        "26": {
                            "lines": [
                                {
                                    "line_no": 25,
                                    "content": " */"
                                },
                                {
                                    "line_no": 26,
                                    "content": "class JadlerHandler extends AbstractHandler {"
                                },
                                {
                                    "line_no": 27,
                                    "content": "    private final RequestManager requestManager;"
                                }
                            ],
                            "error_texts": [
                                "[26,] error: JadlerHandler is not abstract and does not override abstract method handle(String,Request,HttpServletRequest,HttpServletResponse) in AbstractHandler\n"
                            ]
                        },
                        "45": {
                            "lines": [
                                {
                                    "line_no": 44,
                                    "content": ""
                                },
                                {
                                    "line_no": 45,
                                    "content": "@Override"
                                },
                                {
                                    "line_no": 46,
                                    "content": "    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,"
                                }
                            ],
                            "error_texts": [
                                "[45,] error: method does not override or implement a method from a supertype\n"
                            ]
                        }
                    },
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "12": {
                            "lines": [
                                {
                                    "line_no": 11,
                                    "content": "import org.eclipse.jetty.server.Server;"
                                },
                                {
                                    "line_no": 12,
                                    "content": "import org.eclipse.jetty.server.nio.SelectChannelConnector;"
                                },
                                {
                                    "line_no": 13,
                                    "content": "import org.slf4j.Logger;"
                                }
                            ],
                            "error_texts": [
                                "[12,35] error: package org.eclipse.jetty.server.nio does not exist\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "        this.server = new Server();"
                                },
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                }
                            ],
                            "error_texts": [
                                "[33,19] error: cannot find symbol\n",
                                "[33,19] error: cannot find symbol\nsymbol: method setSendServerVersion(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "        this.server.setSendServerVersion(false);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        this.server.setSendDateHeader(true);"
                                },
                                {
                                    "line_no": 35,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[34,19] error: cannot find symbol\n",
                                "[34,19] error: cannot find symbol\nsymbol: method setSendDateHeader(boolean)\nlocation: variable server of type Server\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": ""
                                },
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                }
                            ],
                            "error_texts": [
                                "[36,33] error: cannot find symbol\n",
                                "[36,33] error: cannot find symbol\nsymbol: class SelectChannelConnector\nlocation: class JettyStubHttpServer\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "        this.httpConnector = new SelectChannelConnector();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        this.httpConnector.setPort(port);"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        server.addConnector(this.httpConnector);"
                                }
                            ],
                            "error_texts": [
                                "[37,26] error: cannot find symbol\nsymbol: method setPort(int)\nlocation: variable httpConnector of type Connector\n",
                                "[37,26] error: cannot find symbol\n"
                            ]
                        },
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": "    public int getPort() {"
                                },
                                {
                                    "line_no": 79,
                                    "content": "        return httpConnector.getLocalPort();"
                                },
                                {
                                    "line_no": 80,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[79,28] error: cannot find symbol\nsymbol: method getLocalPort()\nlocation: variable httpConnector of type Connector\n",
                                "[79,28] error: cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 9745093965514270632
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -26,9 +26,7 @@\n  * @author stefanbirkner\n  */\n class JadlerHandler extends AbstractHandler {\n-    private final RequestManager requestManager;\n-    JadlerHandler(final RequestManager requestManager) {\n-        this.requestManager = requestManager;\n-    }\n+    private final RequestManager requestManager;    \n+    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n     public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 11 exact lines in a row:\n```\n* @author stefanbirkner\n*/\nclass JadlerHandler extends AbstractHandler {\nprivate final RequestManager requestManager;\nJadlerHandler(final RequestManager requestManager) {\nthis.requestManager = requestManager;\n}\n@Override\npublic void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 11 exact lines in a row:\n```\n* @author stefanbirkner\n*/\nclass JadlerHandler extends AbstractHandler {\nprivate final RequestManager requestManager;\nJadlerHandler(final RequestManager requestManager) {\nthis.requestManager = requestManager;\n}\n@Override\npublic void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n```",
            "span_id": 5957848028944054545
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -26,8 +26,10 @@\n  * @author stefanbirkner\n   */\n class JadlerHandler extends AbstractHandler {\n-    private final RequestManager requestManager;    \n-    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n+\n+    private final RequestManager requestManager;\n+\n+    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n     public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 9 exact lines in a row:\n```\n* @author stefanbirkner\n*/\nclass JadlerHandler extends AbstractHandler {\nprivate final RequestManager requestManager;\nJadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 9 exact lines in a row:\n```\n* @author stefanbirkner\n*/\nclass JadlerHandler extends AbstractHandler {\nprivate final RequestManager requestManager;\nJadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n```",
            "span_id": 10906182311018884677
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -32,7 +32,7 @@\n     JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n-    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n+    public void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n         final net.jadler.Request req = RequestUtils.convert(request);\n         final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n         response.setStatus(stubResponse.getStatus());\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: not a statement\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.KeyValues;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.StubResponse;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport net.jadler.RequestManager;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler {\n    private final RequestManager requestManager;\n\npublic JadlerHandler(final RequestManager requestManager) {\n        this.requestManager = requestManager;\n}\n-    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n+    public void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n\n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n\n        baseRequest.setHandled(true);\n\n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n}\n\n\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n}\n}\n\n\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key : headers.getKeys()) {\n\n            for (final String value : headers.getValues(key)) {\n                response.addHeader(key, value);\n    }\n}\n}\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\ntry {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n    }\n}\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java": {
                        "32": {
                            "lines": [
                                {
                                    "line_no": 31,
                                    "content": "}"
                                },
                                {
                                    "line_no": 32,
                                    "content": "-    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {"
                                },
                                {
                                    "line_no": 33,
                                    "content": "+    public void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {"
                                }
                            ],
                            "error_texts": [
                                "[32,] error: illegal start of type\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "-    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {"
                                },
                                {
                                    "line_no": 33,
                                    "content": "+    public void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {"
                                },
                                {
                                    "line_no": 34,
                                    "content": "        final net.jadler.Request req = RequestUtils.convert(request);"
                                }
                            ],
                            "error_texts": [
                                "[33,5] error: illegal start of expression\n",
                                "[33,] error: not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: not a statement\n",
            "span_id": 5244477233735250723
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -29,7 +29,7 @@\n \n     private final RequestManager requestManager;\n \n-    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n+    public JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 8 exact lines in a row:\n```\nprivate final RequestManager requestManager;\nJadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 8 exact lines in a row:\n```\nprivate final RequestManager requestManager;\nJadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n```",
            "span_id": 5116918162738343804
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -29,7 +29,7 @@\n \n     private final RequestManager requestManager;\n \n-    public JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n+    JadlerHandler(RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 8 exact lines in a row:\n```\nprivate final RequestManager requestManager;\npublic JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 8 exact lines in a row:\n```\nprivate final RequestManager requestManager;\npublic JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n```",
            "span_id": 14606612001770949932
        },
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -29,7 +29,7 @@\n \n     private final RequestManager requestManager;\n \n-    JadlerHandler(RequestManager requestManager) { this.requestManager = requestManager; }\n+    JadlerHandler(final RequestManager requestManager) { this.requestManager = requestManager; }\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 8 exact lines in a row:\n```\nprivate final RequestManager requestManager;\nJadlerHandler(RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 8 exact lines in a row:\n```\nprivate final RequestManager requestManager;\nJadlerHandler(RequestManager requestManager) { this.requestManager = requestManager; }\n@Override\npublic void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {\n```",
            "span_id": 8150570885569888183
        }
    ],
    "read_file": [],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}