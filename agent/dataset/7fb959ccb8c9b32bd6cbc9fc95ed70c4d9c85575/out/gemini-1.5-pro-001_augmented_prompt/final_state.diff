diff --git a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java
index 6df6ebf..dc8515e 100644
--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java
+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java
@@ -13,6 +13,7 @@ import org.eclipse.jetty.server.handler.AbstractHandler;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
+import net.jadler.RequestManager;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.io.OutputStream;
@@ -23,23 +24,13 @@ import java.io.OutputStream;
  * obtained from a {@link RequestManager} instance.
  */
 class JadlerHandler extends AbstractHandler {
-
     private final RequestManager requestManager;
 
-
-    /**
-     * @param requestManager request manager instance to retrieve stub responses
-     */
-    JadlerHandler(final RequestManager requestManager) {
-        Validate.notNull(requestManager, "requestManager cannot be null");
+public JadlerHandler(final RequestManager requestManager) {
         this.requestManager = requestManager;
-    }
-
-
-    @Override
-    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,
-                       final HttpServletResponse response) throws IOException, ServletException {
-
+}
+-    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
++    public void handle(final String target, final Request baseRequest, final HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {
         final net.jadler.Request req = RequestUtils.convert(request);
         final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);
 
@@ -50,15 +41,15 @@ class JadlerHandler extends AbstractHandler {
 
         this.processDelay(stubResponse.getDelay());
         this.insertResponseBody(stubResponse.getBody(), response);
-    }
+}
 
 
     private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {
         if (body.length > 0) {
             final OutputStream os = response.getOutputStream();
             os.write(body);
-        }
-    }
+}
+}
 
 
     private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {
@@ -66,18 +57,18 @@ class JadlerHandler extends AbstractHandler {
 
             for (final String value : headers.getValues(key)) {
                 response.addHeader(key, value);
-            }
-        }
     }
+}
+}
 
 
     private void processDelay(final long delay) {
         if (delay > 0) {
-            try {
+try {
                 Thread.sleep(delay);
             } catch (final InterruptedException e) {
                 Thread.currentThread().interrupt();
-            }
-        }
     }
+}
+}
 }
\ No newline at end of file
diff --git a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
index b6fde22..0f9bf2b 100644
--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
@@ -54,29 +54,28 @@ public class JettyStubHttpServer implements StubHttpServer {
      * {@inheritDoc}
      */
     @Override
-    public void start() throws Exception {
-        logger.debug("starting jetty");
+public void start() throws Exception {logger.debug("starting jetty");
         server.start();
         logger.debug("jetty started");
-    }
+}
 
 
-    /**
+/**
      * {@inheritDoc}
-     */
-    @Override
+*/
+@Override
     public void stop() throws Exception {
         logger.debug("stopping jetty");
         server.stop();
         logger.debug("jetty stopped");
-    }
+}
 
 
-    /**
+/**
      * {@inheritDoc}
-     */
-    @Override
+*/
+@Override
     public int getPort() {
         return httpConnector.getLocalPort();
-    }
-}
\ No newline at end of file
+}
+    }
\ No newline at end of file