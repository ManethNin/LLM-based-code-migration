diff --git a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java
index 6df6ebf..dc72b42 100644
--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java
+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java
@@ -39,6 +39,7 @@ class JadlerHandler extends AbstractHandler {
     @Override
     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,
                        final HttpServletResponse response) throws IOException, ServletException {
+        baseRequest.setHandled(true);
 
         final net.jadler.Request req = RequestUtils.convert(request);
         final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);
@@ -50,15 +51,15 @@ class JadlerHandler extends AbstractHandler {
 
         this.processDelay(stubResponse.getDelay());
         this.insertResponseBody(stubResponse.getBody(), response);
-    }
+}
 
 
     private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {
         if (body.length > 0) {
             final OutputStream os = response.getOutputStream();
             os.write(body);
-        }
     }
+}
 
 
     private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {
@@ -66,18 +67,121 @@ class JadlerHandler extends AbstractHandler {
 
             for (final String value : headers.getValues(key)) {
                 response.addHeader(key, value);
-            }
         }
     }
+}
 
 
     private void processDelay(final long delay) {
         if (delay > 0) {
-            try {
+try {
                 Thread.sleep(delay);
             } catch (final InterruptedException e) {
                 Thread.currentThread().interrupt();
-            }
         }
     }
-}
\ No newline at end of file
+}
+}import org.eclipse.jetty.server.handler.ContextHandler;
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+import org.eclipse.jetty.server.handler.ContextHandler;
+}
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+import org.eclipse.jetty.server.handler.ContextHandler;
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+import org.eclipse.jetty.server.handler.ContextHandler;
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
+    @Override
+    public void doStart() throws Exception {
+        super.doStart();
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        super.doStop();
+    }
diff --git a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
index b6fde22..2dc10e2 100644
--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
@@ -7,9 +7,9 @@ package net.jadler.stubbing.server.jetty;
 import net.jadler.RequestManager;
 import net.jadler.stubbing.server.StubHttpServer;
 import org.apache.commons.lang.Validate;
-import org.eclipse.jetty.server.Connector;
+import org.eclipse.jetty.server.ConnectionFactory;
 import org.eclipse.jetty.server.Server;
-import org.eclipse.jetty.server.nio.SelectChannelConnector;
+import org.eclipse.jetty.server.ServerConnector;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -30,12 +30,13 @@ public class JettyStubHttpServer implements StubHttpServer {
 
     public JettyStubHttpServer(final int port) {
         this.server = new Server();
-        this.server.setSendServerVersion(false);
-        this.server.setSendDateHeader(true);
+        this.server.setAttribute("org.eclipse.jetty.server.sendServerVersion", false);
+        this.server.setAttribute("org.eclipse.jetty.server.sendDateHeader", true);
 
-        this.httpConnector = new SelectChannelConnector();
-        this.httpConnector.setPort(port);
-        server.addConnector(this.httpConnector);
+        ServerConnector connector = new ServerConnector(this.server);
+        connector.setPort(port);
+        this.server.addConnector(connector);
+        this.httpConnector = connector;
     }
 
 
@@ -77,6 +78,6 @@ public class JettyStubHttpServer implements StubHttpServer {
      */
     @Override
     public int getPort() {
-        return httpConnector.getLocalPort();
+return ((ServerConnector) httpConnector).getLocalPort();
     }
 }
\ No newline at end of file