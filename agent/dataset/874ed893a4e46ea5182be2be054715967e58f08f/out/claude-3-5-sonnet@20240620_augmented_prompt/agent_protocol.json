{
    "validate_diffs": [
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -1,6 +1,7 @@\n package de.gwdg.metadataqa.marc.dao;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import de.gwdg.metadataqa.marc.Control;\n@@ -424,7 +425,11 @@ public class MarcRecord implements Serializable {\n   @JsonIgnore\n   public String toJson() {\n     ObjectMapper mapper = new ObjectMapper();\n-    return mapper.writeValueAsString(this);\n+    try {\n+      return mapper.writeValueAsString(this);\n+    } catch (JsonProcessingException e) {\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n+    }\n   }\n \n   @JsonIgnore\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 7 exact lines in a row:\n```\n  @JsonIgnore\n  public String toJson() {\n    ObjectMapper mapper = new ObjectMapper();\n    return mapper.writeValueAsString(this);\n  }\n\n  @JsonIgnore\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 7 exact lines in a row:\n```\n  @JsonIgnore\n  public String toJson() {\n    ObjectMapper mapper = new ObjectMapper();\n    return mapper.writeValueAsString(this);\n  }\n\n  @JsonIgnore\n```\n",
            "span_id": 12572917198680166143
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -425,9 +425,13 @@ public class MarcRecord implements Serializable {\n     String json = null;\n     try {\n       json = mapper.writeValueAsString(map);\n-    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JsonProcessingException e) {\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n+\n+    return json;\n+  }\n \n-    return json;\n-  }\n+  @Override\n```",
            "output": "{'src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java': 'package de.gwdg.metadataqa.marc.dao;\\n\\nimport com.fasterxml.jackson.core.JsonProcessingException;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport de.gwdg.metadataqa.marc.Extractable;\\nimport de.gwdg.metadataqa.marc.MarcFactory;\\nimport de.gwdg.metadataqa.marc.MarcSubfield;\\nimport de.gwdg.metadataqa.marc.Utils;\\nimport de.gwdg.metadataqa.marc.Validatable;\\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\\nimport de.gwdg.metadataqa.marc.definition.*;\\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\\n\\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\\n\\nimport java.io.Serializable;\\nimport java.util.*;\\nimport java.util.logging.Level;\\nimport java.util.logging.Logger;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nimport static de.gwdg.metadataqa.marc.Utils.count;\\n\\npublic class MarcRecord implements Extractable, Validatable, Serializable {\\n\\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\\\\\d\\\\\\\\d\\\\\\\\d)\\\\\\\\$(.*)$\");\\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\\n\\n  private Leader leader;\\n  private MarcControlField control001;\\n  private MarcControlField control003;\\n  private MarcControlField control005;\\n  private List<Control006> control006 = new ArrayList<>();\\n  private List<Control007> control007 = new ArrayList<>();\\n  private Control008 control008;\\n  private List<DataField> datafields;\\n  private Map<String, List<DataField>> datafieldIndex;\\n  private Map<String, List<MarcControlField>> controlfieldIndex;\\n  Map<String, List<String>> mainKeyValuePairs;\\n  private List<ValidationError> validationErrors = null;\\n  private SchemaType schemaType = SchemaType.MARC21;\\n\\n  public enum RESOLVE {\\n    NONE,\\n    RESOLVE,\\n    BOTH;\\n  }\\n\\n  private List<String> unhandledTags;\\n\\n  public MarcRecord() {\\n    datafields = new ArrayList<>();\\n    datafieldIndex = new TreeMap<>();\\n    controlfieldIndex = new TreeMap<>();\\n    unhandledTags = new ArrayList<>();\\n  }\\n\\n  public MarcRecord(String id) {\\n    this();\\n    control001 = new Control001(id);\\n  }\\n\\n  public void addDataField(DataField dataField) {\\n    dataField.setMarcRecord(this);\\n    indexField(dataField);\\n    datafields.add(dataField);\\n  }\\n\\n  private void indexField(DataField dataField) {\\n    String tag = dataField.getTag();\\n    if (tag == null)\\n      logger.warning(\"null tag in indexField() \" + dataField);\\n\\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\\n    datafieldIndex.get(tag).add(dataField);\\n  }\\n\\n  public void addUnhandledTags(String tag) {\\n    unhandledTags.add(tag);\\n  }\\n\\n  public void setLeader(Leader leader) {\\n    this.leader = leader;\\n    leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader) {\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\\n    }\\n\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public Leader getLeader() {\\n    return leader;\\n  }\\n\\n  public Leader.Type getType() {\\n    return leader.getType();\\n  }\\n\\n  public MarcControlField getControl001() {\\n    return control001;\\n  }\\n\\n  public MarcRecord setControl001(MarcControlField control001) {\\n    this.control001 = control001;\\n    control001.setMarcRecord(this);\\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\\n    return this;\\n  }\\n\\n  public MarcControlField getControl003() {\\n    return control003;\\n  }\\n\\n  public void setControl003(MarcControlField control003) {\\n    this.control003 = control003;\\n    control003.setMarcRecord(this);\\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\\n  }\\n\\n  public MarcControlField getControl005() {\\n    return control005;\\n  }\\n\\n  public void setControl005(MarcControlField control005) {\\n    this.control005 = control005;\\n    control005.setMarcRecord(this);\\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\\n  }\\n\\n  public List<Control006> getControl006() {\\n    return control006;\\n  }\\n\\n  public void setControl006(Control006 control006) {\\n    this.control006.add(control006);\\n    control006.setMarcRecord(this);\\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\\n  }\\n\\n  public List<Control007> getControl007() {\\n    return control007;\\n  }\\n\\n  public void setControl007(Control007 control007) {\\n    this.control007.add(control007);\\n    control007.setMarcRecord(this);\\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\\n  }\\n\\n  public Control008 getControl008() {\\n    return control008;\\n  }\\n\\n  public void setControl008(Control008 control008) {\\n    this.control008 = control008;\\n    control008.setMarcRecord(this);\\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\\n  }\\n\\n  public String getId() {\\n    return control001.getContent();\\n  }\\n\\n  public String getId(boolean trim) {\\n    String id = getId();\\n    if (trim)\\n      id = id.trim();\\n    return id;\\n  }\\n\\n  public List<MarcControlField> getControlfields() {\\n    List<MarcControlField> list = new ArrayList<>();\\n    list.add(control001);\\n    if (control003 != null)\\n      list.add(control003);\\n    if (control005 != null)\\n      list.add(control005);\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public List<MarcControlField> getSimpleControlfields() {\\n    return Arrays.asList(\\n      control001, control003, control005\\n    );\\n  }\\n\\n  public List<MarcPositionalControlField> getPositionalControlfields() {\\n    List<MarcPositionalControlField> list = new ArrayList<>();\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public boolean hasDatafield(String tag) {\\n    return datafieldIndex.containsKey(tag);\\n  }\\n\\n  public List<DataField> getDatafield(String tag) {\\n    return datafieldIndex.getOrDefault(tag, null);\\n  }\\n\\n  public List<DataField> getDatafields() {\\n    return datafields;\\n  }\\n\\n  public boolean exists(String tag) {\\n    List<DataField> fields = getDatafield(tag);\\n    return (fields != null && !fields.isEmpty());\\n  }\\n\\n  public List<String> extract(String tag, String subfield) {\\n    return extract(tag, subfield, RESOLVE.NONE);\\n  }\\n\\n  /**\\n   * Extact field value\\n   * @param tag\\n   * @param subfield\\n   * @param doResolve\\n   * @return\\n   */\\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\\n    List<String> values = new ArrayList<>();\\n    List<DataField> fields = getDatafield(tag);\\n    if (fields != null && !fields.isEmpty()) {\\n      for (DataField field : fields) {\\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\\n          String value;\\n          Indicator indicator;\\n          if (subfield.equals(\"ind1\")) {\\n            value = field.getInd1();\\n            indicator = field.getDefinition().getInd1();\\n          } else {\\n            value = field.getInd2();\\n            indicator = field.getDefinition().getInd2();\\n          }\\n          if (indicator.getCode(value) == null) {\\n            values.add(value);\\n          } else {\\n            values.add(indicator.getCode(value).getLabel());\\n          }\\n        } else {\\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\\n          if (subfieldInstances != null) {\\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\\n              String value = null;\\n              switch (doResolve) {\\n                case RESOLVE: value = subfieldInstance.resolve(); break;\\n                case NONE: value = subfieldInstance.getValue(); break;\\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\\n              }\\n              values.add(value);\\n            }\\n          }\\n        }\\n      }\\n    }\\n    return values;\\n  }\\n\\n  public List<String> getUnhandledTags() {\\n    return unhandledTags;\\n  }\\n\\n  public String format() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.format());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsText() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsText());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsMarc() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsMarc());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatForIndex() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatForIndex());\\n    }\\n    return output.toString();\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs() {\\n    return getKeyValuePairs(SolrFieldType.MARC);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\\n  }\\n\\n  @Override\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\\n    return getKeyValuePairs(type, false, marcVersion);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\\n                                                    boolean withDeduplication,\\n                                                    MarcVersion marcVersion) {\\n    if (mainKeyValuePairs == null) {\\n      mainKeyValuePairs = new LinkedHashMap<>();\\n\\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\\n\\n      for (MarcControlField controlField : getControlfields())\\n        if (controlField != null)\\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\\n\\n      for (DataField field : datafields) {\\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\\n          String key = entry.getKey();\\n          List<String> values = entry.getValue();\\n          if (mainKeyValuePairs.containsKey(key)) {\\n            mainKeyValuePairs.put(\\n              key,\\n              mergeValues(\\n                new ArrayList<>(mainKeyValuePairs.get(key)),\\n                values,\\n                withDeduplication\\n              )\\n            );\\n          } else {\\n            mainKeyValuePairs.put(key, values);\\n          }\\n        }\\n      }\\n    }\\n\\n    return mainKeyValuePairs;\\n  }\\n\\n  private List<String> mergeValues(List<String> existingValues,\\n                                   List<String> values,\\n                                   boolean withDeduplication) {\\n    if (withDeduplication) {\\n      for (String value : values) {\\n        if (!existingValues.contains(value)) {\\n          existingValues.add(value);\\n        }\\n      }\\n    } else {\\n      existingValues.addAll(values);\\n    }\\n    return existingValues;\\n  }\\n\\n  public String asJson() {\\n    ObjectMapper mapper = new ObjectMapper();\\n\\n    Map<String, Object> map = new LinkedHashMap<>();\\n    map.put(\"leader\", leader.getContent());\\n\\n    for (MarcControlField field : getControlfields())\\n      if (field != null)\\n        map.put(field.getDefinition().getTag(), field.getContent());\\n\\n    for (DataField field : datafields) {\\n      if (field != null) {\\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\\n        fieldMap.put(\"ind1\", field.getInd1());\\n        fieldMap.put(\"ind2\", field.getInd2());\\n\\n        Map<String, String> subfields = new LinkedHashMap<>();\\n        for (MarcSubfield subfield : field.getSubfields()) {\\n          subfields.put(subfield.getCode(), subfield.getValue());\\n        }\\n        fieldMap.put(\"subfields\", subfields);\\n\\n        String tag = field.getDefinition() != null\\n          ? field.getDefinition().getTag()\\n          : field.getTag();\\n\\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\\n        ((ArrayList)map.get(tag)).add(fieldMap);\\n      }\\n    }\\n\\n    String json = null;\\n    try {\\n      json = mapper.writeValueAsString(map);\\n    } catch (JsonProcessingException e) {\\n      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\\n      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\\n    }\\n\\n    return json;\\n  }\\n\\n  @Override\\n\\n  @Override\\n  public boolean validate(MarcVersion marcVersion) {\\n    return validate(marcVersion, false, null);\\n  }\\n\\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\\n    return validate(marcVersion, isSummary, null);\\n  }\\n\\n  public boolean validate(MarcVersion marcVersion,\\n                          boolean isSummary,\\n                          IgnorableFields ignorableFields) {\\n    validationErrors = new ArrayList<>();\\n    boolean isValidRecord = true;\\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\\n\\n    // TODO: use reflection to get all validator class\\n    // ValidatorResponse validatorResponse;\\n\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    isValidComponent = leader.validate(marcVersion);\\n    if (!isValidComponent) {\\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\\n      for (ValidationError leaderError : leaderErrors)\\n        if (leaderError.getRecordId() == null)\\n          leaderError.setRecordId(getId());\\n      validationErrors.addAll(leaderErrors);\\n      isValidRecord = isValidComponent;\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\\n    if (!unhandledTags.isEmpty()) {\\n      if (isSummary) {\\n        for (String tag : unhandledTags) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n        }\\n      } else {\\n        Map<String, Integer> tags = new LinkedHashMap<>();\\n        for (String tag : unhandledTags)\\n          Utils.count(tag, tags);\\n\\n        List<String> unhandledTagsList = new ArrayList<>();\\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\\n          String tag = entry.getKey();\\n          if (entry.getValue() == 1)\\n            unhandledTagsList.add(tag);\\n          else\\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\\n        }\\n        for (String tag : unhandledTagsList) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n        }\\n      }\\n\\n      isValidRecord = false;\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    for (MarcControlField controlField : getControlfields()) {\\n      if (controlField != null) {\\n        isValidComponent = controlField.validate(marcVersion);\\n        if (!isValidComponent) {\\n          validationErrors.addAll(controlField.getValidationErrors());\\n          isValidRecord = isValidComponent;\\n        }\\n      }\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateDatafields(MarcVersion marcVersion,\\n                                     boolean isValidRecord,\\n                                     IgnorableFields ignorableFields) {\\n    ValidatorResponse validatorResponse;\\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\\n    for (DataField field : datafields) {\\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\\n        count(field.getDefinition(), repetitionCounter);\\n        if (!field.validate(marcVersion)) {\\n          isValidRecord = false;\\n          validationErrors.addAll(field.getValidationErrors());\\n        }\\n\\n        validatorResponse = ClassificationReferenceValidator.validate(field);\\n        if (!validatorResponse.isValid()) {\\n          validationErrors.addAll(validatorResponse.getValidationErrors());\\n          isValidRecord = false;\\n        }\\n      }\\n    }\\n\\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\\n      DataFieldDefinition fieldDefinition = entry.getKey();\\n      Integer count = entry.getValue();\\n      if (count > 1\\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\\n          ValidationErrorType.FIELD_NONREPEATABLE,\\n          String.format(\"there are %d instances\", count),\\n          fieldDefinition.getDescriptionUrl()\\n        ));\\n        isValidRecord = false;\\n      }\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\\n    if (ignorableFields == null)\\n      return false;\\n    return ignorableFields.contains(tag);\\n  }\\n\\n  @Override\\n  public List<ValidationError> getValidationErrors() {\\n    return validationErrors;\\n  }\\n\\n  public List<String> search(String path, String query) {\\n    List<String> results = new ArrayList<>();\\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\\n      searchControlField(path, query, results);\\n    } else if (path.startsWith(\"006\")) {\\n      for (Control006 instance : control006)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"007\")) {\\n      for (Control007 instance : control007)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"008\")) {\\n      searchPositionalControlField(control008, path, query, results);\\n    } else {\\n      Matcher matcher = dataFieldPattern.matcher(path);\\n      if (matcher.matches()) {\\n        String tag = matcher.group(1);\\n        String subfieldCode = matcher.group(2);\\n        if (datafieldIndex.containsKey(tag)) {\\n          for (DataField field : datafieldIndex.get(tag)) {\\n            if (searchDatafield(query, results, subfieldCode, field)) break;\\n          }\\n        }\\n      }\\n      matcher = positionalPattern.matcher(path);\\n      if (matcher.matches()) {\\n        searchByPosition(query, results, matcher);\\n      }\\n    }\\n    return results;\\n  }\\n\\n  public List<String> select(MarcSpec selector) {\\n    List<String> results = new ArrayList<>();\\n    if (selector.getFieldTag().equals(\"LDR\")) {\\n      if (selector.hasRangeSelector()) {\\n        results.add(selector.selectRange(leader.getContent()));\\n      } else {\\n        results.add(leader.getContent());\\n      }\\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\n          continue;\\n        if (!simpleControlTags.contains(field.definition.getTag())) {\\n          // TODO: check control subfields\\n        }\\n        if (selector.hasRangeSelector()) {\\n          results.add(selector.selectRange(field.getContent()));\\n        } else {\\n          results.add(field.getContent());\\n        }\\n      }\\n\\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\n          continue;\\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n          if (subfields == null)\\n            continue;\\n          for (MarcSubfield subfield : subfields) {\\n            results.add(subfield.getValue());\\n          }\\n        }\\n      }\\n    }\\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\\n      if (selector.getCharStart() != null) {\\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\\n        results.add(control008.getMap().get(definition));\\n      } else {\\n        results.add(control008.getContent());\\n      }\\n    }\\n    return results;\\n  }\\n\\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\\n    String tag = matcher.group(1);\\n    String position = matcher.group(2);\\n    int start;\\n    int end;\\n    if (position.contains(\"-\")) {\\n      String[] parts = position.split(\"-\", 2);\\n      start = Integer.parseInt(parts[0]);\\n      end = Integer.parseInt(parts[1]);\\n    } else {\\n      start = Integer.parseInt(position);\\n      end = start + 1;\\n    }\\n    String content = null;\\n    if (tag.equals(\"Leader\")) {\\n      content = leader.getLeaderString();\\n    } else {\\n      MarcControlField controlField = null;\\n      // TODO: fix it!\\n      switch (tag) {\\n        case \"006\": controlField = control006.get(0); break;\\n        case \"007\": controlField = control007.get(0); break;\\n        case \"008\": controlField = control008; break;\\n        default: break;\\n      }\\n      if (controlField != null)\\n        content = controlField.getContent();\\n    }\\n\\n    if (content != null && content.substring(start, end).equals(query)) {\\n      results.add(content.substring(start, end));\\n    }\\n  }\\n\\n  private boolean searchDatafield(String query, List<String> results,\\n                                  String subfieldCode, DataField field) {\\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\\n      results.add(field.getInd1());\\n      return true;\\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\\n      results.add(field.getInd2());\\n      return true;\\n    } else {\\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n      if (subfields != null) {\\n        for (MarcSubfield subfield : subfields) {\\n          if (subfield.getValue().equals(query)) {\\n            results.add(subfield.getValue());\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  private void searchControlField(String path, String query, List<String> results) {\\n    MarcControlField controlField = null;\\n    switch (path) {\\n      case \"001\": controlField = control001; break;\\n      case \"003\": controlField = control003; break;\\n      case \"005\": controlField = control005; break;\\n      default: break;\\n    }\\n    if (controlField != null && controlField.getContent().equals(query))\\n      results.add(controlField.getContent());\\n  }\\n\\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\\n                                            String path, String query, List<String> results) {\\n    if (controlField != null) {\\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\\n        if (subfield.getId().equals(path)) {\\n          if (map.get(subfield).equals(query))\\n            results.add(map.get(subfield));\\n          break;\\n        }\\n      }\\n    }\\n  }\\n\\n  public List<DataField> getAuthorityFields() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"100\", \"110\", \"111\", \"130\",\\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\\n      \"800\", \"810\", \"811\", \"830\"\\n    );\\n    for (String tag : tags) {\\n      List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n    }\\n    return subjects;\\n  }\\n\\n  public List<DataField> getSubjects() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\\n    );\\n    for (String tag : tags) {\\n      List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n    }\\n    return subjects;\\n  }\\n\\n  public List<DataField> getSubject6xx() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\\n    for (String tag : tags) {\\n      List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n    }\\n    return subjects;\\n  }\\n\\n  public void setField(String tag, String content) {\\n    setField(tag, content, MarcVersion.MARC21);\\n  }\\n\\n  public void setField(String tag, String content, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\\n      tag = UnimarcConverter.tagFromUnimarc(tag);\\n    }\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n    } else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n      }\\n\\n      DataField dataField = new DataField(tag, content, marcVersion);\\n      addDataField(dataField);\\n    }\\n  }\\n\\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n    } else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n      }\\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\\n    }\\n  }\\n\\n  public SchemaType getSchemaType() {\\n    return schemaType;\\n  }\\n\\n  public void setSchemaType(SchemaType schemaType) {\\n    this.schemaType = schemaType;\\n  }\\n}\\n'}",
            "error": "",
            "span_id": 5074032228434443863
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -425,9 +425,13 @@ public class MarcRecord implements Serializable {\n     String json = null;\n     try {\n       json = mapper.writeValueAsString(map);\n-    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JsonProcessingException e) {\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n+\n+    return json;\n+  }\n \n-    return json;\n-  }\n+  @Override\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "java.lang.Override is not a repeatable annotation type\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n    }\n\n    return json;\n  }\n\n  @Override\n\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "438": {
                            "lines": [
                                {
                                    "line_no": 437,
                                    "content": ""
                                },
                                {
                                    "line_no": 438,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 439,
                                    "content": "  public boolean validate(MarcVersion marcVersion) {"
                                }
                            ],
                            "error_texts": [
                                "[438,3] java.lang.Override is not a repeatable annotation type\n"
                            ]
                        }
                    }
                }
            },
            "error": "java.lang.Override is not a repeatable annotation type\n",
            "span_id": 5590686817475508561
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -425,9 +425,13 @@ public class MarcRecord implements Serializable {\n     String json = null;\n     try {\n       json = mapper.writeValueAsString(map);\n-    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JsonProcessingException e) {\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n+\n+    return json;\n+  }\n \n-    return json;\n-  }\n+  // Remove the extra @Override annotation\n+  // @Override\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "java.lang.Override is not a repeatable annotation type\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n    }\n\n    return json;\n  }\n\n  // Remove the extra @Override annotation\n  // @Override\n\n  @Override\n\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "443": {
                            "lines": [
                                {
                                    "line_no": 442,
                                    "content": ""
                                },
                                {
                                    "line_no": 443,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 444,
                                    "content": "  public boolean validate(MarcVersion marcVersion) {"
                                }
                            ],
                            "error_texts": [
                                "[443,3] java.lang.Override is not a repeatable annotation type\n"
                            ]
                        }
                    }
                }
            },
            "error": "java.lang.Override is not a repeatable annotation type\n",
            "span_id": 18324903070590837406
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -425,9 +425,13 @@ public class MarcRecord implements Serializable {\n     String json = null;\n     try {\n       json = mapper.writeValueAsString(map);\n-    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JsonProcessingException e) {\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n+\n+    return json;\n+  }\n \n-    return json;\n-  }\n+  // Remove all extra @Override annotations\n+  @Override\n+  public boolean validate(MarcVersion marcVersion) {\n+    return validate(marcVersion, false, null);\n+  }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n    }\n\n    return json;\n  }\n\n  // Remove all extra @Override annotations\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n  // Remove the extra @Override annotation\n  // @Override\n\n  @Override\n\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "429": {
                            "lines": [
                                {
                                    "line_no": 428,
                                    "content": "    } catch (JsonProcessingException e) {"
                                },
                                {
                                    "line_no": 429,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 430,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                }
                            ],
                            "error_texts": [
                                "[429,1] not a statement\n"
                            ]
                        },
                        "430": {
                            "lines": [
                                {
                                    "line_no": 429,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 430,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 431,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                }
                            ],
                            "error_texts": [
                                "[430,1] not a statement\n"
                            ]
                        },
                        "431": {
                            "lines": [
                                {
                                    "line_no": 430,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 431,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 432,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[431,1] not a statement\n",
                                "[431,8] illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 11389932947756997148
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -425,9 +425,13 @@ public class MarcRecord implements Serializable {\n     String json = null;\n     try {\n       json = mapper.writeValueAsString(map);\n-    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JsonProcessingException e) {\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n+\n+    return json;\n+  }\n \n-    return json;\n-  }\n+  @Override\n+  public boolean validate(MarcVersion marcVersion) {\n+    return validate(marcVersion, false, null);\n+  }\n \n-  @Override\n-\n-  @Override\n-  public boolean validate(MarcVersion marcVersion) {\n-    return validate(marcVersion, false, null);\n-  }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n    }\n\n    return json;\n  }\n\n  // Remove all extra @Override annotations\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n\n  // Remove the extra @Override annotation\n  // @Override\n\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "429": {
                            "lines": [
                                {
                                    "line_no": 428,
                                    "content": "    } catch (JsonProcessingException e) {"
                                },
                                {
                                    "line_no": 429,
                                    "content": "-      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 430,
                                    "content": "      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                }
                            ],
                            "error_texts": [
                                "[429,1] not a statement\n"
                            ]
                        },
                        "431": {
                            "lines": [
                                {
                                    "line_no": 430,
                                    "content": "      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 431,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 432,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                }
                            ],
                            "error_texts": [
                                "[431,1] not a statement\n"
                            ]
                        },
                        "432": {
                            "lines": [
                                {
                                    "line_no": 431,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 432,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 433,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[432,8] illegal start of expression\n",
                                "[432,1] not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 1161115547535358910
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -426,8 +426,8 @@ public class MarcRecord implements Serializable {\n     try {\n       json = mapper.writeValueAsString(map);\n     } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    }\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n+    }\n \n     return json;\n   }\n@@ -435,12 +435,6 @@ public class MarcRecord implements Serializable {\n   @Override\n   public boolean validate(MarcVersion marcVersion) {\n     return validate(marcVersion, false, null);\n-  }\n-\n-  @Override\n-\n-  @Override\n-  public boolean validate(MarcVersion marcVersion) {\n-    return validate(marcVersion, false, null);\n   }\n ```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n    }\n\n    return json;\n  }\n\n  // Remove all extra @Override annotations\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n\n  // Remove the extra @Override annotation\n  // @Override\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "429": {
                            "lines": [
                                {
                                    "line_no": 428,
                                    "content": "    } catch (JsonProcessingException e) {"
                                },
                                {
                                    "line_no": 429,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 430,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                }
                            ],
                            "error_texts": [
                                "[429,1] not a statement\n"
                            ]
                        },
                        "430": {
                            "lines": [
                                {
                                    "line_no": 429,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 430,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 431,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                }
                            ],
                            "error_texts": [
                                "[430,1] not a statement\n"
                            ]
                        },
                        "431": {
                            "lines": [
                                {
                                    "line_no": 430,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 431,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 432,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[431,1] not a statement\n",
                                "[431,8] illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 16984131344539347669
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -426,8 +426,9 @@ public class MarcRecord implements Serializable {\n     try {\n       json = mapper.writeValueAsString(map);\n     } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n \n     return json;\n   }\n \n   @Override\n   public boolean validate(MarcVersion marcVersion) {\n     return validate(marcVersion, false, null);\n   }\n-\n-  @Override\n-\n-  @Override\n-  public boolean validate(MarcVersion marcVersion) {\n-    return validate(marcVersion, false, null);\n-  }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n-\n-  @Override\n-\n-  @Override\n-  public boolean validate(MarcVersion marcVersion) {\n-    return validate(marcVersion, false, null);\n-  }\n  }\n\n\n  // Remove the extra @Override annotation\n  // @Override\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "429": {
                            "lines": [
                                {
                                    "line_no": 428,
                                    "content": "    } catch (JsonProcessingException e) {"
                                },
                                {
                                    "line_no": 429,
                                    "content": "-      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 430,
                                    "content": "      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                }
                            ],
                            "error_texts": [
                                "[429,1] not a statement\n"
                            ]
                        },
                        "431": {
                            "lines": [
                                {
                                    "line_no": 430,
                                    "content": "      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 431,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 432,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                }
                            ],
                            "error_texts": [
                                "[431,1] not a statement\n"
                            ]
                        },
                        "432": {
                            "lines": [
                                {
                                    "line_no": 431,
                                    "content": "+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 432,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 433,
                                    "content": "-"
                                }
                            ],
                            "error_texts": [
                                "[432,8] illegal start of expression\n",
                                "[432,1] not a statement\n"
                            ]
                        },
                        "437": {
                            "lines": [
                                {
                                    "line_no": 436,
                                    "content": "-  @Override"
                                },
                                {
                                    "line_no": 437,
                                    "content": "-  public boolean validate(MarcVersion marcVersion) {"
                                },
                                {
                                    "line_no": 438,
                                    "content": "-    return validate(marcVersion, false, null);"
                                }
                            ],
                            "error_texts": [
                                "[437,4] illegal start of expression\n",
                                "[437,2] ';' expected\n"
                            ]
                        },
                        "433": {
                            "lines": [
                                {
                                    "line_no": 432,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 433,
                                    "content": "-"
                                },
                                {
                                    "line_no": 434,
                                    "content": "-  @Override"
                                }
                            ],
                            "error_texts": [
                                "[433,1] not a statement\n"
                            ]
                        },
                        "438": {
                            "lines": [
                                {
                                    "line_no": 437,
                                    "content": "-  public boolean validate(MarcVersion marcVersion) {"
                                },
                                {
                                    "line_no": 438,
                                    "content": "-    return validate(marcVersion, false, null);"
                                },
                                {
                                    "line_no": 439,
                                    "content": "-  }"
                                }
                            ],
                            "error_texts": [
                                "[438,6] illegal start of expression\n",
                                "[438,1] not a statement\n"
                            ]
                        },
                        "439": {
                            "lines": [
                                {
                                    "line_no": 438,
                                    "content": "-    return validate(marcVersion, false, null);"
                                },
                                {
                                    "line_no": 439,
                                    "content": "-  }"
                                },
                                {
                                    "line_no": 440,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[439,1] not a statement\n",
                                "[439,4] illegal start of expression\n"
                            ]
                        },
                        "446": {
                            "lines": [
                                {
                                    "line_no": 445,
                                    "content": ""
                                },
                                {
                                    "line_no": 446,
                                    "content": "  public boolean validate(MarcVersion marcVersion, boolean isSummary) {"
                                },
                                {
                                    "line_no": 447,
                                    "content": "    return validate(marcVersion, isSummary, null);"
                                }
                            ],
                            "error_texts": [
                                "[446,10] class, interface, or enum expected\n"
                            ]
                        },
                        "448": {
                            "lines": [
                                {
                                    "line_no": 447,
                                    "content": "    return validate(marcVersion, isSummary, null);"
                                },
                                {
                                    "line_no": 448,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 449,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[448,3] class, interface, or enum expected\n"
                            ]
                        },
                        "450": {
                            "lines": [
                                {
                                    "line_no": 449,
                                    "content": ""
                                },
                                {
                                    "line_no": 450,
                                    "content": "  public boolean validate(MarcVersion marcVersion,"
                                },
                                {
                                    "line_no": 451,
                                    "content": "                          boolean isSummary,"
                                }
                            ],
                            "error_texts": [
                                "[450,10] class, interface, or enum expected\n"
                            ]
                        },
                        "454": {
                            "lines": [
                                {
                                    "line_no": 453,
                                    "content": "    validationErrors = new ArrayList<>();"
                                },
                                {
                                    "line_no": 454,
                                    "content": "    boolean isValidRecord = true;"
                                },
                                {
                                    "line_no": 455,
                                    "content": "    isValidRecord = validateLeader(marcVersion, isValidRecord);"
                                }
                            ],
                            "error_texts": [
                                "[454,5] class, interface, or enum expected\n"
                            ]
                        },
                        "455": {
                            "lines": [
                                {
                                    "line_no": 454,
                                    "content": "    boolean isValidRecord = true;"
                                },
                                {
                                    "line_no": 455,
                                    "content": "    isValidRecord = validateLeader(marcVersion, isValidRecord);"
                                },
                                {
                                    "line_no": 456,
                                    "content": "    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);"
                                }
                            ],
                            "error_texts": [
                                "[455,5] class, interface, or enum expected\n"
                            ]
                        },
                        "456": {
                            "lines": [
                                {
                                    "line_no": 455,
                                    "content": "    isValidRecord = validateLeader(marcVersion, isValidRecord);"
                                },
                                {
                                    "line_no": 456,
                                    "content": "    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);"
                                },
                                {
                                    "line_no": 457,
                                    "content": "    isValidRecord = validateControlfields(marcVersion, isValidRecord);"
                                }
                            ],
                            "error_texts": [
                                "[456,5] class, interface, or enum expected\n"
                            ]
                        },
                        "457": {
                            "lines": [
                                {
                                    "line_no": 456,
                                    "content": "    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);"
                                },
                                {
                                    "line_no": 457,
                                    "content": "    isValidRecord = validateControlfields(marcVersion, isValidRecord);"
                                },
                                {
                                    "line_no": 458,
                                    "content": "    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);"
                                }
                            ],
                            "error_texts": [
                                "[457,5] class, interface, or enum expected\n"
                            ]
                        },
                        "458": {
                            "lines": [
                                {
                                    "line_no": 457,
                                    "content": "    isValidRecord = validateControlfields(marcVersion, isValidRecord);"
                                },
                                {
                                    "line_no": 458,
                                    "content": "    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);"
                                },
                                {
                                    "line_no": 459,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[458,5] class, interface, or enum expected\n"
                            ]
                        },
                        "463": {
                            "lines": [
                                {
                                    "line_no": 462,
                                    "content": ""
                                },
                                {
                                    "line_no": 463,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 464,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[463,5] class, interface, or enum expected\n"
                            ]
                        },
                        "464": {
                            "lines": [
                                {
                                    "line_no": 463,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 464,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 465,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[464,3] class, interface, or enum expected\n"
                            ]
                        },
                        "468": {
                            "lines": [
                                {
                                    "line_no": 467,
                                    "content": "    boolean isValidComponent;"
                                },
                                {
                                    "line_no": 468,
                                    "content": "    isValidComponent = leader.validate(marcVersion);"
                                },
                                {
                                    "line_no": 469,
                                    "content": "    if (!isValidComponent) {"
                                }
                            ],
                            "error_texts": [
                                "[468,5] class, interface, or enum expected\n"
                            ]
                        },
                        "469": {
                            "lines": [
                                {
                                    "line_no": 468,
                                    "content": "    isValidComponent = leader.validate(marcVersion);"
                                },
                                {
                                    "line_no": 469,
                                    "content": "    if (!isValidComponent) {"
                                },
                                {
                                    "line_no": 470,
                                    "content": "      List<ValidationError> leaderErrors = leader.getValidationErrors();"
                                }
                            ],
                            "error_texts": [
                                "[469,5] class, interface, or enum expected\n"
                            ]
                        },
                        "471": {
                            "lines": [
                                {
                                    "line_no": 470,
                                    "content": "      List<ValidationError> leaderErrors = leader.getValidationErrors();"
                                },
                                {
                                    "line_no": 471,
                                    "content": "      for (ValidationError leaderError : leaderErrors)"
                                },
                                {
                                    "line_no": 472,
                                    "content": "        if (leaderError.getRecordId() == null)"
                                }
                            ],
                            "error_texts": [
                                "[471,7] class, interface, or enum expected\n"
                            ]
                        },
                        "474": {
                            "lines": [
                                {
                                    "line_no": 473,
                                    "content": "          leaderError.setRecordId(getId());"
                                },
                                {
                                    "line_no": 474,
                                    "content": "      validationErrors.addAll(leaderErrors);"
                                },
                                {
                                    "line_no": 475,
                                    "content": "      isValidRecord = isValidComponent;"
                                }
                            ],
                            "error_texts": [
                                "[474,7] class, interface, or enum expected\n"
                            ]
                        },
                        "475": {
                            "lines": [
                                {
                                    "line_no": 474,
                                    "content": "      validationErrors.addAll(leaderErrors);"
                                },
                                {
                                    "line_no": 475,
                                    "content": "      isValidRecord = isValidComponent;"
                                },
                                {
                                    "line_no": 476,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[475,7] class, interface, or enum expected\n"
                            ]
                        },
                        "476": {
                            "lines": [
                                {
                                    "line_no": 475,
                                    "content": "      isValidRecord = isValidComponent;"
                                },
                                {
                                    "line_no": 476,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 477,
                                    "content": "    return isValidRecord;"
                                }
                            ],
                            "error_texts": [
                                "[476,5] class, interface, or enum expected\n"
                            ]
                        },
                        "478": {
                            "lines": [
                                {
                                    "line_no": 477,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 478,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 479,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[478,3] class, interface, or enum expected\n"
                            ]
                        },
                        "486": {
                            "lines": [
                                {
                                    "line_no": 485,
                                    "content": "            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));"
                                },
                                {
                                    "line_no": 486,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 487,
                                    "content": "      } else {"
                                }
                            ],
                            "error_texts": [
                                "[486,9] class, interface, or enum expected\n"
                            ]
                        },
                        "489": {
                            "lines": [
                                {
                                    "line_no": 488,
                                    "content": "        Map<String, Integer> tags = new LinkedHashMap<>();"
                                },
                                {
                                    "line_no": 489,
                                    "content": "        for (String tag : unhandledTags)"
                                },
                                {
                                    "line_no": 490,
                                    "content": "          Utils.count(tag, tags);"
                                }
                            ],
                            "error_texts": [
                                "[489,9] class, interface, or enum expected\n"
                            ]
                        },
                        "492": {
                            "lines": [
                                {
                                    "line_no": 491,
                                    "content": ""
                                },
                                {
                                    "line_no": 492,
                                    "content": "        List<String> unhandledTagsList = new ArrayList<>();"
                                },
                                {
                                    "line_no": 493,
                                    "content": "        for (Map.Entry<String, Integer> entry : tags.entrySet()) {"
                                }
                            ],
                            "error_texts": [
                                "[492,9] class, interface, or enum expected\n"
                            ]
                        },
                        "493": {
                            "lines": [
                                {
                                    "line_no": 492,
                                    "content": "        List<String> unhandledTagsList = new ArrayList<>();"
                                },
                                {
                                    "line_no": 493,
                                    "content": "        for (Map.Entry<String, Integer> entry : tags.entrySet()) {"
                                },
                                {
                                    "line_no": 494,
                                    "content": "          String tag = entry.getKey();"
                                }
                            ],
                            "error_texts": [
                                "[493,9] class, interface, or enum expected\n"
                            ]
                        },
                        "495": {
                            "lines": [
                                {
                                    "line_no": 494,
                                    "content": "          String tag = entry.getKey();"
                                },
                                {
                                    "line_no": 495,
                                    "content": "          if (entry.getValue() == 1)"
                                },
                                {
                                    "line_no": 496,
                                    "content": "            unhandledTagsList.add(tag);"
                                }
                            ],
                            "error_texts": [
                                "[495,11] class, interface, or enum expected\n"
                            ]
                        },
                        "497": {
                            "lines": [
                                {
                                    "line_no": 496,
                                    "content": "            unhandledTagsList.add(tag);"
                                },
                                {
                                    "line_no": 497,
                                    "content": "          else"
                                },
                                {
                                    "line_no": 498,
                                    "content": "            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));"
                                }
                            ],
                            "error_texts": [
                                "[497,11] class, interface, or enum expected\n"
                            ]
                        },
                        "499": {
                            "lines": [
                                {
                                    "line_no": 498,
                                    "content": "            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));"
                                },
                                {
                                    "line_no": 499,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 500,
                                    "content": "        for (String tag : unhandledTagsList) {"
                                }
                            ],
                            "error_texts": [
                                "[499,9] class, interface, or enum expected\n"
                            ]
                        },
                        "503": {
                            "lines": [
                                {
                                    "line_no": 502,
                                    "content": "            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));"
                                },
                                {
                                    "line_no": 503,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 504,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[503,9] class, interface, or enum expected\n"
                            ]
                        },
                        "507": {
                            "lines": [
                                {
                                    "line_no": 506,
                                    "content": "      isValidRecord = false;"
                                },
                                {
                                    "line_no": 507,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 508,
                                    "content": "    return isValidRecord;"
                                }
                            ],
                            "error_texts": [
                                "[507,5] class, interface, or enum expected\n"
                            ]
                        },
                        "509": {
                            "lines": [
                                {
                                    "line_no": 508,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 509,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 510,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[509,3] class, interface, or enum expected\n"
                            ]
                        },
                        "513": {
                            "lines": [
                                {
                                    "line_no": 512,
                                    "content": "    boolean isValidComponent;"
                                },
                                {
                                    "line_no": 513,
                                    "content": "    for (MarcControlField controlField : getControlfields()) {"
                                },
                                {
                                    "line_no": 514,
                                    "content": "      if (controlField != null) {"
                                }
                            ],
                            "error_texts": [
                                "[513,5] class, interface, or enum expected\n"
                            ]
                        },
                        "516": {
                            "lines": [
                                {
                                    "line_no": 515,
                                    "content": "        isValidComponent = controlField.validate(marcVersion);"
                                },
                                {
                                    "line_no": 516,
                                    "content": "        if (!isValidComponent) {"
                                },
                                {
                                    "line_no": 517,
                                    "content": "          validationErrors.addAll(controlField.getValidationErrors());"
                                }
                            ],
                            "error_texts": [
                                "[516,9] class, interface, or enum expected\n"
                            ]
                        },
                        "518": {
                            "lines": [
                                {
                                    "line_no": 517,
                                    "content": "          validationErrors.addAll(controlField.getValidationErrors());"
                                },
                                {
                                    "line_no": 518,
                                    "content": "          isValidRecord = isValidComponent;"
                                },
                                {
                                    "line_no": 519,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[518,11] class, interface, or enum expected\n"
                            ]
                        },
                        "519": {
                            "lines": [
                                {
                                    "line_no": 518,
                                    "content": "          isValidRecord = isValidComponent;"
                                },
                                {
                                    "line_no": 519,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 520,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[519,9] class, interface, or enum expected\n"
                            ]
                        },
                        "523": {
                            "lines": [
                                {
                                    "line_no": 522,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 523,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 524,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[523,3] class, interface, or enum expected\n"
                            ]
                        },
                        "529": {
                            "lines": [
                                {
                                    "line_no": 528,
                                    "content": "    ValidatorResponse validatorResponse;"
                                },
                                {
                                    "line_no": 529,
                                    "content": "    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();"
                                },
                                {
                                    "line_no": 530,
                                    "content": "    for (DataField field : datafields) {"
                                }
                            ],
                            "error_texts": [
                                "[529,5] class, interface, or enum expected\n"
                            ]
                        },
                        "530": {
                            "lines": [
                                {
                                    "line_no": 529,
                                    "content": "    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();"
                                },
                                {
                                    "line_no": 530,
                                    "content": "    for (DataField field : datafields) {"
                                },
                                {
                                    "line_no": 531,
                                    "content": "      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {"
                                }
                            ],
                            "error_texts": [
                                "[530,5] class, interface, or enum expected\n"
                            ]
                        },
                        "533": {
                            "lines": [
                                {
                                    "line_no": 532,
                                    "content": "        count(field.getDefinition(), repetitionCounter);"
                                },
                                {
                                    "line_no": 533,
                                    "content": "        if (!field.validate(marcVersion)) {"
                                },
                                {
                                    "line_no": 534,
                                    "content": "          isValidRecord = false;"
                                }
                            ],
                            "error_texts": [
                                "[533,9] class, interface, or enum expected\n"
                            ]
                        },
                        "535": {
                            "lines": [
                                {
                                    "line_no": 534,
                                    "content": "          isValidRecord = false;"
                                },
                                {
                                    "line_no": 535,
                                    "content": "          validationErrors.addAll(field.getValidationErrors());"
                                },
                                {
                                    "line_no": 536,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[535,11] class, interface, or enum expected\n"
                            ]
                        },
                        "536": {
                            "lines": [
                                {
                                    "line_no": 535,
                                    "content": "          validationErrors.addAll(field.getValidationErrors());"
                                },
                                {
                                    "line_no": 536,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 537,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[536,9] class, interface, or enum expected\n"
                            ]
                        },
                        "539": {
                            "lines": [
                                {
                                    "line_no": 538,
                                    "content": "        validatorResponse = ClassificationReferenceValidator.validate(field);"
                                },
                                {
                                    "line_no": 539,
                                    "content": "        if (!validatorResponse.isValid()) {"
                                },
                                {
                                    "line_no": 540,
                                    "content": "          validationErrors.addAll(validatorResponse.getValidationErrors());"
                                }
                            ],
                            "error_texts": [
                                "[539,9] class, interface, or enum expected\n"
                            ]
                        },
                        "541": {
                            "lines": [
                                {
                                    "line_no": 540,
                                    "content": "          validationErrors.addAll(validatorResponse.getValidationErrors());"
                                },
                                {
                                    "line_no": 541,
                                    "content": "          isValidRecord = false;"
                                },
                                {
                                    "line_no": 542,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[541,11] class, interface, or enum expected\n"
                            ]
                        },
                        "542": {
                            "lines": [
                                {
                                    "line_no": 541,
                                    "content": "          isValidRecord = false;"
                                },
                                {
                                    "line_no": 542,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 543,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[542,9] class, interface, or enum expected\n"
                            ]
                        },
                        "548": {
                            "lines": [
                                {
                                    "line_no": 547,
                                    "content": "      DataFieldDefinition fieldDefinition = entry.getKey();"
                                },
                                {
                                    "line_no": 548,
                                    "content": "      Integer count = entry.getValue();"
                                },
                                {
                                    "line_no": 549,
                                    "content": "      if (count > 1"
                                }
                            ],
                            "error_texts": [
                                "[548,7] class, interface, or enum expected\n"
                            ]
                        },
                        "549": {
                            "lines": [
                                {
                                    "line_no": 548,
                                    "content": "      Integer count = entry.getValue();"
                                },
                                {
                                    "line_no": 549,
                                    "content": "      if (count > 1"
                                },
                                {
                                    "line_no": 550,
                                    "content": "          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {"
                                }
                            ],
                            "error_texts": [
                                "[549,7] class, interface, or enum expected\n"
                            ]
                        },
                        "556": {
                            "lines": [
                                {
                                    "line_no": 555,
                                    "content": "        ));"
                                },
                                {
                                    "line_no": 556,
                                    "content": "        isValidRecord = false;"
                                },
                                {
                                    "line_no": 557,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[556,9] class, interface, or enum expected\n"
                            ]
                        },
                        "557": {
                            "lines": [
                                {
                                    "line_no": 556,
                                    "content": "        isValidRecord = false;"
                                },
                                {
                                    "line_no": 557,
                                    "content": "      }"
                                },
                                {
                                    "line_no": 558,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[557,7] class, interface, or enum expected\n"
                            ]
                        },
                        "560": {
                            "lines": [
                                {
                                    "line_no": 559,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 560,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 561,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[560,3] class, interface, or enum expected\n"
                            ]
                        },
                        "565": {
                            "lines": [
                                {
                                    "line_no": 564,
                                    "content": "      return false;"
                                },
                                {
                                    "line_no": 565,
                                    "content": "    return ignorableFields.contains(tag);"
                                },
                                {
                                    "line_no": 566,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[565,5] class, interface, or enum expected\n"
                            ]
                        },
                        "566": {
                            "lines": [
                                {
                                    "line_no": 565,
                                    "content": "    return ignorableFields.contains(tag);"
                                },
                                {
                                    "line_no": 566,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 567,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[566,3] class, interface, or enum expected\n"
                            ]
                        },
                        "569": {
                            "lines": [
                                {
                                    "line_no": 568,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 569,
                                    "content": "  public List<ValidationError> getValidationErrors() {"
                                },
                                {
                                    "line_no": 570,
                                    "content": "    return validationErrors;"
                                }
                            ],
                            "error_texts": [
                                "[569,10] class, interface, or enum expected\n"
                            ]
                        },
                        "571": {
                            "lines": [
                                {
                                    "line_no": 570,
                                    "content": "    return validationErrors;"
                                },
                                {
                                    "line_no": 571,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 572,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[571,3] class, interface, or enum expected\n"
                            ]
                        },
                        "573": {
                            "lines": [
                                {
                                    "line_no": 572,
                                    "content": ""
                                },
                                {
                                    "line_no": 573,
                                    "content": "  public List<String> search(String path, String query) {"
                                },
                                {
                                    "line_no": 574,
                                    "content": "    List<String> results = new ArrayList<>();"
                                }
                            ],
                            "error_texts": [
                                "[573,10] class, interface, or enum expected\n"
                            ]
                        },
                        "575": {
                            "lines": [
                                {
                                    "line_no": 574,
                                    "content": "    List<String> results = new ArrayList<>();"
                                },
                                {
                                    "line_no": 575,
                                    "content": "    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {"
                                },
                                {
                                    "line_no": 576,
                                    "content": "      searchControlField(path, query, results);"
                                }
                            ],
                            "error_texts": [
                                "[575,5] class, interface, or enum expected\n"
                            ]
                        },
                        "577": {
                            "lines": [
                                {
                                    "line_no": 576,
                                    "content": "      searchControlField(path, query, results);"
                                },
                                {
                                    "line_no": 577,
                                    "content": "    } else if (path.startsWith(\"006\")) {"
                                },
                                {
                                    "line_no": 578,
                                    "content": "      for (Control006 instance : control006)"
                                }
                            ],
                            "error_texts": [
                                "[577,5] class, interface, or enum expected\n"
                            ]
                        },
                        "580": {
                            "lines": [
                                {
                                    "line_no": 579,
                                    "content": "        searchPositionalControlField(instance, path, query, results);"
                                },
                                {
                                    "line_no": 580,
                                    "content": "    } else if (path.startsWith(\"007\")) {"
                                },
                                {
                                    "line_no": 581,
                                    "content": "      for (Control007 instance : control007)"
                                }
                            ],
                            "error_texts": [
                                "[580,5] class, interface, or enum expected\n"
                            ]
                        },
                        "583": {
                            "lines": [
                                {
                                    "line_no": 582,
                                    "content": "        searchPositionalControlField(instance, path, query, results);"
                                },
                                {
                                    "line_no": 583,
                                    "content": "    } else if (path.startsWith(\"008\")) {"
                                },
                                {
                                    "line_no": 584,
                                    "content": "      searchPositionalControlField(control008, path, query, results);"
                                }
                            ],
                            "error_texts": [
                                "[583,5] class, interface, or enum expected\n"
                            ]
                        },
                        "585": {
                            "lines": [
                                {
                                    "line_no": 584,
                                    "content": "      searchPositionalControlField(control008, path, query, results);"
                                },
                                {
                                    "line_no": 585,
                                    "content": "    } else {"
                                },
                                {
                                    "line_no": 586,
                                    "content": "      Matcher matcher = dataFieldPattern.matcher(path);"
                                }
                            ],
                            "error_texts": [
                                "[585,5] class, interface, or enum expected\n"
                            ]
                        },
                        "587": {
                            "lines": [
                                {
                                    "line_no": 586,
                                    "content": "      Matcher matcher = dataFieldPattern.matcher(path);"
                                },
                                {
                                    "line_no": 587,
                                    "content": "      if (matcher.matches()) {"
                                },
                                {
                                    "line_no": 588,
                                    "content": "        String tag = matcher.group(1);"
                                }
                            ],
                            "error_texts": [
                                "[587,7] class, interface, or enum expected\n"
                            ]
                        },
                        "589": {
                            "lines": [
                                {
                                    "line_no": 588,
                                    "content": "        String tag = matcher.group(1);"
                                },
                                {
                                    "line_no": 589,
                                    "content": "        String subfieldCode = matcher.group(2);"
                                },
                                {
                                    "line_no": 590,
                                    "content": "        if (datafieldIndex.containsKey(tag)) {"
                                }
                            ],
                            "error_texts": [
                                "[589,9] class, interface, or enum expected\n"
                            ]
                        },
                        "590": {
                            "lines": [
                                {
                                    "line_no": 589,
                                    "content": "        String subfieldCode = matcher.group(2);"
                                },
                                {
                                    "line_no": 590,
                                    "content": "        if (datafieldIndex.containsKey(tag)) {"
                                },
                                {
                                    "line_no": 591,
                                    "content": "          for (DataField field : datafieldIndex.get(tag)) {"
                                }
                            ],
                            "error_texts": [
                                "[590,9] class, interface, or enum expected\n"
                            ]
                        },
                        "593": {
                            "lines": [
                                {
                                    "line_no": 592,
                                    "content": "            if (searchDatafield(query, results, subfieldCode, field)) break;"
                                },
                                {
                                    "line_no": 593,
                                    "content": "          }"
                                },
                                {
                                    "line_no": 594,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[593,11] class, interface, or enum expected\n"
                            ]
                        },
                        "597": {
                            "lines": [
                                {
                                    "line_no": 596,
                                    "content": "      matcher = positionalPattern.matcher(path);"
                                },
                                {
                                    "line_no": 597,
                                    "content": "      if (matcher.matches()) {"
                                },
                                {
                                    "line_no": 598,
                                    "content": "        searchByPosition(query, results, matcher);"
                                }
                            ],
                            "error_texts": [
                                "[597,7] class, interface, or enum expected\n"
                            ]
                        },
                        "599": {
                            "lines": [
                                {
                                    "line_no": 598,
                                    "content": "        searchByPosition(query, results, matcher);"
                                },
                                {
                                    "line_no": 599,
                                    "content": "      }"
                                },
                                {
                                    "line_no": 600,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[599,7] class, interface, or enum expected\n"
                            ]
                        },
                        "602": {
                            "lines": [
                                {
                                    "line_no": 601,
                                    "content": "    return results;"
                                },
                                {
                                    "line_no": 602,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 603,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[602,3] class, interface, or enum expected\n"
                            ]
                        },
                        "604": {
                            "lines": [
                                {
                                    "line_no": 603,
                                    "content": ""
                                },
                                {
                                    "line_no": 604,
                                    "content": "  public List<String> select(MarcSpec selector) {"
                                },
                                {
                                    "line_no": 605,
                                    "content": "    List<String> results = new ArrayList<>();"
                                }
                            ],
                            "error_texts": [
                                "[604,10] class, interface, or enum expected\n"
                            ]
                        },
                        "606": {
                            "lines": [
                                {
                                    "line_no": 605,
                                    "content": "    List<String> results = new ArrayList<>();"
                                },
                                {
                                    "line_no": 606,
                                    "content": "    if (selector.getFieldTag().equals(\"LDR\")) {"
                                },
                                {
                                    "line_no": 607,
                                    "content": "      if (selector.hasRangeSelector()) {"
                                }
                            ],
                            "error_texts": [
                                "[606,5] class, interface, or enum expected\n"
                            ]
                        },
                        "609": {
                            "lines": [
                                {
                                    "line_no": 608,
                                    "content": "        results.add(selector.selectRange(leader.getContent()));"
                                },
                                {
                                    "line_no": 609,
                                    "content": "      } else {"
                                },
                                {
                                    "line_no": 610,
                                    "content": "        results.add(leader.getContent());"
                                }
                            ],
                            "error_texts": [
                                "[609,7] class, interface, or enum expected\n"
                            ]
                        },
                        "611": {
                            "lines": [
                                {
                                    "line_no": 610,
                                    "content": "        results.add(leader.getContent());"
                                },
                                {
                                    "line_no": 611,
                                    "content": "      }"
                                },
                                {
                                    "line_no": 612,
                                    "content": "    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {"
                                }
                            ],
                            "error_texts": [
                                "[611,7] class, interface, or enum expected\n"
                            ]
                        },
                        "616": {
                            "lines": [
                                {
                                    "line_no": 615,
                                    "content": "          continue;"
                                },
                                {
                                    "line_no": 616,
                                    "content": "        if (!simpleControlTags.contains(field.definition.getTag())) {"
                                },
                                {
                                    "line_no": 617,
                                    "content": "          // TODO: check control subfields"
                                }
                            ],
                            "error_texts": [
                                "[616,9] class, interface, or enum expected\n"
                            ]
                        },
                        "621": {
                            "lines": [
                                {
                                    "line_no": 620,
                                    "content": "          results.add(selector.selectRange(field.getContent()));"
                                },
                                {
                                    "line_no": 621,
                                    "content": "        } else {"
                                },
                                {
                                    "line_no": 622,
                                    "content": "          results.add(field.getContent());"
                                }
                            ],
                            "error_texts": [
                                "[621,9] class, interface, or enum expected\n"
                            ]
                        },
                        "623": {
                            "lines": [
                                {
                                    "line_no": 622,
                                    "content": "          results.add(field.getContent());"
                                },
                                {
                                    "line_no": 623,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 624,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[623,9] class, interface, or enum expected\n"
                            ]
                        },
                        "630": {
                            "lines": [
                                {
                                    "line_no": 629,
                                    "content": "          continue;"
                                },
                                {
                                    "line_no": 630,
                                    "content": "        for (String subfieldCode : selector.getSubfieldsAsList()) {"
                                },
                                {
                                    "line_no": 631,
                                    "content": "          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);"
                                }
                            ],
                            "error_texts": [
                                "[630,9] class, interface, or enum expected\n"
                            ]
                        },
                        "632": {
                            "lines": [
                                {
                                    "line_no": 631,
                                    "content": "          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);"
                                },
                                {
                                    "line_no": 632,
                                    "content": "          if (subfields == null)"
                                },
                                {
                                    "line_no": 633,
                                    "content": "            continue;"
                                }
                            ],
                            "error_texts": [
                                "[632,11] class, interface, or enum expected\n"
                            ]
                        },
                        "634": {
                            "lines": [
                                {
                                    "line_no": 633,
                                    "content": "            continue;"
                                },
                                {
                                    "line_no": 634,
                                    "content": "          for (MarcSubfield subfield : subfields) {"
                                },
                                {
                                    "line_no": 635,
                                    "content": "            results.add(subfield.getValue());"
                                }
                            ],
                            "error_texts": [
                                "[634,11] class, interface, or enum expected\n"
                            ]
                        },
                        "636": {
                            "lines": [
                                {
                                    "line_no": 635,
                                    "content": "            results.add(subfield.getValue());"
                                },
                                {
                                    "line_no": 636,
                                    "content": "          }"
                                },
                                {
                                    "line_no": 637,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[636,11] class, interface, or enum expected\n"
                            ]
                        },
                        "643": {
                            "lines": [
                                {
                                    "line_no": 642,
                                    "content": "        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());"
                                },
                                {
                                    "line_no": 643,
                                    "content": "        results.add(control008.getMap().get(definition));"
                                },
                                {
                                    "line_no": 644,
                                    "content": "      } else {"
                                }
                            ],
                            "error_texts": [
                                "[643,9] class, interface, or enum expected\n"
                            ]
                        },
                        "644": {
                            "lines": [
                                {
                                    "line_no": 643,
                                    "content": "        results.add(control008.getMap().get(definition));"
                                },
                                {
                                    "line_no": 644,
                                    "content": "      } else {"
                                },
                                {
                                    "line_no": 645,
                                    "content": "        results.add(control008.getContent());"
                                }
                            ],
                            "error_texts": [
                                "[644,7] class, interface, or enum expected\n"
                            ]
                        },
                        "646": {
                            "lines": [
                                {
                                    "line_no": 645,
                                    "content": "        results.add(control008.getContent());"
                                },
                                {
                                    "line_no": 646,
                                    "content": "      }"
                                },
                                {
                                    "line_no": 647,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[646,7] class, interface, or enum expected\n"
                            ]
                        },
                        "649": {
                            "lines": [
                                {
                                    "line_no": 648,
                                    "content": "    return results;"
                                },
                                {
                                    "line_no": 649,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 650,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[649,3] class, interface, or enum expected\n"
                            ]
                        },
                        "653": {
                            "lines": [
                                {
                                    "line_no": 652,
                                    "content": "    String tag = matcher.group(1);"
                                },
                                {
                                    "line_no": 653,
                                    "content": "    String position = matcher.group(2);"
                                },
                                {
                                    "line_no": 654,
                                    "content": "    int start;"
                                }
                            ],
                            "error_texts": [
                                "[653,5] class, interface, or enum expected\n"
                            ]
                        },
                        "654": {
                            "lines": [
                                {
                                    "line_no": 653,
                                    "content": "    String position = matcher.group(2);"
                                },
                                {
                                    "line_no": 654,
                                    "content": "    int start;"
                                },
                                {
                                    "line_no": 655,
                                    "content": "    int end;"
                                }
                            ],
                            "error_texts": [
                                "[654,5] class, interface, or enum expected\n"
                            ]
                        },
                        "655": {
                            "lines": [
                                {
                                    "line_no": 654,
                                    "content": "    int start;"
                                },
                                {
                                    "line_no": 655,
                                    "content": "    int end;"
                                },
                                {
                                    "line_no": 656,
                                    "content": "    if (position.contains(\"-\")) {"
                                }
                            ],
                            "error_texts": [
                                "[655,5] class, interface, or enum expected\n"
                            ]
                        },
                        "656": {
                            "lines": [
                                {
                                    "line_no": 655,
                                    "content": "    int end;"
                                },
                                {
                                    "line_no": 656,
                                    "content": "    if (position.contains(\"-\")) {"
                                },
                                {
                                    "line_no": 657,
                                    "content": "      String[] parts = position.split(\"-\", 2);"
                                }
                            ],
                            "error_texts": [
                                "[656,5] class, interface, or enum expected\n"
                            ]
                        },
                        "658": {
                            "lines": [
                                {
                                    "line_no": 657,
                                    "content": "      String[] parts = position.split(\"-\", 2);"
                                },
                                {
                                    "line_no": 658,
                                    "content": "      start = Integer.parseInt(parts[0]);"
                                },
                                {
                                    "line_no": 659,
                                    "content": "      end = Integer.parseInt(parts[1]);"
                                }
                            ],
                            "error_texts": [
                                "[658,7] class, interface, or enum expected\n"
                            ]
                        },
                        "659": {
                            "lines": [
                                {
                                    "line_no": 658,
                                    "content": "      start = Integer.parseInt(parts[0]);"
                                },
                                {
                                    "line_no": 659,
                                    "content": "      end = Integer.parseInt(parts[1]);"
                                },
                                {
                                    "line_no": 660,
                                    "content": "    } else {"
                                }
                            ],
                            "error_texts": [
                                "[659,7] class, interface, or enum expected\n"
                            ]
                        },
                        "660": {
                            "lines": [
                                {
                                    "line_no": 659,
                                    "content": "      end = Integer.parseInt(parts[1]);"
                                },
                                {
                                    "line_no": 660,
                                    "content": "    } else {"
                                },
                                {
                                    "line_no": 661,
                                    "content": "      start = Integer.parseInt(position);"
                                }
                            ],
                            "error_texts": [
                                "[660,5] class, interface, or enum expected\n"
                            ]
                        },
                        "662": {
                            "lines": [
                                {
                                    "line_no": 661,
                                    "content": "      start = Integer.parseInt(position);"
                                },
                                {
                                    "line_no": 662,
                                    "content": "      end = start + 1;"
                                },
                                {
                                    "line_no": 663,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[662,7] class, interface, or enum expected\n"
                            ]
                        },
                        "663": {
                            "lines": [
                                {
                                    "line_no": 662,
                                    "content": "      end = start + 1;"
                                },
                                {
                                    "line_no": 663,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 664,
                                    "content": "    String content = null;"
                                }
                            ],
                            "error_texts": [
                                "[663,5] class, interface, or enum expected\n"
                            ]
                        },
                        "665": {
                            "lines": [
                                {
                                    "line_no": 664,
                                    "content": "    String content = null;"
                                },
                                {
                                    "line_no": 665,
                                    "content": "    if (tag.equals(\"Leader\")) {"
                                },
                                {
                                    "line_no": 666,
                                    "content": "      content = leader.getLeaderString();"
                                }
                            ],
                            "error_texts": [
                                "[665,5] class, interface, or enum expected\n"
                            ]
                        },
                        "667": {
                            "lines": [
                                {
                                    "line_no": 666,
                                    "content": "      content = leader.getLeaderString();"
                                },
                                {
                                    "line_no": 667,
                                    "content": "    } else {"
                                },
                                {
                                    "line_no": 668,
                                    "content": "      MarcControlField controlField = null;"
                                }
                            ],
                            "error_texts": [
                                "[667,5] class, interface, or enum expected\n"
                            ]
                        },
                        "670": {
                            "lines": [
                                {
                                    "line_no": 669,
                                    "content": "      // TODO: fix it!"
                                },
                                {
                                    "line_no": 670,
                                    "content": "      switch (tag) {"
                                },
                                {
                                    "line_no": 671,
                                    "content": "        case \"006\": controlField = control006.get(0); break;"
                                }
                            ],
                            "error_texts": [
                                "[670,7] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 5785709917542753654
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -426,8 +426,9 @@ public class MarcRecord implements Serializable {\n     try {\n       json = mapper.writeValueAsString(map);\n     } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n \n     return json;\n   }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 8 exact lines in a row:\n```\ntry {\njson = mapper.writeValueAsString(map);\n} catch (JsonProcessingException e) {\nlogger.log(Level.WARNING, \"error in asJson()\", e);\n}\nreturn json;\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 8 exact lines in a row:\n```\ntry {\njson = mapper.writeValueAsString(map);\n} catch (JsonProcessingException e) {\nlogger.log(Level.WARNING, \"error in asJson()\", e);\n}\nreturn json;\n}\n```",
            "span_id": 7716914517607870947
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -426,8 +426,9 @@ public class MarcRecord implements Serializable {\n     try {\n       json = mapper.writeValueAsString(map);\n     } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n \n     return json;\n   }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 8 exact lines in a row:\n```\ntry {\njson = mapper.writeValueAsString(map);\n} catch (JsonProcessingException e) {\nlogger.log(Level.WARNING, \"error in asJson()\", e);\n}\nreturn json;\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 8 exact lines in a row:\n```\ntry {\njson = mapper.writeValueAsString(map);\n} catch (JsonProcessingException e) {\nlogger.log(Level.WARNING, \"error in asJson()\", e);\n}\nreturn json;\n}\n```",
            "span_id": 17963795788367591305
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -426,11 +426,9 @@ public class MarcRecord implements Serializable {\n     try {\n       json = mapper.writeValueAsString(map);\n     } catch (JsonProcessingException e) {\n-      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n-      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n       logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n       throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n \n     return json;\n   }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n-+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n-\n-  @Override\n-\n-  @Override\n-  public boolean validate(MarcVersion marcVersion) {\n-    return validate(marcVersion, false, null);\n-  }\n  }\n\n\n  // Remove the extra @Override annotation\n  // @Override\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "429": {
                            "lines": [
                                {
                                    "line_no": 428,
                                    "content": "    } catch (JsonProcessingException e) {"
                                },
                                {
                                    "line_no": 429,
                                    "content": "-+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 430,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                }
                            ],
                            "error_texts": [
                                "[429,1] not a statement\n"
                            ]
                        },
                        "430": {
                            "lines": [
                                {
                                    "line_no": 429,
                                    "content": "-+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 430,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 431,
                                    "content": "-"
                                }
                            ],
                            "error_texts": [
                                "[430,8] illegal start of expression\n",
                                "[430,1] not a statement\n"
                            ]
                        },
                        "435": {
                            "lines": [
                                {
                                    "line_no": 434,
                                    "content": "-  @Override"
                                },
                                {
                                    "line_no": 435,
                                    "content": "-  public boolean validate(MarcVersion marcVersion) {"
                                },
                                {
                                    "line_no": 436,
                                    "content": "-    return validate(marcVersion, false, null);"
                                }
                            ],
                            "error_texts": [
                                "[435,4] illegal start of expression\n",
                                "[435,2] ';' expected\n"
                            ]
                        },
                        "431": {
                            "lines": [
                                {
                                    "line_no": 430,
                                    "content": "+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);"
                                },
                                {
                                    "line_no": 431,
                                    "content": "-"
                                },
                                {
                                    "line_no": 432,
                                    "content": "-  @Override"
                                }
                            ],
                            "error_texts": [
                                "[431,1] not a statement\n"
                            ]
                        },
                        "436": {
                            "lines": [
                                {
                                    "line_no": 435,
                                    "content": "-  public boolean validate(MarcVersion marcVersion) {"
                                },
                                {
                                    "line_no": 436,
                                    "content": "-    return validate(marcVersion, false, null);"
                                },
                                {
                                    "line_no": 437,
                                    "content": "-  }"
                                }
                            ],
                            "error_texts": [
                                "[436,6] illegal start of expression\n",
                                "[436,1] not a statement\n"
                            ]
                        },
                        "437": {
                            "lines": [
                                {
                                    "line_no": 436,
                                    "content": "-    return validate(marcVersion, false, null);"
                                },
                                {
                                    "line_no": 437,
                                    "content": "-  }"
                                },
                                {
                                    "line_no": 438,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[437,4] illegal start of expression\n",
                                "[437,1] not a statement\n"
                            ]
                        },
                        "444": {
                            "lines": [
                                {
                                    "line_no": 443,
                                    "content": ""
                                },
                                {
                                    "line_no": 444,
                                    "content": "  public boolean validate(MarcVersion marcVersion, boolean isSummary) {"
                                },
                                {
                                    "line_no": 445,
                                    "content": "    return validate(marcVersion, isSummary, null);"
                                }
                            ],
                            "error_texts": [
                                "[444,10] class, interface, or enum expected\n"
                            ]
                        },
                        "446": {
                            "lines": [
                                {
                                    "line_no": 445,
                                    "content": "    return validate(marcVersion, isSummary, null);"
                                },
                                {
                                    "line_no": 446,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 447,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[446,3] class, interface, or enum expected\n"
                            ]
                        },
                        "448": {
                            "lines": [
                                {
                                    "line_no": 447,
                                    "content": ""
                                },
                                {
                                    "line_no": 448,
                                    "content": "  public boolean validate(MarcVersion marcVersion,"
                                },
                                {
                                    "line_no": 449,
                                    "content": "                          boolean isSummary,"
                                }
                            ],
                            "error_texts": [
                                "[448,10] class, interface, or enum expected\n"
                            ]
                        },
                        "452": {
                            "lines": [
                                {
                                    "line_no": 451,
                                    "content": "    validationErrors = new ArrayList<>();"
                                },
                                {
                                    "line_no": 452,
                                    "content": "    boolean isValidRecord = true;"
                                },
                                {
                                    "line_no": 453,
                                    "content": "    isValidRecord = validateLeader(marcVersion, isValidRecord);"
                                }
                            ],
                            "error_texts": [
                                "[452,5] class, interface, or enum expected\n"
                            ]
                        },
                        "453": {
                            "lines": [
                                {
                                    "line_no": 452,
                                    "content": "    boolean isValidRecord = true;"
                                },
                                {
                                    "line_no": 453,
                                    "content": "    isValidRecord = validateLeader(marcVersion, isValidRecord);"
                                },
                                {
                                    "line_no": 454,
                                    "content": "    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);"
                                }
                            ],
                            "error_texts": [
                                "[453,5] class, interface, or enum expected\n"
                            ]
                        },
                        "454": {
                            "lines": [
                                {
                                    "line_no": 453,
                                    "content": "    isValidRecord = validateLeader(marcVersion, isValidRecord);"
                                },
                                {
                                    "line_no": 454,
                                    "content": "    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);"
                                },
                                {
                                    "line_no": 455,
                                    "content": "    isValidRecord = validateControlfields(marcVersion, isValidRecord);"
                                }
                            ],
                            "error_texts": [
                                "[454,5] class, interface, or enum expected\n"
                            ]
                        },
                        "455": {
                            "lines": [
                                {
                                    "line_no": 454,
                                    "content": "    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);"
                                },
                                {
                                    "line_no": 455,
                                    "content": "    isValidRecord = validateControlfields(marcVersion, isValidRecord);"
                                },
                                {
                                    "line_no": 456,
                                    "content": "    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);"
                                }
                            ],
                            "error_texts": [
                                "[455,5] class, interface, or enum expected\n"
                            ]
                        },
                        "456": {
                            "lines": [
                                {
                                    "line_no": 455,
                                    "content": "    isValidRecord = validateControlfields(marcVersion, isValidRecord);"
                                },
                                {
                                    "line_no": 456,
                                    "content": "    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);"
                                },
                                {
                                    "line_no": 457,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[456,5] class, interface, or enum expected\n"
                            ]
                        },
                        "461": {
                            "lines": [
                                {
                                    "line_no": 460,
                                    "content": ""
                                },
                                {
                                    "line_no": 461,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 462,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[461,5] class, interface, or enum expected\n"
                            ]
                        },
                        "462": {
                            "lines": [
                                {
                                    "line_no": 461,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 462,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 463,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[462,3] class, interface, or enum expected\n"
                            ]
                        },
                        "466": {
                            "lines": [
                                {
                                    "line_no": 465,
                                    "content": "    boolean isValidComponent;"
                                },
                                {
                                    "line_no": 466,
                                    "content": "    isValidComponent = leader.validate(marcVersion);"
                                },
                                {
                                    "line_no": 467,
                                    "content": "    if (!isValidComponent) {"
                                }
                            ],
                            "error_texts": [
                                "[466,5] class, interface, or enum expected\n"
                            ]
                        },
                        "467": {
                            "lines": [
                                {
                                    "line_no": 466,
                                    "content": "    isValidComponent = leader.validate(marcVersion);"
                                },
                                {
                                    "line_no": 467,
                                    "content": "    if (!isValidComponent) {"
                                },
                                {
                                    "line_no": 468,
                                    "content": "      List<ValidationError> leaderErrors = leader.getValidationErrors();"
                                }
                            ],
                            "error_texts": [
                                "[467,5] class, interface, or enum expected\n"
                            ]
                        },
                        "469": {
                            "lines": [
                                {
                                    "line_no": 468,
                                    "content": "      List<ValidationError> leaderErrors = leader.getValidationErrors();"
                                },
                                {
                                    "line_no": 469,
                                    "content": "      for (ValidationError leaderError : leaderErrors)"
                                },
                                {
                                    "line_no": 470,
                                    "content": "        if (leaderError.getRecordId() == null)"
                                }
                            ],
                            "error_texts": [
                                "[469,7] class, interface, or enum expected\n"
                            ]
                        },
                        "472": {
                            "lines": [
                                {
                                    "line_no": 471,
                                    "content": "          leaderError.setRecordId(getId());"
                                },
                                {
                                    "line_no": 472,
                                    "content": "      validationErrors.addAll(leaderErrors);"
                                },
                                {
                                    "line_no": 473,
                                    "content": "      isValidRecord = isValidComponent;"
                                }
                            ],
                            "error_texts": [
                                "[472,7] class, interface, or enum expected\n"
                            ]
                        },
                        "473": {
                            "lines": [
                                {
                                    "line_no": 472,
                                    "content": "      validationErrors.addAll(leaderErrors);"
                                },
                                {
                                    "line_no": 473,
                                    "content": "      isValidRecord = isValidComponent;"
                                },
                                {
                                    "line_no": 474,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[473,7] class, interface, or enum expected\n"
                            ]
                        },
                        "474": {
                            "lines": [
                                {
                                    "line_no": 473,
                                    "content": "      isValidRecord = isValidComponent;"
                                },
                                {
                                    "line_no": 474,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 475,
                                    "content": "    return isValidRecord;"
                                }
                            ],
                            "error_texts": [
                                "[474,5] class, interface, or enum expected\n"
                            ]
                        },
                        "476": {
                            "lines": [
                                {
                                    "line_no": 475,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 476,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 477,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[476,3] class, interface, or enum expected\n"
                            ]
                        },
                        "484": {
                            "lines": [
                                {
                                    "line_no": 483,
                                    "content": "            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));"
                                },
                                {
                                    "line_no": 484,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 485,
                                    "content": "      } else {"
                                }
                            ],
                            "error_texts": [
                                "[484,9] class, interface, or enum expected\n"
                            ]
                        },
                        "487": {
                            "lines": [
                                {
                                    "line_no": 486,
                                    "content": "        Map<String, Integer> tags = new LinkedHashMap<>();"
                                },
                                {
                                    "line_no": 487,
                                    "content": "        for (String tag : unhandledTags)"
                                },
                                {
                                    "line_no": 488,
                                    "content": "          Utils.count(tag, tags);"
                                }
                            ],
                            "error_texts": [
                                "[487,9] class, interface, or enum expected\n"
                            ]
                        },
                        "490": {
                            "lines": [
                                {
                                    "line_no": 489,
                                    "content": ""
                                },
                                {
                                    "line_no": 490,
                                    "content": "        List<String> unhandledTagsList = new ArrayList<>();"
                                },
                                {
                                    "line_no": 491,
                                    "content": "        for (Map.Entry<String, Integer> entry : tags.entrySet()) {"
                                }
                            ],
                            "error_texts": [
                                "[490,9] class, interface, or enum expected\n"
                            ]
                        },
                        "491": {
                            "lines": [
                                {
                                    "line_no": 490,
                                    "content": "        List<String> unhandledTagsList = new ArrayList<>();"
                                },
                                {
                                    "line_no": 491,
                                    "content": "        for (Map.Entry<String, Integer> entry : tags.entrySet()) {"
                                },
                                {
                                    "line_no": 492,
                                    "content": "          String tag = entry.getKey();"
                                }
                            ],
                            "error_texts": [
                                "[491,9] class, interface, or enum expected\n"
                            ]
                        },
                        "493": {
                            "lines": [
                                {
                                    "line_no": 492,
                                    "content": "          String tag = entry.getKey();"
                                },
                                {
                                    "line_no": 493,
                                    "content": "          if (entry.getValue() == 1)"
                                },
                                {
                                    "line_no": 494,
                                    "content": "            unhandledTagsList.add(tag);"
                                }
                            ],
                            "error_texts": [
                                "[493,11] class, interface, or enum expected\n"
                            ]
                        },
                        "495": {
                            "lines": [
                                {
                                    "line_no": 494,
                                    "content": "            unhandledTagsList.add(tag);"
                                },
                                {
                                    "line_no": 495,
                                    "content": "          else"
                                },
                                {
                                    "line_no": 496,
                                    "content": "            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));"
                                }
                            ],
                            "error_texts": [
                                "[495,11] class, interface, or enum expected\n"
                            ]
                        },
                        "497": {
                            "lines": [
                                {
                                    "line_no": 496,
                                    "content": "            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));"
                                },
                                {
                                    "line_no": 497,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 498,
                                    "content": "        for (String tag : unhandledTagsList) {"
                                }
                            ],
                            "error_texts": [
                                "[497,9] class, interface, or enum expected\n"
                            ]
                        },
                        "501": {
                            "lines": [
                                {
                                    "line_no": 500,
                                    "content": "            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));"
                                },
                                {
                                    "line_no": 501,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 502,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[501,9] class, interface, or enum expected\n"
                            ]
                        },
                        "505": {
                            "lines": [
                                {
                                    "line_no": 504,
                                    "content": "      isValidRecord = false;"
                                },
                                {
                                    "line_no": 505,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 506,
                                    "content": "    return isValidRecord;"
                                }
                            ],
                            "error_texts": [
                                "[505,5] class, interface, or enum expected\n"
                            ]
                        },
                        "507": {
                            "lines": [
                                {
                                    "line_no": 506,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 507,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 508,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[507,3] class, interface, or enum expected\n"
                            ]
                        },
                        "511": {
                            "lines": [
                                {
                                    "line_no": 510,
                                    "content": "    boolean isValidComponent;"
                                },
                                {
                                    "line_no": 511,
                                    "content": "    for (MarcControlField controlField : getControlfields()) {"
                                },
                                {
                                    "line_no": 512,
                                    "content": "      if (controlField != null) {"
                                }
                            ],
                            "error_texts": [
                                "[511,5] class, interface, or enum expected\n"
                            ]
                        },
                        "514": {
                            "lines": [
                                {
                                    "line_no": 513,
                                    "content": "        isValidComponent = controlField.validate(marcVersion);"
                                },
                                {
                                    "line_no": 514,
                                    "content": "        if (!isValidComponent) {"
                                },
                                {
                                    "line_no": 515,
                                    "content": "          validationErrors.addAll(controlField.getValidationErrors());"
                                }
                            ],
                            "error_texts": [
                                "[514,9] class, interface, or enum expected\n"
                            ]
                        },
                        "516": {
                            "lines": [
                                {
                                    "line_no": 515,
                                    "content": "          validationErrors.addAll(controlField.getValidationErrors());"
                                },
                                {
                                    "line_no": 516,
                                    "content": "          isValidRecord = isValidComponent;"
                                },
                                {
                                    "line_no": 517,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[516,11] class, interface, or enum expected\n"
                            ]
                        },
                        "517": {
                            "lines": [
                                {
                                    "line_no": 516,
                                    "content": "          isValidRecord = isValidComponent;"
                                },
                                {
                                    "line_no": 517,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 518,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[517,9] class, interface, or enum expected\n"
                            ]
                        },
                        "521": {
                            "lines": [
                                {
                                    "line_no": 520,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 521,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 522,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[521,3] class, interface, or enum expected\n"
                            ]
                        },
                        "527": {
                            "lines": [
                                {
                                    "line_no": 526,
                                    "content": "    ValidatorResponse validatorResponse;"
                                },
                                {
                                    "line_no": 527,
                                    "content": "    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();"
                                },
                                {
                                    "line_no": 528,
                                    "content": "    for (DataField field : datafields) {"
                                }
                            ],
                            "error_texts": [
                                "[527,5] class, interface, or enum expected\n"
                            ]
                        },
                        "528": {
                            "lines": [
                                {
                                    "line_no": 527,
                                    "content": "    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();"
                                },
                                {
                                    "line_no": 528,
                                    "content": "    for (DataField field : datafields) {"
                                },
                                {
                                    "line_no": 529,
                                    "content": "      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {"
                                }
                            ],
                            "error_texts": [
                                "[528,5] class, interface, or enum expected\n"
                            ]
                        },
                        "531": {
                            "lines": [
                                {
                                    "line_no": 530,
                                    "content": "        count(field.getDefinition(), repetitionCounter);"
                                },
                                {
                                    "line_no": 531,
                                    "content": "        if (!field.validate(marcVersion)) {"
                                },
                                {
                                    "line_no": 532,
                                    "content": "          isValidRecord = false;"
                                }
                            ],
                            "error_texts": [
                                "[531,9] class, interface, or enum expected\n"
                            ]
                        },
                        "533": {
                            "lines": [
                                {
                                    "line_no": 532,
                                    "content": "          isValidRecord = false;"
                                },
                                {
                                    "line_no": 533,
                                    "content": "          validationErrors.addAll(field.getValidationErrors());"
                                },
                                {
                                    "line_no": 534,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[533,11] class, interface, or enum expected\n"
                            ]
                        },
                        "534": {
                            "lines": [
                                {
                                    "line_no": 533,
                                    "content": "          validationErrors.addAll(field.getValidationErrors());"
                                },
                                {
                                    "line_no": 534,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 535,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[534,9] class, interface, or enum expected\n"
                            ]
                        },
                        "537": {
                            "lines": [
                                {
                                    "line_no": 536,
                                    "content": "        validatorResponse = ClassificationReferenceValidator.validate(field);"
                                },
                                {
                                    "line_no": 537,
                                    "content": "        if (!validatorResponse.isValid()) {"
                                },
                                {
                                    "line_no": 538,
                                    "content": "          validationErrors.addAll(validatorResponse.getValidationErrors());"
                                }
                            ],
                            "error_texts": [
                                "[537,9] class, interface, or enum expected\n"
                            ]
                        },
                        "539": {
                            "lines": [
                                {
                                    "line_no": 538,
                                    "content": "          validationErrors.addAll(validatorResponse.getValidationErrors());"
                                },
                                {
                                    "line_no": 539,
                                    "content": "          isValidRecord = false;"
                                },
                                {
                                    "line_no": 540,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[539,11] class, interface, or enum expected\n"
                            ]
                        },
                        "540": {
                            "lines": [
                                {
                                    "line_no": 539,
                                    "content": "          isValidRecord = false;"
                                },
                                {
                                    "line_no": 540,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 541,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[540,9] class, interface, or enum expected\n"
                            ]
                        },
                        "546": {
                            "lines": [
                                {
                                    "line_no": 545,
                                    "content": "      DataFieldDefinition fieldDefinition = entry.getKey();"
                                },
                                {
                                    "line_no": 546,
                                    "content": "      Integer count = entry.getValue();"
                                },
                                {
                                    "line_no": 547,
                                    "content": "      if (count > 1"
                                }
                            ],
                            "error_texts": [
                                "[546,7] class, interface, or enum expected\n"
                            ]
                        },
                        "547": {
                            "lines": [
                                {
                                    "line_no": 546,
                                    "content": "      Integer count = entry.getValue();"
                                },
                                {
                                    "line_no": 547,
                                    "content": "      if (count > 1"
                                },
                                {
                                    "line_no": 548,
                                    "content": "          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {"
                                }
                            ],
                            "error_texts": [
                                "[547,7] class, interface, or enum expected\n"
                            ]
                        },
                        "554": {
                            "lines": [
                                {
                                    "line_no": 553,
                                    "content": "        ));"
                                },
                                {
                                    "line_no": 554,
                                    "content": "        isValidRecord = false;"
                                },
                                {
                                    "line_no": 555,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[554,9] class, interface, or enum expected\n"
                            ]
                        },
                        "555": {
                            "lines": [
                                {
                                    "line_no": 554,
                                    "content": "        isValidRecord = false;"
                                },
                                {
                                    "line_no": 555,
                                    "content": "      }"
                                },
                                {
                                    "line_no": 556,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[555,7] class, interface, or enum expected\n"
                            ]
                        },
                        "558": {
                            "lines": [
                                {
                                    "line_no": 557,
                                    "content": "    return isValidRecord;"
                                },
                                {
                                    "line_no": 558,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 559,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[558,3] class, interface, or enum expected\n"
                            ]
                        },
                        "563": {
                            "lines": [
                                {
                                    "line_no": 562,
                                    "content": "      return false;"
                                },
                                {
                                    "line_no": 563,
                                    "content": "    return ignorableFields.contains(tag);"
                                },
                                {
                                    "line_no": 564,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[563,5] class, interface, or enum expected\n"
                            ]
                        },
                        "564": {
                            "lines": [
                                {
                                    "line_no": 563,
                                    "content": "    return ignorableFields.contains(tag);"
                                },
                                {
                                    "line_no": 564,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 565,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[564,3] class, interface, or enum expected\n"
                            ]
                        },
                        "567": {
                            "lines": [
                                {
                                    "line_no": 566,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 567,
                                    "content": "  public List<ValidationError> getValidationErrors() {"
                                },
                                {
                                    "line_no": 568,
                                    "content": "    return validationErrors;"
                                }
                            ],
                            "error_texts": [
                                "[567,10] class, interface, or enum expected\n"
                            ]
                        },
                        "569": {
                            "lines": [
                                {
                                    "line_no": 568,
                                    "content": "    return validationErrors;"
                                },
                                {
                                    "line_no": 569,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 570,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[569,3] class, interface, or enum expected\n"
                            ]
                        },
                        "571": {
                            "lines": [
                                {
                                    "line_no": 570,
                                    "content": ""
                                },
                                {
                                    "line_no": 571,
                                    "content": "  public List<String> search(String path, String query) {"
                                },
                                {
                                    "line_no": 572,
                                    "content": "    List<String> results = new ArrayList<>();"
                                }
                            ],
                            "error_texts": [
                                "[571,10] class, interface, or enum expected\n"
                            ]
                        },
                        "573": {
                            "lines": [
                                {
                                    "line_no": 572,
                                    "content": "    List<String> results = new ArrayList<>();"
                                },
                                {
                                    "line_no": 573,
                                    "content": "    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {"
                                },
                                {
                                    "line_no": 574,
                                    "content": "      searchControlField(path, query, results);"
                                }
                            ],
                            "error_texts": [
                                "[573,5] class, interface, or enum expected\n"
                            ]
                        },
                        "575": {
                            "lines": [
                                {
                                    "line_no": 574,
                                    "content": "      searchControlField(path, query, results);"
                                },
                                {
                                    "line_no": 575,
                                    "content": "    } else if (path.startsWith(\"006\")) {"
                                },
                                {
                                    "line_no": 576,
                                    "content": "      for (Control006 instance : control006)"
                                }
                            ],
                            "error_texts": [
                                "[575,5] class, interface, or enum expected\n"
                            ]
                        },
                        "578": {
                            "lines": [
                                {
                                    "line_no": 577,
                                    "content": "        searchPositionalControlField(instance, path, query, results);"
                                },
                                {
                                    "line_no": 578,
                                    "content": "    } else if (path.startsWith(\"007\")) {"
                                },
                                {
                                    "line_no": 579,
                                    "content": "      for (Control007 instance : control007)"
                                }
                            ],
                            "error_texts": [
                                "[578,5] class, interface, or enum expected\n"
                            ]
                        },
                        "581": {
                            "lines": [
                                {
                                    "line_no": 580,
                                    "content": "        searchPositionalControlField(instance, path, query, results);"
                                },
                                {
                                    "line_no": 581,
                                    "content": "    } else if (path.startsWith(\"008\")) {"
                                },
                                {
                                    "line_no": 582,
                                    "content": "      searchPositionalControlField(control008, path, query, results);"
                                }
                            ],
                            "error_texts": [
                                "[581,5] class, interface, or enum expected\n"
                            ]
                        },
                        "583": {
                            "lines": [
                                {
                                    "line_no": 582,
                                    "content": "      searchPositionalControlField(control008, path, query, results);"
                                },
                                {
                                    "line_no": 583,
                                    "content": "    } else {"
                                },
                                {
                                    "line_no": 584,
                                    "content": "      Matcher matcher = dataFieldPattern.matcher(path);"
                                }
                            ],
                            "error_texts": [
                                "[583,5] class, interface, or enum expected\n"
                            ]
                        },
                        "585": {
                            "lines": [
                                {
                                    "line_no": 584,
                                    "content": "      Matcher matcher = dataFieldPattern.matcher(path);"
                                },
                                {
                                    "line_no": 585,
                                    "content": "      if (matcher.matches()) {"
                                },
                                {
                                    "line_no": 586,
                                    "content": "        String tag = matcher.group(1);"
                                }
                            ],
                            "error_texts": [
                                "[585,7] class, interface, or enum expected\n"
                            ]
                        },
                        "587": {
                            "lines": [
                                {
                                    "line_no": 586,
                                    "content": "        String tag = matcher.group(1);"
                                },
                                {
                                    "line_no": 587,
                                    "content": "        String subfieldCode = matcher.group(2);"
                                },
                                {
                                    "line_no": 588,
                                    "content": "        if (datafieldIndex.containsKey(tag)) {"
                                }
                            ],
                            "error_texts": [
                                "[587,9] class, interface, or enum expected\n"
                            ]
                        },
                        "588": {
                            "lines": [
                                {
                                    "line_no": 587,
                                    "content": "        String subfieldCode = matcher.group(2);"
                                },
                                {
                                    "line_no": 588,
                                    "content": "        if (datafieldIndex.containsKey(tag)) {"
                                },
                                {
                                    "line_no": 589,
                                    "content": "          for (DataField field : datafieldIndex.get(tag)) {"
                                }
                            ],
                            "error_texts": [
                                "[588,9] class, interface, or enum expected\n"
                            ]
                        },
                        "591": {
                            "lines": [
                                {
                                    "line_no": 590,
                                    "content": "            if (searchDatafield(query, results, subfieldCode, field)) break;"
                                },
                                {
                                    "line_no": 591,
                                    "content": "          }"
                                },
                                {
                                    "line_no": 592,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[591,11] class, interface, or enum expected\n"
                            ]
                        },
                        "595": {
                            "lines": [
                                {
                                    "line_no": 594,
                                    "content": "      matcher = positionalPattern.matcher(path);"
                                },
                                {
                                    "line_no": 595,
                                    "content": "      if (matcher.matches()) {"
                                },
                                {
                                    "line_no": 596,
                                    "content": "        searchByPosition(query, results, matcher);"
                                }
                            ],
                            "error_texts": [
                                "[595,7] class, interface, or enum expected\n"
                            ]
                        },
                        "597": {
                            "lines": [
                                {
                                    "line_no": 596,
                                    "content": "        searchByPosition(query, results, matcher);"
                                },
                                {
                                    "line_no": 597,
                                    "content": "      }"
                                },
                                {
                                    "line_no": 598,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[597,7] class, interface, or enum expected\n"
                            ]
                        },
                        "600": {
                            "lines": [
                                {
                                    "line_no": 599,
                                    "content": "    return results;"
                                },
                                {
                                    "line_no": 600,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 601,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[600,3] class, interface, or enum expected\n"
                            ]
                        },
                        "602": {
                            "lines": [
                                {
                                    "line_no": 601,
                                    "content": ""
                                },
                                {
                                    "line_no": 602,
                                    "content": "  public List<String> select(MarcSpec selector) {"
                                },
                                {
                                    "line_no": 603,
                                    "content": "    List<String> results = new ArrayList<>();"
                                }
                            ],
                            "error_texts": [
                                "[602,10] class, interface, or enum expected\n"
                            ]
                        },
                        "604": {
                            "lines": [
                                {
                                    "line_no": 603,
                                    "content": "    List<String> results = new ArrayList<>();"
                                },
                                {
                                    "line_no": 604,
                                    "content": "    if (selector.getFieldTag().equals(\"LDR\")) {"
                                },
                                {
                                    "line_no": 605,
                                    "content": "      if (selector.hasRangeSelector()) {"
                                }
                            ],
                            "error_texts": [
                                "[604,5] class, interface, or enum expected\n"
                            ]
                        },
                        "607": {
                            "lines": [
                                {
                                    "line_no": 606,
                                    "content": "        results.add(selector.selectRange(leader.getContent()));"
                                },
                                {
                                    "line_no": 607,
                                    "content": "      } else {"
                                },
                                {
                                    "line_no": 608,
                                    "content": "        results.add(leader.getContent());"
                                }
                            ],
                            "error_texts": [
                                "[607,7] class, interface, or enum expected\n"
                            ]
                        },
                        "609": {
                            "lines": [
                                {
                                    "line_no": 608,
                                    "content": "        results.add(leader.getContent());"
                                },
                                {
                                    "line_no": 609,
                                    "content": "      }"
                                },
                                {
                                    "line_no": 610,
                                    "content": "    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {"
                                }
                            ],
                            "error_texts": [
                                "[609,7] class, interface, or enum expected\n"
                            ]
                        },
                        "614": {
                            "lines": [
                                {
                                    "line_no": 613,
                                    "content": "          continue;"
                                },
                                {
                                    "line_no": 614,
                                    "content": "        if (!simpleControlTags.contains(field.definition.getTag())) {"
                                },
                                {
                                    "line_no": 615,
                                    "content": "          // TODO: check control subfields"
                                }
                            ],
                            "error_texts": [
                                "[614,9] class, interface, or enum expected\n"
                            ]
                        },
                        "619": {
                            "lines": [
                                {
                                    "line_no": 618,
                                    "content": "          results.add(selector.selectRange(field.getContent()));"
                                },
                                {
                                    "line_no": 619,
                                    "content": "        } else {"
                                },
                                {
                                    "line_no": 620,
                                    "content": "          results.add(field.getContent());"
                                }
                            ],
                            "error_texts": [
                                "[619,9] class, interface, or enum expected\n"
                            ]
                        },
                        "621": {
                            "lines": [
                                {
                                    "line_no": 620,
                                    "content": "          results.add(field.getContent());"
                                },
                                {
                                    "line_no": 621,
                                    "content": "        }"
                                },
                                {
                                    "line_no": 622,
                                    "content": "      }"
                                }
                            ],
                            "error_texts": [
                                "[621,9] class, interface, or enum expected\n"
                            ]
                        },
                        "628": {
                            "lines": [
                                {
                                    "line_no": 627,
                                    "content": "          continue;"
                                },
                                {
                                    "line_no": 628,
                                    "content": "        for (String subfieldCode : selector.getSubfieldsAsList()) {"
                                },
                                {
                                    "line_no": 629,
                                    "content": "          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);"
                                }
                            ],
                            "error_texts": [
                                "[628,9] class, interface, or enum expected\n"
                            ]
                        },
                        "630": {
                            "lines": [
                                {
                                    "line_no": 629,
                                    "content": "          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);"
                                },
                                {
                                    "line_no": 630,
                                    "content": "          if (subfields == null)"
                                },
                                {
                                    "line_no": 631,
                                    "content": "            continue;"
                                }
                            ],
                            "error_texts": [
                                "[630,11] class, interface, or enum expected\n"
                            ]
                        },
                        "632": {
                            "lines": [
                                {
                                    "line_no": 631,
                                    "content": "            continue;"
                                },
                                {
                                    "line_no": 632,
                                    "content": "          for (MarcSubfield subfield : subfields) {"
                                },
                                {
                                    "line_no": 633,
                                    "content": "            results.add(subfield.getValue());"
                                }
                            ],
                            "error_texts": [
                                "[632,11] class, interface, or enum expected\n"
                            ]
                        },
                        "634": {
                            "lines": [
                                {
                                    "line_no": 633,
                                    "content": "            results.add(subfield.getValue());"
                                },
                                {
                                    "line_no": 634,
                                    "content": "          }"
                                },
                                {
                                    "line_no": 635,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[634,11] class, interface, or enum expected\n"
                            ]
                        },
                        "641": {
                            "lines": [
                                {
                                    "line_no": 640,
                                    "content": "        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());"
                                },
                                {
                                    "line_no": 641,
                                    "content": "        results.add(control008.getMap().get(definition));"
                                },
                                {
                                    "line_no": 642,
                                    "content": "      } else {"
                                }
                            ],
                            "error_texts": [
                                "[641,9] class, interface, or enum expected\n"
                            ]
                        },
                        "642": {
                            "lines": [
                                {
                                    "line_no": 641,
                                    "content": "        results.add(control008.getMap().get(definition));"
                                },
                                {
                                    "line_no": 642,
                                    "content": "      } else {"
                                },
                                {
                                    "line_no": 643,
                                    "content": "        results.add(control008.getContent());"
                                }
                            ],
                            "error_texts": [
                                "[642,7] class, interface, or enum expected\n"
                            ]
                        },
                        "644": {
                            "lines": [
                                {
                                    "line_no": 643,
                                    "content": "        results.add(control008.getContent());"
                                },
                                {
                                    "line_no": 644,
                                    "content": "      }"
                                },
                                {
                                    "line_no": 645,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[644,7] class, interface, or enum expected\n"
                            ]
                        },
                        "647": {
                            "lines": [
                                {
                                    "line_no": 646,
                                    "content": "    return results;"
                                },
                                {
                                    "line_no": 647,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 648,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[647,3] class, interface, or enum expected\n"
                            ]
                        },
                        "651": {
                            "lines": [
                                {
                                    "line_no": 650,
                                    "content": "    String tag = matcher.group(1);"
                                },
                                {
                                    "line_no": 651,
                                    "content": "    String position = matcher.group(2);"
                                },
                                {
                                    "line_no": 652,
                                    "content": "    int start;"
                                }
                            ],
                            "error_texts": [
                                "[651,5] class, interface, or enum expected\n"
                            ]
                        },
                        "652": {
                            "lines": [
                                {
                                    "line_no": 651,
                                    "content": "    String position = matcher.group(2);"
                                },
                                {
                                    "line_no": 652,
                                    "content": "    int start;"
                                },
                                {
                                    "line_no": 653,
                                    "content": "    int end;"
                                }
                            ],
                            "error_texts": [
                                "[652,5] class, interface, or enum expected\n"
                            ]
                        },
                        "653": {
                            "lines": [
                                {
                                    "line_no": 652,
                                    "content": "    int start;"
                                },
                                {
                                    "line_no": 653,
                                    "content": "    int end;"
                                },
                                {
                                    "line_no": 654,
                                    "content": "    if (position.contains(\"-\")) {"
                                }
                            ],
                            "error_texts": [
                                "[653,5] class, interface, or enum expected\n"
                            ]
                        },
                        "654": {
                            "lines": [
                                {
                                    "line_no": 653,
                                    "content": "    int end;"
                                },
                                {
                                    "line_no": 654,
                                    "content": "    if (position.contains(\"-\")) {"
                                },
                                {
                                    "line_no": 655,
                                    "content": "      String[] parts = position.split(\"-\", 2);"
                                }
                            ],
                            "error_texts": [
                                "[654,5] class, interface, or enum expected\n"
                            ]
                        },
                        "656": {
                            "lines": [
                                {
                                    "line_no": 655,
                                    "content": "      String[] parts = position.split(\"-\", 2);"
                                },
                                {
                                    "line_no": 656,
                                    "content": "      start = Integer.parseInt(parts[0]);"
                                },
                                {
                                    "line_no": 657,
                                    "content": "      end = Integer.parseInt(parts[1]);"
                                }
                            ],
                            "error_texts": [
                                "[656,7] class, interface, or enum expected\n"
                            ]
                        },
                        "657": {
                            "lines": [
                                {
                                    "line_no": 656,
                                    "content": "      start = Integer.parseInt(parts[0]);"
                                },
                                {
                                    "line_no": 657,
                                    "content": "      end = Integer.parseInt(parts[1]);"
                                },
                                {
                                    "line_no": 658,
                                    "content": "    } else {"
                                }
                            ],
                            "error_texts": [
                                "[657,7] class, interface, or enum expected\n"
                            ]
                        },
                        "658": {
                            "lines": [
                                {
                                    "line_no": 657,
                                    "content": "      end = Integer.parseInt(parts[1]);"
                                },
                                {
                                    "line_no": 658,
                                    "content": "    } else {"
                                },
                                {
                                    "line_no": 659,
                                    "content": "      start = Integer.parseInt(position);"
                                }
                            ],
                            "error_texts": [
                                "[658,5] class, interface, or enum expected\n"
                            ]
                        },
                        "660": {
                            "lines": [
                                {
                                    "line_no": 659,
                                    "content": "      start = Integer.parseInt(position);"
                                },
                                {
                                    "line_no": 660,
                                    "content": "      end = start + 1;"
                                },
                                {
                                    "line_no": 661,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[660,7] class, interface, or enum expected\n"
                            ]
                        },
                        "661": {
                            "lines": [
                                {
                                    "line_no": 660,
                                    "content": "      end = start + 1;"
                                },
                                {
                                    "line_no": 661,
                                    "content": "    }"
                                },
                                {
                                    "line_no": 662,
                                    "content": "    String content = null;"
                                }
                            ],
                            "error_texts": [
                                "[661,5] class, interface, or enum expected\n"
                            ]
                        },
                        "663": {
                            "lines": [
                                {
                                    "line_no": 662,
                                    "content": "    String content = null;"
                                },
                                {
                                    "line_no": 663,
                                    "content": "    if (tag.equals(\"Leader\")) {"
                                },
                                {
                                    "line_no": 664,
                                    "content": "      content = leader.getLeaderString();"
                                }
                            ],
                            "error_texts": [
                                "[663,5] class, interface, or enum expected\n"
                            ]
                        },
                        "665": {
                            "lines": [
                                {
                                    "line_no": 664,
                                    "content": "      content = leader.getLeaderString();"
                                },
                                {
                                    "line_no": 665,
                                    "content": "    } else {"
                                },
                                {
                                    "line_no": 666,
                                    "content": "      MarcControlField controlField = null;"
                                }
                            ],
                            "error_texts": [
                                "[665,5] class, interface, or enum expected\n"
                            ]
                        },
                        "668": {
                            "lines": [
                                {
                                    "line_no": 667,
                                    "content": "      // TODO: fix it!"
                                },
                                {
                                    "line_no": 668,
                                    "content": "      switch (tag) {"
                                },
                                {
                                    "line_no": 669,
                                    "content": "        case \"006\": controlField = control006.get(0); break;"
                                }
                            ],
                            "error_texts": [
                                "[668,7] class, interface, or enum expected\n"
                            ]
                        },
                        "669": {
                            "lines": [
                                {
                                    "line_no": 668,
                                    "content": "      switch (tag) {"
                                },
                                {
                                    "line_no": 669,
                                    "content": "        case \"006\": controlField = control006.get(0); break;"
                                },
                                {
                                    "line_no": 670,
                                    "content": "        case \"007\": controlField = control007.get(0); break;"
                                }
                            ],
                            "error_texts": [
                                "[669,55] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 5974596530213455675
        },
        {
            "input": "```diff\n--- a/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n+++ b/src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -426,8 +426,9 @@ public class MarcRecord implements Serializable {\n     try {\n       json = mapper.writeValueAsString(map);\n     } catch (JsonProcessingException e) {\n-      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n-      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n     }\n \n     return json;\n   }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoEdits: no applicable hunks found!\nThe provided diff does not contain any hunks that can be applied to the files in the repository.\nEnsure that your diff correctly specifies the changes and try again.\nThe diff needs to apply to the existing lines in the files.",
            "span_id": 10084861647260795974
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java",
            "output": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    }\n\n    return json;\n  }\n\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n",
            "error": "",
            "span_id": 16655258873876129868
        },
        {
            "input": "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java",
            "output": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n-\n-  @Override\n-\n-  @Override\n-  public boolean validate(MarcVersion marcVersion) {\n-    return validate(marcVersion, false, null);\n-  }\n  }\n\n\n  // Remove the extra @Override annotation\n  // @Override\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n",
            "error": "",
            "span_id": 17459647292134976377
        },
        {
            "input": "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java",
            "output": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n-+      logger.log(Level.SEVERE, \"Error converting MarcRecord to JSON\", e);\n+      throw new RuntimeException(\"Error converting MarcRecord to JSON\", e);\n-\n-  @Override\n-\n-  @Override\n-  public boolean validate(MarcVersion marcVersion) {\n-    return validate(marcVersion, false, null);\n-  }\n  }\n\n\n  // Remove the extra @Override annotation\n  // @Override\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n",
            "error": "",
            "span_id": 5344656334727468297
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}