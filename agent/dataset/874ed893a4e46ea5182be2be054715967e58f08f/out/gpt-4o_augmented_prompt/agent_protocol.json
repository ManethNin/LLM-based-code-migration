{
    "validate_diffs": [
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,2 +430,2 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JacksonException e) {\n```",
            "output": "{'src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java': 'package de.gwdg.metadataqa.marc.dao;\\n\\nimport com.fasterxml.jackson.core.JsonProcessingException;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport de.gwdg.metadataqa.marc.Extractable;\\nimport de.gwdg.metadataqa.marc.MarcFactory;\\nimport de.gwdg.metadataqa.marc.MarcSubfield;\\nimport de.gwdg.metadataqa.marc.Utils;\\nimport de.gwdg.metadataqa.marc.Validatable;\\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\\nimport de.gwdg.metadataqa.marc.definition.*;\\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\\n\\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\\n\\nimport java.io.Serializable;\\nimport java.util.*;\\nimport java.util.logging.Level;\\nimport java.util.logging.Logger;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nimport static de.gwdg.metadataqa.marc.Utils.count;\\n\\npublic class MarcRecord implements Extractable, Validatable, Serializable {\\n\\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\\\\\d\\\\\\\\d\\\\\\\\d)\\\\\\\\$(.*)$\");\\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\\n\\n  private Leader leader;\\n  private MarcControlField control001;\\n  private MarcControlField control003;\\n  private MarcControlField control005;\\n  private List<Control006> control006 = new ArrayList<>();\\n  private List<Control007> control007 = new ArrayList<>();\\n  private Control008 control008;\\n  private List<DataField> datafields;\\n  private Map<String, List<DataField>> datafieldIndex;\\n  private Map<String, List<MarcControlField>> controlfieldIndex;\\n  Map<String, List<String>> mainKeyValuePairs;\\n  private List<ValidationError> validationErrors = null;\\n  private SchemaType schemaType = SchemaType.MARC21;\\n\\n  public enum RESOLVE {\\n    NONE,\\n    RESOLVE,\\n    BOTH;\\n  }\\n\\n  private List<String> unhandledTags;\\n\\n  public MarcRecord() {\\n    datafields = new ArrayList<>();\\n    datafieldIndex = new TreeMap<>();\\n    controlfieldIndex = new TreeMap<>();\\n    unhandledTags = new ArrayList<>();\\n  }\\n\\n  public MarcRecord(String id) {\\n    this();\\n    control001 = new Control001(id);\\n  }\\n\\n  public void addDataField(DataField dataField) {\\n    dataField.setMarcRecord(this);\\n    indexField(dataField);\\n    datafields.add(dataField);\\n  }\\n\\n  private void indexField(DataField dataField) {\\n    String tag = dataField.getTag();\\n    if (tag == null)\\n      logger.warning(\"null tag in indexField() \" + dataField);\\n\\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\\n    datafieldIndex.get(tag).add(dataField);\\n  }\\n\\n  public void addUnhandledTags(String tag) {\\n    unhandledTags.add(tag);\\n  }\\n\\n  public void setLeader(Leader leader) {\\n    this.leader = leader;\\n    leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader) {\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\\n    }\\n\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public Leader getLeader() {\\n    return leader;\\n  }\\n\\n  public Leader.Type getType() {\\n    return leader.getType();\\n  }\\n\\n  public MarcControlField getControl001() {\\n    return control001;\\n  }\\n\\n  public MarcRecord setControl001(MarcControlField control001) {\\n    this.control001 = control001;\\n    control001.setMarcRecord(this);\\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\\n    return this;\\n  }\\n\\n  public MarcControlField getControl003() {\\n    return control003;\\n  }\\n\\n  public void setControl003(MarcControlField control003) {\\n    this.control003 = control003;\\n    control003.setMarcRecord(this);\\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\\n  }\\n\\n  public MarcControlField getControl005() {\\n    return control005;\\n  }\\n\\n  public void setControl005(MarcControlField control005) {\\n    this.control005 = control005;\\n    control005.setMarcRecord(this);\\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\\n  }\\n\\n  public List<Control006> getControl006() {\\n    return control006;\\n  }\\n\\n  public void setControl006(Control006 control006) {\\n    this.control006.add(control006);\\n    control006.setMarcRecord(this);\\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\\n  }\\n\\n  public List<Control007> getControl007() {\\n    return control007;\\n  }\\n\\n  public void setControl007(Control007 control007) {\\n    this.control007.add(control007);\\n    control007.setMarcRecord(this);\\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\\n  }\\n\\n  public Control008 getControl008() {\\n    return control008;\\n  }\\n\\n  public void setControl008(Control008 control008) {\\n    this.control008 = control008;\\n    control008.setMarcRecord(this);\\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\\n  }\\n\\n  public String getId() {\\n    return control001.getContent();\\n  }\\n\\n  public String getId(boolean trim) {\\n    String id = getId();\\n    if (trim)\\n      id = id.trim();\\n    return id;\\n  }\\n\\n  public List<MarcControlField> getControlfields() {\\n    List<MarcControlField> list = new ArrayList<>();\\n    list.add(control001);\\n    if (control003 != null)\\n      list.add(control003);\\n    if (control005 != null)\\n      list.add(control005);\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public List<MarcControlField> getSimpleControlfields() {\\n    return Arrays.asList(\\n      control001, control003, control005\\n    );\\n  }\\n\\n  public List<MarcPositionalControlField> getPositionalControlfields() {\\n    List<MarcPositionalControlField> list = new ArrayList<>();\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public boolean hasDatafield(String tag) {\\n    return datafieldIndex.containsKey(tag);\\n  }\\n\\n  public List<DataField> getDatafield(String tag) {\\n    return datafieldIndex.getOrDefault(tag, null);\\n  }\\n\\n  public List<DataField> getDatafields() {\\n    return datafields;\\n  }\\n\\n  public boolean exists(String tag) {\\n    List<DataField> fields = getDatafield(tag);\\n    return (fields != null && !fields.isEmpty());\\n  }\\n\\n  public List<String> extract(String tag, String subfield) {\\n    return extract(tag, subfield, RESOLVE.NONE);\\n  }\\n\\n  /**\\n   * Extact field value\\n   * @param tag\\n   * @param subfield\\n   * @param doResolve\\n   * @return\\n   */\\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\\n    List<String> values = new ArrayList<>();\\n    List<DataField> fields = getDatafield(tag);\\n    if (fields != null && !fields.isEmpty()) {\\n      for (DataField field : fields) {\\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\\n          String value;\\n          Indicator indicator;\\n          if (subfield.equals(\"ind1\")) {\\n            value = field.getInd1();\\n            indicator = field.getDefinition().getInd1();\\n          } else {\\n            value = field.getInd2();\\n            indicator = field.getDefinition().getInd2();\\n          }\\n          if (indicator.getCode(value) == null) {\\n            values.add(value);\\n          } else {\\n            values.add(indicator.getCode(value).getLabel());\\n          }\\n        } else {\\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\\n          if (subfieldInstances != null) {\\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\\n              String value = null;\\n              switch (doResolve) {\\n                case RESOLVE: value = subfieldInstance.resolve(); break;\\n                case NONE: value = subfieldInstance.getValue(); break;\\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\\n              }\\n              values.add(value);\\n            }\\n          }\\n        }\\n      }\\n    }\\n    return values;\\n  }\\n\\n  public List<String> getUnhandledTags() {\\n    return unhandledTags;\\n  }\\n\\n  public String format() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.format());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsText() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsText());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsMarc() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsMarc());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatForIndex() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatForIndex());\\n    }\\n    return output.toString();\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs() {\\n    return getKeyValuePairs(SolrFieldType.MARC);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\\n  }\\n\\n  @Override\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\\n    return getKeyValuePairs(type, false, marcVersion);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\\n                                                    boolean withDeduplication,\\n                                                    MarcVersion marcVersion) {\\n    if (mainKeyValuePairs == null) {\\n      mainKeyValuePairs = new LinkedHashMap<>();\\n\\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\\n\\n      for (MarcControlField controlField : getControlfields())\\n        if (controlField != null)\\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\\n\\n      for (DataField field : datafields) {\\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\\n          String key = entry.getKey();\\n          List<String> values = entry.getValue();\\n          if (mainKeyValuePairs.containsKey(key)) {\\n            mainKeyValuePairs.put(\\n              key,\\n              mergeValues(\\n                new ArrayList<>(mainKeyValuePairs.get(key)),\\n                values,\\n                withDeduplication\\n              )\\n            );\\n          } else {\\n            mainKeyValuePairs.put(key, values);\\n          }\\n        }\\n      }\\n    }\\n\\n    return mainKeyValuePairs;\\n  }\\n\\n  private List<String> mergeValues(List<String> existingValues,\\n                                   List<String> values,\\n                                   boolean withDeduplication) {\\n    if (withDeduplication) {\\n      for (String value : values) {\\n        if (!existingValues.contains(value)) {\\n          existingValues.add(value);\\n        }\\n      }\\n    } else {\\n      existingValues.addAll(values);\\n    }\\n    return existingValues;\\n  }\\n\\n  public String asJson() {\\n    ObjectMapper mapper = new ObjectMapper();\\n\\n    Map<String, Object> map = new LinkedHashMap<>();\\n    map.put(\"leader\", leader.getContent());\\n\\n    for (MarcControlField field : getControlfields())\\n      if (field != null)\\n        map.put(field.getDefinition().getTag(), field.getContent());\\n\\n    for (DataField field : datafields) {\\n      if (field != null) {\\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\\n        fieldMap.put(\"ind1\", field.getInd1());\\n        fieldMap.put(\"ind2\", field.getInd2());\\n\\n        Map<String, String> subfields = new LinkedHashMap<>();\\n        for (MarcSubfield subfield : field.getSubfields()) {\\n          subfields.put(subfield.getCode(), subfield.getValue());\\n        }\\n        fieldMap.put(\"subfields\", subfields);\\n\\n        String tag = field.getDefinition() != null\\n          ? field.getDefinition().getTag()\\n          : field.getTag();\\n\\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\\n        ((ArrayList)map.get(tag)).add(fieldMap);\\n      }\\n    }\\n\\n    String json = null;\\n    try {\\n      json = mapper.writeValueAsString(map);\\n    } catch (JsonProcessingException e) {\\n    } catch (JacksonException e) {\\n    }\\n\\n    return json;\\n  }\\n\\n  @Override\\n  public boolean validate(MarcVersion marcVersion) {\\n    return validate(marcVersion, false, null);\\n  }\\n\\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\\n    return validate(marcVersion, isSummary, null);\\n  }\\n\\n  public boolean validate(MarcVersion marcVersion,\\n                          boolean isSummary,\\n                          IgnorableFields ignorableFields) {\\n    validationErrors = new ArrayList<>();\\n    boolean isValidRecord = true;\\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\\n\\n    // TODO: use reflection to get all validator class\\n    // ValidatorResponse validatorResponse;\\n\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    isValidComponent = leader.validate(marcVersion);\\n    if (!isValidComponent) {\\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\\n      for (ValidationError leaderError : leaderErrors)\\n        if (leaderError.getRecordId() == null)\\n          leaderError.setRecordId(getId());\\n      validationErrors.addAll(leaderErrors);\\n      isValidRecord = isValidComponent;\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\\n    if (!unhandledTags.isEmpty()) {\\n      if (isSummary) {\\n        for (String tag : unhandledTags) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n        }\\n      } else {\\n        Map<String, Integer> tags = new LinkedHashMap<>();\\n        for (String tag : unhandledTags)\\n          Utils.count(tag, tags);\\n\\n        List<String> unhandledTagsList = new ArrayList<>();\\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\\n          String tag = entry.getKey();\\n          if (entry.getValue() == 1)\\n            unhandledTagsList.add(tag);\\n          else\\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\\n        }\\n        for (String tag : unhandledTagsList) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n        }\\n      }\\n\\n      isValidRecord = false;\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    for (MarcControlField controlField : getControlfields()) {\\n      if (controlField != null) {\\n        isValidComponent = controlField.validate(marcVersion);\\n        if (!isValidComponent) {\\n          validationErrors.addAll(controlField.getValidationErrors());\\n          isValidRecord = isValidComponent;\\n        }\\n      }\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateDatafields(MarcVersion marcVersion,\\n                                     boolean isValidRecord,\\n                                     IgnorableFields ignorableFields) {\\n    ValidatorResponse validatorResponse;\\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\\n    for (DataField field : datafields) {\\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\\n        count(field.getDefinition(), repetitionCounter);\\n        if (!field.validate(marcVersion)) {\\n          isValidRecord = false;\\n          validationErrors.addAll(field.getValidationErrors());\\n        }\\n\\n        validatorResponse = ClassificationReferenceValidator.validate(field);\\n        if (!validatorResponse.isValid()) {\\n          validationErrors.addAll(validatorResponse.getValidationErrors());\\n          isValidRecord = false;\\n        }\\n      }\\n    }\\n\\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\\n      DataFieldDefinition fieldDefinition = entry.getKey();\\n      Integer count = entry.getValue();\\n      if (count > 1\\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\\n          ValidationErrorType.FIELD_NONREPEATABLE,\\n          String.format(\"there are %d instances\", count),\\n          fieldDefinition.getDescriptionUrl()\\n        ));\\n        isValidRecord = false;\\n      }\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\\n    if (ignorableFields == null)\\n      return false;\\n    return ignorableFields.contains(tag);\\n  }\\n\\n  @Override\\n  public List<ValidationError> getValidationErrors() {\\n    return validationErrors;\\n  }\\n\\n  public List<String> search(String path, String query) {\\n    List<String> results = new ArrayList<>();\\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\\n      searchControlField(path, query, results);\\n    } else if (path.startsWith(\"006\")) {\\n      for (Control006 instance : control006)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"007\")) {\\n      for (Control007 instance : control007)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"008\")) {\\n      searchPositionalControlField(control008, path, query, results);\\n    } else {\\n      Matcher matcher = dataFieldPattern.matcher(path);\\n      if (matcher.matches()) {\\n        String tag = matcher.group(1);\\n        String subfieldCode = matcher.group(2);\\n        if (datafieldIndex.containsKey(tag)) {\\n          for (DataField field : datafieldIndex.get(tag)) {\\n            if (searchDatafield(query, results, subfieldCode, field)) break;\\n          }\\n        }\\n      }\\n      matcher = positionalPattern.matcher(path);\\n      if (matcher.matches()) {\\n        searchByPosition(query, results, matcher);\\n      }\\n    }\\n    return results;\\n  }\\n\\n  public List<String> select(MarcSpec selector) {\\n    List<String> results = new ArrayList<>();\\n    if (selector.getFieldTag().equals(\"LDR\")) {\\n      if (selector.hasRangeSelector()) {\\n        results.add(selector.selectRange(leader.getContent()));\\n      } else {\\n        results.add(leader.getContent());\\n      }\\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\n          continue;\\n        if (!simpleControlTags.contains(field.definition.getTag())) {\\n          // TODO: check control subfields\\n        }\\n        if (selector.hasRangeSelector()) {\\n          results.add(selector.selectRange(field.getContent()));\\n        } else {\\n          results.add(field.getContent());\\n        }\\n      }\\n\\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\n          continue;\\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n          if (subfields == null)\\n            continue;\\n          for (MarcSubfield subfield : subfields) {\\n            results.add(subfield.getValue());\\n          }\\n        }\\n      }\\n    }\\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\\n      if (selector.getCharStart() != null) {\\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\\n        results.add(control008.getMap().get(definition));\\n      } else {\\n        results.add(control008.getContent());\\n      }\\n    }\\n    return results;\\n  }\\n\\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\\n    String tag = matcher.group(1);\\n    String position = matcher.group(2);\\n    int start;\\n    int end;\\n    if (position.contains(\"-\")) {\\n      String[] parts = position.split(\"-\", 2);\\n      start = Integer.parseInt(parts[0]);\\n      end = Integer.parseInt(parts[1]);\\n    } else {\\n      start = Integer.parseInt(position);\\n      end = start + 1;\\n    }\\n    String content = null;\\n    if (tag.equals(\"Leader\")) {\\n      content = leader.getLeaderString();\\n    } else {\\n      MarcControlField controlField = null;\\n      // TODO: fix it!\\n      switch (tag) {\\n        case \"006\": controlField = control006.get(0); break;\\n        case \"007\": controlField = control007.get(0); break;\\n        case \"008\": controlField = control008; break;\\n        default: break;\\n      }\\n      if (controlField != null)\\n        content = controlField.getContent();\\n    }\\n\\n    if (content != null && content.substring(start, end).equals(query)) {\\n      results.add(content.substring(start, end));\\n    }\\n  }\\n\\n  private boolean searchDatafield(String query, List<String> results,\\n                                  String subfieldCode, DataField field) {\\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\\n      results.add(field.getInd1());\\n      return true;\\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\\n      results.add(field.getInd2());\\n      return true;\\n    } else {\\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n      if (subfields != null) {\\n        for (MarcSubfield subfield : subfields) {\\n          if (subfield.getValue().equals(query)) {\\n            results.add(subfield.getValue());\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  private void searchControlField(String path, String query, List<String> results) {\\n    MarcControlField controlField = null;\\n    switch (path) {\\n      case \"001\": controlField = control001; break;\\n      case \"003\": controlField = control003; break;\\n      case \"005\": controlField = control005; break;\\n      default: break;\\n    }\\n    if (controlField != null && controlField.getContent().equals(query))\\n      results.add(controlField.getContent());\\n  }\\n\\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\\n                                            String path, String query, List<String> results) {\\n    if (controlField != null) {\\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\\n        if (subfield.getId().equals(path)) {\\n          if (map.get(subfield).equals(query))\\n            results.add(map.get(subfield));\\n          break;\\n        }\\n      }\\n    }\\n  }\\n\\n  public List<DataField> getAuthorityFields() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"100\", \"110\", \"111\", \"130\",\\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\\n      \"800\", \"810\", \"811\", \"830\"\\n    );\\n    for (String tag : tags) {\\n      List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n    }\\n    return subjects;\\n  }\\n\\n  public List<DataField> getSubjects() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\\n    );\\n    for (String tag : tags) {\\n      List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n    }\\n    return subjects;\\n  }\\n\\n  public List<DataField> getSubject6xx() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\\n    for (String tag : tags) {\\n      List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n    }\\n    return subjects;\\n  }\\n\\n  public void setField(String tag, String content) {\\n    setField(tag, content, MarcVersion.MARC21);\\n  }\\n\\n  public void setField(String tag, String content, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\\n      tag = UnimarcConverter.tagFromUnimarc(tag);\\n    }\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n    } else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n      }\\n\\n      DataField dataField = new DataField(tag, content, marcVersion);\\n      addDataField(dataField);\\n    }\\n  }\\n\\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n    } else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n      }\\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\\n    }\\n  }\\n\\n  public SchemaType getSchemaType() {\\n    return schemaType;\\n  }\\n\\n  public void setSchemaType(SchemaType schemaType) {\\n    this.schemaType = schemaType;\\n  }\\n}\\nimport com.fasterxml.jackson.core.JacksonException;\\n'}",
            "error": "",
            "span_id": 10043370066226412785
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,2 +430,2 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JacksonException e) {\n@@ -831,2 +831,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": "{'src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java': 'package de.gwdg.metadataqa.marc.dao;\\n\\nimport com.fasterxml.jackson.core.JsonProcessingException;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport de.gwdg.metadataqa.marc.Extractable;\\nimport de.gwdg.metadataqa.marc.MarcFactory;\\nimport de.gwdg.metadataqa.marc.MarcSubfield;\\nimport de.gwdg.metadataqa.marc.Utils;\\nimport de.gwdg.metadataqa.marc.Validatable;\\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\\nimport de.gwdg.metadataqa.marc.definition.*;\\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\\n\\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\\n\\nimport java.io.Serializable;\\nimport java.util.*;\\nimport java.util.logging.Level;\\nimport java.util.logging.Logger;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nimport static de.gwdg.metadataqa.marc.Utils.count;\\n\\npublic class MarcRecord implements Extractable, Validatable, Serializable {\\n\\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\\\\\d\\\\\\\\d\\\\\\\\d)\\\\\\\\$(.*)$\");\\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\\n\\n  private Leader leader;\\n  private MarcControlField control001;\\n  private MarcControlField control003;\\n  private MarcControlField control005;\\n  private List<Control006> control006 = new ArrayList<>();\\n  private List<Control007> control007 = new ArrayList<>();\\n  private Control008 control008;\\n  private List<DataField> datafields;\\n  private Map<String, List<DataField>> datafieldIndex;\\n  private Map<String, List<MarcControlField>> controlfieldIndex;\\n  Map<String, List<String>> mainKeyValuePairs;\\n  private List<ValidationError> validationErrors = null;\\n  private SchemaType schemaType = SchemaType.MARC21;\\n\\n  public enum RESOLVE {\\n    NONE,\\n    RESOLVE,\\n    BOTH;\\n  }\\n\\n  private List<String> unhandledTags;\\n\\n  public MarcRecord() {\\n    datafields = new ArrayList<>();\\n    datafieldIndex = new TreeMap<>();\\n    controlfieldIndex = new TreeMap<>();\\n    unhandledTags = new ArrayList<>();\\n  }\\n\\n  public MarcRecord(String id) {\\n    this();\\n    control001 = new Control001(id);\\n  }\\n\\n  public void addDataField(DataField dataField) {\\n    dataField.setMarcRecord(this);\\n    indexField(dataField);\\n    datafields.add(dataField);\\n  }\\n\\n  private void indexField(DataField dataField) {\\n    String tag = dataField.getTag();\\n    if (tag == null)\\n      logger.warning(\"null tag in indexField() \" + dataField);\\n\\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\\n    datafieldIndex.get(tag).add(dataField);\\n  }\\n\\n  public void addUnhandledTags(String tag) {\\n    unhandledTags.add(tag);\\n  }\\n\\n  public void setLeader(Leader leader) {\\n    this.leader = leader;\\n    leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader) {\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\\n    }\\n\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public Leader getLeader() {\\n    return leader;\\n  }\\n\\n  public Leader.Type getType() {\\n    return leader.getType();\\n  }\\n\\n  public MarcControlField getControl001() {\\n    return control001;\\n  }\\n\\n  public MarcRecord setControl001(MarcControlField control001) {\\n    this.control001 = control001;\\n    control001.setMarcRecord(this);\\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\\n    return this;\\n  }\\n\\n  public MarcControlField getControl003() {\\n    return control003;\\n  }\\n\\n  public void setControl003(MarcControlField control003) {\\n    this.control003 = control003;\\n    control003.setMarcRecord(this);\\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\\n  }\\n\\n  public MarcControlField getControl005() {\\n    return control005;\\n  }\\n\\n  public void setControl005(MarcControlField control005) {\\n    this.control005 = control005;\\n    control005.setMarcRecord(this);\\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\\n  }\\n\\n  public List<Control006> getControl006() {\\n    return control006;\\n  }\\n\\n  public void setControl006(Control006 control006) {\\n    this.control006.add(control006);\\n    control006.setMarcRecord(this);\\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\\n  }\\n\\n  public List<Control007> getControl007() {\\n    return control007;\\n  }\\n\\n  public void setControl007(Control007 control007) {\\n    this.control007.add(control007);\\n    control007.setMarcRecord(this);\\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\\n  }\\n\\n  public Control008 getControl008() {\\n    return control008;\\n  }\\n\\n  public void setControl008(Control008 control008) {\\n    this.control008 = control008;\\n    control008.setMarcRecord(this);\\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\\n  }\\n\\n  public String getId() {\\n    return control001.getContent();\\n  }\\n\\n  public String getId(boolean trim) {\\n    String id = getId();\\n    if (trim)\\n      id = id.trim();\\n    return id;\\n  }\\n\\n  public List<MarcControlField> getControlfields() {\\n    List<MarcControlField> list = new ArrayList<>();\\n    list.add(control001);\\n    if (control003 != null)\\n      list.add(control003);\\n    if (control005 != null)\\n      list.add(control005);\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public List<MarcControlField> getSimpleControlfields() {\\n    return Arrays.asList(\\n      control001, control003, control005\\n    );\\n  }\\n\\n  public List<MarcPositionalControlField> getPositionalControlfields() {\\n    List<MarcPositionalControlField> list = new ArrayList<>();\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public boolean hasDatafield(String tag) {\\n    return datafieldIndex.containsKey(tag);\\n  }\\n\\n  public List<DataField> getDatafield(String tag) {\\n    return datafieldIndex.getOrDefault(tag, null);\\n  }\\n\\n  public List<DataField> getDatafields() {\\n    return datafields;\\n  }\\n\\n  public boolean exists(String tag) {\\n    List<DataField> fields = getDatafield(tag);\\n    return (fields != null && !fields.isEmpty());\\n  }\\n\\n  public List<String> extract(String tag, String subfield) {\\n    return extract(tag, subfield, RESOLVE.NONE);\\n  }\\n\\n  /**\\n   * Extact field value\\n   * @param tag\\n   * @param subfield\\n   * @param doResolve\\n   * @return\\n   */\\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\\n    List<String> values = new ArrayList<>();\\n    List<DataField> fields = getDatafield(tag);\\n    if (fields != null && !fields.isEmpty()) {\\n      for (DataField field : fields) {\\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\\n          String value;\\n          Indicator indicator;\\n          if (subfield.equals(\"ind1\")) {\\n            value = field.getInd1();\\n            indicator = field.getDefinition().getInd1();\\n          } else {\\n            value = field.getInd2();\\n            indicator = field.getDefinition().getInd2();\\n          }\\n          if (indicator.getCode(value) == null) {\\n            values.add(value);\\n          } else {\\n            values.add(indicator.getCode(value).getLabel());\\n          }\\n        } else {\\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\\n          if (subfieldInstances != null) {\\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\\n              String value = null;\\n              switch (doResolve) {\\n                case RESOLVE: value = subfieldInstance.resolve(); break;\\n                case NONE: value = subfieldInstance.getValue(); break;\\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\\n              }\\n              values.add(value);\\n            }\\n          }\\n        }\\n      }\\n    }\\n    return values;\\n  }\\n\\n  public List<String> getUnhandledTags() {\\n    return unhandledTags;\\n  }\\n\\n  public String format() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.format());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsText() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsText());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsMarc() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsMarc());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatForIndex() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatForIndex());\\n    }\\n    return output.toString();\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs() {\\n    return getKeyValuePairs(SolrFieldType.MARC);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\\n  }\\n\\n  @Override\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\\n    return getKeyValuePairs(type, false, marcVersion);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\\n                                                    boolean withDeduplication,\\n                                                    MarcVersion marcVersion) {\\n    if (mainKeyValuePairs == null) {\\n      mainKeyValuePairs = new LinkedHashMap<>();\\n\\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\\n\\n      for (MarcControlField controlField : getControlfields())\\n        if (controlField != null)\\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\\n\\n      for (DataField field : datafields) {\\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\\n          String key = entry.getKey();\\n          List<String> values = entry.getValue();\\n          if (mainKeyValuePairs.containsKey(key)) {\\n            mainKeyValuePairs.put(\\n              key,\\n              mergeValues(\\n                new ArrayList<>(mainKeyValuePairs.get(key)),\\n                values,\\n                withDeduplication\\n              )\\n            );\\n          } else {\\n            mainKeyValuePairs.put(key, values);\\n          }\\n        }\\n      }\\n    }\\n\\n    return mainKeyValuePairs;\\n  }\\n\\n  private List<String> mergeValues(List<String> existingValues,\\n                                   List<String> values,\\n                                   boolean withDeduplication) {\\n    if (withDeduplication) {\\n      for (String value : values) {\\n        if (!existingValues.contains(value)) {\\n          existingValues.add(value);\\n        }\\n      }\\n    } else {\\n      existingValues.addAll(values);\\n    }\\n    return existingValues;\\n  }\\n\\n  public String asJson() {\\n    ObjectMapper mapper = new ObjectMapper();\\n\\n    Map<String, Object> map = new LinkedHashMap<>();\\n    map.put(\"leader\", leader.getContent());\\n\\n    for (MarcControlField field : getControlfields())\\n      if (field != null)\\n        map.put(field.getDefinition().getTag(), field.getContent());\\n\\n    for (DataField field : datafields) {\\n      if (field != null) {\\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\\n        fieldMap.put(\"ind1\", field.getInd1());\\n        fieldMap.put(\"ind2\", field.getInd2());\\n\\n        Map<String, String> subfields = new LinkedHashMap<>();\\n        for (MarcSubfield subfield : field.getSubfields()) {\\n          subfields.put(subfield.getCode(), subfield.getValue());\\n        }\\n        fieldMap.put(\"subfields\", subfields);\\n\\n        String tag = field.getDefinition() != null\\n          ? field.getDefinition().getTag()\\n          : field.getTag();\\n\\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\\n        ((ArrayList)map.get(tag)).add(fieldMap);\\n      }\\n    }\\n\\n    String json = null;\\n    try {\\n      json = mapper.writeValueAsString(map);\\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\\n+    } catch (JacksonException e) {\\n    } catch (JacksonException e) {\\n    }\\n\\n    return json;\\n  }\\n\\n  @Override\\n  public boolean validate(MarcVersion marcVersion) {\\n    return validate(marcVersion, false, null);\\n  }\\n\\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\\n    return validate(marcVersion, isSummary, null);\\n  }\\n\\n  public boolean validate(MarcVersion marcVersion,\\n                          boolean isSummary,\\n                          IgnorableFields ignorableFields) {\\n    validationErrors = new ArrayList<>();\\n    boolean isValidRecord = true;\\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\\n\\n    // TODO: use reflection to get all validator class\\n    // ValidatorResponse validatorResponse;\\n\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    isValidComponent = leader.validate(marcVersion);\\n    if (!isValidComponent) {\\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\\n      for (ValidationError leaderError : leaderErrors)\\n        if (leaderError.getRecordId() == null)\\n          leaderError.setRecordId(getId());\\n      validationErrors.addAll(leaderErrors);\\n      isValidRecord = isValidComponent;\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\\n    if (!unhandledTags.isEmpty()) {\\n      if (isSummary) {\\n        for (String tag : unhandledTags) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n        }\\n      } else {\\n        Map<String, Integer> tags = new LinkedHashMap<>();\\n        for (String tag : unhandledTags)\\n          Utils.count(tag, tags);\\n\\n        List<String> unhandledTagsList = new ArrayList<>();\\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\\n          String tag = entry.getKey();\\n          if (entry.getValue() == 1)\\n            unhandledTagsList.add(tag);\\n          else\\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\\n        }\\n        for (String tag : unhandledTagsList) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n        }\\n      }\\n\\n      isValidRecord = false;\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    for (MarcControlField controlField : getControlfields()) {\\n      if (controlField != null) {\\n        isValidComponent = controlField.validate(marcVersion);\\n        if (!isValidComponent) {\\n          validationErrors.addAll(controlField.getValidationErrors());\\n          isValidRecord = isValidComponent;\\n        }\\n      }\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean validateDatafields(MarcVersion marcVersion,\\n                                     boolean isValidRecord,\\n                                     IgnorableFields ignorableFields) {\\n    ValidatorResponse validatorResponse;\\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\\n    for (DataField field : datafields) {\\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\\n        count(field.getDefinition(), repetitionCounter);\\n        if (!field.validate(marcVersion)) {\\n          isValidRecord = false;\\n          validationErrors.addAll(field.getValidationErrors());\\n        }\\n\\n        validatorResponse = ClassificationReferenceValidator.validate(field);\\n        if (!validatorResponse.isValid()) {\\n          validationErrors.addAll(validatorResponse.getValidationErrors());\\n          isValidRecord = false;\\n        }\\n      }\\n    }\\n\\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\\n      DataFieldDefinition fieldDefinition = entry.getKey();\\n      Integer count = entry.getValue();\\n      if (count > 1\\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\\n          ValidationErrorType.FIELD_NONREPEATABLE,\\n          String.format(\"there are %d instances\", count),\\n          fieldDefinition.getDescriptionUrl()\\n        ));\\n        isValidRecord = false;\\n      }\\n    }\\n    return isValidRecord;\\n  }\\n\\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\\n    if (ignorableFields == null)\\n      return false;\\n    return ignorableFields.contains(tag);\\n  }\\n\\n  @Override\\n  public List<ValidationError> getValidationErrors() {\\n    return validationErrors;\\n  }\\n\\n  public List<String> search(String path, String query) {\\n    List<String> results = new ArrayList<>();\\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\\n      searchControlField(path, query, results);\\n    } else if (path.startsWith(\"006\")) {\\n      for (Control006 instance : control006)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"007\")) {\\n      for (Control007 instance : control007)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"008\")) {\\n      searchPositionalControlField(control008, path, query, results);\\n    } else {\\n      Matcher matcher = dataFieldPattern.matcher(path);\\n      if (matcher.matches()) {\\n        String tag = matcher.group(1);\\n        String subfieldCode = matcher.group(2);\\n        if (datafieldIndex.containsKey(tag)) {\\n          for (DataField field : datafieldIndex.get(tag)) {\\n            if (searchDatafield(query, results, subfieldCode, field)) break;\\n          }\\n        }\\n      }\\n      matcher = positionalPattern.matcher(path);\\n      if (matcher.matches()) {\\n        searchByPosition(query, results, matcher);\\n      }\\n    }\\n    return results;\\n  }\\n\\n  public List<String> select(MarcSpec selector) {\\n    List<String> results = new ArrayList<>();\\n    if (selector.getFieldTag().equals(\"LDR\")) {\\n      if (selector.hasRangeSelector()) {\\n        results.add(selector.selectRange(leader.getContent()));\\n      } else {\\n        results.add(leader.getContent());\\n      }\\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\n          continue;\\n        if (!simpleControlTags.contains(field.definition.getTag())) {\\n          // TODO: check control subfields\\n        }\\n        if (selector.hasRangeSelector()) {\\n          results.add(selector.selectRange(field.getContent()));\\n        } else {\\n          results.add(field.getContent());\\n        }\\n      }\\n\\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\n          continue;\\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n          if (subfields == null)\\n            continue;\\n          for (MarcSubfield subfield : subfields) {\\n            results.add(subfield.getValue());\\n          }\\n        }\\n      }\\n    }\\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\\n      if (selector.getCharStart() != null) {\\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\\n        results.add(control008.getMap().get(definition));\\n      } else {\\n        results.add(control008.getContent());\\n      }\\n    }\\n    return results;\\n  }\\n\\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\\n    String tag = matcher.group(1);\\n    String position = matcher.group(2);\\n    int start;\\n    int end;\\n    if (position.contains(\"-\")) {\\n      String[] parts = position.split(\"-\", 2);\\n      start = Integer.parseInt(parts[0]);\\n      end = Integer.parseInt(parts[1]);\\n    } else {\\n      start = Integer.parseInt(position);\\n      end = start + 1;\\n    }\\n    String content = null;\\n    if (tag.equals(\"Leader\")) {\\n      content = leader.getLeaderString();\\n    } else {\\n      MarcControlField controlField = null;\\n      // TODO: fix it!\\n      switch (tag) {\\n        case \"006\": controlField = control006.get(0); break;\\n        case \"007\": controlField = control007.get(0); break;\\n        case \"008\": controlField = control008; break;\\n        default: break;\\n      }\\n      if (controlField != null)\\n        content = controlField.getContent();\\n    }\\n\\n    if (content != null && content.substring(start, end).equals(query)) {\\n      results.add(content.substring(start, end));\\n    }\\n  }\\n\\n  private boolean searchDatafield(String query, List<String> results,\\n                                  String subfieldCode, DataField field) {\\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\\n      results.add(field.getInd1());\\n      return true;\\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\\n      results.add(field.getInd2());\\n      return true;\\n    } else {\\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n      if (subfields != null) {\\n        for (MarcSubfield subfield : subfields) {\\n          if (subfield.getValue().equals(query)) {\\n            results.add(subfield.getValue());\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  private void searchControlField(String path, String query, List<String> results) {\\n    MarcControlField controlField = null;\\n    switch (path) {\\n      case \"001\": controlField = control001; break;\\n      case \"003\": controlField = control003; break;\\n      case \"005\": controlField = control005; break;\\n      default: break;\\n    }\\n    if (controlField != null && controlField.getContent().equals(query))\\n      results.add(controlField.getContent());\\n  }\\n\\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\\n                                            String path, String query, List<String> results) {\\n    if (controlField != null) {\\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\\n        if (subfield.getId().equals(path)) {\\n          if (map.get(subfield).equals(query))\\n            results.add(map.get(subfield));\\n          break;\\n        }\\n      }\\n    }\\n  }\\n\\n  public List<DataField> getAuthorityFields() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"100\", \"110\", \"111\", \"130\",\\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\\n      \"800\", \"810\", \"811\", \"830\"\\n    );\\n    for (String tag : tags) {\\n      List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n    }\\n    return subjects;\\n  }\\n\\n  public List<DataField> getSubjects() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\\n    );\\n    for (String tag : tags) {\\n      List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n    }\\n    return subjects;\\n  }\\n\\n  public List<DataField> getSubject6xx() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\\n    for (String tag : tags) {\\n      List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n    }\\n    return subjects;\\n  }\\n\\n  public void setField(String tag, String content) {\\n    setField(tag, content, MarcVersion.MARC21);\\n  }\\n\\n  public void setField(String tag, String content, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\\n      tag = UnimarcConverter.tagFromUnimarc(tag);\\n    }\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n    } else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n      }\\n\\n      DataField dataField = new DataField(tag, content, marcVersion);\\n      addDataField(dataField);\\n    }\\n  }\\n\\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n    } else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n      }\\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\\n    }\\n  }\\n\\n  public SchemaType getSchemaType() {\\n    return schemaType;\\n  }\\n\\n  public void setSchemaType(SchemaType schemaType) {\\n    this.schemaType = schemaType;\\n  }\\n}\\n'}",
            "error": "",
            "span_id": 3486419904694005609
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,3 +430,3 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n@@ -831,2 +831,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": "{'src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java': 'package de.gwdg.metadataqa.marc.dao;\\n\\nimport com.fasterxml.jackson.core.JsonProcessingException;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport de.gwdg.metadataqa.marc.Extractable;\\nimport de.gwdg.metadataqa.marc.MarcFactory;\\nimport de.gwdg.metadataqa.marc.MarcSubfield;\\nimport de.gwdg.metadataqa.marc.Utils;\\nimport de.gwdg.metadataqa.marc.Validatable;\\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\\nimport de.gwdg.metadataqa.marc.definition.*;\\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\\n\\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\\n\\nimport java.io.Serializable;\\nimport java.util.*;\\nimport java.util.logging.Level;\\nimport java.util.logging.Logger;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nimport static de.gwdg.metadataqa.marc.Utils.count;\\n\\npublic class MarcRecord implements Extractable, Validatable, Serializable {\\n\\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\\\\\d\\\\\\\\d\\\\\\\\d)\\\\\\\\$(.*)$\");\\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\\n\\n  private Leader leader;\\n  private MarcControlField control001;\\n  private MarcControlField control003;\\n  private MarcControlField control005;\\n  private List<Control006> control006 = new ArrayList<>();\\n  private List<Control007> control007 = new ArrayList<>();\\n  private Control008 control008;\\n  private List<DataField> datafields;\\n  private Map<String, List<DataField>> datafieldIndex;\\n  private Map<String, List<MarcControlField>> controlfieldIndex;\\n  Map<String, List<String>> mainKeyValuePairs;\\n  private List<ValidationError> validationErrors = null;\\n  private SchemaType schemaType = SchemaType.MARC21;\\n\\n  public enum RESOLVE {\\n    NONE,\\n    RESOLVE,\\n    BOTH;\\n  }\\n\\n  private List<String> unhandledTags;\\n\\n  public MarcRecord() {\\n    datafields = new ArrayList<>();\\n    datafieldIndex = new TreeMap<>();\\n    controlfieldIndex = new TreeMap<>();\\n    unhandledTags = new ArrayList<>();\\n  }\\n\\n  public MarcRecord(String id) {\\n    this();\\n    control001 = new Control001(id);\\n  }\\n\\n  public void addDataField(DataField dataField) {\\n    dataField.setMarcRecord(this);\\n    indexField(dataField);\\n    datafields.add(dataField);\\n  }\\n\\n  private void indexField(DataField dataField) {\\n    String tag = dataField.getTag();\\n    if (tag == null)\\n      logger.warning(\"null tag in indexField() \" + dataField);\\n\\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\\n    datafieldIndex.get(tag).add(dataField);\\n  }\\n\\n  public void addUnhandledTags(String tag) {\\n    unhandledTags.add(tag);\\n  }\\n\\n  public void setLeader(Leader leader) {\\n    this.leader = leader;\\n    leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader) {\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\\n    }\\n\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public Leader getLeader() {\\n    return leader;\\n  }\\n\\n  public Leader.Type getType() {\\n    return leader.getType();\\n  }\\n\\n  public MarcControlField getControl001() {\\n    return control001;\\n  }\\n\\n  public MarcRecord setControl001(MarcControlField control001) {\\n    this.control001 = control001;\\n    control001.setMarcRecord(this);\\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\\n    return this;\\n  }\\n\\n  public MarcControlField getControl003() {\\n    return control003;\\n  }\\n\\n  public void setControl003(MarcControlField control003) {\\n    this.control003 = control003;\\n    control003.setMarcRecord(this);\\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\\n  }\\n\\n  public MarcControlField getControl005() {\\n    return control005;\\n  }\\n\\n  public void setControl005(MarcControlField control005) {\\n    this.control005 = control005;\\n    control005.setMarcRecord(this);\\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\\n  }\\n\\n  public List<Control006> getControl006() {\\n    return control006;\\n  }\\n\\n  public void setControl006(Control006 control006) {\\n    this.control006.add(control006);\\n    control006.setMarcRecord(this);\\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\\n  }\\n\\n  public List<Control007> getControl007() {\\n    return control007;\\n  }\\n\\n  public void setControl007(Control007 control007) {\\n    this.control007.add(control007);\\n    control007.setMarcRecord(this);\\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\\n  }\\n\\n  public Control008 getControl008() {\\n    return control008;\\n  }\\n\\n  public void setControl008(Control008 control008) {\\n    this.control008 = control008;\\n    control008.setMarcRecord(this);\\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\\n  }\\n\\n  public String getId() {\\n    return control001.getContent();\\n  }\\n\\n  public String getId(boolean trim) {\\n    String id = getId();\\n    if (trim)\\n      id = id.trim();\\n    return id;\\n  }\\n\\n  public List<MarcControlField> getControlfields() {\\n    List<MarcControlField> list = new ArrayList<>();\\n    list.add(control001);\\n    if (control003 != null)\\n      list.add(control003);\\n    if (control005 != null)\\n      list.add(control005);\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public List<MarcControlField> getSimpleControlfields() {\\n    return Arrays.asList(\\n      control001, control003, control005\\n    );\\n  }\\n\\n  public List<MarcPositionalControlField> getPositionalControlfields() {\\n    List<MarcPositionalControlField> list = new ArrayList<>();\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public boolean hasDatafield(String tag) {\\n    return datafieldIndex.containsKey(tag);\\n  }\\n\\n  public List<DataField> getDatafield(String tag) {\\n    return datafieldIndex.getOrDefault(tag, null);\\n  }\\n\\n  public List<DataField> getDatafields() {\\n    return datafields;\\n  }\\n\\n  public boolean exists(String tag) {\\n    List<DataField> fields = getDatafield(tag);\\n    return (fields != null && !fields.isEmpty());\\n  }\\n\\n  public List<String> extract(String tag, String subfield) {\\n    return extract(tag, subfield, RESOLVE.NONE);\\n  }\\n\\n  /**\\n   * Extact field value\\n   * @param tag\\n   * @param subfield\\n   * @param doResolve\\n   * @return\\n   */\\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\\n    List<String> values = new ArrayList<>();\\n    List<DataField> fields = getDatafield(tag);\\n    if (fields != null && !fields.isEmpty()) {\\n      for (DataField field : fields) {\\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\\n          String value;\\n          Indicator indicator;\\n          if (subfield.equals(\"ind1\")) {\\n            value = field.getInd1();\\n            indicator = field.getDefinition().getInd1();\\n          } else {\\n            value = field.getInd2();\\n            indicator = field.getDefinition().getInd2();\\n          }\\n          if (indicator.getCode(value) == null) {\\n            values.add(value);\\n          } else {\\n            values.add(indicator.getCode(value).getLabel());\\n          }\\n        } else {\\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\\n          if (subfieldInstances != null) {\\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\\n              String value = null;\\n              switch (doResolve) {\\n                case RESOLVE: value = subfieldInstance.resolve(); break;\\n                case NONE: value = subfieldInstance.getValue(); break;\\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\\n              }\\n            values.add(value);\\n            }\\n          }\\n        }\\n      }\\n    }\\n    return values;\\n  }\\n\\n  public List<String> getUnhandledTags() {\\n    return unhandledTags;\\n  }\\n\\n  public String format() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.format());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsText() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsText());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsMarc() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsMarc());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatForIndex() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatForIndex());\\n    }\\n    return output.toString();\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs() {\\n    return getKeyValuePairs(SolrFieldType.MARC);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\\n  }\\n\\n  @Override\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\\n    return getKeyValuePairs(type, false, marcVersion);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\\n                                                    boolean withDeduplication,\\n                                                    MarcVersion marcVersion) {\\n    if (mainKeyValuePairs == null) {\\n      mainKeyValuePairs = new LinkedHashMap<>();\\n\\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\\n\\n      for (MarcControlField controlField : getControlfields())\\n        if (controlField != null)\\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\\n\\n    for (DataField field : datafields) {\\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\\n          String key = entry.getKey();\\n          List<String> values = entry.getValue();\\n          if (mainKeyValuePairs.containsKey(key)) {\\n            mainKeyValuePairs.put(\\n              key,\\n              mergeValues(\\n                new ArrayList<>(mainKeyValuePairs.get(key)),\\n                values,\\n                withDeduplication\\n              )\\n            );\\n          } else {\\n            mainKeyValuePairs.put(key, values);\\n          }\\n        }\\n      }\\n    }\\n\\n    return mainKeyValuePairs;\\n  }\\n\\n  private List<String> mergeValues(List<String> existingValues,\\n                                   List<String> values,\\n                                   boolean withDeduplication) {\\n    if (withDeduplication) {\\n      for (String value : values) {\\n        if (!existingValues.contains(value)) {\\n          existingValues.add(value);\\n        }\\n      }\\n    } else {\\n      existingValues.addAll(values);\\n    }\\n    return existingValues;\\n  }\\n\\n  public String asJson() {\\n    ObjectMapper mapper = new ObjectMapper();\\n\\n    Map<String, Object> map = new LinkedHashMap<>();\\n    map.put(\"leader\", leader.getContent());\\n\\n    for (MarcControlField field : getControlfields())\\n      if (field != null)\\n        map.put(field.getDefinition().getTag(), field.getContent());\\n\\n    for (DataField field : datafields) {\\n      if (field != null) {\\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\\n        fieldMap.put(\"ind1\", field.getInd1());\\n        fieldMap.put(\"ind2\", field.getInd2());\\n\\n        Map<String, String> subfields = new LinkedHashMap<>();\\n        for (MarcSubfield subfield : field.getSubfields()) {\\n          subfields.put(subfield.getCode(), subfield.getValue());\\n        }\\n        fieldMap.put(\"subfields\", subfields);\\n\\n        String tag = field.getDefinition() != null\\n          ? field.getDefinition().getTag()\\n          : field.getTag();\\n\\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\\n        ((ArrayList)map.get(tag)).add(fieldMap);\\n      }\\n    }\\n\\n    String json = null;\\n    try {\\n      json = mapper.writeValueAsString(map);\\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\\n+    } catch (JacksonException e) {\\n}\\n\\n    return json;\\n}\\n\\n@Override\\n  public boolean validate(MarcVersion marcVersion) {\\n    return validate(marcVersion, false, null);\\n}\\n\\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\\n    return validate(marcVersion, isSummary, null);\\n}\\n\\n  public boolean validate(MarcVersion marcVersion,\\n                          boolean isSummary,\\n                          IgnorableFields ignorableFields) {\\n    validationErrors = new ArrayList<>();\\n    boolean isValidRecord = true;\\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\\n\\n    // TODO: use reflection to get all validator class\\n    // ValidatorResponse validatorResponse;\\n\\n    return isValidRecord;\\n}\\n\\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    isValidComponent = leader.validate(marcVersion);\\n    if (!isValidComponent) {\\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\\n      for (ValidationError leaderError : leaderErrors)\\n        if (leaderError.getRecordId() == null)\\n          leaderError.setRecordId(getId());\\n      validationErrors.addAll(leaderErrors);\\n      isValidRecord = isValidComponent;\\n}\\n    return isValidRecord;\\n}\\n\\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\\n    if (!unhandledTags.isEmpty()) {\\n      if (isSummary) {\\n        for (String tag : unhandledTags) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n}\\n} else {\\n        Map<String, Integer> tags = new LinkedHashMap<>();\\n        for (String tag : unhandledTags)\\n          Utils.count(tag, tags);\\n\\n        List<String> unhandledTagsList = new ArrayList<>();\\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\\n          String tag = entry.getKey();\\n          if (entry.getValue() == 1)\\n            unhandledTagsList.add(tag);\\nelse\\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\\n}\\n        for (String tag : unhandledTagsList) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n}\\n        }\\n\\n      isValidRecord = false;\\n}\\n    return isValidRecord;\\n}\\n\\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    for (MarcControlField controlField : getControlfields()) {\\n      if (controlField != null) {\\n        isValidComponent = controlField.validate(marcVersion);\\n    if (!isValidComponent) {\\n          validationErrors.addAll(controlField.getValidationErrors());\\n      isValidRecord = isValidComponent;\\n}\\n        }\\n      }\\n    return isValidRecord;\\n}\\n\\n  private boolean validateDatafields(MarcVersion marcVersion,\\n                                     boolean isValidRecord,\\n                          IgnorableFields ignorableFields) {\\n    ValidatorResponse validatorResponse;\\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\\n    for (DataField field : datafields) {\\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\\n        count(field.getDefinition(), repetitionCounter);\\n        if (!field.validate(marcVersion)) {\\n      isValidRecord = false;\\n          validationErrors.addAll(field.getValidationErrors());\\n}\\n\\n        validatorResponse = ClassificationReferenceValidator.validate(field);\\n        if (!validatorResponse.isValid()) {\\n          validationErrors.addAll(validatorResponse.getValidationErrors());\\n      isValidRecord = false;\\n}\\n        }\\n      }\\n\\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\\n      DataFieldDefinition fieldDefinition = entry.getKey();\\n      Integer count = entry.getValue();\\n      if (count > 1\\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\\n          ValidationErrorType.FIELD_NONREPEATABLE,\\n          String.format(\"there are %d instances\", count),\\n          fieldDefinition.getDescriptionUrl()\\n));\\n      isValidRecord = false;\\n}\\n      }\\n    return isValidRecord;\\n}\\n\\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\\n    if (ignorableFields == null)\\n      return false;\\n    return ignorableFields.contains(tag);\\n}\\n\\n@Override\\n  public List<ValidationError> getValidationErrors() {\\n    return validationErrors;\\n}\\n\\n  public List<String> search(String path, String query) {\\n    List<String> results = new ArrayList<>();\\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\\n      searchControlField(path, query, results);\\n    } else if (path.startsWith(\"006\")) {\\n      for (Control006 instance : control006)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"007\")) {\\n      for (Control007 instance : control007)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"008\")) {\\n      searchPositionalControlField(control008, path, query, results);\\n} else {\\n      Matcher matcher = dataFieldPattern.matcher(path);\\n      if (matcher.matches()) {\\n        String tag = matcher.group(1);\\n        String subfieldCode = matcher.group(2);\\n        if (datafieldIndex.containsKey(tag)) {\\n          for (DataField field : datafieldIndex.get(tag)) {\\n            if (searchDatafield(query, results, subfieldCode, field)) break;\\n}\\n          }\\n        }\\n      matcher = positionalPattern.matcher(path);\\n      if (matcher.matches()) {\\n        searchByPosition(query, results, matcher);\\n}\\n      }\\n    return results;\\n}\\n\\n  public List<String> select(MarcSpec selector) {\\n    List<String> results = new ArrayList<>();\\n    if (selector.getFieldTag().equals(\"LDR\")) {\\n      if (selector.hasRangeSelector()) {\\n        results.add(selector.selectRange(leader.getContent()));\\n} else {\\n        results.add(leader.getContent());\\n}\\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\ncontinue;\\n        if (!simpleControlTags.contains(field.definition.getTag())) {\\n          // TODO: check control subfields\\n}\\n      if (selector.hasRangeSelector()) {\\n          results.add(selector.selectRange(field.getContent()));\\n} else {\\n          results.add(field.getContent());\\n}\\n        }\\n\\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\ncontinue;\\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n          if (subfields == null)\\ncontinue;\\n          for (MarcSubfield subfield : subfields) {\\n            results.add(subfield.getValue());\\n}\\n          }\\n        }\\n      }\\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\\n      if (selector.getCharStart() != null) {\\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\\n        results.add(control008.getMap().get(definition));\\n} else {\\n        results.add(control008.getContent());\\n}\\n      }\\n    return results;\\n}\\n\\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\\n        String tag = matcher.group(1);\\n    String position = matcher.group(2);\\nint start;\\nint end;\\n    if (position.contains(\"-\")) {\\n      String[] parts = position.split(\"-\", 2);\\n      start = Integer.parseInt(parts[0]);\\n      end = Integer.parseInt(parts[1]);\\n} else {\\n      start = Integer.parseInt(position);\\n      end = start + 1;\\n}\\n    String content = null;\\n    if (tag.equals(\"Leader\")) {\\n      content = leader.getLeaderString();\\n} else {\\n      MarcControlField controlField = null;\\n      // TODO: fix it!\\n      switch (tag) {\\n        case \"006\": controlField = control006.get(0); break;\\n        case \"007\": controlField = control007.get(0); break;\\n        case \"008\": controlField = control008; break;\\n        default: break;\\n}\\n        if (controlField != null)\\n        content = controlField.getContent();\\n}\\n\\n    if (content != null && content.substring(start, end).equals(query)) {\\n      results.add(content.substring(start, end));\\n}\\n    }\\n\\n  private boolean searchDatafield(String query, List<String> results,\\n                                  String subfieldCode, DataField field) {\\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\\n      results.add(field.getInd1());\\n      return true;\\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\\n      results.add(field.getInd2());\\n      return true;\\n} else {\\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n      if (subfields != null) {\\n          for (MarcSubfield subfield : subfields) {\\n          if (subfield.getValue().equals(query)) {\\n            results.add(subfield.getValue());\\n      return true;\\n}\\n          }\\n        }\\n      }\\n      return false;\\n}\\n\\n  private void searchControlField(String path, String query, List<String> results) {\\n      MarcControlField controlField = null;\\n    switch (path) {\\n      case \"001\": controlField = control001; break;\\n      case \"003\": controlField = control003; break;\\n      case \"005\": controlField = control005; break;\\n        default: break;\\n}\\n    if (controlField != null && controlField.getContent().equals(query))\\n      results.add(controlField.getContent());\\n}\\n\\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\\n                                            String path, String query, List<String> results) {\\n      if (controlField != null) {\\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\\n        if (subfield.getId().equals(path)) {\\n          if (map.get(subfield).equals(query))\\n            results.add(map.get(subfield));\\nbreak;\\n}\\n        }\\n      }\\n    }\\n\\n  public List<DataField> getAuthorityFields() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"100\", \"110\", \"111\", \"130\",\\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\\n      \"800\", \"810\", \"811\", \"830\"\\n);\\n    for (String tag : tags) {\\n    List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n}\\n    return subjects;\\n}\\n\\n  public List<DataField> getSubjects() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\\n);\\n    for (String tag : tags) {\\n    List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n}\\n    return subjects;\\n}\\n\\n  public List<DataField> getSubject6xx() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\\n    for (String tag : tags) {\\n    List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n}\\n    return subjects;\\n}\\n\\n  public void setField(String tag, String content) {\\n    setField(tag, content, MarcVersion.MARC21);\\n}\\n\\n  public void setField(String tag, String content, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\\n      tag = UnimarcConverter.tagFromUnimarc(tag);\\n}\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n} else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n}\\n\\n      DataField dataField = new DataField(tag, content, marcVersion);\\n      addDataField(dataField);\\n}\\n    }\\n\\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n} else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n}\\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\\n}\\n    }\\n\\n  public SchemaType getSchemaType() {\\n    return schemaType;\\n}\\n\\n  public void setSchemaType(SchemaType schemaType) {\\n    this.schemaType = schemaType;\\n}\\n  }'}",
            "error": "",
            "span_id": 857241100235744520
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,3 +430,3 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n@@ -831,2 +831,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": "{'src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java': 'package de.gwdg.metadataqa.marc.dao;\\n\\nimport com.fasterxml.jackson.core.JsonProcessingException;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport de.gwdg.metadataqa.marc.Extractable;\\nimport de.gwdg.metadataqa.marc.MarcFactory;\\nimport de.gwdg.metadataqa.marc.MarcSubfield;\\nimport de.gwdg.metadataqa.marc.Utils;\\nimport de.gwdg.metadataqa.marc.Validatable;\\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\\nimport de.gwdg.metadataqa.marc.definition.*;\\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\\n\\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\\n\\nimport java.io.Serializable;\\nimport java.util.*;\\nimport java.util.logging.Level;\\nimport java.util.logging.Logger;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nimport static de.gwdg.metadataqa.marc.Utils.count;\\n\\npublic class MarcRecord implements Extractable, Validatable, Serializable {\\n\\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\\\\\d\\\\\\\\d\\\\\\\\d)\\\\\\\\$(.*)$\");\\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\\n\\n  private Leader leader;\\n  private MarcControlField control001;\\n  private MarcControlField control003;\\n  private MarcControlField control005;\\n  private List<Control006> control006 = new ArrayList<>();\\n  private List<Control007> control007 = new ArrayList<>();\\n  private Control008 control008;\\n  private List<DataField> datafields;\\n  private Map<String, List<DataField>> datafieldIndex;\\n  private Map<String, List<MarcControlField>> controlfieldIndex;\\n  Map<String, List<String>> mainKeyValuePairs;\\n  private List<ValidationError> validationErrors = null;\\n  private SchemaType schemaType = SchemaType.MARC21;\\n\\n  public enum RESOLVE {\\n    NONE,\\n    RESOLVE,\\n    BOTH;\\n  }\\n\\n  private List<String> unhandledTags;\\n\\n  public MarcRecord() {\\n    datafields = new ArrayList<>();\\n    datafieldIndex = new TreeMap<>();\\n    controlfieldIndex = new TreeMap<>();\\n    unhandledTags = new ArrayList<>();\\n  }\\n\\n  public MarcRecord(String id) {\\n    this();\\n    control001 = new Control001(id);\\n  }\\n\\n  public void addDataField(DataField dataField) {\\n    dataField.setMarcRecord(this);\\n    indexField(dataField);\\n    datafields.add(dataField);\\n  }\\n\\n  private void indexField(DataField dataField) {\\n    String tag = dataField.getTag();\\n    if (tag == null)\\n      logger.warning(\"null tag in indexField() \" + dataField);\\n\\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\\n    datafieldIndex.get(tag).add(dataField);\\n  }\\n\\n  public void addUnhandledTags(String tag) {\\n    unhandledTags.add(tag);\\n  }\\n\\n  public void setLeader(Leader leader) {\\n    this.leader = leader;\\n    leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader) {\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public void setLeader(String leader, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\\n    }\\n\\n    this.leader = new Leader(leader);\\n    this.leader.setMarcRecord(this);\\n  }\\n\\n  public Leader getLeader() {\\n    return leader;\\n  }\\n\\n  public Leader.Type getType() {\\n    return leader.getType();\\n  }\\n\\n  public MarcControlField getControl001() {\\n    return control001;\\n  }\\n\\n  public MarcRecord setControl001(MarcControlField control001) {\\n    this.control001 = control001;\\n    control001.setMarcRecord(this);\\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\\n    return this;\\n  }\\n\\n  public MarcControlField getControl003() {\\n    return control003;\\n  }\\n\\n  public void setControl003(MarcControlField control003) {\\n    this.control003 = control003;\\n    control003.setMarcRecord(this);\\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\\n  }\\n\\n  public MarcControlField getControl005() {\\n    return control005;\\n  }\\n\\n  public void setControl005(MarcControlField control005) {\\n    this.control005 = control005;\\n    control005.setMarcRecord(this);\\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\\n  }\\n\\n  public List<Control006> getControl006() {\\n    return control006;\\n  }\\n\\n  public void setControl006(Control006 control006) {\\n    this.control006.add(control006);\\n    control006.setMarcRecord(this);\\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\\n  }\\n\\n  public List<Control007> getControl007() {\\n    return control007;\\n  }\\n\\n  public void setControl007(Control007 control007) {\\n    this.control007.add(control007);\\n    control007.setMarcRecord(this);\\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\\n  }\\n\\n  public Control008 getControl008() {\\n    return control008;\\n  }\\n\\n  public void setControl008(Control008 control008) {\\n    this.control008 = control008;\\n    control008.setMarcRecord(this);\\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\\n  }\\n\\n  public String getId() {\\n    return control001.getContent();\\n  }\\n\\n  public String getId(boolean trim) {\\n    String id = getId();\\n    if (trim)\\n      id = id.trim();\\n    return id;\\n  }\\n\\n  public List<MarcControlField> getControlfields() {\\n    List<MarcControlField> list = new ArrayList<>();\\n    list.add(control001);\\n    if (control003 != null)\\n      list.add(control003);\\n    if (control005 != null)\\n      list.add(control005);\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public List<MarcControlField> getSimpleControlfields() {\\n    return Arrays.asList(\\n      control001, control003, control005\\n    );\\n  }\\n\\n  public List<MarcPositionalControlField> getPositionalControlfields() {\\n    List<MarcPositionalControlField> list = new ArrayList<>();\\n    if (control006 != null && !control006.isEmpty())\\n      list.addAll(control006);\\n    if (control007 != null && !control007.isEmpty())\\n      list.addAll(control007);\\n    if (control008 != null)\\n      list.add(control008);\\n    return list;\\n  }\\n\\n  public boolean hasDatafield(String tag) {\\n    return datafieldIndex.containsKey(tag);\\n  }\\n\\n  public List<DataField> getDatafield(String tag) {\\n    return datafieldIndex.getOrDefault(tag, null);\\n  }\\n\\n  public List<DataField> getDatafields() {\\n    return datafields;\\n  }\\n\\n  public boolean exists(String tag) {\\n    List<DataField> fields = getDatafield(tag);\\n    return (fields != null && !fields.isEmpty());\\n  }\\n\\n  public List<String> extract(String tag, String subfield) {\\n    return extract(tag, subfield, RESOLVE.NONE);\\n  }\\n\\n  /**\\n   * Extact field value\\n   * @param tag\\n   * @param subfield\\n   * @param doResolve\\n   * @return\\n   */\\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\\n    List<String> values = new ArrayList<>();\\n    List<DataField> fields = getDatafield(tag);\\n    if (fields != null && !fields.isEmpty()) {\\n      for (DataField field : fields) {\\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\\n          String value;\\n          Indicator indicator;\\n          if (subfield.equals(\"ind1\")) {\\n            value = field.getInd1();\\n            indicator = field.getDefinition().getInd1();\\n          } else {\\n            value = field.getInd2();\\n            indicator = field.getDefinition().getInd2();\\n          }\\n          if (indicator.getCode(value) == null) {\\n            values.add(value);\\n          } else {\\n            values.add(indicator.getCode(value).getLabel());\\n          }\\n        } else {\\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\\n          if (subfieldInstances != null) {\\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\\n              String value = null;\\n              switch (doResolve) {\\n                case RESOLVE: value = subfieldInstance.resolve(); break;\\n                case NONE: value = subfieldInstance.getValue(); break;\\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\\n              }\\n            values.add(value);\\n            }\\n          }\\n        }\\n      }\\n    }\\n    return values;\\n  }\\n\\n  public List<String> getUnhandledTags() {\\n    return unhandledTags;\\n  }\\n\\n  public String format() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.format());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsText() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsText());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatAsMarc() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatAsMarc());\\n    }\\n    return output.toString();\\n  }\\n\\n  public String formatForIndex() {\\n    StringBuffer output = new StringBuffer();\\n    for (DataField field : datafields) {\\n      output.append(field.formatForIndex());\\n    }\\n    return output.toString();\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs() {\\n    return getKeyValuePairs(SolrFieldType.MARC);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\\n  }\\n\\n  @Override\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\\n    return getKeyValuePairs(type, false, marcVersion);\\n  }\\n\\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\\n                                                    boolean withDeduplication,\\n                                                    MarcVersion marcVersion) {\\n    if (mainKeyValuePairs == null) {\\n      mainKeyValuePairs = new LinkedHashMap<>();\\n\\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\\n\\n      for (MarcControlField controlField : getControlfields())\\n        if (controlField != null)\\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\\n\\n    for (DataField field : datafields) {\\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\\n          String key = entry.getKey();\\n          List<String> values = entry.getValue();\\n          if (mainKeyValuePairs.containsKey(key)) {\\n            mainKeyValuePairs.put(\\n              key,\\n              mergeValues(\\n                new ArrayList<>(mainKeyValuePairs.get(key)),\\n                values,\\n                withDeduplication\\n              )\\n            );\\n          } else {\\n            mainKeyValuePairs.put(key, values);\\n          }\\n        }\\n      }\\n    }\\n\\n    return mainKeyValuePairs;\\n  }\\n\\n  private List<String> mergeValues(List<String> existingValues,\\n                                   List<String> values,\\n                                   boolean withDeduplication) {\\n    if (withDeduplication) {\\n      for (String value : values) {\\n        if (!existingValues.contains(value)) {\\n          existingValues.add(value);\\n        }\\n      }\\n    } else {\\n      existingValues.addAll(values);\\n    }\\n    return existingValues;\\n  }\\n\\n  public String asJson() {\\n    ObjectMapper mapper = new ObjectMapper();\\n\\n    Map<String, Object> map = new LinkedHashMap<>();\\n    map.put(\"leader\", leader.getContent());\\n\\n    for (MarcControlField field : getControlfields())\\n      if (field != null)\\n        map.put(field.getDefinition().getTag(), field.getContent());\\n\\n    for (DataField field : datafields) {\\n      if (field != null) {\\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\\n        fieldMap.put(\"ind1\", field.getInd1());\\n        fieldMap.put(\"ind2\", field.getInd2());\\n\\n        Map<String, String> subfields = new LinkedHashMap<>();\\n        for (MarcSubfield subfield : field.getSubfields()) {\\n          subfields.put(subfield.getCode(), subfield.getValue());\\n        }\\n        fieldMap.put(\"subfields\", subfields);\\n\\n        String tag = field.getDefinition() != null\\n          ? field.getDefinition().getTag()\\n          : field.getTag();\\n\\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\\n        ((ArrayList)map.get(tag)).add(fieldMap);\\n      }\\n    }\\n\\n    String json = null;\\n    try {\\n      json = mapper.writeValueAsString(map);\\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\\n+}\\n\\n    return json;\\n}\\n\\n@Override\\n  public boolean validate(MarcVersion marcVersion) {\\n    return validate(marcVersion, false, null);\\n}\\n\\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\\n    return validate(marcVersion, isSummary, null);\\n}\\n\\n  public boolean validate(MarcVersion marcVersion,\\n                          boolean isSummary,\\n                          IgnorableFields ignorableFields) {\\n    validationErrors = new ArrayList<>();\\n    boolean isValidRecord = true;\\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\\n\\n    // TODO: use reflection to get all validator class\\n    // ValidatorResponse validatorResponse;\\n\\n    return isValidRecord;\\n}\\n\\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    isValidComponent = leader.validate(marcVersion);\\n    if (!isValidComponent) {\\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\\n      for (ValidationError leaderError : leaderErrors)\\n        if (leaderError.getRecordId() == null)\\n          leaderError.setRecordId(getId());\\n      validationErrors.addAll(leaderErrors);\\n      isValidRecord = isValidComponent;\\n}\\n    return isValidRecord;\\n}\\n\\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\\n    if (!unhandledTags.isEmpty()) {\\n      if (isSummary) {\\n        for (String tag : unhandledTags) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n}\\n} else {\\n        Map<String, Integer> tags = new LinkedHashMap<>();\\n        for (String tag : unhandledTags)\\n          Utils.count(tag, tags);\\n\\n        List<String> unhandledTagsList = new ArrayList<>();\\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\\n          String tag = entry.getKey();\\n          if (entry.getValue() == 1)\\n            unhandledTagsList.add(tag);\\nelse\\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\\n}\\n        for (String tag : unhandledTagsList) {\\n          if (!isIgnorableField(tag, ignorableFields))\\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\\n}\\n        }\\n\\n      isValidRecord = false;\\n}\\n    return isValidRecord;\\n}\\n\\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\\n    boolean isValidComponent;\\n    for (MarcControlField controlField : getControlfields()) {\\n      if (controlField != null) {\\n        isValidComponent = controlField.validate(marcVersion);\\n    if (!isValidComponent) {\\n          validationErrors.addAll(controlField.getValidationErrors());\\n      isValidRecord = isValidComponent;\\n}\\n        }\\n      }\\n    return isValidRecord;\\n}\\n\\n  private boolean validateDatafields(MarcVersion marcVersion,\\n                                     boolean isValidRecord,\\n                          IgnorableFields ignorableFields) {\\n    ValidatorResponse validatorResponse;\\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\\n    for (DataField field : datafields) {\\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\\n        count(field.getDefinition(), repetitionCounter);\\n        if (!field.validate(marcVersion)) {\\n      isValidRecord = false;\\n          validationErrors.addAll(field.getValidationErrors());\\n}\\n\\n        validatorResponse = ClassificationReferenceValidator.validate(field);\\n        if (!validatorResponse.isValid()) {\\n          validationErrors.addAll(validatorResponse.getValidationErrors());\\n      isValidRecord = false;\\n}\\n        }\\n      }\\n\\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\\n      DataFieldDefinition fieldDefinition = entry.getKey();\\n      Integer count = entry.getValue();\\n      if (count > 1\\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\\n          ValidationErrorType.FIELD_NONREPEATABLE,\\n          String.format(\"there are %d instances\", count),\\n          fieldDefinition.getDescriptionUrl()\\n));\\n      isValidRecord = false;\\n}\\n      }\\n    return isValidRecord;\\n}\\n\\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\\n    if (ignorableFields == null)\\n      return false;\\n    return ignorableFields.contains(tag);\\n}\\n\\n@Override\\n  public List<ValidationError> getValidationErrors() {\\n    return validationErrors;\\n}\\n\\n  public List<String> search(String path, String query) {\\n    List<String> results = new ArrayList<>();\\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\\n      searchControlField(path, query, results);\\n    } else if (path.startsWith(\"006\")) {\\n      for (Control006 instance : control006)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"007\")) {\\n      for (Control007 instance : control007)\\n        searchPositionalControlField(instance, path, query, results);\\n    } else if (path.startsWith(\"008\")) {\\n      searchPositionalControlField(control008, path, query, results);\\n} else {\\n      Matcher matcher = dataFieldPattern.matcher(path);\\n      if (matcher.matches()) {\\n        String tag = matcher.group(1);\\n        String subfieldCode = matcher.group(2);\\n        if (datafieldIndex.containsKey(tag)) {\\n          for (DataField field : datafieldIndex.get(tag)) {\\n            if (searchDatafield(query, results, subfieldCode, field)) break;\\n}\\n          }\\n        }\\n      matcher = positionalPattern.matcher(path);\\n      if (matcher.matches()) {\\n        searchByPosition(query, results, matcher);\\n}\\n      }\\n    return results;\\n}\\n\\n  public List<String> select(MarcSpec selector) {\\n    List<String> results = new ArrayList<>();\\n    if (selector.getFieldTag().equals(\"LDR\")) {\\n      if (selector.hasRangeSelector()) {\\n        results.add(selector.selectRange(leader.getContent()));\\n} else {\\n        results.add(leader.getContent());\\n}\\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\ncontinue;\\n        if (!simpleControlTags.contains(field.definition.getTag())) {\\n          // TODO: check control subfields\\n}\\n      if (selector.hasRangeSelector()) {\\n          results.add(selector.selectRange(field.getContent()));\\n} else {\\n          results.add(field.getContent());\\n}\\n        }\\n\\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\\n        if (field == null)\\ncontinue;\\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n          if (subfields == null)\\ncontinue;\\n          for (MarcSubfield subfield : subfields) {\\n            results.add(subfield.getValue());\\n}\\n          }\\n        }\\n      }\\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\\n      if (selector.getCharStart() != null) {\\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\\n        results.add(control008.getMap().get(definition));\\n} else {\\n        results.add(control008.getContent());\\n}\\n      }\\n    return results;\\n}\\n\\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\\n        String tag = matcher.group(1);\\n    String position = matcher.group(2);\\nint start;\\nint end;\\n    if (position.contains(\"-\")) {\\n      String[] parts = position.split(\"-\", 2);\\n      start = Integer.parseInt(parts[0]);\\n      end = Integer.parseInt(parts[1]);\\n} else {\\n      start = Integer.parseInt(position);\\n      end = start + 1;\\n}\\n    String content = null;\\n    if (tag.equals(\"Leader\")) {\\n      content = leader.getLeaderString();\\n} else {\\n      MarcControlField controlField = null;\\n      // TODO: fix it!\\n      switch (tag) {\\n        case \"006\": controlField = control006.get(0); break;\\n        case \"007\": controlField = control007.get(0); break;\\n        case \"008\": controlField = control008; break;\\n        default: break;\\n}\\n        if (controlField != null)\\n        content = controlField.getContent();\\n}\\n\\n    if (content != null && content.substring(start, end).equals(query)) {\\n      results.add(content.substring(start, end));\\n}\\n    }\\n\\n  private boolean searchDatafield(String query, List<String> results,\\n                                  String subfieldCode, DataField field) {\\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\\n      results.add(field.getInd1());\\n      return true;\\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\\n      results.add(field.getInd2());\\n      return true;\\n} else {\\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\\n      if (subfields != null) {\\n          for (MarcSubfield subfield : subfields) {\\n          if (subfield.getValue().equals(query)) {\\n            results.add(subfield.getValue());\\n      return true;\\n}\\n          }\\n        }\\n      }\\n      return false;\\n}\\n\\n  private void searchControlField(String path, String query, List<String> results) {\\n      MarcControlField controlField = null;\\n    switch (path) {\\n      case \"001\": controlField = control001; break;\\n      case \"003\": controlField = control003; break;\\n      case \"005\": controlField = control005; break;\\n        default: break;\\n}\\n    if (controlField != null && controlField.getContent().equals(query))\\n      results.add(controlField.getContent());\\n}\\n\\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\\n                                            String path, String query, List<String> results) {\\n      if (controlField != null) {\\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\\n        if (subfield.getId().equals(path)) {\\n          if (map.get(subfield).equals(query))\\n            results.add(map.get(subfield));\\nbreak;\\n}\\n        }\\n      }\\n    }\\n\\n  public List<DataField> getAuthorityFields() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"100\", \"110\", \"111\", \"130\",\\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\\n      \"800\", \"810\", \"811\", \"830\"\\n);\\n    for (String tag : tags) {\\n    List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n}\\n    return subjects;\\n}\\n\\n  public List<DataField> getSubjects() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\\n);\\n    for (String tag : tags) {\\n    List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n}\\n    return subjects;\\n}\\n\\n  public List<DataField> getSubject6xx() {\\n    List<DataField> subjects = new ArrayList<>();\\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\\n    for (String tag : tags) {\\n    List<DataField> fields = getDatafield(tag);\\n      if (fields != null && !fields.isEmpty())\\n        subjects.addAll(fields);\\n}\\n    return subjects;\\n}\\n\\n  public void setField(String tag, String content) {\\n    setField(tag, content, MarcVersion.MARC21);\\n}\\n\\n  public void setField(String tag, String content, MarcVersion marcVersion) {\\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\\n      tag = UnimarcConverter.tagFromUnimarc(tag);\\n}\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n} else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n}\\n\\n      DataField dataField = new DataField(tag, content, marcVersion);\\n      addDataField(dataField);\\n}\\n    }\\n\\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\\n\\n    if (tag.equals(\"001\")) {\\n      setControl001(new Control001(content));\\n    } else if (tag.equals(\"003\")) {\\n      setControl003(new Control003(content));\\n    } else if (tag.equals(\"005\")) {\\n      setControl005(new Control005(content, this));\\n    } else if (tag.equals(\"006\")) {\\n      setControl006(new Control006(content, this));\\n    } else if (tag.equals(\"007\")) {\\n      setControl007(new Control007(content, this));\\n    } else if (tag.equals(\"008\")) {\\n      setControl008(new Control008(content, this));\\n} else {\\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\\n      if (definition == null) {\\n        addUnhandledTags(tag);\\n}\\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\\n}\\n    }\\n\\n  public SchemaType getSchemaType() {\\n    return schemaType;\\n}\\n\\n  public void setSchemaType(SchemaType schemaType) {\\n    this.schemaType = schemaType;\\n}\\n  }'}",
            "error": "",
            "span_id": 12587400970184578772
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,3 +430,3 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n@@ -831,2 +831,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "span_id": 3180857548232077284
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,3 +430,3 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n@@ -831,2 +831,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "span_id": 1783540635928937905
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,3 +430,3 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n@@ -832,2 +832,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "span_id": 9446911407100296165
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,3 +430,3 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n@@ -429,3 +430,3 @@\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JacksonException e) {\n@@ -832,2 +832,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "span_id": 17506192527271480167
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,3 +430,3 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n@@ -429,3 +430,3 @@\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JacksonException e) {\n@@ -831,2 +831,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java does not contain these 4 exact lines in a row:\n```\n   } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n   } catch (JacksonException e) {\n```\n",
            "span_id": 2179011588726679358
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,2 +430,2 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JacksonException e) {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n    } catch (JacksonException e) {\n    }\n\n    return json;\n  }\n\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\nimport com.fasterxml.jackson.core.JacksonException;\n"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "832": {
                            "lines": [
                                {
                                    "line_no": 831,
                                    "content": "}"
                                },
                                {
                                    "line_no": 832,
                                    "content": "import com.fasterxml.jackson.core.JacksonException;"
                                },
                                {
                                    "line_no": 833,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[832,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 2720425836556115463
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,2 +430,2 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JacksonException e) {\n@@ -831,2 +831,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JacksonException e) {\n    } catch (JacksonException e) {\n    }\n\n    return json;\n  }\n\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "428": {
                            "lines": [
                                {
                                    "line_no": 427,
                                    "content": "      json = mapper.writeValueAsString(map);"
                                },
                                {
                                    "line_no": 428,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 429,
                                    "content": "+    } catch (JacksonException e) {"
                                }
                            ],
                            "error_texts": [
                                "[428,1] not a statement\n"
                            ]
                        },
                        "429": {
                            "lines": [
                                {
                                    "line_no": 428,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 429,
                                    "content": "+    } catch (JacksonException e) {"
                                },
                                {
                                    "line_no": 430,
                                    "content": "    } catch (JacksonException e) {"
                                }
                            ],
                            "error_texts": [
                                "[429,6] illegal start of expression\n",
                                "[429,1] not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 1972422193988374803
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,3 +430,3 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n@@ -831,2 +831,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "not a statement\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n            values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n    for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+    } catch (JacksonException e) {\n}\n\n    return json;\n}\n\n@Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n}\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n}\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n}\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n}\n    return isValidRecord;\n}\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n}\n} else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\nelse\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n}\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n}\n        }\n\n      isValidRecord = false;\n}\n    return isValidRecord;\n}\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n    if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n      isValidRecord = isValidComponent;\n}\n        }\n      }\n    return isValidRecord;\n}\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                          IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n      isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n}\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n      isValidRecord = false;\n}\n        }\n      }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n));\n      isValidRecord = false;\n}\n      }\n    return isValidRecord;\n}\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n}\n\n@Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n}\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n} else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n}\n          }\n        }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n}\n      }\n    return results;\n}\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n} else {\n        results.add(leader.getContent());\n}\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\ncontinue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n}\n      if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n} else {\n          results.add(field.getContent());\n}\n        }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\ncontinue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\ncontinue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n}\n          }\n        }\n      }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n} else {\n        results.add(control008.getContent());\n}\n      }\n    return results;\n}\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n        String tag = matcher.group(1);\n    String position = matcher.group(2);\nint start;\nint end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n} else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n}\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n} else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n}\n        if (controlField != null)\n        content = controlField.getContent();\n}\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n}\n    }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n} else {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n          for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n      return true;\n}\n          }\n        }\n      }\n      return false;\n}\n\n  private void searchControlField(String path, String query, List<String> results) {\n      MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n        default: break;\n}\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n}\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n      if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\nbreak;\n}\n        }\n      }\n    }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n);\n    for (String tag : tags) {\n    List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n}\n    return subjects;\n}\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n);\n    for (String tag : tags) {\n    List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n}\n    return subjects;\n}\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n    List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n}\n    return subjects;\n}\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n}\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n}\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n} else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n}\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n}\n    }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n} else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n}\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n}\n    }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n}\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n}\n  }"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "428": {
                            "lines": [
                                {
                                    "line_no": 427,
                                    "content": "      json = mapper.writeValueAsString(map);"
                                },
                                {
                                    "line_no": 428,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 429,
                                    "content": "+    } catch (JacksonException e) {"
                                }
                            ],
                            "error_texts": [
                                "[428,1] not a statement\n"
                            ]
                        },
                        "429": {
                            "lines": [
                                {
                                    "line_no": 428,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 429,
                                    "content": "+    } catch (JacksonException e) {"
                                },
                                {
                                    "line_no": 430,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[429,6] illegal start of expression\n",
                                "[429,1] not a statement\n"
                            ]
                        }
                    }
                }
            },
            "error": "not a statement\n",
            "span_id": 14620483374894036004
        },
        {
            "input": "```diff\nsrc/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java\n@@ -7 +7 @@\nimport com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JacksonException;\n@@ -429,3 +430,3 @@\n    } catch (JsonProcessingException e) {\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n-    } catch (JacksonException e) {\n+      logger.log(Level.WARNING, \"error in asJson()\", e);\n    } catch (JacksonException e) {\n@@ -831,2 +831,0 @@\n}\n-import com.fasterxml.jackson.core.JacksonException;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "'try' without 'catch', 'finally' or resource declarations\n",
                "updated_files": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n            values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n    for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+}\n\n    return json;\n}\n\n@Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n}\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n}\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n}\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n}\n    return isValidRecord;\n}\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n}\n} else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\nelse\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n}\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n}\n        }\n\n      isValidRecord = false;\n}\n    return isValidRecord;\n}\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n    if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n      isValidRecord = isValidComponent;\n}\n        }\n      }\n    return isValidRecord;\n}\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                          IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n      isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n}\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n      isValidRecord = false;\n}\n        }\n      }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n));\n      isValidRecord = false;\n}\n      }\n    return isValidRecord;\n}\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n}\n\n@Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n}\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n} else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n}\n          }\n        }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n}\n      }\n    return results;\n}\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n} else {\n        results.add(leader.getContent());\n}\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\ncontinue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n}\n      if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n} else {\n          results.add(field.getContent());\n}\n        }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\ncontinue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\ncontinue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n}\n          }\n        }\n      }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n} else {\n        results.add(control008.getContent());\n}\n      }\n    return results;\n}\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n        String tag = matcher.group(1);\n    String position = matcher.group(2);\nint start;\nint end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n} else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n}\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n} else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n}\n        if (controlField != null)\n        content = controlField.getContent();\n}\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n}\n    }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n} else {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n          for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n      return true;\n}\n          }\n        }\n      }\n      return false;\n}\n\n  private void searchControlField(String path, String query, List<String> results) {\n      MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n        default: break;\n}\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n}\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n      if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\nbreak;\n}\n        }\n      }\n    }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n);\n    for (String tag : tags) {\n    List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n}\n    return subjects;\n}\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n);\n    for (String tag : tags) {\n    List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n}\n    return subjects;\n}\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n    List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n}\n    return subjects;\n}\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n}\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n}\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n} else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n}\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n}\n    }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n} else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n}\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n}\n    }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n}\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n}\n  }"
                },
                "compile_error_details": {
                    "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java": {
                        "428": {
                            "lines": [
                                {
                                    "line_no": 427,
                                    "content": "      json = mapper.writeValueAsString(map);"
                                },
                                {
                                    "line_no": 428,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 429,
                                    "content": "+}"
                                }
                            ],
                            "error_texts": [
                                "[428,1] not a statement\n"
                            ]
                        },
                        "429": {
                            "lines": [
                                {
                                    "line_no": 428,
                                    "content": "-      logger.log(Level.WARNING, \"error in asJson()\", e);"
                                },
                                {
                                    "line_no": 429,
                                    "content": "+}"
                                },
                                {
                                    "line_no": 430,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[429,2] illegal start of expression\n",
                                "[429,1] not a statement\n"
                            ]
                        },
                        "426": {
                            "lines": [
                                {
                                    "line_no": 425,
                                    "content": "    String json = null;"
                                },
                                {
                                    "line_no": 426,
                                    "content": "    try {"
                                },
                                {
                                    "line_no": 427,
                                    "content": "      json = mapper.writeValueAsString(map);"
                                }
                            ],
                            "error_texts": [
                                "[426,5] 'try' without 'catch', 'finally' or resource declarations\n"
                            ]
                        }
                    }
                }
            },
            "error": "'try' without 'catch', 'finally' or resource declarations\n",
            "span_id": 6772077604890373767
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java",
            "output": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n              values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n      for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n    } catch (JsonProcessingException e) {\n      logger.log(Level.WARNING, \"error in asJson()\", e);\n    }\n\n    return json;\n  }\n\n  @Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n  }\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n  }\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      } else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\n          else\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n        }\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n        }\n      }\n\n      isValidRecord = false;\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n        if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n          isValidRecord = isValidComponent;\n        }\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                                     IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n          isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n        }\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n          isValidRecord = false;\n        }\n      }\n    }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n        ));\n        isValidRecord = false;\n      }\n    }\n    return isValidRecord;\n  }\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n  }\n\n  @Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n  }\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n    } else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n          }\n        }\n      }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n      }\n    }\n    return results;\n  }\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n      } else {\n        results.add(leader.getContent());\n      }\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n        }\n        if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n        } else {\n          results.add(field.getContent());\n        }\n      }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\n          continue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\n            continue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n          }\n        }\n      }\n    }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n      } else {\n        results.add(control008.getContent());\n      }\n    }\n    return results;\n  }\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n    String tag = matcher.group(1);\n    String position = matcher.group(2);\n    int start;\n    int end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n    } else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n    }\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n    } else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n      }\n      if (controlField != null)\n        content = controlField.getContent();\n    }\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n    }\n  }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n    } else {\n      List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n        for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private void searchControlField(String path, String query, List<String> results) {\n    MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n      default: break;\n    }\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n  }\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n    if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\n          break;\n        }\n      }\n    }\n  }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n    );\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n      List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n    }\n    return subjects;\n  }\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n  }\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n    }\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n    }\n  }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n    } else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n      }\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n    }\n  }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n  }\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n  }\n}\n",
            "error": "",
            "span_id": 2410275591847374752
        },
        {
            "input": "src/main/java/de/gwdg/metadataqa/marc/dao/MarcRecord.java",
            "output": "package de.gwdg.metadataqa.marc.dao;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport de.gwdg.metadataqa.marc.Extractable;\nimport de.gwdg.metadataqa.marc.MarcFactory;\nimport de.gwdg.metadataqa.marc.MarcSubfield;\nimport de.gwdg.metadataqa.marc.Utils;\nimport de.gwdg.metadataqa.marc.Validatable;\nimport de.gwdg.metadataqa.marc.cli.utils.IgnorableFields;\nimport de.gwdg.metadataqa.marc.definition.*;\nimport de.gwdg.metadataqa.marc.definition.bibliographic.SchemaType;\nimport de.gwdg.metadataqa.marc.definition.general.validator.ClassificationReferenceValidator;\nimport de.gwdg.metadataqa.marc.definition.structure.ControlfieldPositionDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.DataFieldDefinition;\nimport de.gwdg.metadataqa.marc.definition.structure.Indicator;\nimport de.gwdg.metadataqa.marc.model.SolrFieldType;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationError;\nimport de.gwdg.metadataqa.marc.model.validation.ValidationErrorType;\nimport de.gwdg.metadataqa.marc.utils.marcspec.legacy.MarcSpec;\n\nimport de.gwdg.metadataqa.marc.utils.unimarc.UnimarcConverter;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.Utils.count;\n\npublic class MarcRecord implements Extractable, Validatable, Serializable {\n\n  private static final Logger logger = Logger.getLogger(MarcRecord.class.getCanonicalName());\n  private static final Pattern dataFieldPattern = Pattern.compile(\"^(\\\\d\\\\d\\\\d)\\\\$(.*)$\");\n  private static final Pattern positionalPattern = Pattern.compile(\"^(Leader|00[678])/(.*)$\");\n  private static final List<String> simpleControlTags = Arrays.asList(\"001\", \"003\", \"005\");\n  private static final Map<String, Boolean> undefinedTags = new HashMap<>();\n\n  private Leader leader;\n  private MarcControlField control001;\n  private MarcControlField control003;\n  private MarcControlField control005;\n  private List<Control006> control006 = new ArrayList<>();\n  private List<Control007> control007 = new ArrayList<>();\n  private Control008 control008;\n  private List<DataField> datafields;\n  private Map<String, List<DataField>> datafieldIndex;\n  private Map<String, List<MarcControlField>> controlfieldIndex;\n  Map<String, List<String>> mainKeyValuePairs;\n  private List<ValidationError> validationErrors = null;\n  private SchemaType schemaType = SchemaType.MARC21;\n\n  public enum RESOLVE {\n    NONE,\n    RESOLVE,\n    BOTH;\n  }\n\n  private List<String> unhandledTags;\n\n  public MarcRecord() {\n    datafields = new ArrayList<>();\n    datafieldIndex = new TreeMap<>();\n    controlfieldIndex = new TreeMap<>();\n    unhandledTags = new ArrayList<>();\n  }\n\n  public MarcRecord(String id) {\n    this();\n    control001 = new Control001(id);\n  }\n\n  public void addDataField(DataField dataField) {\n    dataField.setMarcRecord(this);\n    indexField(dataField);\n    datafields.add(dataField);\n  }\n\n  private void indexField(DataField dataField) {\n    String tag = dataField.getTag();\n    if (tag == null)\n      logger.warning(\"null tag in indexField() \" + dataField);\n\n    datafieldIndex.computeIfAbsent(tag, s -> new ArrayList<>());\n    datafieldIndex.get(tag).add(dataField);\n  }\n\n  public void addUnhandledTags(String tag) {\n    unhandledTags.add(tag);\n  }\n\n  public void setLeader(Leader leader) {\n    this.leader = leader;\n    leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader) {\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public void setLeader(String leader, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      leader = UnimarcConverter.leaderFromUnimarc(leader);\n    }\n\n    this.leader = new Leader(leader);\n    this.leader.setMarcRecord(this);\n  }\n\n  public Leader getLeader() {\n    return leader;\n  }\n\n  public Leader.Type getType() {\n    return leader.getType();\n  }\n\n  public MarcControlField getControl001() {\n    return control001;\n  }\n\n  public MarcRecord setControl001(MarcControlField control001) {\n    this.control001 = control001;\n    control001.setMarcRecord(this);\n    controlfieldIndex.put(control001.definition.getTag(), Arrays.asList(control001));\n    return this;\n  }\n\n  public MarcControlField getControl003() {\n    return control003;\n  }\n\n  public void setControl003(MarcControlField control003) {\n    this.control003 = control003;\n    control003.setMarcRecord(this);\n    controlfieldIndex.put(control003.definition.getTag(), Arrays.asList(control003));\n  }\n\n  public MarcControlField getControl005() {\n    return control005;\n  }\n\n  public void setControl005(MarcControlField control005) {\n    this.control005 = control005;\n    control005.setMarcRecord(this);\n    controlfieldIndex.put(control005.definition.getTag(), Arrays.asList(control005));\n  }\n\n  public List<Control006> getControl006() {\n    return control006;\n  }\n\n  public void setControl006(Control006 control006) {\n    this.control006.add(control006);\n    control006.setMarcRecord(this);\n    controlfieldIndex.put(control006.definition.getTag(), (List) this.control006);\n  }\n\n  public List<Control007> getControl007() {\n    return control007;\n  }\n\n  public void setControl007(Control007 control007) {\n    this.control007.add(control007);\n    control007.setMarcRecord(this);\n    controlfieldIndex.put(control007.definition.getTag(), (List) this.control007);\n  }\n\n  public Control008 getControl008() {\n    return control008;\n  }\n\n  public void setControl008(Control008 control008) {\n    this.control008 = control008;\n    control008.setMarcRecord(this);\n    controlfieldIndex.put(control008.definition.getTag(), Arrays.asList(control008));\n  }\n\n  public String getId() {\n    return control001.getContent();\n  }\n\n  public String getId(boolean trim) {\n    String id = getId();\n    if (trim)\n      id = id.trim();\n    return id;\n  }\n\n  public List<MarcControlField> getControlfields() {\n    List<MarcControlField> list = new ArrayList<>();\n    list.add(control001);\n    if (control003 != null)\n      list.add(control003);\n    if (control005 != null)\n      list.add(control005);\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public List<MarcControlField> getSimpleControlfields() {\n    return Arrays.asList(\n      control001, control003, control005\n    );\n  }\n\n  public List<MarcPositionalControlField> getPositionalControlfields() {\n    List<MarcPositionalControlField> list = new ArrayList<>();\n    if (control006 != null && !control006.isEmpty())\n      list.addAll(control006);\n    if (control007 != null && !control007.isEmpty())\n      list.addAll(control007);\n    if (control008 != null)\n      list.add(control008);\n    return list;\n  }\n\n  public boolean hasDatafield(String tag) {\n    return datafieldIndex.containsKey(tag);\n  }\n\n  public List<DataField> getDatafield(String tag) {\n    return datafieldIndex.getOrDefault(tag, null);\n  }\n\n  public List<DataField> getDatafields() {\n    return datafields;\n  }\n\n  public boolean exists(String tag) {\n    List<DataField> fields = getDatafield(tag);\n    return (fields != null && !fields.isEmpty());\n  }\n\n  public List<String> extract(String tag, String subfield) {\n    return extract(tag, subfield, RESOLVE.NONE);\n  }\n\n  /**\n   * Extact field value\n   * @param tag\n   * @param subfield\n   * @param doResolve\n   * @return\n   */\n  public List<String> extract(String tag, String subfield, RESOLVE doResolve) {\n    List<String> values = new ArrayList<>();\n    List<DataField> fields = getDatafield(tag);\n    if (fields != null && !fields.isEmpty()) {\n      for (DataField field : fields) {\n        if (subfield.equals(\"ind1\") || subfield.equals(\"ind2\")) {\n          String value;\n          Indicator indicator;\n          if (subfield.equals(\"ind1\")) {\n            value = field.getInd1();\n            indicator = field.getDefinition().getInd1();\n          } else {\n            value = field.getInd2();\n            indicator = field.getDefinition().getInd2();\n          }\n          if (indicator.getCode(value) == null) {\n            values.add(value);\n          } else {\n            values.add(indicator.getCode(value).getLabel());\n          }\n        } else {\n          List<MarcSubfield> subfieldInstances = field.getSubfield(subfield);\n          if (subfieldInstances != null) {\n            for (MarcSubfield subfieldInstance : subfieldInstances) {\n              String value = null;\n              switch (doResolve) {\n                case RESOLVE: value = subfieldInstance.resolve(); break;\n                case NONE: value = subfieldInstance.getValue(); break;\n                case BOTH: value = subfieldInstance.resolve() + \"##\" + subfieldInstance.getValue(); break;\n              }\n            values.add(value);\n            }\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  public List<String> getUnhandledTags() {\n    return unhandledTags;\n  }\n\n  public String format() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.format());\n    }\n    return output.toString();\n  }\n\n  public String formatAsText() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsText());\n    }\n    return output.toString();\n  }\n\n  public String formatAsMarc() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatAsMarc());\n    }\n    return output.toString();\n  }\n\n  public String formatForIndex() {\n    StringBuffer output = new StringBuffer();\n    for (DataField field : datafields) {\n      output.append(field.formatForIndex());\n    }\n    return output.toString();\n  }\n\n  public Map<String, List<String>> getKeyValuePairs() {\n    return getKeyValuePairs(SolrFieldType.MARC);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type) {\n    return getKeyValuePairs(type, false, MarcVersion.MARC21);\n  }\n\n  @Override\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type, MarcVersion marcVersion) {\n    return getKeyValuePairs(type, false, marcVersion);\n  }\n\n  public Map<String, List<String>> getKeyValuePairs(SolrFieldType type,\n                                                    boolean withDeduplication,\n                                                    MarcVersion marcVersion) {\n    if (mainKeyValuePairs == null) {\n      mainKeyValuePairs = new LinkedHashMap<>();\n\n      mainKeyValuePairs.put(\"type\", Arrays.asList(getType().getValue()));\n      mainKeyValuePairs.putAll(leader.getKeyValuePairs(type));\n\n      for (MarcControlField controlField : getControlfields())\n        if (controlField != null)\n          mainKeyValuePairs.putAll(controlField.getKeyValuePairs(type));\n\n    for (DataField field : datafields) {\n        Map<String, List<String>> keyValuePairs = field.getKeyValuePairs(type, marcVersion);\n        for (Map.Entry<String, List<String>> entry : keyValuePairs.entrySet()) {\n          String key = entry.getKey();\n          List<String> values = entry.getValue();\n          if (mainKeyValuePairs.containsKey(key)) {\n            mainKeyValuePairs.put(\n              key,\n              mergeValues(\n                new ArrayList<>(mainKeyValuePairs.get(key)),\n                values,\n                withDeduplication\n              )\n            );\n          } else {\n            mainKeyValuePairs.put(key, values);\n          }\n        }\n      }\n    }\n\n    return mainKeyValuePairs;\n  }\n\n  private List<String> mergeValues(List<String> existingValues,\n                                   List<String> values,\n                                   boolean withDeduplication) {\n    if (withDeduplication) {\n      for (String value : values) {\n        if (!existingValues.contains(value)) {\n          existingValues.add(value);\n        }\n      }\n    } else {\n      existingValues.addAll(values);\n    }\n    return existingValues;\n  }\n\n  public String asJson() {\n    ObjectMapper mapper = new ObjectMapper();\n\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"leader\", leader.getContent());\n\n    for (MarcControlField field : getControlfields())\n      if (field != null)\n        map.put(field.getDefinition().getTag(), field.getContent());\n\n    for (DataField field : datafields) {\n      if (field != null) {\n        Map<String, Object> fieldMap = new LinkedHashMap<>();\n        fieldMap.put(\"ind1\", field.getInd1());\n        fieldMap.put(\"ind2\", field.getInd2());\n\n        Map<String, String> subfields = new LinkedHashMap<>();\n        for (MarcSubfield subfield : field.getSubfields()) {\n          subfields.put(subfield.getCode(), subfield.getValue());\n        }\n        fieldMap.put(\"subfields\", subfields);\n\n        String tag = field.getDefinition() != null\n          ? field.getDefinition().getTag()\n          : field.getTag();\n\n        map.computeIfAbsent(tag, s -> new ArrayList<Map<String, Object>>());\n        ((ArrayList)map.get(tag)).add(fieldMap);\n      }\n    }\n\n    String json = null;\n    try {\n      json = mapper.writeValueAsString(map);\n-      logger.log(Level.WARNING, \"error in asJson()\", e);\n+}\n\n    return json;\n}\n\n@Override\n  public boolean validate(MarcVersion marcVersion) {\n    return validate(marcVersion, false, null);\n}\n\n  public boolean validate(MarcVersion marcVersion, boolean isSummary) {\n    return validate(marcVersion, isSummary, null);\n}\n\n  public boolean validate(MarcVersion marcVersion,\n                          boolean isSummary,\n                          IgnorableFields ignorableFields) {\n    validationErrors = new ArrayList<>();\n    boolean isValidRecord = true;\n    isValidRecord = validateLeader(marcVersion, isValidRecord);\n    isValidRecord = validateUnhandledTags(isSummary, isValidRecord, ignorableFields);\n    isValidRecord = validateControlfields(marcVersion, isValidRecord);\n    isValidRecord = validateDatafields(marcVersion, isValidRecord, ignorableFields);\n\n    // TODO: use reflection to get all validator class\n    // ValidatorResponse validatorResponse;\n\n    return isValidRecord;\n}\n\n  private boolean validateLeader(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    isValidComponent = leader.validate(marcVersion);\n    if (!isValidComponent) {\n      List<ValidationError> leaderErrors = leader.getValidationErrors();\n      for (ValidationError leaderError : leaderErrors)\n        if (leaderError.getRecordId() == null)\n          leaderError.setRecordId(getId());\n      validationErrors.addAll(leaderErrors);\n      isValidRecord = isValidComponent;\n}\n    return isValidRecord;\n}\n\n  private boolean validateUnhandledTags(boolean isSummary, boolean isValidRecord, IgnorableFields ignorableFields) {\n    if (!unhandledTags.isEmpty()) {\n      if (isSummary) {\n        for (String tag : unhandledTags) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n}\n} else {\n        Map<String, Integer> tags = new LinkedHashMap<>();\n        for (String tag : unhandledTags)\n          Utils.count(tag, tags);\n\n        List<String> unhandledTagsList = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : tags.entrySet()) {\n          String tag = entry.getKey();\n          if (entry.getValue() == 1)\n            unhandledTagsList.add(tag);\nelse\n            unhandledTagsList.add(String.format(\"%s (%d*)\", tag, entry.getValue()));\n}\n        for (String tag : unhandledTagsList) {\n          if (!isIgnorableField(tag, ignorableFields))\n            validationErrors.add(new ValidationError(getId(), tag, ValidationErrorType.FIELD_UNDEFINED, tag, null));\n}\n        }\n\n      isValidRecord = false;\n}\n    return isValidRecord;\n}\n\n  private boolean validateControlfields(MarcVersion marcVersion, boolean isValidRecord) {\n    boolean isValidComponent;\n    for (MarcControlField controlField : getControlfields()) {\n      if (controlField != null) {\n        isValidComponent = controlField.validate(marcVersion);\n    if (!isValidComponent) {\n          validationErrors.addAll(controlField.getValidationErrors());\n      isValidRecord = isValidComponent;\n}\n        }\n      }\n    return isValidRecord;\n}\n\n  private boolean validateDatafields(MarcVersion marcVersion,\n                                     boolean isValidRecord,\n                          IgnorableFields ignorableFields) {\n    ValidatorResponse validatorResponse;\n    Map<DataFieldDefinition, Integer> repetitionCounter = new HashMap<>();\n    for (DataField field : datafields) {\n      if (field.getDefinition() != null && !isIgnorableField(field.getTag(), ignorableFields)) {\n        count(field.getDefinition(), repetitionCounter);\n        if (!field.validate(marcVersion)) {\n      isValidRecord = false;\n          validationErrors.addAll(field.getValidationErrors());\n}\n\n        validatorResponse = ClassificationReferenceValidator.validate(field);\n        if (!validatorResponse.isValid()) {\n          validationErrors.addAll(validatorResponse.getValidationErrors());\n      isValidRecord = false;\n}\n        }\n      }\n\n    for (Map.Entry<DataFieldDefinition, Integer> entry : repetitionCounter.entrySet()) {\n      DataFieldDefinition fieldDefinition = entry.getKey();\n      Integer count = entry.getValue();\n      if (count > 1\n          && fieldDefinition.getCardinality().equals(Cardinality.Nonrepeatable)) {\n        validationErrors.add(new ValidationError(getId(), fieldDefinition.getTag(),\n          ValidationErrorType.FIELD_NONREPEATABLE,\n          String.format(\"there are %d instances\", count),\n          fieldDefinition.getDescriptionUrl()\n));\n      isValidRecord = false;\n}\n      }\n    return isValidRecord;\n}\n\n  private boolean isIgnorableField(String tag, IgnorableFields ignorableFields) {\n    if (ignorableFields == null)\n      return false;\n    return ignorableFields.contains(tag);\n}\n\n@Override\n  public List<ValidationError> getValidationErrors() {\n    return validationErrors;\n}\n\n  public List<String> search(String path, String query) {\n    List<String> results = new ArrayList<>();\n    if (path.equals(\"001\") || path.equals(\"003\") || path.equals(\"005\")) {\n      searchControlField(path, query, results);\n    } else if (path.startsWith(\"006\")) {\n      for (Control006 instance : control006)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"007\")) {\n      for (Control007 instance : control007)\n        searchPositionalControlField(instance, path, query, results);\n    } else if (path.startsWith(\"008\")) {\n      searchPositionalControlField(control008, path, query, results);\n} else {\n      Matcher matcher = dataFieldPattern.matcher(path);\n      if (matcher.matches()) {\n        String tag = matcher.group(1);\n        String subfieldCode = matcher.group(2);\n        if (datafieldIndex.containsKey(tag)) {\n          for (DataField field : datafieldIndex.get(tag)) {\n            if (searchDatafield(query, results, subfieldCode, field)) break;\n}\n          }\n        }\n      matcher = positionalPattern.matcher(path);\n      if (matcher.matches()) {\n        searchByPosition(query, results, matcher);\n}\n      }\n    return results;\n}\n\n  public List<String> select(MarcSpec selector) {\n    List<String> results = new ArrayList<>();\n    if (selector.getFieldTag().equals(\"LDR\")) {\n      if (selector.hasRangeSelector()) {\n        results.add(selector.selectRange(leader.getContent()));\n} else {\n        results.add(leader.getContent());\n}\n    } else if (controlfieldIndex.containsKey(selector.getFieldTag())) {\n      for (MarcControlField field : controlfieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\ncontinue;\n        if (!simpleControlTags.contains(field.definition.getTag())) {\n          // TODO: check control subfields\n}\n      if (selector.hasRangeSelector()) {\n          results.add(selector.selectRange(field.getContent()));\n} else {\n          results.add(field.getContent());\n}\n        }\n\n    } else if (datafieldIndex.containsKey(selector.getFieldTag())) {\n      for (DataField field : datafieldIndex.get(selector.getFieldTag())) {\n        if (field == null)\ncontinue;\n        for (String subfieldCode : selector.getSubfieldsAsList()) {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n          if (subfields == null)\ncontinue;\n          for (MarcSubfield subfield : subfields) {\n            results.add(subfield.getValue());\n}\n          }\n        }\n      }\n    else if (selector.getFieldTag().equals(\"008\") && control008 != null) {\n      if (selector.getCharStart() != null) {\n        ControlfieldPositionDefinition definition = control008.getSubfieldByPosition(selector.getCharStart());\n        results.add(control008.getMap().get(definition));\n} else {\n        results.add(control008.getContent());\n}\n      }\n    return results;\n}\n\n  private void searchByPosition(String query, List<String> results, Matcher matcher) {\n        String tag = matcher.group(1);\n    String position = matcher.group(2);\nint start;\nint end;\n    if (position.contains(\"-\")) {\n      String[] parts = position.split(\"-\", 2);\n      start = Integer.parseInt(parts[0]);\n      end = Integer.parseInt(parts[1]);\n} else {\n      start = Integer.parseInt(position);\n      end = start + 1;\n}\n    String content = null;\n    if (tag.equals(\"Leader\")) {\n      content = leader.getLeaderString();\n} else {\n      MarcControlField controlField = null;\n      // TODO: fix it!\n      switch (tag) {\n        case \"006\": controlField = control006.get(0); break;\n        case \"007\": controlField = control007.get(0); break;\n        case \"008\": controlField = control008; break;\n        default: break;\n}\n        if (controlField != null)\n        content = controlField.getContent();\n}\n\n    if (content != null && content.substring(start, end).equals(query)) {\n      results.add(content.substring(start, end));\n}\n    }\n\n  private boolean searchDatafield(String query, List<String> results,\n                                  String subfieldCode, DataField field) {\n    if (subfieldCode.equals(\"ind1\") && field.getInd1().equals(query)) {\n      results.add(field.getInd1());\n      return true;\n    } else if (subfieldCode.equals(\"ind2\") && field.getInd2().equals(query)) {\n      results.add(field.getInd2());\n      return true;\n} else {\n          List<MarcSubfield> subfields = field.getSubfield(subfieldCode);\n      if (subfields != null) {\n          for (MarcSubfield subfield : subfields) {\n          if (subfield.getValue().equals(query)) {\n            results.add(subfield.getValue());\n      return true;\n}\n          }\n        }\n      }\n      return false;\n}\n\n  private void searchControlField(String path, String query, List<String> results) {\n      MarcControlField controlField = null;\n    switch (path) {\n      case \"001\": controlField = control001; break;\n      case \"003\": controlField = control003; break;\n      case \"005\": controlField = control005; break;\n        default: break;\n}\n    if (controlField != null && controlField.getContent().equals(query))\n      results.add(controlField.getContent());\n}\n\n  private void searchPositionalControlField(MarcPositionalControlField controlField,\n                                            String path, String query, List<String> results) {\n      if (controlField != null) {\n      Map<ControlfieldPositionDefinition, String> map = controlField.getMap();\n      for (ControlfieldPositionDefinition subfield : controlField.getMap().keySet()) {\n        if (subfield.getId().equals(path)) {\n          if (map.get(subfield).equals(query))\n            results.add(map.get(subfield));\nbreak;\n}\n        }\n      }\n    }\n\n  public List<DataField> getAuthorityFields() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"100\", \"110\", \"111\", \"130\",\n      \"700\", \"710\", \"711\", \"730\",   \"720\", \"740\", \"751\", \"752\", \"753\", \"754\",\n      \"800\", \"810\", \"811\", \"830\"\n);\n    for (String tag : tags) {\n    List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n}\n    return subjects;\n}\n\n  public List<DataField> getSubjects() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\n      \"052\", \"055\", \"072\", \"080\", \"082\", \"083\", \"084\", \"085\", \"086\",\n      \"600\", \"610\", \"611\", \"630\", \"647\", \"648\", \"650\", \"651\",\n      \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"662\"\n);\n    for (String tag : tags) {\n    List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n}\n    return subjects;\n}\n\n  public List<DataField> getSubject6xx() {\n    List<DataField> subjects = new ArrayList<>();\n    List<String> tags = Arrays.asList(\"600\", \"610\", \"611\", \"630\", \"648\", \"650\", \"651\");\n    for (String tag : tags) {\n    List<DataField> fields = getDatafield(tag);\n      if (fields != null && !fields.isEmpty())\n        subjects.addAll(fields);\n}\n    return subjects;\n}\n\n  public void setField(String tag, String content) {\n    setField(tag, content, MarcVersion.MARC21);\n}\n\n  public void setField(String tag, String content, MarcVersion marcVersion) {\n    if (marcVersion.equals(MarcVersion.UNIMARC)) {\n      content = UnimarcConverter.contentFromUnimarc(tag, content);\n      tag = UnimarcConverter.tagFromUnimarc(tag);\n}\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n} else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n}\n\n      DataField dataField = new DataField(tag, content, marcVersion);\n      addDataField(dataField);\n}\n    }\n\n  public void setField(String tag, String ind1, String ind2, String content, MarcVersion marcVersion) {\n\n    if (tag.equals(\"001\")) {\n      setControl001(new Control001(content));\n    } else if (tag.equals(\"003\")) {\n      setControl003(new Control003(content));\n    } else if (tag.equals(\"005\")) {\n      setControl005(new Control005(content, this));\n    } else if (tag.equals(\"006\")) {\n      setControl006(new Control006(content, this));\n    } else if (tag.equals(\"007\")) {\n      setControl007(new Control007(content, this));\n    } else if (tag.equals(\"008\")) {\n      setControl008(new Control008(content, this));\n} else {\n      DataFieldDefinition definition = MarcFactory.getDataFieldDefinition(tag, marcVersion);\n      if (definition == null) {\n        addUnhandledTags(tag);\n}\n      addDataField(new DataField(tag, ind1, ind2, content, marcVersion));\n}\n    }\n\n  public SchemaType getSchemaType() {\n    return schemaType;\n}\n\n  public void setSchemaType(SchemaType schemaType) {\n    this.schemaType = schemaType;\n}\n  }",
            "error": "",
            "span_id": 1057047613544201749
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}