diff --git a/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java b/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java
index 98d3001..962ee68 100644
--- a/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java
+++ b/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java
@@ -19,7 +19,6 @@ import static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;
 
 import com.google.api.core.ApiService.State;
 import com.google.cloud.pubsublite.Message;
-import com.google.cloud.pubsublite.PublishMetadata;
 import com.google.cloud.pubsublite.internal.Publisher;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableListMultimap;
diff --git a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java
index b5e2c73..650054d 100644
--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java
+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java
@@ -15,11 +15,11 @@
  */
 package com.google.pubsublite.kafka.sink;
 
-import com.google.cloud.pubsublite.PublishMetadata;
+import com.google.cloud.pubsublite.MessageMetadata;
 import com.google.cloud.pubsublite.internal.Publisher;
 import java.util.Map;
 
 interface PublisherFactory {
 
-  Publisher<PublishMetadata> newPublisher(Map<String, String> params);
+  Publisher<MessageMetadata> newPublisher(Map<String, String> params);
 }
diff --git a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java
index 8d19dc4..566d244 100644
--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java
+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java
@@ -17,13 +17,13 @@ package com.google.pubsublite.kafka.sink;
 
 import com.google.cloud.pubsublite.CloudZone;
 import com.google.cloud.pubsublite.ProjectPath;
-import com.google.cloud.pubsublite.PublishMetadata;
+import com.google.cloud.pubsublite.MessageMetadata;
 import com.google.cloud.pubsublite.TopicName;
 import com.google.cloud.pubsublite.TopicPath;
 import com.google.cloud.pubsublite.internal.Publisher;
 import com.google.cloud.pubsublite.internal.wire.PubsubContext;
-import com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;
-import com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;
+import com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory;
+import com.google.cloud.pubsublite.internal.wire.RoutingPublisher;
 import com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;
 import java.util.Map;
 import org.apache.kafka.common.config.ConfigValue;
@@ -33,9 +33,9 @@ class PublisherFactoryImpl implements PublisherFactory {
   private static final Framework FRAMEWORK = Framework.of("KAFKA_CONNECT");
 
   @Override
-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {
+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {
     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);
-    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();
+    RoutingPublisher.Builder builder = RoutingPublisher.newBuilder();
     TopicPath topic =
         TopicPath.newBuilder()
             .setProject(
@@ -44,14 +44,17 @@ class PublisherFactoryImpl implements PublisherFactory {
             .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))
             .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))
             .build();
-    builder.setTopic(topic);
-    builder.setPublisherFactory(
-        partition ->
-            SinglePartitionPublisherBuilder.newBuilder()
-                .setTopic(topic)
-                .setPartition(partition)
-                .setContext(PubsubContext.of(FRAMEWORK))
-                .build());
+    PartitionPublisherFactory publisherFactory = new PartitionPublisherFactory() {
+      @Override
+      public Publisher<MessageMetadata> newPublisher(TopicPath topicPath, long partition) {
+        return SinglePartitionPublisherBuilder.newBuilder()
+            .setTopic(topicPath)
+            .setPartition(partition)
+            .setContext(PubsubContext.of(FRAMEWORK))
+            .build();
+      }
+    };
+    builder.setTopic(topic).setPublisherFactory(publisherFactory);
     return builder.build();
   }
 }