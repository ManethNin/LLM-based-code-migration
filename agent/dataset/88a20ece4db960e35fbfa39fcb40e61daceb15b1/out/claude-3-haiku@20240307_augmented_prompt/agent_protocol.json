{
    "validate_diffs": [
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -17,7 +17,7 @@ import com.google.api.core.ApiFuture;\n import com.google.api.core.ApiFutures;\n import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.Offset;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n import com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory;\n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.common.collect.ImmutableList;\n@@ -34,7 +34,7 @@ public class PublisherFactoryImpl implements PublisherFactory {\n   private final PartitionPublisherFactory partitionPublisherFactory;\n \n   @Override\n-  public Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\n+  public Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options) {\n     return partitionPublisherFactory.newPublisher(options);\n   }\n \n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -15,12 +15,12 @@ package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.cloud.pubsublite.kafka.Publisher;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n \n public interface PublisherFactory {\n   /**\n    * Creates a new publisher for the given options.\n    */\n-  Publisher<PublishMetadata> createPublisher(PublisherOptions options);\n+  Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options);\n }\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\n  private final PartitionPublisherFactory partitionPublisherFactory;\n\n  @Override\n  public Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\n    return partitionPublisherFactory.newPublisher(options);\n  }\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\n\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\n\npublic interface PublisherFactory {\n  /**\n   * Creates a new publisher for the given options.\n   */\n  Publisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\n  private final PartitionPublisherFactory partitionPublisherFactory;\n\n  @Override\n  public Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\n    return partitionPublisherFactory.newPublisher(options);\n  }\n\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\n\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\n\npublic interface PublisherFactory {\n  /**\n   * Creates a new publisher for the given options.\n   */\n  Publisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```\n",
            "span_id": 9643890345529652320
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -17,7 +17,7 @@ import com.google.api.core.ApiFuture;\n import com.google.api.core.ApiFutures;\n import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.Offset;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n import com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory;\n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.common.collect.ImmutableList;\n@@ -34,7 +34,7 @@ public class PublisherFactoryImpl implements PublisherFactory {\n   private final PartitionPublisherFactory partitionPublisherFactory;\n \n   @Override\n-  public Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\n+  public Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options) {\n     return partitionPublisherFactory.newPublisher(options);\n   }\n \n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -15,12 +15,12 @@ package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.cloud.pubsublite.kafka.Publisher;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n \n public interface PublisherFactory {\n   /**\n    * Creates a new publisher for the given options.\n    */\n-  Publisher<PublishMetadata> createPublisher(PublisherOptions options);\n+  Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options);\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
            "span_id": 1635232384280513514
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -17,7 +17,7 @@ import com.google.api.core.ApiFuture;\n import com.google.api.core.ApiFutures;\n import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.Offset;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n import com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory;\n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.common.collect.ImmutableList;\n@@ -34,7 +34,7 @@ public class PublisherFactoryImpl implements PublisherFactory {\n   private final PartitionPublisherFactory partitionPublisherFactory;\n \n   @Override\n-  public Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\n+  public Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options) {\n     return partitionPublisherFactory.newPublisher(options);\n   }\n \n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -15,12 +15,12 @@ package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.cloud.pubsublite.kafka.Publisher;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n \n public interface PublisherFactory {\n   /**\n    * Creates a new publisher for the given options.\n    */\n-  Publisher<PublishMetadata> createPublisher(PublisherOptions options);\n+  Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options);\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
            "span_id": 9629862217848131015
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -17,7 +17,7 @@ import com.google.api.core.ApiFuture;\n import com.google.api.core.ApiFutures;\n import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.Offset;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n import com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory;\n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.common.collect.ImmutableList;\n@@ -34,7 +34,7 @@ public class PublisherFactoryImpl implements PublisherFactory {\n   private final PartitionPublisherFactory partitionPublisherFactory;\n \n   @Override\n-  public Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\n+  public Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options) {\n     return partitionPublisherFactory.newPublisher(options);\n   }\n \n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -15,12 +15,12 @@ package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.cloud.pubsublite.kafka.Publisher;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n \n public interface PublisherFactory {\n   /**\n    * Creates a new publisher for the given options.\n    */\n-  Publisher<PublishMetadata> createPublisher(PublisherOptions options);\n+  Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options);\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
            "span_id": 3903695956292474658
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -17,7 +17,7 @@ import com.google.api.core.ApiFuture;\n import com.google.api.core.ApiFutures;\n import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.Offset;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n import com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory;\n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.common.collect.ImmutableList;\n@@ -34,7 +34,7 @@ public class PublisherFactoryImpl implements PublisherFactory {\n   private final PartitionPublisherFactory partitionPublisherFactory;\n \n   @Override\n-  public Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\n+  public Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options) {\n     return partitionPublisherFactory.newPublisher(options);\n   }\n \n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -15,12 +15,12 @@ package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.cloud.pubsublite.kafka.Publisher;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n \n public interface PublisherFactory {\n   /**\n    * Creates a new publisher for the given options.\n    */\n-  Publisher<PublishMetadata> createPublisher(PublisherOptions options);\n+  Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options);\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
            "span_id": 316888321716766847
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -17,7 +17,7 @@ import com.google.api.core.ApiFuture;\n import com.google.api.core.ApiFutures;\n import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.Offset;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n import com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory;\n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.common.collect.ImmutableList;\n@@ -34,7 +34,7 @@ public class PublisherFactoryImpl implements PublisherFactory {\n   private final PartitionPublisherFactory partitionPublisherFactory;\n \n   @Override\n-  public Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\n+  public Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options) {\n     return partitionPublisherFactory.newPublisher(options);\n   }\n \n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -15,12 +15,12 @@ package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.cloud.pubsublite.kafka.Publisher;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n \n public interface PublisherFactory {\n   /**\n    * Creates a new publisher for the given options.\n    */\n-  Publisher<PublishMetadata> createPublisher(PublisherOptions options);\n+  Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options);\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
            "span_id": 7946815056661322453
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -17,7 +17,7 @@ import com.google.api.core.ApiFuture;\n import com.google.api.core.ApiFutures;\n import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.Offset;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n import com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory;\n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.common.collect.ImmutableList;\n@@ -34,7 +34,7 @@ public class PublisherFactoryImpl implements PublisherFactory {\n   private final PartitionPublisherFactory partitionPublisherFactory;\n \n   @Override\n-  public Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\n+  public Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options) {\n     return partitionPublisherFactory.newPublisher(options);\n   }\n \n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -15,12 +15,12 @@ package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.kafka.PublisherOptions;\n import com.google.cloud.pubsublite.kafka.Publisher;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.proto.PublishMetadata;\n \n public interface PublisherFactory {\n   /**\n    * Creates a new publisher for the given options.\n    */\n-  Publisher<PublishMetadata> createPublisher(PublisherOptions options);\n+  Publisher<com.google.cloud.pubsublite.proto.PublishMetadata> createPublisher(PublisherOptions options);\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 7 exact lines in a row:\n```\nprivate final PartitionPublisherFactory partitionPublisherFactory;\n@Override\npublic Publisher<PublishMetadata> createPublisher(PublisherOptions options) {\nreturn partitionPublisherFactory.newPublisher(options);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 11 exact lines in a row:\n```\nimport com.google.cloud.pubsublite.kafka.PublisherOptions;\nimport com.google.cloud.pubsublite.kafka.Publisher;\nimport com.google.cloud.pubsublite.PublishMetadata;\npublic interface PublisherFactory {\n/**\n* Creates a new publisher for the given options.\n*/\nPublisher<PublishMetadata> createPublisher(PublisherOptions options);\n}\n```",
            "span_id": 8640575454448458337
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java",
            "output": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setContext(PubsubContext.of(FRAMEWORK))\n                .build());\n    return builder.build();\n  }\n}\n",
            "error": "",
            "span_id": 7649446293538306908
        },
        {
            "input": "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java",
            "output": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setContext(PubsubContext.of(FRAMEWORK))\n                .build());\n    return builder.build();\n  }\n}\n",
            "error": "",
            "span_id": 16823282095788605709
        },
        {
            "input": "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java",
            "output": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport java.util.Map;\n\ninterface PublisherFactory {\n\n  Publisher<PublishMetadata> newPublisher(Map<String, String> params);\n}\n",
            "error": "",
            "span_id": 10927721097171047103
        }
    ],
    "get_directory_tree": [
        {
            "input": "src/main/java/com/google/pubsublite/kafka/sink",
            "output": "[\n    {\n        \"name\": \"Constants.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ConfigDefs.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"PublisherFactory.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"PubSubLiteSinkConnector.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"PublisherFactoryImpl.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Schemas.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"PubSubLiteSinkTask.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 5316195190781872164
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 18271753377014206038
        }
    ]
}