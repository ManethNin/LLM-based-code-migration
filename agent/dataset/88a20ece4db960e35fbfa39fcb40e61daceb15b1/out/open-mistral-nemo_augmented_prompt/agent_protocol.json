{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -47,6 +47,7 @@ public class PublisherFactoryImpl implements PublisherFactory {\n         this.publisherFactory = publisherFactory;\n     }\n\n+    @Override\n     public PartitionPublisher createPartitionPublisher(Partition partition) {\n         return publisherFactory.createPartitionPublisher(partition);\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "illegal start of type\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setContext(PubsubContext.of(FRAMEWORK))\n                .build());\n    return builder.build();\n  }\n\n@Override}"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": ""
                                },
                                {
                                    "line_no": 58,
                                    "content": "@Override}"
                                }
                            ],
                            "error_texts": [
                                "[58,10] illegal start of type\n"
                            ]
                        }
                    }
                }
            },
            "error": "illegal start of type\n",
            "span_id": 12902310955780166526
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -57,2 +57,0 @@ \n  \n- @Override\n  public PartitionPublisher createPartitionPublisher(Partition partition) {\n      return publisherFactory.createPartitionPublisher(partition);\n  }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "incompatible types: com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory is not a functional interface\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n.build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setContext(PubsubContext.of(FRAMEWORK))\n                .build());\n    return builder.build();\n}\n  }"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": "import com.google.cloud.pubsublite.Message;"
                                },
                                {
                                    "line_no": 22,
                                    "content": "import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 23,
                                    "content": "import com.google.cloud.pubsublite.internal.Publisher;"
                                }
                            ],
                            "error_texts": [
                                "[22,35] cannot find symbol\n",
                                "[22,35] cannot find symbol\nsymbol: class PublishMetadata\nlocation: package com.google.cloud.pubsublite\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "  private final PublisherFactory factory;"
                                },
                                {
                                    "line_no": 43,
                                    "content": "  private @Nullable Publisher<PublishMetadata> publisher;"
                                },
                                {
                                    "line_no": 44,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[43,31] cannot find symbol\n",
                                "[43,31] cannot find symbol\nsymbol: class PublishMetadata\nlocation: class com.google.pubsublite.kafka.sink.PubSubLiteSinkTask\n"
                            ]
                        }
                    },
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java": {
                        "18": {
                            "lines": [
                                {
                                    "line_no": 17,
                                    "content": ""
                                },
                                {
                                    "line_no": 18,
                                    "content": "import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import com.google.cloud.pubsublite.internal.Publisher;"
                                }
                            ],
                            "error_texts": [
                                "[18,35] cannot find symbol\nsymbol: class PublishMetadata\nlocation: package com.google.cloud.pubsublite\n",
                                "[18,35] cannot find symbol\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "  Publisher<PublishMetadata> newPublisher(Map<String, String> params);"
                                },
                                {
                                    "line_no": 25,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[24,13] cannot find symbol\nsymbol: class PublishMetadata\nlocation: interface com.google.pubsublite.kafka.sink.PublisherFactory\n",
                                "[24,13] cannot find symbol\n"
                            ]
                        }
                    },
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "20": {
                            "lines": [
                                {
                                    "line_no": 19,
                                    "content": "import com.google.cloud.pubsublite.ProjectPath;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 21,
                                    "content": "import com.google.cloud.pubsublite.TopicName;"
                                }
                            ],
                            "error_texts": [
                                "[20,35] cannot find symbol\nsymbol: class PublishMetadata\nlocation: package com.google.cloud.pubsublite\n",
                                "[20,35] cannot find symbol\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": ""
                                },
                                {
                                    "line_no": 35,
                                    "content": "  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 36,
                                    "content": "    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);"
                                }
                            ],
                            "error_texts": [
                                "[35,20] cannot find symbol\nsymbol: class PublishMetadata\nlocation: class com.google.pubsublite.kafka.sink.PublisherFactoryImpl\n",
                                "[35,20] cannot find symbol\n"
                            ]
                        },
                        "47": {
                            "lines": [
                                {
                                    "line_no": 46,
                                    "content": "    builder.setTopic(topic);"
                                },
                                {
                                    "line_no": 47,
                                    "content": "    builder.setPublisherFactory("
                                },
                                {
                                    "line_no": 48,
                                    "content": "        partition ->"
                                }
                            ],
                            "error_texts": [
                                "[47,12] incompatible types: com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory is not a functional interface\nmultiple non-overriding abstract methods found in interface com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory\n",
                                "[47,12] incompatible types: com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory is not a functional interface\n"
                            ]
                        }
                    }
                }
            },
            "error": "incompatible types: com.google.cloud.pubsublite.internal.wire.PartitionPublisherFactory is not a functional interface\n",
            "span_id": 4364376652558277441
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -47,3 +47,6 @@ public class PublisherFactoryImpl implements PublisherFactory {\n     builder.setTopic(topic);\n     builder.setPublisherFactory(\n-        partition ->\n+        new PartitionPublisherFactory() {\n+            @Override\n+            public PartitionPublisher createPartitionPublisher(Partition partition) {\n+                return publisherFactory.createPartitionPublisher(partition);\n+            }\n         }\n     );\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "reached end of file while parsing\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n.build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        new PartitionPublisherFactory() {\n            @Override\n            public PartitionPublisher createPartitionPublisher(Partition partition) {\n                return publisherFactory.createPartitionPublisher(partition);\n            }\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setContext(PubsubContext.of(FRAMEWORK))\n                .build());\n    return builder.build();\n}\n  }"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "53": {
                            "lines": [
                                {
                                    "line_no": 52,
                                    "content": "            }"
                                },
                                {
                                    "line_no": 53,
                                    "content": "            SinglePartitionPublisherBuilder.newBuilder()"
                                },
                                {
                                    "line_no": 54,
                                    "content": "                .setTopic(topic)"
                                }
                            ],
                            "error_texts": [
                                "[53,55] <identifier> expected\n",
                                "[53,57] ';' expected\n"
                            ]
                        },
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "                .build());"
                                },
                                {
                                    "line_no": 58,
                                    "content": "    return builder.build();"
                                },
                                {
                                    "line_no": 59,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[58,5] illegal start of type\n",
                                "[58,25] <identifier> expected\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "    return builder.build();"
                                },
                                {
                                    "line_no": 59,
                                    "content": "}"
                                },
                                {
                                    "line_no": 60,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[59,2] ')' expected\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "}"
                                },
                                {
                                    "line_no": 60,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[60,4] reached end of file while parsing\n"
                            ]
                        }
                    }
                }
            },
            "error": "reached end of file while parsing\n",
            "span_id": 1219716845245413778
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,3 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n+    return builder.build();\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n.build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        new PartitionPublisherFactory() {\n            @Override\n            public PartitionPublisher createPartitionPublisher(Partition partition) {\n                return publisherFactory.createPartitionPublisher(partition);\n            }\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setContext(PubsubContext.of(FRAMEWORK))\n};\n}\n    return builder.build();\n  }\n}"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "53": {
                            "lines": [
                                {
                                    "line_no": 52,
                                    "content": "            }"
                                },
                                {
                                    "line_no": 53,
                                    "content": "            SinglePartitionPublisherBuilder.newBuilder()"
                                },
                                {
                                    "line_no": 54,
                                    "content": "                .setTopic(topic)"
                                }
                            ],
                            "error_texts": [
                                "[53,55] <identifier> expected\n",
                                "[53,57] ';' expected\n"
                            ]
                        },
                        "57": {
                            "lines": [
                                {
                                    "line_no": 56,
                                    "content": "                .setContext(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 57,
                                    "content": "};"
                                },
                                {
                                    "line_no": 58,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[57,2] ')' expected\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": "}"
                                },
                                {
                                    "line_no": 59,
                                    "content": "    return builder.build();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[59,5] illegal start of type\n",
                                "[59,25] <identifier> expected\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 61,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[61,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 1443732498319516246
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,7 +52,5 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n+    return builder.build();\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n.build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        new PartitionPublisherFactory() {\n            @Override\n            public PartitionPublisher createPartitionPublisher(Partition partition) {\n                return publisherFactory.createPartitionPublisher(partition);\n            }\n            SinglePartitionPublisherBuilder.newBuilder()\n-            .build());\n-        return builder.build();\n+        };\n+    }\n+    return builder.build();\n};\n}\n    return builder.build();\n  }\n}"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "53": {
                            "lines": [
                                {
                                    "line_no": 52,
                                    "content": "            }"
                                },
                                {
                                    "line_no": 53,
                                    "content": "            SinglePartitionPublisherBuilder.newBuilder()"
                                },
                                {
                                    "line_no": 54,
                                    "content": "-            .build());"
                                }
                            ],
                            "error_texts": [
                                "[53,55] <identifier> expected\n",
                                "[53,57] ';' expected\n"
                            ]
                        },
                        "55": {
                            "lines": [
                                {
                                    "line_no": 54,
                                    "content": "-            .build());"
                                },
                                {
                                    "line_no": 55,
                                    "content": "-        return builder.build();"
                                },
                                {
                                    "line_no": 56,
                                    "content": "+        };"
                                }
                            ],
                            "error_texts": [
                                "[55,1] illegal start of type\n",
                                "[55,30] <identifier> expected\n"
                            ]
                        },
                        "56": {
                            "lines": [
                                {
                                    "line_no": 55,
                                    "content": "-        return builder.build();"
                                },
                                {
                                    "line_no": 56,
                                    "content": "+        };"
                                },
                                {
                                    "line_no": 57,
                                    "content": "+    }"
                                }
                            ],
                            "error_texts": [
                                "[56,11] ')' expected\n",
                                "[56,1] illegal start of type\n"
                            ]
                        },
                        "57": {
                            "lines": [
                                {
                                    "line_no": 56,
                                    "content": "+        };"
                                },
                                {
                                    "line_no": 57,
                                    "content": "+    }"
                                },
                                {
                                    "line_no": 58,
                                    "content": "+    return builder.build();"
                                }
                            ],
                            "error_texts": [
                                "[57,1] not a statement\n",
                                "[57,6] illegal start of expression\n"
                            ]
                        },
                        "58": {
                            "lines": [
                                {
                                    "line_no": 57,
                                    "content": "+    }"
                                },
                                {
                                    "line_no": 58,
                                    "content": "+    return builder.build();"
                                },
                                {
                                    "line_no": 59,
                                    "content": "};"
                                }
                            ],
                            "error_texts": [
                                "[58,1] illegal start of type\n",
                                "[58,26] <identifier> expected\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "};"
                                },
                                {
                                    "line_no": 60,
                                    "content": "}"
                                },
                                {
                                    "line_no": 61,
                                    "content": "    return builder.build();"
                                }
                            ],
                            "error_texts": [
                                "[60,1] class, interface, or enum expected\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "    return builder.build();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "  }"
                                },
                                {
                                    "line_no": 63,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[62,3] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 11894710589403247129
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,7 +52,5 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n+    return builder.build();\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 9332323704786546443
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,4 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 8189792401936812598
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,4 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 16663576824107027143
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,4 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 12228172937534223594
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,4 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 15923794391792872139
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,4 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 12363062295257206757
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,4 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 16722874752364478118
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,4 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 15742371061512431115
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,4 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 6805884118438132440
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -52,6 +52,4 @@ class PublisherFactoryImpl implements PublisherFactory {\n             .setTopic(topic)\n             .setPartition(partition)\n             .setContext(PubsubContext.of(FRAMEWORK))\n-            .build());\n-        return builder.build();\n+        };\n+    }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java does not contain these 5 exact lines in a row:\n```\n.setTopic(topic)\n.setPartition(partition)\n.setContext(PubsubContext.of(FRAMEWORK))\n.build());\nreturn builder.build();\n```",
            "span_id": 10209444175772524993
        }
    ],
    "read_file": [],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}