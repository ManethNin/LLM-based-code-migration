{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -16,30 +16,30 @@\n \n package io.qameta.allure.maven;\n \n-import io.qameta.allure.CommandLine;\n-import net.lingala.zip4j.core.ZipFile;\n-import net.lingala.zip4j.exception.ZipException;\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugin.MojoExecutionException;\n import org.apache.maven.plugins.annotations.Mojo;\n import org.apache.maven.plugins.annotations.Parameter;\n+import io.qameta.allure.CommandLine;\n \n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n+import net.zinfra.z4j.io.ZipFile;\n+import net.zinfra.z4j.exception.ZipException;\n \n @Mojo(name = \"report\", threadSafe = true)\n public class AllureCommandline extends AbstractMojo {\n \n     @Parameter(property = \"allure.commandline.reportDirectory\", defaultValue = \"${project.build.directory}/allure-report\")\n     private File reportDirectory;\n \n     @Parameter(property = \"allure.commandline.resultsDirectory\", defaultValue = \"${project.build.directory}/allure-results\")\n     private File resultsDirectory;\n \n     @Parameter(property = \"allure.commandline.clean\", defaultValue = \"false\")\n     private boolean clean;\n \n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 31 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport io.qameta.allure.CommandLine;\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.List;\n@Mojo(name = \"report\", threadSafe = true)\npublic class AllureCommandline extends AbstractMojo {\n@Parameter(property = \"allure.commandline.reportDirectory\", defaultValue = \"${project.build.directory}/allure-report\")\nprivate File reportDirectory;\n@Parameter(property = \"allure.commandline.resultsDirectory\", defaultValue = \"${project.build.directory}/allure-results\")\nprivate File resultsDirectory;\n@Parameter(property = \"allure.commandline.clean\", defaultValue = \"false\")\nprivate boolean clean;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 31 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport io.qameta.allure.CommandLine;\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.List;\n@Mojo(name = \"report\", threadSafe = true)\npublic class AllureCommandline extends AbstractMojo {\n@Parameter(property = \"allure.commandline.reportDirectory\", defaultValue = \"${project.build.directory}/allure-report\")\nprivate File reportDirectory;\n@Parameter(property = \"allure.commandline.resultsDirectory\", defaultValue = \"${project.build.directory}/allure-results\")\nprivate File resultsDirectory;\n@Parameter(property = \"allure.commandline.clean\", defaultValue = \"false\")\nprivate boolean clean;\n```",
            "span_id": 17672983733713899210
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -16,8 +16,6 @@\n \n package io.qameta.allure.maven;\n \n-import org.apache.maven.plugin.AbstractMojo;\n-import org.apache.maven.plugin.MojoExecutionException;\n import org.apache.maven.plugins.annotations.Mojo;\n import org.apache.maven.plugins.annotations.Parameter;\n import io.qameta.allure.CommandLine;\n@@ -29,6 +27,8 @@\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n import net.zinfra.z4j.io.ZipFile;\n import net.zinfra.z4j.exception.ZipException;\n \n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 8 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\nimport io.qameta.allure.CommandLine;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 8 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\nimport io.qameta.allure.CommandLine;\n```",
            "span_id": 16437151268923144353
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -16,9 +16,11 @@\n \n package io.qameta.allure.maven;\n \n+import io.qameta.allure.CommandLine;\n+import net.zinfra.z4j.exception.ZipException;\n+import net.zinfra.z4j.io.ZipFile;\n+import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugins.annotations.Mojo;\n import org.apache.maven.plugins.annotations.Parameter;\n-import io.qameta.allure.CommandLine;\n \n import java.io.File;\n import java.io.IOException;\n@@ -26,9 +28,7 @@\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n-import org.apache.maven.plugin.AbstractMojo;\n-import org.apache.maven.plugin.MojoExecutionException;\n-import net.zinfra.z4j.io.ZipFile;\n-import net.zinfra.z4j.exception.ZipException;\n+\n \n @Mojo(name = \"report\", threadSafe = true)\n public class AllureCommandline extends AbstractMojo {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 11 exact lines in a row:\n```\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport net.zinfra.z4j.io.ZipFile;\nimport net.zinfra.z4j.exception.ZipException;\n@Mojo(name = \"report\", threadSafe = true)\npublic class AllureCommandline extends AbstractMojo {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 11 exact lines in a row:\n```\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport net.zinfra.z4j.io.ZipFile;\nimport net.zinfra.z4j.exception.ZipException;\n@Mojo(name = \"report\", threadSafe = true)\npublic class AllureCommandline extends AbstractMojo {\n```",
            "span_id": 6266419094548619591
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -16,8 +16,8 @@\n \n package io.qameta.allure.maven;\n \n+import net.zinfra.z4j.exception.ZipException;\n import io.qameta.allure.CommandLine;\n-import net.zinfra.z4j.exception.ZipException;\n import net.zinfra.z4j.io.ZipFile;\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugins.annotations.Mojo;\n@@ -28,7 +28,6 @@\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n-\n \n @Mojo(name = \"report\", threadSafe = true)\n public class AllureCommandline extends AbstractMojo {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "package net.lingala.zip4j.core does not exist\n",
                "updated_files": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": {
                        "18": {
                            "lines": [
                                {
                                    "line_no": 17,
                                    "content": ""
                                },
                                {
                                    "line_no": 18,
                                    "content": "import net.lingala.zip4j.core.ZipFile;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import net.lingala.zip4j.exception.ZipException;"
                                }
                            ],
                            "error_texts": [
                                "[18,30] package net.lingala.zip4j.core does not exist\n"
                            ]
                        }
                    }
                }
            },
            "error": "package net.lingala.zip4j.core does not exist\n",
            "span_id": 5289084028416970301
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -16,7 +16,6 @@\n \n package io.qameta.allure.maven;\n \n-import net.zinfra.z4j.exception.ZipException;\n import io.qameta.allure.CommandLine;\n import net.zinfra.z4j.io.ZipFile;\n import org.apache.maven.plugin.AbstractMojo;\n@@ -28,6 +27,7 @@\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n+import net.zinfra.z4j.exception.ZipException;\n \n @Mojo(name = \"report\", threadSafe = true)\n public class AllureCommandline extends AbstractMojo {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 7 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport net.zinfra.z4j.exception.ZipException;\nimport io.qameta.allure.CommandLine;\nimport net.zinfra.z4j.io.ZipFile;\nimport org.apache.maven.plugin.AbstractMojo;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 7 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport net.zinfra.z4j.exception.ZipException;\nimport io.qameta.allure.CommandLine;\nimport net.zinfra.z4j.io.ZipFile;\nimport org.apache.maven.plugin.AbstractMojo;\n```",
            "span_id": 15895820324370466119
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -17,6 +17,7 @@\n package io.qameta.allure.maven;\n \n import io.qameta.allure.CommandLine;\n+import net.zinfra.z4j.exception.ZipException;\n import net.zinfra.z4j.io.ZipFile;\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugins.annotations.Mojo;\n@@ -27,7 +28,6 @@\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n-import net.zinfra.z4j.exception.ZipException;\n \n @Mojo(name = \"report\", threadSafe = true)\n public class AllureCommandline extends AbstractMojo {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 6 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport io.qameta.allure.CommandLine;\nimport net.zinfra.z4j.io.ZipFile;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugins.annotations.Mojo;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 8 exact lines in a row:\n```\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.List;\nimport net.zinfra.z4j.exception.ZipException;\n@Mojo(name = \"report\", threadSafe = true)\npublic class AllureCommandline extends AbstractMojo {\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 6 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport io.qameta.allure.CommandLine;\nimport net.zinfra.z4j.io.ZipFile;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugins.annotations.Mojo;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 8 exact lines in a row:\n```\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.List;\nimport net.zinfra.z4j.exception.ZipException;\n@Mojo(name = \"report\", threadSafe = true)\npublic class AllureCommandline extends AbstractMojo {\n```",
            "span_id": 2897670730561797427
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -16,6 +16,7 @@\n \n package io.qameta.allure.maven;\n \n+import net.zinfra.z4j.exception.ZipException;\n import io.qameta.allure.CommandLine;\n import net.zinfra.z4j.exception.ZipException;\n import net.zinfra.z4j.io.ZipFile;\n\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO]\n[INFO] -------------------< io.qameta.allure:allure-maven >--------------------\n[INFO] Building Allure Maven 2.12-SNAPSHOT\n[INFO] from pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ allure-maven ---\n[INFO] Deleting /mnt/repo/target\n[INFO]\n[INFO] --- checkstyle:3.1.2:check (validate) @ allure-maven ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] >>> pmd:3.15.0:check (validate) > :pmd @ allure-maven >>>\n[INFO]\n[INFO] --- pmd:3.15.0:pmd (pmd) @ allure-maven ---\n[INFO] PMD version: 6.40.0\n[INFO]\n[INFO] <<< pmd:3.15.0:check (validate) < :pmd @ allure-maven <<<\n[INFO]\n[INFO]\n[INFO] --- pmd:3.15.0:check (validate) @ allure-maven ---\n[INFO] PMD version: 6.40.0\n[INFO] PMD Failure: io.qameta.allure.maven.AllureCommandline:18 Rule:UnnecessaryImport Priority:4 Unused import 'net.zinfra.z4j.exception.ZipException'.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.959 s\n[INFO] Finished at: 2024-08-03T17:48:36Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-pmd-plugin:3.15.0:check (validate) on project allure-maven: You have 1 PMD violation. For more details see: /mnt/repo/target/pmd.xml -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
                "updated_files": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.zinfra.z4j.exception.ZipException;\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO]\n[INFO] -------------------< io.qameta.allure:allure-maven >--------------------\n[INFO] Building Allure Maven 2.12-SNAPSHOT\n[INFO] from pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ allure-maven ---\n[INFO] Deleting /mnt/repo/target\n[INFO]\n[INFO] --- checkstyle:3.1.2:check (validate) @ allure-maven ---\n[INFO] Starting audit...\nAudit done.\n[INFO] You have 0 Checkstyle violations.\n[INFO]\n[INFO] >>> pmd:3.15.0:check (validate) > :pmd @ allure-maven >>>\n[INFO]\n[INFO] --- pmd:3.15.0:pmd (pmd) @ allure-maven ---\n[INFO] PMD version: 6.40.0\n[INFO]\n[INFO] <<< pmd:3.15.0:check (validate) < :pmd @ allure-maven <<<\n[INFO]\n[INFO]\n[INFO] --- pmd:3.15.0:check (validate) @ allure-maven ---\n[INFO] PMD version: 6.40.0\n[INFO] PMD Failure: io.qameta.allure.maven.AllureCommandline:18 Rule:UnnecessaryImport Priority:4 Unused import 'net.zinfra.z4j.exception.ZipException'.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.959 s\n[INFO] Finished at: 2024-08-03T17:48:36Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-pmd-plugin:3.15.0:check (validate) on project allure-maven: You have 1 PMD violation. For more details see: /mnt/repo/target/pmd.xml -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
            "span_id": 11885697549772066960
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -18,7 +18,6 @@\n \n import net.zinfra.z4j.exception.ZipException;\n import io.qameta.allure.CommandLine;\n-import net.zinfra.z4j.exception.ZipException;\n import net.zinfra.z4j.io.ZipFile;\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugins.annotations.Mojo;\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "package net.lingala.zip4j.core does not exist\n",
                "updated_files": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": {
                        "18": {
                            "lines": [
                                {
                                    "line_no": 17,
                                    "content": ""
                                },
                                {
                                    "line_no": 18,
                                    "content": "import net.lingala.zip4j.core.ZipFile;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import net.lingala.zip4j.exception.ZipException;"
                                }
                            ],
                            "error_texts": [
                                "[18,30] package net.lingala.zip4j.core does not exist\n"
                            ]
                        }
                    }
                }
            },
            "error": "package net.lingala.zip4j.core does not exist\n",
            "span_id": 3411575401463009661
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -16,7 +16,6 @@\n \n package io.qameta.allure.maven;\n \n-import net.zinfra.z4j.exception.ZipException;\n import io.qameta.allure.CommandLine;\n import net.zinfra.z4j.io.ZipFile;\n import org.apache.maven.plugin.AbstractMojo;\n@@ -28,6 +27,7 @@\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n+import net.zinfra.z4j.exception.ZipException;\n \n @Mojo(name = \"report\", threadSafe = true)\n public class AllureCommandline extends AbstractMojo {\n\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 7 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport net.zinfra.z4j.exception.ZipException;\nimport io.qameta.allure.CommandLine;\nimport net.zinfra.z4j.io.ZipFile;\nimport org.apache.maven.plugin.AbstractMojo;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 7 exact lines in a row:\n```\npackage io.qameta.allure.maven;\nimport net.zinfra.z4j.exception.ZipException;\nimport io.qameta.allure.CommandLine;\nimport net.zinfra.z4j.io.ZipFile;\nimport org.apache.maven.plugin.AbstractMojo;\n```",
            "span_id": 17734672846856266469
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -16,6 +16,7 @@\n \n package io.qameta.allure.maven;\n \n+import net.zinfra.z4j.exception.ZipException;\n import io.qameta.allure.CommandLine;\n import net.zinfra.z4j.io.ZipFile;\n import org.apache.maven.plugin.AbstractMojo;\n@@ -27,7 +28,6 @@\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n-import net.zinfra.z4j.exception.ZipException;\n \n @Mojo(name = \"report\", threadSafe = true)\n public class AllureCommandline extends AbstractMojo {\n\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO]\n[INFO] -------------------< io.qameta.allure:allure-maven >--------------------\n[INFO] Building Allure Maven 2.12-SNAPSHOT\n[INFO] from pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ allure-maven ---\n[INFO] Deleting /mnt/repo/target\n[INFO]\n[INFO] --- checkstyle:3.1.2:check (validate) @ allure-maven ---\n[INFO] Starting audit...\n[ERROR] /mnt/repo/src/main/java/io/qameta/allure/maven/AllureCommandline.java:1: File does not end with a newline. [NewlineAtEndOfFile]\nAudit done.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 10.383 s\n[INFO] Finished at: 2024-08-03T17:49:29Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.1.2:check (validate) on project allure-maven: Failed during checkstyle execution: There is 1 error reported by Checkstyle 9.1 with /mnt/repo/maven/quality-configs/checkstyle/checkstyle.xml ruleset. -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
                "updated_files": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n}\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n}\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n}\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n}\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n}\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n}\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n}\n        return execute(commandLine, timeout);\n}\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n}\n        }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n}\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n}\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n}\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n}\n\n    public boolean allureNotExists() {\n        return !allureExists();\n}\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\ntry {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n} else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n}\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n}\n        }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\nreturn;\n}\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n@Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n}\n});\n}\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n} else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n}\n\n        unpack(allureZip.toFile());\n}\n\n    private void unpack(final File file) throws IOException {\ntry {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n}\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n}\n        }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n}\n\n    public String getVersion() {\n        return version;\n}\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n}\n    }"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO]\n[INFO] -------------------< io.qameta.allure:allure-maven >--------------------\n[INFO] Building Allure Maven 2.12-SNAPSHOT\n[INFO] from pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ allure-maven ---\n[INFO] Deleting /mnt/repo/target\n[INFO]\n[INFO] --- checkstyle:3.1.2:check (validate) @ allure-maven ---\n[INFO] Starting audit...\n[ERROR] /mnt/repo/src/main/java/io/qameta/allure/maven/AllureCommandline.java:1: File does not end with a newline. [NewlineAtEndOfFile]\nAudit done.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 10.383 s\n[INFO] Finished at: 2024-08-03T17:49:29Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.1.2:check (validate) on project allure-maven: Failed during checkstyle execution: There is 1 error reported by Checkstyle 9.1 with /mnt/repo/maven/quality-configs/checkstyle/checkstyle.xml ruleset. -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
            "span_id": 1254871918365436716
        },
        {
            "input": "```diff\n--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -148,7 +148,7 @@\n \n     private boolean isWindows() {\n         return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n-    }\n-}\n+    }    \n+}\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO]\n[INFO] -------------------< io.qameta.allure:allure-maven >--------------------\n[INFO] Building Allure Maven 2.12-SNAPSHOT\n[INFO] from pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ allure-maven ---\n[INFO] Deleting /mnt/repo/target\n[INFO]\n[INFO] --- checkstyle:3.1.2:check (validate) @ allure-maven ---\n[INFO] Starting audit...\n[ERROR] /mnt/repo/src/main/java/io/qameta/allure/maven/AllureCommandline.java:1: File does not end with a newline. [NewlineAtEndOfFile]\nAudit done.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 10.271 s\n[INFO] Finished at: 2024-08-03T17:49:57Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.1.2:check (validate) on project allure-maven: Failed during checkstyle execution: There is 1 error reported by Checkstyle 9.1 with /mnt/repo/maven/quality-configs/checkstyle/checkstyle.xml ruleset. -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
                "updated_files": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n}\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n}\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n}\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n}\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n}\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n}\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n}\n        return execute(commandLine, timeout);\n}\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n}\n        }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n}\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n}\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n}\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n}\n\n    public boolean allureNotExists() {\n        return !allureExists();\n}\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\ntry {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n} else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n}\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n}\n        }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\nreturn;\n}\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n@Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n}\n});\n}\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n} else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n}\n\n        unpack(allureZip.toFile());\n}\n\n    private void unpack(final File file) throws IOException {\ntry {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n}\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n}\n        }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n}\n\n    public String getVersion() {\n        return version;\n}\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n}    \n    }"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO]\n[INFO] -------------------< io.qameta.allure:allure-maven >--------------------\n[INFO] Building Allure Maven 2.12-SNAPSHOT\n[INFO] from pom.xml\n[INFO] ----------------------------[ maven-plugin ]----------------------------\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ allure-maven ---\n[INFO] Deleting /mnt/repo/target\n[INFO]\n[INFO] --- checkstyle:3.1.2:check (validate) @ allure-maven ---\n[INFO] Starting audit...\n[ERROR] /mnt/repo/src/main/java/io/qameta/allure/maven/AllureCommandline.java:1: File does not end with a newline. [NewlineAtEndOfFile]\nAudit done.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 10.271 s\n[INFO] Finished at: 2024-08-03T17:49:57Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.1.2:check (validate) on project allure-maven: Failed during checkstyle execution: There is 1 error reported by Checkstyle 9.1 with /mnt/repo/maven/quality-configs/checkstyle/checkstyle.xml ruleset. -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
            "span_id": 1353640452939373618
        }
    ],
    "read_file": [],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}