diff --git a/src/main/java/io/qameta/allure/maven/AllureCommandline.java b/src/main/java/io/qameta/allure/maven/AllureCommandline.java
index 51fb3b3..793efba 100644
--- a/src/main/java/io/qameta/allure/maven/AllureCommandline.java
+++ b/src/main/java/io/qameta/allure/maven/AllureCommandline.java
@@ -63,14 +63,14 @@ public class AllureCommandline {
 
     public AllureCommandline(final Path installationDirectory, final String version) {
         this(installationDirectory, version, DEFAULT_TIMEOUT);
-    }
+}
 
     public AllureCommandline(final Path installationDirectory, final String version,
             final int timeout) {
         this.installationDirectory = installationDirectory;
         this.version = version != null ? version : ALLURE_DEFAULT_VERSION;
         this.timeout = timeout;
-    }
+}
 
     public int generateReport(final List<Path> resultsPaths, final Path reportPath)
             throws IOException {
@@ -85,12 +85,12 @@ public class AllureCommandline {
         commandLine.addArgument("--clean");
         for (Path resultsPath : resultsPaths) {
             commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);
-        }
+}
         commandLine.addArgument("-o");
         commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);
 
         return execute(commandLine, timeout);
-    }
+}
 
     public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,
             final Integer servePort) throws IOException {
@@ -105,23 +105,23 @@ public class AllureCommandline {
         if (serveHost != null && serveHost.matches("(\\d{1,3}\\.){3}\\d{1,3}")) {
             commandLine.addArgument("--host");
             commandLine.addArgument(serveHost);
-        }
+}
         if (servePort > 0) {
             commandLine.addArgument("--port");
             commandLine.addArgument(Objects.toString(servePort));
-        }
+}
         for (Path resultsPath : resultsPaths) {
             commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);
-        }
+}
         return execute(commandLine, timeout);
-    }
+}
 
     private void checkAllureExists() throws FileNotFoundException {
         if (allureNotExists()) {
             throw new FileNotFoundException("There is no valid allure installation."
                     + " Make sure you're using allure version not less then 2.x.");
+}
         }
-    }
 
     private int execute(final CommandLine commandLine, final int timeout) throws IOException {
         final DefaultExecutor executor = new DefaultExecutor();
@@ -129,25 +129,25 @@ public class AllureCommandline {
         executor.setWatchdog(watchdog);
         executor.setExitValue(0);
         return executor.execute(commandLine);
-    }
+}
 
     private Path getAllureExecutablePath() {
         final String allureExecutable = isWindows() ? "allure.bat" : "allure";
         return getAllureHome().resolve("bin").resolve(allureExecutable);
-    }
+}
 
     private Path getAllureHome() {
         return installationDirectory.resolve(String.format("allure-%s", version));
-    }
+}
 
     public boolean allureExists() {
         final Path allureExecutablePath = getAllureExecutablePath();
         return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);
-    }
+}
 
     public boolean allureNotExists() {
         return !allureExists();
-    }
+}
 
     public void downloadWithMaven(final MavenSession session,
             final DependencyResolver dependencyResolver) throws IOException {
@@ -161,27 +161,27 @@ public class AllureCommandline {
         cliDep.setVersion(version);
         cliDep.setType("zip");
 
-        try {
+try {
             final Iterator<ArtifactResult> resolved =
                     dependencyResolver.resolveDependencies(buildingRequest,
                             Collections.singletonList(cliDep), null, null).iterator();
 
             if (resolved.hasNext()) {
                 unpack(resolved.next().getArtifact().getFile());
-            } else {
+} else {
                 throw new IOException("No allure commandline artifact found.");
 
-            }
+}
         } catch (DependencyResolverException e) {
             throw new IOException("Cannot resolve allure commandline dependencies.", e);
+}
         }
-    }
 
     public void download(final String allureDownloadUrl, final Proxy mavenProxy)
             throws IOException {
         if (allureExists()) {
-            return;
-        }
+return;
+}
 
         final Path allureZip = Files.createTempFile("allure", version);
         final String allureUrl = String.format(allureDownloadUrl, version, version);
@@ -196,46 +196,46 @@ public class AllureCommandline {
                 final String proxyPassword = mavenProxy.getPassword();
 
                 Authenticator.setDefault(new Authenticator() {
-                    @Override
+@Override
                     public PasswordAuthentication getPasswordAuthentication() {
                         return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());
-                    }
-                });
-            }
+}
+});
+}
 
             final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);
             final InputStream inputStream = url.openConnection(proxy).getInputStream();
             Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);
-        } else {
+} else {
             FileUtils.copyURLToFile(url, allureZip.toFile());
-        }
+}
 
         unpack(allureZip.toFile());
-    }
+}
 
     private void unpack(final File file) throws IOException {
-        try {
+try {
             final ZipFile zipFile = new ZipFile(file);
             zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());
         } catch (ZipException e) {
             throw new IOException(e);
-        }
+}
 
         final Path allureExecutable = getAllureExecutablePath();
         if (Files.exists(allureExecutable)) {
             allureExecutable.toFile().setExecutable(true);
+}
         }
-    }
 
     public Path getInstallationDirectory() {
         return installationDirectory;
-    }
+}
 
     public String getVersion() {
         return version;
-    }
+}
 
     private boolean isWindows() {
         return System.getProperty("os.name").toLowerCase().contains("win");
-    }
-}
+}    
+    }
\ No newline at end of file