{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -1,2 +1,2 @@\n /*\n- *  Copyright 2021 Qameta Software O\u00dc\n+ *  Copyright 2021 Qameta Software O\u00dc\n  *\n@@ -5,2 +5,2 @@\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n@@ -7,2 +7,2 @@\n- *  you may not use this file except in compliance with the License.\n+ *  you may not use this file except in compliance with the License.\n@@ -18,1 +18,1 @@\n-import net.lingala.zip4j.core.ZipFile;\n+import net.lingala.zip4j.ZipFile;\n@@ -19,1 +19,1 @@\n-import net.lingala.zip4j.exception.ZipException;\n+import net.lingala.zip4j.ZipException;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.ZipFile;\nimport net.lingala.zip4j.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": {
                        "19": {
                            "lines": [
                                {
                                    "line_no": 18,
                                    "content": "import net.lingala.zip4j.ZipFile;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import net.lingala.zip4j.ZipException;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import org.apache.commons.exec.CommandLine;"
                                }
                            ],
                            "error_texts": [
                                "[19,25] cannot find symbol\nsymbol: class ZipException\nlocation: package net.lingala.zip4j\n",
                                "[19,25] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 12886556279032311070
        },
        {
            "input": "```diff\n--- src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -18,1 +18,1 @@\n-import net.lingala.zip4j.core.ZipFile;\n+import net.lingala.zip4j.ZipFile;\n@@ -19,1 +19,1 @@\n-import net.lingala.zip4j.exception.ZipException;\n+import net.lingala.zip4j.ZipException;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 1 exact lines in a row:\n```\nimport net.lingala.zip4j.core.ZipFile;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 1 exact lines in a row:\n```\nimport net.lingala.zip4j.exception.ZipException;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 1 exact lines in a row:\n```\nimport net.lingala.zip4j.core.ZipFile;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 1 exact lines in a row:\n```\nimport net.lingala.zip4j.exception.ZipException;\n```",
            "span_id": 17127102049683755378
        },
        {
            "input": "```diff\n--- src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -18,1 +18,1 @@\n-import net.lingala.zip4j.core.ZipFile;\n+import net.lingala.zip4j.ZipFile;\n@@ -19,1 +19,1 @@\n-import net.lingala.zip4j.exception.ZipException;\n+import net.lingala.zip4j.ZipException;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.ZipFile;\nimport net.lingala.zip4j.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": {
                        "19": {
                            "lines": [
                                {
                                    "line_no": 18,
                                    "content": "import net.lingala.zip4j.ZipFile;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import net.lingala.zip4j.ZipException;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import org.apache.commons.exec.CommandLine;"
                                }
                            ],
                            "error_texts": [
                                "[19,25] cannot find symbol\nsymbol: class ZipException\nlocation: package net.lingala.zip4j\n",
                                "[19,25] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 10832930604620821046
        },
        {
            "input": "```diff\n--- src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -18,1 +18,1 @@\n-import net.lingala.zip4j.ZipFile;\n+import net.lingala.zip4j.core.ZipFile;\n@@ -19,1 +19,1 @@\n-import net.lingala.zip4j.ZipException;\n+import net.lingala.zip4j.exception.ZipException;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "package net.lingala.zip4j.core does not exist\n",
                "updated_files": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": {
                        "18": {
                            "lines": [
                                {
                                    "line_no": 17,
                                    "content": ""
                                },
                                {
                                    "line_no": 18,
                                    "content": "import net.lingala.zip4j.core.ZipFile;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import net.lingala.zip4j.exception.ZipException;"
                                }
                            ],
                            "error_texts": [
                                "[18,30] package net.lingala.zip4j.core does not exist\n"
                            ]
                        }
                    }
                }
            },
            "error": "package net.lingala.zip4j.core does not exist\n",
            "span_id": 18066167705708895727
        },
        {
            "input": "```diff\n--- src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -18,1 +18,1 @@\n-import net.lingala.zip4j.core.ZipFile;\n+import net.lingala.zip4j.ZipFile;\n@@ -19,1 +19,1 @@\n-import net.lingala.zip4j.exception.ZipException;\n+import net.lingala.zip4j.ZipException;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.ZipFile;\nimport net.lingala.zip4j.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/io/qameta/allure/maven/AllureCommandline.java": {
                        "19": {
                            "lines": [
                                {
                                    "line_no": 18,
                                    "content": "import net.lingala.zip4j.ZipFile;"
                                },
                                {
                                    "line_no": 19,
                                    "content": "import net.lingala.zip4j.ZipException;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "import org.apache.commons.exec.CommandLine;"
                                }
                            ],
                            "error_texts": [
                                "[19,25] cannot find symbol\nsymbol: class ZipException\nlocation: package net.lingala.zip4j\n",
                                "[19,25] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 15829732206482395899
        },
        {
            "input": "```diff\n--- src/main/java/io/qameta/allure/maven/AllureCommandline.java\n+++ src/main/java/io/qameta/allure/maven/AllureCommandline.java\n@@ -18,1 +18,1 @@\n-import net.lingala.zip4j.ZipFile;\n+import net.lingala.zip4j.core.ZipFile;\n@@ -19,1 +19,1 @@\n-import net.lingala.zip4j.ZipException;\n+import net.lingala.zip4j.exception.ZipException;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 1 exact lines in a row:\n```\nimport net.lingala.zip4j.ZipFile;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 1 exact lines in a row:\n```\nimport net.lingala.zip4j.ZipException;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 1 exact lines in a row:\n```\nimport net.lingala.zip4j.ZipFile;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/io/qameta/allure/maven/AllureCommandline.java!\nMake extra sure the indentation is correct.\nsrc/main/java/io/qameta/allure/maven/AllureCommandline.java does not contain these 1 exact lines in a row:\n```\nimport net.lingala.zip4j.ZipException;\n```",
            "span_id": 17854312620480801054
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/io/qameta/allure/maven/AllureCommandline.java",
            "output": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n",
            "error": "",
            "span_id": 4983536191026547344
        },
        {
            "input": "src/main/java/io/qameta/allure/maven/AllureCommandline.java",
            "output": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n",
            "error": "",
            "span_id": 15147408603963612843
        },
        {
            "input": "src/main/java/io/qameta/allure/maven/AllureCommandline.java",
            "output": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.core.ZipFile;\nimport net.lingala.zip4j.exception.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n",
            "error": "",
            "span_id": 16674851407417545740
        },
        {
            "input": "src/main/java/io/qameta/allure/maven/AllureCommandline.java",
            "output": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.ZipFile;\nimport net.lingala.zip4j.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n",
            "error": "",
            "span_id": 13195170835358870126
        },
        {
            "input": "src/main/java/io/qameta/allure/maven/AllureCommandline.java",
            "output": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.ZipFile;\nimport net.lingala.zip4j.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n",
            "error": "",
            "span_id": 11494581186298440648
        },
        {
            "input": "src/main/java/io/qameta/allure/maven/AllureCommandline.java",
            "output": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.ZipFile;\nimport net.lingala.zip4j.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n",
            "error": "",
            "span_id": 5717274673670841764
        },
        {
            "input": "src/main/java/io/qameta/allure/maven/AllureCommandline.java",
            "output": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.ZipFile;\nimport net.lingala.zip4j.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n",
            "error": "",
            "span_id": 2430143852968625728
        },
        {
            "input": "src/main/java/io/qameta/allure/maven/AllureCommandline.java",
            "output": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.ZipFile;\nimport net.lingala.zip4j.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n",
            "error": "",
            "span_id": 8661340167013010934
        },
        {
            "input": "src/main/java/io/qameta/allure/maven/AllureCommandline.java",
            "output": "/*\n *  Copyright 2021 Qameta Software O\u00dc\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage io.qameta.allure.maven;\n\nimport net.lingala.zip4j.ZipFile;\nimport net.lingala.zip4j.ZipException;\nimport org.apache.commons.exec.CommandLine;\nimport org.apache.commons.exec.DefaultExecutor;\nimport org.apache.commons.exec.ExecuteWatchdog;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.project.DefaultProjectBuildingRequest;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.settings.Proxy;\nimport org.apache.maven.shared.transfer.artifact.resolve.ArtifactResult;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver;\nimport org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolverException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings({\"ClassDataAbstractionCoupling\", \"ClassFanOutComplexity\",\n        \"MultipleStringLiterals\"})\npublic class AllureCommandline {\n\n    public static final String ALLURE_DEFAULT_VERSION = \"2.13.9\";\n\n    private static final int DEFAULT_TIMEOUT = 3600;\n\n    private final String version;\n\n    private final int timeout;\n\n    private final Path installationDirectory;\n\n    public AllureCommandline(final Path installationDirectory, final String version) {\n        this(installationDirectory, version, DEFAULT_TIMEOUT);\n    }\n\n    public AllureCommandline(final Path installationDirectory, final String version,\n            final int timeout) {\n        this.installationDirectory = installationDirectory;\n        this.version = version != null ? version : ALLURE_DEFAULT_VERSION;\n        this.timeout = timeout;\n    }\n\n    public int generateReport(final List<Path> resultsPaths, final Path reportPath)\n            throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"generate\");\n        commandLine.addArgument(\"--clean\");\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        commandLine.addArgument(\"-o\");\n        commandLine.addArgument(reportPath.toAbsolutePath().toString(), true);\n\n        return execute(commandLine, timeout);\n    }\n\n    public int serve(final List<Path> resultsPaths, final Path reportPath, final String serveHost,\n            final Integer servePort) throws IOException {\n\n        this.checkAllureExists();\n\n        FileUtils.deleteQuietly(reportPath.toFile());\n\n        final CommandLine commandLine =\n                new CommandLine(getAllureExecutablePath().toAbsolutePath().toFile());\n        commandLine.addArgument(\"serve\");\n        if (serveHost != null && serveHost.matches(\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\")) {\n            commandLine.addArgument(\"--host\");\n            commandLine.addArgument(serveHost);\n        }\n        if (servePort > 0) {\n            commandLine.addArgument(\"--port\");\n            commandLine.addArgument(Objects.toString(servePort));\n        }\n        for (Path resultsPath : resultsPaths) {\n            commandLine.addArgument(resultsPath.toAbsolutePath().toString(), true);\n        }\n        return execute(commandLine, timeout);\n    }\n\n    private void checkAllureExists() throws FileNotFoundException {\n        if (allureNotExists()) {\n            throw new FileNotFoundException(\"There is no valid allure installation.\"\n                    + \" Make sure you're using allure version not less then 2.x.\");\n        }\n    }\n\n    private int execute(final CommandLine commandLine, final int timeout) throws IOException {\n        final DefaultExecutor executor = new DefaultExecutor();\n        final ExecuteWatchdog watchdog = new ExecuteWatchdog(TimeUnit.SECONDS.toMillis(timeout));\n        executor.setWatchdog(watchdog);\n        executor.setExitValue(0);\n        return executor.execute(commandLine);\n    }\n\n    private Path getAllureExecutablePath() {\n        final String allureExecutable = isWindows() ? \"allure.bat\" : \"allure\";\n        return getAllureHome().resolve(\"bin\").resolve(allureExecutable);\n    }\n\n    private Path getAllureHome() {\n        return installationDirectory.resolve(String.format(\"allure-%s\", version));\n    }\n\n    public boolean allureExists() {\n        final Path allureExecutablePath = getAllureExecutablePath();\n        return Files.exists(allureExecutablePath) && Files.isExecutable(allureExecutablePath);\n    }\n\n    public boolean allureNotExists() {\n        return !allureExists();\n    }\n\n    public void downloadWithMaven(final MavenSession session,\n            final DependencyResolver dependencyResolver) throws IOException {\n        final ProjectBuildingRequest buildingRequest =\n                new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());\n        buildingRequest.setResolveDependencies(false);\n\n        final Dependency cliDep = new Dependency();\n        cliDep.setGroupId(\"io.qameta.allure\");\n        cliDep.setArtifactId(\"allure-commandline\");\n        cliDep.setVersion(version);\n        cliDep.setType(\"zip\");\n\n        try {\n            final Iterator<ArtifactResult> resolved =\n                    dependencyResolver.resolveDependencies(buildingRequest,\n                            Collections.singletonList(cliDep), null, null).iterator();\n\n            if (resolved.hasNext()) {\n                unpack(resolved.next().getArtifact().getFile());\n            } else {\n                throw new IOException(\"No allure commandline artifact found.\");\n\n            }\n        } catch (DependencyResolverException e) {\n            throw new IOException(\"Cannot resolve allure commandline dependencies.\", e);\n        }\n    }\n\n    public void download(final String allureDownloadUrl, final Proxy mavenProxy)\n            throws IOException {\n        if (allureExists()) {\n            return;\n        }\n\n        final Path allureZip = Files.createTempFile(\"allure\", version);\n        final String allureUrl = String.format(allureDownloadUrl, version, version);\n        final URL url = new URL(allureUrl);\n\n        if (mavenProxy != null && version != null) {\n            final InetSocketAddress proxyAddress =\n                    new InetSocketAddress(mavenProxy.getHost(), mavenProxy.getPort());\n\n            if (mavenProxy.getUsername() != null && mavenProxy.getPassword() != null) {\n                final String proxyUser = mavenProxy.getUsername();\n                final String proxyPassword = mavenProxy.getPassword();\n\n                Authenticator.setDefault(new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                    }\n                });\n            }\n\n            final java.net.Proxy proxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, proxyAddress);\n            final InputStream inputStream = url.openConnection(proxy).getInputStream();\n            Files.copy(inputStream, allureZip, StandardCopyOption.REPLACE_EXISTING);\n        } else {\n            FileUtils.copyURLToFile(url, allureZip.toFile());\n        }\n\n        unpack(allureZip.toFile());\n    }\n\n    private void unpack(final File file) throws IOException {\n        try {\n            final ZipFile zipFile = new ZipFile(file);\n            zipFile.extractAll(getInstallationDirectory().toAbsolutePath().toString());\n        } catch (ZipException e) {\n            throw new IOException(e);\n        }\n\n        final Path allureExecutable = getAllureExecutablePath();\n        if (Files.exists(allureExecutable)) {\n            allureExecutable.toFile().setExecutable(true);\n        }\n    }\n\n    public Path getInstallationDirectory() {\n        return installationDirectory;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    private boolean isWindows() {\n        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n    }\n}\n",
            "error": "",
            "span_id": 7491756652181479560
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 10838848222265810659
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 16107947474612543664
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 17405534507761724152
        }
    ]
}