{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -13,7 +13,7 @@ import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.server.ServerConnector;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.eclipse.jetty.server.handler.HandlerCollection;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -32,10 +32,10 @@ public class JettyStubHttpServer implements StubHttpServer {\n         this.server = new Server();\n         this.server.setHandler(new HandlerCollection(new JadlerHandler()));\n \n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(false);\n+        ((ServerConnector)this.server.getConnectors()[0]).setSendServerVersion(false);\n+        ((ServerConnector)this.server.getConnectors()[0]).setSendDateHeader(false);\n \n-        ServerConnector httpConnector = new SelectChannelConnector();\n+        ServerConnector httpConnector = new ServerConnector(this.server);\n         httpConnector.setPort(port);\n         this.server.addConnector(httpConnector);\n     }\n@@ -77,7 +77,7 @@ public class JettyStubHttpServer implements StubHttpServer {\n \n     @Override\n     public int getLocalPort() {\n-        return httpConnector.getLocalPort();\n+        return ((ServerConnector)this.server.getConnectors()[0]).getLocalPort();\n     }\n \n     @Override\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -21,7 +21,7 @@ import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler implements Handler {\n \n     private static final Logger logger = LoggerFactory.getLogger(JadlerHandler.class);\n \n@@ -35,7 +35,7 @@ public class JadlerHandler extends AbstractHandler {\n     }\n \n     @Override\n-    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n+    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n         logger.debug(\"Handling request: {}\", request);\n \n         // handle the request\n```\n\nThe changes made in this diff are:\n\n1. Updated the `JettyStubHttpServer` class to use the `ServerConnector` class instead of the deprecated `SelectChannelConnector` class. This is necessary due to the version upgrade of the Jetty dependency.\n\n2. Updated the `setSendServerVersion` and `setSendDateHeader` methods to be called on the `ServerConnector` instance instead of the `Server` instance, as the methods are no longer available on the `Server` class.\n\n3. Updated the `JadlerHandler` class to implement the `Handler` interface, as the `handle` method signature has changed in the new Jetty version.\n\nThese changes should fix the compilation errors caused by the Jetty version upgrade.",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 10 exact lines in a row:\n```\nthis.server = new Server();\nthis.server.setHandler(new HandlerCollection(new JadlerHandler()));\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(false);\nServerConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nthis.server.addConnector(httpConnector);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 7 exact lines in a row:\n```\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class JadlerHandler extends AbstractHandler {\nprivate static final Logger logger = LoggerFactory.getLogger(JadlerHandler.class);\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 10 exact lines in a row:\n```\nthis.server = new Server();\nthis.server.setHandler(new HandlerCollection(new JadlerHandler()));\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(false);\nServerConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nthis.server.addConnector(httpConnector);\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 7 exact lines in a row:\n```\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class JadlerHandler extends AbstractHandler {\nprivate static final Logger logger = LoggerFactory.getLogger(JadlerHandler.class);\n```",
            "span_id": 9434143898544435487
        },
        {
            "input": "The diff I provided does not apply cleanly to the current state of the `JettyStubHttpServer` and `JadlerHandler` classes. Let me try again with a more accurate diff.\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -13,7 +13,7 @@ import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.server.ServerConnector;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.eclipse.jetty.server.handler.HandlerCollection;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -30,13 +30,13 @@ public class JettyStubHttpServer implements StubHttpServer {\n \n     public JettyStubHttpServer(int port) {\n         this.server = new Server();\n-        this.server.setHandler(new HandlerCollection(new JadlerHandler()));\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(new JadlerHandler());\n+        this.server.setHandler(handlerCollection);\n \n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(false);\n+        ((ServerConnector)this.server.getConnectors()[0]).setSendServerVersion(false);\n+        ((ServerConnector)this.server.getConnectors()[0]).setSendDateHeader(false);\n \n-        ServerConnector httpConnector = new SelectChannelConnector();\n-        httpConnector.setPort(port);\n         this.server.addConnector(new ServerConnector(this.server, port));\n     }\n \n@@ -77,7 +77,7 @@ public class JettyStubHttpServer implements StubHttpServer {\n \n     @Override\n     public int getLocalPort() {\n-        return httpConnector.getLocalPort();\n+        return ((ServerConnector)this.server.getConnectors()[0]).getLocalPort();\n     }\n \n     @Override\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -21,7 +21,7 @@ import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler implements Handler {\n \n     private static final Logger logger = LoggerFactory.getLogger(JadlerHandler.class);\n \n@@ -35,7 +35,7 @@ public class JadlerHandler extends AbstractHandler {\n     }\n \n     @Override\n-    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n+    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n         logger.debug(\"Handling request: {}\", request);\n \n         // handle the request\n```\n\nThe key changes in this diff are:\n\n1. In `JettyStubHttpServer`, I updated the way the `HandlerCollection` is created and added to the `Server` instance. This is to ensure the `JadlerHandler` is properly set as the handler.\n\n2. I changed the way the `ServerConnector` is created and added to the `Server` instance. Instead of using the deprecated `SelectChannelConnector`, I'm now using the `ServerConnector` constructor that takes the",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 13 exact lines in a row:\n```\npublic JettyStubHttpServer(int port) {\nthis.server = new Server();\nthis.server.setHandler(new HandlerCollection(new JadlerHandler()));\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(false);\nServerConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nthis.server.addConnector(new ServerConnector(this.server, port));\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 7 exact lines in a row:\n```\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class JadlerHandler extends AbstractHandler {\nprivate static final Logger logger = LoggerFactory.getLogger(JadlerHandler.class);\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 13 exact lines in a row:\n```\npublic JettyStubHttpServer(int port) {\nthis.server = new Server();\nthis.server.setHandler(new HandlerCollection(new JadlerHandler()));\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(false);\nServerConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nthis.server.addConnector(new ServerConnector(this.server, port));\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 7 exact lines in a row:\n```\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class JadlerHandler extends AbstractHandler {\nprivate static final Logger logger = LoggerFactory.getLogger(JadlerHandler.class);\n```",
            "span_id": 17715469048108904532
        },
        {
            "input": "Okay, let's start fresh. I'll generate a new diff that should apply cleanly.\n\n```diff\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -13,7 +13,7 @@ import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.server.ServerConnector;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.eclipse.jetty.server.handler.HandlerCollection;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -30,13 +30,13 @@ public class JettyStubHttpServer implements StubHttpServer {\n \n     public JettyStubHttpServer(int port) {\n         this.server = new Server();\n-        this.server.setHandler(new HandlerCollection(new JadlerHandler()));\n+        HandlerCollection handlerCollection = new HandlerCollection();\n+        handlerCollection.addHandler(new JadlerHandler());\n+        this.server.setHandler(handlerCollection);\n \n-        this.server.setSendServerVersion(false);\n-        this.server.setSendDateHeader(false);\n+        ((ServerConnector)this.server.getConnectors()[0]).setSendServerVersion(false);\n+        ((ServerConnector)this.server.getConnectors()[0]).setSendDateHeader(false);\n \n-        ServerConnector httpConnector = new SelectChannelConnector();\n-        httpConnector.setPort(port);\n         this.server.addConnector(new ServerConnector(this.server, port));\n     }\n \n@@ -77,7 +77,7 @@ public class JettyStubHttpServer implements StubHttpServer {\n \n     @Override\n     public int getLocalPort() {\n-        return httpConnector.getLocalPort();\n+        return ((ServerConnector)this.server.getConnectors()[0]).getLocalPort();\n     }\n \n     @Override\n--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -21,7 +21,7 @@ import org.eclipse.jetty.server.handler.AbstractHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler implements Handler {\n \n     private static final Logger logger = LoggerFactory.getLogger(JadlerHandler.class);\n \n@@ -35,7 +35,7 @@ public class JadlerHandler extends AbstractHandler {\n     }\n \n     @Override\n-    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n+    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n         logger.debug(\"Handling request: {}\", request);\n \n         // handle the request\n```\n\nThe key changes in this diff are:\n\n1. In `JettyStubHttpServer`, I updated the way the `HandlerCollection` is created and added to the `Server` instance. This is to ensure the `JadlerHandler` is properly set as the handler.\n\n2. I changed the way the `ServerConnector` is created and added to the `Server` instance. Instead of using the deprecated `SelectChannelConnector`, I'm now using the `ServerConnector` constructor that takes the `Server` instance and the port.\n\n3. In `JadlerHandler`, I updated the class to",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 13 exact lines in a row:\n```\npublic JettyStubHttpServer(int port) {\nthis.server = new Server();\nthis.server.setHandler(new HandlerCollection(new JadlerHandler()));\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(false);\nServerConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nthis.server.addConnector(new ServerConnector(this.server, port));\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 7 exact lines in a row:\n```\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class JadlerHandler extends AbstractHandler {\nprivate static final Logger logger = LoggerFactory.getLogger(JadlerHandler.class);\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 13 exact lines in a row:\n```\npublic JettyStubHttpServer(int port) {\nthis.server = new Server();\nthis.server.setHandler(new HandlerCollection(new JadlerHandler()));\nthis.server.setSendServerVersion(false);\nthis.server.setSendDateHeader(false);\nServerConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nthis.server.addConnector(new ServerConnector(this.server, port));\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java does not contain these 7 exact lines in a row:\n```\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class JadlerHandler extends AbstractHandler {\nprivate static final Logger logger = LoggerFactory.getLogger(JadlerHandler.class);\n```",
            "span_id": 2623269080537812209
        }
    ],
    "read_file": [
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.eclipse.jetty.server.Server;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n    \n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n        \n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n    \n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n    \n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n    \n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}",
            "error": "",
            "span_id": 12310132563746029843
        },
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.stubbing.StubResponse;\nimport net.jadler.RequestManager;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport net.jadler.KeyValues;\nimport org.apache.commons.lang.Validate;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler {\n\n    private final RequestManager requestManager;\n\n    \n    /**\n     * @param requestManager request manager instance to retrieve stub responses\n     */\n    JadlerHandler(final RequestManager requestManager) {\n        Validate.notNull(requestManager, \"requestManager cannot be null\");\n        this.requestManager = requestManager;\n    }\n\n\n    @Override\n    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n            final HttpServletResponse response) throws IOException, ServletException {\n\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n        \n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);        \n        \n        baseRequest.setHandled(true);\n        \n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n    }\n\n    \n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n        }\n    }\n\n    \n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key: headers.getKeys()) {\n            \n            for (final String value: headers.getValues(key)) {\n                response.addHeader(key, value);\n            }\n        }\n    }\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\n            try {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}",
            "error": "",
            "span_id": 8868736226174826598
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 10110841795346390685
        }
    ]
}