{
    "validate_diffs": [
        {
            "input": "```diff\n--- a/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n+++ b/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n@@ -1,3 +1,13 @@\n+import jakarta.validation.Validator;\n+import jakarta.validation.ValidatorFactory;\n+import jakarta.validation.metadata.BeanDescriptor;\n+import jakarta.validation.metadata.ConstraintDescriptor;\n+import jakarta.validation.metadata.ElementDescriptor;\n+import jakarta.validation.constraints.NotBlank;\n+import jakarta.validation.constraints.NotEmpty;\n+import jakarta.validation.constraints.NotNull;\n+\n public class ListControlGroups<T> {\n     private Validator validator;\n     private ValidatorFactory validatorFactory;\n@@ -37,9 +47,9 @@ public class ListControlGroups<T> extends Panel {\n         this.renderers = renderers;\n     }\n \n-    private Set<String> getPropertiesByOrder(Class<?> modelClass) {\n+    private Set<String> getPropertiesByOrder(Class<?> modelClass) {\n         Set<String> properties = new LinkedHashSet<String>();\n-\n+\n         for(String property : entitySettings.getOrderOfFields()){\n             if(!entitySettings.getHiddenFields().contains(property))\n                 properties.add(property);\n@@ -55,7 +65,7 @@ public class ListControlGroups<T> extends Panel {\n     }\n \n     protected abstract EntityProvider<?> getEntityProvider(String name);\n-\n+\n     @Override\n     protected void onInitialize() {\n         super.onInitialize();\n@@ -63,7 +73,7 @@ public class ListControlGroups<T> extends Panel {\n         Class<?> modelClass = getModel().getObject().getClass();\n \n         Set<String> properties = getPropertiesByOrder(modelClass);\n-\n+\n         Validator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n         BeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n         for(String property : properties){\n```\n",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain these 3 exact lines in a row:\n```\npublic class ListControlGroups<T> {\n    private Validator validator;\n    private ValidatorFactory validatorFactory;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain these 3 exact lines in a row:\n```\npublic class ListControlGroups<T> {\n    private Validator validator;\n    private ValidatorFactory validatorFactory;\n```\n",
            "span_id": 6758983754837133323
        },
        {
            "input": "```diff\n--- a/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n+++ b/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n@@ -1,3 +1,13 @@\n+import jakarta.validation.Validator;\n+import jakarta.validation.ValidatorFactory;\n+import jakarta.validation.metadata.BeanDescriptor;\n+import jakarta.validation.metadata.ConstraintDescriptor;\n+import jakarta.validation.metadata.ElementDescriptor;\n+import jakarta.validation.constraints.NotBlank;\n+import jakarta.validation.constraints.NotEmpty;\n+import jakarta.validation.constraints.NotNull;\n+\n public class ListControlGroups<T> extends Panel {\n     private Validator validator;\n     private ValidatorFactory validatorFactory;\n@@ -37,9 +47,9 @@ public class ListControlGroups<T> extends Panel {\n         this.renderers = renderers;\n     }\n \n-    private Set<String> getPropertiesByOrder(Class<?> modelClass) {\n+    private Set<String> getPropertiesByOrder(Class<?> modelClass) {\n         Set<String> properties = new LinkedHashSet<String>();\n-\n+\n         for(String property : entitySettings.getOrderOfFields()){\n             if(!entitySettings.getHiddenFields().contains(property))\n                 properties.add(property);\n@@ -55,7 +65,7 @@ public class ListControlGroups<T> extends Panel {\n     }\n \n     protected abstract EntityProvider<?> getEntityProvider(String name);\n-\n+\n     @Override\n     protected void onInitialize() {\n         super.onInitialize();\n@@ -63,7 +73,7 @@ public class ListControlGroups<T> extends Panel {\n         Class<?> modelClass = getModel().getObject().getClass();\n \n         Set<String> properties = getPropertiesByOrder(modelClass);\n-\n+\n         Validator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n         BeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n         for(String property : properties){\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain these 3 exact lines in a row:\n```\npublic class ListControlGroups<T> extends Panel {\n    private Validator validator;\n    private ValidatorFactory validatorFactory;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain these 3 exact lines in a row:\n```\npublic class ListControlGroups<T> extends Panel {\n    private Validator validator;\n    private ValidatorFactory validatorFactory;\n```\n",
            "span_id": 16973078435507253491
        },
        {
            "input": "```diff\n--- a/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n+++ b/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n@@ -1,3 +1,13 @@\n+import jakarta.validation.Validator;\n+import jakarta.validation.ValidatorFactory;\n+import jakarta.validation.metadata.BeanDescriptor;\n+import jakarta.validation.metadata.ConstraintDescriptor;\n+import jakarta.validation.metadata.ElementDescriptor;\n+import jakarta.validation.constraints.NotBlank;\n+import jakarta.validation.constraints.NotEmpty;\n+import jakarta.validation.constraints.NotNull;\n+\n public abstract class ListControlGroups<T> extends Panel {\n     private Validator validator;\n     private ValidatorFactory validatorFactory;\n```",
            "output": "{'src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java': '/**\\n * Copyright (C) 2014 Premium Minds.\\n *\\n * This file is part of wicket-crudifier.\\n *\\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\\n * the terms of the GNU Lesser General Public License as published by the Free\\n * Software Foundation, either version 3 of the License, or (at your option) any\\n * later version.\\n *\\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU Lesser General Public License\\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\\n */\\npackage com.premiumminds.wicket.crudifier.form.elements;\\n\\nimport java.beans.PropertyDescriptor;\\nimport java.io.Serializable;\\nimport java.lang.reflect.Constructor;\\nimport java.lang.reflect.InvocationTargetException;\\nimport java.math.BigDecimal;\\nimport java.math.BigInteger;\\nimport java.time.LocalDateTime;\\nimport java.time.temporal.Temporal;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Date;\\nimport java.util.HashMap;\\nimport java.util.LinkedHashSet;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Set;\\nimport javax.validation.Validator;\\nimport javax.validation.constraints.NotBlank;\\nimport javax.validation.constraints.NotEmpty;\\nimport javax.validation.constraints.NotNull;\\nimport javax.validation.metadata.BeanDescriptor;\\nimport javax.validation.metadata.ConstraintDescriptor;\\nimport javax.validation.metadata.ElementDescriptor;\\n\\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\\nimport org.apache.commons.beanutils.PropertyUtils;\\nimport org.apache.wicket.Component;\\nimport org.apache.wicket.markup.html.panel.Panel;\\nimport org.apache.wicket.markup.repeater.RepeatingView;\\nimport org.apache.wicket.model.IModel;\\nimport org.apache.wicket.model.PropertyModel;\\n\\nimport jakarta.validation.Validator;\\nimport jakarta.validation.ValidatorFactory;\\nimport jakarta.validation.metadata.BeanDescriptor;\\nimport jakarta.validation.metadata.ConstraintDescriptor;\\nimport jakarta.validation.metadata.ElementDescriptor;\\nimport jakarta.validation.constraints.NotBlank;\\nimport jakarta.validation.constraints.NotEmpty;\\nimport jakarta.validation.constraints.NotNull;\\n\\npublic abstract class ListControlGroups<T> extends Panel {\\n\\tprivate static final long serialVersionUID = 7205285700113097720L;\\n\\n\\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\\n\\n\\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\\n\\n\\t@SuppressWarnings(\"rawtypes\")\\n\\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\\n\\n\\tprivate List<ObjectProperties> objectProperties;\\n\\tprivate CrudifierEntitySettings entitySettings;\\n\\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\\n\\n\\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\\n\\t\\tsuper(id, model);\\n\\n\\t\\ttypesControlGroups.put(Date.class, DateControlGroup.class);\\n\\t\\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\\n\\t\\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\\n\\t\\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\\n\\t\\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\\n\\t\\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\\n\\t\\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\\n\\t\\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\\n\\t\\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\\n\\t\\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\\n\\t\\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\\n\\t\\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\\n\\t\\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\\n\\t\\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\\n\\t\\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\\n\\n\\t\\tobjectProperties = new ArrayList<ObjectProperties>();\\n\\t\\tthis.entitySettings = entitySettings;\\n\\t\\tthis.renderers = renderers;\\n\\t}\\n\\n\\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\\n\\t\\tSet<String> properties = new LinkedHashSet<String>();\\n\\n\\t\\tfor(String property : entitySettings.getOrderOfFields()){\\n\\t\\t\\tif(!entitySettings.getHiddenFields().contains(property))\\n\\t\\t\\t\\tproperties.add(property);\\n\\t\\t}\\n\\t\\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\\n\\t\\t\\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\\n\\t\\t\\t   !properties.contains(descriptor.getName()) &&\\n\\t\\t\\t   !descriptor.getName().equals(\"class\"))\\n\\t\\t\\t\\tproperties.add(descriptor.getName());\\n\\t\\t}\\n\\n\\t\\treturn properties;\\n\\t}\\n\\n\\tprotected abstract EntityProvider<?> getEntityProvider(String name);\\n\\n\\t@Override\\n\\tprotected void onInitialize() {\\n\\t\\tsuper.onInitialize();\\n\\n\\t\\tClass<?> modelClass = getModel().getObject().getClass();\\n\\n\\t\\tSet<String> properties = getPropertiesByOrder(modelClass);\\n\\n\\t\\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\\n\\t\\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\\n\\t\\tfor(String property : properties){\\n\\t\\t\\tPropertyDescriptor descriptor;\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\\n\\t\\t\\t} catch (Exception e) {\\n\\t\\t\\t\\tthrow new RuntimeException(\"error getting property \"+property, e);\\n\\t\\t\\t}\\n\\n\\t\\t\\tboolean required = false;\\n\\n\\t\\t\\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\\n\\t\\t\\tif(constraintDescriptor!=null){\\n\\t\\t\\t\\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\\n\\t\\t\\t\\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\\n\\t\\t\\t\\t\\tif(constraint.getAnnotation() instanceof NotNull ||\\n\\t\\t\\t\\t\\t   constraint.getAnnotation() instanceof NotEmpty ||\\n\\t\\t\\t\\t\\t   constraint.getAnnotation() instanceof NotBlank)\\n\\t\\t\\t\\t\\t\\trequired = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tobjectProperties.add(new ObjectProperties(descriptor, required));\\n\\t\\t}\\n\\t\\t\\n\\t\\tRepeatingView view = new RepeatingView(\"controlGroup\");\\n\\t\\tfor(ObjectProperties objectProperty : objectProperties){\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tAbstractControlGroup<?> controlGroup;\\n\\t\\t\\t\\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\\n\\t\\t\\t\\t\\tConstructor<?> constructor;\\n\\t\\t\\t\\t\\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\\n\\t\\t\\t\\t\\tif(typesControlGroup==null){\\n\\t\\t\\t\\t\\t\\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\\n\\t\\t\\t\\t\\t\\telse typesControlGroup = ObjectChoiceControlGroup.class;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\\n\\n\\t\\t\\t\\t\\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\\n\\t\\t\\t\\t\\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\\n\\t\\t\\t\\t\\tcontrolGroup.setEnabled(objectProperty.enabled);\\n\\n\\n\\t\\t\\t\\t\\tif(typesControlGroup==ObjectChoiceControlGroup.class){\\n\\t\\t\\t\\t\\t\\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\\n\\t\\t\\t\\t\\t\\tif(renderer==null){\\n\\t\\t\\t\\t\\t\\t\\trenderer = new IObjectRenderer<Object>() {\\n\\t\\t\\t\\t\\t\\t\\t\\tprivate static final long serialVersionUID = -6171655578529011405L;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tpublic String render(Object object) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn object.toString();\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\\n\\t\\t\\t\\t\\t} else if(typesControlGroup==CollectionControlGroup.class){\\n\\t\\t\\t\\t\\t\\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcontrolGroup = controlGroupProviders\\n\\t\\t\\t\\t\\t\\t\\t.get(objectProperty.type)\\n\\t\\t\\t\\t\\t\\t\\t.createControlGroup(view.newChildId()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tview.add(controlGroup);\\n\\n\\t\\t\\t\\tfieldComponents.put(objectProperty.name, controlGroup);\\n\\t\\t\\t} catch (SecurityException e) {\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\n\\t\\t\\t} catch (NoSuchMethodException e) {\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\n\\t\\t\\t} catch (IllegalArgumentException e) {\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\n\\t\\t\\t} catch (InstantiationException e) {\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\n\\t\\t\\t} catch (IllegalAccessException e) {\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\n\\t\\t\\t} catch (InvocationTargetException e) {\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tadd(view);\\n\\t}\\n\\n\\t@SuppressWarnings(\"unchecked\")\\n\\tpublic IModel<T> getModel(){\\n\\t\\treturn (IModel<T>) getDefaultModel();\\n\\t}\\n\\n\\tpublic Component getResourceBase(){\\n\\t\\treturn this;\\n\\t}\\n\\n\\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\\n\\t\\treturn Collections.unmodifiableMap(fieldComponents);\\n\\t}\\n\\n\\t@SuppressWarnings(\"rawtypes\")\\n\\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\\n\\t\\tfor(Class<?> mapType : typesControlGroups.keySet()){\\n\\t\\t\\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\n\\tprivate static final class ObjectProperties implements Serializable {\\n\\t\\tprivate static final long serialVersionUID = 1747577998897955928L;\\n\\t\\tprivate String name;\\n\\t\\tprivate boolean enabled;\\n\\t\\tprivate Class<?> type;\\n\\t\\tprivate boolean required;\\n\\n\\t\\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\\n\\t\\t\\tthis.name = descriptor.getName();\\n\\t\\t\\tthis.enabled = descriptor.getWriteMethod()!=null;\\n\\t\\t\\tthis.type = descriptor.getPropertyType();\\n\\t\\t\\tthis.required = required;\\n\\t\\t}\\n\\t}\\n\\n\\t@SuppressWarnings(\"rawtypes\")\\n\\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\\n\\t\\treturn typesControlGroups;\\n\\t}\\n\\t\\n\\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\\n\\t\\treturn this.controlGroupProviders;\\n\\t}\\n}\\n'}",
            "error": "",
            "span_id": 10808125541000664531
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- a/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n+++ b/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n@@ -1,3 +1,13 @@\n+import jakarta.validation.Validator;\n+import jakarta.validation.ValidatorFactory;\n+import jakarta.validation.metadata.BeanDescriptor;\n+import jakarta.validation.metadata.ConstraintDescriptor;\n+import jakarta.validation.metadata.ElementDescriptor;\n+import jakarta.validation.constraints.NotBlank;\n+import jakarta.validation.constraints.NotEmpty;\n+import jakarta.validation.constraints.NotNull;\n+\n public class ListControlGroups<T> {\n     private Validator validator;\n     private ValidatorFactory validatorFactory;\n```\n\nThe issue is that the `javax.validation` packages have been moved to `jakarta.validation` in the newer version of the `jakarta.validation-api` dependency. The code needs to be updated to use the new package names.\n\nThe diff above updates the imports to use the new `jakarta.validation` packages instead of the old `javax.validation` packages.",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain these 3 exact lines in a row:\n```\npublic class ListControlGroups<T> {\nprivate Validator validator;\nprivate ValidatorFactory validatorFactory;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain these 3 exact lines in a row:\n```\npublic class ListControlGroups<T> {\nprivate Validator validator;\nprivate ValidatorFactory validatorFactory;\n```",
            "span_id": 17258686297124134180
        },
        {
            "input": "```diff\n--- a/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n+++ b/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n@@ -1,3 +1,13 @@\n+import jakarta.validation.Validator;\n+import jakarta.validation.ValidatorFactory;\n+import jakarta.validation.metadata.BeanDescriptor;\n+import jakarta.validation.metadata.ConstraintDescriptor;\n+import jakarta.validation.metadata.ElementDescriptor;\n+import jakarta.validation.constraints.NotBlank;\n+import jakarta.validation.constraints.NotEmpty;\n+import jakarta.validation.constraints.NotNull;\n+\n public abstract class ListControlGroups<T> extends Panel {\n     private Validator validator;\n     private ValidatorFactory validatorFactory;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot access javax.validation.ValidatorFactory\n",
                "updated_files": {
                    "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\nimport jakarta.validation.Validator;\nimport jakarta.validation.ValidatorFactory;\nimport jakarta.validation.metadata.BeanDescriptor;\nimport jakarta.validation.metadata.ConstraintDescriptor;\nimport jakarta.validation.metadata.ElementDescriptor;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java": {
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "import java.util.Set;"
                                },
                                {
                                    "line_no": 37,
                                    "content": "import javax.validation.Validator;"
                                },
                                {
                                    "line_no": 38,
                                    "content": "import javax.validation.constraints.NotBlank;"
                                }
                            ],
                            "error_texts": [
                                "[37,24] package javax.validation does not exist\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "import javax.validation.Validator;"
                                },
                                {
                                    "line_no": 38,
                                    "content": "import javax.validation.constraints.NotBlank;"
                                },
                                {
                                    "line_no": 39,
                                    "content": "import javax.validation.constraints.NotEmpty;"
                                }
                            ],
                            "error_texts": [
                                "[38,36] package javax.validation.constraints does not exist\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": "import javax.validation.constraints.NotBlank;"
                                },
                                {
                                    "line_no": 39,
                                    "content": "import javax.validation.constraints.NotEmpty;"
                                },
                                {
                                    "line_no": 40,
                                    "content": "import javax.validation.constraints.NotNull;"
                                }
                            ],
                            "error_texts": [
                                "[39,36] package javax.validation.constraints does not exist\n"
                            ]
                        },
                        "40": {
                            "lines": [
                                {
                                    "line_no": 39,
                                    "content": "import javax.validation.constraints.NotEmpty;"
                                },
                                {
                                    "line_no": 40,
                                    "content": "import javax.validation.constraints.NotNull;"
                                },
                                {
                                    "line_no": 41,
                                    "content": "import javax.validation.metadata.BeanDescriptor;"
                                }
                            ],
                            "error_texts": [
                                "[40,36] package javax.validation.constraints does not exist\n"
                            ]
                        },
                        "41": {
                            "lines": [
                                {
                                    "line_no": 40,
                                    "content": "import javax.validation.constraints.NotNull;"
                                },
                                {
                                    "line_no": 41,
                                    "content": "import javax.validation.metadata.BeanDescriptor;"
                                },
                                {
                                    "line_no": 42,
                                    "content": "import javax.validation.metadata.ConstraintDescriptor;"
                                }
                            ],
                            "error_texts": [
                                "[41,33] package javax.validation.metadata does not exist\n"
                            ]
                        },
                        "42": {
                            "lines": [
                                {
                                    "line_no": 41,
                                    "content": "import javax.validation.metadata.BeanDescriptor;"
                                },
                                {
                                    "line_no": 42,
                                    "content": "import javax.validation.metadata.ConstraintDescriptor;"
                                },
                                {
                                    "line_no": 43,
                                    "content": "import javax.validation.metadata.ElementDescriptor;"
                                }
                            ],
                            "error_texts": [
                                "[42,33] package javax.validation.metadata does not exist\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "import javax.validation.metadata.ConstraintDescriptor;"
                                },
                                {
                                    "line_no": 43,
                                    "content": "import javax.validation.metadata.ElementDescriptor;"
                                },
                                {
                                    "line_no": 44,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[43,33] package javax.validation.metadata does not exist\n"
                            ]
                        },
                        "130": {
                            "lines": [
                                {
                                    "line_no": 129,
                                    "content": ""
                                },
                                {
                                    "line_no": 130,
                                    "content": "\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();"
                                },
                                {
                                    "line_no": 131,
                                    "content": "\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);"
                                }
                            ],
                            "error_texts": [
                                "[130,82] cannot access javax.validation.ValidatorFactory\nclass file for javax.validation.ValidatorFactory not found\n",
                                "[130,82] cannot access javax.validation.ValidatorFactory\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot access javax.validation.ValidatorFactory\n",
            "span_id": 1387330134306840904
        },
        {
            "input": "```diff\n--- a/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n+++ b/src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n@@ -1,3 +1,13 @@\n+import jakarta.validation.Validator;\n+import jakarta.validation.ValidatorFactory;\n+import jakarta.validation.metadata.BeanDescriptor;\n+import jakarta.validation.metadata.ConstraintDescriptor;\n+import jakarta.validation.metadata.ElementDescriptor;\n+import jakarta.validation.constraints.NotBlank;\n+import jakarta.validation.constraints.NotEmpty;\n+import jakarta.validation.constraints.NotNull;\n+\n public abstract class ListControlGroups<T> extends Panel {\n     private Validator validator;\n     private ValidatorFactory validatorFactory;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot access javax.validation.ValidatorFactory\n",
                "updated_files": {
                    "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\nimport jakarta.validation.Validator;\nimport jakarta.validation.ValidatorFactory;\nimport jakarta.validation.metadata.BeanDescriptor;\nimport jakarta.validation.metadata.ConstraintDescriptor;\nimport jakarta.validation.metadata.ElementDescriptor;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java": {
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "import java.util.Set;"
                                },
                                {
                                    "line_no": 37,
                                    "content": "import javax.validation.Validator;"
                                },
                                {
                                    "line_no": 38,
                                    "content": "import javax.validation.constraints.NotBlank;"
                                }
                            ],
                            "error_texts": [
                                "[37,24] package javax.validation does not exist\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "import javax.validation.Validator;"
                                },
                                {
                                    "line_no": 38,
                                    "content": "import javax.validation.constraints.NotBlank;"
                                },
                                {
                                    "line_no": 39,
                                    "content": "import javax.validation.constraints.NotEmpty;"
                                }
                            ],
                            "error_texts": [
                                "[38,36] package javax.validation.constraints does not exist\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": "import javax.validation.constraints.NotBlank;"
                                },
                                {
                                    "line_no": 39,
                                    "content": "import javax.validation.constraints.NotEmpty;"
                                },
                                {
                                    "line_no": 40,
                                    "content": "import javax.validation.constraints.NotNull;"
                                }
                            ],
                            "error_texts": [
                                "[39,36] package javax.validation.constraints does not exist\n"
                            ]
                        },
                        "40": {
                            "lines": [
                                {
                                    "line_no": 39,
                                    "content": "import javax.validation.constraints.NotEmpty;"
                                },
                                {
                                    "line_no": 40,
                                    "content": "import javax.validation.constraints.NotNull;"
                                },
                                {
                                    "line_no": 41,
                                    "content": "import javax.validation.metadata.BeanDescriptor;"
                                }
                            ],
                            "error_texts": [
                                "[40,36] package javax.validation.constraints does not exist\n"
                            ]
                        },
                        "41": {
                            "lines": [
                                {
                                    "line_no": 40,
                                    "content": "import javax.validation.constraints.NotNull;"
                                },
                                {
                                    "line_no": 41,
                                    "content": "import javax.validation.metadata.BeanDescriptor;"
                                },
                                {
                                    "line_no": 42,
                                    "content": "import javax.validation.metadata.ConstraintDescriptor;"
                                }
                            ],
                            "error_texts": [
                                "[41,33] package javax.validation.metadata does not exist\n"
                            ]
                        },
                        "42": {
                            "lines": [
                                {
                                    "line_no": 41,
                                    "content": "import javax.validation.metadata.BeanDescriptor;"
                                },
                                {
                                    "line_no": 42,
                                    "content": "import javax.validation.metadata.ConstraintDescriptor;"
                                },
                                {
                                    "line_no": 43,
                                    "content": "import javax.validation.metadata.ElementDescriptor;"
                                }
                            ],
                            "error_texts": [
                                "[42,33] package javax.validation.metadata does not exist\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "import javax.validation.metadata.ConstraintDescriptor;"
                                },
                                {
                                    "line_no": 43,
                                    "content": "import javax.validation.metadata.ElementDescriptor;"
                                },
                                {
                                    "line_no": 44,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[43,33] package javax.validation.metadata does not exist\n"
                            ]
                        },
                        "130": {
                            "lines": [
                                {
                                    "line_no": 129,
                                    "content": ""
                                },
                                {
                                    "line_no": 130,
                                    "content": "\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();"
                                },
                                {
                                    "line_no": 131,
                                    "content": "\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);"
                                }
                            ],
                            "error_texts": [
                                "[130,82] cannot access javax.validation.ValidatorFactory\nclass file for javax.validation.ValidatorFactory not found\n",
                                "[130,82] cannot access javax.validation.ValidatorFactory\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot access javax.validation.ValidatorFactory\n",
            "span_id": 4669137416534413765
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 15788588674609020385
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 9734199848770979595
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 6039182362771424123
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 4474884173572221340
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 8816211013776050023
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 2806017282817160641
        }
    ]
}