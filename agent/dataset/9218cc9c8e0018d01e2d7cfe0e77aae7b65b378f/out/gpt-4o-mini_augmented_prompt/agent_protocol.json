{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n+++ src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java\n@@ -1,6 +1,6 @@\n-import javax.validation.Validator;\n-import javax.validation.ValidatorFactory;\n-import javax.validation.metadata.BeanDescriptor;\n-import javax.validation.metadata.ElementDescriptor;\n-import javax.validation.metadata.ConstraintDescriptor;\n-import javax.validation.constraints.NotNull;\n-import javax.validation.constraints.NotEmpty;\n-import javax.validation.constraints.NotBlank;\n+import jakarta.validation.Validator;\n+import jakarta.validation.ValidatorFactory;\n+import jakarta.validation.metadata.BeanDescriptor;\n+import jakarta.validation.metadata.ElementDescriptor;\n+import jakarta.validation.metadata.ConstraintDescriptor;\n+import jakarta.validation.constraints.NotNull;\n+import jakarta.validation.constraints.NotEmpty;\n+import jakarta.validation.constraints.NotBlank;\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain these 8 exact lines in a row:\n```\nimport javax.validation.Validator;\nimport javax.validation.ValidatorFactory;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotBlank;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java does not contain these 8 exact lines in a row:\n```\nimport javax.validation.Validator;\nimport javax.validation.ValidatorFactory;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotBlank;\n```",
            "span_id": 16793181447917528071
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 14129818411933990476
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 14653809109081783678
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 6012434997565837945
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 8649935194587902763
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 15322205292321227449
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 1920488691182281158
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 14344915966692566749
        }
    ],
    "get_directory_tree": [
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements",
            "output": "[\n    {\n        \"name\": \"DateControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AbstractControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ControlGroupProvider.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"DateControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.html\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 3197808801191718150
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements",
            "output": "[\n    {\n        \"name\": \"DateControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AbstractControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ControlGroupProvider.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"DateControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.html\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 7372079301190598510
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements",
            "output": "[\n    {\n        \"name\": \"DateControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AbstractControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ControlGroupProvider.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"DateControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.html\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 9368474017667699815
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements",
            "output": "[\n    {\n        \"name\": \"DateControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AbstractControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ControlGroupProvider.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"DateControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.html\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 18277152324796582068
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements",
            "output": "[\n    {\n        \"name\": \"DateControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AbstractControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ControlGroupProvider.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"DateControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.html\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 7196774350384990318
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements",
            "output": "[\n    {\n        \"name\": \"DateControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AbstractControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ControlGroupProvider.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"DateControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.html\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 11159251616703038968
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements",
            "output": "[\n    {\n        \"name\": \"DateControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CheckboxControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"EnumControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ObjectChoiceControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"CollectionControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AbstractControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.html\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ListControlGroups.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ControlGroupProvider.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TextFieldControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"DateControlGroup.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TemporalControlGroup.html\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 12218231849992004404
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 8712676483192236867
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 10650261361370523990
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 5660728925378640945
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 143030394669096226
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 17266078155430756271
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 13055701791145797334
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 9720654532503357570
        }
    ]
}