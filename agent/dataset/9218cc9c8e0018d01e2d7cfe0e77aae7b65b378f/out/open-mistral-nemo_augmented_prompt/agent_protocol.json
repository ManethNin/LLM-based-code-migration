{
    "validate_diffs": [],
    "compile_maven": [],
    "read_file": [
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.time.LocalDateTime;\nimport java.time.temporal.Temporal;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.Validator;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.metadata.BeanDescriptor;\nimport javax.validation.metadata.ConstraintDescriptor;\nimport javax.validation.metadata.ElementDescriptor;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.PropertyModel;\n\npublic abstract class ListControlGroups<T> extends Panel {\n\tprivate static final long serialVersionUID = 7205285700113097720L;\n\n\tprivate Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();\n\n\tprivate Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();\n\n\tprivate List<ObjectProperties> objectProperties;\n\tprivate CrudifierEntitySettings entitySettings;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\n\tpublic ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {\n\t\tsuper(id, model);\n\n\t\ttypesControlGroups.put(Date.class, DateControlGroup.class);\n\t\ttypesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(Temporal.class, TemporalControlGroup.class);\n\t\ttypesControlGroups.put(String.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Integer.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(int.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(long.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(double.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);\n\t\ttypesControlGroups.put(Boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(boolean.class, CheckboxControlGroup.class);\n\t\ttypesControlGroups.put(Set.class, CollectionControlGroup.class);\n\n\t\tobjectProperties = new ArrayList<ObjectProperties>();\n\t\tthis.entitySettings = entitySettings;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate Set<String> getPropertiesByOrder(Class<?> modelClass) {\n\t\tSet<String> properties = new LinkedHashSet<String>();\n\n\t\tfor(String property : entitySettings.getOrderOfFields()){\n\t\t\tif(!entitySettings.getHiddenFields().contains(property))\n\t\t\t\tproperties.add(property);\n\t\t}\n\t\tfor(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){\n\t\t\tif(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&\n\t\t\t   !properties.contains(descriptor.getName()) &&\n\t\t\t   !descriptor.getName().equals(\"class\"))\n\t\t\t\tproperties.add(descriptor.getName());\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\tprotected abstract EntityProvider<?> getEntityProvider(String name);\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tClass<?> modelClass = getModel().getObject().getClass();\n\n\t\tSet<String> properties = getPropertiesByOrder(modelClass);\n\n\t\tValidator validator = HibernateValidatorProperty.validatorFactory.getValidator();\n\t\tBeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);\n\t\tfor(String property : properties){\n\t\t\tPropertyDescriptor descriptor;\n\t\t\ttry {\n\t\t\t\tdescriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"error getting property \"+property, e);\n\t\t\t}\n\n\t\t\tboolean required = false;\n\n\t\t\tElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());\n\t\t\tif(constraintDescriptor!=null){\n\t\t\t\tSet<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();\n\t\t\t\tfor(ConstraintDescriptor<?> constraint : constraintsSet){\n\t\t\t\t\tif(constraint.getAnnotation() instanceof NotNull ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotEmpty ||\n\t\t\t\t\t   constraint.getAnnotation() instanceof NotBlank)\n\t\t\t\t\t\trequired = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobjectProperties.add(new ObjectProperties(descriptor, required));\n\t\t}\n\t\t\n\t\tRepeatingView view = new RepeatingView(\"controlGroup\");\n\t\tfor(ObjectProperties objectProperty : objectProperties){\n\t\t\ttry {\n\t\t\t\tAbstractControlGroup<?> controlGroup;\n\t\t\t\tif(!controlGroupProviders.containsKey(objectProperty.type)) {\n\t\t\t\t\tConstructor<?> constructor;\n\t\t\t\t\tClass<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);\n\t\t\t\t\tif(typesControlGroup==null){\n\t\t\t\t\t\tif(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;\n\t\t\t\t\t\telse typesControlGroup = ObjectChoiceControlGroup.class;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor = typesControlGroup.getConstructor(String.class, IModel.class);\n\n\t\t\t\t\tcontrolGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));\n\t\t\t\t\tcontrolGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t\tcontrolGroup.setEnabled(objectProperty.enabled);\n\n\n\t\t\t\t\tif(typesControlGroup==ObjectChoiceControlGroup.class){\n\t\t\t\t\t\tIObjectRenderer<?> renderer = renderers.get(objectProperty.type);\n\t\t\t\t\t\tif(renderer==null){\n\t\t\t\t\t\t\trenderer = new IObjectRenderer<Object>() {\n\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -6171655578529011405L;\n\n\t\t\t\t\t\t\t\tpublic String render(Object object) {\n\t\t\t\t\t\t\t\t\treturn object.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);\n\t\t\t\t\t} else if(typesControlGroup==CollectionControlGroup.class){\n\t\t\t\t\t\t((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcontrolGroup = controlGroupProviders\n\t\t\t\t\t\t\t.get(objectProperty.type)\n\t\t\t\t\t\t\t.createControlGroup(view.newChildId()\n\t\t\t\t\t\t\t\t\t, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)\n\t\t\t\t\t\t\t\t\t, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);\n\t\t\t\t}\n\t\t\t\tview.add(controlGroup);\n\n\t\t\t\tfieldComponents.put(objectProperty.name, controlGroup);\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\n\t\tadd(view);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\n\tpublic Component getResourceBase(){\n\t\treturn this;\n\t}\n\n\tpublic Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){\n\t\treturn Collections.unmodifiableMap(fieldComponents);\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){\n\t\tfor(Class<?> mapType : typesControlGroups.keySet()){\n\t\t\tif(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static final class ObjectProperties implements Serializable {\n\t\tprivate static final long serialVersionUID = 1747577998897955928L;\n\t\tprivate String name;\n\t\tprivate boolean enabled;\n\t\tprivate Class<?> type;\n\t\tprivate boolean required;\n\n\t\tpublic ObjectProperties(PropertyDescriptor descriptor, boolean required){\n\t\t\tthis.name = descriptor.getName();\n\t\t\tthis.enabled = descriptor.getWriteMethod()!=null;\n\t\t\tthis.type = descriptor.getPropertyType();\n\t\t\tthis.required = required;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){\n\t\treturn typesControlGroups;\n\t}\n\t\n\tpublic Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){\n\t\treturn this.controlGroupProviders;\n\t}\n}\n",
            "error": "",
            "span_id": 6915029012448728529
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.Localizer;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.util.convert.IConverter;\nimport org.apache.wicket.util.string.Strings;\nimport org.apache.wicket.util.string.interpolator.VariableInterpolator;\nimport org.apache.wicket.validation.IErrorMessageSource;\n\npublic abstract class AbstractControlGroup<T> extends Panel {\n\tprivate static final long serialVersionUID = 6551088390404506493L;\n\n\tprivate String propertyName;\n\tprivate Component resourceBase;\n\tprivate Class<?> type;\n\tprivate boolean required;\n\tprivate CrudifierEntitySettings entitySettings;\n\n\tpublic AbstractControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t}\n\t\n\tpublic void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){\n\t\tthis.propertyName = propertyName;\n\t\tthis.resourceBase = resourceBase;\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.entitySettings = entitySettings;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));\n\n\t\tStringResourceModel labelModel = new StringResourceModel(getPropertyName()+\".label\", resourceBase, getModel());\n\t\tlabelModel.setDefaultValue(getPropertyName());\n\t\tgetFormComponent().setLabel(labelModel);\n\t\tgetFormComponent().setRequired(required);\n\t}\n\t\n\tpublic abstract FormComponent<T> getFormComponent();\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\t\n\tpublic String getPropertyName() {\n\t\treturn propertyName;\n\t}\n\t\n\tpublic Component getResourceBase(){\n\t\treturn resourceBase;\n\t}\n\t\n\tpublic Class<?> getType() {\n\t\treturn type;\n\t}\n\t\n\tpublic CrudifierEntitySettings getEntitySettings(){\n\t\treturn entitySettings;\n\t}\n\n\tprotected void addInputBoxGridSize(WebMarkupContainer inputBox){\n\t\tString css = \"col-lg-10\"; // default\n\t\tif(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){\n\t\t\tswitch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){\n\t\t\tcase COL1:\n\t\t\t\tcss = \"col-lg-1\";\n\t\t\t\tbreak;\n\t\t\tcase COL2:\n\t\t\t\tcss = \"col-lg-2\";\n\t\t\t\tbreak;\n\t\t\tcase COL3:\n\t\t\t\tcss = \"col-lg-3\";\n\t\t\t\tbreak;\n\t\t\tcase COL4:\n\t\t\t\tcss = \"col-lg-4\";\n\t\t\t\tbreak;\n\t\t\tcase COL5:\n\t\t\t\tcss = \"col-lg-5\";\n\t\t\t\tbreak;\n\t\t\tcase COL6:\n\t\t\t\tcss = \"col-lg-6\";\n\t\t\t\tbreak;\n\t\t\tcase COL7:\n\t\t\t\tcss = \"col-lg-7\";\n\t\t\t\tbreak;\n\t\t\tcase COL8:\n\t\t\t\tcss = \"col-lg-8\";\n\t\t\t\tbreak;\n\t\t\tcase COL9:\n\t\t\t\tcss = \"col-lg-9\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinputBox.add(AttributeModifier.append(\"class\", css));\n\t}\n\t\n\t/**\n\t * Copiado do FormComponent.MessageSource\n\t * \n\t * {@link IErrorMessageSource} used for error messages against this form components.\n\t * \n\t * @author ivaynberg\n\t */\n\tprotected class MessageSource implements IErrorMessageSource\n\t{\n\t\tprivate final Set<String> triedKeys = new LinkedHashSet<String>();\n\n\t\tpublic MessageSource() {\n\t\t\t// TODO Auto-generated constructor stub\n\t\t}\n\n\t\t/**\n\t\t * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)\n\t\t */\n\t\tpublic String getMessage(String key, Map<String, Object> vars)\n\t\t{\n\t\t\tfinal AbstractControlGroup<T> formComponent = AbstractControlGroup.this;\n\n\t\t\t// Use the following log4j config for detailed logging on the property resolution\n\t\t\t// process\n\t\t\t// log4j.logger.org.apache.wicket.resource.loader=DEBUG\n\t\t\t// log4j.logger.org.apache.wicket.Localizer=DEBUG\n\n\t\t\tfinal Localizer localizer = formComponent.getLocalizer();\n\n\t\t\t// retrieve prefix that will be used to construct message keys\n\t\t\tString prefix = getFormComponent().getValidatorKeyPrefix();\n\t\t\tString message = null;\n\n\t\t\t// first try the full form of key [form-component-id].[prefix].[key]\n\t\t\tString resource = getPropertyName() + \".\" + prefix(prefix, key);\n\t\t\tmessage = getString(localizer, resource, resourceBase);\n\n\t\t\t// if not found, try a more general form (without prefix)\n\t\t\t// [form-component-id].[key]\n\t\t\tif (Strings.isEmpty(message) && Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\tresource = getPropertyName() + \".\" + key;\n\t\t\t\tmessage = getString(localizer, resource, resourceBase);\n\t\t\t}\n\n\t\t\t// If not found try a more general form [prefix].[key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tresource = prefix(prefix, key);\n\t\t\t\tmessage = getString(localizer, resource, formComponent);\n\t\t\t}\n\n\t\t\t// If not found try the most general form [key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\t// Try a variation of the resource key\n\t\t\t\tmessage = getString(localizer, key, formComponent);\n\t\t\t}\n\n\t\t\t// convert empty string to null in case our default value of \"\" was\n\t\t\t// returned from localizer\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tmessage = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmessage = substitute(message, addDefaultVars(vars));\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\n\t\tprivate String prefix(String prefix, String key)\n\t\t{\n\t\t\tif (!Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\treturn prefix + \".\" + key;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param localizer\n\t\t * @param key\n\t\t * @param component\n\t\t * @return string\n\t\t */\n\t\tprivate String getString(Localizer localizer, String key, Component component)\n\t\t{\n\t\t\ttriedKeys.add(key);\n\n\t\t\t// Note: It is important that the default value of \"\" is\n\t\t\t// provided to getString() not to throw a MissingResourceException or to\n\t\t\t// return a default string like \"[Warning: String ...\"\n\t\t\treturn localizer.getString(key, component, \"\");\n\t\t}\n\n\t\tprivate String substitute(String string, final Map<String, Object> vars)\n\t\t\tthrows IllegalStateException\n\t\t{\n\t\t\treturn new VariableInterpolator(string, Application.get()\n\t\t\t\t.getResourceSettings()\n\t\t\t\t.getThrowExceptionOnMissingResource())\n\t\t\t{\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t\t\t\t@Override\n\t\t\t\tprotected String getValue(String variableName)\n\t\t\t\t{\n\t\t\t\t\tObject value = vars.get(variableName);\n\t\t\t\t\tif (value == null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tIConverter converter = getConverter(value.getClass());\n\t\t\t\t\t\tif (converter == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn Strings.toString(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn converter.convertToString(value, getLocale());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.toString();\n\t\t}\n\n\t\t/**\n\t\t * Creates a new params map that additionally contains the default input, name, label\n\t\t * parameters\n\t\t * \n\t\t * @param params\n\t\t *            original params map\n\t\t * @return new params map\n\t\t */\n\t\tprivate Map<String, Object> addDefaultVars(Map<String, Object> params)\n\t\t{\n\t\t\t// create and fill the new params map\n\t\t\tfinal HashMap<String, Object> fullParams;\n\t\t\tif (params == null)\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(6);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(params.size() + 6);\n\t\t\t\tfullParams.putAll(params);\n\t\t\t}\n\n\t\t\t// add the input param if not already present\n\t\t\tif (!fullParams.containsKey(\"input\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"input\", getFormComponent().getInput());\n\t\t\t}\n\n\t\t\t// add the name param if not already present\n\t\t\tif (!fullParams.containsKey(\"name\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"name\", getPropertyName());\n\t\t\t}\n\n\t\t\t// add the label param if not already present\n\t\t\tif (!fullParams.containsKey(\"label\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"label\", getLabel());\n\t\t\t}\n\t\t\treturn fullParams;\n\t\t}\n\n\t\t/**\n\t\t * @return value of label param for this form component\n\t\t */\n\t\tprivate String getLabel()\n\t\t{\n\t\t\tString label = null;\n\n\t\t\t// first try the label model ...\n\t\t\tif (getFormComponent().getLabel() != null)\n\t\t\t{\n\t\t\t\tlabel = getFormComponent().getLabel().getObject();\n\t\t\t}\n\t\t\t// ... then try a resource of format [form-component-id] with\n\t\t\t// default of '[form-component-id]'\n\t\t\tif (label == null)\n\t\t\t{\n\n\t\t\t\tlabel = getFormComponent().getDefaultLabel();\n\t\t\t}\n\t\t\treturn label;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 449621621377427642
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.model.IModel;\n\npublic interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {\n\tpublic T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);\n}\n",
            "error": "",
            "span_id": 8147626627510997322
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.time.temporal.Temporal;\nimport java.util.Date;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;\nimport org.apache.wicket.extensions.markup.html.form.DateTextField;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class DateControlGroup extends AbstractControlGroup<Date> {\n\tprivate static final long serialVersionUID = 7519983535463694024L;\n\n\tprivate DateTextField dateField;\n\t\n\tpublic DateControlGroup(String id, IModel<Date> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tBootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>(\"datepicker\"){\n\t\t\tprivate static final long serialVersionUID = -1294334224980199521L;\n\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\tsuper.onComponentTag(tag);\n\t\t\t\tif(isEnabledInHierarchy()) tag.append(\"class\", \"input-append\", \" \");\n\t\t\t}\n\t\t};\n\t\t\n\t\tdateField = new DateTextField(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\t\n\t\tdatepicker.add(dateField);\n\t\tdatepicker.add(new WebMarkupContainer(\"icon\"){\n\t\t\tprivate static final long serialVersionUID = -4412622222987841668L;\n\n\t\t\t@Override\n\t\t\tprotected void onConfigure() {\n\t\t\t\tsuper.onConfigure();\n\t\t\t\t//don't display icon if it is disabled\n\t\t\t\tsetVisible(dateField.isEnabledInHierarchy());\n\t\t\t}\n\t\t});\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(datepicker));\n\n\t\t\n\t}\n\n\t@Override\n\tpublic FormComponent<Date> getFormComponent() {\n\t\treturn dateField;\n\t}\n\n}\n",
            "error": "",
            "span_id": 2706410801433585731
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.Radio;\nimport org.apache.wicket.markup.html.form.RadioGroup;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.StringResourceModel;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\n\npublic class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -7800336998276030740L;\n\n\tprivate RadioGroup<T> radioGroup;\n\t\n\tpublic EnumControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\tradioGroup = new RadioGroup<T>(\"radioGroup\", getModel());\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn radioGroup;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\ttry {\n\t\t\tMethod method = getType().getMethod(\"values\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tT[] values = (T[]) method.invoke(null);\n\t\t\t\n\t\t\tRepeatingView view = new RepeatingView(\"repeating\");\n\t\t\tfor(T value : values){\n\t\t\t\tRadio<T> radio = new Radio<T>(\"input\", Model.of(value), radioGroup){\n\t\t\t\t\tprivate static final long serialVersionUID = 8903955236018583915L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getValue() {\n\t\t\t\t\t\treturn getModel().getObject().name();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected boolean getStatelessHint() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".\"+value.name(), getResourceBase(), getModel());\n\t\t\t\tstringResourceModel.setDefaultValue(value.name());\n\t\t\t\t\n\t\t\t\tWebMarkupContainer container = new WebMarkupContainer(view.newChildId());\n\t\t\t\tcontainer.add(new Label(\"label\", stringResourceModel));\n\t\t\t\tcontainer.add(radio);\n\t\t\t\tview.add(container);\n\t\t\t}\n\t\t\t\n\t\t\tradioGroup.add(view);\n\t\t\t\n\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t\t.add(radioGroup)\n\t\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t\t);\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n}\n",
            "error": "",
            "span_id": 11093540697986788420
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.markup.html.form.ListMultipleChoice;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\n@SuppressWarnings(\"rawtypes\")\npublic class CollectionControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = 2580977991384659320L;\n\n\tprivate ListMultipleChoice multiChoice;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\t\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tpublic CollectionControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {\n\t\t\tprivate static final long serialVersionUID = 3674039468142186197L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t};\n\t\t\n\t\tmultiChoice = new ListMultipleChoice(\"input\", getModel(), modelList, new ChoiceRenderer()){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(multiChoice);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn multiChoice;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tIObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());\n\t\t\tif(renderer==null) return obj.toString(); \n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t}\t\n}\n",
            "error": "",
            "span_id": 6310039542099270789
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.CheckBox;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\n\npublic class CheckboxControlGroup extends AbstractControlGroup<Boolean> {\n\tprivate static final long serialVersionUID = -2510616774931793758L;\n\t\n\tprivate CheckBox checkbox;\n\t\n\tpublic CheckboxControlGroup(String id, IModel<Boolean> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tcheckbox = new CheckBox(\"input\", getModel());\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t.add(checkbox)\n\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t);\n\t}\n\t@Override\n\tpublic FormComponent<Boolean> getFormComponent() {\n\t\treturn checkbox;\n\t}\n\n}\n",
            "error": "",
            "span_id": 5075688011985795422
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class TextFieldControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -944776898493154174L;\n\n\tprivate TextField<T> textField;\n\t\n\tpublic TextFieldControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\ttextField = new TextField<T>(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".placeHolder\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(\"\");\n\t\ttextField.add(AttributeModifier.replace(\"placeHolder\", stringResourceModel));\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(textField);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn textField;\n\t}\n}\n",
            "error": "",
            "span_id": 905198315496642325
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.DropDownChoice;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\npublic class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -8444849747715611613L;\n\n\tprivate DropDownChoice<T> dropDown;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate IObjectRenderer<T> renderer;\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic ObjectChoiceControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {\n\t\t\tprivate static final long serialVersionUID = -3995535290067544541L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\tif(entityProvider==null) throw new RuntimeException(\"no entity provider for '\"+getPropertyName()+\"'\");\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t};\n\n\t\tdropDown = new DropDownChoice<T>(\"input\", getModel(), modelList){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\tdropDown.setNullValid(true);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tdropDown.setChoiceRenderer(new ChoiceRenderer());\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(dropDown);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn dropDown;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderer = (IObjectRenderer<T>) renderer;\n\t}\n\t\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 8179536513310566615
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.model.IModel;\n\npublic interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {\n\tpublic T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);\n}\n",
            "error": "",
            "span_id": 6050912039670035228
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.Localizer;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.util.convert.IConverter;\nimport org.apache.wicket.util.string.Strings;\nimport org.apache.wicket.util.string.interpolator.VariableInterpolator;\nimport org.apache.wicket.validation.IErrorMessageSource;\n\npublic abstract class AbstractControlGroup<T> extends Panel {\n\tprivate static final long serialVersionUID = 6551088390404506493L;\n\n\tprivate String propertyName;\n\tprivate Component resourceBase;\n\tprivate Class<?> type;\n\tprivate boolean required;\n\tprivate CrudifierEntitySettings entitySettings;\n\n\tpublic AbstractControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t}\n\t\n\tpublic void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){\n\t\tthis.propertyName = propertyName;\n\t\tthis.resourceBase = resourceBase;\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.entitySettings = entitySettings;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));\n\n\t\tStringResourceModel labelModel = new StringResourceModel(getPropertyName()+\".label\", resourceBase, getModel());\n\t\tlabelModel.setDefaultValue(getPropertyName());\n\t\tgetFormComponent().setLabel(labelModel);\n\t\tgetFormComponent().setRequired(required);\n\t}\n\t\n\tpublic abstract FormComponent<T> getFormComponent();\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\t\n\tpublic String getPropertyName() {\n\t\treturn propertyName;\n\t}\n\t\n\tpublic Component getResourceBase(){\n\t\treturn resourceBase;\n\t}\n\t\n\tpublic Class<?> getType() {\n\t\treturn type;\n\t}\n\t\n\tpublic CrudifierEntitySettings getEntitySettings(){\n\t\treturn entitySettings;\n\t}\n\n\tprotected void addInputBoxGridSize(WebMarkupContainer inputBox){\n\t\tString css = \"col-lg-10\"; // default\n\t\tif(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){\n\t\t\tswitch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){\n\t\t\tcase COL1:\n\t\t\t\tcss = \"col-lg-1\";\n\t\t\t\tbreak;\n\t\t\tcase COL2:\n\t\t\t\tcss = \"col-lg-2\";\n\t\t\t\tbreak;\n\t\t\tcase COL3:\n\t\t\t\tcss = \"col-lg-3\";\n\t\t\t\tbreak;\n\t\t\tcase COL4:\n\t\t\t\tcss = \"col-lg-4\";\n\t\t\t\tbreak;\n\t\t\tcase COL5:\n\t\t\t\tcss = \"col-lg-5\";\n\t\t\t\tbreak;\n\t\t\tcase COL6:\n\t\t\t\tcss = \"col-lg-6\";\n\t\t\t\tbreak;\n\t\t\tcase COL7:\n\t\t\t\tcss = \"col-lg-7\";\n\t\t\t\tbreak;\n\t\t\tcase COL8:\n\t\t\t\tcss = \"col-lg-8\";\n\t\t\t\tbreak;\n\t\t\tcase COL9:\n\t\t\t\tcss = \"col-lg-9\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinputBox.add(AttributeModifier.append(\"class\", css));\n\t}\n\t\n\t/**\n\t * Copiado do FormComponent.MessageSource\n\t * \n\t * {@link IErrorMessageSource} used for error messages against this form components.\n\t * \n\t * @author ivaynberg\n\t */\n\tprotected class MessageSource implements IErrorMessageSource\n\t{\n\t\tprivate final Set<String> triedKeys = new LinkedHashSet<String>();\n\n\t\tpublic MessageSource() {\n\t\t\t// TODO Auto-generated constructor stub\n\t\t}\n\n\t\t/**\n\t\t * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)\n\t\t */\n\t\tpublic String getMessage(String key, Map<String, Object> vars)\n\t\t{\n\t\t\tfinal AbstractControlGroup<T> formComponent = AbstractControlGroup.this;\n\n\t\t\t// Use the following log4j config for detailed logging on the property resolution\n\t\t\t// process\n\t\t\t// log4j.logger.org.apache.wicket.resource.loader=DEBUG\n\t\t\t// log4j.logger.org.apache.wicket.Localizer=DEBUG\n\n\t\t\tfinal Localizer localizer = formComponent.getLocalizer();\n\n\t\t\t// retrieve prefix that will be used to construct message keys\n\t\t\tString prefix = getFormComponent().getValidatorKeyPrefix();\n\t\t\tString message = null;\n\n\t\t\t// first try the full form of key [form-component-id].[prefix].[key]\n\t\t\tString resource = getPropertyName() + \".\" + prefix(prefix, key);\n\t\t\tmessage = getString(localizer, resource, resourceBase);\n\n\t\t\t// if not found, try a more general form (without prefix)\n\t\t\t// [form-component-id].[key]\n\t\t\tif (Strings.isEmpty(message) && Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\tresource = getPropertyName() + \".\" + key;\n\t\t\t\tmessage = getString(localizer, resource, resourceBase);\n\t\t\t}\n\n\t\t\t// If not found try a more general form [prefix].[key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tresource = prefix(prefix, key);\n\t\t\t\tmessage = getString(localizer, resource, formComponent);\n\t\t\t}\n\n\t\t\t// If not found try the most general form [key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\t// Try a variation of the resource key\n\t\t\t\tmessage = getString(localizer, key, formComponent);\n\t\t\t}\n\n\t\t\t// convert empty string to null in case our default value of \"\" was\n\t\t\t// returned from localizer\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tmessage = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmessage = substitute(message, addDefaultVars(vars));\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\n\t\tprivate String prefix(String prefix, String key)\n\t\t{\n\t\t\tif (!Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\treturn prefix + \".\" + key;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param localizer\n\t\t * @param key\n\t\t * @param component\n\t\t * @return string\n\t\t */\n\t\tprivate String getString(Localizer localizer, String key, Component component)\n\t\t{\n\t\t\ttriedKeys.add(key);\n\n\t\t\t// Note: It is important that the default value of \"\" is\n\t\t\t// provided to getString() not to throw a MissingResourceException or to\n\t\t\t// return a default string like \"[Warning: String ...\"\n\t\t\treturn localizer.getString(key, component, \"\");\n\t\t}\n\n\t\tprivate String substitute(String string, final Map<String, Object> vars)\n\t\t\tthrows IllegalStateException\n\t\t{\n\t\t\treturn new VariableInterpolator(string, Application.get()\n\t\t\t\t.getResourceSettings()\n\t\t\t\t.getThrowExceptionOnMissingResource())\n\t\t\t{\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t\t\t\t@Override\n\t\t\t\tprotected String getValue(String variableName)\n\t\t\t\t{\n\t\t\t\t\tObject value = vars.get(variableName);\n\t\t\t\t\tif (value == null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tIConverter converter = getConverter(value.getClass());\n\t\t\t\t\t\tif (converter == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn Strings.toString(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn converter.convertToString(value, getLocale());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.toString();\n\t\t}\n\n\t\t/**\n\t\t * Creates a new params map that additionally contains the default input, name, label\n\t\t * parameters\n\t\t * \n\t\t * @param params\n\t\t *            original params map\n\t\t * @return new params map\n\t\t */\n\t\tprivate Map<String, Object> addDefaultVars(Map<String, Object> params)\n\t\t{\n\t\t\t// create and fill the new params map\n\t\t\tfinal HashMap<String, Object> fullParams;\n\t\t\tif (params == null)\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(6);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(params.size() + 6);\n\t\t\t\tfullParams.putAll(params);\n\t\t\t}\n\n\t\t\t// add the input param if not already present\n\t\t\tif (!fullParams.containsKey(\"input\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"input\", getFormComponent().getInput());\n\t\t\t}\n\n\t\t\t// add the name param if not already present\n\t\t\tif (!fullParams.containsKey(\"name\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"name\", getPropertyName());\n\t\t\t}\n\n\t\t\t// add the label param if not already present\n\t\t\tif (!fullParams.containsKey(\"label\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"label\", getLabel());\n\t\t\t}\n\t\t\treturn fullParams;\n\t\t}\n\n\t\t/**\n\t\t * @return value of label param for this form component\n\t\t */\n\t\tprivate String getLabel()\n\t\t{\n\t\t\tString label = null;\n\n\t\t\t// first try the label model ...\n\t\t\tif (getFormComponent().getLabel() != null)\n\t\t\t{\n\t\t\t\tlabel = getFormComponent().getLabel().getObject();\n\t\t\t}\n\t\t\t// ... then try a resource of format [form-component-id] with\n\t\t\t// default of '[form-component-id]'\n\t\t\tif (label == null)\n\t\t\t{\n\n\t\t\t\tlabel = getFormComponent().getDefaultLabel();\n\t\t\t}\n\t\t\treturn label;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 7203375260314564907
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.time.temporal.Temporal;\nimport java.util.Date;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;\nimport org.apache.wicket.extensions.markup.html.form.DateTextField;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class DateControlGroup extends AbstractControlGroup<Date> {\n\tprivate static final long serialVersionUID = 7519983535463694024L;\n\n\tprivate DateTextField dateField;\n\t\n\tpublic DateControlGroup(String id, IModel<Date> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tBootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>(\"datepicker\"){\n\t\t\tprivate static final long serialVersionUID = -1294334224980199521L;\n\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\tsuper.onComponentTag(tag);\n\t\t\t\tif(isEnabledInHierarchy()) tag.append(\"class\", \"input-append\", \" \");\n\t\t\t}\n\t\t};\n\t\t\n\t\tdateField = new DateTextField(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\t\n\t\tdatepicker.add(dateField);\n\t\tdatepicker.add(new WebMarkupContainer(\"icon\"){\n\t\t\tprivate static final long serialVersionUID = -4412622222987841668L;\n\n\t\t\t@Override\n\t\t\tprotected void onConfigure() {\n\t\t\t\tsuper.onConfigure();\n\t\t\t\t//don't display icon if it is disabled\n\t\t\t\tsetVisible(dateField.isEnabledInHierarchy());\n\t\t\t}\n\t\t});\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(datepicker));\n\n\t\t\n\t}\n\n\t@Override\n\tpublic FormComponent<Date> getFormComponent() {\n\t\treturn dateField;\n\t}\n\n}\n",
            "error": "",
            "span_id": 12327212555436663548
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.markup.html.form.ListMultipleChoice;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\n@SuppressWarnings(\"rawtypes\")\npublic class CollectionControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = 2580977991384659320L;\n\n\tprivate ListMultipleChoice multiChoice;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\t\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tpublic CollectionControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {\n\t\t\tprivate static final long serialVersionUID = 3674039468142186197L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t};\n\t\t\n\t\tmultiChoice = new ListMultipleChoice(\"input\", getModel(), modelList, new ChoiceRenderer()){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(multiChoice);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn multiChoice;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tIObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());\n\t\t\tif(renderer==null) return obj.toString(); \n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t}\t\n}\n",
            "error": "",
            "span_id": 7162035826075710789
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.DropDownChoice;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\npublic class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -8444849747715611613L;\n\n\tprivate DropDownChoice<T> dropDown;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate IObjectRenderer<T> renderer;\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic ObjectChoiceControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {\n\t\t\tprivate static final long serialVersionUID = -3995535290067544541L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\tif(entityProvider==null) throw new RuntimeException(\"no entity provider for '\"+getPropertyName()+\"'\");\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t};\n\n\t\tdropDown = new DropDownChoice<T>(\"input\", getModel(), modelList){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\tdropDown.setNullValid(true);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tdropDown.setChoiceRenderer(new ChoiceRenderer());\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(dropDown);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn dropDown;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderer = (IObjectRenderer<T>) renderer;\n\t}\n\t\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 683819657981358592
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class TextFieldControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -944776898493154174L;\n\n\tprivate TextField<T> textField;\n\t\n\tpublic TextFieldControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\ttextField = new TextField<T>(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".placeHolder\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(\"\");\n\t\ttextField.add(AttributeModifier.replace(\"placeHolder\", stringResourceModel));\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(textField);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn textField;\n\t}\n}\n",
            "error": "",
            "span_id": 15647438296266714300
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.Radio;\nimport org.apache.wicket.markup.html.form.RadioGroup;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.StringResourceModel;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\n\npublic class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -7800336998276030740L;\n\n\tprivate RadioGroup<T> radioGroup;\n\t\n\tpublic EnumControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\tradioGroup = new RadioGroup<T>(\"radioGroup\", getModel());\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn radioGroup;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\ttry {\n\t\t\tMethod method = getType().getMethod(\"values\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tT[] values = (T[]) method.invoke(null);\n\t\t\t\n\t\t\tRepeatingView view = new RepeatingView(\"repeating\");\n\t\t\tfor(T value : values){\n\t\t\t\tRadio<T> radio = new Radio<T>(\"input\", Model.of(value), radioGroup){\n\t\t\t\t\tprivate static final long serialVersionUID = 8903955236018583915L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getValue() {\n\t\t\t\t\t\treturn getModel().getObject().name();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected boolean getStatelessHint() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".\"+value.name(), getResourceBase(), getModel());\n\t\t\t\tstringResourceModel.setDefaultValue(value.name());\n\t\t\t\t\n\t\t\t\tWebMarkupContainer container = new WebMarkupContainer(view.newChildId());\n\t\t\t\tcontainer.add(new Label(\"label\", stringResourceModel));\n\t\t\t\tcontainer.add(radio);\n\t\t\t\tview.add(container);\n\t\t\t}\n\t\t\t\n\t\t\tradioGroup.add(view);\n\t\t\t\n\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t\t.add(radioGroup)\n\t\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t\t);\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n}\n",
            "error": "",
            "span_id": 14251679910097504036
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.CheckBox;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\n\npublic class CheckboxControlGroup extends AbstractControlGroup<Boolean> {\n\tprivate static final long serialVersionUID = -2510616774931793758L;\n\t\n\tprivate CheckBox checkbox;\n\t\n\tpublic CheckboxControlGroup(String id, IModel<Boolean> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tcheckbox = new CheckBox(\"input\", getModel());\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t.add(checkbox)\n\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t);\n\t}\n\t@Override\n\tpublic FormComponent<Boolean> getFormComponent() {\n\t\treturn checkbox;\n\t}\n\n}\n",
            "error": "",
            "span_id": 14931138778923627221
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.Localizer;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.util.convert.IConverter;\nimport org.apache.wicket.util.string.Strings;\nimport org.apache.wicket.util.string.interpolator.VariableInterpolator;\nimport org.apache.wicket.validation.IErrorMessageSource;\n\npublic abstract class AbstractControlGroup<T> extends Panel {\n\tprivate static final long serialVersionUID = 6551088390404506493L;\n\n\tprivate String propertyName;\n\tprivate Component resourceBase;\n\tprivate Class<?> type;\n\tprivate boolean required;\n\tprivate CrudifierEntitySettings entitySettings;\n\n\tpublic AbstractControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t}\n\t\n\tpublic void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){\n\t\tthis.propertyName = propertyName;\n\t\tthis.resourceBase = resourceBase;\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.entitySettings = entitySettings;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));\n\n\t\tStringResourceModel labelModel = new StringResourceModel(getPropertyName()+\".label\", resourceBase, getModel());\n\t\tlabelModel.setDefaultValue(getPropertyName());\n\t\tgetFormComponent().setLabel(labelModel);\n\t\tgetFormComponent().setRequired(required);\n\t}\n\t\n\tpublic abstract FormComponent<T> getFormComponent();\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\t\n\tpublic String getPropertyName() {\n\t\treturn propertyName;\n\t}\n\t\n\tpublic Component getResourceBase(){\n\t\treturn resourceBase;\n\t}\n\t\n\tpublic Class<?> getType() {\n\t\treturn type;\n\t}\n\t\n\tpublic CrudifierEntitySettings getEntitySettings(){\n\t\treturn entitySettings;\n\t}\n\n\tprotected void addInputBoxGridSize(WebMarkupContainer inputBox){\n\t\tString css = \"col-lg-10\"; // default\n\t\tif(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){\n\t\t\tswitch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){\n\t\t\tcase COL1:\n\t\t\t\tcss = \"col-lg-1\";\n\t\t\t\tbreak;\n\t\t\tcase COL2:\n\t\t\t\tcss = \"col-lg-2\";\n\t\t\t\tbreak;\n\t\t\tcase COL3:\n\t\t\t\tcss = \"col-lg-3\";\n\t\t\t\tbreak;\n\t\t\tcase COL4:\n\t\t\t\tcss = \"col-lg-4\";\n\t\t\t\tbreak;\n\t\t\tcase COL5:\n\t\t\t\tcss = \"col-lg-5\";\n\t\t\t\tbreak;\n\t\t\tcase COL6:\n\t\t\t\tcss = \"col-lg-6\";\n\t\t\t\tbreak;\n\t\t\tcase COL7:\n\t\t\t\tcss = \"col-lg-7\";\n\t\t\t\tbreak;\n\t\t\tcase COL8:\n\t\t\t\tcss = \"col-lg-8\";\n\t\t\t\tbreak;\n\t\t\tcase COL9:\n\t\t\t\tcss = \"col-lg-9\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinputBox.add(AttributeModifier.append(\"class\", css));\n\t}\n\t\n\t/**\n\t * Copiado do FormComponent.MessageSource\n\t * \n\t * {@link IErrorMessageSource} used for error messages against this form components.\n\t * \n\t * @author ivaynberg\n\t */\n\tprotected class MessageSource implements IErrorMessageSource\n\t{\n\t\tprivate final Set<String> triedKeys = new LinkedHashSet<String>();\n\n\t\tpublic MessageSource() {\n\t\t\t// TODO Auto-generated constructor stub\n\t\t}\n\n\t\t/**\n\t\t * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)\n\t\t */\n\t\tpublic String getMessage(String key, Map<String, Object> vars)\n\t\t{\n\t\t\tfinal AbstractControlGroup<T> formComponent = AbstractControlGroup.this;\n\n\t\t\t// Use the following log4j config for detailed logging on the property resolution\n\t\t\t// process\n\t\t\t// log4j.logger.org.apache.wicket.resource.loader=DEBUG\n\t\t\t// log4j.logger.org.apache.wicket.Localizer=DEBUG\n\n\t\t\tfinal Localizer localizer = formComponent.getLocalizer();\n\n\t\t\t// retrieve prefix that will be used to construct message keys\n\t\t\tString prefix = getFormComponent().getValidatorKeyPrefix();\n\t\t\tString message = null;\n\n\t\t\t// first try the full form of key [form-component-id].[prefix].[key]\n\t\t\tString resource = getPropertyName() + \".\" + prefix(prefix, key);\n\t\t\tmessage = getString(localizer, resource, resourceBase);\n\n\t\t\t// if not found, try a more general form (without prefix)\n\t\t\t// [form-component-id].[key]\n\t\t\tif (Strings.isEmpty(message) && Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\tresource = getPropertyName() + \".\" + key;\n\t\t\t\tmessage = getString(localizer, resource, resourceBase);\n\t\t\t}\n\n\t\t\t// If not found try a more general form [prefix].[key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tresource = prefix(prefix, key);\n\t\t\t\tmessage = getString(localizer, resource, formComponent);\n\t\t\t}\n\n\t\t\t// If not found try the most general form [key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\t// Try a variation of the resource key\n\t\t\t\tmessage = getString(localizer, key, formComponent);\n\t\t\t}\n\n\t\t\t// convert empty string to null in case our default value of \"\" was\n\t\t\t// returned from localizer\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tmessage = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmessage = substitute(message, addDefaultVars(vars));\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\n\t\tprivate String prefix(String prefix, String key)\n\t\t{\n\t\t\tif (!Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\treturn prefix + \".\" + key;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param localizer\n\t\t * @param key\n\t\t * @param component\n\t\t * @return string\n\t\t */\n\t\tprivate String getString(Localizer localizer, String key, Component component)\n\t\t{\n\t\t\ttriedKeys.add(key);\n\n\t\t\t// Note: It is important that the default value of \"\" is\n\t\t\t// provided to getString() not to throw a MissingResourceException or to\n\t\t\t// return a default string like \"[Warning: String ...\"\n\t\t\treturn localizer.getString(key, component, \"\");\n\t\t}\n\n\t\tprivate String substitute(String string, final Map<String, Object> vars)\n\t\t\tthrows IllegalStateException\n\t\t{\n\t\t\treturn new VariableInterpolator(string, Application.get()\n\t\t\t\t.getResourceSettings()\n\t\t\t\t.getThrowExceptionOnMissingResource())\n\t\t\t{\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t\t\t\t@Override\n\t\t\t\tprotected String getValue(String variableName)\n\t\t\t\t{\n\t\t\t\t\tObject value = vars.get(variableName);\n\t\t\t\t\tif (value == null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tIConverter converter = getConverter(value.getClass());\n\t\t\t\t\t\tif (converter == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn Strings.toString(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn converter.convertToString(value, getLocale());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.toString();\n\t\t}\n\n\t\t/**\n\t\t * Creates a new params map that additionally contains the default input, name, label\n\t\t * parameters\n\t\t * \n\t\t * @param params\n\t\t *            original params map\n\t\t * @return new params map\n\t\t */\n\t\tprivate Map<String, Object> addDefaultVars(Map<String, Object> params)\n\t\t{\n\t\t\t// create and fill the new params map\n\t\t\tfinal HashMap<String, Object> fullParams;\n\t\t\tif (params == null)\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(6);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(params.size() + 6);\n\t\t\t\tfullParams.putAll(params);\n\t\t\t}\n\n\t\t\t// add the input param if not already present\n\t\t\tif (!fullParams.containsKey(\"input\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"input\", getFormComponent().getInput());\n\t\t\t}\n\n\t\t\t// add the name param if not already present\n\t\t\tif (!fullParams.containsKey(\"name\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"name\", getPropertyName());\n\t\t\t}\n\n\t\t\t// add the label param if not already present\n\t\t\tif (!fullParams.containsKey(\"label\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"label\", getLabel());\n\t\t\t}\n\t\t\treturn fullParams;\n\t\t}\n\n\t\t/**\n\t\t * @return value of label param for this form component\n\t\t */\n\t\tprivate String getLabel()\n\t\t{\n\t\t\tString label = null;\n\n\t\t\t// first try the label model ...\n\t\t\tif (getFormComponent().getLabel() != null)\n\t\t\t{\n\t\t\t\tlabel = getFormComponent().getLabel().getObject();\n\t\t\t}\n\t\t\t// ... then try a resource of format [form-component-id] with\n\t\t\t// default of '[form-component-id]'\n\t\t\tif (label == null)\n\t\t\t{\n\n\t\t\t\tlabel = getFormComponent().getDefaultLabel();\n\t\t\t}\n\t\t\treturn label;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 2403352347715423988
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.model.IModel;\n\npublic interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {\n\tpublic T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);\n}\n",
            "error": "",
            "span_id": 16192455246661011100
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.time.temporal.Temporal;\nimport java.util.Date;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;\nimport org.apache.wicket.extensions.markup.html.form.DateTextField;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class DateControlGroup extends AbstractControlGroup<Date> {\n\tprivate static final long serialVersionUID = 7519983535463694024L;\n\n\tprivate DateTextField dateField;\n\t\n\tpublic DateControlGroup(String id, IModel<Date> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tBootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>(\"datepicker\"){\n\t\t\tprivate static final long serialVersionUID = -1294334224980199521L;\n\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\tsuper.onComponentTag(tag);\n\t\t\t\tif(isEnabledInHierarchy()) tag.append(\"class\", \"input-append\", \" \");\n\t\t\t}\n\t\t};\n\t\t\n\t\tdateField = new DateTextField(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\t\n\t\tdatepicker.add(dateField);\n\t\tdatepicker.add(new WebMarkupContainer(\"icon\"){\n\t\t\tprivate static final long serialVersionUID = -4412622222987841668L;\n\n\t\t\t@Override\n\t\t\tprotected void onConfigure() {\n\t\t\t\tsuper.onConfigure();\n\t\t\t\t//don't display icon if it is disabled\n\t\t\t\tsetVisible(dateField.isEnabledInHierarchy());\n\t\t\t}\n\t\t});\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(datepicker));\n\n\t\t\n\t}\n\n\t@Override\n\tpublic FormComponent<Date> getFormComponent() {\n\t\treturn dateField;\n\t}\n\n}\n",
            "error": "",
            "span_id": 380537604951517612
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.Radio;\nimport org.apache.wicket.markup.html.form.RadioGroup;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.StringResourceModel;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\n\npublic class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -7800336998276030740L;\n\n\tprivate RadioGroup<T> radioGroup;\n\t\n\tpublic EnumControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\tradioGroup = new RadioGroup<T>(\"radioGroup\", getModel());\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn radioGroup;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\ttry {\n\t\t\tMethod method = getType().getMethod(\"values\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tT[] values = (T[]) method.invoke(null);\n\t\t\t\n\t\t\tRepeatingView view = new RepeatingView(\"repeating\");\n\t\t\tfor(T value : values){\n\t\t\t\tRadio<T> radio = new Radio<T>(\"input\", Model.of(value), radioGroup){\n\t\t\t\t\tprivate static final long serialVersionUID = 8903955236018583915L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getValue() {\n\t\t\t\t\t\treturn getModel().getObject().name();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected boolean getStatelessHint() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".\"+value.name(), getResourceBase(), getModel());\n\t\t\t\tstringResourceModel.setDefaultValue(value.name());\n\t\t\t\t\n\t\t\t\tWebMarkupContainer container = new WebMarkupContainer(view.newChildId());\n\t\t\t\tcontainer.add(new Label(\"label\", stringResourceModel));\n\t\t\t\tcontainer.add(radio);\n\t\t\t\tview.add(container);\n\t\t\t}\n\t\t\t\n\t\t\tradioGroup.add(view);\n\t\t\t\n\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t\t.add(radioGroup)\n\t\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t\t);\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n}\n",
            "error": "",
            "span_id": 2686696764317107182
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.DropDownChoice;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\npublic class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -8444849747715611613L;\n\n\tprivate DropDownChoice<T> dropDown;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate IObjectRenderer<T> renderer;\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic ObjectChoiceControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {\n\t\t\tprivate static final long serialVersionUID = -3995535290067544541L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\tif(entityProvider==null) throw new RuntimeException(\"no entity provider for '\"+getPropertyName()+\"'\");\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t};\n\n\t\tdropDown = new DropDownChoice<T>(\"input\", getModel(), modelList){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\tdropDown.setNullValid(true);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tdropDown.setChoiceRenderer(new ChoiceRenderer());\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(dropDown);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn dropDown;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderer = (IObjectRenderer<T>) renderer;\n\t}\n\t\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 16109399638742673075
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.markup.html.form.ListMultipleChoice;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\n@SuppressWarnings(\"rawtypes\")\npublic class CollectionControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = 2580977991384659320L;\n\n\tprivate ListMultipleChoice multiChoice;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\t\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tpublic CollectionControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {\n\t\t\tprivate static final long serialVersionUID = 3674039468142186197L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t};\n\t\t\n\t\tmultiChoice = new ListMultipleChoice(\"input\", getModel(), modelList, new ChoiceRenderer()){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(multiChoice);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn multiChoice;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tIObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());\n\t\t\tif(renderer==null) return obj.toString(); \n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t}\t\n}\n",
            "error": "",
            "span_id": 8973593903836869290
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class TextFieldControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -944776898493154174L;\n\n\tprivate TextField<T> textField;\n\t\n\tpublic TextFieldControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\ttextField = new TextField<T>(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".placeHolder\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(\"\");\n\t\ttextField.add(AttributeModifier.replace(\"placeHolder\", stringResourceModel));\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(textField);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn textField;\n\t}\n}\n",
            "error": "",
            "span_id": 5345808457365121163
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.CheckBox;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\n\npublic class CheckboxControlGroup extends AbstractControlGroup<Boolean> {\n\tprivate static final long serialVersionUID = -2510616774931793758L;\n\t\n\tprivate CheckBox checkbox;\n\t\n\tpublic CheckboxControlGroup(String id, IModel<Boolean> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tcheckbox = new CheckBox(\"input\", getModel());\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t.add(checkbox)\n\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t);\n\t}\n\t@Override\n\tpublic FormComponent<Boolean> getFormComponent() {\n\t\treturn checkbox;\n\t}\n\n}\n",
            "error": "",
            "span_id": 2943374460585094461
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.model.IModel;\n\npublic interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {\n\tpublic T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);\n}\n",
            "error": "",
            "span_id": 17485970329575263561
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.time.temporal.Temporal;\nimport java.util.Date;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;\nimport org.apache.wicket.extensions.markup.html.form.DateTextField;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class DateControlGroup extends AbstractControlGroup<Date> {\n\tprivate static final long serialVersionUID = 7519983535463694024L;\n\n\tprivate DateTextField dateField;\n\t\n\tpublic DateControlGroup(String id, IModel<Date> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tBootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>(\"datepicker\"){\n\t\t\tprivate static final long serialVersionUID = -1294334224980199521L;\n\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\tsuper.onComponentTag(tag);\n\t\t\t\tif(isEnabledInHierarchy()) tag.append(\"class\", \"input-append\", \" \");\n\t\t\t}\n\t\t};\n\t\t\n\t\tdateField = new DateTextField(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\t\n\t\tdatepicker.add(dateField);\n\t\tdatepicker.add(new WebMarkupContainer(\"icon\"){\n\t\t\tprivate static final long serialVersionUID = -4412622222987841668L;\n\n\t\t\t@Override\n\t\t\tprotected void onConfigure() {\n\t\t\t\tsuper.onConfigure();\n\t\t\t\t//don't display icon if it is disabled\n\t\t\t\tsetVisible(dateField.isEnabledInHierarchy());\n\t\t\t}\n\t\t});\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(datepicker));\n\n\t\t\n\t}\n\n\t@Override\n\tpublic FormComponent<Date> getFormComponent() {\n\t\treturn dateField;\n\t}\n\n}\n",
            "error": "",
            "span_id": 4344199751606938477
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.Localizer;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.util.convert.IConverter;\nimport org.apache.wicket.util.string.Strings;\nimport org.apache.wicket.util.string.interpolator.VariableInterpolator;\nimport org.apache.wicket.validation.IErrorMessageSource;\n\npublic abstract class AbstractControlGroup<T> extends Panel {\n\tprivate static final long serialVersionUID = 6551088390404506493L;\n\n\tprivate String propertyName;\n\tprivate Component resourceBase;\n\tprivate Class<?> type;\n\tprivate boolean required;\n\tprivate CrudifierEntitySettings entitySettings;\n\n\tpublic AbstractControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t}\n\t\n\tpublic void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){\n\t\tthis.propertyName = propertyName;\n\t\tthis.resourceBase = resourceBase;\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.entitySettings = entitySettings;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));\n\n\t\tStringResourceModel labelModel = new StringResourceModel(getPropertyName()+\".label\", resourceBase, getModel());\n\t\tlabelModel.setDefaultValue(getPropertyName());\n\t\tgetFormComponent().setLabel(labelModel);\n\t\tgetFormComponent().setRequired(required);\n\t}\n\t\n\tpublic abstract FormComponent<T> getFormComponent();\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\t\n\tpublic String getPropertyName() {\n\t\treturn propertyName;\n\t}\n\t\n\tpublic Component getResourceBase(){\n\t\treturn resourceBase;\n\t}\n\t\n\tpublic Class<?> getType() {\n\t\treturn type;\n\t}\n\t\n\tpublic CrudifierEntitySettings getEntitySettings(){\n\t\treturn entitySettings;\n\t}\n\n\tprotected void addInputBoxGridSize(WebMarkupContainer inputBox){\n\t\tString css = \"col-lg-10\"; // default\n\t\tif(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){\n\t\t\tswitch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){\n\t\t\tcase COL1:\n\t\t\t\tcss = \"col-lg-1\";\n\t\t\t\tbreak;\n\t\t\tcase COL2:\n\t\t\t\tcss = \"col-lg-2\";\n\t\t\t\tbreak;\n\t\t\tcase COL3:\n\t\t\t\tcss = \"col-lg-3\";\n\t\t\t\tbreak;\n\t\t\tcase COL4:\n\t\t\t\tcss = \"col-lg-4\";\n\t\t\t\tbreak;\n\t\t\tcase COL5:\n\t\t\t\tcss = \"col-lg-5\";\n\t\t\t\tbreak;\n\t\t\tcase COL6:\n\t\t\t\tcss = \"col-lg-6\";\n\t\t\t\tbreak;\n\t\t\tcase COL7:\n\t\t\t\tcss = \"col-lg-7\";\n\t\t\t\tbreak;\n\t\t\tcase COL8:\n\t\t\t\tcss = \"col-lg-8\";\n\t\t\t\tbreak;\n\t\t\tcase COL9:\n\t\t\t\tcss = \"col-lg-9\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinputBox.add(AttributeModifier.append(\"class\", css));\n\t}\n\t\n\t/**\n\t * Copiado do FormComponent.MessageSource\n\t * \n\t * {@link IErrorMessageSource} used for error messages against this form components.\n\t * \n\t * @author ivaynberg\n\t */\n\tprotected class MessageSource implements IErrorMessageSource\n\t{\n\t\tprivate final Set<String> triedKeys = new LinkedHashSet<String>();\n\n\t\tpublic MessageSource() {\n\t\t\t// TODO Auto-generated constructor stub\n\t\t}\n\n\t\t/**\n\t\t * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)\n\t\t */\n\t\tpublic String getMessage(String key, Map<String, Object> vars)\n\t\t{\n\t\t\tfinal AbstractControlGroup<T> formComponent = AbstractControlGroup.this;\n\n\t\t\t// Use the following log4j config for detailed logging on the property resolution\n\t\t\t// process\n\t\t\t// log4j.logger.org.apache.wicket.resource.loader=DEBUG\n\t\t\t// log4j.logger.org.apache.wicket.Localizer=DEBUG\n\n\t\t\tfinal Localizer localizer = formComponent.getLocalizer();\n\n\t\t\t// retrieve prefix that will be used to construct message keys\n\t\t\tString prefix = getFormComponent().getValidatorKeyPrefix();\n\t\t\tString message = null;\n\n\t\t\t// first try the full form of key [form-component-id].[prefix].[key]\n\t\t\tString resource = getPropertyName() + \".\" + prefix(prefix, key);\n\t\t\tmessage = getString(localizer, resource, resourceBase);\n\n\t\t\t// if not found, try a more general form (without prefix)\n\t\t\t// [form-component-id].[key]\n\t\t\tif (Strings.isEmpty(message) && Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\tresource = getPropertyName() + \".\" + key;\n\t\t\t\tmessage = getString(localizer, resource, resourceBase);\n\t\t\t}\n\n\t\t\t// If not found try a more general form [prefix].[key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tresource = prefix(prefix, key);\n\t\t\t\tmessage = getString(localizer, resource, formComponent);\n\t\t\t}\n\n\t\t\t// If not found try the most general form [key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\t// Try a variation of the resource key\n\t\t\t\tmessage = getString(localizer, key, formComponent);\n\t\t\t}\n\n\t\t\t// convert empty string to null in case our default value of \"\" was\n\t\t\t// returned from localizer\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tmessage = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmessage = substitute(message, addDefaultVars(vars));\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\n\t\tprivate String prefix(String prefix, String key)\n\t\t{\n\t\t\tif (!Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\treturn prefix + \".\" + key;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param localizer\n\t\t * @param key\n\t\t * @param component\n\t\t * @return string\n\t\t */\n\t\tprivate String getString(Localizer localizer, String key, Component component)\n\t\t{\n\t\t\ttriedKeys.add(key);\n\n\t\t\t// Note: It is important that the default value of \"\" is\n\t\t\t// provided to getString() not to throw a MissingResourceException or to\n\t\t\t// return a default string like \"[Warning: String ...\"\n\t\t\treturn localizer.getString(key, component, \"\");\n\t\t}\n\n\t\tprivate String substitute(String string, final Map<String, Object> vars)\n\t\t\tthrows IllegalStateException\n\t\t{\n\t\t\treturn new VariableInterpolator(string, Application.get()\n\t\t\t\t.getResourceSettings()\n\t\t\t\t.getThrowExceptionOnMissingResource())\n\t\t\t{\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t\t\t\t@Override\n\t\t\t\tprotected String getValue(String variableName)\n\t\t\t\t{\n\t\t\t\t\tObject value = vars.get(variableName);\n\t\t\t\t\tif (value == null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tIConverter converter = getConverter(value.getClass());\n\t\t\t\t\t\tif (converter == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn Strings.toString(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn converter.convertToString(value, getLocale());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.toString();\n\t\t}\n\n\t\t/**\n\t\t * Creates a new params map that additionally contains the default input, name, label\n\t\t * parameters\n\t\t * \n\t\t * @param params\n\t\t *            original params map\n\t\t * @return new params map\n\t\t */\n\t\tprivate Map<String, Object> addDefaultVars(Map<String, Object> params)\n\t\t{\n\t\t\t// create and fill the new params map\n\t\t\tfinal HashMap<String, Object> fullParams;\n\t\t\tif (params == null)\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(6);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(params.size() + 6);\n\t\t\t\tfullParams.putAll(params);\n\t\t\t}\n\n\t\t\t// add the input param if not already present\n\t\t\tif (!fullParams.containsKey(\"input\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"input\", getFormComponent().getInput());\n\t\t\t}\n\n\t\t\t// add the name param if not already present\n\t\t\tif (!fullParams.containsKey(\"name\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"name\", getPropertyName());\n\t\t\t}\n\n\t\t\t// add the label param if not already present\n\t\t\tif (!fullParams.containsKey(\"label\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"label\", getLabel());\n\t\t\t}\n\t\t\treturn fullParams;\n\t\t}\n\n\t\t/**\n\t\t * @return value of label param for this form component\n\t\t */\n\t\tprivate String getLabel()\n\t\t{\n\t\t\tString label = null;\n\n\t\t\t// first try the label model ...\n\t\t\tif (getFormComponent().getLabel() != null)\n\t\t\t{\n\t\t\t\tlabel = getFormComponent().getLabel().getObject();\n\t\t\t}\n\t\t\t// ... then try a resource of format [form-component-id] with\n\t\t\t// default of '[form-component-id]'\n\t\t\tif (label == null)\n\t\t\t{\n\n\t\t\t\tlabel = getFormComponent().getDefaultLabel();\n\t\t\t}\n\t\t\treturn label;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 13566314400906022428
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.markup.html.form.ListMultipleChoice;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\n@SuppressWarnings(\"rawtypes\")\npublic class CollectionControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = 2580977991384659320L;\n\n\tprivate ListMultipleChoice multiChoice;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\t\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tpublic CollectionControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {\n\t\t\tprivate static final long serialVersionUID = 3674039468142186197L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t};\n\t\t\n\t\tmultiChoice = new ListMultipleChoice(\"input\", getModel(), modelList, new ChoiceRenderer()){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(multiChoice);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn multiChoice;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tIObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());\n\t\t\tif(renderer==null) return obj.toString(); \n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t}\t\n}\n",
            "error": "",
            "span_id": 11809254771362436001
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.Radio;\nimport org.apache.wicket.markup.html.form.RadioGroup;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.StringResourceModel;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\n\npublic class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -7800336998276030740L;\n\n\tprivate RadioGroup<T> radioGroup;\n\t\n\tpublic EnumControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\tradioGroup = new RadioGroup<T>(\"radioGroup\", getModel());\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn radioGroup;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\ttry {\n\t\t\tMethod method = getType().getMethod(\"values\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tT[] values = (T[]) method.invoke(null);\n\t\t\t\n\t\t\tRepeatingView view = new RepeatingView(\"repeating\");\n\t\t\tfor(T value : values){\n\t\t\t\tRadio<T> radio = new Radio<T>(\"input\", Model.of(value), radioGroup){\n\t\t\t\t\tprivate static final long serialVersionUID = 8903955236018583915L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getValue() {\n\t\t\t\t\t\treturn getModel().getObject().name();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected boolean getStatelessHint() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".\"+value.name(), getResourceBase(), getModel());\n\t\t\t\tstringResourceModel.setDefaultValue(value.name());\n\t\t\t\t\n\t\t\t\tWebMarkupContainer container = new WebMarkupContainer(view.newChildId());\n\t\t\t\tcontainer.add(new Label(\"label\", stringResourceModel));\n\t\t\t\tcontainer.add(radio);\n\t\t\t\tview.add(container);\n\t\t\t}\n\t\t\t\n\t\t\tradioGroup.add(view);\n\t\t\t\n\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t\t.add(radioGroup)\n\t\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t\t);\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n}\n",
            "error": "",
            "span_id": 10591380546683491624
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.DropDownChoice;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\npublic class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -8444849747715611613L;\n\n\tprivate DropDownChoice<T> dropDown;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate IObjectRenderer<T> renderer;\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic ObjectChoiceControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {\n\t\t\tprivate static final long serialVersionUID = -3995535290067544541L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\tif(entityProvider==null) throw new RuntimeException(\"no entity provider for '\"+getPropertyName()+\"'\");\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t};\n\n\t\tdropDown = new DropDownChoice<T>(\"input\", getModel(), modelList){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\tdropDown.setNullValid(true);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tdropDown.setChoiceRenderer(new ChoiceRenderer());\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(dropDown);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn dropDown;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderer = (IObjectRenderer<T>) renderer;\n\t}\n\t\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 11064722357391945326
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class TextFieldControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -944776898493154174L;\n\n\tprivate TextField<T> textField;\n\t\n\tpublic TextFieldControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\ttextField = new TextField<T>(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".placeHolder\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(\"\");\n\t\ttextField.add(AttributeModifier.replace(\"placeHolder\", stringResourceModel));\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(textField);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn textField;\n\t}\n}\n",
            "error": "",
            "span_id": 11025492872185322937
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.CheckBox;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\n\npublic class CheckboxControlGroup extends AbstractControlGroup<Boolean> {\n\tprivate static final long serialVersionUID = -2510616774931793758L;\n\t\n\tprivate CheckBox checkbox;\n\t\n\tpublic CheckboxControlGroup(String id, IModel<Boolean> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tcheckbox = new CheckBox(\"input\", getModel());\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t.add(checkbox)\n\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t);\n\t}\n\t@Override\n\tpublic FormComponent<Boolean> getFormComponent() {\n\t\treturn checkbox;\n\t}\n\n}\n",
            "error": "",
            "span_id": 8106192078544952122
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.Localizer;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.util.convert.IConverter;\nimport org.apache.wicket.util.string.Strings;\nimport org.apache.wicket.util.string.interpolator.VariableInterpolator;\nimport org.apache.wicket.validation.IErrorMessageSource;\n\npublic abstract class AbstractControlGroup<T> extends Panel {\n\tprivate static final long serialVersionUID = 6551088390404506493L;\n\n\tprivate String propertyName;\n\tprivate Component resourceBase;\n\tprivate Class<?> type;\n\tprivate boolean required;\n\tprivate CrudifierEntitySettings entitySettings;\n\n\tpublic AbstractControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t}\n\t\n\tpublic void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){\n\t\tthis.propertyName = propertyName;\n\t\tthis.resourceBase = resourceBase;\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.entitySettings = entitySettings;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));\n\n\t\tStringResourceModel labelModel = new StringResourceModel(getPropertyName()+\".label\", resourceBase, getModel());\n\t\tlabelModel.setDefaultValue(getPropertyName());\n\t\tgetFormComponent().setLabel(labelModel);\n\t\tgetFormComponent().setRequired(required);\n\t}\n\t\n\tpublic abstract FormComponent<T> getFormComponent();\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\t\n\tpublic String getPropertyName() {\n\t\treturn propertyName;\n\t}\n\t\n\tpublic Component getResourceBase(){\n\t\treturn resourceBase;\n\t}\n\t\n\tpublic Class<?> getType() {\n\t\treturn type;\n\t}\n\t\n\tpublic CrudifierEntitySettings getEntitySettings(){\n\t\treturn entitySettings;\n\t}\n\n\tprotected void addInputBoxGridSize(WebMarkupContainer inputBox){\n\t\tString css = \"col-lg-10\"; // default\n\t\tif(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){\n\t\t\tswitch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){\n\t\t\tcase COL1:\n\t\t\t\tcss = \"col-lg-1\";\n\t\t\t\tbreak;\n\t\t\tcase COL2:\n\t\t\t\tcss = \"col-lg-2\";\n\t\t\t\tbreak;\n\t\t\tcase COL3:\n\t\t\t\tcss = \"col-lg-3\";\n\t\t\t\tbreak;\n\t\t\tcase COL4:\n\t\t\t\tcss = \"col-lg-4\";\n\t\t\t\tbreak;\n\t\t\tcase COL5:\n\t\t\t\tcss = \"col-lg-5\";\n\t\t\t\tbreak;\n\t\t\tcase COL6:\n\t\t\t\tcss = \"col-lg-6\";\n\t\t\t\tbreak;\n\t\t\tcase COL7:\n\t\t\t\tcss = \"col-lg-7\";\n\t\t\t\tbreak;\n\t\t\tcase COL8:\n\t\t\t\tcss = \"col-lg-8\";\n\t\t\t\tbreak;\n\t\t\tcase COL9:\n\t\t\t\tcss = \"col-lg-9\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinputBox.add(AttributeModifier.append(\"class\", css));\n\t}\n\t\n\t/**\n\t * Copiado do FormComponent.MessageSource\n\t * \n\t * {@link IErrorMessageSource} used for error messages against this form components.\n\t * \n\t * @author ivaynberg\n\t */\n\tprotected class MessageSource implements IErrorMessageSource\n\t{\n\t\tprivate final Set<String> triedKeys = new LinkedHashSet<String>();\n\n\t\tpublic MessageSource() {\n\t\t\t// TODO Auto-generated constructor stub\n\t\t}\n\n\t\t/**\n\t\t * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)\n\t\t */\n\t\tpublic String getMessage(String key, Map<String, Object> vars)\n\t\t{\n\t\t\tfinal AbstractControlGroup<T> formComponent = AbstractControlGroup.this;\n\n\t\t\t// Use the following log4j config for detailed logging on the property resolution\n\t\t\t// process\n\t\t\t// log4j.logger.org.apache.wicket.resource.loader=DEBUG\n\t\t\t// log4j.logger.org.apache.wicket.Localizer=DEBUG\n\n\t\t\tfinal Localizer localizer = formComponent.getLocalizer();\n\n\t\t\t// retrieve prefix that will be used to construct message keys\n\t\t\tString prefix = getFormComponent().getValidatorKeyPrefix();\n\t\t\tString message = null;\n\n\t\t\t// first try the full form of key [form-component-id].[prefix].[key]\n\t\t\tString resource = getPropertyName() + \".\" + prefix(prefix, key);\n\t\t\tmessage = getString(localizer, resource, resourceBase);\n\n\t\t\t// if not found, try a more general form (without prefix)\n\t\t\t// [form-component-id].[key]\n\t\t\tif (Strings.isEmpty(message) && Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\tresource = getPropertyName() + \".\" + key;\n\t\t\t\tmessage = getString(localizer, resource, resourceBase);\n\t\t\t}\n\n\t\t\t// If not found try a more general form [prefix].[key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tresource = prefix(prefix, key);\n\t\t\t\tmessage = getString(localizer, resource, formComponent);\n\t\t\t}\n\n\t\t\t// If not found try the most general form [key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\t// Try a variation of the resource key\n\t\t\t\tmessage = getString(localizer, key, formComponent);\n\t\t\t}\n\n\t\t\t// convert empty string to null in case our default value of \"\" was\n\t\t\t// returned from localizer\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tmessage = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmessage = substitute(message, addDefaultVars(vars));\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\n\t\tprivate String prefix(String prefix, String key)\n\t\t{\n\t\t\tif (!Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\treturn prefix + \".\" + key;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param localizer\n\t\t * @param key\n\t\t * @param component\n\t\t * @return string\n\t\t */\n\t\tprivate String getString(Localizer localizer, String key, Component component)\n\t\t{\n\t\t\ttriedKeys.add(key);\n\n\t\t\t// Note: It is important that the default value of \"\" is\n\t\t\t// provided to getString() not to throw a MissingResourceException or to\n\t\t\t// return a default string like \"[Warning: String ...\"\n\t\t\treturn localizer.getString(key, component, \"\");\n\t\t}\n\n\t\tprivate String substitute(String string, final Map<String, Object> vars)\n\t\t\tthrows IllegalStateException\n\t\t{\n\t\t\treturn new VariableInterpolator(string, Application.get()\n\t\t\t\t.getResourceSettings()\n\t\t\t\t.getThrowExceptionOnMissingResource())\n\t\t\t{\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t\t\t\t@Override\n\t\t\t\tprotected String getValue(String variableName)\n\t\t\t\t{\n\t\t\t\t\tObject value = vars.get(variableName);\n\t\t\t\t\tif (value == null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tIConverter converter = getConverter(value.getClass());\n\t\t\t\t\t\tif (converter == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn Strings.toString(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn converter.convertToString(value, getLocale());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.toString();\n\t\t}\n\n\t\t/**\n\t\t * Creates a new params map that additionally contains the default input, name, label\n\t\t * parameters\n\t\t * \n\t\t * @param params\n\t\t *            original params map\n\t\t * @return new params map\n\t\t */\n\t\tprivate Map<String, Object> addDefaultVars(Map<String, Object> params)\n\t\t{\n\t\t\t// create and fill the new params map\n\t\t\tfinal HashMap<String, Object> fullParams;\n\t\t\tif (params == null)\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(6);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(params.size() + 6);\n\t\t\t\tfullParams.putAll(params);\n\t\t\t}\n\n\t\t\t// add the input param if not already present\n\t\t\tif (!fullParams.containsKey(\"input\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"input\", getFormComponent().getInput());\n\t\t\t}\n\n\t\t\t// add the name param if not already present\n\t\t\tif (!fullParams.containsKey(\"name\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"name\", getPropertyName());\n\t\t\t}\n\n\t\t\t// add the label param if not already present\n\t\t\tif (!fullParams.containsKey(\"label\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"label\", getLabel());\n\t\t\t}\n\t\t\treturn fullParams;\n\t\t}\n\n\t\t/**\n\t\t * @return value of label param for this form component\n\t\t */\n\t\tprivate String getLabel()\n\t\t{\n\t\t\tString label = null;\n\n\t\t\t// first try the label model ...\n\t\t\tif (getFormComponent().getLabel() != null)\n\t\t\t{\n\t\t\t\tlabel = getFormComponent().getLabel().getObject();\n\t\t\t}\n\t\t\t// ... then try a resource of format [form-component-id] with\n\t\t\t// default of '[form-component-id]'\n\t\t\tif (label == null)\n\t\t\t{\n\n\t\t\t\tlabel = getFormComponent().getDefaultLabel();\n\t\t\t}\n\t\t\treturn label;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 6465077785087476483
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.model.IModel;\n\npublic interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {\n\tpublic T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);\n}\n",
            "error": "",
            "span_id": 1505809538683217967
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.DropDownChoice;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\npublic class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -8444849747715611613L;\n\n\tprivate DropDownChoice<T> dropDown;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate IObjectRenderer<T> renderer;\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic ObjectChoiceControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {\n\t\t\tprivate static final long serialVersionUID = -3995535290067544541L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\tif(entityProvider==null) throw new RuntimeException(\"no entity provider for '\"+getPropertyName()+\"'\");\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t};\n\n\t\tdropDown = new DropDownChoice<T>(\"input\", getModel(), modelList){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\tdropDown.setNullValid(true);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tdropDown.setChoiceRenderer(new ChoiceRenderer());\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(dropDown);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn dropDown;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderer = (IObjectRenderer<T>) renderer;\n\t}\n\t\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 18361537256278632310
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.markup.html.form.ListMultipleChoice;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\n@SuppressWarnings(\"rawtypes\")\npublic class CollectionControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = 2580977991384659320L;\n\n\tprivate ListMultipleChoice multiChoice;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\t\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tpublic CollectionControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {\n\t\t\tprivate static final long serialVersionUID = 3674039468142186197L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t};\n\t\t\n\t\tmultiChoice = new ListMultipleChoice(\"input\", getModel(), modelList, new ChoiceRenderer()){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(multiChoice);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn multiChoice;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tIObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());\n\t\t\tif(renderer==null) return obj.toString(); \n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t}\t\n}\n",
            "error": "",
            "span_id": 7236014758701614192
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.time.temporal.Temporal;\nimport java.util.Date;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;\nimport org.apache.wicket.extensions.markup.html.form.DateTextField;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class DateControlGroup extends AbstractControlGroup<Date> {\n\tprivate static final long serialVersionUID = 7519983535463694024L;\n\n\tprivate DateTextField dateField;\n\t\n\tpublic DateControlGroup(String id, IModel<Date> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tBootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>(\"datepicker\"){\n\t\t\tprivate static final long serialVersionUID = -1294334224980199521L;\n\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\tsuper.onComponentTag(tag);\n\t\t\t\tif(isEnabledInHierarchy()) tag.append(\"class\", \"input-append\", \" \");\n\t\t\t}\n\t\t};\n\t\t\n\t\tdateField = new DateTextField(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\t\n\t\tdatepicker.add(dateField);\n\t\tdatepicker.add(new WebMarkupContainer(\"icon\"){\n\t\t\tprivate static final long serialVersionUID = -4412622222987841668L;\n\n\t\t\t@Override\n\t\t\tprotected void onConfigure() {\n\t\t\t\tsuper.onConfigure();\n\t\t\t\t//don't display icon if it is disabled\n\t\t\t\tsetVisible(dateField.isEnabledInHierarchy());\n\t\t\t}\n\t\t});\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(datepicker));\n\n\t\t\n\t}\n\n\t@Override\n\tpublic FormComponent<Date> getFormComponent() {\n\t\treturn dateField;\n\t}\n\n}\n",
            "error": "",
            "span_id": 12095759702441847275
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.Radio;\nimport org.apache.wicket.markup.html.form.RadioGroup;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.StringResourceModel;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\n\npublic class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -7800336998276030740L;\n\n\tprivate RadioGroup<T> radioGroup;\n\t\n\tpublic EnumControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\tradioGroup = new RadioGroup<T>(\"radioGroup\", getModel());\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn radioGroup;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\ttry {\n\t\t\tMethod method = getType().getMethod(\"values\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tT[] values = (T[]) method.invoke(null);\n\t\t\t\n\t\t\tRepeatingView view = new RepeatingView(\"repeating\");\n\t\t\tfor(T value : values){\n\t\t\t\tRadio<T> radio = new Radio<T>(\"input\", Model.of(value), radioGroup){\n\t\t\t\t\tprivate static final long serialVersionUID = 8903955236018583915L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getValue() {\n\t\t\t\t\t\treturn getModel().getObject().name();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected boolean getStatelessHint() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".\"+value.name(), getResourceBase(), getModel());\n\t\t\t\tstringResourceModel.setDefaultValue(value.name());\n\t\t\t\t\n\t\t\t\tWebMarkupContainer container = new WebMarkupContainer(view.newChildId());\n\t\t\t\tcontainer.add(new Label(\"label\", stringResourceModel));\n\t\t\t\tcontainer.add(radio);\n\t\t\t\tview.add(container);\n\t\t\t}\n\t\t\t\n\t\t\tradioGroup.add(view);\n\t\t\t\n\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t\t.add(radioGroup)\n\t\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t\t);\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n}\n",
            "error": "",
            "span_id": 11857893457837093982
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class TextFieldControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -944776898493154174L;\n\n\tprivate TextField<T> textField;\n\t\n\tpublic TextFieldControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\ttextField = new TextField<T>(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".placeHolder\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(\"\");\n\t\ttextField.add(AttributeModifier.replace(\"placeHolder\", stringResourceModel));\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(textField);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn textField;\n\t}\n}\n",
            "error": "",
            "span_id": 11623692396504366939
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.CheckBox;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\n\npublic class CheckboxControlGroup extends AbstractControlGroup<Boolean> {\n\tprivate static final long serialVersionUID = -2510616774931793758L;\n\t\n\tprivate CheckBox checkbox;\n\t\n\tpublic CheckboxControlGroup(String id, IModel<Boolean> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tcheckbox = new CheckBox(\"input\", getModel());\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t.add(checkbox)\n\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t);\n\t}\n\t@Override\n\tpublic FormComponent<Boolean> getFormComponent() {\n\t\treturn checkbox;\n\t}\n\n}\n",
            "error": "",
            "span_id": 4081123733761382570
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.Localizer;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.util.convert.IConverter;\nimport org.apache.wicket.util.string.Strings;\nimport org.apache.wicket.util.string.interpolator.VariableInterpolator;\nimport org.apache.wicket.validation.IErrorMessageSource;\n\npublic abstract class AbstractControlGroup<T> extends Panel {\n\tprivate static final long serialVersionUID = 6551088390404506493L;\n\n\tprivate String propertyName;\n\tprivate Component resourceBase;\n\tprivate Class<?> type;\n\tprivate boolean required;\n\tprivate CrudifierEntitySettings entitySettings;\n\n\tpublic AbstractControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t}\n\t\n\tpublic void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){\n\t\tthis.propertyName = propertyName;\n\t\tthis.resourceBase = resourceBase;\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.entitySettings = entitySettings;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));\n\n\t\tStringResourceModel labelModel = new StringResourceModel(getPropertyName()+\".label\", resourceBase, getModel());\n\t\tlabelModel.setDefaultValue(getPropertyName());\n\t\tgetFormComponent().setLabel(labelModel);\n\t\tgetFormComponent().setRequired(required);\n\t}\n\t\n\tpublic abstract FormComponent<T> getFormComponent();\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\t\n\tpublic String getPropertyName() {\n\t\treturn propertyName;\n\t}\n\t\n\tpublic Component getResourceBase(){\n\t\treturn resourceBase;\n\t}\n\t\n\tpublic Class<?> getType() {\n\t\treturn type;\n\t}\n\t\n\tpublic CrudifierEntitySettings getEntitySettings(){\n\t\treturn entitySettings;\n\t}\n\n\tprotected void addInputBoxGridSize(WebMarkupContainer inputBox){\n\t\tString css = \"col-lg-10\"; // default\n\t\tif(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){\n\t\t\tswitch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){\n\t\t\tcase COL1:\n\t\t\t\tcss = \"col-lg-1\";\n\t\t\t\tbreak;\n\t\t\tcase COL2:\n\t\t\t\tcss = \"col-lg-2\";\n\t\t\t\tbreak;\n\t\t\tcase COL3:\n\t\t\t\tcss = \"col-lg-3\";\n\t\t\t\tbreak;\n\t\t\tcase COL4:\n\t\t\t\tcss = \"col-lg-4\";\n\t\t\t\tbreak;\n\t\t\tcase COL5:\n\t\t\t\tcss = \"col-lg-5\";\n\t\t\t\tbreak;\n\t\t\tcase COL6:\n\t\t\t\tcss = \"col-lg-6\";\n\t\t\t\tbreak;\n\t\t\tcase COL7:\n\t\t\t\tcss = \"col-lg-7\";\n\t\t\t\tbreak;\n\t\t\tcase COL8:\n\t\t\t\tcss = \"col-lg-8\";\n\t\t\t\tbreak;\n\t\t\tcase COL9:\n\t\t\t\tcss = \"col-lg-9\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinputBox.add(AttributeModifier.append(\"class\", css));\n\t}\n\t\n\t/**\n\t * Copiado do FormComponent.MessageSource\n\t * \n\t * {@link IErrorMessageSource} used for error messages against this form components.\n\t * \n\t * @author ivaynberg\n\t */\n\tprotected class MessageSource implements IErrorMessageSource\n\t{\n\t\tprivate final Set<String> triedKeys = new LinkedHashSet<String>();\n\n\t\tpublic MessageSource() {\n\t\t\t// TODO Auto-generated constructor stub\n\t\t}\n\n\t\t/**\n\t\t * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)\n\t\t */\n\t\tpublic String getMessage(String key, Map<String, Object> vars)\n\t\t{\n\t\t\tfinal AbstractControlGroup<T> formComponent = AbstractControlGroup.this;\n\n\t\t\t// Use the following log4j config for detailed logging on the property resolution\n\t\t\t// process\n\t\t\t// log4j.logger.org.apache.wicket.resource.loader=DEBUG\n\t\t\t// log4j.logger.org.apache.wicket.Localizer=DEBUG\n\n\t\t\tfinal Localizer localizer = formComponent.getLocalizer();\n\n\t\t\t// retrieve prefix that will be used to construct message keys\n\t\t\tString prefix = getFormComponent().getValidatorKeyPrefix();\n\t\t\tString message = null;\n\n\t\t\t// first try the full form of key [form-component-id].[prefix].[key]\n\t\t\tString resource = getPropertyName() + \".\" + prefix(prefix, key);\n\t\t\tmessage = getString(localizer, resource, resourceBase);\n\n\t\t\t// if not found, try a more general form (without prefix)\n\t\t\t// [form-component-id].[key]\n\t\t\tif (Strings.isEmpty(message) && Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\tresource = getPropertyName() + \".\" + key;\n\t\t\t\tmessage = getString(localizer, resource, resourceBase);\n\t\t\t}\n\n\t\t\t// If not found try a more general form [prefix].[key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tresource = prefix(prefix, key);\n\t\t\t\tmessage = getString(localizer, resource, formComponent);\n\t\t\t}\n\n\t\t\t// If not found try the most general form [key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\t// Try a variation of the resource key\n\t\t\t\tmessage = getString(localizer, key, formComponent);\n\t\t\t}\n\n\t\t\t// convert empty string to null in case our default value of \"\" was\n\t\t\t// returned from localizer\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tmessage = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmessage = substitute(message, addDefaultVars(vars));\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\n\t\tprivate String prefix(String prefix, String key)\n\t\t{\n\t\t\tif (!Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\treturn prefix + \".\" + key;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param localizer\n\t\t * @param key\n\t\t * @param component\n\t\t * @return string\n\t\t */\n\t\tprivate String getString(Localizer localizer, String key, Component component)\n\t\t{\n\t\t\ttriedKeys.add(key);\n\n\t\t\t// Note: It is important that the default value of \"\" is\n\t\t\t// provided to getString() not to throw a MissingResourceException or to\n\t\t\t// return a default string like \"[Warning: String ...\"\n\t\t\treturn localizer.getString(key, component, \"\");\n\t\t}\n\n\t\tprivate String substitute(String string, final Map<String, Object> vars)\n\t\t\tthrows IllegalStateException\n\t\t{\n\t\t\treturn new VariableInterpolator(string, Application.get()\n\t\t\t\t.getResourceSettings()\n\t\t\t\t.getThrowExceptionOnMissingResource())\n\t\t\t{\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t\t\t\t@Override\n\t\t\t\tprotected String getValue(String variableName)\n\t\t\t\t{\n\t\t\t\t\tObject value = vars.get(variableName);\n\t\t\t\t\tif (value == null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tIConverter converter = getConverter(value.getClass());\n\t\t\t\t\t\tif (converter == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn Strings.toString(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn converter.convertToString(value, getLocale());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.toString();\n\t\t}\n\n\t\t/**\n\t\t * Creates a new params map that additionally contains the default input, name, label\n\t\t * parameters\n\t\t * \n\t\t * @param params\n\t\t *            original params map\n\t\t * @return new params map\n\t\t */\n\t\tprivate Map<String, Object> addDefaultVars(Map<String, Object> params)\n\t\t{\n\t\t\t// create and fill the new params map\n\t\t\tfinal HashMap<String, Object> fullParams;\n\t\t\tif (params == null)\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(6);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(params.size() + 6);\n\t\t\t\tfullParams.putAll(params);\n\t\t\t}\n\n\t\t\t// add the input param if not already present\n\t\t\tif (!fullParams.containsKey(\"input\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"input\", getFormComponent().getInput());\n\t\t\t}\n\n\t\t\t// add the name param if not already present\n\t\t\tif (!fullParams.containsKey(\"name\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"name\", getPropertyName());\n\t\t\t}\n\n\t\t\t// add the label param if not already present\n\t\t\tif (!fullParams.containsKey(\"label\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"label\", getLabel());\n\t\t\t}\n\t\t\treturn fullParams;\n\t\t}\n\n\t\t/**\n\t\t * @return value of label param for this form component\n\t\t */\n\t\tprivate String getLabel()\n\t\t{\n\t\t\tString label = null;\n\n\t\t\t// first try the label model ...\n\t\t\tif (getFormComponent().getLabel() != null)\n\t\t\t{\n\t\t\t\tlabel = getFormComponent().getLabel().getObject();\n\t\t\t}\n\t\t\t// ... then try a resource of format [form-component-id] with\n\t\t\t// default of '[form-component-id]'\n\t\t\tif (label == null)\n\t\t\t{\n\n\t\t\t\tlabel = getFormComponent().getDefaultLabel();\n\t\t\t}\n\t\t\treturn label;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 1135010566059279198
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.model.IModel;\n\npublic interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {\n\tpublic T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);\n}\n",
            "error": "",
            "span_id": 388077949346473203
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.time.temporal.Temporal;\nimport java.util.Date;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;\nimport org.apache.wicket.extensions.markup.html.form.DateTextField;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class DateControlGroup extends AbstractControlGroup<Date> {\n\tprivate static final long serialVersionUID = 7519983535463694024L;\n\n\tprivate DateTextField dateField;\n\t\n\tpublic DateControlGroup(String id, IModel<Date> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tBootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>(\"datepicker\"){\n\t\t\tprivate static final long serialVersionUID = -1294334224980199521L;\n\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\tsuper.onComponentTag(tag);\n\t\t\t\tif(isEnabledInHierarchy()) tag.append(\"class\", \"input-append\", \" \");\n\t\t\t}\n\t\t};\n\t\t\n\t\tdateField = new DateTextField(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\t\n\t\tdatepicker.add(dateField);\n\t\tdatepicker.add(new WebMarkupContainer(\"icon\"){\n\t\t\tprivate static final long serialVersionUID = -4412622222987841668L;\n\n\t\t\t@Override\n\t\t\tprotected void onConfigure() {\n\t\t\t\tsuper.onConfigure();\n\t\t\t\t//don't display icon if it is disabled\n\t\t\t\tsetVisible(dateField.isEnabledInHierarchy());\n\t\t\t}\n\t\t});\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(datepicker));\n\n\t\t\n\t}\n\n\t@Override\n\tpublic FormComponent<Date> getFormComponent() {\n\t\treturn dateField;\n\t}\n\n}\n",
            "error": "",
            "span_id": 10314018068797766789
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.Radio;\nimport org.apache.wicket.markup.html.form.RadioGroup;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.StringResourceModel;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\n\npublic class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -7800336998276030740L;\n\n\tprivate RadioGroup<T> radioGroup;\n\t\n\tpublic EnumControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\tradioGroup = new RadioGroup<T>(\"radioGroup\", getModel());\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn radioGroup;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\ttry {\n\t\t\tMethod method = getType().getMethod(\"values\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tT[] values = (T[]) method.invoke(null);\n\t\t\t\n\t\t\tRepeatingView view = new RepeatingView(\"repeating\");\n\t\t\tfor(T value : values){\n\t\t\t\tRadio<T> radio = new Radio<T>(\"input\", Model.of(value), radioGroup){\n\t\t\t\t\tprivate static final long serialVersionUID = 8903955236018583915L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getValue() {\n\t\t\t\t\t\treturn getModel().getObject().name();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected boolean getStatelessHint() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".\"+value.name(), getResourceBase(), getModel());\n\t\t\t\tstringResourceModel.setDefaultValue(value.name());\n\t\t\t\t\n\t\t\t\tWebMarkupContainer container = new WebMarkupContainer(view.newChildId());\n\t\t\t\tcontainer.add(new Label(\"label\", stringResourceModel));\n\t\t\t\tcontainer.add(radio);\n\t\t\t\tview.add(container);\n\t\t\t}\n\t\t\t\n\t\t\tradioGroup.add(view);\n\t\t\t\n\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t\t.add(radioGroup)\n\t\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t\t);\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n}\n",
            "error": "",
            "span_id": 12765679754239191442
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.markup.html.form.ListMultipleChoice;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\n@SuppressWarnings(\"rawtypes\")\npublic class CollectionControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = 2580977991384659320L;\n\n\tprivate ListMultipleChoice multiChoice;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\t\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tpublic CollectionControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {\n\t\t\tprivate static final long serialVersionUID = 3674039468142186197L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t};\n\t\t\n\t\tmultiChoice = new ListMultipleChoice(\"input\", getModel(), modelList, new ChoiceRenderer()){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(multiChoice);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn multiChoice;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tIObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());\n\t\t\tif(renderer==null) return obj.toString(); \n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t}\t\n}\n",
            "error": "",
            "span_id": 12050564424778697401
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.DropDownChoice;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\npublic class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -8444849747715611613L;\n\n\tprivate DropDownChoice<T> dropDown;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate IObjectRenderer<T> renderer;\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic ObjectChoiceControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {\n\t\t\tprivate static final long serialVersionUID = -3995535290067544541L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\tif(entityProvider==null) throw new RuntimeException(\"no entity provider for '\"+getPropertyName()+\"'\");\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t};\n\n\t\tdropDown = new DropDownChoice<T>(\"input\", getModel(), modelList){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\tdropDown.setNullValid(true);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tdropDown.setChoiceRenderer(new ChoiceRenderer());\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(dropDown);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn dropDown;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderer = (IObjectRenderer<T>) renderer;\n\t}\n\t\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 18422258877190453444
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class TextFieldControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -944776898493154174L;\n\n\tprivate TextField<T> textField;\n\t\n\tpublic TextFieldControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\ttextField = new TextField<T>(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".placeHolder\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(\"\");\n\t\ttextField.add(AttributeModifier.replace(\"placeHolder\", stringResourceModel));\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(textField);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn textField;\n\t}\n}\n",
            "error": "",
            "span_id": 18391583900549738226
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.CheckBox;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\n\npublic class CheckboxControlGroup extends AbstractControlGroup<Boolean> {\n\tprivate static final long serialVersionUID = -2510616774931793758L;\n\t\n\tprivate CheckBox checkbox;\n\t\n\tpublic CheckboxControlGroup(String id, IModel<Boolean> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tcheckbox = new CheckBox(\"input\", getModel());\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t.add(checkbox)\n\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t);\n\t}\n\t@Override\n\tpublic FormComponent<Boolean> getFormComponent() {\n\t\treturn checkbox;\n\t}\n\n}\n",
            "error": "",
            "span_id": 2316557691860428371
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.Localizer;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.util.convert.IConverter;\nimport org.apache.wicket.util.string.Strings;\nimport org.apache.wicket.util.string.interpolator.VariableInterpolator;\nimport org.apache.wicket.validation.IErrorMessageSource;\n\npublic abstract class AbstractControlGroup<T> extends Panel {\n\tprivate static final long serialVersionUID = 6551088390404506493L;\n\n\tprivate String propertyName;\n\tprivate Component resourceBase;\n\tprivate Class<?> type;\n\tprivate boolean required;\n\tprivate CrudifierEntitySettings entitySettings;\n\n\tpublic AbstractControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t}\n\t\n\tpublic void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){\n\t\tthis.propertyName = propertyName;\n\t\tthis.resourceBase = resourceBase;\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.entitySettings = entitySettings;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tgetFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));\n\n\t\tStringResourceModel labelModel = new StringResourceModel(getPropertyName()+\".label\", resourceBase, getModel());\n\t\tlabelModel.setDefaultValue(getPropertyName());\n\t\tgetFormComponent().setLabel(labelModel);\n\t\tgetFormComponent().setRequired(required);\n\t}\n\t\n\tpublic abstract FormComponent<T> getFormComponent();\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic IModel<T> getModel(){\n\t\treturn (IModel<T>) getDefaultModel();\n\t}\n\t\n\tpublic String getPropertyName() {\n\t\treturn propertyName;\n\t}\n\t\n\tpublic Component getResourceBase(){\n\t\treturn resourceBase;\n\t}\n\t\n\tpublic Class<?> getType() {\n\t\treturn type;\n\t}\n\t\n\tpublic CrudifierEntitySettings getEntitySettings(){\n\t\treturn entitySettings;\n\t}\n\n\tprotected void addInputBoxGridSize(WebMarkupContainer inputBox){\n\t\tString css = \"col-lg-10\"; // default\n\t\tif(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){\n\t\t\tswitch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){\n\t\t\tcase COL1:\n\t\t\t\tcss = \"col-lg-1\";\n\t\t\t\tbreak;\n\t\t\tcase COL2:\n\t\t\t\tcss = \"col-lg-2\";\n\t\t\t\tbreak;\n\t\t\tcase COL3:\n\t\t\t\tcss = \"col-lg-3\";\n\t\t\t\tbreak;\n\t\t\tcase COL4:\n\t\t\t\tcss = \"col-lg-4\";\n\t\t\t\tbreak;\n\t\t\tcase COL5:\n\t\t\t\tcss = \"col-lg-5\";\n\t\t\t\tbreak;\n\t\t\tcase COL6:\n\t\t\t\tcss = \"col-lg-6\";\n\t\t\t\tbreak;\n\t\t\tcase COL7:\n\t\t\t\tcss = \"col-lg-7\";\n\t\t\t\tbreak;\n\t\t\tcase COL8:\n\t\t\t\tcss = \"col-lg-8\";\n\t\t\t\tbreak;\n\t\t\tcase COL9:\n\t\t\t\tcss = \"col-lg-9\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinputBox.add(AttributeModifier.append(\"class\", css));\n\t}\n\t\n\t/**\n\t * Copiado do FormComponent.MessageSource\n\t * \n\t * {@link IErrorMessageSource} used for error messages against this form components.\n\t * \n\t * @author ivaynberg\n\t */\n\tprotected class MessageSource implements IErrorMessageSource\n\t{\n\t\tprivate final Set<String> triedKeys = new LinkedHashSet<String>();\n\n\t\tpublic MessageSource() {\n\t\t\t// TODO Auto-generated constructor stub\n\t\t}\n\n\t\t/**\n\t\t * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)\n\t\t */\n\t\tpublic String getMessage(String key, Map<String, Object> vars)\n\t\t{\n\t\t\tfinal AbstractControlGroup<T> formComponent = AbstractControlGroup.this;\n\n\t\t\t// Use the following log4j config for detailed logging on the property resolution\n\t\t\t// process\n\t\t\t// log4j.logger.org.apache.wicket.resource.loader=DEBUG\n\t\t\t// log4j.logger.org.apache.wicket.Localizer=DEBUG\n\n\t\t\tfinal Localizer localizer = formComponent.getLocalizer();\n\n\t\t\t// retrieve prefix that will be used to construct message keys\n\t\t\tString prefix = getFormComponent().getValidatorKeyPrefix();\n\t\t\tString message = null;\n\n\t\t\t// first try the full form of key [form-component-id].[prefix].[key]\n\t\t\tString resource = getPropertyName() + \".\" + prefix(prefix, key);\n\t\t\tmessage = getString(localizer, resource, resourceBase);\n\n\t\t\t// if not found, try a more general form (without prefix)\n\t\t\t// [form-component-id].[key]\n\t\t\tif (Strings.isEmpty(message) && Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\tresource = getPropertyName() + \".\" + key;\n\t\t\t\tmessage = getString(localizer, resource, resourceBase);\n\t\t\t}\n\n\t\t\t// If not found try a more general form [prefix].[key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tresource = prefix(prefix, key);\n\t\t\t\tmessage = getString(localizer, resource, formComponent);\n\t\t\t}\n\n\t\t\t// If not found try the most general form [key]\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\t// Try a variation of the resource key\n\t\t\t\tmessage = getString(localizer, key, formComponent);\n\t\t\t}\n\n\t\t\t// convert empty string to null in case our default value of \"\" was\n\t\t\t// returned from localizer\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tmessage = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmessage = substitute(message, addDefaultVars(vars));\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\n\t\tprivate String prefix(String prefix, String key)\n\t\t{\n\t\t\tif (!Strings.isEmpty(prefix))\n\t\t\t{\n\t\t\t\treturn prefix + \".\" + key;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param localizer\n\t\t * @param key\n\t\t * @param component\n\t\t * @return string\n\t\t */\n\t\tprivate String getString(Localizer localizer, String key, Component component)\n\t\t{\n\t\t\ttriedKeys.add(key);\n\n\t\t\t// Note: It is important that the default value of \"\" is\n\t\t\t// provided to getString() not to throw a MissingResourceException or to\n\t\t\t// return a default string like \"[Warning: String ...\"\n\t\t\treturn localizer.getString(key, component, \"\");\n\t\t}\n\n\t\tprivate String substitute(String string, final Map<String, Object> vars)\n\t\t\tthrows IllegalStateException\n\t\t{\n\t\t\treturn new VariableInterpolator(string, Application.get()\n\t\t\t\t.getResourceSettings()\n\t\t\t\t.getThrowExceptionOnMissingResource())\n\t\t\t{\n\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t\t\t\t@Override\n\t\t\t\tprotected String getValue(String variableName)\n\t\t\t\t{\n\t\t\t\t\tObject value = vars.get(variableName);\n\t\t\t\t\tif (value == null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tIConverter converter = getConverter(value.getClass());\n\t\t\t\t\t\tif (converter == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn Strings.toString(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn converter.convertToString(value, getLocale());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.toString();\n\t\t}\n\n\t\t/**\n\t\t * Creates a new params map that additionally contains the default input, name, label\n\t\t * parameters\n\t\t * \n\t\t * @param params\n\t\t *            original params map\n\t\t * @return new params map\n\t\t */\n\t\tprivate Map<String, Object> addDefaultVars(Map<String, Object> params)\n\t\t{\n\t\t\t// create and fill the new params map\n\t\t\tfinal HashMap<String, Object> fullParams;\n\t\t\tif (params == null)\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(6);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfullParams = new HashMap<String, Object>(params.size() + 6);\n\t\t\t\tfullParams.putAll(params);\n\t\t\t}\n\n\t\t\t// add the input param if not already present\n\t\t\tif (!fullParams.containsKey(\"input\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"input\", getFormComponent().getInput());\n\t\t\t}\n\n\t\t\t// add the name param if not already present\n\t\t\tif (!fullParams.containsKey(\"name\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"name\", getPropertyName());\n\t\t\t}\n\n\t\t\t// add the label param if not already present\n\t\t\tif (!fullParams.containsKey(\"label\"))\n\t\t\t{\n\t\t\t\tfullParams.put(\"label\", getLabel());\n\t\t\t}\n\t\t\treturn fullParams;\n\t\t}\n\n\t\t/**\n\t\t * @return value of label param for this form component\n\t\t */\n\t\tprivate String getLabel()\n\t\t{\n\t\t\tString label = null;\n\n\t\t\t// first try the label model ...\n\t\t\tif (getFormComponent().getLabel() != null)\n\t\t\t{\n\t\t\t\tlabel = getFormComponent().getLabel().getObject();\n\t\t\t}\n\t\t\t// ... then try a resource of format [form-component-id] with\n\t\t\t// default of '[form-component-id]'\n\t\t\tif (label == null)\n\t\t\t{\n\n\t\t\t\tlabel = getFormComponent().getDefaultLabel();\n\t\t\t}\n\t\t\treturn label;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 1837662764513835399
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.model.IModel;\n\npublic interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {\n\tpublic T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);\n}\n",
            "error": "",
            "span_id": 12449221608437842935
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.time.temporal.Temporal;\nimport java.util.Date;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;\nimport org.apache.wicket.extensions.markup.html.form.DateTextField;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class DateControlGroup extends AbstractControlGroup<Date> {\n\tprivate static final long serialVersionUID = 7519983535463694024L;\n\n\tprivate DateTextField dateField;\n\t\n\tpublic DateControlGroup(String id, IModel<Date> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tBootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>(\"datepicker\"){\n\t\t\tprivate static final long serialVersionUID = -1294334224980199521L;\n\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\tsuper.onComponentTag(tag);\n\t\t\t\tif(isEnabledInHierarchy()) tag.append(\"class\", \"input-append\", \" \");\n\t\t\t}\n\t\t};\n\t\t\n\t\tdateField = new DateTextField(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\t\n\t\tdatepicker.add(dateField);\n\t\tdatepicker.add(new WebMarkupContainer(\"icon\"){\n\t\t\tprivate static final long serialVersionUID = -4412622222987841668L;\n\n\t\t\t@Override\n\t\t\tprotected void onConfigure() {\n\t\t\t\tsuper.onConfigure();\n\t\t\t\t//don't display icon if it is disabled\n\t\t\t\tsetVisible(dateField.isEnabledInHierarchy());\n\t\t\t}\n\t\t});\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(datepicker));\n\n\t\t\n\t}\n\n\t@Override\n\tpublic FormComponent<Date> getFormComponent() {\n\t\treturn dateField;\n\t}\n\n}\n",
            "error": "",
            "span_id": 551485581759324659
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.markup.html.form.ListMultipleChoice;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\n@SuppressWarnings(\"rawtypes\")\npublic class CollectionControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = 2580977991384659320L;\n\n\tprivate ListMultipleChoice multiChoice;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate Map<Class<?>, IObjectRenderer<?>> renderers;\n\t\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tpublic CollectionControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {\n\t\t\tprivate static final long serialVersionUID = 3674039468142186197L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t};\n\t\t\n\t\tmultiChoice = new ListMultipleChoice(\"input\", getModel(), modelList, new ChoiceRenderer()){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(multiChoice);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn multiChoice;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderers = renderers;\n\t}\n\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tIObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());\n\t\t\tif(renderer==null) return obj.toString(); \n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t}\t\n}\n",
            "error": "",
            "span_id": 728316074965325924
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.Radio;\nimport org.apache.wicket.markup.html.form.RadioGroup;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.StringResourceModel;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\n\npublic class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -7800336998276030740L;\n\n\tprivate RadioGroup<T> radioGroup;\n\t\n\tpublic EnumControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\tradioGroup = new RadioGroup<T>(\"radioGroup\", getModel());\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn radioGroup;\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\ttry {\n\t\t\tMethod method = getType().getMethod(\"values\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tT[] values = (T[]) method.invoke(null);\n\t\t\t\n\t\t\tRepeatingView view = new RepeatingView(\"repeating\");\n\t\t\tfor(T value : values){\n\t\t\t\tRadio<T> radio = new Radio<T>(\"input\", Model.of(value), radioGroup){\n\t\t\t\t\tprivate static final long serialVersionUID = 8903955236018583915L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getValue() {\n\t\t\t\t\t\treturn getModel().getObject().name();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected boolean getStatelessHint() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".\"+value.name(), getResourceBase(), getModel());\n\t\t\t\tstringResourceModel.setDefaultValue(value.name());\n\t\t\t\t\n\t\t\t\tWebMarkupContainer container = new WebMarkupContainer(view.newChildId());\n\t\t\t\tcontainer.add(new Label(\"label\", stringResourceModel));\n\t\t\t\tcontainer.add(radio);\n\t\t\t\tview.add(container);\n\t\t\t}\n\t\t\t\n\t\t\tradioGroup.add(view);\n\t\t\t\n\t\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t\t.add(radioGroup)\n\t\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t\t);\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (NoSuchMethodException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n}\n",
            "error": "",
            "span_id": 8415360410122984779
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\nimport java.util.List;\n\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.DropDownChoice;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.LoadableDetachableModel;\nimport org.apache.wicket.validation.IValidationError;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport com.premiumminds.wicket.crudifier.IObjectRenderer;\nimport com.premiumminds.wicket.crudifier.form.EntityProvider;\n\npublic class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -8444849747715611613L;\n\n\tprivate DropDownChoice<T> dropDown;\n\tprivate EntityProvider<T> entityProvider;\n\tprivate IObjectRenderer<T> renderer;\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic ObjectChoiceControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tIModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {\n\t\t\tprivate static final long serialVersionUID = -3995535290067544541L;\n\n\t\t\t@Override\n\t\t\tprotected List<T> load() {\n\t\t\t\tif(entityProvider==null) throw new RuntimeException(\"no entity provider for '\"+getPropertyName()+\"'\");\n\t\t\t\treturn (List<T>) entityProvider.load();\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t};\n\n\t\tdropDown = new DropDownChoice<T>(\"input\", getModel(), modelList){\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t\tdropDown.setNullValid(true);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tdropDown.setChoiceRenderer(new ChoiceRenderer());\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(dropDown);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn dropDown;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){\n\t\tthis.entityProvider = (EntityProvider<T>) entityProvider;\n\t\tthis.renderer = (IObjectRenderer<T>) renderer;\n\t}\n\t\n\tprivate class ChoiceRenderer implements IChoiceRenderer<T> {\n\t\tprivate static final long serialVersionUID = -584810566291563698L;\n\n\t\tpublic Object getDisplayValue(T obj) {\n\t\t\treturn renderer.render(obj);\n\t\t}\n\n\t\tpublic String getIdValue(T obj, int index) {\n\t\t\t//TODO retrieve @Id value if present\n\t\t\treturn Integer.toString(index);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic T getObject(String id, IModel<? extends List<? extends T>> choices)\n\t\t{\n\t\t\tList<? extends T> _choices = choices.getObject();\n\t\t\tfor (int index = 0; index < _choices.size(); index++)\n\t\t\t{\n\t\t\t\t// Get next choice\n\t\t\t\tfinal T choice = _choices.get(index);\n\t\t\t\tif (getIdValue(choice, index).equals(id))\n\t\t\t\t{\n\t\t\t\t\treturn choice;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n",
            "error": "",
            "span_id": 12745008241746173845
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.CheckBox;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\n\npublic class CheckboxControlGroup extends AbstractControlGroup<Boolean> {\n\tprivate static final long serialVersionUID = -2510616774931793758L;\n\t\n\tprivate CheckBox checkbox;\n\t\n\tpublic CheckboxControlGroup(String id, IModel<Boolean> model) {\n\t\tsuper(id, model);\n\t\t\n\t\tcheckbox = new CheckBox(\"input\", getModel());\n\t}\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".label\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(getPropertyName());\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\")\n\t\t\t.add(checkbox)\n\t\t\t.add(new Label(\"label\", stringResourceModel))\n\t\t);\n\t}\n\t@Override\n\tpublic FormComponent<Boolean> getFormComponent() {\n\t\treturn checkbox;\n\t}\n\n}\n",
            "error": "",
            "span_id": 6113281267374112282
        },
        {
            "input": "src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java",
            "output": "/**\n * Copyright (C) 2014 Premium Minds.\n *\n * This file is part of wicket-crudifier.\n *\n * wicket-crudifier is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.wicket.crudifier.form.elements;\n\nimport java.io.Serializable;\n\nimport com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.StringResourceModel;\nimport org.apache.wicket.validation.IValidationError;\n\npublic class TextFieldControlGroup<T> extends AbstractControlGroup<T> {\n\tprivate static final long serialVersionUID = -944776898493154174L;\n\n\tprivate TextField<T> textField;\n\t\n\tpublic TextFieldControlGroup(String id, IModel<T> model) {\n\t\tsuper(id, model);\n\n\t\ttextField = new TextField<T>(\"input\", getModel()){\n\t\t\tprivate static final long serialVersionUID = 4925601760084153117L;\n\n\t\t\t@Override\n\t\t\tpublic void error(IValidationError error) {\n\t\t\t\tMessageSource source = new MessageSource();\n\t\t\t\tSerializable message = error.getErrorMessage(source);\n\t\t\t\t\n\t\t\t\tsuper.error(message);\n\t\t\t}\n\t\t};\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tStringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+\".placeHolder\", getResourceBase(), getModel());\n\t\tstringResourceModel.setDefaultValue(\"\");\n\t\ttextField.add(AttributeModifier.replace(\"placeHolder\", stringResourceModel));\n\t\tWebMarkupContainer inputBox = new WebMarkupContainer(\"inputBox\");\n\t\taddInputBoxGridSize(inputBox);\n\t\tinputBox.add(textField);\n\t\tadd(new BootstrapControlGroupFeedback(\"controlGroup\").add(inputBox));\n\t}\n\n\t@Override\n\tpublic FormComponent<T> getFormComponent() {\n\t\treturn textField;\n\t}\n}\n",
            "error": "",
            "span_id": 15233468404061015090
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}