================================ System Message ================================

Act as an expert Java software developer.
The program has issues after a version upgrade of a dependency.
Try using minimal changes to the code to fix the issues. 
Do not explain your actions or ask questions, just provide diffs that always adhere to the rules.
When you think you are done, reply with the diff that fixes the issues, after that a final verification step will happen and the conversation will be ended if it was successful. If not you get the error back.

# File editing rules:
Return edits similar to unified diffs that `diff -U0` would produce.
The diff has to be in a markdown code block, like this: ```diff ```.

Make sure you include the first 2 lines with the file paths.
Don't include timestamps with the file paths.

Start each hunk of changes with a `@@ ... @@` line.
Don't include line numbers like `diff -U0` does.
The user's patch tool doesn't need them.

The user's patch tool needs CORRECT patches that apply cleanly against the current contents of the file!
Think carefully and make sure you include and mark all lines that need to be removed or changed as `-` lines.
Make sure you mark all new or modified lines with `+`.
Don't leave out any lines or the diff patch won't apply correctly.
Dont add in new comments or change existing comments.
Make sure the diff is minimal and only includes the changes needed to fix the issue plus at least one context line so the tool can apply the diff correctly.

Indentation matters in the diffs!

Start a new hunk for each section of the file that needs changes.
Dont include unnescessary context, but include at least one line of it.
If no context is included, the tool will try to apply the changes at the end of the line.

Only output hunks that specify changes with `+` or `-` lines.
Skip any hunks that are entirely unchanging ` ` lines.

Output hunks in whatever order makes the most sense.
Hunks don't need to be in any particular order.

When editing a function, method, loop, etc use a hunk to replace the *entire* code block.
Delete the entire existing version with `-` lines and then add a new, updated version with `+` lines.
This will help you generate correct code and correct diffs.

To make a new file, show a diff from `--- /dev/null` to `+++ path/to/new/file.ext`.


================================ Human Message =================================


Updated Dependency Details: jakarta.validation:jakarta.validation-api 2.0.2 -> 3.0.2

Initial Error: [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.11.0:compile (default-compile) on project wicket-crudifier: Compilation failure: Compilation failure:
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[37,24] package javax.validation does not exist
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[38,36] package javax.validation.constraints does not exist
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[39,36] package javax.validation.constraints does not exist
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[40,36] package javax.validation.constraints does not exist
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[41,33] package javax.validation.metadata does not exist
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[42,33] package javax.validation.metadata does not exist
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[43,33] package javax.validation.metadata does not exist
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[121,17] cannot find symbol
[ERROR]   symbol:   class Validator
[ERROR]   location: class com.premiumminds.wicket.crudifier.form.elements.ListControlGroups<T>
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[121,82] cannot access javax.validation.ValidatorFactory
[ERROR]   class file for javax.validation.ValidatorFactory not found
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[122,17] cannot find symbol
[ERROR]   symbol:   class BeanDescriptor
[ERROR]   location: class com.premiumminds.wicket.crudifier.form.elements.ListControlGroups<T>
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[133,25] cannot find symbol
[ERROR]   symbol:   class ElementDescriptor
[ERROR]   location: class com.premiumminds.wicket.crudifier.form.elements.ListControlGroups<T>
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[135,37] cannot find symbol
[ERROR]   symbol:   class ConstraintDescriptor
[ERROR]   location: class com.premiumminds.wicket.crudifier.form.elements.ListControlGroups<T>
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[136,37] cannot find symbol
[ERROR]   symbol:   class ConstraintDescriptor
[ERROR]   location: class com.premiumminds.wicket.crudifier.form.elements.ListControlGroups<T>
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[137,82] cannot find symbol
[ERROR]   symbol:   class NotNull
[ERROR]   location: class com.premiumminds.wicket.crudifier.form.elements.ListControlGroups<T>
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[138,82] cannot find symbol
[ERROR]   symbol:   class NotEmpty
[ERROR]   location: class com.premiumminds.wicket.crudifier.form.elements.ListControlGroups<T>
[ERROR] src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java:[139,82] cannot find symbol
[ERROR]   symbol:   class NotBlank
[ERROR]   location: class com.premiumminds.wicket.crudifier.form.elements.ListControlGroups<T>
[ERROR] -> [Help 1]

Revapi/japicmp API Changes, which describe changes in the APIs used by this project: {"japicmpResult": {}, "elementLines": {}, "revapiResult": {}, "allPotentialBreakingElements": ["getAnnotation()", "getConstraintsForClass(java.lang.Class)", "getName()", "getConstraintDescriptors()", "getValidator()", "getConstraintsForProperty(java.lang.String)"], "elementPatterns": {}, "project": "wicket-crudifier"}


================================== Ai Message ==================================
Tool Calls:
  read_file (1YMYZhIbd)
 Call ID: 1YMYZhIbd
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ListControlGroups.java

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.beans.PropertyDescriptor;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDateTime;
import java.time.temporal.Temporal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.validation.Validator;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.metadata.BeanDescriptor;
import javax.validation.metadata.ConstraintDescriptor;
import javax.validation.metadata.ElementDescriptor;

import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import com.premiumminds.wicket.crudifier.form.EntityProvider;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.wicket.Component;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.markup.repeater.RepeatingView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.PropertyModel;

public abstract class ListControlGroups<T> extends Panel {
	private static final long serialVersionUID = 7205285700113097720L;

	private Map<String, AbstractControlGroup<?>> fieldComponents = new HashMap<String, AbstractControlGroup<?>>();

	private Map<Class<?>, ControlGroupProvider<?>> controlGroupProviders = new HashMap<Class<?>, ControlGroupProvider<?>>();

	@SuppressWarnings("rawtypes")
	private final Map<Class<?>, Class<? extends AbstractControlGroup>> typesControlGroups = new HashMap<Class<?>, Class<? extends AbstractControlGroup>>();

	private List<ObjectProperties> objectProperties;
	private CrudifierEntitySettings entitySettings;
	private Map<Class<?>, IObjectRenderer<?>> renderers;

	public ListControlGroups(String id, IModel<T> model, CrudifierEntitySettings entitySettings, Map<Class<?>, IObjectRenderer<?>> renderers) {
		super(id, model);

		typesControlGroups.put(Date.class, DateControlGroup.class);
		typesControlGroups.put(LocalDateTime.class, TemporalControlGroup.class);
		typesControlGroups.put(Temporal.class, TemporalControlGroup.class);
		typesControlGroups.put(String.class, TextFieldControlGroup.class);
		typesControlGroups.put(Integer.class, TextFieldControlGroup.class);
		typesControlGroups.put(int.class, TextFieldControlGroup.class);
		typesControlGroups.put(Long.class, TextFieldControlGroup.class);
		typesControlGroups.put(long.class, TextFieldControlGroup.class);
		typesControlGroups.put(Double.class, TextFieldControlGroup.class);
		typesControlGroups.put(double.class, TextFieldControlGroup.class);
		typesControlGroups.put(BigDecimal.class, TextFieldControlGroup.class);
		typesControlGroups.put(BigInteger.class, TextFieldControlGroup.class);
		typesControlGroups.put(Boolean.class, CheckboxControlGroup.class);
		typesControlGroups.put(boolean.class, CheckboxControlGroup.class);
		typesControlGroups.put(Set.class, CollectionControlGroup.class);

		objectProperties = new ArrayList<ObjectProperties>();
		this.entitySettings = entitySettings;
		this.renderers = renderers;
	}

	private Set<String> getPropertiesByOrder(Class<?> modelClass) {
		Set<String> properties = new LinkedHashSet<String>();

		for(String property : entitySettings.getOrderOfFields()){
			if(!entitySettings.getHiddenFields().contains(property))
				properties.add(property);
		}
		for(PropertyDescriptor descriptor : PropertyUtils.getPropertyDescriptors(modelClass)){
			if(!entitySettings.getHiddenFields().contains(descriptor.getName()) &&
			   !properties.contains(descriptor.getName()) &&
			   !descriptor.getName().equals("class"))
				properties.add(descriptor.getName());
		}

		return properties;
	}

	protected abstract EntityProvider<?> getEntityProvider(String name);

	@Override
	protected void onInitialize() {
		super.onInitialize();

		Class<?> modelClass = getModel().getObject().getClass();

		Set<String> properties = getPropertiesByOrder(modelClass);

		Validator validator = HibernateValidatorProperty.validatorFactory.getValidator();
		BeanDescriptor constraintDescriptors = validator.getConstraintsForClass(modelClass);
		for(String property : properties){
			PropertyDescriptor descriptor;
			try {
				descriptor = PropertyUtils.getPropertyDescriptor(getModel().getObject(), property);
			} catch (Exception e) {
				throw new RuntimeException("error getting property "+property, e);
			}

			boolean required = false;

			ElementDescriptor constraintDescriptor = constraintDescriptors.getConstraintsForProperty(descriptor.getName());
			if(constraintDescriptor!=null){
				Set<ConstraintDescriptor<?>> constraintsSet = constraintDescriptor.getConstraintDescriptors();
				for(ConstraintDescriptor<?> constraint : constraintsSet){
					if(constraint.getAnnotation() instanceof NotNull ||
					   constraint.getAnnotation() instanceof NotEmpty ||
					   constraint.getAnnotation() instanceof NotBlank)
						required = true;
				}
			}

			objectProperties.add(new ObjectProperties(descriptor, required));
		}
		
		RepeatingView view = new RepeatingView("controlGroup");
		for(ObjectProperties objectProperty : objectProperties){
			try {
				AbstractControlGroup<?> controlGroup;
				if(!controlGroupProviders.containsKey(objectProperty.type)) {
					Constructor<?> constructor;
					Class<? extends Panel> typesControlGroup = getControlGroupByType(objectProperty.type);
					if(typesControlGroup==null){
						if(objectProperty.type.isEnum()) typesControlGroup = EnumControlGroup.class;
						else typesControlGroup = ObjectChoiceControlGroup.class;
					}

					constructor = typesControlGroup.getConstructor(String.class, IModel.class);

					controlGroup = (AbstractControlGroup<?>) constructor.newInstance(view.newChildId(), new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name));
					controlGroup.init(objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
					controlGroup.setEnabled(objectProperty.enabled);


					if(typesControlGroup==ObjectChoiceControlGroup.class){
						IObjectRenderer<?> renderer = renderers.get(objectProperty.type);
						if(renderer==null){
							renderer = new IObjectRenderer<Object>() {
								private static final long serialVersionUID = -6171655578529011405L;

								public String render(Object object) {
									return object.toString();
								}
							};
						}
						((ObjectChoiceControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderer);
					} else if(typesControlGroup==CollectionControlGroup.class){
						((CollectionControlGroup<?>) controlGroup).setConfiguration(getEntityProvider(objectProperty.name), renderers);
					}

				} else {
					controlGroup = controlGroupProviders
							.get(objectProperty.type)
							.createControlGroup(view.newChildId()
									, new PropertyModel<Object>(ListControlGroups.this.getModel(), objectProperty.name)
									, objectProperty.name, getResourceBase(), objectProperty.required, objectProperty.type, entitySettings);
				}
				view.add(controlGroup);

				fieldComponents.put(objectProperty.name, controlGroup);
			} catch (SecurityException e) {
				throw new RuntimeException(e);
			} catch (NoSuchMethodException e) {
				throw new RuntimeException(e);
			} catch (IllegalArgumentException e) {
				throw new RuntimeException(e);
			} catch (InstantiationException e) {
				throw new RuntimeException(e);
			} catch (IllegalAccessException e) {
				throw new RuntimeException(e);
			} catch (InvocationTargetException e) {
				throw new RuntimeException(e);
			}
		}

		add(view);
	}

	@SuppressWarnings("unchecked")
	public IModel<T> getModel(){
		return (IModel<T>) getDefaultModel();
	}

	public Component getResourceBase(){
		return this;
	}

	public Map<String, AbstractControlGroup<?>> getFieldsControlGroup(){
		return Collections.unmodifiableMap(fieldComponents);
	}

	@SuppressWarnings("rawtypes")
	private Class<? extends AbstractControlGroup> getControlGroupByType(Class<?> type){
		for(Class<?> mapType : typesControlGroups.keySet()){
			if(type.isAssignableFrom(mapType)) return typesControlGroups.get(mapType);
		}
		return null;
	}

	private static final class ObjectProperties implements Serializable {
		private static final long serialVersionUID = 1747577998897955928L;
		private String name;
		private boolean enabled;
		private Class<?> type;
		private boolean required;

		public ObjectProperties(PropertyDescriptor descriptor, boolean required){
			this.name = descriptor.getName();
			this.enabled = descriptor.getWriteMethod()!=null;
			this.type = descriptor.getPropertyType();
			this.required = required;
		}
	}

	@SuppressWarnings("rawtypes")
	public Map<Class<?>, Class<? extends AbstractControlGroup>> getControlGroupsTypesMap(){
		return typesControlGroups;
	}
	
	public Map<Class<?>, ControlGroupProvider<? extends AbstractControlGroup<?>>> getControlGroupProviders(){
		return this.controlGroupProviders;
	}
}


================================== Ai Message ==================================
Tool Calls:
  read_file (FdwCxiqQz)
 Call ID: FdwCxiqQz
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Application;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.Component;
import org.apache.wicket.Localizer;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.util.convert.IConverter;
import org.apache.wicket.util.string.Strings;
import org.apache.wicket.util.string.interpolator.VariableInterpolator;
import org.apache.wicket.validation.IErrorMessageSource;

public abstract class AbstractControlGroup<T> extends Panel {
	private static final long serialVersionUID = 6551088390404506493L;

	private String propertyName;
	private Component resourceBase;
	private Class<?> type;
	private boolean required;
	private CrudifierEntitySettings entitySettings;

	public AbstractControlGroup(String id, IModel<T> model) {
		super(id, model);
	}
	
	public void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){
		this.propertyName = propertyName;
		this.resourceBase = resourceBase;
		this.type = type;
		this.required = required;
		this.entitySettings = entitySettings;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();

		getFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));

		StringResourceModel labelModel = new StringResourceModel(getPropertyName()+".label", resourceBase, getModel());
		labelModel.setDefaultValue(getPropertyName());
		getFormComponent().setLabel(labelModel);
		getFormComponent().setRequired(required);
	}
	
	public abstract FormComponent<T> getFormComponent();

	@SuppressWarnings("unchecked")
	public IModel<T> getModel(){
		return (IModel<T>) getDefaultModel();
	}
	
	public String getPropertyName() {
		return propertyName;
	}
	
	public Component getResourceBase(){
		return resourceBase;
	}
	
	public Class<?> getType() {
		return type;
	}
	
	public CrudifierEntitySettings getEntitySettings(){
		return entitySettings;
	}

	protected void addInputBoxGridSize(WebMarkupContainer inputBox){
		String css = "col-lg-10"; // default
		if(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){
			switch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){
			case COL1:
				css = "col-lg-1";
				break;
			case COL2:
				css = "col-lg-2";
				break;
			case COL3:
				css = "col-lg-3";
				break;
			case COL4:
				css = "col-lg-4";
				break;
			case COL5:
				css = "col-lg-5";
				break;
			case COL6:
				css = "col-lg-6";
				break;
			case COL7:
				css = "col-lg-7";
				break;
			case COL8:
				css = "col-lg-8";
				break;
			case COL9:
				css = "col-lg-9";
				break;
			default:
				break;
			}
		}
		inputBox.add(AttributeModifier.append("class", css));
	}
	
	/**
	 * Copiado do FormComponent.MessageSource
	 * 
	 * {@link IErrorMessageSource} used for error messages against this form components.
	 * 
	 * @author ivaynberg
	 */
	protected class MessageSource implements IErrorMessageSource
	{
		private final Set<String> triedKeys = new LinkedHashSet<String>();

		public MessageSource() {
			// TODO Auto-generated constructor stub
		}

		/**
		 * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)
		 */
		public String getMessage(String key, Map<String, Object> vars)
		{
			final AbstractControlGroup<T> formComponent = AbstractControlGroup.this;

			// Use the following log4j config for detailed logging on the property resolution
			// process
			// log4j.logger.org.apache.wicket.resource.loader=DEBUG
			// log4j.logger.org.apache.wicket.Localizer=DEBUG

			final Localizer localizer = formComponent.getLocalizer();

			// retrieve prefix that will be used to construct message keys
			String prefix = getFormComponent().getValidatorKeyPrefix();
			String message = null;

			// first try the full form of key [form-component-id].[prefix].[key]
			String resource = getPropertyName() + "." + prefix(prefix, key);
			message = getString(localizer, resource, resourceBase);

			// if not found, try a more general form (without prefix)
			// [form-component-id].[key]
			if (Strings.isEmpty(message) && Strings.isEmpty(prefix))
			{
				resource = getPropertyName() + "." + key;
				message = getString(localizer, resource, resourceBase);
			}

			// If not found try a more general form [prefix].[key]
			if (Strings.isEmpty(message))
			{
				resource = prefix(prefix, key);
				message = getString(localizer, resource, formComponent);
			}

			// If not found try the most general form [key]
			if (Strings.isEmpty(message))
			{
				// Try a variation of the resource key
				message = getString(localizer, key, formComponent);
			}

			// convert empty string to null in case our default value of "" was
			// returned from localizer
			if (Strings.isEmpty(message))
			{
				message = null;
			}
			else
			{
				message = substitute(message, addDefaultVars(vars));
			}
			return message;
		}

		private String prefix(String prefix, String key)
		{
			if (!Strings.isEmpty(prefix))
			{
				return prefix + "." + key;
			}
			else
			{
				return key;
			}
		}

		/**
		 * 
		 * @param localizer
		 * @param key
		 * @param component
		 * @return string
		 */
		private String getString(Localizer localizer, String key, Component component)
		{
			triedKeys.add(key);

			// Note: It is important that the default value of "" is
			// provided to getString() not to throw a MissingResourceException or to
			// return a default string like "[Warning: String ..."
			return localizer.getString(key, component, "");
		}

		private String substitute(String string, final Map<String, Object> vars)
			throws IllegalStateException
		{
			return new VariableInterpolator(string, Application.get()
				.getResourceSettings()
				.getThrowExceptionOnMissingResource())
			{
				private static final long serialVersionUID = 1L;

				@SuppressWarnings({ "rawtypes", "unchecked" })
				@Override
				protected String getValue(String variableName)
				{
					Object value = vars.get(variableName);
					if (value == null)
					{
						return null;
					}
					else
					{
						IConverter converter = getConverter(value.getClass());
						if (converter == null)
						{
							return Strings.toString(value);
						}
						else
						{
							return converter.convertToString(value, getLocale());
						}
					}
				}
			}.toString();
		}

		/**
		 * Creates a new params map that additionally contains the default input, name, label
		 * parameters
		 * 
		 * @param params
		 *            original params map
		 * @return new params map
		 */
		private Map<String, Object> addDefaultVars(Map<String, Object> params)
		{
			// create and fill the new params map
			final HashMap<String, Object> fullParams;
			if (params == null)
			{
				fullParams = new HashMap<String, Object>(6);
			}
			else
			{
				fullParams = new HashMap<String, Object>(params.size() + 6);
				fullParams.putAll(params);
			}

			// add the input param if not already present
			if (!fullParams.containsKey("input"))
			{
				fullParams.put("input", getFormComponent().getInput());
			}

			// add the name param if not already present
			if (!fullParams.containsKey("name"))
			{
				fullParams.put("name", getPropertyName());
			}

			// add the label param if not already present
			if (!fullParams.containsKey("label"))
			{
				fullParams.put("label", getLabel());
			}
			return fullParams;
		}

		/**
		 * @return value of label param for this form component
		 */
		private String getLabel()
		{
			String label = null;

			// first try the label model ...
			if (getFormComponent().getLabel() != null)
			{
				label = getFormComponent().getLabel().getObject();
			}
			// ... then try a resource of format [form-component-id] with
			// default of '[form-component-id]'
			if (label == null)
			{

				label = getFormComponent().getDefaultLabel();
			}
			return label;
		}
	}
}


================================== Ai Message ==================================
Tool Calls:
  read_file (6RVlmdlnx)
 Call ID: 6RVlmdlnx
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Component;
import org.apache.wicket.model.IModel;

public interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {
	public T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);
}


================================== Ai Message ==================================
Tool Calls:
  read_file (LLoFaUvwZ)
 Call ID: LLoFaUvwZ
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java
  read_file (f7NzzooFL)
 Call ID: f7NzzooFL
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java
  read_file (WMfdjiOxc)
 Call ID: WMfdjiOxc
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java
  read_file (GVRRaaREO)
 Call ID: GVRRaaREO
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java
  read_file (LGX2qZuxC)
 Call ID: LGX2qZuxC
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java
  read_file (6mRy32XU3)
 Call ID: 6mRy32XU3
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.time.temporal.Temporal;
import java.util.Date;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;
import org.apache.wicket.extensions.markup.html.form.DateTextField;
import org.apache.wicket.markup.ComponentTag;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.validation.IValidationError;

public class DateControlGroup extends AbstractControlGroup<Date> {
	private static final long serialVersionUID = 7519983535463694024L;

	private DateTextField dateField;
	
	public DateControlGroup(String id, IModel<Date> model) {
		super(id, model);
		
		BootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>("datepicker"){
			private static final long serialVersionUID = -1294334224980199521L;

			@Override
			protected void onComponentTag(ComponentTag tag) {
				super.onComponentTag(tag);
				if(isEnabledInHierarchy()) tag.append("class", "input-append", " ");
			}
		};
		
		dateField = new DateTextField("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		
		datepicker.add(dateField);
		datepicker.add(new WebMarkupContainer("icon"){
			private static final long serialVersionUID = -4412622222987841668L;

			@Override
			protected void onConfigure() {
				super.onConfigure();
				//don't display icon if it is disabled
				setVisible(dateField.isEnabledInHierarchy());
			}
		});
		add(new BootstrapControlGroupFeedback("controlGroup").add(datepicker));

		
	}

	@Override
	public FormComponent<Date> getFormComponent() {
		return dateField;
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.Radio;
import org.apache.wicket.markup.html.form.RadioGroup;
import org.apache.wicket.markup.repeater.RepeatingView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.StringResourceModel;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;

public class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -7800336998276030740L;

	private RadioGroup<T> radioGroup;
	
	public EnumControlGroup(String id, IModel<T> model) {
		super(id, model);

		radioGroup = new RadioGroup<T>("radioGroup", getModel());
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return radioGroup;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		try {
			Method method = getType().getMethod("values");
			@SuppressWarnings("unchecked")
			T[] values = (T[]) method.invoke(null);
			
			RepeatingView view = new RepeatingView("repeating");
			for(T value : values){
				Radio<T> radio = new Radio<T>("input", Model.of(value), radioGroup){
					private static final long serialVersionUID = 8903955236018583915L;

					@Override
					public String getValue() {
						return getModel().getObject().name();
					}
					
					@Override
					protected boolean getStatelessHint() {
						return true;
					}
				};
				StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+"."+value.name(), getResourceBase(), getModel());
				stringResourceModel.setDefaultValue(value.name());
				
				WebMarkupContainer container = new WebMarkupContainer(view.newChildId());
				container.add(new Label("label", stringResourceModel));
				container.add(radio);
				view.add(container);
			}
			
			radioGroup.add(view);
			
			StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
			stringResourceModel.setDefaultValue(getPropertyName());
			add(new BootstrapControlGroupFeedback("controlGroup")
				.add(radioGroup)
				.add(new Label("label", stringResourceModel))
			);
		} catch (SecurityException e) {
			throw new RuntimeException(e);
		} catch (NoSuchMethodException e) {
			throw new RuntimeException(e);
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(e);
		} catch (IllegalAccessException e) {
			throw new RuntimeException(e);
		} catch (InvocationTargetException e) {
			throw new RuntimeException(e);
		}
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

public class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -8444849747715611613L;

	private DropDownChoice<T> dropDown;
	private EntityProvider<T> entityProvider;
	private IObjectRenderer<T> renderer;
	
	@SuppressWarnings("serial")
	public ObjectChoiceControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {
			private static final long serialVersionUID = -3995535290067544541L;

			@Override
			protected List<T> load() {
				if(entityProvider==null) throw new RuntimeException("no entity provider for '"+getPropertyName()+"'");
				return (List<T>) entityProvider.load();
			}
			
			
		};

		dropDown = new DropDownChoice<T>("input", getModel(), modelList){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		dropDown.setNullValid(true);
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		dropDown.setChoiceRenderer(new ChoiceRenderer());
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(dropDown);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return dropDown;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderer = (IObjectRenderer<T>) renderer;
	}
	
	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}
		
		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.form.ListMultipleChoice;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

@SuppressWarnings("rawtypes")
public class CollectionControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = 2580977991384659320L;

	private ListMultipleChoice multiChoice;
	private EntityProvider<T> entityProvider;
	private Map<Class<?>, IObjectRenderer<?>> renderers;
	
	@SuppressWarnings({ "unchecked", "serial" })
	public CollectionControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {
			private static final long serialVersionUID = 3674039468142186197L;

			@Override
			protected List<T> load() {
				return (List<T>) entityProvider.load();
			}
		};
		
		multiChoice = new ListMultipleChoice("input", getModel(), modelList, new ChoiceRenderer()){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}


	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(multiChoice);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public FormComponent<T> getFormComponent() {
		return multiChoice;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderers = renderers;
	}

	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			@SuppressWarnings("unchecked")
			IObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());
			if(renderer==null) return obj.toString(); 
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}

		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
		
	}	
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.validation.IValidationError;

public class TextFieldControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -944776898493154174L;

	private TextField<T> textField;
	
	public TextFieldControlGroup(String id, IModel<T> model) {
		super(id, model);

		textField = new TextField<T>("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".placeHolder", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue("");
		textField.add(AttributeModifier.replace("placeHolder", stringResourceModel));
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(textField);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return textField;
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;

public class CheckboxControlGroup extends AbstractControlGroup<Boolean> {
	private static final long serialVersionUID = -2510616774931793758L;
	
	private CheckBox checkbox;
	
	public CheckboxControlGroup(String id, IModel<Boolean> model) {
		super(id, model);
		
		checkbox = new CheckBox("input", getModel());
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue(getPropertyName());
		add(new BootstrapControlGroupFeedback("controlGroup")
			.add(checkbox)
			.add(new Label("label", stringResourceModel))
		);
	}
	@Override
	public FormComponent<Boolean> getFormComponent() {
		return checkbox;
	}

}


================================== Ai Message ==================================
Tool Calls:
  read_file (lmUsL2Wk6)
 Call ID: lmUsL2Wk6
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java
    lines: [1, 100]
  read_file (4tHcoHA06)
 Call ID: 4tHcoHA06
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java
    lines: [1, 100]
  read_file (qTa4CcDC9)
 Call ID: qTa4CcDC9
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java
    lines: [1, 100]
  read_file (0z0sJzTbW)
 Call ID: 0z0sJzTbW
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java
    lines: [1, 100]
  read_file (iVk8CNUjO)
 Call ID: iVk8CNUjO
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java
    lines: [1, 100]
  read_file (NBLstcx65)
 Call ID: NBLstcx65
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java
    lines: [1, 100]
  read_file (Buckozz3X)
 Call ID: Buckozz3X
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java
    lines: [1, 100]
  read_file (88UqvUmIr)
 Call ID: 88UqvUmIr
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java
    lines: [1, 100]

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Application;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.Component;
import org.apache.wicket.Localizer;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.util.convert.IConverter;
import org.apache.wicket.util.string.Strings;
import org.apache.wicket.util.string.interpolator.VariableInterpolator;
import org.apache.wicket.validation.IErrorMessageSource;

public abstract class AbstractControlGroup<T> extends Panel {
	private static final long serialVersionUID = 6551088390404506493L;

	private String propertyName;
	private Component resourceBase;
	private Class<?> type;
	private boolean required;
	private CrudifierEntitySettings entitySettings;

	public AbstractControlGroup(String id, IModel<T> model) {
		super(id, model);
	}
	
	public void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){
		this.propertyName = propertyName;
		this.resourceBase = resourceBase;
		this.type = type;
		this.required = required;
		this.entitySettings = entitySettings;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();

		getFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));

		StringResourceModel labelModel = new StringResourceModel(getPropertyName()+".label", resourceBase, getModel());
		labelModel.setDefaultValue(getPropertyName());
		getFormComponent().setLabel(labelModel);
		getFormComponent().setRequired(required);
	}
	
	public abstract FormComponent<T> getFormComponent();

	@SuppressWarnings("unchecked")
	public IModel<T> getModel(){
		return (IModel<T>) getDefaultModel();
	}
	
	public String getPropertyName() {
		return propertyName;
	}
	
	public Component getResourceBase(){
		return resourceBase;
	}
	
	public Class<?> getType() {
		return type;
	}
	
	public CrudifierEntitySettings getEntitySettings(){
		return entitySettings;
	}

	protected void addInputBoxGridSize(WebMarkupContainer inputBox){
		String css = "col-lg-10"; // default
		if(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){
			switch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){
			case COL1:
				css = "col-lg-1";
				break;
			case COL2:
				css = "col-lg-2";
				break;
			case COL3:
				css = "col-lg-3";
				break;
			case COL4:
				css = "col-lg-4";
				break;
			case COL5:
				css = "col-lg-5";
				break;
			case COL6:
				css = "col-lg-6";
				break;
			case COL7:
				css = "col-lg-7";
				break;
			case COL8:
				css = "col-lg-8";
				break;
			case COL9:
				css = "col-lg-9";
				break;
			default:
				break;
			}
		}
		inputBox.add(AttributeModifier.append("class", css));
	}
	
	/**
	 * Copiado do FormComponent.MessageSource
	 * 
	 * {@link IErrorMessageSource} used for error messages against this form components.
	 * 
	 * @author ivaynberg
	 */
	protected class MessageSource implements IErrorMessageSource
	{
		private final Set<String> triedKeys = new LinkedHashSet<String>();

		public MessageSource() {
			// TODO Auto-generated constructor stub
		}

		/**
		 * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)
		 */
		public String getMessage(String key, Map<String, Object> vars)
		{
			final AbstractControlGroup<T> formComponent = AbstractControlGroup.this;

			// Use the following log4j config for detailed logging on the property resolution
			// process
			// log4j.logger.org.apache.wicket.resource.loader=DEBUG
			// log4j.logger.org.apache.wicket.Localizer=DEBUG

			final Localizer localizer = formComponent.getLocalizer();

			// retrieve prefix that will be used to construct message keys
			String prefix = getFormComponent().getValidatorKeyPrefix();
			String message = null;

			// first try the full form of key [form-component-id].[prefix].[key]
			String resource = getPropertyName() + "." + prefix(prefix, key);
			message = getString(localizer, resource, resourceBase);

			// if not found, try a more general form (without prefix)
			// [form-component-id].[key]
			if (Strings.isEmpty(message) && Strings.isEmpty(prefix))
			{
				resource = getPropertyName() + "." + key;
				message = getString(localizer, resource, resourceBase);
			}

			// If not found try a more general form [prefix].[key]
			if (Strings.isEmpty(message))
			{
				resource = prefix(prefix, key);
				message = getString(localizer, resource, formComponent);
			}

			// If not found try the most general form [key]
			if (Strings.isEmpty(message))
			{
				// Try a variation of the resource key
				message = getString(localizer, key, formComponent);
			}

			// convert empty string to null in case our default value of "" was
			// returned from localizer
			if (Strings.isEmpty(message))
			{
				message = null;
			}
			else
			{
				message = substitute(message, addDefaultVars(vars));
			}
			return message;
		}

		private String prefix(String prefix, String key)
		{
			if (!Strings.isEmpty(prefix))
			{
				return prefix + "." + key;
			}
			else
			{
				return key;
			}
		}

		/**
		 * 
		 * @param localizer
		 * @param key
		 * @param component
		 * @return string
		 */
		private String getString(Localizer localizer, String key, Component component)
		{
			triedKeys.add(key);

			// Note: It is important that the default value of "" is
			// provided to getString() not to throw a MissingResourceException or to
			// return a default string like "[Warning: String ..."
			return localizer.getString(key, component, "");
		}

		private String substitute(String string, final Map<String, Object> vars)
			throws IllegalStateException
		{
			return new VariableInterpolator(string, Application.get()
				.getResourceSettings()
				.getThrowExceptionOnMissingResource())
			{
				private static final long serialVersionUID = 1L;

				@SuppressWarnings({ "rawtypes", "unchecked" })
				@Override
				protected String getValue(String variableName)
				{
					Object value = vars.get(variableName);
					if (value == null)
					{
						return null;
					}
					else
					{
						IConverter converter = getConverter(value.getClass());
						if (converter == null)
						{
							return Strings.toString(value);
						}
						else
						{
							return converter.convertToString(value, getLocale());
						}
					}
				}
			}.toString();
		}

		/**
		 * Creates a new params map that additionally contains the default input, name, label
		 * parameters
		 * 
		 * @param params
		 *            original params map
		 * @return new params map
		 */
		private Map<String, Object> addDefaultVars(Map<String, Object> params)
		{
			// create and fill the new params map
			final HashMap<String, Object> fullParams;
			if (params == null)
			{
				fullParams = new HashMap<String, Object>(6);
			}
			else
			{
				fullParams = new HashMap<String, Object>(params.size() + 6);
				fullParams.putAll(params);
			}

			// add the input param if not already present
			if (!fullParams.containsKey("input"))
			{
				fullParams.put("input", getFormComponent().getInput());
			}

			// add the name param if not already present
			if (!fullParams.containsKey("name"))
			{
				fullParams.put("name", getPropertyName());
			}

			// add the label param if not already present
			if (!fullParams.containsKey("label"))
			{
				fullParams.put("label", getLabel());
			}
			return fullParams;
		}

		/**
		 * @return value of label param for this form component
		 */
		private String getLabel()
		{
			String label = null;

			// first try the label model ...
			if (getFormComponent().getLabel() != null)
			{
				label = getFormComponent().getLabel().getObject();
			}
			// ... then try a resource of format [form-component-id] with
			// default of '[form-component-id]'
			if (label == null)
			{

				label = getFormComponent().getDefaultLabel();
			}
			return label;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Component;
import org.apache.wicket.model.IModel;

public interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {
	public T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.time.temporal.Temporal;
import java.util.Date;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;
import org.apache.wicket.extensions.markup.html.form.DateTextField;
import org.apache.wicket.markup.ComponentTag;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.validation.IValidationError;

public class DateControlGroup extends AbstractControlGroup<Date> {
	private static final long serialVersionUID = 7519983535463694024L;

	private DateTextField dateField;
	
	public DateControlGroup(String id, IModel<Date> model) {
		super(id, model);
		
		BootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>("datepicker"){
			private static final long serialVersionUID = -1294334224980199521L;

			@Override
			protected void onComponentTag(ComponentTag tag) {
				super.onComponentTag(tag);
				if(isEnabledInHierarchy()) tag.append("class", "input-append", " ");
			}
		};
		
		dateField = new DateTextField("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		
		datepicker.add(dateField);
		datepicker.add(new WebMarkupContainer("icon"){
			private static final long serialVersionUID = -4412622222987841668L;

			@Override
			protected void onConfigure() {
				super.onConfigure();
				//don't display icon if it is disabled
				setVisible(dateField.isEnabledInHierarchy());
			}
		});
		add(new BootstrapControlGroupFeedback("controlGroup").add(datepicker));

		
	}

	@Override
	public FormComponent<Date> getFormComponent() {
		return dateField;
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.Radio;
import org.apache.wicket.markup.html.form.RadioGroup;
import org.apache.wicket.markup.repeater.RepeatingView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.StringResourceModel;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;

public class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -7800336998276030740L;

	private RadioGroup<T> radioGroup;
	
	public EnumControlGroup(String id, IModel<T> model) {
		super(id, model);

		radioGroup = new RadioGroup<T>("radioGroup", getModel());
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return radioGroup;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		try {
			Method method = getType().getMethod("values");
			@SuppressWarnings("unchecked")
			T[] values = (T[]) method.invoke(null);
			
			RepeatingView view = new RepeatingView("repeating");
			for(T value : values){
				Radio<T> radio = new Radio<T>("input", Model.of(value), radioGroup){
					private static final long serialVersionUID = 8903955236018583915L;

					@Override
					public String getValue() {
						return getModel().getObject().name();
					}
					
					@Override
					protected boolean getStatelessHint() {
						return true;
					}
				};
				StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+"."+value.name(), getResourceBase(), getModel());
				stringResourceModel.setDefaultValue(value.name());
				
				WebMarkupContainer container = new WebMarkupContainer(view.newChildId());
				container.add(new Label("label", stringResourceModel));
				container.add(radio);
				view.add(container);
			}
			
			radioGroup.add(view);
			
			StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
			stringResourceModel.setDefaultValue(getPropertyName());
			add(new BootstrapControlGroupFeedback("controlGroup")
				.add(radioGroup)
				.add(new Label("label", stringResourceModel))
			);
		} catch (SecurityException e) {
			throw new RuntimeException(e);
		} catch (NoSuchMethodException e) {
			throw new RuntimeException(e);
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(e);
		} catch (IllegalAccessException e) {
			throw new RuntimeException(e);
		} catch (InvocationTargetException e) {
			throw new RuntimeException(e);
		}
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

public class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -8444849747715611613L;

	private DropDownChoice<T> dropDown;
	private EntityProvider<T> entityProvider;
	private IObjectRenderer<T> renderer;
	
	@SuppressWarnings("serial")
	public ObjectChoiceControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {
			private static final long serialVersionUID = -3995535290067544541L;

			@Override
			protected List<T> load() {
				if(entityProvider==null) throw new RuntimeException("no entity provider for '"+getPropertyName()+"'");
				return (List<T>) entityProvider.load();
			}
			
			
		};

		dropDown = new DropDownChoice<T>("input", getModel(), modelList){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		dropDown.setNullValid(true);
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		dropDown.setChoiceRenderer(new ChoiceRenderer());
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(dropDown);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return dropDown;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderer = (IObjectRenderer<T>) renderer;
	}
	
	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}
		
		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.form.ListMultipleChoice;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

@SuppressWarnings("rawtypes")
public class CollectionControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = 2580977991384659320L;

	private ListMultipleChoice multiChoice;
	private EntityProvider<T> entityProvider;
	private Map<Class<?>, IObjectRenderer<?>> renderers;
	
	@SuppressWarnings({ "unchecked", "serial" })
	public CollectionControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {
			private static final long serialVersionUID = 3674039468142186197L;

			@Override
			protected List<T> load() {
				return (List<T>) entityProvider.load();
			}
		};
		
		multiChoice = new ListMultipleChoice("input", getModel(), modelList, new ChoiceRenderer()){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}


	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(multiChoice);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public FormComponent<T> getFormComponent() {
		return multiChoice;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderers = renderers;
	}

	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			@SuppressWarnings("unchecked")
			IObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());
			if(renderer==null) return obj.toString(); 
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}

		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
		
	}	
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.validation.IValidationError;

public class TextFieldControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -944776898493154174L;

	private TextField<T> textField;
	
	public TextFieldControlGroup(String id, IModel<T> model) {
		super(id, model);

		textField = new TextField<T>("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".placeHolder", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue("");
		textField.add(AttributeModifier.replace("placeHolder", stringResourceModel));
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(textField);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return textField;
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;

public class CheckboxControlGroup extends AbstractControlGroup<Boolean> {
	private static final long serialVersionUID = -2510616774931793758L;
	
	private CheckBox checkbox;
	
	public CheckboxControlGroup(String id, IModel<Boolean> model) {
		super(id, model);
		
		checkbox = new CheckBox("input", getModel());
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue(getPropertyName());
		add(new BootstrapControlGroupFeedback("controlGroup")
			.add(checkbox)
			.add(new Label("label", stringResourceModel))
		);
	}
	@Override
	public FormComponent<Boolean> getFormComponent() {
		return checkbox;
	}

}


================================== Ai Message ==================================
Tool Calls:
  read_file (6UCP4lgOJ)
 Call ID: 6UCP4lgOJ
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java
    lines: [1, 100]
  read_file (4GUWTP3Y4)
 Call ID: 4GUWTP3Y4
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java
    lines: [1, 100]
  read_file (sAMrJKfTq)
 Call ID: sAMrJKfTq
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java
    lines: [1, 100]
  read_file (cv1kCvyAv)
 Call ID: cv1kCvyAv
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java
    lines: [1, 100]
  read_file (BjAvl1OAo)
 Call ID: BjAvl1OAo
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java
    lines: [1, 100]
  read_file (nEGDg02VI)
 Call ID: nEGDg02VI
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java
    lines: [1, 100]
  read_file (tD9FNwFUI)
 Call ID: tD9FNwFUI
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java
    lines: [1, 100]
  read_file (zzEHsKKtN)
 Call ID: zzEHsKKtN
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java
    lines: [1, 100]

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Application;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.Component;
import org.apache.wicket.Localizer;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.util.convert.IConverter;
import org.apache.wicket.util.string.Strings;
import org.apache.wicket.util.string.interpolator.VariableInterpolator;
import org.apache.wicket.validation.IErrorMessageSource;

public abstract class AbstractControlGroup<T> extends Panel {
	private static final long serialVersionUID = 6551088390404506493L;

	private String propertyName;
	private Component resourceBase;
	private Class<?> type;
	private boolean required;
	private CrudifierEntitySettings entitySettings;

	public AbstractControlGroup(String id, IModel<T> model) {
		super(id, model);
	}
	
	public void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){
		this.propertyName = propertyName;
		this.resourceBase = resourceBase;
		this.type = type;
		this.required = required;
		this.entitySettings = entitySettings;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();

		getFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));

		StringResourceModel labelModel = new StringResourceModel(getPropertyName()+".label", resourceBase, getModel());
		labelModel.setDefaultValue(getPropertyName());
		getFormComponent().setLabel(labelModel);
		getFormComponent().setRequired(required);
	}
	
	public abstract FormComponent<T> getFormComponent();

	@SuppressWarnings("unchecked")
	public IModel<T> getModel(){
		return (IModel<T>) getDefaultModel();
	}
	
	public String getPropertyName() {
		return propertyName;
	}
	
	public Component getResourceBase(){
		return resourceBase;
	}
	
	public Class<?> getType() {
		return type;
	}
	
	public CrudifierEntitySettings getEntitySettings(){
		return entitySettings;
	}

	protected void addInputBoxGridSize(WebMarkupContainer inputBox){
		String css = "col-lg-10"; // default
		if(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){
			switch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){
			case COL1:
				css = "col-lg-1";
				break;
			case COL2:
				css = "col-lg-2";
				break;
			case COL3:
				css = "col-lg-3";
				break;
			case COL4:
				css = "col-lg-4";
				break;
			case COL5:
				css = "col-lg-5";
				break;
			case COL6:
				css = "col-lg-6";
				break;
			case COL7:
				css = "col-lg-7";
				break;
			case COL8:
				css = "col-lg-8";
				break;
			case COL9:
				css = "col-lg-9";
				break;
			default:
				break;
			}
		}
		inputBox.add(AttributeModifier.append("class", css));
	}
	
	/**
	 * Copiado do FormComponent.MessageSource
	 * 
	 * {@link IErrorMessageSource} used for error messages against this form components.
	 * 
	 * @author ivaynberg
	 */
	protected class MessageSource implements IErrorMessageSource
	{
		private final Set<String> triedKeys = new LinkedHashSet<String>();

		public MessageSource() {
			// TODO Auto-generated constructor stub
		}

		/**
		 * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)
		 */
		public String getMessage(String key, Map<String, Object> vars)
		{
			final AbstractControlGroup<T> formComponent = AbstractControlGroup.this;

			// Use the following log4j config for detailed logging on the property resolution
			// process
			// log4j.logger.org.apache.wicket.resource.loader=DEBUG
			// log4j.logger.org.apache.wicket.Localizer=DEBUG

			final Localizer localizer = formComponent.getLocalizer();

			// retrieve prefix that will be used to construct message keys
			String prefix = getFormComponent().getValidatorKeyPrefix();
			String message = null;

			// first try the full form of key [form-component-id].[prefix].[key]
			String resource = getPropertyName() + "." + prefix(prefix, key);
			message = getString(localizer, resource, resourceBase);

			// if not found, try a more general form (without prefix)
			// [form-component-id].[key]
			if (Strings.isEmpty(message) && Strings.isEmpty(prefix))
			{
				resource = getPropertyName() + "." + key;
				message = getString(localizer, resource, resourceBase);
			}

			// If not found try a more general form [prefix].[key]
			if (Strings.isEmpty(message))
			{
				resource = prefix(prefix, key);
				message = getString(localizer, resource, formComponent);
			}

			// If not found try the most general form [key]
			if (Strings.isEmpty(message))
			{
				// Try a variation of the resource key
				message = getString(localizer, key, formComponent);
			}

			// convert empty string to null in case our default value of "" was
			// returned from localizer
			if (Strings.isEmpty(message))
			{
				message = null;
			}
			else
			{
				message = substitute(message, addDefaultVars(vars));
			}
			return message;
		}

		private String prefix(String prefix, String key)
		{
			if (!Strings.isEmpty(prefix))
			{
				return prefix + "." + key;
			}
			else
			{
				return key;
			}
		}

		/**
		 * 
		 * @param localizer
		 * @param key
		 * @param component
		 * @return string
		 */
		private String getString(Localizer localizer, String key, Component component)
		{
			triedKeys.add(key);

			// Note: It is important that the default value of "" is
			// provided to getString() not to throw a MissingResourceException or to
			// return a default string like "[Warning: String ..."
			return localizer.getString(key, component, "");
		}

		private String substitute(String string, final Map<String, Object> vars)
			throws IllegalStateException
		{
			return new VariableInterpolator(string, Application.get()
				.getResourceSettings()
				.getThrowExceptionOnMissingResource())
			{
				private static final long serialVersionUID = 1L;

				@SuppressWarnings({ "rawtypes", "unchecked" })
				@Override
				protected String getValue(String variableName)
				{
					Object value = vars.get(variableName);
					if (value == null)
					{
						return null;
					}
					else
					{
						IConverter converter = getConverter(value.getClass());
						if (converter == null)
						{
							return Strings.toString(value);
						}
						else
						{
							return converter.convertToString(value, getLocale());
						}
					}
				}
			}.toString();
		}

		/**
		 * Creates a new params map that additionally contains the default input, name, label
		 * parameters
		 * 
		 * @param params
		 *            original params map
		 * @return new params map
		 */
		private Map<String, Object> addDefaultVars(Map<String, Object> params)
		{
			// create and fill the new params map
			final HashMap<String, Object> fullParams;
			if (params == null)
			{
				fullParams = new HashMap<String, Object>(6);
			}
			else
			{
				fullParams = new HashMap<String, Object>(params.size() + 6);
				fullParams.putAll(params);
			}

			// add the input param if not already present
			if (!fullParams.containsKey("input"))
			{
				fullParams.put("input", getFormComponent().getInput());
			}

			// add the name param if not already present
			if (!fullParams.containsKey("name"))
			{
				fullParams.put("name", getPropertyName());
			}

			// add the label param if not already present
			if (!fullParams.containsKey("label"))
			{
				fullParams.put("label", getLabel());
			}
			return fullParams;
		}

		/**
		 * @return value of label param for this form component
		 */
		private String getLabel()
		{
			String label = null;

			// first try the label model ...
			if (getFormComponent().getLabel() != null)
			{
				label = getFormComponent().getLabel().getObject();
			}
			// ... then try a resource of format [form-component-id] with
			// default of '[form-component-id]'
			if (label == null)
			{

				label = getFormComponent().getDefaultLabel();
			}
			return label;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Component;
import org.apache.wicket.model.IModel;

public interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {
	public T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.time.temporal.Temporal;
import java.util.Date;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;
import org.apache.wicket.extensions.markup.html.form.DateTextField;
import org.apache.wicket.markup.ComponentTag;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.validation.IValidationError;

public class DateControlGroup extends AbstractControlGroup<Date> {
	private static final long serialVersionUID = 7519983535463694024L;

	private DateTextField dateField;
	
	public DateControlGroup(String id, IModel<Date> model) {
		super(id, model);
		
		BootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>("datepicker"){
			private static final long serialVersionUID = -1294334224980199521L;

			@Override
			protected void onComponentTag(ComponentTag tag) {
				super.onComponentTag(tag);
				if(isEnabledInHierarchy()) tag.append("class", "input-append", " ");
			}
		};
		
		dateField = new DateTextField("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		
		datepicker.add(dateField);
		datepicker.add(new WebMarkupContainer("icon"){
			private static final long serialVersionUID = -4412622222987841668L;

			@Override
			protected void onConfigure() {
				super.onConfigure();
				//don't display icon if it is disabled
				setVisible(dateField.isEnabledInHierarchy());
			}
		});
		add(new BootstrapControlGroupFeedback("controlGroup").add(datepicker));

		
	}

	@Override
	public FormComponent<Date> getFormComponent() {
		return dateField;
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.Radio;
import org.apache.wicket.markup.html.form.RadioGroup;
import org.apache.wicket.markup.repeater.RepeatingView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.StringResourceModel;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;

public class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -7800336998276030740L;

	private RadioGroup<T> radioGroup;
	
	public EnumControlGroup(String id, IModel<T> model) {
		super(id, model);

		radioGroup = new RadioGroup<T>("radioGroup", getModel());
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return radioGroup;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		try {
			Method method = getType().getMethod("values");
			@SuppressWarnings("unchecked")
			T[] values = (T[]) method.invoke(null);
			
			RepeatingView view = new RepeatingView("repeating");
			for(T value : values){
				Radio<T> radio = new Radio<T>("input", Model.of(value), radioGroup){
					private static final long serialVersionUID = 8903955236018583915L;

					@Override
					public String getValue() {
						return getModel().getObject().name();
					}
					
					@Override
					protected boolean getStatelessHint() {
						return true;
					}
				};
				StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+"."+value.name(), getResourceBase(), getModel());
				stringResourceModel.setDefaultValue(value.name());
				
				WebMarkupContainer container = new WebMarkupContainer(view.newChildId());
				container.add(new Label("label", stringResourceModel));
				container.add(radio);
				view.add(container);
			}
			
			radioGroup.add(view);
			
			StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
			stringResourceModel.setDefaultValue(getPropertyName());
			add(new BootstrapControlGroupFeedback("controlGroup")
				.add(radioGroup)
				.add(new Label("label", stringResourceModel))
			);
		} catch (SecurityException e) {
			throw new RuntimeException(e);
		} catch (NoSuchMethodException e) {
			throw new RuntimeException(e);
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(e);
		} catch (IllegalAccessException e) {
			throw new RuntimeException(e);
		} catch (InvocationTargetException e) {
			throw new RuntimeException(e);
		}
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

public class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -8444849747715611613L;

	private DropDownChoice<T> dropDown;
	private EntityProvider<T> entityProvider;
	private IObjectRenderer<T> renderer;
	
	@SuppressWarnings("serial")
	public ObjectChoiceControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {
			private static final long serialVersionUID = -3995535290067544541L;

			@Override
			protected List<T> load() {
				if(entityProvider==null) throw new RuntimeException("no entity provider for '"+getPropertyName()+"'");
				return (List<T>) entityProvider.load();
			}
			
			
		};

		dropDown = new DropDownChoice<T>("input", getModel(), modelList){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		dropDown.setNullValid(true);
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		dropDown.setChoiceRenderer(new ChoiceRenderer());
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(dropDown);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return dropDown;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderer = (IObjectRenderer<T>) renderer;
	}
	
	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}
		
		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.form.ListMultipleChoice;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

@SuppressWarnings("rawtypes")
public class CollectionControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = 2580977991384659320L;

	private ListMultipleChoice multiChoice;
	private EntityProvider<T> entityProvider;
	private Map<Class<?>, IObjectRenderer<?>> renderers;
	
	@SuppressWarnings({ "unchecked", "serial" })
	public CollectionControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {
			private static final long serialVersionUID = 3674039468142186197L;

			@Override
			protected List<T> load() {
				return (List<T>) entityProvider.load();
			}
		};
		
		multiChoice = new ListMultipleChoice("input", getModel(), modelList, new ChoiceRenderer()){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}


	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(multiChoice);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public FormComponent<T> getFormComponent() {
		return multiChoice;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderers = renderers;
	}

	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			@SuppressWarnings("unchecked")
			IObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());
			if(renderer==null) return obj.toString(); 
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}

		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
		
	}	
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.validation.IValidationError;

public class TextFieldControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -944776898493154174L;

	private TextField<T> textField;
	
	public TextFieldControlGroup(String id, IModel<T> model) {
		super(id, model);

		textField = new TextField<T>("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".placeHolder", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue("");
		textField.add(AttributeModifier.replace("placeHolder", stringResourceModel));
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(textField);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return textField;
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;

public class CheckboxControlGroup extends AbstractControlGroup<Boolean> {
	private static final long serialVersionUID = -2510616774931793758L;
	
	private CheckBox checkbox;
	
	public CheckboxControlGroup(String id, IModel<Boolean> model) {
		super(id, model);
		
		checkbox = new CheckBox("input", getModel());
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue(getPropertyName());
		add(new BootstrapControlGroupFeedback("controlGroup")
			.add(checkbox)
			.add(new Label("label", stringResourceModel))
		);
	}
	@Override
	public FormComponent<Boolean> getFormComponent() {
		return checkbox;
	}

}


================================== Ai Message ==================================
Tool Calls:
  read_file (5gIJ44eHP)
 Call ID: 5gIJ44eHP
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java
    lines: [1, 100]
  read_file (qxn7kQFPP)
 Call ID: qxn7kQFPP
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java
    lines: [1, 100]
  read_file (TRJw010UQ)
 Call ID: TRJw010UQ
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java
    lines: [1, 100]
  read_file (JvaF2WYxN)
 Call ID: JvaF2WYxN
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java
    lines: [1, 100]
  read_file (K4XXSHjIU)
 Call ID: K4XXSHjIU
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java
    lines: [1, 100]
  read_file (UbMbpxqKg)
 Call ID: UbMbpxqKg
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java
    lines: [1, 100]
  read_file (iua89kBYU)
 Call ID: iua89kBYU
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java
    lines: [1, 100]
  read_file (QkmUgxtmi)
 Call ID: QkmUgxtmi
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java
    lines: [1, 100]

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Application;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.Component;
import org.apache.wicket.Localizer;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.util.convert.IConverter;
import org.apache.wicket.util.string.Strings;
import org.apache.wicket.util.string.interpolator.VariableInterpolator;
import org.apache.wicket.validation.IErrorMessageSource;

public abstract class AbstractControlGroup<T> extends Panel {
	private static final long serialVersionUID = 6551088390404506493L;

	private String propertyName;
	private Component resourceBase;
	private Class<?> type;
	private boolean required;
	private CrudifierEntitySettings entitySettings;

	public AbstractControlGroup(String id, IModel<T> model) {
		super(id, model);
	}
	
	public void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){
		this.propertyName = propertyName;
		this.resourceBase = resourceBase;
		this.type = type;
		this.required = required;
		this.entitySettings = entitySettings;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();

		getFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));

		StringResourceModel labelModel = new StringResourceModel(getPropertyName()+".label", resourceBase, getModel());
		labelModel.setDefaultValue(getPropertyName());
		getFormComponent().setLabel(labelModel);
		getFormComponent().setRequired(required);
	}
	
	public abstract FormComponent<T> getFormComponent();

	@SuppressWarnings("unchecked")
	public IModel<T> getModel(){
		return (IModel<T>) getDefaultModel();
	}
	
	public String getPropertyName() {
		return propertyName;
	}
	
	public Component getResourceBase(){
		return resourceBase;
	}
	
	public Class<?> getType() {
		return type;
	}
	
	public CrudifierEntitySettings getEntitySettings(){
		return entitySettings;
	}

	protected void addInputBoxGridSize(WebMarkupContainer inputBox){
		String css = "col-lg-10"; // default
		if(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){
			switch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){
			case COL1:
				css = "col-lg-1";
				break;
			case COL2:
				css = "col-lg-2";
				break;
			case COL3:
				css = "col-lg-3";
				break;
			case COL4:
				css = "col-lg-4";
				break;
			case COL5:
				css = "col-lg-5";
				break;
			case COL6:
				css = "col-lg-6";
				break;
			case COL7:
				css = "col-lg-7";
				break;
			case COL8:
				css = "col-lg-8";
				break;
			case COL9:
				css = "col-lg-9";
				break;
			default:
				break;
			}
		}
		inputBox.add(AttributeModifier.append("class", css));
	}
	
	/**
	 * Copiado do FormComponent.MessageSource
	 * 
	 * {@link IErrorMessageSource} used for error messages against this form components.
	 * 
	 * @author ivaynberg
	 */
	protected class MessageSource implements IErrorMessageSource
	{
		private final Set<String> triedKeys = new LinkedHashSet<String>();

		public MessageSource() {
			// TODO Auto-generated constructor stub
		}

		/**
		 * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)
		 */
		public String getMessage(String key, Map<String, Object> vars)
		{
			final AbstractControlGroup<T> formComponent = AbstractControlGroup.this;

			// Use the following log4j config for detailed logging on the property resolution
			// process
			// log4j.logger.org.apache.wicket.resource.loader=DEBUG
			// log4j.logger.org.apache.wicket.Localizer=DEBUG

			final Localizer localizer = formComponent.getLocalizer();

			// retrieve prefix that will be used to construct message keys
			String prefix = getFormComponent().getValidatorKeyPrefix();
			String message = null;

			// first try the full form of key [form-component-id].[prefix].[key]
			String resource = getPropertyName() + "." + prefix(prefix, key);
			message = getString(localizer, resource, resourceBase);

			// if not found, try a more general form (without prefix)
			// [form-component-id].[key]
			if (Strings.isEmpty(message) && Strings.isEmpty(prefix))
			{
				resource = getPropertyName() + "." + key;
				message = getString(localizer, resource, resourceBase);
			}

			// If not found try a more general form [prefix].[key]
			if (Strings.isEmpty(message))
			{
				resource = prefix(prefix, key);
				message = getString(localizer, resource, formComponent);
			}

			// If not found try the most general form [key]
			if (Strings.isEmpty(message))
			{
				// Try a variation of the resource key
				message = getString(localizer, key, formComponent);
			}

			// convert empty string to null in case our default value of "" was
			// returned from localizer
			if (Strings.isEmpty(message))
			{
				message = null;
			}
			else
			{
				message = substitute(message, addDefaultVars(vars));
			}
			return message;
		}

		private String prefix(String prefix, String key)
		{
			if (!Strings.isEmpty(prefix))
			{
				return prefix + "." + key;
			}
			else
			{
				return key;
			}
		}

		/**
		 * 
		 * @param localizer
		 * @param key
		 * @param component
		 * @return string
		 */
		private String getString(Localizer localizer, String key, Component component)
		{
			triedKeys.add(key);

			// Note: It is important that the default value of "" is
			// provided to getString() not to throw a MissingResourceException or to
			// return a default string like "[Warning: String ..."
			return localizer.getString(key, component, "");
		}

		private String substitute(String string, final Map<String, Object> vars)
			throws IllegalStateException
		{
			return new VariableInterpolator(string, Application.get()
				.getResourceSettings()
				.getThrowExceptionOnMissingResource())
			{
				private static final long serialVersionUID = 1L;

				@SuppressWarnings({ "rawtypes", "unchecked" })
				@Override
				protected String getValue(String variableName)
				{
					Object value = vars.get(variableName);
					if (value == null)
					{
						return null;
					}
					else
					{
						IConverter converter = getConverter(value.getClass());
						if (converter == null)
						{
							return Strings.toString(value);
						}
						else
						{
							return converter.convertToString(value, getLocale());
						}
					}
				}
			}.toString();
		}

		/**
		 * Creates a new params map that additionally contains the default input, name, label
		 * parameters
		 * 
		 * @param params
		 *            original params map
		 * @return new params map
		 */
		private Map<String, Object> addDefaultVars(Map<String, Object> params)
		{
			// create and fill the new params map
			final HashMap<String, Object> fullParams;
			if (params == null)
			{
				fullParams = new HashMap<String, Object>(6);
			}
			else
			{
				fullParams = new HashMap<String, Object>(params.size() + 6);
				fullParams.putAll(params);
			}

			// add the input param if not already present
			if (!fullParams.containsKey("input"))
			{
				fullParams.put("input", getFormComponent().getInput());
			}

			// add the name param if not already present
			if (!fullParams.containsKey("name"))
			{
				fullParams.put("name", getPropertyName());
			}

			// add the label param if not already present
			if (!fullParams.containsKey("label"))
			{
				fullParams.put("label", getLabel());
			}
			return fullParams;
		}

		/**
		 * @return value of label param for this form component
		 */
		private String getLabel()
		{
			String label = null;

			// first try the label model ...
			if (getFormComponent().getLabel() != null)
			{
				label = getFormComponent().getLabel().getObject();
			}
			// ... then try a resource of format [form-component-id] with
			// default of '[form-component-id]'
			if (label == null)
			{

				label = getFormComponent().getDefaultLabel();
			}
			return label;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Component;
import org.apache.wicket.model.IModel;

public interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {
	public T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.time.temporal.Temporal;
import java.util.Date;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;
import org.apache.wicket.extensions.markup.html.form.DateTextField;
import org.apache.wicket.markup.ComponentTag;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.validation.IValidationError;

public class DateControlGroup extends AbstractControlGroup<Date> {
	private static final long serialVersionUID = 7519983535463694024L;

	private DateTextField dateField;
	
	public DateControlGroup(String id, IModel<Date> model) {
		super(id, model);
		
		BootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>("datepicker"){
			private static final long serialVersionUID = -1294334224980199521L;

			@Override
			protected void onComponentTag(ComponentTag tag) {
				super.onComponentTag(tag);
				if(isEnabledInHierarchy()) tag.append("class", "input-append", " ");
			}
		};
		
		dateField = new DateTextField("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		
		datepicker.add(dateField);
		datepicker.add(new WebMarkupContainer("icon"){
			private static final long serialVersionUID = -4412622222987841668L;

			@Override
			protected void onConfigure() {
				super.onConfigure();
				//don't display icon if it is disabled
				setVisible(dateField.isEnabledInHierarchy());
			}
		});
		add(new BootstrapControlGroupFeedback("controlGroup").add(datepicker));

		
	}

	@Override
	public FormComponent<Date> getFormComponent() {
		return dateField;
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.Radio;
import org.apache.wicket.markup.html.form.RadioGroup;
import org.apache.wicket.markup.repeater.RepeatingView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.StringResourceModel;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;

public class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -7800336998276030740L;

	private RadioGroup<T> radioGroup;
	
	public EnumControlGroup(String id, IModel<T> model) {
		super(id, model);

		radioGroup = new RadioGroup<T>("radioGroup", getModel());
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return radioGroup;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		try {
			Method method = getType().getMethod("values");
			@SuppressWarnings("unchecked")
			T[] values = (T[]) method.invoke(null);
			
			RepeatingView view = new RepeatingView("repeating");
			for(T value : values){
				Radio<T> radio = new Radio<T>("input", Model.of(value), radioGroup){
					private static final long serialVersionUID = 8903955236018583915L;

					@Override
					public String getValue() {
						return getModel().getObject().name();
					}
					
					@Override
					protected boolean getStatelessHint() {
						return true;
					}
				};
				StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+"."+value.name(), getResourceBase(), getModel());
				stringResourceModel.setDefaultValue(value.name());
				
				WebMarkupContainer container = new WebMarkupContainer(view.newChildId());
				container.add(new Label("label", stringResourceModel));
				container.add(radio);
				view.add(container);
			}
			
			radioGroup.add(view);
			
			StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
			stringResourceModel.setDefaultValue(getPropertyName());
			add(new BootstrapControlGroupFeedback("controlGroup")
				.add(radioGroup)
				.add(new Label("label", stringResourceModel))
			);
		} catch (SecurityException e) {
			throw new RuntimeException(e);
		} catch (NoSuchMethodException e) {
			throw new RuntimeException(e);
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(e);
		} catch (IllegalAccessException e) {
			throw new RuntimeException(e);
		} catch (InvocationTargetException e) {
			throw new RuntimeException(e);
		}
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

public class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -8444849747715611613L;

	private DropDownChoice<T> dropDown;
	private EntityProvider<T> entityProvider;
	private IObjectRenderer<T> renderer;
	
	@SuppressWarnings("serial")
	public ObjectChoiceControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {
			private static final long serialVersionUID = -3995535290067544541L;

			@Override
			protected List<T> load() {
				if(entityProvider==null) throw new RuntimeException("no entity provider for '"+getPropertyName()+"'");
				return (List<T>) entityProvider.load();
			}
			
			
		};

		dropDown = new DropDownChoice<T>("input", getModel(), modelList){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		dropDown.setNullValid(true);
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		dropDown.setChoiceRenderer(new ChoiceRenderer());
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(dropDown);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return dropDown;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderer = (IObjectRenderer<T>) renderer;
	}
	
	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}
		
		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.form.ListMultipleChoice;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

@SuppressWarnings("rawtypes")
public class CollectionControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = 2580977991384659320L;

	private ListMultipleChoice multiChoice;
	private EntityProvider<T> entityProvider;
	private Map<Class<?>, IObjectRenderer<?>> renderers;
	
	@SuppressWarnings({ "unchecked", "serial" })
	public CollectionControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {
			private static final long serialVersionUID = 3674039468142186197L;

			@Override
			protected List<T> load() {
				return (List<T>) entityProvider.load();
			}
		};
		
		multiChoice = new ListMultipleChoice("input", getModel(), modelList, new ChoiceRenderer()){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}


	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(multiChoice);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public FormComponent<T> getFormComponent() {
		return multiChoice;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderers = renderers;
	}

	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			@SuppressWarnings("unchecked")
			IObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());
			if(renderer==null) return obj.toString(); 
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}

		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
		
	}	
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.validation.IValidationError;

public class TextFieldControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -944776898493154174L;

	private TextField<T> textField;
	
	public TextFieldControlGroup(String id, IModel<T> model) {
		super(id, model);

		textField = new TextField<T>("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".placeHolder", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue("");
		textField.add(AttributeModifier.replace("placeHolder", stringResourceModel));
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(textField);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return textField;
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;

public class CheckboxControlGroup extends AbstractControlGroup<Boolean> {
	private static final long serialVersionUID = -2510616774931793758L;
	
	private CheckBox checkbox;
	
	public CheckboxControlGroup(String id, IModel<Boolean> model) {
		super(id, model);
		
		checkbox = new CheckBox("input", getModel());
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue(getPropertyName());
		add(new BootstrapControlGroupFeedback("controlGroup")
			.add(checkbox)
			.add(new Label("label", stringResourceModel))
		);
	}
	@Override
	public FormComponent<Boolean> getFormComponent() {
		return checkbox;
	}

}


================================== Ai Message ==================================
Tool Calls:
  read_file (tZ04S11ek)
 Call ID: tZ04S11ek
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java
    lines: [1, 100]
  read_file (k94RLT2On)
 Call ID: k94RLT2On
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java
    lines: [1, 100]
  read_file (jaFVhRFiP)
 Call ID: jaFVhRFiP
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java
    lines: [1, 100]
  read_file (R0DFIQUtu)
 Call ID: R0DFIQUtu
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java
    lines: [1, 100]
  read_file (xX1WaL69Y)
 Call ID: xX1WaL69Y
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java
    lines: [1, 100]
  read_file (gI1YnP2Pu)
 Call ID: gI1YnP2Pu
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java
    lines: [1, 100]
  read_file (7WJDOOzjY)
 Call ID: 7WJDOOzjY
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java
    lines: [1, 100]
  read_file (75cju3MSz)
 Call ID: 75cju3MSz
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java
    lines: [1, 100]

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Application;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.Component;
import org.apache.wicket.Localizer;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.util.convert.IConverter;
import org.apache.wicket.util.string.Strings;
import org.apache.wicket.util.string.interpolator.VariableInterpolator;
import org.apache.wicket.validation.IErrorMessageSource;

public abstract class AbstractControlGroup<T> extends Panel {
	private static final long serialVersionUID = 6551088390404506493L;

	private String propertyName;
	private Component resourceBase;
	private Class<?> type;
	private boolean required;
	private CrudifierEntitySettings entitySettings;

	public AbstractControlGroup(String id, IModel<T> model) {
		super(id, model);
	}
	
	public void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){
		this.propertyName = propertyName;
		this.resourceBase = resourceBase;
		this.type = type;
		this.required = required;
		this.entitySettings = entitySettings;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();

		getFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));

		StringResourceModel labelModel = new StringResourceModel(getPropertyName()+".label", resourceBase, getModel());
		labelModel.setDefaultValue(getPropertyName());
		getFormComponent().setLabel(labelModel);
		getFormComponent().setRequired(required);
	}
	
	public abstract FormComponent<T> getFormComponent();

	@SuppressWarnings("unchecked")
	public IModel<T> getModel(){
		return (IModel<T>) getDefaultModel();
	}
	
	public String getPropertyName() {
		return propertyName;
	}
	
	public Component getResourceBase(){
		return resourceBase;
	}
	
	public Class<?> getType() {
		return type;
	}
	
	public CrudifierEntitySettings getEntitySettings(){
		return entitySettings;
	}

	protected void addInputBoxGridSize(WebMarkupContainer inputBox){
		String css = "col-lg-10"; // default
		if(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){
			switch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){
			case COL1:
				css = "col-lg-1";
				break;
			case COL2:
				css = "col-lg-2";
				break;
			case COL3:
				css = "col-lg-3";
				break;
			case COL4:
				css = "col-lg-4";
				break;
			case COL5:
				css = "col-lg-5";
				break;
			case COL6:
				css = "col-lg-6";
				break;
			case COL7:
				css = "col-lg-7";
				break;
			case COL8:
				css = "col-lg-8";
				break;
			case COL9:
				css = "col-lg-9";
				break;
			default:
				break;
			}
		}
		inputBox.add(AttributeModifier.append("class", css));
	}
	
	/**
	 * Copiado do FormComponent.MessageSource
	 * 
	 * {@link IErrorMessageSource} used for error messages against this form components.
	 * 
	 * @author ivaynberg
	 */
	protected class MessageSource implements IErrorMessageSource
	{
		private final Set<String> triedKeys = new LinkedHashSet<String>();

		public MessageSource() {
			// TODO Auto-generated constructor stub
		}

		/**
		 * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)
		 */
		public String getMessage(String key, Map<String, Object> vars)
		{
			final AbstractControlGroup<T> formComponent = AbstractControlGroup.this;

			// Use the following log4j config for detailed logging on the property resolution
			// process
			// log4j.logger.org.apache.wicket.resource.loader=DEBUG
			// log4j.logger.org.apache.wicket.Localizer=DEBUG

			final Localizer localizer = formComponent.getLocalizer();

			// retrieve prefix that will be used to construct message keys
			String prefix = getFormComponent().getValidatorKeyPrefix();
			String message = null;

			// first try the full form of key [form-component-id].[prefix].[key]
			String resource = getPropertyName() + "." + prefix(prefix, key);
			message = getString(localizer, resource, resourceBase);

			// if not found, try a more general form (without prefix)
			// [form-component-id].[key]
			if (Strings.isEmpty(message) && Strings.isEmpty(prefix))
			{
				resource = getPropertyName() + "." + key;
				message = getString(localizer, resource, resourceBase);
			}

			// If not found try a more general form [prefix].[key]
			if (Strings.isEmpty(message))
			{
				resource = prefix(prefix, key);
				message = getString(localizer, resource, formComponent);
			}

			// If not found try the most general form [key]
			if (Strings.isEmpty(message))
			{
				// Try a variation of the resource key
				message = getString(localizer, key, formComponent);
			}

			// convert empty string to null in case our default value of "" was
			// returned from localizer
			if (Strings.isEmpty(message))
			{
				message = null;
			}
			else
			{
				message = substitute(message, addDefaultVars(vars));
			}
			return message;
		}

		private String prefix(String prefix, String key)
		{
			if (!Strings.isEmpty(prefix))
			{
				return prefix + "." + key;
			}
			else
			{
				return key;
			}
		}

		/**
		 * 
		 * @param localizer
		 * @param key
		 * @param component
		 * @return string
		 */
		private String getString(Localizer localizer, String key, Component component)
		{
			triedKeys.add(key);

			// Note: It is important that the default value of "" is
			// provided to getString() not to throw a MissingResourceException or to
			// return a default string like "[Warning: String ..."
			return localizer.getString(key, component, "");
		}

		private String substitute(String string, final Map<String, Object> vars)
			throws IllegalStateException
		{
			return new VariableInterpolator(string, Application.get()
				.getResourceSettings()
				.getThrowExceptionOnMissingResource())
			{
				private static final long serialVersionUID = 1L;

				@SuppressWarnings({ "rawtypes", "unchecked" })
				@Override
				protected String getValue(String variableName)
				{
					Object value = vars.get(variableName);
					if (value == null)
					{
						return null;
					}
					else
					{
						IConverter converter = getConverter(value.getClass());
						if (converter == null)
						{
							return Strings.toString(value);
						}
						else
						{
							return converter.convertToString(value, getLocale());
						}
					}
				}
			}.toString();
		}

		/**
		 * Creates a new params map that additionally contains the default input, name, label
		 * parameters
		 * 
		 * @param params
		 *            original params map
		 * @return new params map
		 */
		private Map<String, Object> addDefaultVars(Map<String, Object> params)
		{
			// create and fill the new params map
			final HashMap<String, Object> fullParams;
			if (params == null)
			{
				fullParams = new HashMap<String, Object>(6);
			}
			else
			{
				fullParams = new HashMap<String, Object>(params.size() + 6);
				fullParams.putAll(params);
			}

			// add the input param if not already present
			if (!fullParams.containsKey("input"))
			{
				fullParams.put("input", getFormComponent().getInput());
			}

			// add the name param if not already present
			if (!fullParams.containsKey("name"))
			{
				fullParams.put("name", getPropertyName());
			}

			// add the label param if not already present
			if (!fullParams.containsKey("label"))
			{
				fullParams.put("label", getLabel());
			}
			return fullParams;
		}

		/**
		 * @return value of label param for this form component
		 */
		private String getLabel()
		{
			String label = null;

			// first try the label model ...
			if (getFormComponent().getLabel() != null)
			{
				label = getFormComponent().getLabel().getObject();
			}
			// ... then try a resource of format [form-component-id] with
			// default of '[form-component-id]'
			if (label == null)
			{

				label = getFormComponent().getDefaultLabel();
			}
			return label;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Component;
import org.apache.wicket.model.IModel;

public interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {
	public T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.time.temporal.Temporal;
import java.util.Date;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;
import org.apache.wicket.extensions.markup.html.form.DateTextField;
import org.apache.wicket.markup.ComponentTag;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.validation.IValidationError;

public class DateControlGroup extends AbstractControlGroup<Date> {
	private static final long serialVersionUID = 7519983535463694024L;

	private DateTextField dateField;
	
	public DateControlGroup(String id, IModel<Date> model) {
		super(id, model);
		
		BootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>("datepicker"){
			private static final long serialVersionUID = -1294334224980199521L;

			@Override
			protected void onComponentTag(ComponentTag tag) {
				super.onComponentTag(tag);
				if(isEnabledInHierarchy()) tag.append("class", "input-append", " ");
			}
		};
		
		dateField = new DateTextField("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		
		datepicker.add(dateField);
		datepicker.add(new WebMarkupContainer("icon"){
			private static final long serialVersionUID = -4412622222987841668L;

			@Override
			protected void onConfigure() {
				super.onConfigure();
				//don't display icon if it is disabled
				setVisible(dateField.isEnabledInHierarchy());
			}
		});
		add(new BootstrapControlGroupFeedback("controlGroup").add(datepicker));

		
	}

	@Override
	public FormComponent<Date> getFormComponent() {
		return dateField;
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.Radio;
import org.apache.wicket.markup.html.form.RadioGroup;
import org.apache.wicket.markup.repeater.RepeatingView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.StringResourceModel;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;

public class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -7800336998276030740L;

	private RadioGroup<T> radioGroup;
	
	public EnumControlGroup(String id, IModel<T> model) {
		super(id, model);

		radioGroup = new RadioGroup<T>("radioGroup", getModel());
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return radioGroup;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		try {
			Method method = getType().getMethod("values");
			@SuppressWarnings("unchecked")
			T[] values = (T[]) method.invoke(null);
			
			RepeatingView view = new RepeatingView("repeating");
			for(T value : values){
				Radio<T> radio = new Radio<T>("input", Model.of(value), radioGroup){
					private static final long serialVersionUID = 8903955236018583915L;

					@Override
					public String getValue() {
						return getModel().getObject().name();
					}
					
					@Override
					protected boolean getStatelessHint() {
						return true;
					}
				};
				StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+"."+value.name(), getResourceBase(), getModel());
				stringResourceModel.setDefaultValue(value.name());
				
				WebMarkupContainer container = new WebMarkupContainer(view.newChildId());
				container.add(new Label("label", stringResourceModel));
				container.add(radio);
				view.add(container);
			}
			
			radioGroup.add(view);
			
			StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
			stringResourceModel.setDefaultValue(getPropertyName());
			add(new BootstrapControlGroupFeedback("controlGroup")
				.add(radioGroup)
				.add(new Label("label", stringResourceModel))
			);
		} catch (SecurityException e) {
			throw new RuntimeException(e);
		} catch (NoSuchMethodException e) {
			throw new RuntimeException(e);
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(e);
		} catch (IllegalAccessException e) {
			throw new RuntimeException(e);
		} catch (InvocationTargetException e) {
			throw new RuntimeException(e);
		}
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

public class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -8444849747715611613L;

	private DropDownChoice<T> dropDown;
	private EntityProvider<T> entityProvider;
	private IObjectRenderer<T> renderer;
	
	@SuppressWarnings("serial")
	public ObjectChoiceControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {
			private static final long serialVersionUID = -3995535290067544541L;

			@Override
			protected List<T> load() {
				if(entityProvider==null) throw new RuntimeException("no entity provider for '"+getPropertyName()+"'");
				return (List<T>) entityProvider.load();
			}
			
			
		};

		dropDown = new DropDownChoice<T>("input", getModel(), modelList){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		dropDown.setNullValid(true);
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		dropDown.setChoiceRenderer(new ChoiceRenderer());
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(dropDown);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return dropDown;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderer = (IObjectRenderer<T>) renderer;
	}
	
	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}
		
		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.form.ListMultipleChoice;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

@SuppressWarnings("rawtypes")
public class CollectionControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = 2580977991384659320L;

	private ListMultipleChoice multiChoice;
	private EntityProvider<T> entityProvider;
	private Map<Class<?>, IObjectRenderer<?>> renderers;
	
	@SuppressWarnings({ "unchecked", "serial" })
	public CollectionControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {
			private static final long serialVersionUID = 3674039468142186197L;

			@Override
			protected List<T> load() {
				return (List<T>) entityProvider.load();
			}
		};
		
		multiChoice = new ListMultipleChoice("input", getModel(), modelList, new ChoiceRenderer()){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}


	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(multiChoice);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public FormComponent<T> getFormComponent() {
		return multiChoice;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderers = renderers;
	}

	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			@SuppressWarnings("unchecked")
			IObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());
			if(renderer==null) return obj.toString(); 
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}

		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
		
	}	
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.validation.IValidationError;

public class TextFieldControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -944776898493154174L;

	private TextField<T> textField;
	
	public TextFieldControlGroup(String id, IModel<T> model) {
		super(id, model);

		textField = new TextField<T>("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".placeHolder", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue("");
		textField.add(AttributeModifier.replace("placeHolder", stringResourceModel));
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(textField);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return textField;
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;

public class CheckboxControlGroup extends AbstractControlGroup<Boolean> {
	private static final long serialVersionUID = -2510616774931793758L;
	
	private CheckBox checkbox;
	
	public CheckboxControlGroup(String id, IModel<Boolean> model) {
		super(id, model);
		
		checkbox = new CheckBox("input", getModel());
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue(getPropertyName());
		add(new BootstrapControlGroupFeedback("controlGroup")
			.add(checkbox)
			.add(new Label("label", stringResourceModel))
		);
	}
	@Override
	public FormComponent<Boolean> getFormComponent() {
		return checkbox;
	}

}


================================== Ai Message ==================================
Tool Calls:
  read_file (AqhJIbv8S)
 Call ID: AqhJIbv8S
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java
    lines: [1, 100]
  read_file (thfvvmhnr)
 Call ID: thfvvmhnr
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java
    lines: [1, 100]
  read_file (ne8BchEkO)
 Call ID: ne8BchEkO
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java
    lines: [1, 100]
  read_file (ZypIKkiV3)
 Call ID: ZypIKkiV3
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java
    lines: [1, 100]
  read_file (dWWTl7rci)
 Call ID: dWWTl7rci
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java
    lines: [1, 100]
  read_file (rMzlopIZ9)
 Call ID: rMzlopIZ9
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java
    lines: [1, 100]
  read_file (YBO8U757g)
 Call ID: YBO8U757g
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java
    lines: [1, 100]
  read_file (oUVW1PmOI)
 Call ID: oUVW1PmOI
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java
    lines: [1, 100]

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Application;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.Component;
import org.apache.wicket.Localizer;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.util.convert.IConverter;
import org.apache.wicket.util.string.Strings;
import org.apache.wicket.util.string.interpolator.VariableInterpolator;
import org.apache.wicket.validation.IErrorMessageSource;

public abstract class AbstractControlGroup<T> extends Panel {
	private static final long serialVersionUID = 6551088390404506493L;

	private String propertyName;
	private Component resourceBase;
	private Class<?> type;
	private boolean required;
	private CrudifierEntitySettings entitySettings;

	public AbstractControlGroup(String id, IModel<T> model) {
		super(id, model);
	}
	
	public void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){
		this.propertyName = propertyName;
		this.resourceBase = resourceBase;
		this.type = type;
		this.required = required;
		this.entitySettings = entitySettings;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();

		getFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));

		StringResourceModel labelModel = new StringResourceModel(getPropertyName()+".label", resourceBase, getModel());
		labelModel.setDefaultValue(getPropertyName());
		getFormComponent().setLabel(labelModel);
		getFormComponent().setRequired(required);
	}
	
	public abstract FormComponent<T> getFormComponent();

	@SuppressWarnings("unchecked")
	public IModel<T> getModel(){
		return (IModel<T>) getDefaultModel();
	}
	
	public String getPropertyName() {
		return propertyName;
	}
	
	public Component getResourceBase(){
		return resourceBase;
	}
	
	public Class<?> getType() {
		return type;
	}
	
	public CrudifierEntitySettings getEntitySettings(){
		return entitySettings;
	}

	protected void addInputBoxGridSize(WebMarkupContainer inputBox){
		String css = "col-lg-10"; // default
		if(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){
			switch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){
			case COL1:
				css = "col-lg-1";
				break;
			case COL2:
				css = "col-lg-2";
				break;
			case COL3:
				css = "col-lg-3";
				break;
			case COL4:
				css = "col-lg-4";
				break;
			case COL5:
				css = "col-lg-5";
				break;
			case COL6:
				css = "col-lg-6";
				break;
			case COL7:
				css = "col-lg-7";
				break;
			case COL8:
				css = "col-lg-8";
				break;
			case COL9:
				css = "col-lg-9";
				break;
			default:
				break;
			}
		}
		inputBox.add(AttributeModifier.append("class", css));
	}
	
	/**
	 * Copiado do FormComponent.MessageSource
	 * 
	 * {@link IErrorMessageSource} used for error messages against this form components.
	 * 
	 * @author ivaynberg
	 */
	protected class MessageSource implements IErrorMessageSource
	{
		private final Set<String> triedKeys = new LinkedHashSet<String>();

		public MessageSource() {
			// TODO Auto-generated constructor stub
		}

		/**
		 * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)
		 */
		public String getMessage(String key, Map<String, Object> vars)
		{
			final AbstractControlGroup<T> formComponent = AbstractControlGroup.this;

			// Use the following log4j config for detailed logging on the property resolution
			// process
			// log4j.logger.org.apache.wicket.resource.loader=DEBUG
			// log4j.logger.org.apache.wicket.Localizer=DEBUG

			final Localizer localizer = formComponent.getLocalizer();

			// retrieve prefix that will be used to construct message keys
			String prefix = getFormComponent().getValidatorKeyPrefix();
			String message = null;

			// first try the full form of key [form-component-id].[prefix].[key]
			String resource = getPropertyName() + "." + prefix(prefix, key);
			message = getString(localizer, resource, resourceBase);

			// if not found, try a more general form (without prefix)
			// [form-component-id].[key]
			if (Strings.isEmpty(message) && Strings.isEmpty(prefix))
			{
				resource = getPropertyName() + "." + key;
				message = getString(localizer, resource, resourceBase);
			}

			// If not found try a more general form [prefix].[key]
			if (Strings.isEmpty(message))
			{
				resource = prefix(prefix, key);
				message = getString(localizer, resource, formComponent);
			}

			// If not found try the most general form [key]
			if (Strings.isEmpty(message))
			{
				// Try a variation of the resource key
				message = getString(localizer, key, formComponent);
			}

			// convert empty string to null in case our default value of "" was
			// returned from localizer
			if (Strings.isEmpty(message))
			{
				message = null;
			}
			else
			{
				message = substitute(message, addDefaultVars(vars));
			}
			return message;
		}

		private String prefix(String prefix, String key)
		{
			if (!Strings.isEmpty(prefix))
			{
				return prefix + "." + key;
			}
			else
			{
				return key;
			}
		}

		/**
		 * 
		 * @param localizer
		 * @param key
		 * @param component
		 * @return string
		 */
		private String getString(Localizer localizer, String key, Component component)
		{
			triedKeys.add(key);

			// Note: It is important that the default value of "" is
			// provided to getString() not to throw a MissingResourceException or to
			// return a default string like "[Warning: String ..."
			return localizer.getString(key, component, "");
		}

		private String substitute(String string, final Map<String, Object> vars)
			throws IllegalStateException
		{
			return new VariableInterpolator(string, Application.get()
				.getResourceSettings()
				.getThrowExceptionOnMissingResource())
			{
				private static final long serialVersionUID = 1L;

				@SuppressWarnings({ "rawtypes", "unchecked" })
				@Override
				protected String getValue(String variableName)
				{
					Object value = vars.get(variableName);
					if (value == null)
					{
						return null;
					}
					else
					{
						IConverter converter = getConverter(value.getClass());
						if (converter == null)
						{
							return Strings.toString(value);
						}
						else
						{
							return converter.convertToString(value, getLocale());
						}
					}
				}
			}.toString();
		}

		/**
		 * Creates a new params map that additionally contains the default input, name, label
		 * parameters
		 * 
		 * @param params
		 *            original params map
		 * @return new params map
		 */
		private Map<String, Object> addDefaultVars(Map<String, Object> params)
		{
			// create and fill the new params map
			final HashMap<String, Object> fullParams;
			if (params == null)
			{
				fullParams = new HashMap<String, Object>(6);
			}
			else
			{
				fullParams = new HashMap<String, Object>(params.size() + 6);
				fullParams.putAll(params);
			}

			// add the input param if not already present
			if (!fullParams.containsKey("input"))
			{
				fullParams.put("input", getFormComponent().getInput());
			}

			// add the name param if not already present
			if (!fullParams.containsKey("name"))
			{
				fullParams.put("name", getPropertyName());
			}

			// add the label param if not already present
			if (!fullParams.containsKey("label"))
			{
				fullParams.put("label", getLabel());
			}
			return fullParams;
		}

		/**
		 * @return value of label param for this form component
		 */
		private String getLabel()
		{
			String label = null;

			// first try the label model ...
			if (getFormComponent().getLabel() != null)
			{
				label = getFormComponent().getLabel().getObject();
			}
			// ... then try a resource of format [form-component-id] with
			// default of '[form-component-id]'
			if (label == null)
			{

				label = getFormComponent().getDefaultLabel();
			}
			return label;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Component;
import org.apache.wicket.model.IModel;

public interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {
	public T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.time.temporal.Temporal;
import java.util.Date;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;
import org.apache.wicket.extensions.markup.html.form.DateTextField;
import org.apache.wicket.markup.ComponentTag;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.validation.IValidationError;

public class DateControlGroup extends AbstractControlGroup<Date> {
	private static final long serialVersionUID = 7519983535463694024L;

	private DateTextField dateField;
	
	public DateControlGroup(String id, IModel<Date> model) {
		super(id, model);
		
		BootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>("datepicker"){
			private static final long serialVersionUID = -1294334224980199521L;

			@Override
			protected void onComponentTag(ComponentTag tag) {
				super.onComponentTag(tag);
				if(isEnabledInHierarchy()) tag.append("class", "input-append", " ");
			}
		};
		
		dateField = new DateTextField("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		
		datepicker.add(dateField);
		datepicker.add(new WebMarkupContainer("icon"){
			private static final long serialVersionUID = -4412622222987841668L;

			@Override
			protected void onConfigure() {
				super.onConfigure();
				//don't display icon if it is disabled
				setVisible(dateField.isEnabledInHierarchy());
			}
		});
		add(new BootstrapControlGroupFeedback("controlGroup").add(datepicker));

		
	}

	@Override
	public FormComponent<Date> getFormComponent() {
		return dateField;
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.Radio;
import org.apache.wicket.markup.html.form.RadioGroup;
import org.apache.wicket.markup.repeater.RepeatingView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.StringResourceModel;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;

public class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -7800336998276030740L;

	private RadioGroup<T> radioGroup;
	
	public EnumControlGroup(String id, IModel<T> model) {
		super(id, model);

		radioGroup = new RadioGroup<T>("radioGroup", getModel());
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return radioGroup;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		try {
			Method method = getType().getMethod("values");
			@SuppressWarnings("unchecked")
			T[] values = (T[]) method.invoke(null);
			
			RepeatingView view = new RepeatingView("repeating");
			for(T value : values){
				Radio<T> radio = new Radio<T>("input", Model.of(value), radioGroup){
					private static final long serialVersionUID = 8903955236018583915L;

					@Override
					public String getValue() {
						return getModel().getObject().name();
					}
					
					@Override
					protected boolean getStatelessHint() {
						return true;
					}
				};
				StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+"."+value.name(), getResourceBase(), getModel());
				stringResourceModel.setDefaultValue(value.name());
				
				WebMarkupContainer container = new WebMarkupContainer(view.newChildId());
				container.add(new Label("label", stringResourceModel));
				container.add(radio);
				view.add(container);
			}
			
			radioGroup.add(view);
			
			StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
			stringResourceModel.setDefaultValue(getPropertyName());
			add(new BootstrapControlGroupFeedback("controlGroup")
				.add(radioGroup)
				.add(new Label("label", stringResourceModel))
			);
		} catch (SecurityException e) {
			throw new RuntimeException(e);
		} catch (NoSuchMethodException e) {
			throw new RuntimeException(e);
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(e);
		} catch (IllegalAccessException e) {
			throw new RuntimeException(e);
		} catch (InvocationTargetException e) {
			throw new RuntimeException(e);
		}
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

public class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -8444849747715611613L;

	private DropDownChoice<T> dropDown;
	private EntityProvider<T> entityProvider;
	private IObjectRenderer<T> renderer;
	
	@SuppressWarnings("serial")
	public ObjectChoiceControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {
			private static final long serialVersionUID = -3995535290067544541L;

			@Override
			protected List<T> load() {
				if(entityProvider==null) throw new RuntimeException("no entity provider for '"+getPropertyName()+"'");
				return (List<T>) entityProvider.load();
			}
			
			
		};

		dropDown = new DropDownChoice<T>("input", getModel(), modelList){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		dropDown.setNullValid(true);
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		dropDown.setChoiceRenderer(new ChoiceRenderer());
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(dropDown);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return dropDown;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderer = (IObjectRenderer<T>) renderer;
	}
	
	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}
		
		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.form.ListMultipleChoice;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

@SuppressWarnings("rawtypes")
public class CollectionControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = 2580977991384659320L;

	private ListMultipleChoice multiChoice;
	private EntityProvider<T> entityProvider;
	private Map<Class<?>, IObjectRenderer<?>> renderers;
	
	@SuppressWarnings({ "unchecked", "serial" })
	public CollectionControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {
			private static final long serialVersionUID = 3674039468142186197L;

			@Override
			protected List<T> load() {
				return (List<T>) entityProvider.load();
			}
		};
		
		multiChoice = new ListMultipleChoice("input", getModel(), modelList, new ChoiceRenderer()){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}


	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(multiChoice);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public FormComponent<T> getFormComponent() {
		return multiChoice;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderers = renderers;
	}

	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			@SuppressWarnings("unchecked")
			IObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());
			if(renderer==null) return obj.toString(); 
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}

		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
		
	}	
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.validation.IValidationError;

public class TextFieldControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -944776898493154174L;

	private TextField<T> textField;
	
	public TextFieldControlGroup(String id, IModel<T> model) {
		super(id, model);

		textField = new TextField<T>("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".placeHolder", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue("");
		textField.add(AttributeModifier.replace("placeHolder", stringResourceModel));
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(textField);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return textField;
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;

public class CheckboxControlGroup extends AbstractControlGroup<Boolean> {
	private static final long serialVersionUID = -2510616774931793758L;
	
	private CheckBox checkbox;
	
	public CheckboxControlGroup(String id, IModel<Boolean> model) {
		super(id, model);
		
		checkbox = new CheckBox("input", getModel());
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue(getPropertyName());
		add(new BootstrapControlGroupFeedback("controlGroup")
			.add(checkbox)
			.add(new Label("label", stringResourceModel))
		);
	}
	@Override
	public FormComponent<Boolean> getFormComponent() {
		return checkbox;
	}

}


================================== Ai Message ==================================
Tool Calls:
  read_file (JpabY7d5w)
 Call ID: JpabY7d5w
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/AbstractControlGroup.java
    lines: [1, 100]
    id: tZ04S11ek
  read_file (vVrYLX4mt)
 Call ID: vVrYLX4mt
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ControlGroupProvider.java
    lines: [1, 100]
    id: k94RLT2On
  read_file (yHsQKSu1d)
 Call ID: yHsQKSu1d
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/DateControlGroup.java
    lines: [1, 100]
    id: ne8BchEkO
  read_file (PEzd0u4Dr)
 Call ID: PEzd0u4Dr
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/EnumControlGroup.java
    lines: [1, 100]
    id: R0DFIQUtu
  read_file (d4EdKWAlL)
 Call ID: d4EdKWAlL
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/ObjectChoiceControlGroup.java
    lines: [1, 100]
    id: xX1WaL69Y
  read_file (FwNvRzVC3)
 Call ID: FwNvRzVC3
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CollectionControlGroup.java
    lines: [1, 100]
    id: gI1YnP2Pu
  read_file (Ozs7z02Cm)
 Call ID: Ozs7z02Cm
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/TextFieldControlGroup.java
    lines: [1, 100]
    id: YBO8U757g
  read_file (wnvlSDWMt)
 Call ID: wnvlSDWMt
  Args:
    file_path: src/main/java/com/premiumminds/wicket/crudifier/form/elements/CheckboxControlGroup.java
    lines: [1, 100]
    id: 75cju3MSz

================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import com.premiumminds.webapp.wicket.validators.HibernateValidatorProperty;
import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Application;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.Component;
import org.apache.wicket.Localizer;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.util.convert.IConverter;
import org.apache.wicket.util.string.Strings;
import org.apache.wicket.util.string.interpolator.VariableInterpolator;
import org.apache.wicket.validation.IErrorMessageSource;

public abstract class AbstractControlGroup<T> extends Panel {
	private static final long serialVersionUID = 6551088390404506493L;

	private String propertyName;
	private Component resourceBase;
	private Class<?> type;
	private boolean required;
	private CrudifierEntitySettings entitySettings;

	public AbstractControlGroup(String id, IModel<T> model) {
		super(id, model);
	}
	
	public void init(String propertyName, Component resourceBase, boolean required, Class<?> type, CrudifierEntitySettings entitySettings){
		this.propertyName = propertyName;
		this.resourceBase = resourceBase;
		this.type = type;
		this.required = required;
		this.entitySettings = entitySettings;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();

		getFormComponent().add(new HibernateValidatorProperty(getResourceBase().getDefaultModel(), getPropertyName()));

		StringResourceModel labelModel = new StringResourceModel(getPropertyName()+".label", resourceBase, getModel());
		labelModel.setDefaultValue(getPropertyName());
		getFormComponent().setLabel(labelModel);
		getFormComponent().setRequired(required);
	}
	
	public abstract FormComponent<T> getFormComponent();

	@SuppressWarnings("unchecked")
	public IModel<T> getModel(){
		return (IModel<T>) getDefaultModel();
	}
	
	public String getPropertyName() {
		return propertyName;
	}
	
	public Component getResourceBase(){
		return resourceBase;
	}
	
	public Class<?> getType() {
		return type;
	}
	
	public CrudifierEntitySettings getEntitySettings(){
		return entitySettings;
	}

	protected void addInputBoxGridSize(WebMarkupContainer inputBox){
		String css = "col-lg-10"; // default
		if(getEntitySettings().getGridFieldsSizes().containsKey(getPropertyName())){
			switch(getEntitySettings().getGridFieldsSizes().get(getPropertyName())){
			case COL1:
				css = "col-lg-1";
				break;
			case COL2:
				css = "col-lg-2";
				break;
			case COL3:
				css = "col-lg-3";
				break;
			case COL4:
				css = "col-lg-4";
				break;
			case COL5:
				css = "col-lg-5";
				break;
			case COL6:
				css = "col-lg-6";
				break;
			case COL7:
				css = "col-lg-7";
				break;
			case COL8:
				css = "col-lg-8";
				break;
			case COL9:
				css = "col-lg-9";
				break;
			default:
				break;
			}
		}
		inputBox.add(AttributeModifier.append("class", css));
	}
	
	/**
	 * Copiado do FormComponent.MessageSource
	 * 
	 * {@link IErrorMessageSource} used for error messages against this form components.
	 * 
	 * @author ivaynberg
	 */
	protected class MessageSource implements IErrorMessageSource
	{
		private final Set<String> triedKeys = new LinkedHashSet<String>();

		public MessageSource() {
			// TODO Auto-generated constructor stub
		}

		/**
		 * @see org.apache.wicket.validation.IErrorMessageSource#getMessage(String, java.util.Map)
		 */
		public String getMessage(String key, Map<String, Object> vars)
		{
			final AbstractControlGroup<T> formComponent = AbstractControlGroup.this;

			// Use the following log4j config for detailed logging on the property resolution
			// process
			// log4j.logger.org.apache.wicket.resource.loader=DEBUG
			// log4j.logger.org.apache.wicket.Localizer=DEBUG

			final Localizer localizer = formComponent.getLocalizer();

			// retrieve prefix that will be used to construct message keys
			String prefix = getFormComponent().getValidatorKeyPrefix();
			String message = null;

			// first try the full form of key [form-component-id].[prefix].[key]
			String resource = getPropertyName() + "." + prefix(prefix, key);
			message = getString(localizer, resource, resourceBase);

			// if not found, try a more general form (without prefix)
			// [form-component-id].[key]
			if (Strings.isEmpty(message) && Strings.isEmpty(prefix))
			{
				resource = getPropertyName() + "." + key;
				message = getString(localizer, resource, resourceBase);
			}

			// If not found try a more general form [prefix].[key]
			if (Strings.isEmpty(message))
			{
				resource = prefix(prefix, key);
				message = getString(localizer, resource, formComponent);
			}

			// If not found try the most general form [key]
			if (Strings.isEmpty(message))
			{
				// Try a variation of the resource key
				message = getString(localizer, key, formComponent);
			}

			// convert empty string to null in case our default value of "" was
			// returned from localizer
			if (Strings.isEmpty(message))
			{
				message = null;
			}
			else
			{
				message = substitute(message, addDefaultVars(vars));
			}
			return message;
		}

		private String prefix(String prefix, String key)
		{
			if (!Strings.isEmpty(prefix))
			{
				return prefix + "." + key;
			}
			else
			{
				return key;
			}
		}

		/**
		 * 
		 * @param localizer
		 * @param key
		 * @param component
		 * @return string
		 */
		private String getString(Localizer localizer, String key, Component component)
		{
			triedKeys.add(key);

			// Note: It is important that the default value of "" is
			// provided to getString() not to throw a MissingResourceException or to
			// return a default string like "[Warning: String ..."
			return localizer.getString(key, component, "");
		}

		private String substitute(String string, final Map<String, Object> vars)
			throws IllegalStateException
		{
			return new VariableInterpolator(string, Application.get()
				.getResourceSettings()
				.getThrowExceptionOnMissingResource())
			{
				private static final long serialVersionUID = 1L;

				@SuppressWarnings({ "rawtypes", "unchecked" })
				@Override
				protected String getValue(String variableName)
				{
					Object value = vars.get(variableName);
					if (value == null)
					{
						return null;
					}
					else
					{
						IConverter converter = getConverter(value.getClass());
						if (converter == null)
						{
							return Strings.toString(value);
						}
						else
						{
							return converter.convertToString(value, getLocale());
						}
					}
				}
			}.toString();
		}

		/**
		 * Creates a new params map that additionally contains the default input, name, label
		 * parameters
		 * 
		 * @param params
		 *            original params map
		 * @return new params map
		 */
		private Map<String, Object> addDefaultVars(Map<String, Object> params)
		{
			// create and fill the new params map
			final HashMap<String, Object> fullParams;
			if (params == null)
			{
				fullParams = new HashMap<String, Object>(6);
			}
			else
			{
				fullParams = new HashMap<String, Object>(params.size() + 6);
				fullParams.putAll(params);
			}

			// add the input param if not already present
			if (!fullParams.containsKey("input"))
			{
				fullParams.put("input", getFormComponent().getInput());
			}

			// add the name param if not already present
			if (!fullParams.containsKey("name"))
			{
				fullParams.put("name", getPropertyName());
			}

			// add the label param if not already present
			if (!fullParams.containsKey("label"))
			{
				fullParams.put("label", getLabel());
			}
			return fullParams;
		}

		/**
		 * @return value of label param for this form component
		 */
		private String getLabel()
		{
			String label = null;

			// first try the label model ...
			if (getFormComponent().getLabel() != null)
			{
				label = getFormComponent().getLabel().getObject();
			}
			// ... then try a resource of format [form-component-id] with
			// default of '[form-component-id]'
			if (label == null)
			{

				label = getFormComponent().getDefaultLabel();
			}
			return label;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.wicket.crudifier.form.CrudifierEntitySettings;
import org.apache.wicket.Component;
import org.apache.wicket.model.IModel;

public interface ControlGroupProvider<T extends AbstractControlGroup<?>> extends Serializable {
	public T createControlGroup(String id, IModel<?> model, String name, Component component, boolean required, Class<?> type, CrudifierEntitySettings entitySettings);
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.time.temporal.Temporal;
import java.util.Date;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.webapp.wicket.bootstrap.BootstrapTemporalDatepicker;
import org.apache.wicket.extensions.markup.html.form.DateTextField;
import org.apache.wicket.markup.ComponentTag;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.validation.IValidationError;

public class DateControlGroup extends AbstractControlGroup<Date> {
	private static final long serialVersionUID = 7519983535463694024L;

	private DateTextField dateField;
	
	public DateControlGroup(String id, IModel<Date> model) {
		super(id, model);
		
		BootstrapTemporalDatepicker<Temporal> datepicker = new BootstrapTemporalDatepicker<Temporal>("datepicker"){
			private static final long serialVersionUID = -1294334224980199521L;

			@Override
			protected void onComponentTag(ComponentTag tag) {
				super.onComponentTag(tag);
				if(isEnabledInHierarchy()) tag.append("class", "input-append", " ");
			}
		};
		
		dateField = new DateTextField("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		
		datepicker.add(dateField);
		datepicker.add(new WebMarkupContainer("icon"){
			private static final long serialVersionUID = -4412622222987841668L;

			@Override
			protected void onConfigure() {
				super.onConfigure();
				//don't display icon if it is disabled
				setVisible(dateField.isEnabledInHierarchy());
			}
		});
		add(new BootstrapControlGroupFeedback("controlGroup").add(datepicker));

		
	}

	@Override
	public FormComponent<Date> getFormComponent() {
		return dateField;
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.Radio;
import org.apache.wicket.markup.html.form.RadioGroup;
import org.apache.wicket.markup.repeater.RepeatingView;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.StringResourceModel;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;

public class EnumControlGroup<T extends Enum<?>> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -7800336998276030740L;

	private RadioGroup<T> radioGroup;
	
	public EnumControlGroup(String id, IModel<T> model) {
		super(id, model);

		radioGroup = new RadioGroup<T>("radioGroup", getModel());
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return radioGroup;
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		try {
			Method method = getType().getMethod("values");
			@SuppressWarnings("unchecked")
			T[] values = (T[]) method.invoke(null);
			
			RepeatingView view = new RepeatingView("repeating");
			for(T value : values){
				Radio<T> radio = new Radio<T>("input", Model.of(value), radioGroup){
					private static final long serialVersionUID = 8903955236018583915L;

					@Override
					public String getValue() {
						return getModel().getObject().name();
					}
					
					@Override
					protected boolean getStatelessHint() {
						return true;
					}
				};
				StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+"."+value.name(), getResourceBase(), getModel());
				stringResourceModel.setDefaultValue(value.name());
				
				WebMarkupContainer container = new WebMarkupContainer(view.newChildId());
				container.add(new Label("label", stringResourceModel));
				container.add(radio);
				view.add(container);
			}
			
			radioGroup.add(view);
			
			StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
			stringResourceModel.setDefaultValue(getPropertyName());
			add(new BootstrapControlGroupFeedback("controlGroup")
				.add(radioGroup)
				.add(new Label("label", stringResourceModel))
			);
		} catch (SecurityException e) {
			throw new RuntimeException(e);
		} catch (NoSuchMethodException e) {
			throw new RuntimeException(e);
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(e);
		} catch (IllegalAccessException e) {
			throw new RuntimeException(e);
		} catch (InvocationTargetException e) {
			throw new RuntimeException(e);
		}
	}

}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

public class ObjectChoiceControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -8444849747715611613L;

	private DropDownChoice<T> dropDown;
	private EntityProvider<T> entityProvider;
	private IObjectRenderer<T> renderer;
	
	@SuppressWarnings("serial")
	public ObjectChoiceControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<? extends T>> modelList = new LoadableDetachableModel<List<? extends T>>() {
			private static final long serialVersionUID = -3995535290067544541L;

			@Override
			protected List<T> load() {
				if(entityProvider==null) throw new RuntimeException("no entity provider for '"+getPropertyName()+"'");
				return (List<T>) entityProvider.load();
			}
			
			
		};

		dropDown = new DropDownChoice<T>("input", getModel(), modelList){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
		dropDown.setNullValid(true);
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		dropDown.setChoiceRenderer(new ChoiceRenderer());
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(dropDown);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return dropDown;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, IObjectRenderer<?> renderer){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderer = (IObjectRenderer<T>) renderer;
	}
	
	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}
		
		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.form.ListMultipleChoice;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.LoadableDetachableModel;
import org.apache.wicket.validation.IValidationError;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import com.premiumminds.wicket.crudifier.IObjectRenderer;
import com.premiumminds.wicket.crudifier.form.EntityProvider;

@SuppressWarnings("rawtypes")
public class CollectionControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = 2580977991384659320L;

	private ListMultipleChoice multiChoice;
	private EntityProvider<T> entityProvider;
	private Map<Class<?>, IObjectRenderer<?>> renderers;
	
	@SuppressWarnings({ "unchecked", "serial" })
	public CollectionControlGroup(String id, IModel<T> model) {
		super(id, model);
		
		IModel<List<T>> modelList = new LoadableDetachableModel<List<T>>() {
			private static final long serialVersionUID = 3674039468142186197L;

			@Override
			protected List<T> load() {
				return (List<T>) entityProvider.load();
			}
		};
		
		multiChoice = new ListMultipleChoice("input", getModel(), modelList, new ChoiceRenderer()){
			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}


	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(multiChoice);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public FormComponent<T> getFormComponent() {
		return multiChoice;
	}
	
	@SuppressWarnings("unchecked")
	public void setConfiguration(EntityProvider<?> entityProvider, Map<Class<?>, IObjectRenderer<?>> renderers){
		this.entityProvider = (EntityProvider<T>) entityProvider;
		this.renderers = renderers;
	}

	private class ChoiceRenderer implements IChoiceRenderer<T> {
		private static final long serialVersionUID = -584810566291563698L;

		public Object getDisplayValue(T obj) {
			@SuppressWarnings("unchecked")
			IObjectRenderer<T> renderer = (IObjectRenderer<T>) renderers.get(obj.getClass());
			if(renderer==null) return obj.toString(); 
			return renderer.render(obj);
		}

		public String getIdValue(T obj, int index) {
			//TODO retrieve @Id value if present
			return Integer.toString(index);
		}

		@Override
		public T getObject(String id, IModel<? extends List<? extends T>> choices)
		{
			List<? extends T> _choices = choices.getObject();
			for (int index = 0; index < _choices.size(); index++)
			{
				// Get next choice
				final T choice = _choices.get(index);
				if (getIdValue(choice, index).equals(id))
				{
					return choice;
				}
			}
			return null;
		}
		
	}	
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import java.io.Serializable;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.AttributeModifier;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;
import org.apache.wicket.validation.IValidationError;

public class TextFieldControlGroup<T> extends AbstractControlGroup<T> {
	private static final long serialVersionUID = -944776898493154174L;

	private TextField<T> textField;
	
	public TextFieldControlGroup(String id, IModel<T> model) {
		super(id, model);

		textField = new TextField<T>("input", getModel()){
			private static final long serialVersionUID = 4925601760084153117L;

			@Override
			public void error(IValidationError error) {
				MessageSource source = new MessageSource();
				Serializable message = error.getErrorMessage(source);
				
				super.error(message);
			}
		};
	}

	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".placeHolder", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue("");
		textField.add(AttributeModifier.replace("placeHolder", stringResourceModel));
		WebMarkupContainer inputBox = new WebMarkupContainer("inputBox");
		addInputBoxGridSize(inputBox);
		inputBox.add(textField);
		add(new BootstrapControlGroupFeedback("controlGroup").add(inputBox));
	}

	@Override
	public FormComponent<T> getFormComponent() {
		return textField;
	}
}


================================= Tool Message =================================
Name: read_file

/**
 * Copyright (C) 2014 Premium Minds.
 *
 * This file is part of wicket-crudifier.
 *
 * wicket-crudifier is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * wicket-crudifier is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with wicket-crudifier. If not, see <http://www.gnu.org/licenses/>.
 */
package com.premiumminds.wicket.crudifier.form.elements;

import com.premiumminds.webapp.wicket.bootstrap.BootstrapControlGroupFeedback;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.markup.html.form.FormComponent;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;

public class CheckboxControlGroup extends AbstractControlGroup<Boolean> {
	private static final long serialVersionUID = -2510616774931793758L;
	
	private CheckBox checkbox;
	
	public CheckboxControlGroup(String id, IModel<Boolean> model) {
		super(id, model);
		
		checkbox = new CheckBox("input", getModel());
	}
	
	@Override
	protected void onInitialize() {
		super.onInitialize();
		
		StringResourceModel stringResourceModel = new StringResourceModel(getPropertyName()+".label", getResourceBase(), getModel());
		stringResourceModel.setDefaultValue(getPropertyName());
		add(new BootstrapControlGroupFeedback("controlGroup")
			.add(checkbox)
			.add(new Label("label", stringResourceModel))
		);
	}
	@Override
	public FormComponent<Boolean> getFormComponent() {
		return checkbox;
	}

}
