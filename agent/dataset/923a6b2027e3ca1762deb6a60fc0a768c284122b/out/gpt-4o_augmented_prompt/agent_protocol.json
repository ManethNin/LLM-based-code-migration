{
    "validate_diffs": [
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 4769401668424704344
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 6018867982126475985
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport java.net.URI;\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 12005498172153469876
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 16999041996530626752
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 7963366991576273514
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 11534139257225179118
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 2683261687419738656
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 13040766134336122253
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 1191299045478532305
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 10934217537100441353
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 14155254424960158925
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 17580848284868635945
        },
        {
            "input": "```diff\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n\nsrc/main/java/com/jcabi/http/response/RestResponse.java\n@@\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import static org.hamcrest.Matchers.*;\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\n\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 1 exact lines in a row:\n```\nimport org.hamcrest.Matchers;\n```\n",
            "span_id": 6342794982422498000
        }
    ],
    "compile_maven": [],
    "read_file": [
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2017, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            Matchers.not(Matchers.emptyIterableOf(String.class))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 4205855923631221575
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2017, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.Matchers;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 1047855228827597738
        }
    ],
    "get_directory_tree": [
        {
            "input": "src/main/java/com/jcabi/http",
            "output": "[\n    {\n        \"name\": \"wire\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"FcWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"FcCache.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"package-info.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"VerboseWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BasicAuthWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"LastModifiedCachingWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"OneMinuteWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ETagCachingWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"CachingWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"RetryWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"TrustedWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AbstractHeaderBasedCachingWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"UserAgentWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AutoRedirectingWire.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"CookieOptimizingWire.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"RequestURI.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"package-info.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"RequestBody.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"response\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"package-info.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"JsoupResponse.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"WebLinkingResponse.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"JsonResponse.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"RestResponse.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AbstractResponse.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"XmlResponse.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"JacksonResponse.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"request\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"MultipartBodyBuilder.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ApacheRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"package-info.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"DefaultResponse.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"JdkRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BaseRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"FakeRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"Boundary.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Wire.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"Response.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ImmutableHeader.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"mock\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"MkQueryMatchers.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkQuery.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"package-info.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkAnswerBodyMatcher.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkQueryHeaderMatcher.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkAnswer.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkGrizzlyAdapter.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkQueryUriMatcher.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkAnswerBodyBytesMatcher.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkGrizzlyContainer.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkQueryBodyMatcher.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkAnswerMatchers.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"GrizzlyQuery.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkAnswerHeaderMatcher.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MkContainer.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Request.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 4155258807600327672
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}