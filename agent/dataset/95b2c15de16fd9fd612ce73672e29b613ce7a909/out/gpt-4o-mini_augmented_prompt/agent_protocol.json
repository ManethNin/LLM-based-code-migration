{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private Server server;\n@@ -33,10 +33,10 @@\n         server = new Server();\n-        SelectChannelConnector httpConnector = new SelectChannelConnector();\n-        httpConnector.setPort(port);\n-        server.addConnector(httpConnector);\n-        server.setSendServerVersion(false);\n-        server.setSendDateHeader(false);\n+        HttpConfiguration httpConfig = new HttpConfiguration();\n+        ServerConnector httpConnector = new ServerConnector(server, new HttpConnectionFactory(httpConfig));\n+        httpConnector.setPort(port);\n+        server.addConnector(httpConnector);\n \n         // Other server configurations...\n     }\n@@ -80,5 +80,5 @@\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 9 exact lines in a row:\n```\nserver = new Server();\nSelectChannelConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nserver.addConnector(httpConnector);\nserver.setSendServerVersion(false);\nserver.setSendDateHeader(false);\n// Other server configurations...\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java!\nMake extra sure the indentation is correct.\njadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java does not contain these 9 exact lines in a row:\n```\nserver = new Server();\nSelectChannelConnector httpConnector = new SelectChannelConnector();\nhttpConnector.setPort(port);\nserver.addConnector(httpConnector);\nserver.setSendServerVersion(false);\nserver.setSendDateHeader(false);\n// Other server configurations...\n}\n```",
            "span_id": 450806143603398293
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "23": {
                            "lines": [
                                {
                                    "line_no": 22,
                                    "content": "    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);"
                                },
                                {
                                    "line_no": 23,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 24,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[23,] error: illegal start of type\n",
                                "[23,40] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": ""
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 26,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,47] error: <identifier> expected\n"
                            ]
                        },
                        "26": {
                            "lines": [
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 26,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 27,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[26,49] error: <identifier> expected\n",
                                "[26,] error: illegal start of type\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 6763680866697128889
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 8895429048292399760
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 4874497775801292118
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 78315372106871278
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 16319045114650088347
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 8857656199900797680
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 3286381197693656865
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 6416167633409827769
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 2735766896286860084
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 8738480714932389434
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 478825305724379606
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 8528375663828229003
        },
        {
            "input": "```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java\n@@ -1,5 +1,5 @@\n package net.jadler.stubbing.server.jetty;\n \n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.server.nio.SelectChannelConnector;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.HttpConfiguration;\n \n public class JettyStubHttpServer {\n     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n     private final Server server;\n     private final Connector httpConnector;\n \n     public JettyStubHttpServer() {\n         this(0);\n     }\n \n \n     public JettyStubHttpServer(final int port) {\n         this.server = new Server();\n         this.server.setSendServerVersion(false);\n         this.server.setSendDateHeader(true);\n \n         this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n         this.httpConnector.setPort(port);\n         server.addConnector(this.httpConnector);\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void registerRequestManager(final RequestManager ruleProvider) {\n         Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n \n         server.setHandler(new JadlerHandler(ruleProvider));\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start() throws Exception {\n         logger.debug(\"starting jetty\");\n         server.start();\n         logger.debug(\"jetty started\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop() throws Exception {\n         logger.debug(\"stopping jetty\");\n         server.stop();\n         logger.debug(\"jetty stopped\");\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getPort() {\n         return httpConnector.getLocalPort();\n     }\n }\n```\n\n\n```diff\n--- jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n+++ jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java\n@@ -22,7 +22,7 @@\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.AbstractHandler;\n \n-public class JadlerHandler extends AbstractHandler {\n+public class JadlerHandler extends AbstractHandler {\n \n     @Override\n     public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                        final HttpServletResponse response) throws IOException, ServletException {\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: <identifier> expected\n",
                "updated_files": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\npackage net.jadler.stubbing.server.jetty;\n\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.HttpConfiguration;\n\npublic class JettyStubHttpServer {\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector = new ServerConnector(server, new HttpConfiguration());\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}\n}"
                },
                "compile_error_details": {
                    "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java": {
                        "22": {
                            "lines": [
                                {
                                    "line_no": 21,
                                    "content": ""
                                },
                                {
                                    "line_no": 22,
                                    "content": "package net.jadler.stubbing.server.jetty;"
                                },
                                {
                                    "line_no": 23,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[22,] error: illegal start of type\n",
                                "[22,40] error: <identifier> expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": ""
                                },
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                }
                            ],
                            "error_texts": [
                                "[24,] error: illegal start of type\n",
                                "[24,47] error: <identifier> expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "import org.eclipse.jetty.server.ServerConnector;"
                                },
                                {
                                    "line_no": 25,
                                    "content": "import org.eclipse.jetty.server.HttpConfiguration;"
                                },
                                {
                                    "line_no": 26,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[25,] error: illegal start of type\n",
                                "[25,49] error: <identifier> expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: <identifier> expected\n",
            "span_id": 2517291826587801532
        }
    ],
    "read_file": [
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.server.StubHttpServer;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Default stub http server implementation using Jetty as an http server.\n */\npublic class JettyStubHttpServer implements StubHttpServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);\n    private final Server server;\n    private final Connector httpConnector;\n\n    public JettyStubHttpServer() {\n        this(0);\n    }\n\n\n    public JettyStubHttpServer(final int port) {\n        this.server = new Server();\n        this.server.setSendServerVersion(false);\n        this.server.setSendDateHeader(true);\n\n        this.httpConnector = new SelectChannelConnector();\n        this.httpConnector.setPort(port);\n        server.addConnector(this.httpConnector);\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void registerRequestManager(final RequestManager ruleProvider) {\n        Validate.notNull(ruleProvider, \"ruleProvider cannot be null\");\n\n        server.setHandler(new JadlerHandler(ruleProvider));\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void start() throws Exception {\n        logger.debug(\"starting jetty\");\n        server.start();\n        logger.debug(\"jetty started\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void stop() throws Exception {\n        logger.debug(\"stopping jetty\");\n        server.stop();\n        logger.debug(\"jetty stopped\");\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getPort() {\n        return httpConnector.getLocalPort();\n    }\n}",
            "error": "",
            "span_id": 9695969875392617581
        },
        {
            "input": "jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java",
            "output": "/*\n * Copyright (c) 2012 - 2016 Jadler contributors\n * This program is made available under the terms of the MIT License.\n */\npackage net.jadler.stubbing.server.jetty;\n\nimport net.jadler.KeyValues;\nimport net.jadler.RequestManager;\nimport net.jadler.stubbing.StubResponse;\nimport org.apache.commons.lang.Validate;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n\n/**\n * Jetty Handler which handles all http communication by returning an http response according to a stub response\n * obtained from a {@link RequestManager} instance.\n */\nclass JadlerHandler extends AbstractHandler {\n\n    private final RequestManager requestManager;\n\n\n    /**\n     * @param requestManager request manager instance to retrieve stub responses\n     */\n    JadlerHandler(final RequestManager requestManager) {\n        Validate.notNull(requestManager, \"requestManager cannot be null\");\n        this.requestManager = requestManager;\n    }\n\n\n    @Override\n    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,\n                       final HttpServletResponse response) throws IOException, ServletException {\n\n        final net.jadler.Request req = RequestUtils.convert(request);\n        final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);\n\n        response.setStatus(stubResponse.getStatus());\n        this.insertResponseHeaders(stubResponse.getHeaders(), response);\n\n        baseRequest.setHandled(true);\n\n        this.processDelay(stubResponse.getDelay());\n        this.insertResponseBody(stubResponse.getBody(), response);\n    }\n\n\n    private void insertResponseBody(final byte[] body, final HttpServletResponse response) throws IOException {\n        if (body.length > 0) {\n            final OutputStream os = response.getOutputStream();\n            os.write(body);\n        }\n    }\n\n\n    private void insertResponseHeaders(final KeyValues headers, final HttpServletResponse response) {\n        for (final String key : headers.getKeys()) {\n\n            for (final String value : headers.getValues(key)) {\n                response.addHeader(key, value);\n            }\n        }\n    }\n\n\n    private void processDelay(final long delay) {\n        if (delay > 0) {\n            try {\n                Thread.sleep(delay);\n            } catch (final InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}",
            "error": "",
            "span_id": 10859049009290994797
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 9003192005966002870
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 3238515176957588611
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 16453732971467238914
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 11688937510514799073
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 15571901706353163615
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 13562588841417533440
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 9045402907593681110
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 17679417404249144014
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 7072960883834415957
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 4212899940153968889
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 12002577954297510463
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 15045559915215949343
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 6238790766879685573
        }
    ]
}