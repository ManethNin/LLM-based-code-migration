{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n@@ -20,7 +20,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n-// - public class GeoStoreDigestPasswordEncoder implements PasswordEncoder {\n+public class GeoStoreDigestPasswordEncoder { // Updated to remove PasswordEncoder implementation\n     private StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();\n \n     public String encode(String rawPassword) {\n@@ -43,7 +43,7 @@\n     }\n \n     // Removed PasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n@@ -31,7 +31,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n-// - public class GeoStorePBEPasswordEncoder implements PBEPasswordEncoder {\n+public class GeoStorePBEPasswordEncoder { // Updated to remove PBEPasswordEncoder implementation\n     private StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();\n \n     public String encode(String rawPassword) {\n@@ -101,7 +101,7 @@\n     }\n \n     // Removed PBEPasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PBEPasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n// - public class GeoStoreDigestPasswordEncoder implements PasswordEncoder {\nprivate StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();\npublic String encode(String rawPassword) {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n// - public class GeoStorePBEPasswordEncoder implements PBEPasswordEncoder {\nprivate StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();\npublic String encode(String rawPassword) {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n// - public class GeoStoreDigestPasswordEncoder implements PasswordEncoder {\nprivate StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();\npublic String encode(String rawPassword) {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n// - public class GeoStorePBEPasswordEncoder implements PBEPasswordEncoder {\nprivate StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();\npublic String encode(String rawPassword) {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
            "span_id": 15473742141433797093
        },
        {
            "input": "```diff\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n@@ -20,7 +20,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PasswordEncoder\n-// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.util.password.StrongPasswordEncryptor; // Keep this import\n public class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStoreDigestPasswordEncoder() {\n@@ -43,7 +43,7 @@\n     }\n \n     // Removed PasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n@@ -31,7 +31,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PBEPasswordEncoder\n-// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.util.password.StrongPasswordEncryptor; // Keep this import\n public class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStorePBEPasswordEncoder() {\n@@ -101,7 +101,7 @@\n     }\n \n     // Removed PBEPasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PBEPasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
            "span_id": 7872342390462428632
        },
        {
            "input": "```diff\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n@@ -20,7 +20,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PasswordEncoder\n-// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n+// import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n public class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStoreDigestPasswordEncoder() {\n@@ -43,7 +43,7 @@\n     }\n \n     // Removed PasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n@@ -31,7 +31,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PBEPasswordEncoder\n-// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n+// import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n public class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStorePBEPasswordEncoder() {\n@@ -101,7 +101,7 @@\n     }\n \n     // Removed PBEPasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PBEPasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
            "span_id": 9843989760964531574
        },
        {
            "input": "```diff\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n@@ -20,7 +20,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PasswordEncoder\n-// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.spring.security.PasswordEncoder; // Keep this import for compatibility\n public class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStoreDigestPasswordEncoder() {\n@@ -43,7 +43,7 @@\n     }\n \n     // Removed PasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n@@ -31,7 +31,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PBEPasswordEncoder\n-// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.spring.security.PBEPasswordEncoder; // Keep this import for compatibility\n public class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStorePBEPasswordEncoder() {\n@@ -101,7 +101,7 @@\n     }\n \n     // Removed PBEPasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PBEPasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
            "span_id": 9459633356232001556
        },
        {
            "input": "```diff\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n@@ -20,7 +20,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PasswordEncoder\n-// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.spring.security.PasswordEncoder; // Keep this import for compatibility\n public class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStoreDigestPasswordEncoder() {\n@@ -43,7 +43,7 @@\n     }\n \n     // Removed PasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n@@ -31,7 +31,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PBEPasswordEncoder\n-// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.spring.security.PBEPasswordEncoder; // Keep this import for compatibility\n public class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStorePBEPasswordEncoder() {\n@@ -101,7 +101,7 @@\n     }\n \n     // Removed PBEPasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PBEPasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
            "span_id": 13627509645448592039
        },
        {
            "input": "```diff\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n@@ -20,7 +20,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PasswordEncoder\n-// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.spring.security.PasswordEncoder; // Keep this import for compatibility\n public class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStoreDigestPasswordEncoder() {\n@@ -43,7 +43,7 @@\n     }\n \n     // Removed PasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n@@ -31,7 +31,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PBEPasswordEncoder\n-// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.spring.security.PBEPasswordEncoder; // Keep this import for compatibility\n public class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStorePBEPasswordEncoder() {\n@@ -101,7 +101,7 @@\n     }\n \n     // Removed PBEPasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PBEPasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
            "span_id": 16066290209513116728
        },
        {
            "input": "```diff\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n@@ -20,7 +20,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PasswordEncoder\n-// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.spring.security.PasswordEncoder; // Keep this import for compatibility\n public class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStoreDigestPasswordEncoder() {\n@@ -43,7 +43,7 @@\n     }\n \n     // Removed PasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n@@ -31,7 +31,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PBEPasswordEncoder\n-// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n+import org.jasypt.spring.security.PBEPasswordEncoder; // Keep this import for compatibility\n public class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStorePBEPasswordEncoder() {\n@@ -101,7 +101,7 @@\n     }\n \n     // Removed PBEPasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PBEPasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
            "span_id": 1953376218380042540
        },
        {
            "input": "```diff\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n@@ -20,7 +20,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PasswordEncoder\n-// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n+// import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n public class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStoreDigestPasswordEncoder() {\n@@ -43,7 +43,7 @@\n     }\n \n     // Removed PasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n@@ -31,7 +31,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PBEPasswordEncoder\n-// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n+// import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n public class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStorePBEPasswordEncoder() {\n@@ -101,7 +101,7 @@\n     }\n \n     // Removed PBEPasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PBEPasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
            "span_id": 600474954644037145
        },
        {
            "input": "```diff\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java\n@@ -20,7 +20,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PasswordEncoder\n-// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n+// import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\n public class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStoreDigestPasswordEncoder() {\n@@ -43,7 +43,7 @@\n     }\n \n     // Removed PasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n--- src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n+++ src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java\n@@ -31,7 +31,7 @@\n import org.jasypt.util.password.StrongPasswordEncryptor;\n \n // Removed import for PBEPasswordEncoder\n-// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n+// import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\n public class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n \n     public GeoStorePBEPasswordEncoder() {\n@@ -101,7 +101,7 @@\n     }\n \n     // Removed PBEPasswordEncoder methods\n-// - public boolean matches(String rawPassword, String encodedPassword) {\n+public boolean matches(String rawPassword, String encodedPassword) { // Updated to remove PBEPasswordEncoder methods\n         return passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PasswordEncoder\n// - import org.jasypt.spring.security.PasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStoreDigestPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\nimport org.jasypt.util.password.StrongPasswordEncryptor;\n// Removed import for PBEPasswordEncoder\n// - import org.jasypt.spring.security.PBEPasswordEncoder; // Removed in jasypt 1.9.2\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\npublic GeoStorePBEPasswordEncoder() {\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java!\nMake extra sure the indentation is correct.\nsrc/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java does not contain these 7 exact lines in a row:\n```\n}\n// Removed PBEPasswordEncoder methods\n// - public boolean matches(String rawPassword, String encodedPassword) {\nreturn passwordEncryptor.checkPassword(rawPassword, encodedPassword);\n}\n}\n```",
            "span_id": 10128153031807898662
        }
    ],
    "read_file": [
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java",
            "output": "/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n * \n *  GPLv3 + Classpath exception\n * \n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n * \n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n * \n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage it.geosolutions.geostore.core.security.password;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.jasypt.digest.StandardByteDigester;\nimport org.jasypt.spring.security.PasswordEncoder;\nimport org.jasypt.util.password.StrongPasswordEncryptor;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\n\n/**\n * This Encoder provide encription and check of password using a digest\n * @author Lorenzo Natali (lorenzo.natali at geo-solutions.it)\n *\n */\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder{\n\t\n\n\t\t/**\n\t\t * The digest is not reversible\n\t\t */\n\t    public GeoStoreDigestPasswordEncoder() {\n\t        setReversible(false);\n\t    }\n\n\t    @Override\n\t    protected PasswordEncoder createStringEncoder() {\n\t        PasswordEncoder encoder = new PasswordEncoder();\n\t        encoder.setPasswordEncryptor(new StrongPasswordEncryptor());\n\t        return encoder;\n\t    }\n\n\t    @Override\n\t    protected CharArrayPasswordEncoder createCharEncoder() {\n\t        return new CharArrayPasswordEncoder() {\n\t            StandardByteDigester digester = new StandardByteDigester();\n\t            {\n\t                digester.setAlgorithm(\"SHA-256\");\n\t                digester.setIterations(100000);\n\t                digester.setSaltSizeBytes(16);\n\t                digester.initialize();\n\t            }\n\t            \n\t            @Override\n\t            public String encodePassword(char[] rawPass, Object salt) {\n\t                return new String(Base64.encodeBase64(digester.digest(toBytes(rawPass))));\n\t            }\n\t            @Override\n\t            public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {\n\t                return digester.matches(toBytes(rawPass), Base64.decodeBase64(encPass.getBytes())); \n\t            }\n\t        };\n\t    }\n\n\t    @Override\n\t    public PasswordEncodingType getEncodingType() {\n\t        return PasswordEncodingType.DIGEST;\n\t    }\n\t\n}\n",
            "error": "",
            "span_id": 6177600197680109318
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 18403247227225773835
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java",
            "output": "/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n * \n *  GPLv3 + Classpath exception\n * \n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n * \n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n * \n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage it.geosolutions.geostore.core.security.password;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.jasypt.digest.StandardByteDigester;\nimport org.jasypt.spring.security.PasswordEncoder;\nimport org.jasypt.util.password.StrongPasswordEncryptor;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\n\n/**\n * This Encoder provide encription and check of password using a digest\n * @author Lorenzo Natali (lorenzo.natali at geo-solutions.it)\n *\n */\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder{\n\t\n\n\t\t/**\n\t\t * The digest is not reversible\n\t\t */\n\t    public GeoStoreDigestPasswordEncoder() {\n\t        setReversible(false);\n\t    }\n\n\t    @Override\n\t    protected PasswordEncoder createStringEncoder() {\n\t        PasswordEncoder encoder = new PasswordEncoder();\n\t        encoder.setPasswordEncryptor(new StrongPasswordEncryptor());\n\t        return encoder;\n\t    }\n\n\t    @Override\n\t    protected CharArrayPasswordEncoder createCharEncoder() {\n\t        return new CharArrayPasswordEncoder() {\n\t            StandardByteDigester digester = new StandardByteDigester();\n\t            {\n\t                digester.setAlgorithm(\"SHA-256\");\n\t                digester.setIterations(100000);\n\t                digester.setSaltSizeBytes(16);\n\t                digester.initialize();\n\t            }\n\t            \n\t            @Override\n\t            public String encodePassword(char[] rawPass, Object salt) {\n\t                return new String(Base64.encodeBase64(digester.digest(toBytes(rawPass))));\n\t            }\n\t            @Override\n\t            public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {\n\t                return digester.matches(toBytes(rawPass), Base64.decodeBase64(encPass.getBytes())); \n\t            }\n\t        };\n\t    }\n\n\t    @Override\n\t    public PasswordEncodingType getEncodingType() {\n\t        return PasswordEncodingType.DIGEST;\n\t    }\n\t\n}\n",
            "error": "",
            "span_id": 9113146354072569509
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 10122482516988561217
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java",
            "output": "/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n * \n *  GPLv3 + Classpath exception\n * \n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n * \n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n * \n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage it.geosolutions.geostore.core.security.password;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.jasypt.digest.StandardByteDigester;\nimport org.jasypt.spring.security.PasswordEncoder;\nimport org.jasypt.util.password.StrongPasswordEncryptor;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\n\n/**\n * This Encoder provide encription and check of password using a digest\n * @author Lorenzo Natali (lorenzo.natali at geo-solutions.it)\n *\n */\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder{\n\t\n\n\t\t/**\n\t\t * The digest is not reversible\n\t\t */\n\t    public GeoStoreDigestPasswordEncoder() {\n\t        setReversible(false);\n\t    }\n\n\t    @Override\n\t    protected PasswordEncoder createStringEncoder() {\n\t        PasswordEncoder encoder = new PasswordEncoder();\n\t        encoder.setPasswordEncryptor(new StrongPasswordEncryptor());\n\t        return encoder;\n\t    }\n\n\t    @Override\n\t    protected CharArrayPasswordEncoder createCharEncoder() {\n\t        return new CharArrayPasswordEncoder() {\n\t            StandardByteDigester digester = new StandardByteDigester();\n\t            {\n\t                digester.setAlgorithm(\"SHA-256\");\n\t                digester.setIterations(100000);\n\t                digester.setSaltSizeBytes(16);\n\t                digester.initialize();\n\t            }\n\t            \n\t            @Override\n\t            public String encodePassword(char[] rawPass, Object salt) {\n\t                return new String(Base64.encodeBase64(digester.digest(toBytes(rawPass))));\n\t            }\n\t            @Override\n\t            public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {\n\t                return digester.matches(toBytes(rawPass), Base64.decodeBase64(encPass.getBytes())); \n\t            }\n\t        };\n\t    }\n\n\t    @Override\n\t    public PasswordEncodingType getEncodingType() {\n\t        return PasswordEncodingType.DIGEST;\n\t    }\n\t\n}\n",
            "error": "",
            "span_id": 11559720640802509159
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 14854486585611117093
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java",
            "output": "/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n * \n *  GPLv3 + Classpath exception\n * \n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n * \n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n * \n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage it.geosolutions.geostore.core.security.password;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.jasypt.digest.StandardByteDigester;\nimport org.jasypt.spring.security.PasswordEncoder;\nimport org.jasypt.util.password.StrongPasswordEncryptor;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\n\n/**\n * This Encoder provide encription and check of password using a digest\n * @author Lorenzo Natali (lorenzo.natali at geo-solutions.it)\n *\n */\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder{\n\t\n\n\t\t/**\n\t\t * The digest is not reversible\n\t\t */\n\t    public GeoStoreDigestPasswordEncoder() {\n\t        setReversible(false);\n\t    }\n\n\t    @Override\n\t    protected PasswordEncoder createStringEncoder() {\n\t        PasswordEncoder encoder = new PasswordEncoder();\n\t        encoder.setPasswordEncryptor(new StrongPasswordEncryptor());\n\t        return encoder;\n\t    }\n\n\t    @Override\n\t    protected CharArrayPasswordEncoder createCharEncoder() {\n\t        return new CharArrayPasswordEncoder() {\n\t            StandardByteDigester digester = new StandardByteDigester();\n\t            {\n\t                digester.setAlgorithm(\"SHA-256\");\n\t                digester.setIterations(100000);\n\t                digester.setSaltSizeBytes(16);\n\t                digester.initialize();\n\t            }\n\t            \n\t            @Override\n\t            public String encodePassword(char[] rawPass, Object salt) {\n\t                return new String(Base64.encodeBase64(digester.digest(toBytes(rawPass))));\n\t            }\n\t            @Override\n\t            public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {\n\t                return digester.matches(toBytes(rawPass), Base64.decodeBase64(encPass.getBytes())); \n\t            }\n\t        };\n\t    }\n\n\t    @Override\n\t    public PasswordEncodingType getEncodingType() {\n\t        return PasswordEncodingType.DIGEST;\n\t    }\n\t\n}\n",
            "error": "",
            "span_id": 7633335052776317868
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 4068930655870858983
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 15940699737703366011
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java",
            "output": "/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n * \n *  GPLv3 + Classpath exception\n * \n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n * \n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n * \n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage it.geosolutions.geostore.core.security.password;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.jasypt.digest.StandardByteDigester;\nimport org.jasypt.spring.security.PasswordEncoder;\nimport org.jasypt.util.password.StrongPasswordEncryptor;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\n\n/**\n * This Encoder provide encription and check of password using a digest\n * @author Lorenzo Natali (lorenzo.natali at geo-solutions.it)\n *\n */\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder{\n\t\n\n\t\t/**\n\t\t * The digest is not reversible\n\t\t */\n\t    public GeoStoreDigestPasswordEncoder() {\n\t        setReversible(false);\n\t    }\n\n\t    @Override\n\t    protected PasswordEncoder createStringEncoder() {\n\t        PasswordEncoder encoder = new PasswordEncoder();\n\t        encoder.setPasswordEncryptor(new StrongPasswordEncryptor());\n\t        return encoder;\n\t    }\n\n\t    @Override\n\t    protected CharArrayPasswordEncoder createCharEncoder() {\n\t        return new CharArrayPasswordEncoder() {\n\t            StandardByteDigester digester = new StandardByteDigester();\n\t            {\n\t                digester.setAlgorithm(\"SHA-256\");\n\t                digester.setIterations(100000);\n\t                digester.setSaltSizeBytes(16);\n\t                digester.initialize();\n\t            }\n\t            \n\t            @Override\n\t            public String encodePassword(char[] rawPass, Object salt) {\n\t                return new String(Base64.encodeBase64(digester.digest(toBytes(rawPass))));\n\t            }\n\t            @Override\n\t            public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {\n\t                return digester.matches(toBytes(rawPass), Base64.decodeBase64(encPass.getBytes())); \n\t            }\n\t        };\n\t    }\n\n\t    @Override\n\t    public PasswordEncodingType getEncodingType() {\n\t        return PasswordEncodingType.DIGEST;\n\t    }\n\t\n}\n",
            "error": "",
            "span_id": 4537238610004533449
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 15276595332101392454
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 2040554730345930002
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 18263467242957203401
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStoreDigestPasswordEncoder.java",
            "output": "/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n * \n *  GPLv3 + Classpath exception\n * \n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n * \n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n * \n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage it.geosolutions.geostore.core.security.password;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.jasypt.digest.StandardByteDigester;\nimport org.jasypt.spring.security.PasswordEncoder;\nimport org.jasypt.util.password.StrongPasswordEncryptor;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\n\n/**\n * This Encoder provide encription and check of password using a digest\n * @author Lorenzo Natali (lorenzo.natali at geo-solutions.it)\n *\n */\npublic class GeoStoreDigestPasswordEncoder extends AbstractGeoStorePasswordEncoder{\n\t\n\n\t\t/**\n\t\t * The digest is not reversible\n\t\t */\n\t    public GeoStoreDigestPasswordEncoder() {\n\t        setReversible(false);\n\t    }\n\n\t    @Override\n\t    protected PasswordEncoder createStringEncoder() {\n\t        PasswordEncoder encoder = new PasswordEncoder();\n\t        encoder.setPasswordEncryptor(new StrongPasswordEncryptor());\n\t        return encoder;\n\t    }\n\n\t    @Override\n\t    protected CharArrayPasswordEncoder createCharEncoder() {\n\t        return new CharArrayPasswordEncoder() {\n\t            StandardByteDigester digester = new StandardByteDigester();\n\t            {\n\t                digester.setAlgorithm(\"SHA-256\");\n\t                digester.setIterations(100000);\n\t                digester.setSaltSizeBytes(16);\n\t                digester.initialize();\n\t            }\n\t            \n\t            @Override\n\t            public String encodePassword(char[] rawPass, Object salt) {\n\t                return new String(Base64.encodeBase64(digester.digest(toBytes(rawPass))));\n\t            }\n\t            @Override\n\t            public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {\n\t                return digester.matches(toBytes(rawPass), Base64.decodeBase64(encPass.getBytes())); \n\t            }\n\t        };\n\t    }\n\n\t    @Override\n\t    public PasswordEncodingType getEncodingType() {\n\t        return PasswordEncodingType.DIGEST;\n\t    }\n\t\n}\n",
            "error": "",
            "span_id": 5788366482617757153
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 13690148415496831728
        },
        {
            "input": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
            "output": "package it.geosolutions.geostore.core.security.password;\n\n/*\n *  Copyright (C) 2007 - 2011 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.scramble;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toBytes;\nimport static it.geosolutions.geostore.core.security.password.SecurityUtils.toChars;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport org.acegisecurity.providers.encoding.PasswordEncoder;\nimport org.jasypt.encryption.pbe.StandardPBEByteEncryptor;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.spring.security.PBEPasswordEncoder;\n/**\n * Password Encoder using symmetric encryption\n * \n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n * \n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n * \n * @author Lorenzo Natali\n * \n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n\n\tStandardPBEStringEncryptor stringEncrypter;\n\tStandardPBEByteEncryptor byteEncrypter;\n\n\tprivate String providerName, algorithm;\n\tprivate String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n\tprivate KeyStoreProvider keystoreProvider;\n\n\tpublic KeyStoreProvider getKeystoreProvider() {\n\t\treturn keystoreProvider;\n\t}\n\n\tpublic void setKeystoreProvider(KeyStoreProvider keystoreProvider) {\n\t\tthis.keystoreProvider = keystoreProvider;\n\t}\n\n\tpublic void setKeyAliasInKeyStore(String keyAliasInKeyStore) {\n\t\tthis.keyAliasInKeyStore = keyAliasInKeyStore;\n\t}\n\n\tpublic String getProviderName() {\n\t\treturn providerName;\n\t}\n\n\tpublic void setProviderName(String providerName) {\n\t\tthis.providerName = providerName;\n\t}\n\n\tpublic String getAlgorithm() {\n\t\treturn algorithm;\n\t}\n\n\tpublic void setAlgorithm(String algorithm) {\n\t\tthis.algorithm = algorithm;\n\t}\n\n\tpublic String getKeyAliasInKeyStore() {\n\t\treturn keyAliasInKeyStore;\n\t}\n\n\t@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}\n\n\t@Override\n\tprotected CharArrayPasswordEncoder createCharEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\t\tchar[] chars = toChars(password);\n\n\t\tbyteEncrypter = new StandardPBEByteEncryptor();\n\t\tbyteEncrypter.setPasswordCharArray(chars);\n\n\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\tbyteEncrypter.setProviderName(getProviderName());\n\t\t}\n\t\tbyteEncrypter.setAlgorithm(getAlgorithm());\n\n\t\treturn new CharArrayPasswordEncoder() {\n\t\t\t@Override\n\t\t\tpublic boolean isPasswordValid(String encPass, char[] rawPass,\n\t\t\t\t\tObject salt) {\n\t\t\t\tbyte[] decoded = Base64.getDecoder().decode(encPass.getBytes());\n\t\t\t\tbyte[] decrypted = byteEncrypter.decrypt(decoded);\n\n\t\t\t\tchar[] chars = toChars(decrypted);\n\t\t\t\ttry {\n\t\t\t\t\treturn Arrays.equals(chars, rawPass);\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(decrypted);\n\t\t\t\t\tscramble(chars);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String encodePassword(char[] rawPass, Object salt) {\n\t\t\t\tbyte[] bytes = toBytes(rawPass);\n\t\t\t\ttry {\n\t\t\t\t\treturn new String(Base64.getEncoder().encode(byteEncrypter\n\t\t\t\t\t\t\t.encrypt(bytes)));\n\t\t\t\t} finally {\n\t\t\t\t\tscramble(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tbyte[] lookupPasswordFromKeyStore() {\n\t\ttry {\n\t\t\tif (!keystoreProvider.containsAlias(getKeyAliasInKeyStore())) {\n\t\t\t\tthrow new RuntimeException(\"Keystore: \"\n\t\t\t\t\t\t+ keystoreProvider.getFile() + \" does not\"\n\t\t\t\t\t\t+ \" contain alias: \" + getKeyAliasInKeyStore());\n\t\t\t}\n\t\t\treturn keystoreProvider.getSecretKey(getKeyAliasInKeyStore())\n\t\t\t\t\t.getEncoded();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Cannot find alias: \"\n\t\t\t\t\t+ getKeyAliasInKeyStore() + \" in \"\n\t\t\t\t\t+ keystoreProvider.getFile().getAbsolutePath());\n\t\t}\n\t}\n\n\t@Override\n\tpublic PasswordEncodingType getEncodingType() {\n\t\treturn PasswordEncodingType.ENCRYPT;\n\t}\n\n\tpublic String decode(String encPass) throws UnsupportedOperationException {\n\t\tif (stringEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetStringEncoder();\n\t\t}\n\n\t\treturn stringEncrypter.decrypt(removePrefix(encPass));\n\t}\n\n\t@Override\n\tpublic char[] decodeToCharArray(String encPass)\n\t\t\tthrows UnsupportedOperationException {\n\t\tif (byteEncrypter == null) {\n\t\t\t// not initialized\n\t\t\tgetCharEncoder();\n\t\t}\n\n\t\tbyte[] decoded = Base64.getDecoder().decode(removePrefix(encPass).getBytes());\n\t\tbyte[] bytes = byteEncrypter.decrypt(decoded);\n\t\ttry {\n\t\t\treturn toChars(bytes);\n\t\t} finally {\n\t\t\tscramble(bytes);\n\t\t}\n\t}\n\t\n}\n",
            "error": "",
            "span_id": 12668029739269330232
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}