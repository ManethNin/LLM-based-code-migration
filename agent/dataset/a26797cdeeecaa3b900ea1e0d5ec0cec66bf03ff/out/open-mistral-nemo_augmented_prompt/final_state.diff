diff --git a/src/test/java/uk/gov/pay/adminusers/queue/event/EventMessageHandlerTest.java b/src/test/java/uk/gov/pay/adminusers/queue/event/EventMessageHandlerTest.java
index d3277554..82327ab3 100644
--- a/src/test/java/uk/gov/pay/adminusers/queue/event/EventMessageHandlerTest.java
+++ b/src/test/java/uk/gov/pay/adminusers/queue/event/EventMessageHandlerTest.java
@@ -112,14 +112,21 @@ class EventMessageHandlerTest {
         logger.setLevel(Level.INFO);
         logger.addAppender(mockLogAppender);
     }
-
-    @Test
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+
+@Test
     void shouldMarkMessageAsProcessed() throws Exception {
         disputeEvent = anEventFixture()
                 .withEventType(EventType.DISPUTE_CREATED.name())
                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
                 .withParentResourceExternalId("456")
-                .build();
+.build();
         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
         when(mockLedgerService.getTransaction(transaction.getTransactionId())).thenReturn(Optional.of(transaction));
         when(mockUserServices.getAdminUsersForService(service.getId())).thenReturn(users);
@@ -131,16 +138,23 @@ class EventMessageHandlerTest {
         eventMessageHandler.processMessages();
 
         verify(mockEventSubscriberQueue).markMessageAsProcessed(mockQueueMessage);
-    }
-
-    @Test
+}
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+
+@Test
     void shouldHandleDisputeCreatedEvent() throws QueueException {
         var mockQueueMessage = mock(QueueMessage.class);
         disputeEvent = anEventFixture()
                 .withEventType(EventType.DISPUTE_CREATED.name())
                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId, "reason", "fraudulent")))
                 .withParentResourceExternalId("456")
-                .build();
+.build();
         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
@@ -179,9 +193,16 @@ class EventMessageHandlerTest {
         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
-    }
-
-    @Test
+}
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+
+@Test
     void shouldHandleDisputeLostEvent() throws QueueException {
         var mockQueueMessage = mock(QueueMessage.class);
         disputeEvent = anEventFixture()
@@ -190,7 +211,7 @@ class EventMessageHandlerTest {
                 .withParentResourceExternalId("456")
                 .withServiceId(service.getExternalId())
                 .withLive(true)
-                .build();
+.build();
         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
@@ -216,9 +237,16 @@ class EventMessageHandlerTest {
         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
-    }
-
-    @Test
+}
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+
+@Test
     void shouldHandleDisputeWonEvent() throws QueueException {
         var mockQueueMessage = mock(QueueMessage.class);
         disputeEvent = anEventFixture()
@@ -227,7 +255,7 @@ class EventMessageHandlerTest {
                 .withParentResourceExternalId("456")
                 .withServiceId(service.getExternalId())
                 .withLive(true)
-                .build();
+.build();
         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
@@ -253,9 +281,16 @@ class EventMessageHandlerTest {
         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
-    }
-
-    @Test
+}
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+
+@Test
     void shouldHandleDisputeEvidenceSubmittedEvent() throws QueueException {
         var mockQueueMessage = mock(QueueMessage.class);
         disputeEvent = anEventFixture()
@@ -264,7 +299,7 @@ class EventMessageHandlerTest {
                 .withParentResourceExternalId("456")
                 .withServiceId(service.getExternalId())
                 .withLive(true)
-                .build();
+.build();
         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
         when(mockQueueMessage.getMessageId()).thenReturn("queue-message-id");
         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
@@ -290,16 +325,23 @@ class EventMessageHandlerTest {
         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
         assertThat(logStatement.get(0).getFormattedMessage(), Is.is("Retrieved event queue message with id [queue-message-id] for resource external id [a-resource-external-id]"));
         assertThat(logStatement.get(1).getFormattedMessage(), Is.is("Processed notification email for disputed transaction"));
-    }
-
-    @Test
+}
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+
+@Test
     void shouldNotCallNotificationServiceWhenServiceDoesNotExist() throws QueueException {
         var mockQueueMessage = mock(QueueMessage.class);
         disputeEvent = anEventFixture()
                 .withEventType(EventType.DISPUTE_CREATED.name())
                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00Z", "gateway_account_id", gatewayAccountId)))
                 .withParentResourceExternalId("456")
-                .build();
+.build();
         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.empty());
@@ -307,16 +349,23 @@ class EventMessageHandlerTest {
         eventMessageHandler.processMessages();
 
         verify(mockNotificationService, never()).sendStripeDisputeCreatedEmail(anySet(), anyMap());
-    }
-
-    @Test
+}
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+
+@Test
     void shouldNotCallNotificationServiceWhenTransactionDoesNotExist() throws QueueException {
         var mockQueueMessage = mock(QueueMessage.class);
         disputeEvent = anEventFixture()
                 .withEventType(EventType.DISPUTE_CREATED.name())
                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
                 .withParentResourceExternalId("456")
-                .build();
+.build();
         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
         when(mockServiceFinder.byGatewayAccountId(gatewayAccountId)).thenReturn(Optional.of(service));
@@ -325,16 +374,23 @@ class EventMessageHandlerTest {
         eventMessageHandler.processMessages();
 
         verify(mockNotificationService, never()).sendStripeDisputeCreatedEmail(anySet(), anyMap());
-    }
-
-    @Test
+}
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+
+@Test
     void shouldNotCallNotificationServiceWhenNoAdminUsersExist() throws QueueException {
         var mockQueueMessage = mock(QueueMessage.class);
         disputeEvent = anEventFixture()
                 .withEventType(EventType.DISPUTE_CREATED.name())
                 .withEventDetails(objectMapper.valueToTree(Map.of("amount", 21000L, "fee", 1500L, "evidence_due_date", "2022-03-07T13:00:00.001Z", "gateway_account_id", gatewayAccountId)))
                 .withParentResourceExternalId("456")
-                .build();
+.build();
         var eventMessage = EventMessage.of(disputeEvent, mockQueueMessage);
         when(mockEventSubscriberQueue.retrieveEvents()).thenReturn(List.of(eventMessage));
 
@@ -345,5 +401,19 @@ class EventMessageHandlerTest {
         eventMessageHandler.processMessages();
 
         verify(mockNotificationService, never()).sendStripeDisputeCreatedEmail(anySet(), anyMap());
-    }
 }
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+}
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
+logger.setLevel(ch.qos.logback.classic.Level.INFO);
\ No newline at end of file