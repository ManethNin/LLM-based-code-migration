diff --git a/nis/src/main/java/org/nem/nis/controller/AccountController.java b/nis/src/main/java/org/nem/nis/controller/AccountController.java
index 6cb9afbaf..b7fb7c79e 100644
--- a/nis/src/main/java/org/nem/nis/controller/AccountController.java
+++ b/nis/src/main/java/org/nem/nis/controller/AccountController.java
@@ -1,16 +1,75 @@
 package org.nem.nis.controller;
 
-import org.nem.core.crypto.*;
-import org.nem.core.model.*;
-import org.nem.core.model.ncc.*;
-import org.nem.core.serialization.*;
-import org.nem.nis.cache.ReadOnlyAccountStateCache;
-import org.nem.nis.controller.annotations.*;
-import org.nem.nis.controller.requests.*;
-import org.nem.nis.controller.viewmodels.AccountImportanceViewModel;
-import org.nem.nis.harvesting.*;
-import org.nem.nis.service.AccountIo;
+import org.nem.nis.controller.requests.AccountInfo;
+import org.nem.nis.service.AccountService;
+import org.nem.nis.service.NodeService;
+import org.nem.nis.state.AccountState;
 import org.springframework.beans.factory.annotation.Autowired;
+import jakarta.validation.Valid;
+import java.util.Collection;
+
+@Controller
+@RequestMapping("/account")
+public class AccountController {
+
+    private final AccountService accountService;
+    private final NodeService nodeService;
+
+    @Autowired
+    public AccountController(AccountService accountService, NodeService nodeService) {
+        this.accountService = accountService;
+        this.nodeService = nodeService;
+    }
+
+    /**
+     * Creates a new account.
+     *
+     * @param accountInfo The account information.
+     * @return The account state.
+     */
+    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
+    public @ResponseBody AccountState createAccount(@Valid @RequestBody AccountInfo accountInfo) {
+        return this.accountService.createAccount(accountInfo);
+    }
+
+    /**
+     * Updates an existing account.
+     *
+     * @param address The address of the account to update.
+     * @param accountInfo The account information.
+     * @return The account state.
+     */
+    @PostMapping(value = "/{address}", consumes = MediaType.APPLICATION_JSON_VALUE)
+    public @ResponseBody AccountState updateAccount(@PathVariable String address, @Valid @RequestBody AccountInfo accountInfo) {
+        return this.accountService.updateAccount(address, accountInfo);
+    }
+
+    /**
+     * Updates the information for an existing account.
+     *
+     * @param address The address of the account to update.
+     * @param accountInfo The account information.
+     * @return The account state.
+     */
+    @PutMapping(value = "/{address}", consumes = MediaType.APPLICATION_JSON_VALUE)
+    public @ResponseBody AccountState updateAccountInfo(@PathVariable String address, @Valid @RequestBody AccountInfo accountInfo) {
+        return this.accountService.updateAccountInfo(address, accountInfo);
+    }
+
+    /**
+     * Gets the current account importance information for all accounts.
+     *
+     * @return Account importance information.
+     */
+    @GetMapping("/importances")
+    @PublicApi
+    public @ResponseBody Collection<AccountState> getImportances() {
+        return this.accountService.getAccountStates();
+    }
+
+    /**
+     * API for creating new account data.
+     *
 import org.springframework.web.bind.annotation.*;
 
 import javax.validation.Valid;