diff --git a/jadler-jetty/pom.xml b/jadler-jetty/pom.xml
index 224cb2e..7e0d7db 100644
--- a/jadler-jetty/pom.xml
+++ b/jadler-jetty/pom.xml
@@ -31,6 +31,7 @@ This program is made available under the terms of the MIT License.
         <dependency>
             <groupId>org.eclipse.jetty</groupId>
             <artifactId>jetty-server</artifactId>
+            <version>9.4.41.v20210516</version>
         </dependency>
         <dependency>
             <groupId>org.eclipse.jetty.orbit</groupId>
diff --git a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
index a501e45..4962b75 100644
--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
@@ -10,73 +10,77 @@ import org.eclipse.jetty.server.Server;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.commons.lang.Validate;
+import org.eclipse.jetty.server.ServerConnector;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.nio.SelectChannelConnector;
 
 
 /**
  * Default stub http server implementation using Jetty as an http server.
- */
+*/
 public class JettyStubHttpServer implements StubHttpServer {
 
     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);
     private final Server server;
-    private final Connector httpConnector;
+private final ServerConnector httpConnector;
 
     public JettyStubHttpServer() {
-        this(0);
-    }
-    
+this(0);
+}
+
 
     public JettyStubHttpServer(final int port) {
         this.server = new Server();
-        this.server.setSendServerVersion(false);
-        this.server.setSendDateHeader(true);
-        
-        this.httpConnector = new SelectChannelConnector();
+-        this.server.setSendServerVersion(false);
+-        this.server.setSendDateHeader(true);
+-        this.httpConnector = new SelectChannelConnector();
++        this.httpConnector = new ServerConnector(server);
         this.httpConnector.setPort(port);
         server.addConnector(this.httpConnector);
-    }
-    
+server.setAttribute("sendServerVersion", false);
+server.setAttribute("sendDateHeader", true);
+}
+
 
-    /**
+/**
      * {@inheritDoc}
-     */
-    @Override
+*/
+@Override
     public void registerRequestManager(final RequestManager ruleProvider) {
         Validate.notNull(ruleProvider, "ruleProvider cannot be null");
 
         server.setHandler(new JadlerHandler(ruleProvider));
-    }
-    
+}
+
 
-    /**
+/**
      * {@inheritDoc}
-     */
-    @Override
+*/
+@Override
     public void start() throws Exception {
         logger.debug("starting jetty");
         server.start();
         logger.debug("jetty started");
-    }
+}
 
 
-    /**
+/**
      * {@inheritDoc}
-     */
-    @Override
+*/
+@Override
     public void stop() throws Exception {
         logger.debug("stopping jetty");
         server.stop();
         logger.debug("jetty stopped");
-    }
-    
+}
 
-    /**
+
+/**
      * {@inheritDoc}
-     */
-    @Override
+*/
+@Override
     public int getPort() {
         return httpConnector.getLocalPort();
-    }
+}
+}
 }
\ No newline at end of file