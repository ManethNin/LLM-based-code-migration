package com.fluxtion.compiler.builder.factory;

import com.fluxtion.compiler.generation.util.MultipleSepTargetInProcessTest;
import com.fluxtion.runtime.annotations.OnEventHandler;
import com.fluxtion.runtime.annotations.OnParentUpdate;
import com.fluxtion.runtime.annotations.OnTrigger;
import com.fluxtion.runtime.annotations.builder.ExcludeNode;
import com.fluxtion.runtime.node.NamedNode;
import lombok.Data;
import org.junit.Test;
import org.yaml.snakeyaml.TypeDescription;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.function.DoubleSupplier;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
    @Test(expected = NoSuchFieldException.class)
    public void driveFromYaml() {
        String config = "nodeList:\n" +
                "- !doubleSum\n" +
                "  doubleSuppliers:\n" +
                "  - !stringHandler\n" +
                "    id: A\n" +
                "  - !stringHandler\n" +
                "    id: B\n" +
                "- !stringHandler\n" +
                "  id: C";
        sep(c -> {
            Constructor constructor = new Constructor();
            constructor.addTypeDescription(new TypeDescription(DoubleSum.class, "!doubleSum"));
            constructor.addTypeDescription(new TypeDescription(StringHandler.class, "!stringHandler"));
            Yaml yaml = new Yaml(constructor);
            c.addNode(yaml.loadAs(config, InstanceHolder.class));
        });
        DoubleSum aggregator = getField("aggregator");
        StringHandler handlerC = getField("stringHandler_C");
        onEvent("A");
        assertThat(aggregator.sum, is(1.0));
        assertThat(handlerC.value, is(0));
        onEvent("A");
        assertThat(aggregator.sum, is(2.0));
        assertThat(handlerC.value, is(0));
        onEvent("B");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(0));
        onEvent("C");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(1));

        getField("instanceHolder");
    }

    @Test(expected = NoSuchFieldException.class)
    public void driveAsListFromYaml() {
        String config = "" +
                "- !doubleSum\n" +
                "  doubleSuppliers:\n" +
                "  - !stringHandler\n" +
                "    id: A\n" +
                "  - !stringHandler\n" +
                "    id: B\n" +
                "- !stringHandler\n" +
                "  id: C";
        sep(c -> {
            Constructor constructor = new Constructor();
            constructor.addTypeDescription(new TypeDescription(DoubleSum.class, "!doubleSum"));
            constructor.addTypeDescription(new TypeDescription(StringHandler.class, "!stringHandler"));
            Yaml yaml = new Yaml(constructor);
            yaml.loadAs("nodeList:\n" + config, InstanceHolder.class).getNodeList().forEach(c::addNode);
        });
        DoubleSum aggregator = getField("aggregator");
        StringHandler handlerC = getField("stringHandler_C");
        onEvent("A");
        assertThat(aggregator.sum, is(1.0));
        assertThat(handlerC.value, is(0));
        onEvent("A");
        assertThat(aggregator.sum, is(2.0));
        assertThat(handlerC.value, is(0));
        onEvent("B");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(0));
        onEvent("C");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(1));

        getField("instanceHolder");
    }

}