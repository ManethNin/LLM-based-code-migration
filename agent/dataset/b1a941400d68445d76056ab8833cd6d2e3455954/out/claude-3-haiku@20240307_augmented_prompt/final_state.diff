diff --git a/compiler/src/test/java/com/fluxtion/compiler/builder/factory/GraphOfInstancesTest.java b/compiler/src/test/java/com/fluxtion/compiler/builder/factory/GraphOfInstancesTest.java
index 8d7d7221..80c83889 100644
--- a/compiler/src/test/java/com/fluxtion/compiler/builder/factory/GraphOfInstancesTest.java
+++ b/compiler/src/test/java/com/fluxtion/compiler/builder/factory/GraphOfInstancesTest.java
@@ -11,6 +11,10 @@ import org.junit.Test;
 import org.yaml.snakeyaml.TypeDescription;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.Constructor;
+import org.yaml.snakeyaml.LoaderOptions;
+import org.yaml.snakeyaml.LoaderOptions;
+import org.yaml.snakeyaml.LoaderOptions;
+import org.yaml.snakeyaml.LoaderOptions;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -23,11 +27,11 @@ import static org.hamcrest.MatcherAssert.assertThat;
 public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
     public GraphOfInstancesTest(boolean compiledSep) {
         super(compiledSep);
-    }
+}
 
     @Test(expected = NoSuchFieldException.class)
     public void buildWithoutYaml() {
-        sep(c -> {
+sep(c -> {
             StringHandler stringHandlerA = new StringHandler("A");
             StringHandler stringHandlerB = new StringHandler("B");
             StringHandler stringHandlerC = new StringHandler("C");
@@ -43,7 +47,7 @@ public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
             c.addNode(instanceHolder);
             c.addNode(stringHandlerC);
             c.addNode(stringHandlerN);
-        });
+});
 
         DoubleSum aggregator = getField("aggregator");
         StringHandler handlerC = getField("stringHandler_C");
@@ -61,7 +65,7 @@ public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
         assertThat(handlerC.value, is(1));
 
         getField("instanceHolder");
-    }
+}
 
     @Test(expected = NoSuchFieldException.class)
     public void driveFromYaml() {
@@ -69,18 +73,18 @@ public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
                 "- !doubleSum\n" +
                 "  doubleSuppliers:\n" +
                 "  - !stringHandler\n" +
-                "    id: A\n" +
+"    id: A\n" +
                 "  - !stringHandler\n" +
-                "    id: B\n" +
+"    id: B\n" +
                 "- !stringHandler\n" +
-                "  id: C";
-        sep(c -> {
-            Constructor constructor = new Constructor();
+"  id: C";
+sep(c -> {
+Constructor constructor = new Constructor(new LoaderOptions());
             constructor.addTypeDescription(new TypeDescription(DoubleSum.class, "!doubleSum"));
             constructor.addTypeDescription(new TypeDescription(StringHandler.class, "!stringHandler"));
             Yaml yaml = new Yaml(constructor);
             c.addNode(yaml.loadAs(config, InstanceHolder.class));
-        });
+});
         DoubleSum aggregator = getField("aggregator");
         StringHandler handlerC = getField("stringHandler_C");
         onEvent("A");
@@ -97,7 +101,7 @@ public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
         assertThat(handlerC.value, is(1));
 
         getField("instanceHolder");
-    }
+}
 
     @Test(expected = NoSuchFieldException.class)
     public void driveAsListFromYaml() {
@@ -105,18 +109,18 @@ public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
                 "- !doubleSum\n" +
                 "  doubleSuppliers:\n" +
                 "  - !stringHandler\n" +
-                "    id: A\n" +
+"    id: A\n" +
                 "  - !stringHandler\n" +
-                "    id: B\n" +
+"    id: B\n" +
                 "- !stringHandler\n" +
-                "  id: C";
-        sep(c -> {
-            Constructor constructor = new Constructor();
+"  id: C";
+sep(c -> {
+Constructor constructor = new Constructor(new LoaderOptions());
             constructor.addTypeDescription(new TypeDescription(DoubleSum.class, "!doubleSum"));
             constructor.addTypeDescription(new TypeDescription(StringHandler.class, "!stringHandler"));
             Yaml yaml = new Yaml(constructor);
             yaml.loadAs("nodeList:\n" + config, InstanceHolder.class).getNodeList().forEach(c::addNode);
-        });
+});
         DoubleSum aggregator = getField("aggregator");
         StringHandler handlerC = getField("stringHandler_C");
         onEvent("A");
@@ -133,24 +137,24 @@ public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
         assertThat(handlerC.value, is(1));
 
         getField("instanceHolder");
-    }
+}
 
-    @Test
+@Test
     public void buildWithYaml() {
 
-    }
+}
 
 
-    @Data
+@Data
     @ExcludeNode
     public static class InstanceHolder implements NamedNode {
         private List<Object> nodeList = new ArrayList<>();
 
-        @Override
+@Override
         public String getName() {
             return "instanceHolder";
-        }
-    }
+}
+}
 
 
     public static class StringHandler implements DoubleSupplier, NamedNode {
@@ -160,63 +164,63 @@ public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
 
         public StringHandler(String id) {
             this.id = id;
-        }
+}
 
         public StringHandler() {
-        }
+}
 
         public String getId() {
-            return id;
-        }
+return id;
+}
 
         public void setId(String id) {
             this.id = id;
-        }
+}
 
         @OnEventHandler
         public boolean myStringHandler(String s) {
             value += Objects.equals(s, id) ? 1 : 0;
             return true;
-        }
+}
 
-        @Override
+@Override
         public double getAsDouble() {
             return value;
-        }
+}
 
         public int getValue() {
             return value;
-        }
+}
 
-        @Override
+@Override
         public String toString() {
             return "StringHandler{" +
                     "id='" + id + '\'' +
                     ", value=" + value +
-                    '}';
-        }
+'}';
+}
 
-        @Override
+@Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (o == null || getClass() != o.getClass()) return false;
             StringHandler that = (StringHandler) o;
             return id.equals(that.id);
-        }
+}
 
-        @Override
+@Override
         public int hashCode() {
             return Objects.hash(id);
-        }
+}
 
-        @Override
+@Override
         public String getName() {
             return "stringHandler_" + id;
-        }
-    }
+}
+}
 
 
-    @Data
+@Data
     public static class DoubleSum implements NamedNode {
 
         private List<DoubleSupplier> doubleSuppliers = new ArrayList<>();
@@ -225,17 +229,17 @@ public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
         @OnParentUpdate
         public void doubleSupplierUpdated(DoubleSupplier doubleSupplier) {
 
-        }
+}
 
         @OnTrigger
         public boolean sumSuppliers() {
             sum = doubleSuppliers.stream().mapToDouble(DoubleSupplier::getAsDouble).sum();
             return true;
-        }
+}
 
-        @Override
+@Override
         public String getName() {
             return "aggregator";
-        }
-    }
 }
+}
+}
\ No newline at end of file