diff --git a/apis/byon/src/main/java/org/jclouds/byon/domain/YamlNode.java b/apis/byon/src/main/java/org/jclouds/byon/domain/YamlNode.java
index 8cbbdc09da..e48a72c535 100644
--- a/apis/byon/src/main/java/org/jclouds/byon/domain/YamlNode.java
+++ b/apis/byon/src/main/java/org/jclouds/byon/domain/YamlNode.java
@@ -27,6 +27,7 @@ import org.jclouds.util.Closeables2;
 import org.yaml.snakeyaml.DumperOptions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.Constructor;
+import org.yaml.snakeyaml.LoaderOptions;
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Function;
@@ -111,7 +112,9 @@ public class YamlNode {
          InputStream in = null;
          try {
             in = byteSource.openStream();
-            return (YamlNode) new Yaml(new Constructor(YamlNode.class)).load(in);
+            LoaderOptions options = new LoaderOptions();
+            Constructor constructor = new Constructor(YamlNode.class, options);
+            return (YamlNode) new Yaml(constructor).load(in);
          } catch (IOException ioe) {
             throw Throwables.propagate(ioe);
          } finally {
diff --git a/apis/byon/src/main/java/org/jclouds/byon/functions/NodesFromYamlStream.java b/apis/byon/src/main/java/org/jclouds/byon/functions/NodesFromYamlStream.java
index 18454e12f5..c0c670b566 100644
--- a/apis/byon/src/main/java/org/jclouds/byon/functions/NodesFromYamlStream.java
+++ b/apis/byon/src/main/java/org/jclouds/byon/functions/NodesFromYamlStream.java
@@ -32,6 +32,7 @@ import org.jclouds.byon.domain.YamlNode;
 import org.yaml.snakeyaml.TypeDescription;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.Constructor;
+import org.yaml.snakeyaml.LoaderOptions;
 
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
@@ -80,7 +81,8 @@ public class NodesFromYamlStream implements Function<ByteSource, LoadingCache<St
    @Override
    public LoadingCache<String, Node> apply(ByteSource source) {
 
-      Constructor constructor = new Constructor(Config.class);
+      LoaderOptions options = new LoaderOptions();
+      Constructor constructor = new Constructor(Config.class, options);
 
       TypeDescription nodeDesc = new TypeDescription(YamlNode.class);
       nodeDesc.putListPropertyType("tags", String.class);
diff --git a/core/src/test/java/org/jclouds/http/handlers/RedirectionRetryHandlerTest.java b/core/src/test/java/org/jclouds/http/handlers/RedirectionRetryHandlerTest.java
index e7df0f8230..2c83cf7829 100644
--- a/core/src/test/java/org/jclouds/http/handlers/RedirectionRetryHandlerTest.java
+++ b/core/src/test/java/org/jclouds/http/handlers/RedirectionRetryHandlerTest.java
@@ -22,14 +22,11 @@ import static org.easymock.EasyMock.createMock;
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.replay;
 import static org.easymock.EasyMock.verify;
-import static org.jclouds.providers.AnonymousProviderMetadata.forApiOnEndpoint;
 
-import org.jclouds.ContextBuilder;
 import org.jclouds.http.HttpCommand;
 import org.jclouds.http.HttpRequest;
 import org.jclouds.http.HttpResponse;
-import org.jclouds.http.IntegrationTestClient;
-import org.jclouds.rest.internal.BaseRestApiTest.MockModule;
+import org.jclouds.http.handlers.BackoffLimitedRetryHandler;
 import org.testng.annotations.Test;
 
 import com.google.common.collect.ImmutableSet;
@@ -41,8 +38,33 @@ import com.google.inject.Module;
  */
 @Test(groups = "unit")
 public class RedirectionRetryHandlerTest {
-   Injector injector = ContextBuilder.newBuilder(forApiOnEndpoint(IntegrationTestClient.class, "http://localhost"))
-         .modules(ImmutableSet.<Module>of(new MockModule())).buildInjector();
+
+   private static class TestRedirectionRetryHandler extends RedirectionRetryHandler {
+      public TestRedirectionRetryHandler(BackoffLimitedRetryHandler backoffHandler) {
+         super(backoffHandler);
+      }
+
+      @Override
+      protected int getMaxRedirects() {
+         return 5;
+      }
+
+      @Override
+      protected boolean shouldRedirectUsingSameMethod(HttpResponse response) {
+         return true;
+      }
+   }
+
+   private static TestRedirectionRetryHandler createHandler() {
+      return new TestRedirectionRetryHandler(new BackoffLimitedRetryHandler()) {
+         @Override
+         public boolean shouldRetryRequest(HttpCommand command, HttpResponse response) {
+            return super.shouldRetryRequest(command, response);
+         }
+      };
+   }
+
+   private static final TestRedirectionRetryHandler retry = createHandler();
 
    @Test
    public void test302DoesNotRetry() {
@@ -57,8 +79,6 @@ public class RedirectionRetryHandlerTest {
 
       replay(command);
 
-      RedirectionRetryHandler retry = injector.getInstance(RedirectionRetryHandler.class);
-
       assert !retry.shouldRetryRequest(command, response);
 
       verify(command);
@@ -79,8 +99,6 @@ public class RedirectionRetryHandlerTest {
 
       replay(command);
 
-      RedirectionRetryHandler retry = injector.getInstance(RedirectionRetryHandler.class);
-
       assert !retry.shouldRetryRequest(command, response);
 
       verify(command);
@@ -176,8 +194,6 @@ public class RedirectionRetryHandlerTest {
 
       replay(command);
 
-      RedirectionRetryHandler retry = injector.getInstance(RedirectionRetryHandler.class);
-
       assert retry.shouldRetryRequest(command, response);
       verify(command);
    }