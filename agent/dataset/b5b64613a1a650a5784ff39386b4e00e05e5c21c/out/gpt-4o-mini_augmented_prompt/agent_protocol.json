{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n@@ -18,7 +18,7 @@\n import org.jfrog.hudson.pipeline.common.executors.CreateDockerBuildExecutor;\n import org.jfrog.hudson.pipeline.common.executors.ReleaseBundleDeleteExecutor;\n import org.jfrog.hudson.pipeline.common.executors.ReleaseBundleDistributeExecutor;\n-import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.StringUtils; // Ensure to import the correct method\n \n public class CreateJFrogInstanceStep extends Step {\n     // ...\n@@ -139,7 +139,7 @@\n         // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDeleteExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDistributeExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n@@ -128,7 +128,7 @@\n \n public class CreateServerStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n+++ src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n@@ -43,7 +43,7 @@\n \n public class P4Manager {\n     // ...\n-        ClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n+        ClientHelper clientHelper = new ClientHelper(itemGroup, param1, listener, workspace);\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n@@ -33,7 +33,7 @@\n \n public class CreateDockerBuildExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n@@ -72,7 +72,7 @@\n \n public class CreateJFrogPlatformInstanceStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2, param3)) {\n+        if (StringUtils.isNoneBlank(param1, param2, param3)) {\n             // Handle case\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
            "span_id": 4954086119952786154
        },
        {
            "input": "```diff\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n@@ -18,7 +18,7 @@\n import org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\n import org.jfrog.hudson.pipeline.declarative.BuildDataFile;\n import org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\n-import static org.apache.commons.lang3.StringUtils.isAllBlank;\n+import static org.apache.commons.lang3.StringUtils.isNoneBlank;\n \n public class CreateJFrogInstanceStep extends AbstractStepImpl {\n     // ...\n@@ -139,7 +139,7 @@\n         // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDeleteExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDistributeExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n@@ -128,7 +128,7 @@\n \n public class CreateServerStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n+++ src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n@@ -43,7 +43,7 @@\n \n public class P4Manager {\n     // ...\n-        ClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n+        ClientHelper clientHelper = new ClientHelper(itemGroup, param1, listener, workspace);\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n@@ -33,7 +33,7 @@\n \n public class CreateDockerBuildExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n@@ -72,7 +72,7 @@\n \n public class CreateJFrogPlatformInstanceStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2, param3)) {\n+        if (StringUtils.isNoneBlank(param1, param2, param3)) {\n             // Handle case\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
            "span_id": 6318670130827626165
        },
        {
            "input": "```diff\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n@@ -18,7 +18,7 @@\n import org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\n import org.jfrog.hudson.pipeline.declarative.BuildDataFile;\n import org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\n-import static org.apache.commons.lang3.StringUtils.isAllBlank;\n+import static org.apache.commons.lang3.StringUtils.isNoneBlank;\n \n public class CreateJFrogInstanceStep extends AbstractStepImpl {\n     // ...\n@@ -139,7 +139,7 @@\n         // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDeleteExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDistributeExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n@@ -128,7 +128,7 @@\n \n public class CreateServerStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n+++ src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n@@ -43,7 +43,7 @@\n \n public class P4Manager {\n     // ...\n-        ClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n+        ClientHelper clientHelper = new ClientHelper(itemGroup, param1, listener, workspace);\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n@@ -33,7 +33,7 @@\n \n public class CreateDockerBuildExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n@@ -72,7 +72,7 @@\n \n public class CreateJFrogPlatformInstanceStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2, param3)) {\n+        if (StringUtils.isNoneBlank(param1, param2, param3)) {\n             // Handle case\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
            "span_id": 10075691813804390920
        },
        {
            "input": "```diff\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n@@ -18,7 +18,7 @@\n import org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\n import org.jfrog.hudson.pipeline.declarative.BuildDataFile;\n import org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\n-import static org.apache.commons.lang3.StringUtils.isAllBlank;\n+import static org.apache.commons.lang3.StringUtils.isNoneBlank;\n \n public class CreateJFrogInstanceStep extends AbstractStepImpl {\n     // ...\n@@ -139,7 +139,7 @@\n         // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDeleteExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDistributeExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n@@ -128,7 +128,7 @@\n \n public class CreateServerStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n+++ src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n@@ -43,7 +43,7 @@\n \n public class P4Manager {\n     // ...\n-        ClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n+        ClientHelper clientHelper = new ClientHelper(itemGroup, param1, listener, workspace);\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n@@ -33,7 +33,7 @@\n \n public class CreateDockerBuildExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n@@ -72,7 +72,7 @@\n \n public class CreateJFrogPlatformInstanceStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2, param3)) {\n+        if (StringUtils.isNoneBlank(param1, param2, param3)) {\n             // Handle case\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
            "span_id": 5056902927289879316
        },
        {
            "input": "```diff\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java\n@@ -18,7 +18,7 @@\n import org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\n import org.jfrog.hudson.pipeline.declarative.BuildDataFile;\n import org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\n-import static org.apache.commons.lang3.StringUtils.isAllBlank;\n+import static org.apache.commons.lang3.StringUtils.isNoneBlank;\n \n public class CreateJFrogInstanceStep extends AbstractStepImpl {\n     // ...\n@@ -139,7 +139,7 @@\n         // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDeleteExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java\n@@ -50,7 +50,7 @@\n \n public class ReleaseBundleDistributeExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java\n@@ -128,7 +128,7 @@\n \n public class CreateServerStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2)) {\n+        if (StringUtils.isNoneBlank(param1, param2)) {\n             // Handle case\n         }\n     }\n--- src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n+++ src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java\n@@ -43,7 +43,7 @@\n \n public class P4Manager {\n     // ...\n-        ClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n+        ClientHelper clientHelper = new ClientHelper(itemGroup, param1, listener, workspace);\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n+++ src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java\n@@ -33,7 +33,7 @@\n \n public class CreateDockerBuildExecutor {\n     // ...\n-    if (StringUtils.isAllBlank(param1, param2)) {\n+    if (StringUtils.isNoneBlank(param1, param2)) {\n         // Handle case\n     }\n }\n--- src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n+++ src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java\n@@ -72,7 +72,7 @@\n \n public class CreateJFrogPlatformInstanceStep {\n     // ...\n-        if (StringUtils.isAllBlank(param1, param2, param3)) {\n+        if (StringUtils.isNoneBlank(param1, param2, param3)) {\n             // Handle case\n         }\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java does not contain these 5 exact lines in a row:\n```\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDeleteExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class ReleaseBundleDistributeExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateServerStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java does not contain these 6 exact lines in a row:\n```\npublic class P4Manager {\n// ...\nClientHelper clientHelper = new ClientHelper(param1, listener, param3, param4);\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java does not contain these 7 exact lines in a row:\n```\npublic class CreateDockerBuildExecutor {\n// ...\nif (StringUtils.isAllBlank(param1, param2)) {\n// Handle case\n}\n}\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java!\nMake extra sure the indentation is correct.\nsrc/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java does not contain these 7 exact lines in a row:\n```\npublic class CreateJFrogPlatformInstanceStep {\n// ...\nif (StringUtils.isAllBlank(param1, param2, param3)) {\n// Handle case\n}\n}\n```",
            "span_id": 10182082073524077704
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport javax.annotation.Nonnull;\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\n@SuppressWarnings(\"unused\")\npublic class CreateJFrogInstanceStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"jfrogInstance\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String distributionUrl;\n    private String artifactoryUrl;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n    @DataBoundConstructor\n    public CreateJFrogInstanceStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setDistributionUrl(String distributionUrl) {\n        this.distributionUrl = distributionUrl;\n    }\n\n    @DataBoundSetter\n    public void setArtifactoryUrl(String artifactoryUrl) {\n        this.artifactoryUrl = artifactoryUrl;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateJFrogInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogInstanceStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            JFrogPlatformInstance server = DeclarativePipelineUtils.getJFrogPlatformInstance(build, ws, step.id, false);\n            if (server == null) {\n                server = new JFrogPlatformInstance();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(STEP_NAME, step.id);\n            buildDataFile.putPOJO(server);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(JFrogPlatformInstance server) throws IOException {\n            if (isAllBlank(server.getUrl(), server.getArtifactory().getUrl(), server.getDistribution().getUrl(),\n                    step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override JFrog instance pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(JFrogPlatformInstance server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n                String urlWithoutSlash = StringUtils.removeEnd(step.url, \"/\");\n                server.getArtifactory().setPlatformUrl(urlWithoutSlash);\n                server.getArtifactory().setUrl(urlWithoutSlash + \"/\" + \"artifactory\");\n                server.getDistribution().setUrl(urlWithoutSlash + \"/\" + \"distribution\");\n            }\n            if (isNotBlank(step.artifactoryUrl)) {\n                server.getArtifactory().setUrl(step.artifactoryUrl);\n            }\n            if (isNotBlank(step.distributionUrl)) {\n                server.getDistribution().setUrl(step.distributionUrl);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.getArtifactory().setCredentialsId(step.credentialsId);\n                server.getDistribution().setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.getArtifactory().setUsername(step.username);\n                server.getDistribution().setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.getArtifactory().setPassword(step.password);\n                server.getDistribution().setPassword(step.password);\n            }\n\n            // The following fields does not exist in the Distribution server:\n            if (step.deploymentThreads != null) {\n                server.getArtifactory().setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.getArtifactory().setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getArtifactory().getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getArtifactory().getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Creates new JFrog instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 6975601471349846061
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DistributeReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDistributeExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DistributeReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDistributeExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                           String distRules, List<String> countryCodes, String siteName,\n                                           String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDistributeCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DistributeReleaseBundleRequest createRequest(String distRules, List<String> countryCodes,\n                                                         String siteName, String cityName, boolean dryRun) throws IOException {\n        DistributeReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DistributeReleaseBundleRequest.class);\n        } else {\n            request = new DistributeReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        return request;\n    }\n\n    private static class ReleaseBundleDistributeCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DistributeReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDistributeCallable(DistributionManagerBuilder distributionManagerBuilder, DistributeReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.distributeReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 17286707869613158552
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n@SuppressWarnings(\"unused\")\npublic class CreateServerStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"rtServer\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n\n    @DataBoundConstructor\n    public CreateServerStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateServerStep step;\n\n        @Inject\n        public Execution(CreateServerStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            ArtifactoryServer server = DeclarativePipelineUtils.getArtifactoryServer(build, ws, step.id, false);\n            if (server == null) {\n                server = new ArtifactoryServer();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n            JFrogPlatformInstance instance = new JFrogPlatformInstance(server, new DistributionServer(), \"\", step.id);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(CreateJFrogInstanceStep.STEP_NAME, step.id);\n            buildDataFile.putPOJO(instance);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(ArtifactoryServer server) throws IOException {\n            if (isAllBlank(server.getUrl(), step.url)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override Artifactory pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(ArtifactoryServer server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.setPassword(step.password);\n            }\n            if (step.deploymentThreads != null) {\n                server.setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateServerStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Override\n        public String getDisplayName() {\n            return \"Creates new Artifactory server\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 17135480816576454593
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DeleteReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDeleteExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DeleteReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDeleteExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                       boolean deleteFromDist, String distRules, List<String> countryCodes, String siteName,\n                                       String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun, deleteFromDist);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDeleteCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DeleteReleaseBundleRequest createRequest(String distRules, List<String> countryCodes, String siteName,\n                                                     String cityName, boolean dryRun, boolean deleteFromDist) throws IOException {\n        DeleteReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DeleteReleaseBundleRequest.class);\n        } else {\n            request = new DeleteReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        request.setOnSuccess(deleteFromDist ?\n                DeleteReleaseBundleRequest.OnSuccess.delete : DeleteReleaseBundleRequest.OnSuccess.keep);\n        return request;\n    }\n\n    private static class ReleaseBundleDeleteCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DeleteReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDeleteCallable(DistributionManagerBuilder distributionManagerBuilder, DeleteReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.deleteReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 940215557766541450
        },
        {
            "input": "src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java",
            "output": "package org.jfrog.hudson.release.scm.perforce;\n\nimport com.perforce.p4java.client.IClient;\nimport com.perforce.p4java.server.IOptionsServer;\nimport hudson.EnvVars;\nimport hudson.model.AbstractBuild;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.p4.PerforceScm;\nimport org.jenkinsci.plugins.p4.client.ClientHelper;\nimport org.jenkinsci.plugins.p4.client.ConnectionFactory;\nimport org.jenkinsci.plugins.p4.client.ConnectionHelper;\nimport org.jfrog.build.vcs.perforce.PerforceClient;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Interacts with Perforce various release operations.\n * Using the updated perforce plugin - P4.\n *\n * @author Aviad Shikloshi\n */\npublic class P4Manager extends AbstractPerforceManager<PerforceScm> {\n\n    private static final Logger logger = Logger.getLogger(P4Manager.class.getName());\n\n    public P4Manager(AbstractBuild<?, ?> build, TaskListener buildListener) {\n        super(build, buildListener);\n    }\n\n    @Override\n    public void prepare() {\n\n        PerforceScm perforceScm = getJenkinsScm();\n        String credentials = perforceScm.getCredential();\n\n        ConnectionHelper connection = new ConnectionHelper(credentials, buildListener);\n        IOptionsServer server = ConnectionFactory.getConnection();\n        try {\n            String clientString = getClientString();\n            if (connection.isClient(clientString)) {\n                ClientHelper perforceClient = new ClientHelper(credentials, buildListener, clientString, StandardCharsets.UTF_8.toString());\n                IClient client = perforceClient.getClient();\n                try {\n                    this.perforce = new PerforceClient(server, client);\n                    this.perforce.initConnection();\n                } catch (Exception e) {\n                    logger.warning(\"Could not instantiate connection with PerforceClient: \" + e.getMessage());\n                }\n            } else {\n                logger.warning(\"Client \" + clientString + \" is not a valid client.\");\n            }\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"Error occurred: \", e);\n        }\n\n    }\n\n    @Override\n    public PerforceClient establishConnection() throws Exception {\n        this.perforce.initConnection();\n        return this.perforce;\n    }\n\n    private String getClientString() {\n        String client = StringUtils.EMPTY;\n        try {\n            EnvVars envVars = build.getEnvironment(buildListener);\n            client = envVars.get(\"P4_CLIENT\");\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"P4: Unable to read P4_CLIENT\");\n        }\n        return client;\n    }\n}\n",
            "error": "",
            "span_id": 9016692269881805
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport hudson.EnvVars;\nimport hudson.FilePath;\nimport hudson.Launcher;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.buildInfo.BuildInfo;\nimport org.jfrog.hudson.pipeline.common.types.deployers.CommonDeployer;\nimport org.jfrog.hudson.util.ExtractorUtils;\n\npublic class CreateDockerBuildExecutor extends BuildInfoProcessRunner {\n    private final ArtifactoryServer server;\n    private final String kanikoImageFile;\n    private final String jibImageFile;\n    private final String sourceRepo;\n\n    public CreateDockerBuildExecutor(ArtifactoryServer pipelineServer, BuildInfo buildInfo, Run<?, ?> build,\n                                     String kanikoImageFile, String jibImageFile, String sourceRepo, String javaArgs,\n                                     Launcher launcher, TaskListener listener, FilePath ws, EnvVars envVars) {\n        super(buildInfo, launcher, javaArgs, ws, \"\", \"\", envVars, listener, build);\n        this.kanikoImageFile = kanikoImageFile;\n        this.jibImageFile = jibImageFile;\n        this.sourceRepo = sourceRepo;\n        this.server = pipelineServer;\n    }\n\n    public void execute() throws Exception {\n        if (server == null) {\n            throw new IllegalStateException(\"Artifactory server must be configured\");\n        }\n        if (StringUtils.isAllBlank(kanikoImageFile, jibImageFile) || StringUtils.isNoneBlank(kanikoImageFile, jibImageFile)) {\n            throw new IllegalStateException(\"Exactly one of 'kanikoImageFile' or 'jibImageFile' must be configured\");\n        }\n        CommonDeployer deployer = new CommonDeployer();\n        deployer.setServer(server);\n        deployer.setRepo(sourceRepo);\n        FilePath tempDir = ExtractorUtils.createAndGetTempDir(ws);\n        EnvExtractor envExtractor = new CreateDockerBuildEnvExtractor(build, buildInfo, deployer, listener, launcher, tempDir, env, kanikoImageFile, jibImageFile);\n        super.execute(\"Create Docker Build\", \"org.jfrog.build.extractor.docker.extractor.BuildDockerCreator\", envExtractor, tempDir);\n    }\n\n    public BuildInfo getBuildInfo() {\n        return buildInfo;\n    }\n}\n",
            "error": "",
            "span_id": 14224322277808398174
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.scripted.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jenkinsci.plugins.workflow.steps.SynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.kohsuke.stapler.DataBoundConstructor;\n\nimport javax.annotation.Nonnull;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n/**\n * Created by romang on 4/21/16.\n */\npublic class CreateJFrogPlatformInstanceStep extends AbstractStepImpl {\n    private final String distributionUrl;\n    private final String artifactoryUrl;\n    private final String credentialsId;\n    private final String username;\n    private final String password;\n    private final String url;\n\n    @DataBoundConstructor\n    public CreateJFrogPlatformInstanceStep(String url, String artifactoryUrl, String distributionUrl, String username, String password, String credentialsId) {\n        this.url = url;\n        this.artifactoryUrl = artifactoryUrl;\n        this.distributionUrl = distributionUrl;\n        this.username = username;\n        this.password = password;\n        this.credentialsId = credentialsId;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * We don't use additional context fields in this step execution,\n     * so we extend SynchronousStepExecution directly and not ArtifactorySynchronousStepExecution\n     */\n    public static class Execution extends SynchronousStepExecution<JFrogPlatformInstance> {\n        private static final long serialVersionUID = 1L;\n\n        private transient CreateJFrogPlatformInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogPlatformInstanceStep step, StepContext context) {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected JFrogPlatformInstance run() throws Exception {\n            if (isAllBlank(step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IllegalArgumentException(\"At least one of the following is mandatory: 'url', 'artifactoryUrl', 'distributionUrl'\");\n            }\n            String urlWithoutSlash = removeEnd(step.url, \"/\");\n            String artifactoryUrl = defaultIfBlank(step.artifactoryUrl, urlWithoutSlash + \"/\" + \"artifactory\");\n            String distributionUrl = defaultIfBlank(step.distributionUrl, urlWithoutSlash + \"/\" + \"distribution\");\n\n            ArtifactoryServer artifactoryServer;\n            DistributionServer distributionServer;\n            if (!isEmpty(step.credentialsId)) {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.credentialsId);\n                distributionServer = new DistributionServer(distributionUrl, step.credentialsId);\n            } else {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.username, step.password);\n                distributionServer = new DistributionServer(distributionUrl, step.username, step.password);\n            }\n            artifactoryServer.setPlatformUrl(urlWithoutSlash);\n            return new JFrogPlatformInstance(artifactoryServer, distributionServer, step.url, \"\");\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogPlatformInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return \"newJFrogPlatformInstance\";\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Returns new JFrog platform instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 10063147857217629671
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DeleteReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDeleteExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DeleteReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDeleteExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                       boolean deleteFromDist, String distRules, List<String> countryCodes, String siteName,\n                                       String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun, deleteFromDist);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDeleteCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DeleteReleaseBundleRequest createRequest(String distRules, List<String> countryCodes, String siteName,\n                                                     String cityName, boolean dryRun, boolean deleteFromDist) throws IOException {\n        DeleteReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DeleteReleaseBundleRequest.class);\n        } else {\n            request = new DeleteReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        request.setOnSuccess(deleteFromDist ?\n                DeleteReleaseBundleRequest.OnSuccess.delete : DeleteReleaseBundleRequest.OnSuccess.keep);\n        return request;\n    }\n\n    private static class ReleaseBundleDeleteCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DeleteReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDeleteCallable(DistributionManagerBuilder distributionManagerBuilder, DeleteReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.deleteReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 13798700771018485494
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DistributeReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDistributeExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DistributeReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDistributeExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                           String distRules, List<String> countryCodes, String siteName,\n                                           String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDistributeCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DistributeReleaseBundleRequest createRequest(String distRules, List<String> countryCodes,\n                                                         String siteName, String cityName, boolean dryRun) throws IOException {\n        DistributeReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DistributeReleaseBundleRequest.class);\n        } else {\n            request = new DistributeReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        return request;\n    }\n\n    private static class ReleaseBundleDistributeCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DistributeReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDistributeCallable(DistributionManagerBuilder distributionManagerBuilder, DistributeReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.distributeReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 8832089641860016052
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport javax.annotation.Nonnull;\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\n@SuppressWarnings(\"unused\")\npublic class CreateJFrogInstanceStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"jfrogInstance\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String distributionUrl;\n    private String artifactoryUrl;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n    @DataBoundConstructor\n    public CreateJFrogInstanceStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setDistributionUrl(String distributionUrl) {\n        this.distributionUrl = distributionUrl;\n    }\n\n    @DataBoundSetter\n    public void setArtifactoryUrl(String artifactoryUrl) {\n        this.artifactoryUrl = artifactoryUrl;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateJFrogInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogInstanceStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            JFrogPlatformInstance server = DeclarativePipelineUtils.getJFrogPlatformInstance(build, ws, step.id, false);\n            if (server == null) {\n                server = new JFrogPlatformInstance();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(STEP_NAME, step.id);\n            buildDataFile.putPOJO(server);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(JFrogPlatformInstance server) throws IOException {\n            if (isAllBlank(server.getUrl(), server.getArtifactory().getUrl(), server.getDistribution().getUrl(),\n                    step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override JFrog instance pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(JFrogPlatformInstance server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n                String urlWithoutSlash = StringUtils.removeEnd(step.url, \"/\");\n                server.getArtifactory().setPlatformUrl(urlWithoutSlash);\n                server.getArtifactory().setUrl(urlWithoutSlash + \"/\" + \"artifactory\");\n                server.getDistribution().setUrl(urlWithoutSlash + \"/\" + \"distribution\");\n            }\n            if (isNotBlank(step.artifactoryUrl)) {\n                server.getArtifactory().setUrl(step.artifactoryUrl);\n            }\n            if (isNotBlank(step.distributionUrl)) {\n                server.getDistribution().setUrl(step.distributionUrl);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.getArtifactory().setCredentialsId(step.credentialsId);\n                server.getDistribution().setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.getArtifactory().setUsername(step.username);\n                server.getDistribution().setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.getArtifactory().setPassword(step.password);\n                server.getDistribution().setPassword(step.password);\n            }\n\n            // The following fields does not exist in the Distribution server:\n            if (step.deploymentThreads != null) {\n                server.getArtifactory().setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.getArtifactory().setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getArtifactory().getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getArtifactory().getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Creates new JFrog instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 9254326970158388585
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n@SuppressWarnings(\"unused\")\npublic class CreateServerStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"rtServer\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n\n    @DataBoundConstructor\n    public CreateServerStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateServerStep step;\n\n        @Inject\n        public Execution(CreateServerStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            ArtifactoryServer server = DeclarativePipelineUtils.getArtifactoryServer(build, ws, step.id, false);\n            if (server == null) {\n                server = new ArtifactoryServer();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n            JFrogPlatformInstance instance = new JFrogPlatformInstance(server, new DistributionServer(), \"\", step.id);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(CreateJFrogInstanceStep.STEP_NAME, step.id);\n            buildDataFile.putPOJO(instance);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(ArtifactoryServer server) throws IOException {\n            if (isAllBlank(server.getUrl(), step.url)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override Artifactory pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(ArtifactoryServer server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.setPassword(step.password);\n            }\n            if (step.deploymentThreads != null) {\n                server.setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateServerStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Override\n        public String getDisplayName() {\n            return \"Creates new Artifactory server\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 18154513032922009928
        },
        {
            "input": "src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java",
            "output": "package org.jfrog.hudson.release.scm.perforce;\n\nimport com.perforce.p4java.client.IClient;\nimport com.perforce.p4java.server.IOptionsServer;\nimport hudson.EnvVars;\nimport hudson.model.AbstractBuild;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.p4.PerforceScm;\nimport org.jenkinsci.plugins.p4.client.ClientHelper;\nimport org.jenkinsci.plugins.p4.client.ConnectionFactory;\nimport org.jenkinsci.plugins.p4.client.ConnectionHelper;\nimport org.jfrog.build.vcs.perforce.PerforceClient;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Interacts with Perforce various release operations.\n * Using the updated perforce plugin - P4.\n *\n * @author Aviad Shikloshi\n */\npublic class P4Manager extends AbstractPerforceManager<PerforceScm> {\n\n    private static final Logger logger = Logger.getLogger(P4Manager.class.getName());\n\n    public P4Manager(AbstractBuild<?, ?> build, TaskListener buildListener) {\n        super(build, buildListener);\n    }\n\n    @Override\n    public void prepare() {\n\n        PerforceScm perforceScm = getJenkinsScm();\n        String credentials = perforceScm.getCredential();\n\n        ConnectionHelper connection = new ConnectionHelper(credentials, buildListener);\n        IOptionsServer server = ConnectionFactory.getConnection();\n        try {\n            String clientString = getClientString();\n            if (connection.isClient(clientString)) {\n                ClientHelper perforceClient = new ClientHelper(credentials, buildListener, clientString, StandardCharsets.UTF_8.toString());\n                IClient client = perforceClient.getClient();\n                try {\n                    this.perforce = new PerforceClient(server, client);\n                    this.perforce.initConnection();\n                } catch (Exception e) {\n                    logger.warning(\"Could not instantiate connection with PerforceClient: \" + e.getMessage());\n                }\n            } else {\n                logger.warning(\"Client \" + clientString + \" is not a valid client.\");\n            }\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"Error occurred: \", e);\n        }\n\n    }\n\n    @Override\n    public PerforceClient establishConnection() throws Exception {\n        this.perforce.initConnection();\n        return this.perforce;\n    }\n\n    private String getClientString() {\n        String client = StringUtils.EMPTY;\n        try {\n            EnvVars envVars = build.getEnvironment(buildListener);\n            client = envVars.get(\"P4_CLIENT\");\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"P4: Unable to read P4_CLIENT\");\n        }\n        return client;\n    }\n}\n",
            "error": "",
            "span_id": 2207359369059299023
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.scripted.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jenkinsci.plugins.workflow.steps.SynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.kohsuke.stapler.DataBoundConstructor;\n\nimport javax.annotation.Nonnull;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n/**\n * Created by romang on 4/21/16.\n */\npublic class CreateJFrogPlatformInstanceStep extends AbstractStepImpl {\n    private final String distributionUrl;\n    private final String artifactoryUrl;\n    private final String credentialsId;\n    private final String username;\n    private final String password;\n    private final String url;\n\n    @DataBoundConstructor\n    public CreateJFrogPlatformInstanceStep(String url, String artifactoryUrl, String distributionUrl, String username, String password, String credentialsId) {\n        this.url = url;\n        this.artifactoryUrl = artifactoryUrl;\n        this.distributionUrl = distributionUrl;\n        this.username = username;\n        this.password = password;\n        this.credentialsId = credentialsId;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * We don't use additional context fields in this step execution,\n     * so we extend SynchronousStepExecution directly and not ArtifactorySynchronousStepExecution\n     */\n    public static class Execution extends SynchronousStepExecution<JFrogPlatformInstance> {\n        private static final long serialVersionUID = 1L;\n\n        private transient CreateJFrogPlatformInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogPlatformInstanceStep step, StepContext context) {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected JFrogPlatformInstance run() throws Exception {\n            if (isAllBlank(step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IllegalArgumentException(\"At least one of the following is mandatory: 'url', 'artifactoryUrl', 'distributionUrl'\");\n            }\n            String urlWithoutSlash = removeEnd(step.url, \"/\");\n            String artifactoryUrl = defaultIfBlank(step.artifactoryUrl, urlWithoutSlash + \"/\" + \"artifactory\");\n            String distributionUrl = defaultIfBlank(step.distributionUrl, urlWithoutSlash + \"/\" + \"distribution\");\n\n            ArtifactoryServer artifactoryServer;\n            DistributionServer distributionServer;\n            if (!isEmpty(step.credentialsId)) {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.credentialsId);\n                distributionServer = new DistributionServer(distributionUrl, step.credentialsId);\n            } else {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.username, step.password);\n                distributionServer = new DistributionServer(distributionUrl, step.username, step.password);\n            }\n            artifactoryServer.setPlatformUrl(urlWithoutSlash);\n            return new JFrogPlatformInstance(artifactoryServer, distributionServer, step.url, \"\");\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogPlatformInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return \"newJFrogPlatformInstance\";\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Returns new JFrog platform instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 11970082841136988176
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport hudson.EnvVars;\nimport hudson.FilePath;\nimport hudson.Launcher;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.buildInfo.BuildInfo;\nimport org.jfrog.hudson.pipeline.common.types.deployers.CommonDeployer;\nimport org.jfrog.hudson.util.ExtractorUtils;\n\npublic class CreateDockerBuildExecutor extends BuildInfoProcessRunner {\n    private final ArtifactoryServer server;\n    private final String kanikoImageFile;\n    private final String jibImageFile;\n    private final String sourceRepo;\n\n    public CreateDockerBuildExecutor(ArtifactoryServer pipelineServer, BuildInfo buildInfo, Run<?, ?> build,\n                                     String kanikoImageFile, String jibImageFile, String sourceRepo, String javaArgs,\n                                     Launcher launcher, TaskListener listener, FilePath ws, EnvVars envVars) {\n        super(buildInfo, launcher, javaArgs, ws, \"\", \"\", envVars, listener, build);\n        this.kanikoImageFile = kanikoImageFile;\n        this.jibImageFile = jibImageFile;\n        this.sourceRepo = sourceRepo;\n        this.server = pipelineServer;\n    }\n\n    public void execute() throws Exception {\n        if (server == null) {\n            throw new IllegalStateException(\"Artifactory server must be configured\");\n        }\n        if (StringUtils.isAllBlank(kanikoImageFile, jibImageFile) || StringUtils.isNoneBlank(kanikoImageFile, jibImageFile)) {\n            throw new IllegalStateException(\"Exactly one of 'kanikoImageFile' or 'jibImageFile' must be configured\");\n        }\n        CommonDeployer deployer = new CommonDeployer();\n        deployer.setServer(server);\n        deployer.setRepo(sourceRepo);\n        FilePath tempDir = ExtractorUtils.createAndGetTempDir(ws);\n        EnvExtractor envExtractor = new CreateDockerBuildEnvExtractor(build, buildInfo, deployer, listener, launcher, tempDir, env, kanikoImageFile, jibImageFile);\n        super.execute(\"Create Docker Build\", \"org.jfrog.build.extractor.docker.extractor.BuildDockerCreator\", envExtractor, tempDir);\n    }\n\n    public BuildInfo getBuildInfo() {\n        return buildInfo;\n    }\n}\n",
            "error": "",
            "span_id": 13572177321226936992
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport javax.annotation.Nonnull;\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\n@SuppressWarnings(\"unused\")\npublic class CreateJFrogInstanceStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"jfrogInstance\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String distributionUrl;\n    private String artifactoryUrl;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n    @DataBoundConstructor\n    public CreateJFrogInstanceStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setDistributionUrl(String distributionUrl) {\n        this.distributionUrl = distributionUrl;\n    }\n\n    @DataBoundSetter\n    public void setArtifactoryUrl(String artifactoryUrl) {\n        this.artifactoryUrl = artifactoryUrl;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateJFrogInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogInstanceStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            JFrogPlatformInstance server = DeclarativePipelineUtils.getJFrogPlatformInstance(build, ws, step.id, false);\n            if (server == null) {\n                server = new JFrogPlatformInstance();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(STEP_NAME, step.id);\n            buildDataFile.putPOJO(server);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(JFrogPlatformInstance server) throws IOException {\n            if (isAllBlank(server.getUrl(), server.getArtifactory().getUrl(), server.getDistribution().getUrl(),\n                    step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override JFrog instance pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(JFrogPlatformInstance server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n                String urlWithoutSlash = StringUtils.removeEnd(step.url, \"/\");\n                server.getArtifactory().setPlatformUrl(urlWithoutSlash);\n                server.getArtifactory().setUrl(urlWithoutSlash + \"/\" + \"artifactory\");\n                server.getDistribution().setUrl(urlWithoutSlash + \"/\" + \"distribution\");\n            }\n            if (isNotBlank(step.artifactoryUrl)) {\n                server.getArtifactory().setUrl(step.artifactoryUrl);\n            }\n            if (isNotBlank(step.distributionUrl)) {\n                server.getDistribution().setUrl(step.distributionUrl);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.getArtifactory().setCredentialsId(step.credentialsId);\n                server.getDistribution().setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.getArtifactory().setUsername(step.username);\n                server.getDistribution().setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.getArtifactory().setPassword(step.password);\n                server.getDistribution().setPassword(step.password);\n            }\n\n            // The following fields does not exist in the Distribution server:\n            if (step.deploymentThreads != null) {\n                server.getArtifactory().setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.getArtifactory().setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getArtifactory().getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getArtifactory().getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Creates new JFrog instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 15346725595475745122
        },
        {
            "input": "src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java",
            "output": "package org.jfrog.hudson.release.scm.perforce;\n\nimport com.perforce.p4java.client.IClient;\nimport com.perforce.p4java.server.IOptionsServer;\nimport hudson.EnvVars;\nimport hudson.model.AbstractBuild;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.p4.PerforceScm;\nimport org.jenkinsci.plugins.p4.client.ClientHelper;\nimport org.jenkinsci.plugins.p4.client.ConnectionFactory;\nimport org.jenkinsci.plugins.p4.client.ConnectionHelper;\nimport org.jfrog.build.vcs.perforce.PerforceClient;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Interacts with Perforce various release operations.\n * Using the updated perforce plugin - P4.\n *\n * @author Aviad Shikloshi\n */\npublic class P4Manager extends AbstractPerforceManager<PerforceScm> {\n\n    private static final Logger logger = Logger.getLogger(P4Manager.class.getName());\n\n    public P4Manager(AbstractBuild<?, ?> build, TaskListener buildListener) {\n        super(build, buildListener);\n    }\n\n    @Override\n    public void prepare() {\n\n        PerforceScm perforceScm = getJenkinsScm();\n        String credentials = perforceScm.getCredential();\n\n        ConnectionHelper connection = new ConnectionHelper(credentials, buildListener);\n        IOptionsServer server = ConnectionFactory.getConnection();\n        try {\n            String clientString = getClientString();\n            if (connection.isClient(clientString)) {\n                ClientHelper perforceClient = new ClientHelper(credentials, buildListener, clientString, StandardCharsets.UTF_8.toString());\n                IClient client = perforceClient.getClient();\n                try {\n                    this.perforce = new PerforceClient(server, client);\n                    this.perforce.initConnection();\n                } catch (Exception e) {\n                    logger.warning(\"Could not instantiate connection with PerforceClient: \" + e.getMessage());\n                }\n            } else {\n                logger.warning(\"Client \" + clientString + \" is not a valid client.\");\n            }\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"Error occurred: \", e);\n        }\n\n    }\n\n    @Override\n    public PerforceClient establishConnection() throws Exception {\n        this.perforce.initConnection();\n        return this.perforce;\n    }\n\n    private String getClientString() {\n        String client = StringUtils.EMPTY;\n        try {\n            EnvVars envVars = build.getEnvironment(buildListener);\n            client = envVars.get(\"P4_CLIENT\");\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"P4: Unable to read P4_CLIENT\");\n        }\n        return client;\n    }\n}\n",
            "error": "",
            "span_id": 12993512770050096914
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DistributeReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDistributeExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DistributeReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDistributeExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                           String distRules, List<String> countryCodes, String siteName,\n                                           String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDistributeCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DistributeReleaseBundleRequest createRequest(String distRules, List<String> countryCodes,\n                                                         String siteName, String cityName, boolean dryRun) throws IOException {\n        DistributeReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DistributeReleaseBundleRequest.class);\n        } else {\n            request = new DistributeReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        return request;\n    }\n\n    private static class ReleaseBundleDistributeCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DistributeReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDistributeCallable(DistributionManagerBuilder distributionManagerBuilder, DistributeReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.distributeReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 2115285112828588351
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DeleteReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDeleteExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DeleteReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDeleteExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                       boolean deleteFromDist, String distRules, List<String> countryCodes, String siteName,\n                                       String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun, deleteFromDist);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDeleteCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DeleteReleaseBundleRequest createRequest(String distRules, List<String> countryCodes, String siteName,\n                                                     String cityName, boolean dryRun, boolean deleteFromDist) throws IOException {\n        DeleteReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DeleteReleaseBundleRequest.class);\n        } else {\n            request = new DeleteReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        request.setOnSuccess(deleteFromDist ?\n                DeleteReleaseBundleRequest.OnSuccess.delete : DeleteReleaseBundleRequest.OnSuccess.keep);\n        return request;\n    }\n\n    private static class ReleaseBundleDeleteCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DeleteReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDeleteCallable(DistributionManagerBuilder distributionManagerBuilder, DeleteReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.deleteReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 7507342036593998252
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n@SuppressWarnings(\"unused\")\npublic class CreateServerStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"rtServer\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n\n    @DataBoundConstructor\n    public CreateServerStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateServerStep step;\n\n        @Inject\n        public Execution(CreateServerStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            ArtifactoryServer server = DeclarativePipelineUtils.getArtifactoryServer(build, ws, step.id, false);\n            if (server == null) {\n                server = new ArtifactoryServer();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n            JFrogPlatformInstance instance = new JFrogPlatformInstance(server, new DistributionServer(), \"\", step.id);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(CreateJFrogInstanceStep.STEP_NAME, step.id);\n            buildDataFile.putPOJO(instance);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(ArtifactoryServer server) throws IOException {\n            if (isAllBlank(server.getUrl(), step.url)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override Artifactory pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(ArtifactoryServer server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.setPassword(step.password);\n            }\n            if (step.deploymentThreads != null) {\n                server.setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateServerStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Override\n        public String getDisplayName() {\n            return \"Creates new Artifactory server\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 17058683901837721001
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.scripted.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jenkinsci.plugins.workflow.steps.SynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.kohsuke.stapler.DataBoundConstructor;\n\nimport javax.annotation.Nonnull;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n/**\n * Created by romang on 4/21/16.\n */\npublic class CreateJFrogPlatformInstanceStep extends AbstractStepImpl {\n    private final String distributionUrl;\n    private final String artifactoryUrl;\n    private final String credentialsId;\n    private final String username;\n    private final String password;\n    private final String url;\n\n    @DataBoundConstructor\n    public CreateJFrogPlatformInstanceStep(String url, String artifactoryUrl, String distributionUrl, String username, String password, String credentialsId) {\n        this.url = url;\n        this.artifactoryUrl = artifactoryUrl;\n        this.distributionUrl = distributionUrl;\n        this.username = username;\n        this.password = password;\n        this.credentialsId = credentialsId;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * We don't use additional context fields in this step execution,\n     * so we extend SynchronousStepExecution directly and not ArtifactorySynchronousStepExecution\n     */\n    public static class Execution extends SynchronousStepExecution<JFrogPlatformInstance> {\n        private static final long serialVersionUID = 1L;\n\n        private transient CreateJFrogPlatformInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogPlatformInstanceStep step, StepContext context) {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected JFrogPlatformInstance run() throws Exception {\n            if (isAllBlank(step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IllegalArgumentException(\"At least one of the following is mandatory: 'url', 'artifactoryUrl', 'distributionUrl'\");\n            }\n            String urlWithoutSlash = removeEnd(step.url, \"/\");\n            String artifactoryUrl = defaultIfBlank(step.artifactoryUrl, urlWithoutSlash + \"/\" + \"artifactory\");\n            String distributionUrl = defaultIfBlank(step.distributionUrl, urlWithoutSlash + \"/\" + \"distribution\");\n\n            ArtifactoryServer artifactoryServer;\n            DistributionServer distributionServer;\n            if (!isEmpty(step.credentialsId)) {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.credentialsId);\n                distributionServer = new DistributionServer(distributionUrl, step.credentialsId);\n            } else {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.username, step.password);\n                distributionServer = new DistributionServer(distributionUrl, step.username, step.password);\n            }\n            artifactoryServer.setPlatformUrl(urlWithoutSlash);\n            return new JFrogPlatformInstance(artifactoryServer, distributionServer, step.url, \"\");\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogPlatformInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return \"newJFrogPlatformInstance\";\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Returns new JFrog platform instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 374324715092169260
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport hudson.EnvVars;\nimport hudson.FilePath;\nimport hudson.Launcher;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.buildInfo.BuildInfo;\nimport org.jfrog.hudson.pipeline.common.types.deployers.CommonDeployer;\nimport org.jfrog.hudson.util.ExtractorUtils;\n\npublic class CreateDockerBuildExecutor extends BuildInfoProcessRunner {\n    private final ArtifactoryServer server;\n    private final String kanikoImageFile;\n    private final String jibImageFile;\n    private final String sourceRepo;\n\n    public CreateDockerBuildExecutor(ArtifactoryServer pipelineServer, BuildInfo buildInfo, Run<?, ?> build,\n                                     String kanikoImageFile, String jibImageFile, String sourceRepo, String javaArgs,\n                                     Launcher launcher, TaskListener listener, FilePath ws, EnvVars envVars) {\n        super(buildInfo, launcher, javaArgs, ws, \"\", \"\", envVars, listener, build);\n        this.kanikoImageFile = kanikoImageFile;\n        this.jibImageFile = jibImageFile;\n        this.sourceRepo = sourceRepo;\n        this.server = pipelineServer;\n    }\n\n    public void execute() throws Exception {\n        if (server == null) {\n            throw new IllegalStateException(\"Artifactory server must be configured\");\n        }\n        if (StringUtils.isAllBlank(kanikoImageFile, jibImageFile) || StringUtils.isNoneBlank(kanikoImageFile, jibImageFile)) {\n            throw new IllegalStateException(\"Exactly one of 'kanikoImageFile' or 'jibImageFile' must be configured\");\n        }\n        CommonDeployer deployer = new CommonDeployer();\n        deployer.setServer(server);\n        deployer.setRepo(sourceRepo);\n        FilePath tempDir = ExtractorUtils.createAndGetTempDir(ws);\n        EnvExtractor envExtractor = new CreateDockerBuildEnvExtractor(build, buildInfo, deployer, listener, launcher, tempDir, env, kanikoImageFile, jibImageFile);\n        super.execute(\"Create Docker Build\", \"org.jfrog.build.extractor.docker.extractor.BuildDockerCreator\", envExtractor, tempDir);\n    }\n\n    public BuildInfo getBuildInfo() {\n        return buildInfo;\n    }\n}\n",
            "error": "",
            "span_id": 17478049031374595553
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport javax.annotation.Nonnull;\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\n@SuppressWarnings(\"unused\")\npublic class CreateJFrogInstanceStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"jfrogInstance\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String distributionUrl;\n    private String artifactoryUrl;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n    @DataBoundConstructor\n    public CreateJFrogInstanceStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setDistributionUrl(String distributionUrl) {\n        this.distributionUrl = distributionUrl;\n    }\n\n    @DataBoundSetter\n    public void setArtifactoryUrl(String artifactoryUrl) {\n        this.artifactoryUrl = artifactoryUrl;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateJFrogInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogInstanceStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            JFrogPlatformInstance server = DeclarativePipelineUtils.getJFrogPlatformInstance(build, ws, step.id, false);\n            if (server == null) {\n                server = new JFrogPlatformInstance();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(STEP_NAME, step.id);\n            buildDataFile.putPOJO(server);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(JFrogPlatformInstance server) throws IOException {\n            if (isAllBlank(server.getUrl(), server.getArtifactory().getUrl(), server.getDistribution().getUrl(),\n                    step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override JFrog instance pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(JFrogPlatformInstance server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n                String urlWithoutSlash = StringUtils.removeEnd(step.url, \"/\");\n                server.getArtifactory().setPlatformUrl(urlWithoutSlash);\n                server.getArtifactory().setUrl(urlWithoutSlash + \"/\" + \"artifactory\");\n                server.getDistribution().setUrl(urlWithoutSlash + \"/\" + \"distribution\");\n            }\n            if (isNotBlank(step.artifactoryUrl)) {\n                server.getArtifactory().setUrl(step.artifactoryUrl);\n            }\n            if (isNotBlank(step.distributionUrl)) {\n                server.getDistribution().setUrl(step.distributionUrl);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.getArtifactory().setCredentialsId(step.credentialsId);\n                server.getDistribution().setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.getArtifactory().setUsername(step.username);\n                server.getDistribution().setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.getArtifactory().setPassword(step.password);\n                server.getDistribution().setPassword(step.password);\n            }\n\n            // The following fields does not exist in the Distribution server:\n            if (step.deploymentThreads != null) {\n                server.getArtifactory().setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.getArtifactory().setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getArtifactory().getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getArtifactory().getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Creates new JFrog instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 15521968358155052987
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DeleteReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDeleteExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DeleteReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDeleteExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                       boolean deleteFromDist, String distRules, List<String> countryCodes, String siteName,\n                                       String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun, deleteFromDist);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDeleteCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DeleteReleaseBundleRequest createRequest(String distRules, List<String> countryCodes, String siteName,\n                                                     String cityName, boolean dryRun, boolean deleteFromDist) throws IOException {\n        DeleteReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DeleteReleaseBundleRequest.class);\n        } else {\n            request = new DeleteReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        request.setOnSuccess(deleteFromDist ?\n                DeleteReleaseBundleRequest.OnSuccess.delete : DeleteReleaseBundleRequest.OnSuccess.keep);\n        return request;\n    }\n\n    private static class ReleaseBundleDeleteCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DeleteReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDeleteCallable(DistributionManagerBuilder distributionManagerBuilder, DeleteReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.deleteReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 12389393949974442086
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport hudson.EnvVars;\nimport hudson.FilePath;\nimport hudson.Launcher;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.buildInfo.BuildInfo;\nimport org.jfrog.hudson.pipeline.common.types.deployers.CommonDeployer;\nimport org.jfrog.hudson.util.ExtractorUtils;\n\npublic class CreateDockerBuildExecutor extends BuildInfoProcessRunner {\n    private final ArtifactoryServer server;\n    private final String kanikoImageFile;\n    private final String jibImageFile;\n    private final String sourceRepo;\n\n    public CreateDockerBuildExecutor(ArtifactoryServer pipelineServer, BuildInfo buildInfo, Run<?, ?> build,\n                                     String kanikoImageFile, String jibImageFile, String sourceRepo, String javaArgs,\n                                     Launcher launcher, TaskListener listener, FilePath ws, EnvVars envVars) {\n        super(buildInfo, launcher, javaArgs, ws, \"\", \"\", envVars, listener, build);\n        this.kanikoImageFile = kanikoImageFile;\n        this.jibImageFile = jibImageFile;\n        this.sourceRepo = sourceRepo;\n        this.server = pipelineServer;\n    }\n\n    public void execute() throws Exception {\n        if (server == null) {\n            throw new IllegalStateException(\"Artifactory server must be configured\");\n        }\n        if (StringUtils.isAllBlank(kanikoImageFile, jibImageFile) || StringUtils.isNoneBlank(kanikoImageFile, jibImageFile)) {\n            throw new IllegalStateException(\"Exactly one of 'kanikoImageFile' or 'jibImageFile' must be configured\");\n        }\n        CommonDeployer deployer = new CommonDeployer();\n        deployer.setServer(server);\n        deployer.setRepo(sourceRepo);\n        FilePath tempDir = ExtractorUtils.createAndGetTempDir(ws);\n        EnvExtractor envExtractor = new CreateDockerBuildEnvExtractor(build, buildInfo, deployer, listener, launcher, tempDir, env, kanikoImageFile, jibImageFile);\n        super.execute(\"Create Docker Build\", \"org.jfrog.build.extractor.docker.extractor.BuildDockerCreator\", envExtractor, tempDir);\n    }\n\n    public BuildInfo getBuildInfo() {\n        return buildInfo;\n    }\n}\n",
            "error": "",
            "span_id": 14933656013625277346
        },
        {
            "input": "src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java",
            "output": "package org.jfrog.hudson.release.scm.perforce;\n\nimport com.perforce.p4java.client.IClient;\nimport com.perforce.p4java.server.IOptionsServer;\nimport hudson.EnvVars;\nimport hudson.model.AbstractBuild;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.p4.PerforceScm;\nimport org.jenkinsci.plugins.p4.client.ClientHelper;\nimport org.jenkinsci.plugins.p4.client.ConnectionFactory;\nimport org.jenkinsci.plugins.p4.client.ConnectionHelper;\nimport org.jfrog.build.vcs.perforce.PerforceClient;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Interacts with Perforce various release operations.\n * Using the updated perforce plugin - P4.\n *\n * @author Aviad Shikloshi\n */\npublic class P4Manager extends AbstractPerforceManager<PerforceScm> {\n\n    private static final Logger logger = Logger.getLogger(P4Manager.class.getName());\n\n    public P4Manager(AbstractBuild<?, ?> build, TaskListener buildListener) {\n        super(build, buildListener);\n    }\n\n    @Override\n    public void prepare() {\n\n        PerforceScm perforceScm = getJenkinsScm();\n        String credentials = perforceScm.getCredential();\n\n        ConnectionHelper connection = new ConnectionHelper(credentials, buildListener);\n        IOptionsServer server = ConnectionFactory.getConnection();\n        try {\n            String clientString = getClientString();\n            if (connection.isClient(clientString)) {\n                ClientHelper perforceClient = new ClientHelper(credentials, buildListener, clientString, StandardCharsets.UTF_8.toString());\n                IClient client = perforceClient.getClient();\n                try {\n                    this.perforce = new PerforceClient(server, client);\n                    this.perforce.initConnection();\n                } catch (Exception e) {\n                    logger.warning(\"Could not instantiate connection with PerforceClient: \" + e.getMessage());\n                }\n            } else {\n                logger.warning(\"Client \" + clientString + \" is not a valid client.\");\n            }\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"Error occurred: \", e);\n        }\n\n    }\n\n    @Override\n    public PerforceClient establishConnection() throws Exception {\n        this.perforce.initConnection();\n        return this.perforce;\n    }\n\n    private String getClientString() {\n        String client = StringUtils.EMPTY;\n        try {\n            EnvVars envVars = build.getEnvironment(buildListener);\n            client = envVars.get(\"P4_CLIENT\");\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"P4: Unable to read P4_CLIENT\");\n        }\n        return client;\n    }\n}\n",
            "error": "",
            "span_id": 11366239645334754245
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.scripted.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jenkinsci.plugins.workflow.steps.SynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.kohsuke.stapler.DataBoundConstructor;\n\nimport javax.annotation.Nonnull;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n/**\n * Created by romang on 4/21/16.\n */\npublic class CreateJFrogPlatformInstanceStep extends AbstractStepImpl {\n    private final String distributionUrl;\n    private final String artifactoryUrl;\n    private final String credentialsId;\n    private final String username;\n    private final String password;\n    private final String url;\n\n    @DataBoundConstructor\n    public CreateJFrogPlatformInstanceStep(String url, String artifactoryUrl, String distributionUrl, String username, String password, String credentialsId) {\n        this.url = url;\n        this.artifactoryUrl = artifactoryUrl;\n        this.distributionUrl = distributionUrl;\n        this.username = username;\n        this.password = password;\n        this.credentialsId = credentialsId;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * We don't use additional context fields in this step execution,\n     * so we extend SynchronousStepExecution directly and not ArtifactorySynchronousStepExecution\n     */\n    public static class Execution extends SynchronousStepExecution<JFrogPlatformInstance> {\n        private static final long serialVersionUID = 1L;\n\n        private transient CreateJFrogPlatformInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogPlatformInstanceStep step, StepContext context) {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected JFrogPlatformInstance run() throws Exception {\n            if (isAllBlank(step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IllegalArgumentException(\"At least one of the following is mandatory: 'url', 'artifactoryUrl', 'distributionUrl'\");\n            }\n            String urlWithoutSlash = removeEnd(step.url, \"/\");\n            String artifactoryUrl = defaultIfBlank(step.artifactoryUrl, urlWithoutSlash + \"/\" + \"artifactory\");\n            String distributionUrl = defaultIfBlank(step.distributionUrl, urlWithoutSlash + \"/\" + \"distribution\");\n\n            ArtifactoryServer artifactoryServer;\n            DistributionServer distributionServer;\n            if (!isEmpty(step.credentialsId)) {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.credentialsId);\n                distributionServer = new DistributionServer(distributionUrl, step.credentialsId);\n            } else {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.username, step.password);\n                distributionServer = new DistributionServer(distributionUrl, step.username, step.password);\n            }\n            artifactoryServer.setPlatformUrl(urlWithoutSlash);\n            return new JFrogPlatformInstance(artifactoryServer, distributionServer, step.url, \"\");\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogPlatformInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return \"newJFrogPlatformInstance\";\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Returns new JFrog platform instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 9489754939602139210
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DistributeReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDistributeExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DistributeReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDistributeExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                           String distRules, List<String> countryCodes, String siteName,\n                                           String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDistributeCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DistributeReleaseBundleRequest createRequest(String distRules, List<String> countryCodes,\n                                                         String siteName, String cityName, boolean dryRun) throws IOException {\n        DistributeReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DistributeReleaseBundleRequest.class);\n        } else {\n            request = new DistributeReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        return request;\n    }\n\n    private static class ReleaseBundleDistributeCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DistributeReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDistributeCallable(DistributionManagerBuilder distributionManagerBuilder, DistributeReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.distributeReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 1365580072635758401
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n@SuppressWarnings(\"unused\")\npublic class CreateServerStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"rtServer\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n\n    @DataBoundConstructor\n    public CreateServerStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateServerStep step;\n\n        @Inject\n        public Execution(CreateServerStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            ArtifactoryServer server = DeclarativePipelineUtils.getArtifactoryServer(build, ws, step.id, false);\n            if (server == null) {\n                server = new ArtifactoryServer();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n            JFrogPlatformInstance instance = new JFrogPlatformInstance(server, new DistributionServer(), \"\", step.id);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(CreateJFrogInstanceStep.STEP_NAME, step.id);\n            buildDataFile.putPOJO(instance);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(ArtifactoryServer server) throws IOException {\n            if (isAllBlank(server.getUrl(), step.url)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override Artifactory pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(ArtifactoryServer server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.setPassword(step.password);\n            }\n            if (step.deploymentThreads != null) {\n                server.setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateServerStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Override\n        public String getDisplayName() {\n            return \"Creates new Artifactory server\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 6153486517130805359
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DeleteReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDeleteExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DeleteReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDeleteExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                       boolean deleteFromDist, String distRules, List<String> countryCodes, String siteName,\n                                       String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun, deleteFromDist);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDeleteCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DeleteReleaseBundleRequest createRequest(String distRules, List<String> countryCodes, String siteName,\n                                                     String cityName, boolean dryRun, boolean deleteFromDist) throws IOException {\n        DeleteReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DeleteReleaseBundleRequest.class);\n        } else {\n            request = new DeleteReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        request.setOnSuccess(deleteFromDist ?\n                DeleteReleaseBundleRequest.OnSuccess.delete : DeleteReleaseBundleRequest.OnSuccess.keep);\n        return request;\n    }\n\n    private static class ReleaseBundleDeleteCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DeleteReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDeleteCallable(DistributionManagerBuilder distributionManagerBuilder, DeleteReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.deleteReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 8235366423391409450
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport javax.annotation.Nonnull;\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\n@SuppressWarnings(\"unused\")\npublic class CreateJFrogInstanceStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"jfrogInstance\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String distributionUrl;\n    private String artifactoryUrl;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n    @DataBoundConstructor\n    public CreateJFrogInstanceStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setDistributionUrl(String distributionUrl) {\n        this.distributionUrl = distributionUrl;\n    }\n\n    @DataBoundSetter\n    public void setArtifactoryUrl(String artifactoryUrl) {\n        this.artifactoryUrl = artifactoryUrl;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateJFrogInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogInstanceStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            JFrogPlatformInstance server = DeclarativePipelineUtils.getJFrogPlatformInstance(build, ws, step.id, false);\n            if (server == null) {\n                server = new JFrogPlatformInstance();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(STEP_NAME, step.id);\n            buildDataFile.putPOJO(server);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(JFrogPlatformInstance server) throws IOException {\n            if (isAllBlank(server.getUrl(), server.getArtifactory().getUrl(), server.getDistribution().getUrl(),\n                    step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override JFrog instance pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(JFrogPlatformInstance server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n                String urlWithoutSlash = StringUtils.removeEnd(step.url, \"/\");\n                server.getArtifactory().setPlatformUrl(urlWithoutSlash);\n                server.getArtifactory().setUrl(urlWithoutSlash + \"/\" + \"artifactory\");\n                server.getDistribution().setUrl(urlWithoutSlash + \"/\" + \"distribution\");\n            }\n            if (isNotBlank(step.artifactoryUrl)) {\n                server.getArtifactory().setUrl(step.artifactoryUrl);\n            }\n            if (isNotBlank(step.distributionUrl)) {\n                server.getDistribution().setUrl(step.distributionUrl);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.getArtifactory().setCredentialsId(step.credentialsId);\n                server.getDistribution().setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.getArtifactory().setUsername(step.username);\n                server.getDistribution().setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.getArtifactory().setPassword(step.password);\n                server.getDistribution().setPassword(step.password);\n            }\n\n            // The following fields does not exist in the Distribution server:\n            if (step.deploymentThreads != null) {\n                server.getArtifactory().setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.getArtifactory().setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getArtifactory().getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getArtifactory().getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Creates new JFrog instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 16488301919220742710
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DistributeReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDistributeExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DistributeReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDistributeExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                           String distRules, List<String> countryCodes, String siteName,\n                                           String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDistributeCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DistributeReleaseBundleRequest createRequest(String distRules, List<String> countryCodes,\n                                                         String siteName, String cityName, boolean dryRun) throws IOException {\n        DistributeReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DistributeReleaseBundleRequest.class);\n        } else {\n            request = new DistributeReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        return request;\n    }\n\n    private static class ReleaseBundleDistributeCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DistributeReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDistributeCallable(DistributionManagerBuilder distributionManagerBuilder, DistributeReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.distributeReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 5281327436649355873
        },
        {
            "input": "src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java",
            "output": "package org.jfrog.hudson.release.scm.perforce;\n\nimport com.perforce.p4java.client.IClient;\nimport com.perforce.p4java.server.IOptionsServer;\nimport hudson.EnvVars;\nimport hudson.model.AbstractBuild;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.p4.PerforceScm;\nimport org.jenkinsci.plugins.p4.client.ClientHelper;\nimport org.jenkinsci.plugins.p4.client.ConnectionFactory;\nimport org.jenkinsci.plugins.p4.client.ConnectionHelper;\nimport org.jfrog.build.vcs.perforce.PerforceClient;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Interacts with Perforce various release operations.\n * Using the updated perforce plugin - P4.\n *\n * @author Aviad Shikloshi\n */\npublic class P4Manager extends AbstractPerforceManager<PerforceScm> {\n\n    private static final Logger logger = Logger.getLogger(P4Manager.class.getName());\n\n    public P4Manager(AbstractBuild<?, ?> build, TaskListener buildListener) {\n        super(build, buildListener);\n    }\n\n    @Override\n    public void prepare() {\n\n        PerforceScm perforceScm = getJenkinsScm();\n        String credentials = perforceScm.getCredential();\n\n        ConnectionHelper connection = new ConnectionHelper(credentials, buildListener);\n        IOptionsServer server = ConnectionFactory.getConnection();\n        try {\n            String clientString = getClientString();\n            if (connection.isClient(clientString)) {\n                ClientHelper perforceClient = new ClientHelper(credentials, buildListener, clientString, StandardCharsets.UTF_8.toString());\n                IClient client = perforceClient.getClient();\n                try {\n                    this.perforce = new PerforceClient(server, client);\n                    this.perforce.initConnection();\n                } catch (Exception e) {\n                    logger.warning(\"Could not instantiate connection with PerforceClient: \" + e.getMessage());\n                }\n            } else {\n                logger.warning(\"Client \" + clientString + \" is not a valid client.\");\n            }\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"Error occurred: \", e);\n        }\n\n    }\n\n    @Override\n    public PerforceClient establishConnection() throws Exception {\n        this.perforce.initConnection();\n        return this.perforce;\n    }\n\n    private String getClientString() {\n        String client = StringUtils.EMPTY;\n        try {\n            EnvVars envVars = build.getEnvironment(buildListener);\n            client = envVars.get(\"P4_CLIENT\");\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"P4: Unable to read P4_CLIENT\");\n        }\n        return client;\n    }\n}\n",
            "error": "",
            "span_id": 12485145908736469790
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport hudson.EnvVars;\nimport hudson.FilePath;\nimport hudson.Launcher;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.buildInfo.BuildInfo;\nimport org.jfrog.hudson.pipeline.common.types.deployers.CommonDeployer;\nimport org.jfrog.hudson.util.ExtractorUtils;\n\npublic class CreateDockerBuildExecutor extends BuildInfoProcessRunner {\n    private final ArtifactoryServer server;\n    private final String kanikoImageFile;\n    private final String jibImageFile;\n    private final String sourceRepo;\n\n    public CreateDockerBuildExecutor(ArtifactoryServer pipelineServer, BuildInfo buildInfo, Run<?, ?> build,\n                                     String kanikoImageFile, String jibImageFile, String sourceRepo, String javaArgs,\n                                     Launcher launcher, TaskListener listener, FilePath ws, EnvVars envVars) {\n        super(buildInfo, launcher, javaArgs, ws, \"\", \"\", envVars, listener, build);\n        this.kanikoImageFile = kanikoImageFile;\n        this.jibImageFile = jibImageFile;\n        this.sourceRepo = sourceRepo;\n        this.server = pipelineServer;\n    }\n\n    public void execute() throws Exception {\n        if (server == null) {\n            throw new IllegalStateException(\"Artifactory server must be configured\");\n        }\n        if (StringUtils.isAllBlank(kanikoImageFile, jibImageFile) || StringUtils.isNoneBlank(kanikoImageFile, jibImageFile)) {\n            throw new IllegalStateException(\"Exactly one of 'kanikoImageFile' or 'jibImageFile' must be configured\");\n        }\n        CommonDeployer deployer = new CommonDeployer();\n        deployer.setServer(server);\n        deployer.setRepo(sourceRepo);\n        FilePath tempDir = ExtractorUtils.createAndGetTempDir(ws);\n        EnvExtractor envExtractor = new CreateDockerBuildEnvExtractor(build, buildInfo, deployer, listener, launcher, tempDir, env, kanikoImageFile, jibImageFile);\n        super.execute(\"Create Docker Build\", \"org.jfrog.build.extractor.docker.extractor.BuildDockerCreator\", envExtractor, tempDir);\n    }\n\n    public BuildInfo getBuildInfo() {\n        return buildInfo;\n    }\n}\n",
            "error": "",
            "span_id": 3058347245995376392
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n@SuppressWarnings(\"unused\")\npublic class CreateServerStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"rtServer\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n\n    @DataBoundConstructor\n    public CreateServerStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateServerStep step;\n\n        @Inject\n        public Execution(CreateServerStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            ArtifactoryServer server = DeclarativePipelineUtils.getArtifactoryServer(build, ws, step.id, false);\n            if (server == null) {\n                server = new ArtifactoryServer();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n            JFrogPlatformInstance instance = new JFrogPlatformInstance(server, new DistributionServer(), \"\", step.id);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(CreateJFrogInstanceStep.STEP_NAME, step.id);\n            buildDataFile.putPOJO(instance);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(ArtifactoryServer server) throws IOException {\n            if (isAllBlank(server.getUrl(), step.url)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override Artifactory pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(ArtifactoryServer server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.setPassword(step.password);\n            }\n            if (step.deploymentThreads != null) {\n                server.setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateServerStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Override\n        public String getDisplayName() {\n            return \"Creates new Artifactory server\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 15528056989833384919
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.scripted.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jenkinsci.plugins.workflow.steps.SynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.kohsuke.stapler.DataBoundConstructor;\n\nimport javax.annotation.Nonnull;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n/**\n * Created by romang on 4/21/16.\n */\npublic class CreateJFrogPlatformInstanceStep extends AbstractStepImpl {\n    private final String distributionUrl;\n    private final String artifactoryUrl;\n    private final String credentialsId;\n    private final String username;\n    private final String password;\n    private final String url;\n\n    @DataBoundConstructor\n    public CreateJFrogPlatformInstanceStep(String url, String artifactoryUrl, String distributionUrl, String username, String password, String credentialsId) {\n        this.url = url;\n        this.artifactoryUrl = artifactoryUrl;\n        this.distributionUrl = distributionUrl;\n        this.username = username;\n        this.password = password;\n        this.credentialsId = credentialsId;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * We don't use additional context fields in this step execution,\n     * so we extend SynchronousStepExecution directly and not ArtifactorySynchronousStepExecution\n     */\n    public static class Execution extends SynchronousStepExecution<JFrogPlatformInstance> {\n        private static final long serialVersionUID = 1L;\n\n        private transient CreateJFrogPlatformInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogPlatformInstanceStep step, StepContext context) {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected JFrogPlatformInstance run() throws Exception {\n            if (isAllBlank(step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IllegalArgumentException(\"At least one of the following is mandatory: 'url', 'artifactoryUrl', 'distributionUrl'\");\n            }\n            String urlWithoutSlash = removeEnd(step.url, \"/\");\n            String artifactoryUrl = defaultIfBlank(step.artifactoryUrl, urlWithoutSlash + \"/\" + \"artifactory\");\n            String distributionUrl = defaultIfBlank(step.distributionUrl, urlWithoutSlash + \"/\" + \"distribution\");\n\n            ArtifactoryServer artifactoryServer;\n            DistributionServer distributionServer;\n            if (!isEmpty(step.credentialsId)) {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.credentialsId);\n                distributionServer = new DistributionServer(distributionUrl, step.credentialsId);\n            } else {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.username, step.password);\n                distributionServer = new DistributionServer(distributionUrl, step.username, step.password);\n            }\n            artifactoryServer.setPlatformUrl(urlWithoutSlash);\n            return new JFrogPlatformInstance(artifactoryServer, distributionServer, step.url, \"\");\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogPlatformInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return \"newJFrogPlatformInstance\";\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Returns new JFrog platform instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 9663002320451396167
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateJFrogInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport javax.annotation.Nonnull;\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\n@SuppressWarnings(\"unused\")\npublic class CreateJFrogInstanceStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"jfrogInstance\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String distributionUrl;\n    private String artifactoryUrl;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n    @DataBoundConstructor\n    public CreateJFrogInstanceStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setDistributionUrl(String distributionUrl) {\n        this.distributionUrl = distributionUrl;\n    }\n\n    @DataBoundSetter\n    public void setArtifactoryUrl(String artifactoryUrl) {\n        this.artifactoryUrl = artifactoryUrl;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateJFrogInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogInstanceStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            JFrogPlatformInstance server = DeclarativePipelineUtils.getJFrogPlatformInstance(build, ws, step.id, false);\n            if (server == null) {\n                server = new JFrogPlatformInstance();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(STEP_NAME, step.id);\n            buildDataFile.putPOJO(server);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(JFrogPlatformInstance server) throws IOException {\n            if (isAllBlank(server.getUrl(), server.getArtifactory().getUrl(), server.getDistribution().getUrl(),\n                    step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override JFrog instance pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(JFrogPlatformInstance server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n                String urlWithoutSlash = StringUtils.removeEnd(step.url, \"/\");\n                server.getArtifactory().setPlatformUrl(urlWithoutSlash);\n                server.getArtifactory().setUrl(urlWithoutSlash + \"/\" + \"artifactory\");\n                server.getDistribution().setUrl(urlWithoutSlash + \"/\" + \"distribution\");\n            }\n            if (isNotBlank(step.artifactoryUrl)) {\n                server.getArtifactory().setUrl(step.artifactoryUrl);\n            }\n            if (isNotBlank(step.distributionUrl)) {\n                server.getDistribution().setUrl(step.distributionUrl);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.getArtifactory().setCredentialsId(step.credentialsId);\n                server.getDistribution().setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.getArtifactory().setUsername(step.username);\n                server.getDistribution().setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.getArtifactory().setPassword(step.password);\n                server.getDistribution().setPassword(step.password);\n            }\n\n            // The following fields does not exist in the Distribution server:\n            if (step.deploymentThreads != null) {\n                server.getArtifactory().setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.getArtifactory().setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getArtifactory().getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getArtifactory().getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Creates new JFrog instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 5795092674584194058
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDeleteExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DeleteReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDeleteExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DeleteReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDeleteExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                       boolean deleteFromDist, String distRules, List<String> countryCodes, String siteName,\n                                       String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun, deleteFromDist);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDeleteCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DeleteReleaseBundleRequest createRequest(String distRules, List<String> countryCodes, String siteName,\n                                                     String cityName, boolean dryRun, boolean deleteFromDist) throws IOException {\n        DeleteReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DeleteReleaseBundleRequest.class);\n        } else {\n            request = new DeleteReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        request.setOnSuccess(deleteFromDist ?\n                DeleteReleaseBundleRequest.OnSuccess.delete : DeleteReleaseBundleRequest.OnSuccess.keep);\n        return request;\n    }\n\n    private static class ReleaseBundleDeleteCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DeleteReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDeleteCallable(DistributionManagerBuilder distributionManagerBuilder, DeleteReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.deleteReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 1280028447615383614
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/ReleaseBundleDistributeExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport hudson.FilePath;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.remoting.VirtualChannel;\nimport jenkins.MasterToSlaveFileCallable;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.build.extractor.clientConfiguration.DistributionManagerBuilder;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.DistributionManager;\nimport org.jfrog.build.extractor.clientConfiguration.client.distribution.request.DistributeReleaseBundleRequest;\nimport org.jfrog.hudson.pipeline.common.Utils;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.jfrog.hudson.util.SerializationUtils.createMapper;\n\npublic class ReleaseBundleDistributeExecutor implements Executor {\n    private final DistributionManagerBuilder distributionManagerBuilder;\n    private final DistributeReleaseBundleRequest request;\n    private final transient FilePath ws;\n    private final String version;\n    private final boolean sync;\n    private final String name;\n\n    public ReleaseBundleDistributeExecutor(DistributionServer server, String name, String version, boolean dryRun, boolean sync,\n                                           String distRules, List<String> countryCodes, String siteName,\n                                           String cityName, TaskListener listener, Run<?, ?> build, FilePath ws) throws IOException {\n        this.distributionManagerBuilder = server.createDistributionManagerBuilder(new JenkinsBuildInfoLog(listener), build.getParent());\n        this.request = createRequest(distRules, countryCodes, siteName, cityName, dryRun);\n        this.ws = ws;\n        this.name = name;\n        this.version = version;\n        this.sync = sync;\n    }\n\n    public void execute() throws IOException, InterruptedException {\n        ws.act(new ReleaseBundleDistributeCallable(distributionManagerBuilder, request, name, version, sync));\n    }\n\n    private DistributeReleaseBundleRequest createRequest(String distRules, List<String> countryCodes,\n                                                         String siteName, String cityName, boolean dryRun) throws IOException {\n        DistributeReleaseBundleRequest request;\n        if (StringUtils.isNotBlank(distRules)) {\n            if (!CollectionUtils.isEmpty(countryCodes) || !StringUtils.isAllBlank(siteName, cityName)) {\n                throw new IOException(\"The distRules input can't be used with site, city or country codes\");\n            }\n            ObjectMapper mapper = createMapper();\n            request = mapper.readValue(distRules, DistributeReleaseBundleRequest.class);\n        } else {\n            request = new DistributeReleaseBundleRequest();\n            request.setDistributionRules(Utils.createDistributionRules(countryCodes, siteName, cityName));\n        }\n        request.setDryRun(dryRun);\n        return request;\n    }\n\n    private static class ReleaseBundleDistributeCallable extends MasterToSlaveFileCallable<Void> {\n        private final DistributionManagerBuilder distributionManagerBuilder;\n        private final DistributeReleaseBundleRequest request;\n        private final String version;\n        private final boolean sync;\n        private final String name;\n\n        public ReleaseBundleDistributeCallable(DistributionManagerBuilder distributionManagerBuilder, DistributeReleaseBundleRequest request, String name, String version, boolean sync) {\n            this.distributionManagerBuilder = distributionManagerBuilder;\n            this.request = request;\n            this.name = name;\n            this.version = version;\n            this.sync = sync;\n        }\n\n        @Override\n        public Void invoke(File file, VirtualChannel channel) throws IOException, InterruptedException {\n            try (DistributionManager distributionManager = distributionManagerBuilder.build()) {\n                distributionManager.distributeReleaseBundle(name, version, sync, request);\n            }\n            return null;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 17771329390120640708
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/declarative/steps/CreateServerStep.java",
            "output": "package org.jfrog.hudson.pipeline.declarative.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jfrog.hudson.pipeline.ArtifactorySynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.jfrog.hudson.pipeline.declarative.BuildDataFile;\nimport org.jfrog.hudson.pipeline.declarative.utils.DeclarativePipelineUtils;\nimport org.jfrog.hudson.util.BuildUniqueIdentifierHelper;\nimport org.jfrog.hudson.util.JenkinsBuildInfoLog;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\n\nimport java.io.IOException;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n@SuppressWarnings(\"unused\")\npublic class CreateServerStep extends AbstractStepImpl {\n    public static final String STEP_NAME = \"rtServer\";\n    private final String id;\n\n    private Integer deploymentThreads;\n    private String credentialsId;\n    private Boolean bypassProxy;\n    private String username;\n    private String password;\n    private Integer timeout;\n    private Integer retry;\n    private String url;\n\n\n    @DataBoundConstructor\n    public CreateServerStep(String id) {\n        this.id = id;\n    }\n\n    @DataBoundSetter\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @DataBoundSetter\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @DataBoundSetter\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @DataBoundSetter\n    public void setCredentialsId(String credentialsId) {\n        this.credentialsId = credentialsId;\n    }\n\n    @DataBoundSetter\n    public void setBypassProxy(boolean bypassProxy) {\n        this.bypassProxy = bypassProxy;\n    }\n\n    @DataBoundSetter\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    @DataBoundSetter\n    public void setRetry(int retry) {\n        this.retry = retry;\n    }\n\n    @DataBoundSetter\n    public void setDeploymentThreads(int deploymentThreads) {\n        this.deploymentThreads = deploymentThreads;\n    }\n\n    public static class Execution extends ArtifactorySynchronousStepExecution<Void> {\n        protected static final long serialVersionUID = 1L;\n        private transient final CreateServerStep step;\n\n        @Inject\n        public Execution(CreateServerStep step, StepContext context) throws IOException, InterruptedException {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected Void runStep() throws Exception {\n            // Prepare Artifactory server\n            ArtifactoryServer server = DeclarativePipelineUtils.getArtifactoryServer(build, ws, step.id, false);\n            if (server == null) {\n                server = new ArtifactoryServer();\n            }\n            checkInputs(server);\n            overrideServerParameters(server);\n            JFrogPlatformInstance instance = new JFrogPlatformInstance(server, new DistributionServer(), \"\", step.id);\n\n            // Store Artifactory server in the BuildDataFile\n            BuildDataFile buildDataFile = new BuildDataFile(CreateJFrogInstanceStep.STEP_NAME, step.id);\n            buildDataFile.putPOJO(instance);\n            String buildNumber = BuildUniqueIdentifierHelper.getBuildNumber(build);\n            DeclarativePipelineUtils.writeBuildDataFile(rootWs, buildNumber, buildDataFile, new JenkinsBuildInfoLog(listener));\n            return null;\n        }\n\n        @Override\n        public org.jfrog.hudson.ArtifactoryServer getUsageReportServer() throws Exception {\n            return null;\n        }\n\n        @Override\n        public String getUsageReportFeatureName() {\n            return null;\n        }\n\n        /**\n         * Validate step's inputs.\n         *\n         * @param server - The server to check\n         * @throws IOException if there is an illegal step configuration.\n         */\n        private void checkInputs(ArtifactoryServer server) throws IOException {\n            if (isAllBlank(server.getUrl(), step.url)) {\n                throw new IOException(\"Server URL is missing\");\n            }\n            if (isNotBlank(step.credentialsId)) {\n                if (isNotBlank(step.username)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and username\");\n                }\n                if (isNotBlank(step.password)) {\n                    throw new IOException(\"'rtServer' step can't include both credentialsId and password\");\n                }\n            }\n        }\n\n        /**\n         * Override Artifactory pipeline server parameter with parameters configured in this step.\n         *\n         * @param server - The server to update\n         */\n        private void overrideServerParameters(ArtifactoryServer server) {\n            if (isNotBlank(step.url)) {\n                server.setUrl(step.url);\n            }\n            if (isNotBlank(step.credentialsId)) {\n                server.setCredentialsId(step.credentialsId);\n            }\n            if (isNotBlank(step.username)) {\n                server.setUsername(step.username);\n            }\n            if (isNotBlank(step.password)) {\n                server.setPassword(step.password);\n            }\n            if (step.deploymentThreads != null) {\n                server.setDeploymentThreads(step.deploymentThreads);\n            }\n            if (step.bypassProxy != null) {\n                server.setBypassProxy(step.bypassProxy);\n            }\n            if (step.retry != null) {\n                server.getConnection().setRetry(step.retry);\n            }\n            if (step.timeout != null) {\n                server.getConnection().setTimeout(step.timeout);\n            }\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateServerStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return STEP_NAME;\n        }\n\n        @Override\n        public String getDisplayName() {\n            return \"Creates new Artifactory server\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 15678966395047132671
        },
        {
            "input": "src/main/java/org/jfrog/hudson/release/scm/perforce/P4Manager.java",
            "output": "package org.jfrog.hudson.release.scm.perforce;\n\nimport com.perforce.p4java.client.IClient;\nimport com.perforce.p4java.server.IOptionsServer;\nimport hudson.EnvVars;\nimport hudson.model.AbstractBuild;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.p4.PerforceScm;\nimport org.jenkinsci.plugins.p4.client.ClientHelper;\nimport org.jenkinsci.plugins.p4.client.ConnectionFactory;\nimport org.jenkinsci.plugins.p4.client.ConnectionHelper;\nimport org.jfrog.build.vcs.perforce.PerforceClient;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Interacts with Perforce various release operations.\n * Using the updated perforce plugin - P4.\n *\n * @author Aviad Shikloshi\n */\npublic class P4Manager extends AbstractPerforceManager<PerforceScm> {\n\n    private static final Logger logger = Logger.getLogger(P4Manager.class.getName());\n\n    public P4Manager(AbstractBuild<?, ?> build, TaskListener buildListener) {\n        super(build, buildListener);\n    }\n\n    @Override\n    public void prepare() {\n\n        PerforceScm perforceScm = getJenkinsScm();\n        String credentials = perforceScm.getCredential();\n\n        ConnectionHelper connection = new ConnectionHelper(credentials, buildListener);\n        IOptionsServer server = ConnectionFactory.getConnection();\n        try {\n            String clientString = getClientString();\n            if (connection.isClient(clientString)) {\n                ClientHelper perforceClient = new ClientHelper(credentials, buildListener, clientString, StandardCharsets.UTF_8.toString());\n                IClient client = perforceClient.getClient();\n                try {\n                    this.perforce = new PerforceClient(server, client);\n                    this.perforce.initConnection();\n                } catch (Exception e) {\n                    logger.warning(\"Could not instantiate connection with PerforceClient: \" + e.getMessage());\n                }\n            } else {\n                logger.warning(\"Client \" + clientString + \" is not a valid client.\");\n            }\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"Error occurred: \", e);\n        }\n\n    }\n\n    @Override\n    public PerforceClient establishConnection() throws Exception {\n        this.perforce.initConnection();\n        return this.perforce;\n    }\n\n    private String getClientString() {\n        String client = StringUtils.EMPTY;\n        try {\n            EnvVars envVars = build.getEnvironment(buildListener);\n            client = envVars.get(\"P4_CLIENT\");\n        } catch (Exception e) {\n            logger.log(Level.FINE, \"P4: Unable to read P4_CLIENT\");\n        }\n        return client;\n    }\n}\n",
            "error": "",
            "span_id": 8170546598227725149
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/common/executors/CreateDockerBuildExecutor.java",
            "output": "package org.jfrog.hudson.pipeline.common.executors;\n\nimport hudson.EnvVars;\nimport hudson.FilePath;\nimport hudson.Launcher;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.buildInfo.BuildInfo;\nimport org.jfrog.hudson.pipeline.common.types.deployers.CommonDeployer;\nimport org.jfrog.hudson.util.ExtractorUtils;\n\npublic class CreateDockerBuildExecutor extends BuildInfoProcessRunner {\n    private final ArtifactoryServer server;\n    private final String kanikoImageFile;\n    private final String jibImageFile;\n    private final String sourceRepo;\n\n    public CreateDockerBuildExecutor(ArtifactoryServer pipelineServer, BuildInfo buildInfo, Run<?, ?> build,\n                                     String kanikoImageFile, String jibImageFile, String sourceRepo, String javaArgs,\n                                     Launcher launcher, TaskListener listener, FilePath ws, EnvVars envVars) {\n        super(buildInfo, launcher, javaArgs, ws, \"\", \"\", envVars, listener, build);\n        this.kanikoImageFile = kanikoImageFile;\n        this.jibImageFile = jibImageFile;\n        this.sourceRepo = sourceRepo;\n        this.server = pipelineServer;\n    }\n\n    public void execute() throws Exception {\n        if (server == null) {\n            throw new IllegalStateException(\"Artifactory server must be configured\");\n        }\n        if (StringUtils.isAllBlank(kanikoImageFile, jibImageFile) || StringUtils.isNoneBlank(kanikoImageFile, jibImageFile)) {\n            throw new IllegalStateException(\"Exactly one of 'kanikoImageFile' or 'jibImageFile' must be configured\");\n        }\n        CommonDeployer deployer = new CommonDeployer();\n        deployer.setServer(server);\n        deployer.setRepo(sourceRepo);\n        FilePath tempDir = ExtractorUtils.createAndGetTempDir(ws);\n        EnvExtractor envExtractor = new CreateDockerBuildEnvExtractor(build, buildInfo, deployer, listener, launcher, tempDir, env, kanikoImageFile, jibImageFile);\n        super.execute(\"Create Docker Build\", \"org.jfrog.build.extractor.docker.extractor.BuildDockerCreator\", envExtractor, tempDir);\n    }\n\n    public BuildInfo getBuildInfo() {\n        return buildInfo;\n    }\n}\n",
            "error": "",
            "span_id": 2196044033149024406
        },
        {
            "input": "src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java",
            "output": "package org.jfrog.hudson.pipeline.scripted.steps;\n\nimport com.google.inject.Inject;\nimport hudson.Extension;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;\nimport org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\nimport org.jenkinsci.plugins.workflow.steps.StepContext;\nimport org.jenkinsci.plugins.workflow.steps.SynchronousStepExecution;\nimport org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;\nimport org.jfrog.hudson.pipeline.common.types.DistributionServer;\nimport org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;\nimport org.kohsuke.stapler.DataBoundConstructor;\n\nimport javax.annotation.Nonnull;\n\nimport static org.apache.commons.lang3.StringUtils.*;\n\n/**\n * Created by romang on 4/21/16.\n */\npublic class CreateJFrogPlatformInstanceStep extends AbstractStepImpl {\n    private final String distributionUrl;\n    private final String artifactoryUrl;\n    private final String credentialsId;\n    private final String username;\n    private final String password;\n    private final String url;\n\n    @DataBoundConstructor\n    public CreateJFrogPlatformInstanceStep(String url, String artifactoryUrl, String distributionUrl, String username, String password, String credentialsId) {\n        this.url = url;\n        this.artifactoryUrl = artifactoryUrl;\n        this.distributionUrl = distributionUrl;\n        this.username = username;\n        this.password = password;\n        this.credentialsId = credentialsId;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * We don't use additional context fields in this step execution,\n     * so we extend SynchronousStepExecution directly and not ArtifactorySynchronousStepExecution\n     */\n    public static class Execution extends SynchronousStepExecution<JFrogPlatformInstance> {\n        private static final long serialVersionUID = 1L;\n\n        private transient CreateJFrogPlatformInstanceStep step;\n\n        @Inject\n        public Execution(CreateJFrogPlatformInstanceStep step, StepContext context) {\n            super(context);\n            this.step = step;\n        }\n\n        @Override\n        protected JFrogPlatformInstance run() throws Exception {\n            if (isAllBlank(step.url, step.artifactoryUrl, step.distributionUrl)) {\n                throw new IllegalArgumentException(\"At least one of the following is mandatory: 'url', 'artifactoryUrl', 'distributionUrl'\");\n            }\n            String urlWithoutSlash = removeEnd(step.url, \"/\");\n            String artifactoryUrl = defaultIfBlank(step.artifactoryUrl, urlWithoutSlash + \"/\" + \"artifactory\");\n            String distributionUrl = defaultIfBlank(step.distributionUrl, urlWithoutSlash + \"/\" + \"distribution\");\n\n            ArtifactoryServer artifactoryServer;\n            DistributionServer distributionServer;\n            if (!isEmpty(step.credentialsId)) {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.credentialsId);\n                distributionServer = new DistributionServer(distributionUrl, step.credentialsId);\n            } else {\n                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.username, step.password);\n                distributionServer = new DistributionServer(distributionUrl, step.username, step.password);\n            }\n            artifactoryServer.setPlatformUrl(urlWithoutSlash);\n            return new JFrogPlatformInstance(artifactoryServer, distributionServer, step.url, \"\");\n        }\n    }\n\n    @Extension\n    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {\n\n        public DescriptorImpl() {\n            super(CreateJFrogPlatformInstanceStep.Execution.class);\n        }\n\n        @Override\n        public String getFunctionName() {\n            return \"newJFrogPlatformInstance\";\n        }\n\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return \"Returns new JFrog platform instance\";\n        }\n\n        @Override\n        public boolean isAdvanced() {\n            return true;\n        }\n    }\n}\n",
            "error": "",
            "span_id": 4967825542086781189
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 6850884457870886712
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 15173995444200682704
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 10510260482459206439
        },
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 2319775340828439214
        }
    ]
}