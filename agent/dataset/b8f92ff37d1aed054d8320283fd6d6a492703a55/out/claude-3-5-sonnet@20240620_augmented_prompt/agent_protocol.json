{
    "validate_diffs": [
        {
            "input": "```diff\n--- a/src/main/java/fr/spoonlabs/flacoco/core/test/strategies/classloader/finder/classes/impl/SourceFolderFinder.java\n+++ b/src/main/java/fr/spoonlabs/flacoco/core/test/strategies/classloader/finder/classes/impl/SourceFolderFinder.java\n@@ -23,6 +23,6 @@ public class SourceFolderFinder implements ClassFinder {\n     }\n \n     static List<String> getClassesLoc(File testSrcFolder) {\n-        DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, TestListResolver.getWildcard());\n+        DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, new TestListResolver(\"**/*.class\"));\n         return directoryScanner.scan().getClasses();\n     }\n }\n--- a/src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java\n+++ b/src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java\n@@ -196,13 +196,13 @@ public class CoverageMatrix {\n \n         // True if it is present in the available binaries\n         for (String dir : config.getBinJavaDir()) {\n-            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n+            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), new TestListResolver(\"**/*.class\"));\n             if (directoryScanner.scan().getClasses().contains(className)) {\n                 return true;\n             }\n         }\n         for (String dir : config.getBinTestDir()) {\n-            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n+            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), new TestListResolver(\"**/*.class\"));\n             if (directoryScanner.scan().getClasses().contains(className)) {\n                 return true;\n             }\n         }\n--- a/src/main/java/fr/spoonlabs/flacoco/core/coverage/framework/TestFrameworkStrategy.java\n+++ b/src/main/java/fr/spoonlabs/flacoco/core/coverage/framework/TestFrameworkStrategy.java\n@@ -89,12 +89,12 @@ public abstract class TestFrameworkStrategy {\n \tprotected String computeJacocoIncludes() {\n \t\tStringBuilder includes = new StringBuilder();\n \t\tfor (String directory : config.getBinJavaDir()) {\n-\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n+\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), new TestListResolver(\"**/*.class\"));\n \t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n \t\t}\n \t\tif (config.isCoverTests()) {\n \t\t\tfor (String directory : config.getBinTestDir()) {\n-\t\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n+\t\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), new TestListResolver(\"**/*.class\"));\n \t\t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n \t\t\t}\n \t\t}\n```",
            "output": "{'src/main/java/fr/spoonlabs/flacoco/core/test/strategies/classloader/finder/classes/impl/SourceFolderFinder.java': 'package fr.spoonlabs.flacoco.core.test.strategies.classloader.finder.classes.impl;\\n\\nimport fr.spoonlabs.flacoco.core.test.strategies.classloader.finder.classes.ClassFinder;\\nimport org.apache.maven.plugin.surefire.util.DirectoryScanner;\\nimport org.apache.maven.surefire.api.testset.TestListResolver;\\n\\nimport java.io.File;\\nimport java.util.List;\\n\\n\\npublic class SourceFolderFinder implements ClassFinder {\\n\\n    private String srcFolder;\\n\\n    public SourceFolderFinder(String srcFolder) {\\n        this.srcFolder = srcFolder;\\n    }\\n\\n    @Override\\n    public String[] getClasses() {\\n        return getClassesLoc(new File(srcFolder)).toArray(new String[0]);\\n    }\\n\\n    static List<String> getClassesLoc(File testSrcFolder) {\\n        DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, new TestListResolver(\"**/*.class\"));\\n        return directoryScanner.scan().getClasses();\\n    }\\n}\\n', 'src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java': 'package fr.spoonlabs.flacoco.core.coverage;\\n\\nimport ch.scheitlin.alex.java.StackTrace;\\nimport ch.scheitlin.alex.java.StackTraceParser;\\nimport eu.stamp_project.testrunner.listener.CoveredTestResultPerTestMethod;\\nimport eu.stamp_project.testrunner.listener.impl.CoverageDetailed;\\nimport eu.stamp_project.testrunner.listener.impl.CoverageFromClass;\\nimport fr.spoonlabs.flacoco.api.result.Location;\\nimport fr.spoonlabs.flacoco.core.config.FlacocoConfig;\\nimport fr.spoonlabs.flacoco.core.test.method.TestMethod;\\nimport fr.spoonlabs.flacoco.utils.spoon.SpoonBlockInspector;\\nimport org.apache.log4j.Logger;\\nimport org.apache.maven.plugin.surefire.util.DirectoryScanner;\\nimport org.apache.maven.surefire.api.testset.TestListResolver;\\nimport org.jacoco.core.runtime.WildcardMatcher;\\n\\nimport java.io.File;\\nimport java.util.*;\\nimport java.util.stream.Collectors;\\n\\n/**\\n * This class contains the result of the execution of a set of test units\\n *\\n * @author Matias Martinez\\n */\\npublic class CoverageMatrix {\\n\\n\\tprivate Logger logger = Logger.getLogger(CoverageMatrix.class);\\n\\n\\tprivate FlacocoConfig config;\\n\\n\\tpublic CoverageMatrix(FlacocoConfig config) {\\n\\t\\tthis.config = config;\\n\\t}\\n\\n\\t/**\\n\\t * Key is the line, value is a set of test methods that execute that line\\n\\t */\\n\\tprotected Map<Location, Set<TestMethod>> resultExecution = new HashMap<>();\\n\\n\\t/**\\n\\t * Map between executed test methods and their result. True if passing, false is failing.\\n\\t */\\n\\tprotected Map<TestMethod, Boolean> tests = new HashMap<>();\\n\\n\\t/**\\n\\t * Processes a wrapper for the coverage from a single test unit\\n\\t *\\n\\t * @param iCovWrapper The coverage information related to the single unit test\\n\\t * @param testClasses Classes which contain tests\\n\\t */\\n\\tpublic void processSingleTest(CoverageFromSingleTestUnit iCovWrapper, Set<String> testClasses) {\\n\\t\\tCoverageDetailed covLine = iCovWrapper.getCov();\\n\\n\\t\\tif (iCovWrapper.isSkip()) {\\n\\t\\t\\tlogger.debug(\"Ignoring skipped test: \" + iCovWrapper.getTestMethod().getFullyQualifiedMethodName());\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tboolean isPassing = iCovWrapper.isPassing();\\n\\n\\t\\t// Let\\'s navigate the covered class per line.\\n\\t\\tfor (String iClassNameCovered : covLine.getDetailedCoverage().keySet()) {\\n\\n\\t\\t\\tString className = iClassNameCovered.replace(\"/\", \".\");\\n\\t\\t\\tif (!config.isCoverTests() && testClasses.contains(className)) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Lines covered in that class\\n\\t\\t\\tCoverageFromClass lines = covLine.getDetailedCoverage().get(iClassNameCovered);\\n\\n\\t\\t\\tfor (int iLineNumber : lines.getCov().keySet()) {\\n\\n\\t\\t\\t\\tint instExecutedAtLineI = lines.getCov().get(iLineNumber);\\n\\n\\t\\t\\t\\tthis.add(new Location(className, iLineNumber), iCovWrapper.getTestMethod(), instExecutedAtLineI, isPassing);\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Now, we check if any exception was thrown and, if so, add the line where it was thrown\\n\\t\\t// since JaCoCo does not include them in coverage\\n\\t\\t// Handle tests that throw exceptions\\n\\t\\tCoveredTestResultPerTestMethod result = iCovWrapper.getCoveredTestResultPerTestMethod();\\n\\t\\tTestMethod testMethod = iCovWrapper.getTestMethod();\\n\\t\\tif (!isPassing && result.getFailureOf(testMethod.getFullyQualifiedMethodName()) != null) {\\n\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tStackTrace trace = StackTraceParser\\n\\t\\t\\t\\t\\t\\t.parse(result.getFailureOf(testMethod.getFullyQualifiedMethodName()).stackTrace);\\n\\n\\t\\t\\t\\tfor (StackTraceElement element : trace.getStackTraceLines()) {\\n\\t\\t\\t\\t\\t// Search for first non-native element\\n\\t\\t\\t\\t\\tif (!element.isNativeMethod()) {\\n\\t\\t\\t\\t\\t\\t// We want to keep it if and only if it the class was included in the coverage\\n\\t\\t\\t\\t\\t\\t// computation, which will ignore classes like org.junit.Assert\\n\\t\\t\\t\\t\\t\\tif (classToInclude(element.getClassName())) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// We also want to ignore test classes if they coverTests is not set\\n\\t\\t\\t\\t\\t\\t\\tif (!config.isCoverTests() && testClasses.contains(element.getClassName())) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\tLocation location = new Location(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telement.getClassName(),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telement.getLineNumber()\\n\\t\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\t\\tlogger.debug(\"Adding a line where an exception was thrown: \" + location);\\n\\t\\t\\t\\t\\t\\t\\tthis.add(location, testMethod, 1, false);\\n\\n\\t\\t\\t\\t\\t\\t\\t// Compute the executed lines from the block where the exception was thrown\\n\\t\\t\\t\\t\\t\\t\\t// See: https://github.com/SpoonLabs/flacoco/issues/109\\n\\t\\t\\t\\t\\t\\t\\tSpoonBlockInspector blockMatcher = new SpoonBlockInspector(config);\\n\\t\\t\\t\\t\\t\\t\\tList<Location> locations = blockMatcher.getBlockLocations(element);\\n\\n\\t\\t\\t\\t\\t\\t\\tfor (Location blockLocation : locations) {\\n\\t\\t\\t\\t\\t\\t\\t\\tlogger.debug(\"Adding a line from the block where an exception was thrown: \" + blockLocation);\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.add(blockLocation, testMethod, 1, false);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch (Exception e) {\\n\\t\\t\\t\\tthrow new RuntimeException(e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tpublic Map<Location, Set<TestMethod>> getResultExecution() {\\n\\t\\treturn resultExecution;\\n\\t}\\n\\n\\tpublic Map<TestMethod, Boolean> getTests() {\\n\\t\\treturn tests;\\n\\t}\\n\\n\\tpublic Set<TestMethod> getFailingTestCases() {\\n\\t\\treturn this.tests.entrySet().stream().filter(x -> !x.getValue())\\n\\t\\t\\t\\t.map(Map.Entry::getKey).collect(Collectors.toSet());\\n\\t}\\n\\n\\t/**\\n\\t * Auxiliary method to introduce the gathered information about a test unit run in the coverage matrix\\n\\t * <p>\\n\\t * The modifier is public for testing purposes\\n\\t *\\n\\t * @param location The location to be added\\n\\t * @param testMethod The test method which covered the location\\n\\t * @param instExecutedAtLineI Number of instructions executed at the location\\n\\t * @param testResult The result of the test method\\n\\t */\\n\\tpublic void add(Location location, TestMethod testMethod, int instExecutedAtLineI, Boolean testResult) {\\n\\t\\tif (instExecutedAtLineI > 0) {\\n\\t\\t\\tSet<TestMethod> currentExecution;\\n\\n\\t\\t\\tif (this.resultExecution.containsKey(location)) {\\n\\t\\t\\t\\tcurrentExecution = this.resultExecution.get(location);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcurrentExecution = new HashSet<>();\\n\\t\\t\\t\\tthis.resultExecution.put(location, currentExecution);\\n\\t\\t\\t}\\n\\n\\t\\t\\tcurrentExecution.add(testMethod);\\n\\t\\t}\\n\\n\\t\\tthis.tests.put(testMethod, testResult);\\n\\t}\\n\\n\\t/**\\n\\t * Computes if a given class is to be included in the post-coverage computation\\n\\t *\\n\\t * If we have include-exclude patterns for Jacoco:\\n\\t * - We include the class if it matches the include patterns and does not match the excludes patterns\\n\\t * Else:\\n\\t * - We include the class if it is available in the binary directories\\n\\t * @param className\\n\\t * @return true if the class should be included in the coverage result, false otherwise\\n\\t */\\n    private boolean classToInclude(String className) {\\n        // False if it matches an excludes pattern\\n        for (String pattern : config.getJacocoExcludes()) {\\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\\n            if (matcher.matches(className)) {\\n                return false;\\n            }\\n        }\\n        // True if it matches an includes pattern and doesn\\'t match any excludes pattern\\n        for (String pattern : config.getJacocoIncludes()) {\\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\\n            if (matcher.matches(className)) {\\n                return true;\\n            }\\n        }\\n\\n        // True if it is present in the available binaries\\n        for (String dir : config.getBinJavaDir()) {\\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), new TestListResolver(\"**/*.class\"));\\n            if (directoryScanner.scan().getClasses().contains(className)) {\\n                return true;\\n            }\\n        }\\n        for (String dir : config.getBinTestDir()) {\\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), new TestListResolver(\"**/*.class\"));\\n            if (directoryScanner.scan().getClasses().contains(className)) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n}\\n', 'src/main/java/fr/spoonlabs/flacoco/core/coverage/framework/TestFrameworkStrategy.java': 'package fr.spoonlabs.flacoco.core.coverage.framework;\\n\\n\\nimport eu.stamp_project.testrunner.EntryPoint;\\nimport eu.stamp_project.testrunner.listener.CoveredTestResultPerTestMethod;\\nimport eu.stamp_project.testrunner.runner.ParserOptions;\\nimport fr.spoonlabs.flacoco.core.config.FlacocoConfig;\\nimport fr.spoonlabs.flacoco.core.test.TestContext;\\nimport org.apache.log4j.Logger;\\nimport org.apache.maven.plugin.surefire.util.DirectoryScanner;\\nimport org.apache.maven.surefire.api.testset.TestListResolver;\\n\\nimport java.io.File;\\nimport java.util.concurrent.TimeoutException;\\n\\npublic abstract class TestFrameworkStrategy {\\n\\n\\tprivate static final Logger logger = Logger.getLogger(TestFrameworkStrategy.class);\\n\\n\\tprotected FlacocoConfig config;\\n\\n\\tpublic TestFrameworkStrategy(FlacocoConfig flacocoConfig) {\\n\\t\\tthis.config = flacocoConfig;\\n\\t}\\n\\n\\tpublic abstract CoveredTestResultPerTestMethod execute(TestContext testContext) throws TimeoutException;\\n\\n\\t/**\\n\\t * Auxiliary method to setup test-runners default options\\n\\t */\\n\\tprotected void setupTestRunnerEntryPoint() {\\n\\t\\tEntryPoint.useOptionsFile = true;\\n\\t\\tEntryPoint.coverageDetail = ParserOptions.CoverageTransformerDetail.DETAIL_COMPRESSED;\\n\\t\\tEntryPoint.workingDirectory = new File(config.getWorkspace());\\n\\t\\tEntryPoint.verbose = config.isTestRunnerVerbose();\\n\\t\\tEntryPoint.timeoutInMs = config.getTestRunnerTimeoutInMs();\\n\\t\\tEntryPoint.JVMArgs = config.getTestRunnerJVMArgs();\\n\\t\\tEntryPoint.jUnit5Mode = false;\\n\\t\\tif (!config.getJacocoIncludes().isEmpty()) {\\n\\t\\t\\tEntryPoint.jacocoAgentIncludes =\\n\\t\\t\\t\\t\\tconfig.getJacocoIncludes().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\");\\n\\t\\t} else {\\n\\t\\t\\tEntryPoint.jacocoAgentIncludes = this.computeJacocoIncludes();\\n\\t\\t}\\n\\t\\tif (!config.getJacocoIncludes().isEmpty()) {\\n\\t\\t\\tEntryPoint.jacocoAgentExcludes =\\n\\t\\t\\t\\t\\tconfig.getJacocoExcludes().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Auxiliary method to compute the classpath according to the test framework and the custom confirguration\\n\\t *\\n\\t * @return Classpath for test-runner execution\\n\\t */\\n\\tprotected String computeClasspath() {\\n\\t\\tString classpath = config.getClasspath() + File.pathSeparatorChar\\n\\t\\t\\t\\t+ config.getBinJavaDir().stream().reduce((x, y) -> x + File.pathSeparatorChar + y).orElse(\"\") + File.pathSeparatorChar\\n\\t\\t\\t\\t+ config.getBinTestDir().stream().reduce((x, y) -> x + File.pathSeparatorChar + y).orElse(\"\");\\n\\t\\tString mavenHome = config.getMavenHome();\\n\\t\\tString junitClasspath;\\n\\t\\tString jacocoClassPath;\\n\\n\\t\\tjunitClasspath = mavenHome + \"junit/junit/4.13.2/junit-4.13.2.jar\" + File.pathSeparatorChar\\n\\t\\t\\t\\t+ mavenHome + \"org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\" + File.pathSeparatorChar\\n\\t\\t\\t\\t+ mavenHome + \"org/junit/jupiter/junit-jupiter-api/5.3.2/junit-jupiter-api-5.3.2.jar\" + File.pathSeparatorChar\\n\\t\\t\\t\\t+ mavenHome + \"org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar\" + File.pathSeparatorChar\\n\\t\\t\\t\\t+ mavenHome + \"org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar\" + File.pathSeparatorChar\\n\\t\\t\\t\\t+ mavenHome + \"org/junit/platform/junit-platform-commons/1.3.2/junit-platform-commons-1.3.2.jar\" + File.pathSeparatorChar\\n\\t\\t\\t\\t+ mavenHome + \"org/junit/jupiter/junit-jupiter-engine/5.3.2/junit-jupiter-engine-5.3.2.jar\" + File.pathSeparatorChar\\n\\t\\t\\t\\t+ mavenHome + \"org/junit/jupiter/junit-jupiter-params/5.3.2/junit-jupiter-params-5.3.2.jar\" + File.pathSeparatorChar\\n\\t\\t\\t\\t+ mavenHome + \"org/junit/platform/junit-platform-engine/1.3.2/junit-platform-engine-1.3.2.jar\" + File.pathSeparatorChar\\n\\t\\t\\t\\t+ mavenHome + \"org/junit/platform/junit-platform-launcher/1.3.2/junit-platform-launcher-1.3.2.jar\";\\n\\n\\t\\tjacocoClassPath = mavenHome + \"org/jacoco/org.jacoco.core/0.8.8/org.jacoco.core-0.8.8.jar\";\\n\\n\\t\\t// Add JUnit dependencies\\n\\t\\tif (config.getCustomJUnitClasspath() != null)\\n\\t\\t\\tjunitClasspath = config.getCustomJUnitClasspath();\\n\\t\\t// Add jacoco dependencies\\n\\t\\tif (config.getCustomJacocoClasspath() != null)\\n\\t\\t\\tjacocoClassPath = config.getCustomJacocoClasspath();\\n\\n\\t\\treturn junitClasspath + File.pathSeparatorChar\\n\\t\\t\\t\\t+ jacocoClassPath + File.pathSeparatorChar\\n\\t\\t\\t\\t+ classpath + File.pathSeparatorChar;\\n\\t}\\n\\n\\tprotected String computeJacocoIncludes() {\\n\\t\\tStringBuilder includes = new StringBuilder();\\n\\t\\tfor (String directory : config.getBinJavaDir()) {\\n\\t\\t\\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), new TestListResolver(\"**/*.class\"));\\n\\t\\t\\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\\n\\t\\t}\\n\\t\\tif (config.isCoverTests()) {\\n\\t\\t\\tfor (String directory : config.getBinTestDir()) {\\n\\t\\t\\t\\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), new TestListResolver(\"**/*.class\"));\\n\\t\\t\\t\\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn includes.toString();\\n\\t}\\n\\n}\\n'}",
            "error": "",
            "span_id": 11922295915389383901
        }
    ],
    "compile_maven": [
        {
            "input": "The changes have been successfully applied. The `getWildcard()` method has been replaced with `new TestListResolver(\"**/*.class\")` in all the affected files. This should resolve the compilation errors caused by the upgrade of the maven-surefire-common dependency.\n\nTo summarize the changes:\n\n1. In `SourceFolderFinder.java`, `TestFrameworkStrategy.java`, and `CoverageMatrix.java`, we replaced `TestListResolver.getWildcard()` with `new TestListResolver(\"**/*.class\")`.\n\n2. This change maintains the functionality of scanning for all class files in the specified directories while using the updated API of the maven-surefire-common dependency.\n\nThese modifications should resolve the compilation errors and allow the project to build successfully with the updated dependency. If you encounter any further issues or need additional changes, please let me know.",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 3972137179607064985
        },
        {
            "input": "```diff\n--- a/src/main/java/fr/spoonlabs/flacoco/core/test/strategies/classloader/finder/classes/impl/SourceFolderFinder.java\n+++ b/src/main/java/fr/spoonlabs/flacoco/core/test/strategies/classloader/finder/classes/impl/SourceFolderFinder.java\n@@ -23,6 +23,6 @@ public class SourceFolderFinder implements ClassFinder {\n     }\n \n     static List<String> getClassesLoc(File testSrcFolder) {\n-        DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, TestListResolver.getWildcard());\n+        DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, new TestListResolver(\"**/*.class\"));\n         return directoryScanner.scan().getClasses();\n     }\n }\n--- a/src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java\n+++ b/src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java\n@@ -196,13 +196,13 @@ public class CoverageMatrix {\n \n         // True if it is present in the available binaries\n         for (String dir : config.getBinJavaDir()) {\n-            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n+            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), new TestListResolver(\"**/*.class\"));\n             if (directoryScanner.scan().getClasses().contains(className)) {\n                 return true;\n             }\n         }\n         for (String dir : config.getBinTestDir()) {\n-            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n+            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), new TestListResolver(\"**/*.class\"));\n             if (directoryScanner.scan().getClasses().contains(className)) {\n                 return true;\n             }\n         }\n--- a/src/main/java/fr/spoonlabs/flacoco/core/coverage/framework/TestFrameworkStrategy.java\n+++ b/src/main/java/fr/spoonlabs/flacoco/core/coverage/framework/TestFrameworkStrategy.java\n@@ -89,12 +89,12 @@ public abstract class TestFrameworkStrategy {\n \tprotected String computeJacocoIncludes() {\n \t\tStringBuilder includes = new StringBuilder();\n \t\tfor (String directory : config.getBinJavaDir()) {\n-\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n+\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), new TestListResolver(\"**/*.class\"));\n \t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n \t\t}\n \t\tif (config.isCoverTests()) {\n \t\t\tfor (String directory : config.getBinTestDir()) {\n-\t\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n+\t\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), new TestListResolver(\"**/*.class\"));\n \t\t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n \t\t\t}\n \t\t}\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": true,
                "error_text": "",
                "updated_files": {
                    "src/main/java/fr/spoonlabs/flacoco/core/test/strategies/classloader/finder/classes/impl/SourceFolderFinder.java": "package fr.spoonlabs.flacoco.core.test.strategies.classloader.finder.classes.impl;\n\nimport fr.spoonlabs.flacoco.core.test.strategies.classloader.finder.classes.ClassFinder;\nimport org.apache.maven.plugin.surefire.util.DirectoryScanner;\nimport org.apache.maven.surefire.api.testset.TestListResolver;\n\nimport java.io.File;\nimport java.util.List;\n\n\npublic class SourceFolderFinder implements ClassFinder {\n\n    private String srcFolder;\n\n    public SourceFolderFinder(String srcFolder) {\n        this.srcFolder = srcFolder;\n    }\n\n    @Override\n    public String[] getClasses() {\n        return getClassesLoc(new File(srcFolder)).toArray(new String[0]);\n    }\n\n    static List<String> getClassesLoc(File testSrcFolder) {\n        DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, new TestListResolver(\"**/*.class\"));\n        return directoryScanner.scan().getClasses();\n    }\n}\n",
                    "src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java": "package fr.spoonlabs.flacoco.core.coverage;\n\nimport ch.scheitlin.alex.java.StackTrace;\nimport ch.scheitlin.alex.java.StackTraceParser;\nimport eu.stamp_project.testrunner.listener.CoveredTestResultPerTestMethod;\nimport eu.stamp_project.testrunner.listener.impl.CoverageDetailed;\nimport eu.stamp_project.testrunner.listener.impl.CoverageFromClass;\nimport fr.spoonlabs.flacoco.api.result.Location;\nimport fr.spoonlabs.flacoco.core.config.FlacocoConfig;\nimport fr.spoonlabs.flacoco.core.test.method.TestMethod;\nimport fr.spoonlabs.flacoco.utils.spoon.SpoonBlockInspector;\nimport org.apache.log4j.Logger;\nimport org.apache.maven.plugin.surefire.util.DirectoryScanner;\nimport org.apache.maven.surefire.api.testset.TestListResolver;\nimport org.jacoco.core.runtime.WildcardMatcher;\n\nimport java.io.File;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * This class contains the result of the execution of a set of test units\n *\n * @author Matias Martinez\n */\npublic class CoverageMatrix {\n\n\tprivate Logger logger = Logger.getLogger(CoverageMatrix.class);\n\n\tprivate FlacocoConfig config;\n\n\tpublic CoverageMatrix(FlacocoConfig config) {\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Key is the line, value is a set of test methods that execute that line\n\t */\n\tprotected Map<Location, Set<TestMethod>> resultExecution = new HashMap<>();\n\n\t/**\n\t * Map between executed test methods and their result. True if passing, false is failing.\n\t */\n\tprotected Map<TestMethod, Boolean> tests = new HashMap<>();\n\n\t/**\n\t * Processes a wrapper for the coverage from a single test unit\n\t *\n\t * @param iCovWrapper The coverage information related to the single unit test\n\t * @param testClasses Classes which contain tests\n\t */\n\tpublic void processSingleTest(CoverageFromSingleTestUnit iCovWrapper, Set<String> testClasses) {\n\t\tCoverageDetailed covLine = iCovWrapper.getCov();\n\n\t\tif (iCovWrapper.isSkip()) {\n\t\t\tlogger.debug(\"Ignoring skipped test: \" + iCovWrapper.getTestMethod().getFullyQualifiedMethodName());\n\t\t\treturn;\n\t\t}\n\n\t\tboolean isPassing = iCovWrapper.isPassing();\n\n\t\t// Let's navigate the covered class per line.\n\t\tfor (String iClassNameCovered : covLine.getDetailedCoverage().keySet()) {\n\n\t\t\tString className = iClassNameCovered.replace(\"/\", \".\");\n\t\t\tif (!config.isCoverTests() && testClasses.contains(className)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Lines covered in that class\n\t\t\tCoverageFromClass lines = covLine.getDetailedCoverage().get(iClassNameCovered);\n\n\t\t\tfor (int iLineNumber : lines.getCov().keySet()) {\n\n\t\t\t\tint instExecutedAtLineI = lines.getCov().get(iLineNumber);\n\n\t\t\t\tthis.add(new Location(className, iLineNumber), iCovWrapper.getTestMethod(), instExecutedAtLineI, isPassing);\n\n\t\t\t}\n\t\t}\n\n\t\t// Now, we check if any exception was thrown and, if so, add the line where it was thrown\n\t\t// since JaCoCo does not include them in coverage\n\t\t// Handle tests that throw exceptions\n\t\tCoveredTestResultPerTestMethod result = iCovWrapper.getCoveredTestResultPerTestMethod();\n\t\tTestMethod testMethod = iCovWrapper.getTestMethod();\n\t\tif (!isPassing && result.getFailureOf(testMethod.getFullyQualifiedMethodName()) != null) {\n\n\t\t\ttry {\n\t\t\t\tStackTrace trace = StackTraceParser\n\t\t\t\t\t\t.parse(result.getFailureOf(testMethod.getFullyQualifiedMethodName()).stackTrace);\n\n\t\t\t\tfor (StackTraceElement element : trace.getStackTraceLines()) {\n\t\t\t\t\t// Search for first non-native element\n\t\t\t\t\tif (!element.isNativeMethod()) {\n\t\t\t\t\t\t// We want to keep it if and only if it the class was included in the coverage\n\t\t\t\t\t\t// computation, which will ignore classes like org.junit.Assert\n\t\t\t\t\t\tif (classToInclude(element.getClassName())) {\n\n\t\t\t\t\t\t\t// We also want to ignore test classes if they coverTests is not set\n\t\t\t\t\t\t\tif (!config.isCoverTests() && testClasses.contains(element.getClassName())) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tLocation location = new Location(\n\t\t\t\t\t\t\t\t\telement.getClassName(),\n\t\t\t\t\t\t\t\t\telement.getLineNumber()\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tlogger.debug(\"Adding a line where an exception was thrown: \" + location);\n\t\t\t\t\t\t\tthis.add(location, testMethod, 1, false);\n\n\t\t\t\t\t\t\t// Compute the executed lines from the block where the exception was thrown\n\t\t\t\t\t\t\t// See: https://github.com/SpoonLabs/flacoco/issues/109\n\t\t\t\t\t\t\tSpoonBlockInspector blockMatcher = new SpoonBlockInspector(config);\n\t\t\t\t\t\t\tList<Location> locations = blockMatcher.getBlockLocations(element);\n\n\t\t\t\t\t\t\tfor (Location blockLocation : locations) {\n\t\t\t\t\t\t\t\tlogger.debug(\"Adding a line from the block where an exception was thrown: \" + blockLocation);\n\t\t\t\t\t\t\t\tthis.add(blockLocation, testMethod, 1, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic Map<Location, Set<TestMethod>> getResultExecution() {\n\t\treturn resultExecution;\n\t}\n\n\tpublic Map<TestMethod, Boolean> getTests() {\n\t\treturn tests;\n\t}\n\n\tpublic Set<TestMethod> getFailingTestCases() {\n\t\treturn this.tests.entrySet().stream().filter(x -> !x.getValue())\n\t\t\t\t.map(Map.Entry::getKey).collect(Collectors.toSet());\n\t}\n\n\t/**\n\t * Auxiliary method to introduce the gathered information about a test unit run in the coverage matrix\n\t * <p>\n\t * The modifier is public for testing purposes\n\t *\n\t * @param location The location to be added\n\t * @param testMethod The test method which covered the location\n\t * @param instExecutedAtLineI Number of instructions executed at the location\n\t * @param testResult The result of the test method\n\t */\n\tpublic void add(Location location, TestMethod testMethod, int instExecutedAtLineI, Boolean testResult) {\n\t\tif (instExecutedAtLineI > 0) {\n\t\t\tSet<TestMethod> currentExecution;\n\n\t\t\tif (this.resultExecution.containsKey(location)) {\n\t\t\t\tcurrentExecution = this.resultExecution.get(location);\n\t\t\t} else {\n\t\t\t\tcurrentExecution = new HashSet<>();\n\t\t\t\tthis.resultExecution.put(location, currentExecution);\n\t\t\t}\n\n\t\t\tcurrentExecution.add(testMethod);\n\t\t}\n\n\t\tthis.tests.put(testMethod, testResult);\n\t}\n\n\t/**\n\t * Computes if a given class is to be included in the post-coverage computation\n\t *\n\t * If we have include-exclude patterns for Jacoco:\n\t * - We include the class if it matches the include patterns and does not match the excludes patterns\n\t * Else:\n\t * - We include the class if it is available in the binary directories\n\t * @param className\n\t * @return true if the class should be included in the coverage result, false otherwise\n\t */\n    private boolean classToInclude(String className) {\n        // False if it matches an excludes pattern\n        for (String pattern : config.getJacocoExcludes()) {\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return false;\n            }\n        }\n        // True if it matches an includes pattern and doesn't match any excludes pattern\n        for (String pattern : config.getJacocoIncludes()) {\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return true;\n            }\n        }\n\n        // True if it is present in the available binaries\n        for (String dir : config.getBinJavaDir()) {\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), new TestListResolver(\"**/*.class\"));\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n        for (String dir : config.getBinTestDir()) {\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), new TestListResolver(\"**/*.class\"));\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n",
                    "src/main/java/fr/spoonlabs/flacoco/core/coverage/framework/TestFrameworkStrategy.java": "package fr.spoonlabs.flacoco.core.coverage.framework;\n\n\nimport eu.stamp_project.testrunner.EntryPoint;\nimport eu.stamp_project.testrunner.listener.CoveredTestResultPerTestMethod;\nimport eu.stamp_project.testrunner.runner.ParserOptions;\nimport fr.spoonlabs.flacoco.core.config.FlacocoConfig;\nimport fr.spoonlabs.flacoco.core.test.TestContext;\nimport org.apache.log4j.Logger;\nimport org.apache.maven.plugin.surefire.util.DirectoryScanner;\nimport org.apache.maven.surefire.api.testset.TestListResolver;\n\nimport java.io.File;\nimport java.util.concurrent.TimeoutException;\n\npublic abstract class TestFrameworkStrategy {\n\n\tprivate static final Logger logger = Logger.getLogger(TestFrameworkStrategy.class);\n\n\tprotected FlacocoConfig config;\n\n\tpublic TestFrameworkStrategy(FlacocoConfig flacocoConfig) {\n\t\tthis.config = flacocoConfig;\n\t}\n\n\tpublic abstract CoveredTestResultPerTestMethod execute(TestContext testContext) throws TimeoutException;\n\n\t/**\n\t * Auxiliary method to setup test-runners default options\n\t */\n\tprotected void setupTestRunnerEntryPoint() {\n\t\tEntryPoint.useOptionsFile = true;\n\t\tEntryPoint.coverageDetail = ParserOptions.CoverageTransformerDetail.DETAIL_COMPRESSED;\n\t\tEntryPoint.workingDirectory = new File(config.getWorkspace());\n\t\tEntryPoint.verbose = config.isTestRunnerVerbose();\n\t\tEntryPoint.timeoutInMs = config.getTestRunnerTimeoutInMs();\n\t\tEntryPoint.JVMArgs = config.getTestRunnerJVMArgs();\n\t\tEntryPoint.jUnit5Mode = false;\n\t\tif (!config.getJacocoIncludes().isEmpty()) {\n\t\t\tEntryPoint.jacocoAgentIncludes =\n\t\t\t\t\tconfig.getJacocoIncludes().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\");\n\t\t} else {\n\t\t\tEntryPoint.jacocoAgentIncludes = this.computeJacocoIncludes();\n\t\t}\n\t\tif (!config.getJacocoIncludes().isEmpty()) {\n\t\t\tEntryPoint.jacocoAgentExcludes =\n\t\t\t\t\tconfig.getJacocoExcludes().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\");\n\t\t}\n\t}\n\n\t/**\n\t * Auxiliary method to compute the classpath according to the test framework and the custom confirguration\n\t *\n\t * @return Classpath for test-runner execution\n\t */\n\tprotected String computeClasspath() {\n\t\tString classpath = config.getClasspath() + File.pathSeparatorChar\n\t\t\t\t+ config.getBinJavaDir().stream().reduce((x, y) -> x + File.pathSeparatorChar + y).orElse(\"\") + File.pathSeparatorChar\n\t\t\t\t+ config.getBinTestDir().stream().reduce((x, y) -> x + File.pathSeparatorChar + y).orElse(\"\");\n\t\tString mavenHome = config.getMavenHome();\n\t\tString junitClasspath;\n\t\tString jacocoClassPath;\n\n\t\tjunitClasspath = mavenHome + \"junit/junit/4.13.2/junit-4.13.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/jupiter/junit-jupiter-api/5.3.2/junit-jupiter-api-5.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/platform/junit-platform-commons/1.3.2/junit-platform-commons-1.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/jupiter/junit-jupiter-engine/5.3.2/junit-jupiter-engine-5.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/jupiter/junit-jupiter-params/5.3.2/junit-jupiter-params-5.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/platform/junit-platform-engine/1.3.2/junit-platform-engine-1.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/platform/junit-platform-launcher/1.3.2/junit-platform-launcher-1.3.2.jar\";\n\n\t\tjacocoClassPath = mavenHome + \"org/jacoco/org.jacoco.core/0.8.8/org.jacoco.core-0.8.8.jar\";\n\n\t\t// Add JUnit dependencies\n\t\tif (config.getCustomJUnitClasspath() != null)\n\t\t\tjunitClasspath = config.getCustomJUnitClasspath();\n\t\t// Add jacoco dependencies\n\t\tif (config.getCustomJacocoClasspath() != null)\n\t\t\tjacocoClassPath = config.getCustomJacocoClasspath();\n\n\t\treturn junitClasspath + File.pathSeparatorChar\n\t\t\t\t+ jacocoClassPath + File.pathSeparatorChar\n\t\t\t\t+ classpath + File.pathSeparatorChar;\n\t}\n\n\tprotected String computeJacocoIncludes() {\n\t\tStringBuilder includes = new StringBuilder();\n\t\tfor (String directory : config.getBinJavaDir()) {\n\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), new TestListResolver(\"**/*.class\"));\n\t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n\t\t}\n\t\tif (config.isCoverTests()) {\n\t\t\tfor (String directory : config.getBinTestDir()) {\n\t\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), new TestListResolver(\"**/*.class\"));\n\t\t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n\t\t\t}\n\t\t}\n\t\treturn includes.toString();\n\t}\n\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- jacoco:0.8.8:report (report) @ flacoco ---\n[INFO] Skipping JaCoCo execution due to missing execution data file.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 34.848 s\n[INFO] Finished at: 2024-08-05T04:45:36Z\n[INFO] ------------------------------------------------------------------------",
            "span_id": 14195510810089804031
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/fr/spoonlabs/flacoco/core/test/strategies/classloader/finder/classes/impl/SourceFolderFinder.java",
            "output": "package fr.spoonlabs.flacoco.core.test.strategies.classloader.finder.classes.impl;\n\nimport fr.spoonlabs.flacoco.core.test.strategies.classloader.finder.classes.ClassFinder;\nimport org.apache.maven.plugin.surefire.util.DirectoryScanner;\nimport org.apache.maven.surefire.api.testset.TestListResolver;\n\nimport java.io.File;\nimport java.util.List;\n\n\npublic class SourceFolderFinder implements ClassFinder {\n\n    private String srcFolder;\n\n    public SourceFolderFinder(String srcFolder) {\n        this.srcFolder = srcFolder;\n    }\n\n    @Override\n    public String[] getClasses() {\n        return getClassesLoc(new File(srcFolder)).toArray(new String[0]);\n    }\n\n    static List<String> getClassesLoc(File testSrcFolder) {\n        DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, TestListResolver.getWildcard());\n        return directoryScanner.scan().getClasses();\n    }\n}\n",
            "error": "",
            "span_id": 16643601927825353621
        },
        {
            "input": "src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java",
            "output": "package fr.spoonlabs.flacoco.core.coverage;\n\nimport ch.scheitlin.alex.java.StackTrace;\nimport ch.scheitlin.alex.java.StackTraceParser;\nimport eu.stamp_project.testrunner.listener.CoveredTestResultPerTestMethod;\nimport eu.stamp_project.testrunner.listener.impl.CoverageDetailed;\nimport eu.stamp_project.testrunner.listener.impl.CoverageFromClass;\nimport fr.spoonlabs.flacoco.api.result.Location;\nimport fr.spoonlabs.flacoco.core.config.FlacocoConfig;\nimport fr.spoonlabs.flacoco.core.test.method.TestMethod;\nimport fr.spoonlabs.flacoco.utils.spoon.SpoonBlockInspector;\nimport org.apache.log4j.Logger;\nimport org.apache.maven.plugin.surefire.util.DirectoryScanner;\nimport org.apache.maven.surefire.api.testset.TestListResolver;\nimport org.jacoco.core.runtime.WildcardMatcher;\n\nimport java.io.File;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * This class contains the result of the execution of a set of test units\n *\n * @author Matias Martinez\n */\npublic class CoverageMatrix {\n\n\tprivate Logger logger = Logger.getLogger(CoverageMatrix.class);\n\n\tprivate FlacocoConfig config;\n\n\tpublic CoverageMatrix(FlacocoConfig config) {\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Key is the line, value is a set of test methods that execute that line\n\t */\n\tprotected Map<Location, Set<TestMethod>> resultExecution = new HashMap<>();\n\n\t/**\n\t * Map between executed test methods and their result. True if passing, false is failing.\n\t */\n\tprotected Map<TestMethod, Boolean> tests = new HashMap<>();\n\n\t/**\n\t * Processes a wrapper for the coverage from a single test unit\n\t *\n\t * @param iCovWrapper The coverage information related to the single unit test\n\t * @param testClasses Classes which contain tests\n\t */\n\tpublic void processSingleTest(CoverageFromSingleTestUnit iCovWrapper, Set<String> testClasses) {\n\t\tCoverageDetailed covLine = iCovWrapper.getCov();\n\n\t\tif (iCovWrapper.isSkip()) {\n\t\t\tlogger.debug(\"Ignoring skipped test: \" + iCovWrapper.getTestMethod().getFullyQualifiedMethodName());\n\t\t\treturn;\n\t\t}\n\n\t\tboolean isPassing = iCovWrapper.isPassing();\n\n\t\t// Let's navigate the covered class per line.\n\t\tfor (String iClassNameCovered : covLine.getDetailedCoverage().keySet()) {\n\n\t\t\tString className = iClassNameCovered.replace(\"/\", \".\");\n\t\t\tif (!config.isCoverTests() && testClasses.contains(className)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Lines covered in that class\n\t\t\tCoverageFromClass lines = covLine.getDetailedCoverage().get(iClassNameCovered);\n\n\t\t\tfor (int iLineNumber : lines.getCov().keySet()) {\n\n\t\t\t\tint instExecutedAtLineI = lines.getCov().get(iLineNumber);\n\n\t\t\t\tthis.add(new Location(className, iLineNumber), iCovWrapper.getTestMethod(), instExecutedAtLineI, isPassing);\n\n\t\t\t}\n\t\t}\n\n\t\t// Now, we check if any exception was thrown and, if so, add the line where it was thrown\n\t\t// since JaCoCo does not include them in coverage\n\t\t// Handle tests that throw exceptions\n\t\tCoveredTestResultPerTestMethod result = iCovWrapper.getCoveredTestResultPerTestMethod();\n\t\tTestMethod testMethod = iCovWrapper.getTestMethod();\n\t\tif (!isPassing && result.getFailureOf(testMethod.getFullyQualifiedMethodName()) != null) {\n\n\t\t\ttry {\n\t\t\t\tStackTrace trace = StackTraceParser\n\t\t\t\t\t\t.parse(result.getFailureOf(testMethod.getFullyQualifiedMethodName()).stackTrace);\n\n\t\t\t\tfor (StackTraceElement element : trace.getStackTraceLines()) {\n\t\t\t\t\t// Search for first non-native element\n\t\t\t\t\tif (!element.isNativeMethod()) {\n\t\t\t\t\t\t// We want to keep it if and only if it the class was included in the coverage\n\t\t\t\t\t\t// computation, which will ignore classes like org.junit.Assert\n\t\t\t\t\t\tif (classToInclude(element.getClassName())) {\n\n\t\t\t\t\t\t\t// We also want to ignore test classes if they coverTests is not set\n\t\t\t\t\t\t\tif (!config.isCoverTests() && testClasses.contains(element.getClassName())) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tLocation location = new Location(\n\t\t\t\t\t\t\t\t\telement.getClassName(),\n\t\t\t\t\t\t\t\t\telement.getLineNumber()\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tlogger.debug(\"Adding a line where an exception was thrown: \" + location);\n\t\t\t\t\t\t\tthis.add(location, testMethod, 1, false);\n\n\t\t\t\t\t\t\t// Compute the executed lines from the block where the exception was thrown\n\t\t\t\t\t\t\t// See: https://github.com/SpoonLabs/flacoco/issues/109\n\t\t\t\t\t\t\tSpoonBlockInspector blockMatcher = new SpoonBlockInspector(config);\n\t\t\t\t\t\t\tList<Location> locations = blockMatcher.getBlockLocations(element);\n\n\t\t\t\t\t\t\tfor (Location blockLocation : locations) {\n\t\t\t\t\t\t\t\tlogger.debug(\"Adding a line from the block where an exception was thrown: \" + blockLocation);\n\t\t\t\t\t\t\t\tthis.add(blockLocation, testMethod, 1, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic Map<Location, Set<TestMethod>> getResultExecution() {\n\t\treturn resultExecution;\n\t}\n\n\tpublic Map<TestMethod, Boolean> getTests() {\n\t\treturn tests;\n\t}\n\n\tpublic Set<TestMethod> getFailingTestCases() {\n\t\treturn this.tests.entrySet().stream().filter(x -> !x.getValue())\n\t\t\t\t.map(Map.Entry::getKey).collect(Collectors.toSet());\n\t}\n\n\t/**\n\t * Auxiliary method to introduce the gathered information about a test unit run in the coverage matrix\n\t * <p>\n\t * The modifier is public for testing purposes\n\t *\n\t * @param location The location to be added\n\t * @param testMethod The test method which covered the location\n\t * @param instExecutedAtLineI Number of instructions executed at the location\n\t * @param testResult The result of the test method\n\t */\n\tpublic void add(Location location, TestMethod testMethod, int instExecutedAtLineI, Boolean testResult) {\n\t\tif (instExecutedAtLineI > 0) {\n\t\t\tSet<TestMethod> currentExecution;\n\n\t\t\tif (this.resultExecution.containsKey(location)) {\n\t\t\t\tcurrentExecution = this.resultExecution.get(location);\n\t\t\t} else {\n\t\t\t\tcurrentExecution = new HashSet<>();\n\t\t\t\tthis.resultExecution.put(location, currentExecution);\n\t\t\t}\n\n\t\t\tcurrentExecution.add(testMethod);\n\t\t}\n\n\t\tthis.tests.put(testMethod, testResult);\n\t}\n\n\t/**\n\t * Computes if a given class is to be included in the post-coverage computation\n\t *\n\t * If we have include-exclude patterns for Jacoco:\n\t * - We include the class if it matches the include patterns and does not match the excludes patterns\n\t * Else:\n\t * - We include the class if it is available in the binary directories\n\t * @param className\n\t * @return true if the class should be included in the coverage result, false otherwise\n\t */\n    private boolean classToInclude(String className) {\n        // False if it matches an excludes pattern\n        for (String pattern : config.getJacocoExcludes()) {\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return false;\n            }\n        }\n        // True if it matches an includes pattern and doesn't match any excludes pattern\n        for (String pattern : config.getJacocoIncludes()) {\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return true;\n            }\n        }\n\n        // True if it is present in the available binaries\n        for (String dir : config.getBinJavaDir()) {\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n        for (String dir : config.getBinTestDir()) {\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n",
            "error": "",
            "span_id": 10852732874868362799
        },
        {
            "input": "src/main/java/fr/spoonlabs/flacoco/core/coverage/framework/TestFrameworkStrategy.java",
            "output": "package fr.spoonlabs.flacoco.core.coverage.framework;\n\n\nimport eu.stamp_project.testrunner.EntryPoint;\nimport eu.stamp_project.testrunner.listener.CoveredTestResultPerTestMethod;\nimport eu.stamp_project.testrunner.runner.ParserOptions;\nimport fr.spoonlabs.flacoco.core.config.FlacocoConfig;\nimport fr.spoonlabs.flacoco.core.test.TestContext;\nimport org.apache.log4j.Logger;\nimport org.apache.maven.plugin.surefire.util.DirectoryScanner;\nimport org.apache.maven.surefire.api.testset.TestListResolver;\n\nimport java.io.File;\nimport java.util.concurrent.TimeoutException;\n\npublic abstract class TestFrameworkStrategy {\n\n\tprivate static final Logger logger = Logger.getLogger(TestFrameworkStrategy.class);\n\n\tprotected FlacocoConfig config;\n\n\tpublic TestFrameworkStrategy(FlacocoConfig flacocoConfig) {\n\t\tthis.config = flacocoConfig;\n\t}\n\n\tpublic abstract CoveredTestResultPerTestMethod execute(TestContext testContext) throws TimeoutException;\n\n\t/**\n\t * Auxiliary method to setup test-runners default options\n\t */\n\tprotected void setupTestRunnerEntryPoint() {\n\t\tEntryPoint.useOptionsFile = true;\n\t\tEntryPoint.coverageDetail = ParserOptions.CoverageTransformerDetail.DETAIL_COMPRESSED;\n\t\tEntryPoint.workingDirectory = new File(config.getWorkspace());\n\t\tEntryPoint.verbose = config.isTestRunnerVerbose();\n\t\tEntryPoint.timeoutInMs = config.getTestRunnerTimeoutInMs();\n\t\tEntryPoint.JVMArgs = config.getTestRunnerJVMArgs();\n\t\tEntryPoint.jUnit5Mode = false;\n\t\tif (!config.getJacocoIncludes().isEmpty()) {\n\t\t\tEntryPoint.jacocoAgentIncludes =\n\t\t\t\t\tconfig.getJacocoIncludes().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\");\n\t\t} else {\n\t\t\tEntryPoint.jacocoAgentIncludes = this.computeJacocoIncludes();\n\t\t}\n\t\tif (!config.getJacocoIncludes().isEmpty()) {\n\t\t\tEntryPoint.jacocoAgentExcludes =\n\t\t\t\t\tconfig.getJacocoExcludes().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\");\n\t\t}\n\t}\n\n\t/**\n\t * Auxiliary method to compute the classpath according to the test framework and the custom confirguration\n\t *\n\t * @return Classpath for test-runner execution\n\t */\n\tprotected String computeClasspath() {\n\t\tString classpath = config.getClasspath() + File.pathSeparatorChar\n\t\t\t\t+ config.getBinJavaDir().stream().reduce((x, y) -> x + File.pathSeparatorChar + y).orElse(\"\") + File.pathSeparatorChar\n\t\t\t\t+ config.getBinTestDir().stream().reduce((x, y) -> x + File.pathSeparatorChar + y).orElse(\"\");\n\t\tString mavenHome = config.getMavenHome();\n\t\tString junitClasspath;\n\t\tString jacocoClassPath;\n\n\t\tjunitClasspath = mavenHome + \"junit/junit/4.13.2/junit-4.13.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/jupiter/junit-jupiter-api/5.3.2/junit-jupiter-api-5.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/platform/junit-platform-commons/1.3.2/junit-platform-commons-1.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/jupiter/junit-jupiter-engine/5.3.2/junit-jupiter-engine-5.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/jupiter/junit-jupiter-params/5.3.2/junit-jupiter-params-5.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/platform/junit-platform-engine/1.3.2/junit-platform-engine-1.3.2.jar\" + File.pathSeparatorChar\n\t\t\t\t+ mavenHome + \"org/junit/platform/junit-platform-launcher/1.3.2/junit-platform-launcher-1.3.2.jar\";\n\n\t\tjacocoClassPath = mavenHome + \"org/jacoco/org.jacoco.core/0.8.8/org.jacoco.core-0.8.8.jar\";\n\n\t\t// Add JUnit dependencies\n\t\tif (config.getCustomJUnitClasspath() != null)\n\t\t\tjunitClasspath = config.getCustomJUnitClasspath();\n\t\t// Add jacoco dependencies\n\t\tif (config.getCustomJacocoClasspath() != null)\n\t\t\tjacocoClassPath = config.getCustomJacocoClasspath();\n\n\t\treturn junitClasspath + File.pathSeparatorChar\n\t\t\t\t+ jacocoClassPath + File.pathSeparatorChar\n\t\t\t\t+ classpath + File.pathSeparatorChar;\n\t}\n\n\tprotected String computeJacocoIncludes() {\n\t\tStringBuilder includes = new StringBuilder();\n\t\tfor (String directory : config.getBinJavaDir()) {\n\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n\t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n\t\t}\n\t\tif (config.isCoverTests()) {\n\t\t\tfor (String directory : config.getBinTestDir()) {\n\t\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n\t\t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n\t\t\t}\n\t\t}\n\t\treturn includes.toString();\n\t}\n\n}\n",
            "error": "",
            "span_id": 4575025832405144687
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}