package de.uniwue.helper;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.apache.commons.io.FileUtils;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.node.ArrayNode;
import de.uniwue.config.ProjectConfiguration;
import de.uniwue.feature.ProcessConflictDetector;
import de.uniwue.feature.ProcessHandler;
import de.uniwue.feature.ProcessStateCollector;

public class RecognitionHelper {
    private ProjectConfiguration projConf;

    private String projectImageType;

    private ProcessHandler processHandler;

    private int progress = -1;

    private boolean RecognitionRunning = false;

    public void initialize(List<String> pageIds) throws IOException {
        // Init the listener for image modification
        imagesLastModified = new HashMap<>();
        for(String pageId: pageIds) {
            final String pageXML = projConf.OCR_DIR + pageId + projConf.CONF_EXT;
            imagesLastModified.put(pageXML,new File(pageXML).lastModified());
        }
    }

    public int getProgress() throws IOException {
        // Prevent function from calculation progress if process is not running
        if (!RecognitionRunning)
            return progress;

        int modifiedCount = 0;
        if(imagesLastModified != null) {
            for(String pagexml : imagesLastModified.keySet()) {
                if(imagesLastModified.get(pagexml) < new File(pagexml).lastModified()) {
                    modifiedCount++;
                }
            }
            progress = (modifiedCount*100) / imagesLastModified.size();
        } else {
            progress = -1;
        }
        return progress;
    }

    public List<String> extractModelsOfJoinedString(String joinedckptString){
        String [] checkpoints = joinedckptString.split(ProjectConfiguration.MODEL_EXT + " ");
        List<String> ckptList = new ArrayList<>();
        Iterator <String> ckptIterator= Arrays.asList(checkpoints).iterator();
        while (ckptIterator.hasNext()) {
            String ckpt = ckptIterator.next();
            if (ckptIterator.hasNext())
                ckpt = ckpt + ProjectConfiguration.MODEL_EXT;
            ckptList.add(ckpt);
        }
        return ckptList;
    }

    public void execute(List<String> pageIds, final List<String> cmdArgs) throws IOException {
        RecognitionRunning = true;
        progress = 0;

        List<String> cmdArgsWork = new ArrayList<>(cmdArgs);

        //// Estimate Skew
        if (cmdArgsWork.contains("--estimate_skew")) {
        	// Calculate the skew of all regions where none was calculated before
        	List<String> skewparams = new ArrayList<>();
            skewparams.add("skewestimate");
        	final int maxskewIndex = cmdArgsWork.indexOf("--maxskew");
        	if(maxskewIndex > -1) {
        		skewparams.add(cmdArgsWork.remove(maxskewIndex));
        		skewparams.add(cmdArgsWork.remove(maxskewIndex));
        	}
        	final int skewstepsIndex = cmdArgsWork.indexOf("--skewsteps");
        	if(skewstepsIndex > -1) {
        		skewparams.add(cmdArgsWork.remove(skewstepsIndex));
        		skewparams.add(cmdArgsWork.remove(skewstepsIndex));
        	}

			// Create temp json file with all segment images (to not overload parameter list)
			// Temp file in a temp folder named "skew-<random numbers>.json"
			File segmentListFile = File.createTempFile("skew-",".json");
			skewparams.add(segmentListFile.toString());
			segmentListFile.deleteOnExit(); // Delete if OCR4all terminates
			ObjectMapper mapper = new ObjectMapper();
			ArrayNode dataList = mapper.createArrayNode();
			for (String pageId : pageIds) {
				ArrayNode pageList = mapper.createArrayNode();
				pageList.add(projConf.getImageDirectoryByType(projectImageType) + pageId +
						projConf.getImageExtensionByType(projectImageType));
				final String pageXML = projConf.OCR_DIR + pageId + projConf.CONF_EXT;
				pageList.add(pageXML);

				// Add affected line segment images with their absolute path to the json file
				dataList.add(pageList);
			}
			ObjectWriter writer = mapper.writer();
			writer.writeValue(segmentListFile, dataList);

            processHandler = new ProcessHandler();
            processHandler.setFetchProcessConsole(true);
            processHandler.startProcess("ocr4all-helper-scripts", skewparams, false);

        	cmdArgsWork.remove("--estimate_skew");
        }


        //// Recognize
		// Reset recognition data
		deleteOldFiles(pageIds);
		initialize(pageIds);

        int index;
        if (cmdArgsWork.contains("--checkpoint")) {
            index = cmdArgsWork.indexOf("--checkpoint");
            for(String ckpt : extractModelsOfJoinedString(cmdArgsWork.get(index + 1))) {
                if (!new File(ckpt).exists())
                    throw new IOException("Model does not exist under the specified path");
            }
        }

        List<String> command = new ArrayList<>();
        // Ugly hack but helpers will be rewritten for the next release anyways. Don't use as basis for future code!
        if(cmdArgsWork.contains("--data.output_glyphs")){
            cmdArgsWork.remove("--data.output_glyphs");
            command.add("--data.output_glyphs");
            command.add("True");
        }
        if(cmdArgsWork.contains("--data.output_confidences")){
            cmdArgsWork.remove("--data.output_confidences");
            command.add("--data.output_confidences");
            command.add("True");
        }

        command.add("--data.images");
        // Create temp json file with all segment images (to not overload parameter list)
		// Temp file in a temp folder named "calamari-<random numbers>.json"
        File segmentListFile = File.createTempFile("calamari-",".files");
        segmentListFile.deleteOnExit();

        List<String> content = new ArrayList<>();
        for (String pageId : pageIds) {
            // Add affected images with their absolute path to the file
            content.add(projConf.getImageDirectoryByType(projectImageType) + pageId +
                                projConf.getImageExtensionByType(projectImageType));
        }
        Files.write(segmentListFile.toPath(), content, StandardOpenOption.APPEND);
        command.add(segmentListFile.toString());

        //Add checkpoints
        Iterator<String> cmdArgsIterator = cmdArgsWork.iterator();
        while (cmdArgsIterator.hasNext()) {
            String arg = cmdArgsIterator.next();
            command.add(arg);
            if (arg.equals("--checkpoint") && cmdArgsIterator.hasNext()) {
                command.addAll(extractModelsOfJoinedString(cmdArgsIterator.next()));
            }
        }

        command.add("--data");
        command.add("PageXML");
        // Set output extension to input extension in order to overwrite the original file
        // (default would've been .pred.xml)
        command.add("--data.gt_extension");
        command.add(".xml");
        command.add("--data.pred_extension");
        command.add(".xml");

        command.add("--data.text_index");
        command.add("1");

        command.add("--verbose");
        command.add("True");

        command.add("--predictor.progress_bar");
        command.add("False");

        processHandler = new ProcessHandler();
        processHandler.setFetchProcessConsole(true);
        processHandler.startProcess("calamari-predict", command, false);

        // Execute progress update to fill processState data structure with correct values
        getProgress();
        // Process extension to ocropus-gpageseg script
        createSkippedSegments();

        progress = 100;
        RecognitionRunning = false;

        // Clean up temp segmentListFile
        // segmentListFile.delete();
    }

    public void deleteOldFiles(List<String> pageIds) throws IOException {
        // Delete potential TextEquivs already existing in the page xmls
        for(String pageId : pageIds) {
            File pageXML = new File(projConf.OCR_DIR + pageId + projConf.CONF_EXT);
            if (!pageXML.exists())
                return;

            // Load pageXML and replace/delete all Textline text content
            String pageXMLContent = new String(Files.readAllBytes(pageXML.toPath()));
            pageXMLContent = pageXMLContent.replaceAll("\\<TextEquiv[^>]+?index=\"[^0]\"[^>]*?\\>[^<]*?\\<\\/TextEquiv\\>", "");

            // Save new pageXML
            try (FileWriter fileWriter = new FileWriter(pageXML)) {
                fileWriter.write(pageXMLContent);
                fileWriter.flush();
                fileWriter.close();
            }
    	}
    }

    public void createSkippedSegments() throws IOException{
        for(String pageId : processState.keySet()) {
            for(String segmentId :processState.get(pageId).keySet()) {
                for (String lineSegmentId : processState.get(pageId).get(segmentId).keySet()) {
                    if (processState.get(pageId).get(segmentId).get(lineSegmentId))
                        continue;

                    FileUtils.writeStringToFile(new File(projConf.PAGE_DIR + pageId + File.separator +
                        segmentId + File.separator + lineSegmentId + projConf.REC_EXT), "", "UTF8");
                }
            }
        }
    }

}