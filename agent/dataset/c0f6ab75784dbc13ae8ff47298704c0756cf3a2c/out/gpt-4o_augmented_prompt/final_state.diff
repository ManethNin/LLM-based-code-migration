diff --git a/sorald/src/main/java/sorald/sonar/SonarLintEngine.java b/sorald/src/main/java/sorald/sonar/SonarLintEngine.java
index a4149e5..25f183d 100644
--- a/sorald/src/main/java/sorald/sonar/SonarLintEngine.java
+++ b/sorald/src/main/java/sorald/sonar/SonarLintEngine.java
@@ -159,37 +159,40 @@ public final class SonarLintEngine extends AbstractSonarLintEngine {
     }
 
     private static AnalysisEngineConfiguration buildAnalysisEngineConfiguration() {
-        return AnalysisEngineConfiguration.builder()
-                .addEnabledLanguages(globalConfig.getEnabledLanguages())
+-        return AnalysisEngineConfiguration.builder()
+-                .addEnabledLanguages(globalConfig.getEnabledLanguages())
++        var builder = AnalysisEngineConfiguration.builder();
++        globalConfig.getEnabledLanguages().forEach(builder::addEnabledLanguage);
++        return builder
                 .setClientPid(globalConfig.getClientPid())
                 .setExtraProperties(globalConfig.extraProperties())
                 .setWorkDir(globalConfig.getWorkDir())
                 .setModulesProvider(globalConfig.getModulesProvider())
-                .build();
-    }
+.build();
+}
 
     /** Get or creates the one and only instance of this class. */
     public static SonarLintEngine getInstance() {
         if (theOnlyInstance == null) {
             theOnlyInstance = new SonarLintEngine();
-        } else {
+} else {
             theOnlyInstance.recreateAnalysisEngine();
-        }
+}
         return theOnlyInstance;
-    }
+}
 
-    /**
+/**
      * Recreates the analysis engine as it is stopped after each analysis executed by {@link
      * SonarStaticAnalyzer}.
-     */
+*/
     public void recreateAnalysisEngine() {
         this.analysisEngine = new AnalysisEngine(analysisGlobalConfig, loadedPlugins, logOutput);
-    }
+}
 
-    @Override
+@Override
     public AnalysisEngine getAnalysisEngine() {
         return analysisEngine;
-    }
+}
 
     public AnalysisResults analyze(
             StandaloneAnalysisConfiguration configuration,
@@ -206,36 +209,36 @@ public final class SonarLintEngine extends AbstractSonarLintEngine {
                         .putAllExtraProperties(configuration.extraProperties())
                         .addActiveRules(identifyActiveRules(configuration))
                         .setBaseDir(configuration.baseDir())
-                        .build();
-        try {
+.build();
+try {
             var analysisResults =
                     analysisEngine
-                            .post(
+.post(
                                     new AnalyzeCommand(
                                             configuration.moduleKey(),
                                             analysisConfig,
-                                            i ->
+i ->
                                                     issueListener.handle(
                                                             new DefaultClientIssue(
-                                                                    i,
+i,
                                                                     allRulesDefinitionsByKey.get(
                                                                             i.getRuleKey()))),
                                             logOutput),
                                     new ProgressMonitor(monitor))
-                            .get();
+.get();
             return analysisResults == null ? new AnalysisResults() : analysisResults;
         } catch (ExecutionException e) {
             throw SonarLintWrappedException.wrap(e);
         } catch (InterruptedException e) {
             Thread.currentThread().interrupt();
             throw SonarLintWrappedException.wrap(e);
-        }
     }
+}
 
     /** Returns all rule keys available at the provided version of Sonar Java. */
     public static Map<String, SonarLintRuleDefinition> getAllRulesDefinitionsByKey() {
         return allRulesDefinitionsByKey;
-    }
+}
 
     private Collection<ActiveRule> identifyActiveRules(
             StandaloneAnalysisConfiguration configuration) {
@@ -244,47 +247,47 @@ public final class SonarLintEngine extends AbstractSonarLintEngine {
 
         return allRulesDefinitionsByKey.values().stream()
                 .filter(isImplementedBySonarJavaPlugin(includedRules))
-                .map(
-                        rd -> {
+.map(
+rd -> {
                             ActiveRule activeRule =
                                     new ActiveRule(rd.getKey(), rd.getLanguage().getLanguageKey());
                             RuleKey ruleKey = RuleKey.parse(rd.getKey());
                             if (configuration.ruleParameters().containsKey(ruleKey)) {
                                 activeRule.setParams(configuration.ruleParameters().get(ruleKey));
-                            }
+}
                             return activeRule;
-                        })
+})
                 .collect(Collectors.toList());
-    }
+}
 
     private static Predicate<? super SonarLintRuleDefinition> isImplementedBySonarJavaPlugin(
             Set<String> includedRules) {
         return r -> includedRules.contains(r.getKey());
-    }
+}
 
     public void stop() {
         analysisEngine.stop();
-    }
+}
 
     public List<PluginDetails> getPluginDetails() {
         throw new RuntimeException("Not implemented"); // NOSONAR:S112
-    }
+}
 
-    /**
+/**
      * Overriding this class to ensure that plugin instance loader never closes throughout the
      * lifecycle of JVM.
-     */
+*/
     public static class LoadedPluginsThatDoesNotCloseLoader extends LoadedPlugins {
 
         public LoadedPluginsThatDoesNotCloseLoader(
                 Map<String, Plugin> pluginInstancesByKeys,
                 PluginInstancesLoader pluginInstancesLoader) {
             super(pluginInstancesByKeys, pluginInstancesLoader);
-        }
+}
 
-        @Override
+@Override
         public void unload() {
             // Prevent closing of `pluginInstancesLoader`
-        }
     }
 }
+}
\ No newline at end of file