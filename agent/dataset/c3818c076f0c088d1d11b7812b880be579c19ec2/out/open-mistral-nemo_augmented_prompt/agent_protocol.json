{
    "validate_diffs": [],
    "compile_maven": [],
    "read_file": [
        {
            "input": "nis/src/main/java/org/nem/nis/controller/AccountController.java",
            "output": "package org.nem.nis.controller;\n\nimport org.nem.core.crypto.*;\nimport org.nem.core.model.*;\nimport org.nem.core.model.ncc.*;\nimport org.nem.core.serialization.*;\nimport org.nem.nis.cache.ReadOnlyAccountStateCache;\nimport org.nem.nis.controller.annotations.*;\nimport org.nem.nis.controller.requests.*;\nimport org.nem.nis.controller.viewmodels.AccountImportanceViewModel;\nimport org.nem.nis.harvesting.*;\nimport org.nem.nis.service.AccountIo;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * REST API for interacting with Account objects.\n */\n@RestController\npublic class AccountController {\n\tprivate static final int MAX_UNCONFIRMED_TRANSACTIONS = 25;\n\tprivate final UnconfirmedTransactionsFilter unconfirmedTransactions;\n\tprivate final UnlockedAccounts unlockedAccounts;\n\tprivate final AccountIo accountIo;\n\tprivate final ReadOnlyAccountStateCache accountStateCache;\n\n\t@Autowired(required = true)\n\tAccountController(final UnconfirmedTransactionsFilter unconfirmedTransactions, final UnlockedAccounts unlockedAccounts,\n\t\t\tfinal AccountIo accountIo, final ReadOnlyAccountStateCache accountStateCache) {\n\t\tthis.unconfirmedTransactions = unconfirmedTransactions;\n\t\tthis.unlockedAccounts = unlockedAccounts;\n\t\tthis.accountIo = accountIo;\n\t\tthis.accountStateCache = accountStateCache;\n\t}\n\n\t/**\n\t * Unlocks an account for harvesting.\n\t *\n\t * @param privateKey The private key of the account to unlock.\n\t */\n\t@RequestMapping(value = \"/account/unlock\", method = RequestMethod.POST)\n\t@ClientApi\n\tpublic void accountUnlock(@Valid @RequestBody final PrivateKey privateKey) {\n\t\tfinal KeyPair keyPair = new KeyPair(privateKey);\n\t\tfinal Account account = new Account(keyPair);\n\t\tfinal UnlockResult result = this.unlockedAccounts.addUnlockedAccount(account);\n\n\t\tif (UnlockResult.SUCCESS != result) {\n\t\t\tthrow new IllegalArgumentException(result.toString());\n\t\t}\n\t}\n\n\t/**\n\t * Locks an account from harvesting.\n\t *\n\t * @param privateKey The private key of the account to lock.\n\t */\n\t@RequestMapping(value = \"/account/lock\", method = RequestMethod.POST)\n\t@ClientApi\n\tpublic void accountLock(@Valid @RequestBody final PrivateKey privateKey) {\n\t\tfinal Account account = new Account(new KeyPair(privateKey));\n\t\tthis.unlockedAccounts.removeUnlockedAccount(account);\n\t}\n\n\t// region [/local]/account/isunlocked\n\n\t/**\n\t * Checks if the given account is unlocked.\n\t *\n\t * @param address The address of the account to check.\n\t * @return \"ok\" if account is unlocked.\n\t */\n\t@RequestMapping(value = \"/account/isunlocked\", method = RequestMethod.POST)\n\t@ClientApi\n\tpublic String isAccountUnlocked(@RequestBody final Address address) {\n\t\tfinal Account account = new Account(address);\n\t\treturn this.unlockedAccounts.isAccountUnlocked(account) ? \"ok\" : \"nope\";\n\t}\n\n\t/**\n\t * Checks if the given account is unlocked.\n\t *\n\t * @param privateKey The private key of the account to check.\n\t * @return \"ok\" if account is unlocked.\n\t */\n\t@RequestMapping(value = \"/local/account/isunlocked\", method = RequestMethod.POST)\n\t@TrustedApi\n\t@ClientApi\n\tpublic String isAccountUnlocked(@Valid @RequestBody final PrivateKey privateKey) {\n\t\treturn this.isAccountUnlocked(Address.fromPublicKey(new KeyPair(privateKey).getPublicKey()));\n\t}\n\n\t// endregion\n\n\t// region unlocked/info\n\n\t/**\n\t * Gets information about the unlocked accounts.\n\t *\n\t * @return The unlocked accounts information.\n\t */\n\t@RequestMapping(value = \"/account/unlocked/info\", method = RequestMethod.POST)\n\t@ClientApi\n\tpublic SerializableEntity unlockedInfo() {\n\t\treturn serializer -> {\n\t\t\tserializer.writeInt(\"num-unlocked\", this.unlockedAccounts.size());\n\t\t\tserializer.writeInt(\"max-unlocked\", this.unlockedAccounts.maxSize());\n\t\t};\n\t}\n\n\t// endregion\n\n\t/**\n\t * Gets unconfirmed transaction information for the specified account.\n\t *\n\t * @param builder The account id builder.\n\t * @return Information about matching transactions\n\t */\n\t@RequestMapping(value = \"/account/unconfirmedTransactions\", method = RequestMethod.GET)\n\t@ClientApi\n\tpublic SerializableList<UnconfirmedTransactionMetaDataPair> transactionsUnconfirmed(final AccountIdBuilder builder) {\n\t\tfinal Address address = builder.build().getAddress();\n\t\tfinal Collection<Transaction> transactions = this.unconfirmedTransactions.getMostRecentTransactionsForAccount(address,\n\t\t\t\tMAX_UNCONFIRMED_TRANSACTIONS);\n\t\tfinal Collection<UnconfirmedTransactionMetaDataPair> pairs = transactions.stream().map(t -> {\n\t\t\tif (TransactionTypes.MULTISIG == t.getType()) {\n\t\t\t\tfinal MultisigTransaction multisig = (MultisigTransaction) t;\n\t\t\t\treturn new UnconfirmedTransactionMetaDataPair(t, new UnconfirmedTransactionMetaData(multisig.getOtherTransactionHash()));\n\t\t\t} else {\n\t\t\t\treturn new UnconfirmedTransactionMetaDataPair(t, new UnconfirmedTransactionMetaData((Hash) null));\n\t\t\t}\n\t\t}).collect(Collectors.toList());\n\t\treturn new SerializableList<>(pairs);\n\t}\n\n\t/**\n\t * Gets information about harvested blocks.\n\t *\n\t * @param idBuilder The id builder.\n\t * @param pageBuilder The page builder.\n\t * @return Information about harvested blocks.\n\t */\n\t@RequestMapping(value = \"/account/harvests\", method = RequestMethod.GET)\n\t@ClientApi\n\tpublic SerializableList<HarvestInfo> accountHarvests(final AccountIdBuilder idBuilder, final DefaultPageBuilder pageBuilder) {\n\t\tfinal Address address = idBuilder.build().getAddress();\n\t\tfinal DefaultPage page = pageBuilder.build();\n\t\treturn this.accountIo.getAccountHarvests(address, page.getId(), page.getPageSize());\n\t}\n\n\t/**\n\t * Gets the current account importance information for all accounts.\n\t *\n\t * @return Account importance information.\n\t */\n\t@RequestMapping(value = \"/account/importances\", method = RequestMethod.GET)\n\t@PublicApi\n\tpublic SerializableList<AccountImportanceViewModel> getImportances() {\n\t\tfinal List<AccountImportanceViewModel> viewModels = this.accountStateCache.contents().stream()\n\t\t\t\t.map(a -> new AccountImportanceViewModel(a.getAddress(), a.getImportanceInfo())).collect(Collectors.toList());\n\n\t\treturn new SerializableList<>(viewModels);\n\t}\n\n\t/**\n\t * API for creating new account data.\n\t *\n\t * @return A key pair view model.\n\t */\n\t@RequestMapping(value = \"/account/generate\", method = RequestMethod.GET)\n\t@TrustedApi\n\tpublic KeyPairViewModel generateAccount() {\n\t\tfinal NetworkInfo networkInfo = NetworkInfos.getDefault();\n\t\tfinal KeyPair keyPair = new KeyPair();\n\t\treturn new KeyPairViewModel(keyPair, networkInfo.getVersion());\n\t}\n}\n",
            "error": "",
            "span_id": 14881011336476269499
        }
    ],
    "get_directory_tree": [
        {
            "input": "nis/src/main/java/org/nem/nis/controller/",
            "output": "[\n    {\n        \"name\": \"NamespaceController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"interceptors\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"ConfiguredPrivateKeyValidator.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"UnauthorizedAccessException.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"InsecurePrivateKeyValidator.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AuditInterceptor.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"LocalHostInterceptor.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"LocalHostDetector.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BlockLoadingInterceptor.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"annotations\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"P2PApi.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ClientApi.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"TrustedApi.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AuthenticatedApi.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"PublicApi.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"MosaicDefinitionController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"NodeController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AccountTransfersController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"viewmodels\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"ExplorerBlockViewModel.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AccountImportanceViewModel.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ExplorerTransferViewModel.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"BlockDebugInfo.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"TransactionDebugInfo.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"ExtendedNodeExperiencePair.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AccountHistoricalDataViewModel.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"AccountInfoController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"requests\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"AccountHistoricalDataRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AuthenticatedBlockHeightRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AccountPrivateKeyTransactionsPage.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AuthenticatedChainRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"HashBuilder.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AccountTransactionsIdBuilder.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"NamespaceIdBuilder.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"HistoricalDataRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MosaicIdBuilder.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"DefaultPage.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AccountBatchHistoricalDataRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AuthenticatedUnconfirmedTransactionsRequest.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AccountHistoricalDataRequestBuilder.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AccountTransactionsId.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AccountNamespace.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"AccountNamespaceBuilder.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"DefaultPageBuilder.java\",\n                \"type\": \"file\"\n            }\n        ]\n    },\n    {\n        \"name\": \"PushController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AccountController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"AccountNamespaceInfoController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ExceptionControllerAdvice.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"BlockController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"ChainController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"MosaicController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TimeSynchronizationController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"LocalController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"TransactionController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"DebugController.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"BinderControllerAdvice.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"BlockExplorerController.java\",\n        \"type\": \"file\"\n    }\n]",
            "error": "",
            "span_id": 2758131963477737421
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}