diff --git a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java
index accadf7..f4d30c3 100644
--- a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java
+++ b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java
@@ -31,71 +31,72 @@ package com.jcabi.http.mock;
 
 import java.net.URI;
 import org.hamcrest.Matcher;
-import org.hamcrest.Matchers;
+-import org.hamcrest.Matchers;
++import org.hamcrest.CoreMatchers;
 
 /**
  * Convenient set of matchers for {@link MkQuery}.
- *
+*
  * @since 1.5
- */
+*/
 @SuppressWarnings("PMD.ProhibitPublicStaticMethods")
 public final class MkQueryMatchers {
 
-    /**
+/**
      * Private ctor.
-     */
+*/
     private MkQueryMatchers() {
         // Utility class - cannot instantiate
-    }
+}
 
-    /**
+/**
      * Matches the value of the MkQuery's body against the given matcher.
-     *
+*
      * @param matcher The matcher to use.
      * @return Matcher for checking the body of MkQuery
-     */
+*/
     public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {
         return new MkQueryBodyMatcher(matcher);
-    }
+}
 
-    /**
+/**
      * Matches the content of the MkQuery's header against the given matcher.
      * Note that for a valid match to occur, the header entry must exist
      * <i>and</i> its value(s) must match the given matcher.
-     *
+*
      * @param header The header to check.
      * @param matcher The matcher to use.
      * @return Matcher for checking the body of MkQuery
-     */
+*/
     public static Matcher<MkQuery> hasHeader(
         final String header,
         final Matcher<Iterable<? extends String>> matcher
-    ) {
+) {
         return new MkQueryHeaderMatcher(header, matcher);
-    }
+}
 
-    /**
+/**
      * Matches the path of the MkQuery.
-     *
+*
      * @param path The path to check.
      * @return Matcher for checking the path of MkQuery
-     */
+*/
     public static Matcher<MkQuery> hasPath(final Matcher<String> path) {
         return new MkQueryUriMatcher(
-            Matchers.<URI>hasProperty("rawPath", path)
-        );
-    }
+CoreCoreCoreCoreMatchers.<URI>hasProperty("rawPath", path)
+);
+}
 
-    /**
+/**
      * Matches the query of the MkQuery.
-     *
+*
      * @param query The query to check.
      * @return Matcher for checking the query of MkQuery
-     */
+*/
     public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {
         return new MkQueryUriMatcher(
-            Matchers.<URI>hasProperty("rawQuery", query)
-        );
-    }
-
+CoreCoreCoreCoreMatchers.<URI>hasProperty("rawQuery", query)
+);
 }
+
+}
\ No newline at end of file
diff --git a/src/main/java/com/jcabi/http/response/RestResponse.java b/src/main/java/com/jcabi/http/response/RestResponse.java
index 85edbfb..75defdf 100644
--- a/src/main/java/com/jcabi/http/response/RestResponse.java
+++ b/src/main/java/com/jcabi/http/response/RestResponse.java
@@ -45,7 +45,6 @@ import lombok.EqualsAndHashCode;
 import org.hamcrest.CustomMatcher;
 import org.hamcrest.Matcher;
 import org.hamcrest.MatcherAssert;
-import org.hamcrest.Matchers;
 
 /**
  * REST response.
@@ -207,7 +206,7 @@ public final class RestResponse extends AbstractResponse {
      * @since 0.9
      */
     public RestResponse assertHeader(final String name, final String value) {
-        return this.assertHeader(name, Matchers.hasItems(value));
+        return this.assertHeader(name, CoreMatchers.hasItems(value));
     }
 
     /**
@@ -243,7 +242,7 @@ public final class RestResponse extends AbstractResponse {
     public Request follow() {
         this.assertHeader(
             HttpHeaders.LOCATION,
-            Matchers.not(Matchers.emptyIterableOf(String.class))
+            CoreMatchers.not(CoreMatchers.emptyIterable())
         );
         return this.jump(
             URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))
@@ -281,7 +280,7 @@ public final class RestResponse extends AbstractResponse {
                 cookies
             ),
             cookie,
-            Matchers.notNullValue()
+            CoreMatchers.notNullValue()
         );
         assert cookie != null;
         return cookie;