{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\ndiff --git a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n+++ b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@ -31,7 +31,7 @@ import java.util.Map;\n import java.util.regex.Pattern;\n import javax.validation.constraints.NotNull;\n import org.hamcrest.Description;\n-import org.hamcrest.Matchers;\n+import org.hamcrest.MatcherAssert;\n import org.hamcrest.TypeSafeMatcher;\n \n /**\n@@ -58,7 +58,7 @@ public final class MkQueryMatchers {\n                 }\n             }\n         };\n-        Matchers.assertThat(query, matcher);\n+        MatcherAssert.assertThat(query, matcher);\n     }\n \n     /**\ndiff --git a/src/main/java/com/jcabi/http/response/RestResponse.java b/src/main/java/com/jcabi/http/response/RestResponse.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/response/RestResponse.java\n+++ b/src/main/java/com/jcabi/http/response/RestResponse.java\n@@ -45,7 +45,7 @@ public final class RestResponse extends AbstractResponse {\n      */\n     public RestResponse assertStatus(final int code) {\n         final int status = this.status();\n-        Matchers.assertThat(status, Matchers.is(code));\n+        MatcherAssert.assertThat(status, org.hamcrest.Matchers.is(code));\n         return this;\n     }\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 7 exact lines in a row:\n```\n}\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 7 exact lines in a row:\n```\n}\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
            "span_id": 8817146147554166938
        },
        {
            "input": "```diff\ndiff --git a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n+++ b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@ -31,7 +31,7 @@ import java.util.Map;\n import java.util.regex.Pattern;\n import javax.validation.constraints.NotNull;\n import org.hamcrest.Description;\n-import org.hamcrest.Matchers;\n+import org.hamcrest.MatcherAssert;\n import org.hamcrest.TypeSafeMatcher;\n \n /**\n@@ -54,11 +54,11 @@ public final class MkQueryMatchers {\n                     return false;\n                 }\n             }\n-            return true;\n+            return true; \n         }\n     };\n-    Matchers.assertThat(query, matcher);\n-}\n+    MatcherAssert.assertThat(query, matcher);\n+}  \n \n /**\n * ...\n@@ -66,7 +66,7 @@ public final class MkQueryMatchers {\n \n diff --git a/src/main/java/com/jcabi/http/response/RestResponse.java b/src/main/java/com/jcabi/http/response/RestResponse.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/response/RestResponse.java\n+++ b/src/main/java/com/jcabi/http/response/RestResponse.java\n@@ -45,7 +45,7 @@ public final class RestResponse extends AbstractResponse {\n      */\n     public RestResponse assertStatus(final int code) {\n         final int status = this.status();\n-        Matchers.assertThat(status, Matchers.is(code));\n+        MatcherAssert.assertThat(status, org.hamcrest.Matchers.is(code));\n         return this;\n     }\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 11 exact lines in a row:\n```\nreturn false;\n}\n}\nreturn true;\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n* ...\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 11 exact lines in a row:\n```\nreturn false;\n}\n}\nreturn true;\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n* ...\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
            "span_id": 13714801610979693701
        },
        {
            "input": "```diff\ndiff --git a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n+++ b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@ -31,7 +31,7 @@ import java.util.Map;\n import java.util.regex.Pattern;\n import javax.validation.constraints.NotNull;\n import org.hamcrest.Description;\n-import org.hamcrest.Matchers;\n+import org.hamcrest.MatcherAssert;\n import org.hamcrest.TypeSafeMatcher;\n \n /**\n@@ -54,7 +54,7 @@ public final class MkQueryMatchers {\n                 }\n             }\n             return true;\n-        }\n+        };\n+        MatcherAssert.assertThat(query, matcher);\n     };\n-    Matchers.assertThat(query, matcher);\n }\n \n /**\n@@ -66,7 +66,7 @@ public final class MkQueryMatchers {\n diff --git a/src/main/java/com/jcabi/http/response/RestResponse.java b/src/main/java/com/jcabi/http/response/RestResponse.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/response/RestResponse.java\n+++ b/src/main/java/com/jcabi/http/response/RestResponse.java\n@@ -45,7 +45,7 @@ public final class RestResponse extends AbstractResponse {\n      */\n     public RestResponse assertStatus(final int code) {\n         final int status = this.status();\n-        Matchers.assertThat(status, Matchers.is(code));\n+        MatcherAssert.assertThat(status, org.hamcrest.Matchers.is(code));\n         return this;\n     }\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 9 exact lines in a row:\n```\n}\n}\nreturn true;\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 9 exact lines in a row:\n```\n}\n}\nreturn true;\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
            "span_id": 440039629999458976
        },
        {
            "input": "```diff\ndiff --git a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n+++ b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@ -31,7 +31,7 @@ import java.util.Map;\n import java.util.regex.Pattern;\n import javax.validation.constraints.NotNull;\n import org.hamcrest.Description;\n-import org.hamcrest.Matchers;\n+import org.hamcrest.MatcherAssert;\n import org.hamcrest.TypeSafeMatcher;\n \n /**\n@@ -54,7 +54,7 @@ public final class MkQueryMatchers {\n                 }\n             }\n             return true;\n-        }\n+        };\n+        MatcherAssert.assertThat(query, matcher);\n     };\n-    Matchers.assertThat(query, matcher);\n }\n \n /**\n@@ -66,7 +66,7 @@ public final class MkQueryMatchers {\n diff --git a/src/main/java/com/jcabi/http/response/RestResponse.java b/src/main/java/com/jcabi/http/response/RestResponse.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/response/RestResponse.java\n+++ b/src/main/java/com/jcabi/http/response/RestResponse.java\n@@ -45,7 +45,7 @@ public final class RestResponse extends AbstractResponse {\n      */\n     public RestResponse assertStatus(final int code) {\n         final int status = this.status();\n-        Matchers.assertThat(status, Matchers.is(code));\n+        MatcherAssert.assertThat(status, org.hamcrest.Matchers.is(code));\n         return this;\n     }\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 9 exact lines in a row:\n```\n}\n}\nreturn true;\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 9 exact lines in a row:\n```\n}\n}\nreturn true;\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
            "span_id": 6158516433447432570
        },
        {
            "input": "```diff\ndiff --git a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n+++ b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@ -31,7 +31,7 @@ import java.util.Map;\n import java.util.regex.Pattern;\n import javax.validation.constraints.NotNull;\n import org.hamcrest.Description;\n-import org.hamcrest.Matchers;\n+import org.hamcrest.MatcherAssert;\n import org.hamcrest.TypeSafeMatcher;\n \n /**\n@@ -54,7 +54,7 @@ public final class MkQueryMatchers {\n                 }\n             }\n             return true;\n-        }\n+        };\n+        MatcherAssert.assertThat(query, matcher);\n     };\n-    Matchers.assertThat(query, matcher);\n }\n \n /**\n@@ -66,7 +66,7 @@ public final class MkQueryMatchers {\n diff --git a/src/main/java/com/jcabi/http/response/RestResponse.java b/src/main/java/com/jcabi/http/response/RestResponse.java\nindex 4d4d4d4..d4d4d4d 100644\n--- a/src/main/java/com/jcabi/http/response/RestResponse.java\n+++ b/src/main/java/com/jcabi/http/response/RestResponse.java\n@@ -45,7 +45,7 @@ public final class RestResponse extends AbstractResponse {\n      */\n     public RestResponse assertStatus(final int code) {\n         final int status = this.status();\n-        Matchers.assertThat(status, Matchers.is(code));\n+        MatcherAssert.assertThat(status, org.hamcrest.Matchers.is(code));\n         return this;\n     }\n \n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 9 exact lines in a row:\n```\n}\n}\nreturn true;\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 9 exact lines in a row:\n```\n}\n}\nreturn true;\n}\n};\nMatchers.assertThat(query, matcher);\n}\n/**\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/response/RestResponse.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/response/RestResponse.java does not contain these 7 exact lines in a row:\n```\n*/\npublic RestResponse assertStatus(final int code) {\nfinal int status = this.status();\nMatchers.assertThat(status, Matchers.is(code));\nreturn this;\n}\n```",
            "span_id": 16318374461505929538
        },
        {
            "input": "I'm still having trouble getting the diff to apply cleanly. I apologize, but I'm not able to generate a working diff to fix the issues caused by the dependency upgrade. The changes required seem to be more complex than I can handle within the constraints of this interaction. Perhaps we could explore other options, such as working with the project maintainers directly or seeking help from the community. I'm afraid I don't have a solution to provide at this time.",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 3658847985907279178
        }
    ],
    "read_file": [],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}