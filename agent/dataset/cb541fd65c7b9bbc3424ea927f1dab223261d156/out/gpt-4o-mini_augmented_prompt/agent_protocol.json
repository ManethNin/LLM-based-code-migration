{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n+++ src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@ -5,7 +5,7 @@\n import org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsEqual;\n \n /** \n  * Convenient set of matchers for {@link MkQuery}.\n@@ -20,7 +20,7 @@\n     public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n         return new MkQueryUriMatcher(\n-            Matchers.<URI>hasProperty(\\\"rawPath\\\", path)\n+            IsEqual.<URI>equalTo(path)\n         );\n     }\n \n@@ -25,7 +25,7 @@\n     public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n         return new MkQueryUriMatcher(\n-            Matchers.<URI>hasProperty(\\\"rawQuery\\\", query)\n+            IsEqual.<URI>equalTo(query)\n         );\n     }\n--- src/main/java/com/jcabi/http/response/RestResponse.java\n+++ src/main/java/com/jcabi/http/response/RestResponse.java\n@@ -7,7 +7,7 @@\n import org.hamcrest.Matchers;\n import org.hamcrest.core.IsEqual;\n \n /** \n  * REST response.\n@@ -48,7 +48,7 @@\n         return this.assertHeader(name, Matchers.hasItems(value));\n     }\n \n@@ -54,7 +54,7 @@\n         this.assertHeader(\n             HttpHeaders.LOCATION,\n-            Matchers.not(Matchers.emptyIterableOf(String.class))\n+            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n         );\n         return this.jump(\n             URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n         );\n     }\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------< com.jcabi:jcabi-http >------------------------\n[INFO] Building jcabi-http 2.0-SNAPSHOT\n[INFO] from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] Artifact log4j:log4j:jar:1.2.17 is present in the local repository, but cached from a remote repository ID that is unavailable in current build context, verifying that is downloadable from [central (https://repo.maven.apache.org/maven2, default, releases)]\n[INFO] Artifact log4j:log4j:jar:1.2.17 is present in the local repository, but cached from a remote repository ID that is unavailable in current build context, verifying that is downloadable from [central (https://repo.maven.apache.org/maven2, default, releases)]\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ jcabi-http ---\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ jcabi-http ---\n[INFO]\n[INFO] --- buildnumber:3.0.0:create (jcabi-build-number) @ jcabi-http ---\n[INFO] ShortRevision tag detected. The value is '7'.\n[INFO] Executing: /bin/sh -c cd '/mnt/repo' && 'git' 'rev-parse' '--verify' '--short=7' 'HEAD'\n[INFO] Working directory: /mnt/repo\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:03 min\n[INFO] Finished at: 2024-08-01T14:41:15Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.codehaus.mojo:buildnumber-maven-plugin:3.0.0:create (jcabi-build-number) on project jcabi-http: Cannot get the revision information from the scm repository :\n[ERROR] Exception while executing SCM command. Error while executing command. Error while executing process. Cannot run program \"git\" (in directory \"/mnt/repo\"): error=2, No such file or directory\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
                "updated_files": {
                    "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
                    "src/main/java/com/jcabi/http/response/RestResponse.java": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------< com.jcabi:jcabi-http >------------------------\n[INFO] Building jcabi-http 2.0-SNAPSHOT\n[INFO] from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] Artifact log4j:log4j:jar:1.2.17 is present in the local repository, but cached from a remote repository ID that is unavailable in current build context, verifying that is downloadable from [central (https://repo.maven.apache.org/maven2, default, releases)]\n[INFO] Artifact log4j:log4j:jar:1.2.17 is present in the local repository, but cached from a remote repository ID that is unavailable in current build context, verifying that is downloadable from [central (https://repo.maven.apache.org/maven2, default, releases)]\n[INFO]\n[INFO] --- clean:3.2.0:clean (default-clean) @ jcabi-http ---\n[INFO]\n[INFO] --- enforcer:3.1.0:enforce (enforce-maven) @ jcabi-http ---\n[INFO]\n[INFO] --- buildnumber:3.0.0:create (jcabi-build-number) @ jcabi-http ---\n[INFO] ShortRevision tag detected. The value is '7'.\n[INFO] Executing: /bin/sh -c cd '/mnt/repo' && 'git' 'rev-parse' '--verify' '--short=7' 'HEAD'\n[INFO] Working directory: /mnt/repo\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:03 min\n[INFO] Finished at: 2024-08-01T14:41:15Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.codehaus.mojo:buildnumber-maven-plugin:3.0.0:create (jcabi-build-number) on project jcabi-http: Cannot get the revision information from the scm repository :\n[ERROR] Exception while executing SCM command. Error while executing command. Error while executing process. Cannot run program \"git\" (in directory \"/mnt/repo\"): error=2, No such file or directory\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
            "span_id": 6624128140041294276
        },
        {
            "input": "```diff\n--- src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n+++ src/main/java/com/jcabi/http/mock/MkQueryMatchers.java\n@@ -5,7 +5,7 @@\n import org.hamcrest.Matcher;\n-import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsEqual;\n \n /** \n  * Convenient set of matchers for {@link MkQuery}.\n@@ -20,7 +20,7 @@\n     public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n         return new MkQueryUriMatcher(\n-            Matchers.<URI>hasProperty(\\\"rawPath\\\", path)\n+            IsEqual.<URI>equalTo(path)\n         );\n     }\n \n@@ -25,7 +25,7 @@\n     public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n         return new MkQueryUriMatcher(\n-            Matchers.<URI>hasProperty(\\\"rawQuery\\\", query)\n+            IsEqual.<URI>equalTo(query)\n         );\n     }\n--- src/main/java/com/jcabi/http/response/RestResponse.java\n+++ src/main/java/com/jcabi/http/response/RestResponse.java\n@@ -7,7 +7,7 @@\n import org.hamcrest.Matchers;\n import org.hamcrest.core.IsEqual;\n \n /** \n  * REST response.\n@@ -48,7 +48,7 @@\n         return this.assertHeader(name, Matchers.hasItems(value));\n     }\n \n@@ -54,7 +54,7 @@\n         this.assertHeader(\n             HttpHeaders.LOCATION,\n-            Matchers.not(Matchers.emptyIterableOf(String.class))\n+            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n         );\n         return this.jump(\n             URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n         );\n     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 5 exact lines in a row:\n```\npublic static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\nreturn new MkQueryUriMatcher(\nMatchers.<URI>hasProperty(\\\"rawQuery\\\", query)\n);\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/jcabi/http/mock/MkQueryMatchers.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/jcabi/http/mock/MkQueryMatchers.java does not contain these 5 exact lines in a row:\n```\npublic static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\nreturn new MkQueryUriMatcher(\nMatchers.<URI>hasProperty(\\\"rawQuery\\\", query)\n);\n}\n```",
            "span_id": 14280963197198781493
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.Matchers;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 11467729578466593487
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            Matchers.not(Matchers.emptyIterableOf(String.class))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 1129514005528565574
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 14394127151672663743
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 18006189169653490011
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 6915168605463953269
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 12055417139879377109
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 289374271506333326
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 1040182782227981053
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 17299856091481588060
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 1081348093356890125
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 13003996984148052003
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 9101432597173288671
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 11358848423544566243
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 7426445321708277510
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 1212337923402914592
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 4530462423258332059
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 10550669304977415597
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 6917443028315159332
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 9844126340590258347
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 9634802738461593065
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 17769584919602208955
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 8853403448763138608
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 18040122987290042089
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 7378269903592365987
        },
        {
            "input": "src/main/java/com/jcabi/http/mock/MkQueryMatchers.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.mock;\n\nimport java.net.URI;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.core.IsEqual;\n\n/**\n * Convenient set of matchers for {@link MkQuery}.\n *\n * @since 1.5\n */\n@SuppressWarnings(\"PMD.ProhibitPublicStaticMethods\")\npublic final class MkQueryMatchers {\n\n    /**\n     * Private ctor.\n     */\n    private MkQueryMatchers() {\n        // Utility class - cannot instantiate\n    }\n\n    /**\n     * Matches the value of the MkQuery's body against the given matcher.\n     *\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasBody(final Matcher<String> matcher) {\n        return new MkQueryBodyMatcher(matcher);\n    }\n\n    /**\n     * Matches the content of the MkQuery's header against the given matcher.\n     * Note that for a valid match to occur, the header entry must exist\n     * <i>and</i> its value(s) must match the given matcher.\n     *\n     * @param header The header to check.\n     * @param matcher The matcher to use.\n     * @return Matcher for checking the body of MkQuery\n     */\n    public static Matcher<MkQuery> hasHeader(\n        final String header,\n        final Matcher<Iterable<? extends String>> matcher\n    ) {\n        return new MkQueryHeaderMatcher(header, matcher);\n    }\n\n    /**\n     * Matches the path of the MkQuery.\n     *\n     * @param path The path to check.\n     * @return Matcher for checking the path of MkQuery\n     */\n    public static Matcher<MkQuery> hasPath(final Matcher<String> path) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(path)\n            Matchers.<URI>hasProperty(\"rawPath\", path)\n        );\n    }\n\n    /**\n     * Matches the query of the MkQuery.\n     *\n     * @param query The query to check.\n     * @return Matcher for checking the query of MkQuery\n     */\n    public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {\n        return new MkQueryUriMatcher(\n            IsEqual.<URI>equalTo(query)\n            Matchers.<URI>hasProperty(\"rawQuery\", query)\n        );\n    }\n\n}\n",
            "error": "",
            "span_id": 7023243263394630129
        },
        {
            "input": "src/main/java/com/jcabi/http/response/RestResponse.java",
            "output": "/*\n * Copyright (c) 2011-2022, jcabi.com\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met: 1) Redistributions of source code must retain the above\n * copyright notice, this list of conditions and the following\n * disclaimer. 2) Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution. 3) Neither the name of the jcabi.com nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jcabi.http.response;\n\nimport com.jcabi.aspects.Immutable;\nimport com.jcabi.http.Request;\nimport com.jcabi.http.Response;\nimport com.jcabi.log.Logger;\nimport java.net.HttpCookie;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.HttpHeaders;\nimport lombok.EqualsAndHashCode;\nimport org.hamcrest.CustomMatcher;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\n\n/**\n * REST response.\n *\n * <p>This response decorator is able to make basic assertions on\n * HTTP response and manipulate with it afterwords, for example:\n *\n * <pre> String name = new JdkRequest(\"http://my.example.com\")\n *   .fetch()\n *   .as(RestResponse.class)\n *   .assertStatus(200)\n *   .assertBody(Matchers.containsString(\"hello, world!\"))\n *   .assertHeader(\"Content-Type\", Matchers.hasItem(\"text/plain\"))\n *   .jump(URI.create(\"/users\"))\n *   .fetch();</pre>\n *\n * <p>Method {@link #jump(URI)} creates a new instance of class\n * {@link Request} with all cookies transferred from the current one.\n *\n * <p>The class is immutable and thread-safe.\n *\n * @since 0.8\n */\n@Immutable\n@EqualsAndHashCode(callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class RestResponse extends AbstractResponse {\n\n    /**\n     * Public ctor.\n     * @param resp Response\n     */\n    public RestResponse(final Response resp) {\n        super(resp);\n    }\n\n    /**\n     * Assert using custom matcher.\n     * @param matcher The matcher to use\n     * @return The same object\n     */\n    public RestResponse assertThat(final Matcher<Response> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\"HTTP response is not valid: %s\", this),\n            this,\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided absolute value,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param status Expected status code\n     * @return The same object\n     */\n    public RestResponse assertStatus(final int status) {\n        final String message = String.format(\n            \"HTTP response with status %d\", status\n        );\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not equal to %d:%n%s\",\n                status, this\n            ),\n            this,\n            new RestResponse.StatusMatch(message, status)\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response status code against the provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher Matcher to validate status code\n     * @return This object\n     */\n    public RestResponse assertStatus(final Matcher<Integer> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response status is not the one expected:%n%s\",\n                this\n            ),\n            this.status(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBody(final Matcher<String> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response body content is not valid:%n%s\",\n                this\n            ),\n            this.body(), matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP response body content against provided matcher,\n     * and throws {@link AssertionError} in case of mismatch.\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertBinary(final Matcher<byte[]> matcher) {\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP response binary content is not valid:%n%s\",\n                this\n            ), this.binary(),\n            matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     *\n     * <p>The iterator for the matcher will always be a real object an never\n     * {@code NULL}, even if such a header is absent in the response. If the\n     * header is absent the iterable will be empty.\n     *\n     * @param name Name of the header to match\n     * @param matcher The matcher to use\n     * @return This object\n     */\n    public RestResponse assertHeader(\n        final String name,\n        final Matcher<Iterable<String>> matcher\n    ) {\n        Iterable<String> values = this.headers().get(name);\n        if (values == null) {\n            values = Collections.emptyList();\n        }\n        MatcherAssert.assertThat(\n            String.format(\n                \"HTTP header '%s' is not valid:%n%s\",\n                name, this\n            ),\n            values, matcher\n        );\n        return this;\n    }\n\n    /**\n     * Verifies HTTP header against provided matcher, and throws\n     * {@link AssertionError} in case of mismatch.\n     * @param name Name of the header to match\n     * @param value The value to expect in one of the headers\n     * @return This object\n     * @since 0.9\n     */\n    public RestResponse assertHeader(final String name, final String value) {\n        return this.assertHeader(name, Matchers.hasItems(value));\n    }\n\n    /**\n     * Jump to a new location.\n     * @param uri Destination to jump to\n     * @return New request\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Request jump(final URI uri) {\n        Request req = this.back().uri()\n            .set(this.back().uri().get().resolve(uri))\n            .back();\n        final Map<String, List<String>> headers = this.headers();\n        if (headers.containsKey(HttpHeaders.SET_COOKIE)) {\n            for (final String header : headers.get(HttpHeaders.SET_COOKIE)) {\n                for (final HttpCookie cookie : HttpCookie.parse(header)) {\n                    req = req.header(\n                        HttpHeaders.COOKIE,\n                        String.format(\n                            \"%s=%s\", cookie.getName(), cookie.getValue()\n                        )\n                    );\n                }\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Follow LOCATION header.\n     * @return New request\n     */\n    public Request follow() {\n        this.assertHeader(\n            HttpHeaders.LOCATION,\n            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))\n        );\n        return this.jump(\n            URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))\n        );\n    }\n\n    /**\n     * Get one cookie by name.\n     * @param name Cookie name\n     * @return Cookie found\n     */\n    @SuppressWarnings(\"PMD.UseConcurrentHashMap\")\n    public Cookie cookie(final String name) {\n        final Map<String, List<String>> headers = this.headers();\n        MatcherAssert.assertThat(\n            \"cookies should be set in HTTP header\",\n            headers.containsKey(HttpHeaders.SET_COOKIE)\n        );\n        final List<String> cookies = headers.get(HttpHeaders.SET_COOKIE);\n        final Iterator<String> iterator = cookies.iterator();\n        Cookie cookie = null;\n        while (iterator.hasNext()) {\n            final String obj = iterator.next();\n            for (final HttpCookie candidate : HttpCookie.parse(obj)) {\n                if (candidate.getName().equals(name)) {\n                    cookie = RestResponse.cookie(candidate);\n                    break;\n                }\n            }\n        }\n        MatcherAssert.assertThat(\n            Logger.format(\n                \"cookie '%s' not found in Set-Cookie header: '%s'\",\n                name,\n                cookies\n            ),\n            cookie,\n            Matchers.notNullValue()\n        );\n        assert cookie != null;\n        return cookie;\n    }\n\n    /**\n     * Convert HTTP cookie to a standard one.\n     * @param cookie HTTP cookie\n     * @return Regular one\n     */\n    private static Cookie cookie(final HttpCookie cookie) {\n        return new Cookie(\n            cookie.getName(),\n            cookie.getValue(),\n            cookie.getPath(),\n            cookie.getDomain(),\n            cookie.getVersion()\n        );\n    }\n\n    /**\n     * Status matcher.\n     *\n     * @since 1.2\n     */\n    private static final class StatusMatch extends CustomMatcher<Response> {\n\n        /**\n         * HTTP status to check.\n         */\n        private final transient int status;\n\n        /**\n         * Ctor.\n         * @param msg Message to show\n         * @param sts HTTP status to check\n         */\n        StatusMatch(final String msg, final int sts) {\n            super(msg);\n            this.status = sts;\n        }\n\n        @Override\n        public boolean matches(final Object resp) {\n            return Response.class.cast(resp).status() == this.status;\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 10598432387090765099
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}