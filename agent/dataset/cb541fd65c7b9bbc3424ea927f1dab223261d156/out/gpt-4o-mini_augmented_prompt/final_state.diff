diff --git a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java
index accadf7..f736d8d 100644
--- a/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java
+++ b/src/main/java/com/jcabi/http/mock/MkQueryMatchers.java
@@ -31,7 +31,7 @@ package com.jcabi.http.mock;
 
 import java.net.URI;
 import org.hamcrest.Matcher;
-import org.hamcrest.Matchers;
+import org.hamcrest.core.IsEqual;
 
 /**
  * Convenient set of matchers for {@link MkQuery}.
@@ -82,6 +82,7 @@ public final class MkQueryMatchers {
      */
     public static Matcher<MkQuery> hasPath(final Matcher<String> path) {
         return new MkQueryUriMatcher(
+            IsEqual.<URI>equalTo(path)
             Matchers.<URI>hasProperty("rawPath", path)
         );
     }
@@ -94,6 +95,7 @@ public final class MkQueryMatchers {
      */
     public static Matcher<MkQuery> hasQuery(final Matcher<String> query) {
         return new MkQueryUriMatcher(
+            IsEqual.<URI>equalTo(query)
             Matchers.<URI>hasProperty("rawQuery", query)
         );
     }
diff --git a/src/main/java/com/jcabi/http/response/RestResponse.java b/src/main/java/com/jcabi/http/response/RestResponse.java
index 85edbfb..7dd8a7f 100644
--- a/src/main/java/com/jcabi/http/response/RestResponse.java
+++ b/src/main/java/com/jcabi/http/response/RestResponse.java
@@ -243,7 +243,7 @@ public final class RestResponse extends AbstractResponse {
     public Request follow() {
         this.assertHeader(
             HttpHeaders.LOCATION,
-            Matchers.not(Matchers.emptyIterableOf(String.class))
+            IsEqual.not(IsEqual.equalTo(Collections.emptyList()))
         );
         return this.jump(
             URI.create(this.headers().get(HttpHeaders.LOCATION).get(0))