{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "```diff\n--- a/src/main/java/org/simplify4u/plugins/utils/MavenCompilerUtils.java\n+++ b/src/main/java/org/simplify4u/plugins/utils/MavenCompilerUtils.java\n@@ -19,7 +19,7 @@ package org.simplify4u.plugins.utils;\n import org.apache.maven.artifact.Artifact;\n import org.apache.maven.model.Plugin;\n import org.apache.maven.repository.RepositorySystem;\n-import org.codehaus.plexus.util.xml.Xpp3Dom;\n+import org.codehaus.plexus.configuration.PlexusConfiguration;\n \n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -74,8 +74,8 @@ public final class MavenCompilerUtils {\n         if (config == null) {\n             return emptySet();\n         }\n-        if (config instanceof Xpp3Dom) {\n-            return stream(((Xpp3Dom) config).getChildren(\"annotationProcessorPaths\"))\n+        if (config instanceof PlexusConfiguration) {\n+            return stream(((PlexusConfiguration) config).getChildren(\"annotationProcessorPaths\"))\n                     .flatMap(aggregate -> stream(aggregate.getChildren(\"path\")))\n                     .map(processor -> system.createArtifact(\n                             extractChildValue(processor, \"groupId\"),\n@@ -105,8 +105,8 @@ public final class MavenCompilerUtils {\n      * @param name the child node name\n      * @return Returns child value if child node present or otherwise empty string.\n      */\n-    private static String extractChildValue(Xpp3Dom node, String name) {\n-        final Xpp3Dom child = node.getChild(name);\n+    private static String extractChildValue(PlexusConfiguration node, String name) {\n+        final PlexusConfiguration child = node.getChild(name);\n         return child == null ? \"\" : child.getValue();\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/org/simplify4u/plugins/utils/MavenCompilerUtils.java": "/*\n * Copyright 2019 Danny van Heumen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.simplify4u.plugins.utils;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.model.Plugin;\nimport org.apache.maven.repository.RepositorySystem;\nimport org.codehaus.plexus.configuration.PlexusConfiguration;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport static java.util.Arrays.stream;\nimport static java.util.Collections.emptySet;\nimport static java.util.Objects.requireNonNull;\n\n/**\n * Utilities specific for org.apache.maven.plugins:maven-compiler-plugin.\n */\npublic final class MavenCompilerUtils {\n\n    private static final String GROUPID = \"org.apache.maven.plugins\";\n    private static final String ARTIFACTID = \"maven-compiler-plugin\";\n\n    private static final String PACKAGING = \"jar\";\n\n    private MavenCompilerUtils() {\n        // No need to instantiate utility class.\n    }\n\n    /**\n     * Check if provided plugin is org.apache.maven.plugins:maven-compiler-plugin.\n     *\n     * @param plugin any plugin instance\n     * @return Returns true iff plugin is maven-compiler-plugin.\n     */\n    public static boolean checkCompilerPlugin(Plugin plugin) {\n        return GROUPID.equals(plugin.getGroupId()) && ARTIFACTID.equals(plugin.getArtifactId());\n    }\n\n    /**\n     * Extract annotation processors for maven-compiler-plugin configuration.\n     *\n     * @param system maven repository system\n     * @param plugin maven-compiler-plugin plugin\n     * @return Returns set of maven artifacts configured as annotation processors.\n     */\n    public static Set<Artifact> extractAnnotationProcessors(RepositorySystem system, Plugin plugin) {\n        requireNonNull(system);\n        if (!checkCompilerPlugin(plugin)) {\n            throw new IllegalArgumentException(\"Plugin is not '\" + GROUPID + \":\" + ARTIFACTID + \"'.\");\n        }\n        final Object config = plugin.getConfiguration();\n        if (config == null) {\n            return emptySet();\n        }\n        if (config instanceof PlexusConfiguration) {\n            return stream(((PlexusConfiguration) config).getChildren(\"annotationProcessorPaths\"))\n                    .flatMap(aggregate -> stream(aggregate.getChildren(\"path\")))\n                    .map(processor -> system.createArtifact(\n                            extractChildValue(processor, \"groupId\"),\n                            extractChildValue(processor, \"artifactId\"),\n                            extractChildValue(processor, \"version\"),\n                            PACKAGING))\n                    // A path specification is automatically ignored in maven-compiler-plugin if version is absent,\n                    // therefore there is little use in logging incomplete paths that are filtered out.\n                    .filter(a -> !a.getGroupId().isEmpty())\n                    .filter(a -> !a.getArtifactId().isEmpty())\n                    .filter(a -> !a.getVersion().isEmpty())\n                    .collect(Collectors.toSet());\n        }\n        // It is expected that this will never occur due to all Configuration instances of all plugins being provided as\n        // XML document. If this happens to occur on very old plugin versions, we can safely add the type support and\n        // simply return an empty set.\n        throw new UnsupportedOperationException(\"Please report that an unsupported type of configuration container\" +\n                \" was encountered: \" + config.getClass());\n    }\n\n    /**\n     * Extract child value if child is present, or return empty string if absent.\n     *\n     * @param node the parent node\n     * @param name the child node name\n     * @return Returns child value if child node present or otherwise empty string.\n     */\n    private static String extractChildValue(PlexusConfiguration node, String name) {\n        final PlexusConfiguration child = node.getChild(name);\n        return child == null ? \"\" : child.getValue();\n    }\n}\n"
                },
                "compile_error_details": {
                    "src/test/java/org/simplify4u/plugins/utils/MavenCompilerUtilsTest.java": {
                        "21": {
                            "lines": [
                                {
                                    "line_no": 20,
                                    "content": "import org.apache.maven.repository.RepositorySystem;"
                                },
                                {
                                    "line_no": 21,
                                    "content": "import org.codehaus.plexus.util.xml.Xpp3Dom;"
                                },
                                {
                                    "line_no": 22,
                                    "content": "import org.junit.jupiter.api.Test;"
                                }
                            ],
                            "error_texts": [
                                "[21,36] package org.codehaus.plexus.util.xml does not exist\n"
                            ]
                        },
                        "109": {
                            "lines": [
                                {
                                    "line_no": 108,
                                    "content": ""
                                },
                                {
                                    "line_no": 109,
                                    "content": "    private static Xpp3Dom createConfiguration() {"
                                },
                                {
                                    "line_no": 110,
                                    "content": "        final Xpp3Dom config = new Xpp3Dom(\"configuration\");"
                                }
                            ],
                            "error_texts": [
                                "[109,20] cannot find symbol\nsymbol: class Xpp3Dom\nlocation: class org.simplify4u.plugins.utils.MavenCompilerUtilsTest\n",
                                "[109,20] cannot find symbol\n"
                            ]
                        },
                        "122": {
                            "lines": [
                                {
                                    "line_no": 121,
                                    "content": ""
                                },
                                {
                                    "line_no": 122,
                                    "content": "    private static Xpp3Dom createPath(String groupId, String artifactId, String version) {"
                                },
                                {
                                    "line_no": 123,
                                    "content": "        final Xpp3Dom path = new Xpp3Dom(\"path\");"
                                }
                            ],
                            "error_texts": [
                                "[122,20] cannot find symbol\nsymbol: class Xpp3Dom\nlocation: class org.simplify4u.plugins.utils.MavenCompilerUtilsTest\n",
                                "[122,20] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 9743307983733973530
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/org/simplify4u/plugins/utils/MavenCompilerUtils.java",
            "output": "/*\n * Copyright 2019 Danny van Heumen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.simplify4u.plugins.utils;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.model.Plugin;\nimport org.apache.maven.repository.RepositorySystem;\nimport org.codehaus.plexus.util.xml.Xpp3Dom;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport static java.util.Arrays.stream;\nimport static java.util.Collections.emptySet;\nimport static java.util.Objects.requireNonNull;\n\n/**\n * Utilities specific for org.apache.maven.plugins:maven-compiler-plugin.\n */\npublic final class MavenCompilerUtils {\n\n    private static final String GROUPID = \"org.apache.maven.plugins\";\n    private static final String ARTIFACTID = \"maven-compiler-plugin\";\n\n    private static final String PACKAGING = \"jar\";\n\n    private MavenCompilerUtils() {\n        // No need to instantiate utility class.\n    }\n\n    /**\n     * Check if provided plugin is org.apache.maven.plugins:maven-compiler-plugin.\n     *\n     * @param plugin any plugin instance\n     * @return Returns true iff plugin is maven-compiler-plugin.\n     */\n    public static boolean checkCompilerPlugin(Plugin plugin) {\n        return GROUPID.equals(plugin.getGroupId()) && ARTIFACTID.equals(plugin.getArtifactId());\n    }\n\n    /**\n     * Extract annotation processors for maven-compiler-plugin configuration.\n     *\n     * @param system maven repository system\n     * @param plugin maven-compiler-plugin plugin\n     * @return Returns set of maven artifacts configured as annotation processors.\n     */\n    public static Set<Artifact> extractAnnotationProcessors(RepositorySystem system, Plugin plugin) {\n        requireNonNull(system);\n        if (!checkCompilerPlugin(plugin)) {\n            throw new IllegalArgumentException(\"Plugin is not '\" + GROUPID + \":\" + ARTIFACTID + \"'.\");\n        }\n        final Object config = plugin.getConfiguration();\n        if (config == null) {\n            return emptySet();\n        }\n        if (config instanceof Xpp3Dom) {\n            return stream(((Xpp3Dom) config).getChildren(\"annotationProcessorPaths\"))\n                    .flatMap(aggregate -> stream(aggregate.getChildren(\"path\")))\n                    .map(processor -> system.createArtifact(\n                            extractChildValue(processor, \"groupId\"),\n                            extractChildValue(processor, \"artifactId\"),\n                            extractChildValue(processor, \"version\"),\n                            PACKAGING))\n                    // A path specification is automatically ignored in maven-compiler-plugin if version is absent,\n                    // therefore there is little use in logging incomplete paths that are filtered out.\n                    .filter(a -> !a.getGroupId().isEmpty())\n                    .filter(a -> !a.getArtifactId().isEmpty())\n                    .filter(a -> !a.getVersion().isEmpty())\n                    .collect(Collectors.toSet());\n        }\n        // It is expected that this will never occur due to all Configuration instances of all plugins being provided as\n        // XML document. If this happens to occur on very old plugin versions, we can safely add the type support and\n        // simply return an empty set.\n        throw new UnsupportedOperationException(\"Please report that an unsupported type of configuration container\" +\n                \" was encountered: \" + config.getClass());\n    }\n\n    /**\n     * Extract child value if child is present, or return empty string if absent.\n     *\n     * @param node the parent node\n     * @param name the child node name\n     * @return Returns child value if child node present or otherwise empty string.\n     */\n    private static String extractChildValue(Xpp3Dom node, String name) {\n        final Xpp3Dom child = node.getChild(name);\n        return child == null ? \"\" : child.getValue();\n    }\n}\n",
            "error": "",
            "span_id": 14256829825506779316
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}