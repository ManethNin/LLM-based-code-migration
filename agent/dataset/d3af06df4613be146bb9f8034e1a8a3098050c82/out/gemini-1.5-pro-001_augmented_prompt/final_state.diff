diff --git a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java
index 0198464..c987cc2 100644
--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java
+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JadlerHandler.java
@@ -36,8 +36,8 @@ class JadlerHandler extends AbstractHandler {
 
 
     @Override
-    public void handle(final String target, final Request baseRequest, final HttpServletRequest request,
-            final HttpServletResponse response) throws IOException, ServletException {
+public void handle(String target, Request baseRequest, HttpServletRequest request,
+HttpServletResponse response) throws IOException, ServletException {
 
         final net.jadler.Request req = RequestUtils.convert(request);
         final StubResponse stubResponse = this.requestManager.provideStubResponseFor(req);
diff --git a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
index a501e45..2aad280 100644
--- a/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
+++ b/jadler-jetty/src/main/java/net/jadler/stubbing/server/jetty/JettyStubHttpServer.java
@@ -16,7 +16,7 @@ import org.eclipse.jetty.server.nio.SelectChannelConnector;
 
 /**
  * Default stub http server implementation using Jetty as an http server.
- */
+*/
 public class JettyStubHttpServer implements StubHttpServer {
 
     private static final Logger logger = LoggerFactory.getLogger(JettyStubHttpServer.class);
@@ -24,59 +24,69 @@ public class JettyStubHttpServer implements StubHttpServer {
     private final Connector httpConnector;
 
     public JettyStubHttpServer() {
-        this(0);
-    }
-    
+this(0);
+}
+
+@Override
 
     public JettyStubHttpServer(final int port) {
         this.server = new Server();
         this.server.setSendServerVersion(false);
         this.server.setSendDateHeader(true);
-        
+
         this.httpConnector = new SelectChannelConnector();
         this.httpConnector.setPort(port);
         server.addConnector(this.httpConnector);
-    }
-    
+}
+
+@Override
 
-    /**
+/**
      * {@inheritDoc}
-     */
-    @Override
+
+@Override*/
+@Override
     public void registerRequestManager(final RequestManager ruleProvider) {
         Validate.notNull(ruleProvider, "ruleProvider cannot be null");
 
         server.setHandler(new JadlerHandler(ruleProvider));
-    }
-    
+}
 
-    /**
+@Override
+
+/**
      * {@inheritDoc}
-     */
-    @Override
+
+@Override*/
+@Override
     public void start() throws Exception {
         logger.debug("starting jetty");
-        server.start();
+this.this.server.start();
         logger.debug("jetty started");
-    }
+}
 
+@Override
 
-    /**
+/**
      * {@inheritDoc}
-     */
-    @Override
+
+@Override*/
+@Override
     public void stop() throws Exception {
         logger.debug("stopping jetty");
         server.stop();
         logger.debug("jetty stopped");
-    }
-    
+}
+
+@Override
 
-    /**
+/**
      * {@inheritDoc}
-     */
-    @Override
+
+@Override*/
+@Override
     public int getPort() {
         return httpConnector.getLocalPort();
-    }
-}
\ No newline at end of file
+}
+
+@Override}
\ No newline at end of file