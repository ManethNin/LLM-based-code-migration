{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "I apologize for the oversight. Let me provide the complete diff for all the changes:\n\n```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -3,7 +3,6 @@\n import com.google.cloud.pubsublite.CloudZone;\n import com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n import com.google.cloud.pubsublite.TopicName;\n import com.google.cloud.pubsublite.TopicPath;\n import com.google.cloud.pubsublite.internal.Publisher;\n@@ -20,7 +19,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n   private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n \n   @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<Long> newPublisher(Map<String, String> params) {\n     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n     TopicPath topic =\n@@ -37,7 +36,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n             SinglePartitionPublisherBuilder.newBuilder()\n                 .setTopic(topic)\n                 .setPartition(partition)\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK))\n                 .build());\n     return builder.build();\n   }\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -1,10 +1,9 @@\n package com.google.pubsublite.kafka.sink;\n \n-import com.google.cloud.pubsublite.PublishMetadata;\n import com.google.cloud.pubsublite.internal.Publisher;\n import java.util.Map;\n \n interface PublisherFactory {\n \n-  Publisher<PublishMetadata> newPublisher(Map<String, String> params);\n+  Publisher<Long> newPublisher(Map<String, String> params);\n }\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java\n@@ -4,7 +4,6 @@ import static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n \n import com.google.api.core.ApiService.State;\n import com.google.cloud.pubsublite.Message;\n-import com.google.cloud.pubsublite.PublishMetadata;\n import com.google.cloud.pubsublite.internal.Publisher;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableListMultimap;\n@@ -26,7 +25,7 @@ import org.apache.kafka.connect.sink.SinkTask;\n public class PubSubLiteSinkTask extends SinkTask {\n \n   private final PublisherFactory factory;\n-  private @Nullable Publisher<PublishMetadata> publisher;\n+  private @Nullable Publisher<Long> publisher;\n \n   @VisibleForTesting\n   PubSubLiteSinkTask(PublisherFactory factory) {\n```\n\nNow, let's apply these changes:",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "incompatible types: com.google.cloud.pubsublite.internal.Publisher<com.google.cloud.pubsublite.MessageMetadata> cannot be converted to com.google.cloud.pubsublite.internal.Publisher<java.lang.Long>\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n  public Publisher<Long> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setClientId(PubsubContext.of(FRAMEWORK))\n                .build());\n    return builder.build();\n  }\n}\n",
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport java.util.Map;\n\ninterface PublisherFactory {\n\n  Publisher<Long> newPublisher(Map<String, String> params);\n}\n",
                    "src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n\nimport com.google.api.core.ApiService.State;\nimport com.google.cloud.pubsublite.Message;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.collect.ImmutableListMultimap;\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.util.Timestamps;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport javax.annotation.Nullable;\nimport org.apache.kafka.clients.consumer.OffsetAndMetadata;\nimport org.apache.kafka.common.TopicPartition;\nimport org.apache.kafka.common.utils.AppInfoParser;\nimport org.apache.kafka.connect.header.ConnectHeaders;\nimport org.apache.kafka.connect.header.Header;\nimport org.apache.kafka.connect.sink.SinkRecord;\nimport org.apache.kafka.connect.sink.SinkTask;\n\npublic class PubSubLiteSinkTask extends SinkTask {\n\n  private final PublisherFactory factory;\n  private @Nullable Publisher<Long> publisher;\n\n  @VisibleForTesting\n  PubSubLiteSinkTask(PublisherFactory factory) {\n    this.factory = factory;\n  }\n\n  public PubSubLiteSinkTask() {\n    this(new PublisherFactoryImpl());\n  }\n\n  @Override\n  public String version() {\n    return AppInfoParser.getVersion();\n  }\n\n  @Override\n  public void start(Map<String, String> map) {\n    if (publisher != null) {\n      throw new IllegalStateException(\"Called start when publisher already exists.\");\n    }\n    publisher = factory.newPublisher(map);\n    publisher.startAsync().awaitRunning();\n  }\n\n  @Override\n  public void put(Collection<SinkRecord> collection) {\n    if (publisher.state() != State.RUNNING) {\n      if (publisher.state() == State.FAILED) {\n        throw new IllegalStateException(\"Publisher has failed.\", publisher.failureCause());\n      } else {\n        throw new IllegalStateException(\"Publisher not currently running.\");\n      }\n    }\n    for (SinkRecord record : collection) {\n      Message.Builder message = Message.builder();\n      if (record.key() != null) {\n        message.setKey(encodeToBytes(record.keySchema(), record.key()));\n      }\n      if (record.value() != null) {\n        message.setData(encodeToBytes(record.valueSchema(), record.value()));\n      }\n      ImmutableListMultimap.Builder<String, ByteString> attributes =\n          ImmutableListMultimap.builder();\n      getRecordHeaders(record)\n          .forEach(\n              header ->\n                  attributes.put(\n                      header.key(), Schemas.encodeToBytes(header.schema(), header.value())));\n      if (record.topic() != null) {\n        attributes.put(Constants.KAFKA_TOPIC_HEADER, ByteString.copyFromUtf8(record.topic()));\n      }\n      if (record.kafkaPartition() != null) {\n        attributes.put(\n            Constants.KAFKA_PARTITION_HEADER,\n            ByteString.copyFromUtf8(record.kafkaPartition().toString()));\n        attributes.put(\n            Constants.KAFKA_OFFSET_HEADER,\n            ByteString.copyFromUtf8(Long.toString(record.kafkaOffset())));\n      }\n      if (record.timestamp() != null) {\n        attributes.put(\n            Constants.KAFKA_EVENT_TIME_TYPE_HEADER,\n            ByteString.copyFromUtf8(record.timestampType().name));\n        message.setEventTime(Timestamps.fromMillis(record.timestamp()));\n      }\n      message.setAttributes(attributes.build());\n      publisher.publish(message.build());\n    }\n  }\n\n  private Iterable<? extends Header> getRecordHeaders(SinkRecord record) {\n    ConnectHeaders headers = new ConnectHeaders();\n    if (record.headers() != null) {\n      for (Header header : record.headers()) {\n        headers.add(header);\n      }\n    }\n    return headers;\n  }\n\n  @Override\n  public void flush(Map<TopicPartition, OffsetAndMetadata> currentOffsets) {\n    try {\n      if (publisher != null) {\n        publisher.flush();\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Override\n  public void stop() {\n    if (publisher == null) {\n      throw new IllegalStateException(\"Called stop when publisher doesn't exist.\");\n    }\n    try {\n      publisher.flush();\n      publisher.stopAsync().awaitTerminated();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } finally {\n      publisher = null;\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "52": {
                            "lines": [
                                {
                                    "line_no": 51,
                                    "content": "                .setPartition(partition)"
                                },
                                {
                                    "line_no": 52,
                                    "content": "                .setClientId(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 53,
                                    "content": "                .build());"
                                }
                            ],
                            "error_texts": [
                                "[52,17] cannot find symbol\n",
                                "[52,17] cannot find symbol\nsymbol: method setClientId(com.google.cloud.pubsublite.internal.wire.PubsubContext)\nlocation: class com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder.Builder\n"
                            ]
                        },
                        "54": {
                            "lines": [
                                {
                                    "line_no": 53,
                                    "content": "                .build());"
                                },
                                {
                                    "line_no": 54,
                                    "content": "    return builder.build();"
                                },
                                {
                                    "line_no": 55,
                                    "content": "  }"
                                }
                            ],
                            "error_texts": [
                                "[54,25] incompatible types: com.google.cloud.pubsublite.internal.Publisher<com.google.cloud.pubsublite.MessageMetadata> cannot be converted to com.google.cloud.pubsublite.internal.Publisher<java.lang.Long>\n"
                            ]
                        }
                    }
                }
            },
            "error": "incompatible types: com.google.cloud.pubsublite.internal.Publisher<com.google.cloud.pubsublite.MessageMetadata> cannot be converted to com.google.cloud.pubsublite.internal.Publisher<java.lang.Long>\n",
            "span_id": 17844641557717334400
        },
        {
            "input": "I apologize for the confusion. It seems that the `Publisher` interface has changed in the new version. Let's update our code to use the correct type. We'll use `MessageMetadata` instead of `Long`.\n\nHere's the updated diff:\n\n```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -3,7 +3,7 @@ package com.google.pubsublite.kafka.sink;\n import com.google.cloud.pubsublite.CloudZone;\n import com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.TopicName;\n import com.google.cloud.pubsublite.TopicPath;\n import com.google.cloud.pubsublite.internal.Publisher;\n@@ -20,7 +20,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n   private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n \n   @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n     TopicPath topic =\n@@ -37,7 +37,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n             SinglePartitionPublisherBuilder.newBuilder()\n                 .setTopic(topic)\n                 .setPartition(partition)\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                 .build());\n     return builder.build();\n   }\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -1,10 +1,10 @@\n package com.google.pubsublite.kafka.sink;\n \n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.internal.Publisher;\n import java.util.Map;\n \n interface PublisherFactory {\n \n-  Publisher<PublishMetadata> newPublisher(Map<String, String> params);\n+  Publisher<MessageMetadata> newPublisher(Map<String, String> params);\n }\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java\n@@ -4,7 +4,7 @@ import static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n \n import com.google.api.core.ApiService.State;\n import com.google.cloud.pubsublite.Message;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.internal.Publisher;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableListMultimap;\n@@ -26,7 +26,7 @@ import org.apache.kafka.connect.sink.SinkTask;\n public class P",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "illegal start of expression\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n  public Publisher<Long> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .setClientId(PubsubContext.of(FRAMEWORK))\n                .build());\n    return builder.build();\n  }\n}\n",
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport java.util.Map;\n\ninterface PublisherFactory {\n\n  Publisher<MessageMetadata> newPublisher(Map<String, String> params);\n  Publisher<Long> newPublisher(Map<String, String> params);\n}\n",
                    "src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n\nimport com.google.api.core.ApiService.State;\nimport com.google.cloud.pubsublite.Message;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.collect.ImmutableListMultimap;\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.util.Timestamps;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport javax.annotation.Nullable;\nimport org.apache.kafka.clients.consumer.OffsetAndMetadata;\nimport org.apache.kafka.common.TopicPartition;\nimport org.apache.kafka.common.utils.AppInfoParser;\nimport org.apache.kafka.connect.header.ConnectHeaders;\nimport org.apache.kafka.connect.header.Header;\nimport org.apache.kafka.connect.sink.SinkRecord;\nimport org.apache.kafka.connect.sink.SinkTask;\n\npublic class PubSubLiteSinkTask extends SinkTask {\n\n  private final PublisherFactory factory;\n  private @Nullable Publisher<Long> publisher;\n\n  @VisibleForTesting\n  PubSubLiteSinkTask(PublisherFactory factory) {\n    this.factory = factory;\n  }\n\n  public PubSubLiteSinkTask() {\n    this(new PublisherFactoryImpl());\n  }\n\n  @Override\n  public String version() {\n    return AppInfoParser.getVersion();\n  }\n\n  @Override\n  public void start(Map<String, String> map) {\n    if (publisher != null) {\n      throw new IllegalStateException(\"Called start when publisher already exists.\");\n    }\n    publisher = factory.newPublisher(map);\n    publisher.startAsync().awaitRunning();\n  }\n\n  @Override\n  public void put(Collection<SinkRecord> collection) {\n    if (publisher.state() != State.RUNNING) {\n      if (publisher.state() == State.FAILED) {\n        throw new IllegalStateException(\"Publisher has failed.\", publisher.failureCause());\n      } else {\n        throw new IllegalStateException(\"Publisher not currently running.\");\n      }\n    }\n    for (SinkRecord record : collection) {\n      Message.Builder message = Message.builder();\n      if (record.key() != null) {\n        message.setKey(encodeToBytes(record.keySchema(), record.key()));\n      }\n      if (record.value() != null) {\n        message.setData(encodeToBytes(record.valueSchema(), record.value()));\n      }\n      ImmutableListMultimap.Builder<String, ByteString> attributes =\n          ImmutableListMultimap.builder();\n      getRecordHeaders(record)\n          .forEach(\n              header ->\n                  attributes.put(\n                      header.key(), Schemas.encodeToBytes(header.schema(), header.value())));\n      if (record.topic() != null) {\n        attributes.put(Constants.KAFKA_TOPIC_HEADER, ByteString.copyFromUtf8(record.topic()));\n      }\n      if (record.kafkaPartition() != null) {\n        attributes.put(\n            Constants.KAFKA_PARTITION_HEADER,\n            ByteString.copyFromUtf8(record.kafkaPartition().toString()));\n        attributes.put(\n            Constants.KAFKA_OFFSET_HEADER,\n            ByteString.copyFromUtf8(Long.toString(record.kafkaOffset())));\n      }\n      if (record.timestamp() != null) {\n        attributes.put(\n            Constants.KAFKA_EVENT_TIME_TYPE_HEADER,\n            ByteString.copyFromUtf8(record.timestampType().name));\n        message.setEventTime(Timestamps.fromMillis(record.timestamp()));\n      }\n      message.setAttributes(attributes.build());\n      publisher.publish(message.build());\n    }\n  }\n\n  private Iterable<? extends Header> getRecordHeaders(SinkRecord record) {\n    ConnectHeaders headers = new ConnectHeaders();\n    if (record.headers() != null) {\n      for (Header header : record.headers()) {\n        headers.add(header);\n      }\n    }\n    return headers;\n  }\n\n  @Override\n  public void flush(Map<TopicPartition, OffsetAndMetadata> currentOffsets) {\n    try {\n      if (publisher != null) {\n        publisher.flush();\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Override\n  public void stop() {\n    if (publisher == null) {\n      throw new IllegalStateException(\"Called stop when publisher doesn't exist.\");\n    }\n    try {\n      publisher.flush();\n      publisher.stopAsync().awaitTerminated();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } finally {\n      publisher = null;\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 37,
                                    "content": "  public Publisher<Long> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 38,
                                    "content": "    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);"
                                }
                            ],
                            "error_texts": [
                                "[37,3] illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "illegal start of expression\n",
            "span_id": 9016938336346509338
        },
        {
            "input": "I apologize for the confusion in the previous diff. It seems there were some conflicting changes. Let's clean up the diff and make sure we're using `MessageMetadata` consistently. Here's the corrected diff:\n\n```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -3,7 +3,7 @@ package com.google.pubsublite.kafka.sink;\n import com.google.cloud.pubsublite.CloudZone;\n import com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.TopicName;\n import com.google.cloud.pubsublite.TopicPath;\n import com.google.cloud.pubsublite.internal.Publisher;\n@@ -20,7 +20,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n   private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n \n   @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n     TopicPath topic =\n@@ -37,7 +37,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n             SinglePartitionPublisherBuilder.newBuilder()\n                 .setTopic(topic)\n                 .setPartition(partition)\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                 .build());\n     return builder.build();\n   }\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -1,10 +1,10 @@\n package com.google.pubsublite.kafka.sink;\n \n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.internal.Publisher;\n import java.util.Map;\n \n interface PublisherFactory {\n \n-  Publisher<PublishMetadata> newPublisher(Map<String, String> params);\n+  Publisher<MessageMetadata> newPublisher(Map<String, String> params);\n }\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java\n@@ -4,7 +4,7 @@ import static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n \n import com.google.api.core.ApiService.State;\n import com.google.cloud.pubsublite.Message;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.internal.Publisher;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableListMultimap;\n@@ -26,7 +26,7 @@ import org.apache.kafka.connect.sink.SinkTask;\n public class PubSubLiteSinkTask",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "illegal start of expression\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n  public Publisher<Long> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .setClientId(PubsubContext.of(FRAMEWORK))\n                .build());\n    return builder.build();\n  }\n}\n",
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport java.util.Map;\n\ninterface PublisherFactory {\n\n  Publisher<MessageMetadata> newPublisher(Map<String, String> params);\n  Publisher<MessageMetadata> newPublisher(Map<String, String> params);\n  Publisher<Long> newPublisher(Map<String, String> params);\n}\n",
                    "src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n\nimport com.google.api.core.ApiService.State;\nimport com.google.cloud.pubsublite.Message;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.collect.ImmutableListMultimap;\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.util.Timestamps;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport javax.annotation.Nullable;\nimport org.apache.kafka.clients.consumer.OffsetAndMetadata;\nimport org.apache.kafka.common.TopicPartition;\nimport org.apache.kafka.common.utils.AppInfoParser;\nimport org.apache.kafka.connect.header.ConnectHeaders;\nimport org.apache.kafka.connect.header.Header;\nimport org.apache.kafka.connect.sink.SinkRecord;\nimport org.apache.kafka.connect.sink.SinkTask;\n\npublic class PubSubLiteSinkTask extends SinkTask {\n\n  private final PublisherFactory factory;\n  private @Nullable Publisher<Long> publisher;\n\n  @VisibleForTesting\n  PubSubLiteSinkTask(PublisherFactory factory) {\n    this.factory = factory;\n  }\n\n  public PubSubLiteSinkTask() {\n    this(new PublisherFactoryImpl());\n  }\n\n  @Override\n  public String version() {\n    return AppInfoParser.getVersion();\n  }\n\n  @Override\n  public void start(Map<String, String> map) {\n    if (publisher != null) {\n      throw new IllegalStateException(\"Called start when publisher already exists.\");\n    }\n    publisher = factory.newPublisher(map);\n    publisher.startAsync().awaitRunning();\n  }\n\n  @Override\n  public void put(Collection<SinkRecord> collection) {\n    if (publisher.state() != State.RUNNING) {\n      if (publisher.state() == State.FAILED) {\n        throw new IllegalStateException(\"Publisher has failed.\", publisher.failureCause());\n      } else {\n        throw new IllegalStateException(\"Publisher not currently running.\");\n      }\n    }\n    for (SinkRecord record : collection) {\n      Message.Builder message = Message.builder();\n      if (record.key() != null) {\n        message.setKey(encodeToBytes(record.keySchema(), record.key()));\n      }\n      if (record.value() != null) {\n        message.setData(encodeToBytes(record.valueSchema(), record.value()));\n      }\n      ImmutableListMultimap.Builder<String, ByteString> attributes =\n          ImmutableListMultimap.builder();\n      getRecordHeaders(record)\n          .forEach(\n              header ->\n                  attributes.put(\n                      header.key(), Schemas.encodeToBytes(header.schema(), header.value())));\n      if (record.topic() != null) {\n        attributes.put(Constants.KAFKA_TOPIC_HEADER, ByteString.copyFromUtf8(record.topic()));\n      }\n      if (record.kafkaPartition() != null) {\n        attributes.put(\n            Constants.KAFKA_PARTITION_HEADER,\n            ByteString.copyFromUtf8(record.kafkaPartition().toString()));\n        attributes.put(\n            Constants.KAFKA_OFFSET_HEADER,\n            ByteString.copyFromUtf8(Long.toString(record.kafkaOffset())));\n      }\n      if (record.timestamp() != null) {\n        attributes.put(\n            Constants.KAFKA_EVENT_TIME_TYPE_HEADER,\n            ByteString.copyFromUtf8(record.timestampType().name));\n        message.setEventTime(Timestamps.fromMillis(record.timestamp()));\n      }\n      message.setAttributes(attributes.build());\n      publisher.publish(message.build());\n    }\n  }\n\n  private Iterable<? extends Header> getRecordHeaders(SinkRecord record) {\n    ConnectHeaders headers = new ConnectHeaders();\n    if (record.headers() != null) {\n      for (Header header : record.headers()) {\n        headers.add(header);\n      }\n    }\n    return headers;\n  }\n\n  @Override\n  public void flush(Map<TopicPartition, OffsetAndMetadata> currentOffsets) {\n    try {\n      if (publisher != null) {\n        publisher.flush();\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Override\n  public void stop() {\n    if (publisher == null) {\n      throw new IllegalStateException(\"Called stop when publisher doesn't exist.\");\n    }\n    try {\n      publisher.flush();\n      publisher.stopAsync().awaitTerminated();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } finally {\n      publisher = null;\n    }\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 38,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 39,
                                    "content": "  public Publisher<Long> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[38,3] illegal start of expression\n"
                            ]
                        },
                        "39": {
                            "lines": [
                                {
                                    "line_no": 38,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 39,
                                    "content": "  public Publisher<Long> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 40,
                                    "content": "    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);"
                                }
                            ],
                            "error_texts": [
                                "[39,3] illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "illegal start of expression\n",
            "span_id": 5729432961033748615
        },
        {
            "input": "I apologize for the confusion. It seems that the diff application process is causing some issues. Let's try to provide a clean, complete version of each file instead of a diff. Here are the updated versions of the three files:\n\n1. PublisherFactoryImpl.java:\n\n```java\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .build());\n    return builder.build();\n  }\n}\n```\n\n2. PublisherFactory.java:\n\n```java\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport java.util.Map;\n\ninterface PublisherFactory {\n\n  Publisher<MessageMetadata> newPublisher(Map<String, String> params);\n}\n```\n\n3. PubSubLiteSinkTask.java:\n\n```java\npackage com.google.pubsublite.kafka.sink;\n\nimport static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n\nimport com.google.api.core.ApiService.State;\nimport com.google.cloud.pubsublite.Message;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.collect.ImmutableListMultimap;\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.util.Timestamps;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport javax.annotation.Nullable;\nimport org.apache.kafka.clients.consumer.OffsetAndMetadata;\nimport org.apache.kafka.common.TopicPartition;\nimport org.apache.kafka.common.utils.AppInfoParser;\nimport org.apache.kafka.connect.header.ConnectHeaders;\nimport org.apache.kafka.connect.header.Header;\nimport org.apache.kafka.connect.sink",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 1684817895054101393
        },
        {
            "input": "I apologize for the formatting error. Let me provide the diff in the correct format:\n\n```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -3,7 +3,7 @@ package com.google.pubsublite.kafka.sink;\n import com.google.cloud.pubsublite.CloudZone;\n import com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.TopicName;\n import com.google.cloud.pubsublite.TopicPath;\n import com.google.cloud.pubsublite.internal.Publisher;\n@@ -20,7 +20,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n   private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n \n   @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n     TopicPath topic =\n@@ -37,7 +37,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n             SinglePartitionPublisherBuilder.newBuilder()\n                 .setTopic(topic)\n                 .setPartition(partition)\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                 .build());\n     return builder.build();\n   }\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java\n@@ -1,10 +1,10 @@\n package com.google.pubsublite.kafka.sink;\n \n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.internal.Publisher;\n import java.util.Map;\n \n interface PublisherFactory {\n \n-  Publisher<PublishMetadata> newPublisher(Map<String, String> params);\n+  Publisher<MessageMetadata> newPublisher(Map<String, String> params);\n }\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java\n@@ -4,7 +4,7 @@ import static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n \n import com.google.api.core.ApiService.State;\n import com.google.cloud.pubsublite.Message;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.internal.Publisher;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableListMultimap;\n@@ -26,7 +26,7 @@ import org.apache.kafka.connect.sink.SinkTask;\n public class PubSubLiteSinkTask extends SinkTask {\n \n   private final PublisherFactory factory;\n-  private @Nullable Publisher<Publish",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 10 exact lines in a row:\n```\npackage com.google.pubsublite.kafka.sink;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport java.util.Map;\ninterface PublisherFactory {\nPublisher<PublishMetadata> newPublisher(Map<String, String> params);\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java!\nMake extra sure the indentation is correct.\nsrc/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java does not contain these 10 exact lines in a row:\n```\npackage com.google.pubsublite.kafka.sink;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport java.util.Map;\ninterface PublisherFactory {\nPublisher<PublishMetadata> newPublisher(Map<String, String> params);\n}\n```",
            "span_id": 13912469741015469216
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -3,7 +3,7 @@ package com.google.pubsublite.kafka.sink;\n import com.google.cloud.pubsublite.CloudZone;\n import com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.TopicName;\n import com.google.cloud.pubsublite.TopicPath;\n import com.google.cloud.pubsublite.internal.Publisher;\n@@ -20,7 +20,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n   private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n \n   @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n     TopicPath topic =\n@@ -37,7 +37,7 @@ class PublisherFactoryImpl implements PublisherFactory {\n             SinglePartitionPublisherBuilder.newBuilder()\n                 .setTopic(topic)\n                 .setPartition(partition)\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                 .build());\n     return builder.build();\n   }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "';' expected\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .build());\n    return builder.build();\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "20": {
                            "lines": [
                                {
                                    "line_no": 19,
                                    "content": "import com.google.cloud.pubsublite.ProjectPath;"
                                },
                                {
                                    "line_no": 20,
                                    "content": "-import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 21,
                                    "content": "+import com.google.cloud.pubsublite.MessageMetadata;"
                                }
                            ],
                            "error_texts": [
                                "[20,1] class, interface, or enum expected\n"
                            ]
                        },
                        "21": {
                            "lines": [
                                {
                                    "line_no": 20,
                                    "content": "-import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 21,
                                    "content": "+import com.google.cloud.pubsublite.MessageMetadata;"
                                },
                                {
                                    "line_no": 22,
                                    "content": "import com.google.cloud.pubsublite.TopicName;"
                                }
                            ],
                            "error_texts": [
                                "[21,1] class, interface, or enum expected\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 37,
                                    "content": "-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 38,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[37,1] illegal start of type\n"
                            ]
                        },
                        "38": {
                            "lines": [
                                {
                                    "line_no": 37,
                                    "content": "-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 38,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 39,
                                    "content": "    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);"
                                }
                            ],
                            "error_texts": [
                                "[38,4] illegal start of expression\n",
                                "[38,1] not a statement\n"
                            ]
                        },
                        "55": {
                            "lines": [
                                {
                                    "line_no": 54,
                                    "content": "                .setPartition(partition)"
                                },
                                {
                                    "line_no": 55,
                                    "content": "-                .setContext(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 56,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                }
                            ],
                            "error_texts": [
                                "[55,18] illegal start of expression\n"
                            ]
                        },
                        "56": {
                            "lines": [
                                {
                                    "line_no": 55,
                                    "content": "-                .setContext(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 56,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 57,
                                    "content": "                .build());"
                                }
                            ],
                            "error_texts": [
                                "[56,18] illegal start of expression\n"
                            ]
                        },
                        "57": {
                            "lines": [
                                {
                                    "line_no": 56,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 57,
                                    "content": "                .build());"
                                },
                                {
                                    "line_no": 58,
                                    "content": "    return builder.build();"
                                }
                            ],
                            "error_texts": [
                                "[57,25] ';' expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "';' expected\n",
            "span_id": 17966324695312117152
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -1,62 +1,62 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.CloudZone;\n import com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.TopicName;\n import com.google.cloud.pubsublite.TopicPath;\n import com.google.cloud.pubsublite.internal.Publisher;\n import com.google.cloud.pubsublite.internal.wire.PubsubContext;\n import com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\n import com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\n import com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\n import java.util.Map;\n import org.apache.kafka.common.config.ConfigValue;\n \n class PublisherFactoryImpl implements PublisherFactory {\n \n   private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n \n   @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n     TopicPath topic =\n         TopicPath.newBuilder()\n             .setProject(\n                 ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                     .project())\n             .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n             .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n             .build();\n     builder.setTopic(topic);\n     builder.setPublisherFactory(\n         partition ->\n             SinglePartitionPublisherBuilder.newBuilder()\n                 .setTopic(topic)\n                 .setPartition(partition)\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                 .build());\n     return builder.build();\n   }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "';' expected\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "package com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .build());\n    return builder.build();\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "5": {
                            "lines": [
                                {
                                    "line_no": 4,
                                    "content": "import com.google.cloud.pubsublite.ProjectPath;"
                                },
                                {
                                    "line_no": 5,
                                    "content": "-import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "+import com.google.cloud.pubsublite.MessageMetadata;"
                                }
                            ],
                            "error_texts": [
                                "[5,1] class, interface, or enum expected\n"
                            ]
                        },
                        "6": {
                            "lines": [
                                {
                                    "line_no": 5,
                                    "content": "-import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "+import com.google.cloud.pubsublite.MessageMetadata;"
                                },
                                {
                                    "line_no": 7,
                                    "content": "import com.google.cloud.pubsublite.MessageMetadata;"
                                }
                            ],
                            "error_texts": [
                                "[6,1] class, interface, or enum expected\n"
                            ]
                        },
                        "23": {
                            "lines": [
                                {
                                    "line_no": 22,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 23,
                                    "content": "-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 24,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[23,1] illegal start of type\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": "-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 24,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 25,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[24,1] not a statement\n",
                                "[24,4] illegal start of expression\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 25,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 26,
                                    "content": "    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);"
                                }
                            ],
                            "error_texts": [
                                "[25,3] illegal start of expression\n"
                            ]
                        },
                        "43": {
                            "lines": [
                                {
                                    "line_no": 42,
                                    "content": "                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 43,
                                    "content": "-                .setContext(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 44,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                }
                            ],
                            "error_texts": [
                                "[43,18] illegal start of expression\n"
                            ]
                        },
                        "44": {
                            "lines": [
                                {
                                    "line_no": 43,
                                    "content": "-                .setContext(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 44,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 45,
                                    "content": "                .build());"
                                }
                            ],
                            "error_texts": [
                                "[44,18] illegal start of expression\n"
                            ]
                        },
                        "45": {
                            "lines": [
                                {
                                    "line_no": 44,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 45,
                                    "content": "                .build());"
                                },
                                {
                                    "line_no": 46,
                                    "content": "    return builder.build();"
                                }
                            ],
                            "error_texts": [
                                "[45,25] ';' expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "';' expected\n",
            "span_id": 7948855785114426669
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -1,62 +1,46 @@\n package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.CloudZone;\n import com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.TopicName;\n import com.google.cloud.pubsublite.TopicPath;\n import com.google.cloud.pubsublite.internal.Publisher;\n import com.google.cloud.pubsublite.internal.wire.PubsubContext;\n import com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\n import com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\n import com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\n import java.util.Map;\n import org.apache.kafka.common.config.ConfigValue;\n \n class PublisherFactoryImpl implements PublisherFactory {\n \n   private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n \n   @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n     TopicPath topic =\n         TopicPath.newBuilder()\n             .setProject(\n                 ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                     .project())\n             .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n             .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n             .build();\n     builder.setTopic(topic);\n     builder.setPublisherFactory(\n         partition ->\n             SinglePartitionPublisherBuilder.newBuilder()\n                 .setTopic(topic)\n                 .setPartition(partition)\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                 .build());\n     return builder.build();\n   }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "';' expected\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "package com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .build());\n    return builder.build();\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "5": {
                            "lines": [
                                {
                                    "line_no": 4,
                                    "content": "import com.google.cloud.pubsublite.ProjectPath;"
                                },
                                {
                                    "line_no": 5,
                                    "content": "-import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "+import com.google.cloud.pubsublite.MessageMetadata;"
                                }
                            ],
                            "error_texts": [
                                "[5,1] class, interface, or enum expected\n"
                            ]
                        },
                        "6": {
                            "lines": [
                                {
                                    "line_no": 5,
                                    "content": "-import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "+import com.google.cloud.pubsublite.MessageMetadata;"
                                },
                                {
                                    "line_no": 7,
                                    "content": "import com.google.cloud.pubsublite.MessageMetadata;"
                                }
                            ],
                            "error_texts": [
                                "[6,1] class, interface, or enum expected\n"
                            ]
                        },
                        "24": {
                            "lines": [
                                {
                                    "line_no": 23,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 24,
                                    "content": "-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 25,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[24,1] illegal start of type\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 25,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 26,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[25,1] not a statement\n",
                                "[25,4] illegal start of expression\n"
                            ]
                        },
                        "26": {
                            "lines": [
                                {
                                    "line_no": 25,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 26,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 27,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[26,3] illegal start of expression\n"
                            ]
                        },
                        "27": {
                            "lines": [
                                {
                                    "line_no": 26,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 27,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 28,
                                    "content": "    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);"
                                }
                            ],
                            "error_texts": [
                                "[27,3] illegal start of expression\n"
                            ]
                        },
                        "46": {
                            "lines": [
                                {
                                    "line_no": 45,
                                    "content": "                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 46,
                                    "content": "-                .setContext(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 47,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                }
                            ],
                            "error_texts": [
                                "[46,18] illegal start of expression\n"
                            ]
                        },
                        "47": {
                            "lines": [
                                {
                                    "line_no": 46,
                                    "content": "-                .setContext(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 47,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 48,
                                    "content": "                .build());"
                                }
                            ],
                            "error_texts": [
                                "[47,18] illegal start of expression\n"
                            ]
                        },
                        "48": {
                            "lines": [
                                {
                                    "line_no": 47,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 48,
                                    "content": "                .build());"
                                },
                                {
                                    "line_no": 49,
                                    "content": "    return builder.build();"
                                }
                            ],
                            "error_texts": [
                                "[48,25] ';' expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "';' expected\n",
            "span_id": 7712050858192890950
        },
        {
            "input": "```diff\n--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java\n@@ -1,46 +1,46 @@\n package com.google.pubsublite.kafka.sink;\n \n import com.google.cloud.pubsublite.CloudZone;\n import com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\n import com.google.cloud.pubsublite.TopicName;\n import com.google.cloud.pubsublite.TopicPath;\n import com.google.cloud.pubsublite.internal.Publisher;\n import com.google.cloud.pubsublite.internal.wire.PubsubContext;\n import com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\n import com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\n import com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\n import java.util.Map;\n import org.apache.kafka.common.config.ConfigValue;\n \n class PublisherFactoryImpl implements PublisherFactory {\n \n   private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n \n   @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n     TopicPath topic =\n         TopicPath.newBuilder()\n             .setProject(\n                 ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                     .project())\n             .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n             .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n             .build();\n     builder.setTopic(topic);\n     builder.setPublisherFactory(\n         partition ->\n             SinglePartitionPublisherBuilder.newBuilder()\n                 .setTopic(topic)\n                 .setPartition(partition)\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                 .build());\n     return builder.build();\n   }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "';' expected\n",
                "updated_files": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": "package com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\n-import com.google.cloud.pubsublite.PublishMetadata;\n+import com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.MessageMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n-                .setContext(PubsubContext.of(FRAMEWORK))\n+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())\n                .build());\n    return builder.build();\n  }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java": {
                        "5": {
                            "lines": [
                                {
                                    "line_no": 4,
                                    "content": "import com.google.cloud.pubsublite.ProjectPath;"
                                },
                                {
                                    "line_no": 5,
                                    "content": "-import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "+import com.google.cloud.pubsublite.MessageMetadata;"
                                }
                            ],
                            "error_texts": [
                                "[5,1] class, interface, or enum expected\n"
                            ]
                        },
                        "6": {
                            "lines": [
                                {
                                    "line_no": 5,
                                    "content": "-import com.google.cloud.pubsublite.PublishMetadata;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "+import com.google.cloud.pubsublite.MessageMetadata;"
                                },
                                {
                                    "line_no": 7,
                                    "content": "import com.google.cloud.pubsublite.MessageMetadata;"
                                }
                            ],
                            "error_texts": [
                                "[6,1] class, interface, or enum expected\n"
                            ]
                        },
                        "25": {
                            "lines": [
                                {
                                    "line_no": 24,
                                    "content": "  @Override"
                                },
                                {
                                    "line_no": 25,
                                    "content": "-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 26,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[25,1] illegal start of type\n"
                            ]
                        },
                        "26": {
                            "lines": [
                                {
                                    "line_no": 25,
                                    "content": "-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 26,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 27,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[26,1] not a statement\n",
                                "[26,4] illegal start of expression\n"
                            ]
                        },
                        "27": {
                            "lines": [
                                {
                                    "line_no": 26,
                                    "content": "+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 27,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 28,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[27,3] illegal start of expression\n"
                            ]
                        },
                        "28": {
                            "lines": [
                                {
                                    "line_no": 27,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 28,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 29,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                }
                            ],
                            "error_texts": [
                                "[28,3] illegal start of expression\n"
                            ]
                        },
                        "29": {
                            "lines": [
                                {
                                    "line_no": 28,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 29,
                                    "content": "  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {"
                                },
                                {
                                    "line_no": 30,
                                    "content": "    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);"
                                }
                            ],
                            "error_texts": [
                                "[29,3] illegal start of expression\n"
                            ]
                        },
                        "49": {
                            "lines": [
                                {
                                    "line_no": 48,
                                    "content": "                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 49,
                                    "content": "-                .setContext(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 50,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                }
                            ],
                            "error_texts": [
                                "[49,18] illegal start of expression\n"
                            ]
                        },
                        "50": {
                            "lines": [
                                {
                                    "line_no": 49,
                                    "content": "-                .setContext(PubsubContext.of(FRAMEWORK))"
                                },
                                {
                                    "line_no": 50,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 51,
                                    "content": "                .build());"
                                }
                            ],
                            "error_texts": [
                                "[50,18] illegal start of expression\n"
                            ]
                        },
                        "51": {
                            "lines": [
                                {
                                    "line_no": 50,
                                    "content": "+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())"
                                },
                                {
                                    "line_no": 51,
                                    "content": "                .build());"
                                },
                                {
                                    "line_no": 52,
                                    "content": "    return builder.build();"
                                }
                            ],
                            "error_texts": [
                                "[51,25] ';' expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "';' expected\n",
            "span_id": 16532673922527969288
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java",
            "output": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.CloudZone;\nimport com.google.cloud.pubsublite.ProjectPath;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.TopicName;\nimport com.google.cloud.pubsublite.TopicPath;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext;\nimport com.google.cloud.pubsublite.internal.wire.PubsubContext.Framework;\nimport com.google.cloud.pubsublite.internal.wire.RoutingPublisherBuilder;\nimport com.google.cloud.pubsublite.internal.wire.SinglePartitionPublisherBuilder;\nimport java.util.Map;\nimport org.apache.kafka.common.config.ConfigValue;\n\nclass PublisherFactoryImpl implements PublisherFactory {\n\n  private static final Framework FRAMEWORK = Framework.of(\"KAFKA_CONNECT\");\n\n  @Override\n  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {\n    Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);\n    RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();\n    TopicPath topic =\n        TopicPath.newBuilder()\n            .setProject(\n                ProjectPath.parse(\"projects/\" + config.get(ConfigDefs.PROJECT_FLAG).value())\n                    .project())\n            .setLocation(CloudZone.parse(config.get(ConfigDefs.LOCATION_FLAG).value().toString()))\n            .setName(TopicName.of(config.get(ConfigDefs.TOPIC_NAME_FLAG).value().toString()))\n            .build();\n    builder.setTopic(topic);\n    builder.setPublisherFactory(\n        partition ->\n            SinglePartitionPublisherBuilder.newBuilder()\n                .setTopic(topic)\n                .setPartition(partition)\n                .setContext(PubsubContext.of(FRAMEWORK))\n                .build());\n    return builder.build();\n  }\n}\n",
            "error": "",
            "span_id": 12037361945813654202
        },
        {
            "input": "src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java",
            "output": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport java.util.Map;\n\ninterface PublisherFactory {\n\n  Publisher<PublishMetadata> newPublisher(Map<String, String> params);\n}\n",
            "error": "",
            "span_id": 3079235986620689390
        },
        {
            "input": "src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java",
            "output": "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.pubsublite.kafka.sink;\n\nimport static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;\n\nimport com.google.api.core.ApiService.State;\nimport com.google.cloud.pubsublite.Message;\nimport com.google.cloud.pubsublite.PublishMetadata;\nimport com.google.cloud.pubsublite.internal.Publisher;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.collect.ImmutableListMultimap;\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.util.Timestamps;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport javax.annotation.Nullable;\nimport org.apache.kafka.clients.consumer.OffsetAndMetadata;\nimport org.apache.kafka.common.TopicPartition;\nimport org.apache.kafka.common.utils.AppInfoParser;\nimport org.apache.kafka.connect.header.ConnectHeaders;\nimport org.apache.kafka.connect.header.Header;\nimport org.apache.kafka.connect.sink.SinkRecord;\nimport org.apache.kafka.connect.sink.SinkTask;\n\npublic class PubSubLiteSinkTask extends SinkTask {\n\n  private final PublisherFactory factory;\n  private @Nullable Publisher<PublishMetadata> publisher;\n\n  @VisibleForTesting\n  PubSubLiteSinkTask(PublisherFactory factory) {\n    this.factory = factory;\n  }\n\n  public PubSubLiteSinkTask() {\n    this(new PublisherFactoryImpl());\n  }\n\n  @Override\n  public String version() {\n    return AppInfoParser.getVersion();\n  }\n\n  @Override\n  public void start(Map<String, String> map) {\n    if (publisher != null) {\n      throw new IllegalStateException(\"Called start when publisher already exists.\");\n    }\n    publisher = factory.newPublisher(map);\n    publisher.startAsync().awaitRunning();\n  }\n\n  @Override\n  public void put(Collection<SinkRecord> collection) {\n    if (publisher.state() != State.RUNNING) {\n      if (publisher.state() == State.FAILED) {\n        throw new IllegalStateException(\"Publisher has failed.\", publisher.failureCause());\n      } else {\n        throw new IllegalStateException(\"Publisher not currently running.\");\n      }\n    }\n    for (SinkRecord record : collection) {\n      Message.Builder message = Message.builder();\n      if (record.key() != null) {\n        message.setKey(encodeToBytes(record.keySchema(), record.key()));\n      }\n      if (record.value() != null) {\n        message.setData(encodeToBytes(record.valueSchema(), record.value()));\n      }\n      ImmutableListMultimap.Builder<String, ByteString> attributes =\n          ImmutableListMultimap.builder();\n      getRecordHeaders(record)\n          .forEach(\n              header ->\n                  attributes.put(\n                      header.key(), Schemas.encodeToBytes(header.schema(), header.value())));\n      if (record.topic() != null) {\n        attributes.put(Constants.KAFKA_TOPIC_HEADER, ByteString.copyFromUtf8(record.topic()));\n      }\n      if (record.kafkaPartition() != null) {\n        attributes.put(\n            Constants.KAFKA_PARTITION_HEADER,\n            ByteString.copyFromUtf8(record.kafkaPartition().toString()));\n        attributes.put(\n            Constants.KAFKA_OFFSET_HEADER,\n            ByteString.copyFromUtf8(Long.toString(record.kafkaOffset())));\n      }\n      if (record.timestamp() != null) {\n        attributes.put(\n            Constants.KAFKA_EVENT_TIME_TYPE_HEADER,\n            ByteString.copyFromUtf8(record.timestampType().name));\n        message.setEventTime(Timestamps.fromMillis(record.timestamp()));\n      }\n      message.setAttributes(attributes.build());\n      publisher.publish(message.build());\n    }\n  }\n\n  private Iterable<? extends Header> getRecordHeaders(SinkRecord record) {\n    ConnectHeaders headers = new ConnectHeaders();\n    if (record.headers() != null) {\n      for (Header header : record.headers()) {\n        headers.add(header);\n      }\n    }\n    return headers;\n  }\n\n  @Override\n  public void flush(Map<TopicPartition, OffsetAndMetadata> currentOffsets) {\n    try {\n      if (publisher != null) {\n        publisher.flush();\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Override\n  public void stop() {\n    if (publisher == null) {\n      throw new IllegalStateException(\"Called stop when publisher doesn't exist.\");\n    }\n    try {\n      publisher.flush();\n      publisher.stopAsync().awaitTerminated();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } finally {\n      publisher = null;\n    }\n  }\n}\n",
            "error": "",
            "span_id": 5545302362736272492
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}