diff --git a/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java b/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java
index 98d3001..16dd87e 100644
--- a/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java
+++ b/src/main/java/com/google/pubsublite/kafka/sink/PubSubLiteSinkTask.java
@@ -19,7 +19,8 @@ import static com.google.pubsublite.kafka.sink.Schemas.encodeToBytes;
 
 import com.google.api.core.ApiService.State;
 import com.google.cloud.pubsublite.Message;
-import com.google.cloud.pubsublite.PublishMetadata;
+import com.google.cloud.pubsublite.MessageMetadata;
+import com.google.cloud.pubsublite.MessageMetadata;
 import com.google.cloud.pubsublite.internal.Publisher;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableListMultimap;
@@ -40,7 +41,7 @@ import org.apache.kafka.connect.sink.SinkTask;
 public class PubSubLiteSinkTask extends SinkTask {
 
   private final PublisherFactory factory;
-  private @Nullable Publisher<PublishMetadata> publisher;
+  private @Nullable Publisher<Long> publisher;
 
   @VisibleForTesting
   PubSubLiteSinkTask(PublisherFactory factory) {
diff --git a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java
index b5e2c73..f80ed3c 100644
--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java
+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactory.java
@@ -15,11 +15,14 @@
  */
 package com.google.pubsublite.kafka.sink;
 
-import com.google.cloud.pubsublite.PublishMetadata;
+import com.google.cloud.pubsublite.MessageMetadata;
+import com.google.cloud.pubsublite.MessageMetadata;
 import com.google.cloud.pubsublite.internal.Publisher;
 import java.util.Map;
 
 interface PublisherFactory {
 
-  Publisher<PublishMetadata> newPublisher(Map<String, String> params);
+  Publisher<MessageMetadata> newPublisher(Map<String, String> params);
+  Publisher<MessageMetadata> newPublisher(Map<String, String> params);
+  Publisher<Long> newPublisher(Map<String, String> params);
 }
diff --git a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java
index 8d19dc4..0d8d8be 100644
--- a/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java
+++ b/src/main/java/com/google/pubsublite/kafka/sink/PublisherFactoryImpl.java
@@ -1,23 +1,12 @@
-/*
- * Copyright 2020 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
 package com.google.pubsublite.kafka.sink;
 
 import com.google.cloud.pubsublite.CloudZone;
 import com.google.cloud.pubsublite.ProjectPath;
-import com.google.cloud.pubsublite.PublishMetadata;
+-import com.google.cloud.pubsublite.PublishMetadata;
++import com.google.cloud.pubsublite.MessageMetadata;
+import com.google.cloud.pubsublite.MessageMetadata;
+import com.google.cloud.pubsublite.MessageMetadata;
+import com.google.cloud.pubsublite.MessageMetadata;
 import com.google.cloud.pubsublite.TopicName;
 import com.google.cloud.pubsublite.TopicPath;
 import com.google.cloud.pubsublite.internal.Publisher;
@@ -33,7 +22,11 @@ class PublisherFactoryImpl implements PublisherFactory {
   private static final Framework FRAMEWORK = Framework.of("KAFKA_CONNECT");
 
   @Override
-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {
+-  public Publisher<PublishMetadata> newPublisher(Map<String, String> params) {
++  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {
+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {
+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {
+  public Publisher<MessageMetadata> newPublisher(Map<String, String> params) {
     Map<String, ConfigValue> config = ConfigDefs.config().validateAll(params);
     RoutingPublisherBuilder.Builder builder = RoutingPublisherBuilder.newBuilder();
     TopicPath topic =
@@ -50,7 +43,11 @@ class PublisherFactoryImpl implements PublisherFactory {
             SinglePartitionPublisherBuilder.newBuilder()
                 .setTopic(topic)
                 .setPartition(partition)
-                .setContext(PubsubContext.of(FRAMEWORK))
+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())
+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())
+                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())
+-                .setContext(PubsubContext.of(FRAMEWORK))
++                .setClientId(PubsubContext.of(FRAMEWORK).getClientId())
                 .build());
     return builder.build();
   }