diff --git a/arex-instrumentation/dubbo/arex-dubbo-apache-v2/src/main/java/io/arex/inst/dubbo/apache/v2/DubboConsumerExtractor.java b/arex-instrumentation/dubbo/arex-dubbo-apache-v2/src/main/java/io/arex/inst/dubbo/apache/v2/DubboConsumerExtractor.java
index bf40a253..2ea183f1 100644
--- a/arex-instrumentation/dubbo/arex-dubbo-apache-v2/src/main/java/io/arex/inst/dubbo/apache/v2/DubboConsumerExtractor.java
+++ b/arex-instrumentation/dubbo/arex-dubbo-apache-v2/src/main/java/io/arex/inst/dubbo/apache/v2/DubboConsumerExtractor.java
@@ -37,12 +37,10 @@ public class DubboConsumerExtractor extends DubboExtractor {
             mockResult = MockResult.success(ignoreMockResult, asyncRpcResult);
             // need to set invoke mode to FUTURE if return type is CompletableFuture
             if (invocation instanceof RpcInvocation) {
-                RpcInvocation rpcInv = (RpcInvocation) invocation;
-                rpcInv.setInvokeMode(RpcUtils.getInvokeMode(adapter.getUrl(), invocation));
+                RpcInvocation rpcInv = (RpcInvocation) invocation; rpcInv.setInvokeMode(RpcUtils.getInvokeMode(adapter.getUrl(), invocation));
             }
-            RpcContext.getContext().setFuture(asyncRpcResult);
-            // save for 2.6.x compatibility, for example, TraceFilter in Zipkin uses com.alibaba.xxx.FutureAdapter
-            FutureContext.getContext().setCompatibleFuture(asyncRpcResult);
+            RpcContext.getContext().setFuture(CompletableFuture.completedFuture(asyncRpcResult.getValue()));
+            FutureContext.getContext().setCompatibleFuture(CompletableFuture.completedFuture(asyncRpcResult.getValue()));
         }
         return mockResult;
     }