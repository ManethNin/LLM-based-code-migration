{
    "validate_diffs": [],
    "compile_maven": [
        {
            "input": "To address the issues caused by the Flyway upgrade, we need to update the Flyway configuration in the NisAppConfig class. Here's the diff to fix the problems:\n\n```diff\n--- a/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java\n+++ b/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java\n@@ -105,11 +105,12 @@ public class NisAppConfig {\n \t@Bean\n \tpublic Flyway flyway(final DataSource dataSource) {\n \t\tfinal ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-\t\tfinal Flyway flyway = new Flyway();\n-\t\tflyway.setDataSource(dataSource);\n-\t\tflyway.setClassLoader(classLoader);\n-\t\tflyway.setLocations(\"db/migration\");\n-\t\tflyway.setValidateOnMigrate(false);\n+\t\tfinal Flyway flyway = Flyway.configure()\n+\t\t\t.dataSource(dataSource)\n+\t\t\t.classLoader(classLoader)\n+\t\t\t.locations(\"db/migration\")\n+\t\t\t.validateOnMigrate(false)\n+\t\t\t.load();\n \t\treturn flyway;\n \t}\n }\n```\n\nThis diff updates the Flyway configuration to use the new Flyway API introduced in version 9.8.3. The main changes are:\n\n1. We now use the `Flyway.configure()` method to create a configuration builder.\n2. We chain the configuration methods on the builder.\n3. We call `.load()` at the end to create the Flyway instance.\n\nThese changes should resolve the compilation errors and make the code compatible with the new Flyway version.",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nnis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java!\nMake extra sure the indentation is correct.\nnis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java does not contain these 11 exact lines in a row:\n```\n@Bean\npublic Flyway flyway(final DataSource dataSource) {\nfinal ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nfinal Flyway flyway = new Flyway();\nflyway.setDataSource(dataSource);\nflyway.setClassLoader(classLoader);\nflyway.setLocations(\"db/migration\");\nflyway.setValidateOnMigrate(false);\nreturn flyway;\n}\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nnis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java!\nMake extra sure the indentation is correct.\nnis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java does not contain these 11 exact lines in a row:\n```\n@Bean\npublic Flyway flyway(final DataSource dataSource) {\nfinal ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nfinal Flyway flyway = new Flyway();\nflyway.setDataSource(dataSource);\nflyway.setClassLoader(classLoader);\nflyway.setLocations(\"db/migration\");\nflyway.setValidateOnMigrate(false);\nreturn flyway;\n}\n}\n```",
            "span_id": 16769081509323826327
        },
        {
            "input": "```diff\n--- a/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java\n+++ b/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java\n@@ -105,11 +105,12 @@ public class NisAppConfig {\n \t@Bean\n \tpublic Flyway flyway(final DataSource dataSource) {\n \t\tfinal ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-\t\tfinal Flyway flyway = new Flyway();\n-\t\tflyway.setDataSource(dataSource);\n-\t\tflyway.setClassLoader(classLoader);\n-\t\tflyway.setLocations(\"db/migration\");\n-\t\tflyway.setValidateOnMigrate(false);\n+\t\tfinal Flyway flyway = Flyway.configure()\n+\t\t\t\t.dataSource(dataSource)\n+\t\t\t\t.classLoader(classLoader)\n+\t\t\t\t.locations(\"db/migration\")\n+\t\t\t\t.validateOnMigrate(false)\n+\t\t\t\t.load();\n \t\treturn flyway;\n \t}\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nnis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java!\nMake extra sure the indentation is correct.\nnis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java does not contain these 10 exact lines in a row:\n```\n@Bean\npublic Flyway flyway(final DataSource dataSource) {\nfinal ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nfinal Flyway flyway = new Flyway();\nflyway.setDataSource(dataSource);\nflyway.setClassLoader(classLoader);\nflyway.setLocations(\"db/migration\");\nflyway.setValidateOnMigrate(false);\nreturn flyway;\n}\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nnis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java!\nMake extra sure the indentation is correct.\nnis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java does not contain these 10 exact lines in a row:\n```\n@Bean\npublic Flyway flyway(final DataSource dataSource) {\nfinal ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nfinal Flyway flyway = new Flyway();\nflyway.setDataSource(dataSource);\nflyway.setClassLoader(classLoader);\nflyway.setLocations(\"db/migration\");\nflyway.setValidateOnMigrate(false);\nreturn flyway;\n}\n```",
            "span_id": 13685203635962741011
        },
        {
            "input": "```diff\n--- a/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java\n+++ b/nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java\n@@ -124,12 +124,13 @@ public class NisAppConfig {\n \t\tfinal Properties prop = new Properties();\n \t\tprop.load(NisAppConfig.class.getClassLoader().getResourceAsStream(\"db.properties\"));\n \n-\t\tfinal org.flywaydb.core.Flyway flyway = new Flyway();\n-\t\tflyway.setDataSource(this.dataSource());\n-\t\tflyway.setClassLoader(NisAppConfig.class.getClassLoader());\n-\t\tflyway.setLocations(prop.getProperty(\"flyway.locations\"));\n-\t\tflyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty(\"flyway.validate\")));\n-\t\treturn flyway;\n+\t\treturn Flyway.configure()\n+\t\t\t\t.dataSource(this.dataSource())\n+\t\t\t\t.classLoader(NisAppConfig.class.getClassLoader())\n+\t\t\t\t.locations(prop.getProperty(\"flyway.locations\"))\n+\t\t\t\t.validateOnMigrate(Boolean.valueOf(prop.getProperty(\"flyway.validate\")))\n+\t\t\t\t.load();\n \t}\n \n \t@Bean\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] ApplicationMetaDataTest.canCreateApplicationMetaDataWithCertificate:37 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.canRoundtripApplicationMetaData:55 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.equalsOnlyReturnsTrueForEquivalentObjects:110 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.hashCodesAreEqualForEquivalentObjects:128 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundMultipleCertificates:54 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundSingleCertificate:40 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithCaseInsensitiveNemVendor:102->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithNemVendor:96->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithoutNemVendor:84 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithoutManifest:62 \u00bb InaccessibleObject\n[ERROR] MetaDataFactoryTest.canLoadApplicationMetaDataFromCodeSource:31 \u00bb InaccessibleObject\n[INFO]\n[ERROR] Tests run: 2361, Failures: 0, Errors: 11, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for NEM Infrastructure Server - ALL 0.6.100:\n[INFO]\n[INFO] NEM Core ........................................... FAILURE [ 50.871 s]\n[INFO] NEM Deploy ......................................... SKIPPED\n[INFO] NEM Peer ........................................... SKIPPED\n[INFO] NEM Infrastructure Server .......................... SKIPPED\n[INFO] NEM Infrastructure Server - ALL .................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 51.061 s\n[INFO] Finished at: 2024-08-05T16:44:00Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project nem-core: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
                "updated_files": {
                    "nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java": "package org.nem.specific.deploy.appconfig;\n\nimport org.flywaydb.core.Flyway;\nimport org.hibernate.SessionFactory;\nimport org.nem.core.model.*;\nimport org.nem.core.model.primitive.*;\nimport org.nem.core.node.NodeFeature;\nimport org.nem.core.time.TimeProvider;\nimport org.nem.deploy.*;\nimport org.nem.nis.*;\nimport org.nem.nis.audit.AuditCollection;\nimport org.nem.nis.boot.*;\nimport org.nem.nis.cache.*;\nimport org.nem.nis.connect.*;\nimport org.nem.nis.controller.interceptors.LocalHostDetector;\nimport org.nem.nis.dao.*;\nimport org.nem.nis.harvesting.*;\nimport org.nem.nis.mappers.*;\nimport org.nem.nis.pox.ImportanceCalculator;\nimport org.nem.nis.pox.poi.*;\nimport org.nem.nis.pox.pos.PosImportanceCalculator;\nimport org.nem.nis.secret.*;\nimport org.nem.nis.service.BlockChainLastBlockLayer;\nimport org.nem.nis.state.*;\nimport org.nem.nis.sync.*;\nimport org.nem.nis.validators.*;\nimport org.nem.peer.connect.CommunicationMode;\nimport org.nem.peer.node.*;\nimport org.nem.peer.services.ChainServices;\nimport org.nem.peer.trust.*;\nimport org.nem.specific.deploy.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.*;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\nimport org.springframework.orm.hibernate4.HibernateTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.sql.DataSource;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.function.*;\n\n@Configuration\n@ComponentScan(basePackages = {\n\t\t\"org.nem.nis\"\n}, excludeFilters = {\n\t\t@ComponentScan.Filter(type = FilterType.ANNOTATION, value = org.springframework.stereotype.Controller.class),\n\t\t@ComponentScan.Filter(type = FilterType.REGEX, pattern = {\n\t\t\t\t\"org.nem.nis.websocket.*\"\n\t\t})\n})\n@EnableTransactionManagement\npublic class NisAppConfig {\n\n\t@Autowired\n\tprivate AccountDao accountDao;\n\n\t@Autowired\n\tprivate BlockDao blockDao;\n\n\t@Autowired\n\tprivate BlockChainLastBlockLayer blockChainLastBlockLayer;\n\n\t@Autowired\n\t@SuppressWarnings(\"unused\")\n\tprivate TransferDao transferDao;\n\n\tprivate static final int MAX_AUDIT_HISTORY_SIZE = 50;\n\n\t@Bean\n\tprotected AuditCollection outgoingAudits() {\n\t\treturn this.createAuditCollection();\n\t}\n\n\t@Bean\n\tprotected AuditCollection incomingAudits() {\n\t\treturn this.createAuditCollection();\n\t}\n\n\tprivate AuditCollection createAuditCollection() {\n\t\treturn new AuditCollection(MAX_AUDIT_HISTORY_SIZE, this.timeProvider());\n\t}\n\n\t@Bean\n\tpublic DataSource dataSource() throws IOException {\n\t\tfinal NisConfiguration configuration = this.nisConfiguration();\n\t\tfinal String nemFolder = configuration.getNemFolder();\n\t\tfinal Properties prop = new Properties();\n\t\tprop.load(NisAppConfig.class.getClassLoader().getResourceAsStream(\"db.properties\"));\n\n\t\t// replace url parameters with values from configuration\n\t\tfinal String jdbcUrl = prop.getProperty(\"jdbc.url\").replace(\"${nem.folder}\", nemFolder).replace(\"${nem.network}\",\n\t\t\t\tconfiguration.getNetworkName());\n\n\t\tfinal DriverManagerDataSource dataSource = new DriverManagerDataSource();\n\t\tdataSource.setDriverClassName(prop.getProperty(\"jdbc.driverClassName\"));\n\t\tdataSource.setUrl(jdbcUrl);\n\t\tdataSource.setUsername(prop.getProperty(\"jdbc.username\"));\n\t\tdataSource.setPassword(prop.getProperty(\"jdbc.password\"));\n\t\treturn dataSource;\n\t}\n\n\t@Bean(initMethod = \"migrate\")\n\tpublic Flyway flyway() throws IOException {\n\t\tfinal Properties prop = new Properties();\n\t\tprop.load(NisAppConfig.class.getClassLoader().getResourceAsStream(\"db.properties\"));\n\n\t\treturn Flyway.configure()\n\t\t\t\t.dataSource(this.dataSource())\n\t\t\t\t.classLoader(NisAppConfig.class.getClassLoader())\n\t\t\t\t.locations(prop.getProperty(\"flyway.locations\"))\n\t\t\t\t.validateOnMigrate(Boolean.valueOf(prop.getProperty(\"flyway.validate\")))\n\t\t\t\t.load();\n\t}\n\n\t@Bean\n\t@DependsOn(\"flyway\")\n\tpublic SessionFactory sessionFactory() throws IOException {\n\t\treturn SessionFactoryLoader.load(this.dataSource());\n\t}\n\n\t@Bean\n\tpublic BlockChain blockChain() {\n\t\treturn new BlockChain(this.blockChainLastBlockLayer, this.blockChainUpdater());\n\t}\n\n\t@Bean\n\tpublic BlockChainServices blockChainServices() {\n\t\treturn new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),\n\t\t\t\tthis.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());\n\t}\n\n\t@Bean\n\tpublic BlockChainUpdater blockChainUpdater() {\n\t\treturn new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),\n\t\t\t\tthis.unconfirmedTransactions(), this.nisConfiguration());\n\t}\n\n\t@Bean\n\tpublic BlockChainContextFactory blockChainContextFactory() {\n\t\treturn new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),\n\t\t\t\tthis.unconfirmedTransactions());\n\t}\n\n\t// region mappers\n\n\t@Bean\n\tpublic MapperFactory mapperFactory() {\n\t\treturn new DefaultMapperFactory(this.mosaicIdCache());\n\t}\n\n\t@Bean\n\tpublic NisMapperFactory nisMapperFactory() {\n\t\treturn new NisMapperFactory(this.mapperFactory());\n\t}\n\n\t@Bean\n\tpublic NisModelToDbModelMapper nisModelToDbModelMapper() {\n\t\treturn new NisModelToDbModelMapper(this.mapperFactory().createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));\n\t}\n\n\t@Bean\n\tpublic NisDbModelToModelMapper nisDbModelToModelMapper() {\n\t\treturn this.nisMapperFactory().createDbModelToModelNisMapper(this.accountCache());\n\t}\n\n\t// endregion\n\n\t// region observers + validators\n\n\t@Bean\n\tpublic BlockTransactionObserverFactory blockTransactionObserverFactory() {\n\t\tfinal int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();\n\t\treturn new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear);\n\t}\n\n\t@Bean\n\tpublic BlockValidatorFactory blockValidatorFactory() {\n\t\treturn new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());\n\t}\n\n\t@Bean\n\tpublic TransactionValidatorFactory transactionValidatorFactory() {\n\t\treturn new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),\n\t\t\t\tthis.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());\n\t}\n\n\t@Bean\n\tpublic SingleTransactionValidator transactionValidator() {\n\t\t// this is only consumed by the TransactionController and used in transaction/prepare,\n\t\t// which should propagate incomplete transactions\n\t\treturn this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();\n\t}\n\n\t// endregion\n\n\t@Bean\n\tpublic Harvester harvester() {\n\t\tfinal NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(),\n\t\t\t\tthis.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(),\n\t\t\t\tthis.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());\n\n\t\tfinal BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao,\n\t\t\t\tnew BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));\n\t\treturn new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),\n\t\t\t\tgenerator);\n\t}\n\n\t@Bean\n\tpublic SynchronizedAccountCache accountCache() {\n\t\treturn new SynchronizedAccountCache(new DefaultAccountCache());\n\t}\n\n\t@Bean\n\tpublic SynchronizedAccountStateCache accountStateCache() {\n\t\treturn new SynchronizedAccountStateCache(new DefaultAccountStateCache());\n\t}\n\n\t@Bean\n\tpublic SynchronizedHashCache transactionHashCache() {\n\t\treturn new SynchronizedHashCache(new DefaultHashCache(50000, this.nisConfiguration().getTransactionHashRetentionTime()));\n\t}\n\n\t@Bean\n\tpublic SynchronizedPoxFacade poxFacade() {\n\t\treturn new SynchronizedPoxFacade(new DefaultPoxFacade(this.importanceCalculator()));\n\t}\n\n\t@Bean\n\tpublic SynchronizedNamespaceCache namespaceCache() {\n\t\treturn new SynchronizedNamespaceCache(new DefaultNamespaceCache());\n\t}\n\n\t@Bean\n\tpublic ReadOnlyNisCache nisCache() {\n\t\treturn new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(),\n\t\t\t\tthis.namespaceCache());\n\t}\n\n\t@Bean\n\t@SuppressWarnings(\"serial\")\n\tpublic ImportanceCalculator importanceCalculator() {\n\t\tfinal Map<BlockChainFeature, Supplier<ImportanceCalculator>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<ImportanceCalculator>>() {\n\t\t\t{\n\t\t\t\tthis.put(BlockChainFeature.PROOF_OF_IMPORTANCE,\n\t\t\t\t\t\t() -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));\n\t\t\t\tthis.put(BlockChainFeature.PROOF_OF_STAKE, PosImportanceCalculator::new);\n\t\t\t}\n\t\t};\n\n\t\treturn BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), \"consensus algorithm\",\n\t\t\t\tfeatureSupplierMap);\n\t}\n\n\t@Bean\n\tpublic UnlockedAccounts unlockedAccounts() {\n\t\treturn new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer,\n\t\t\t\tthis.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());\n\t}\n\n\t@Bean\n\tpublic CanHarvestPredicate canHarvestPredicate() {\n\t\treturn new CanHarvestPredicate(this::getBlockDependentMinHarvesterBalance);\n\t}\n\n\tprivate Amount getBlockDependentMinHarvesterBalance(final BlockHeight height) {\n\t\treturn getBlockDependentPoiOptions(height).getMinHarvesterBalance();\n\t}\n\n\tprivate static org.nem.nis.pox.poi.PoiOptions getBlockDependentPoiOptions(final BlockHeight height) {\n\t\treturn new PoiOptionsBuilder(height).create();\n\t}\n\n\t@Bean\n\tpublic Supplier<BlockHeight> lastBlockHeight() {\n\t\treturn this.blockChainLastBlockLayer::getLastBlockHeight;\n\t}\n\n\t@Bean\n\tpublic UnconfirmedTransactions unconfirmedTransactions() {\n\t\tfinal BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();\n\t\tfinal UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(),\n\t\t\t\tthis.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),\n\t\t\t\tblockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());\n\t\tfinal UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory,\n\t\t\t\tthis.nisCache());\n\t\treturn new SynchronizedUnconfirmedTransactions(unconfirmedTransactions);\n\t}\n\n\t@Bean\n\tpublic UnconfirmedTransactionsFilter unconfirmedTransactionsFilter() {\n\t\treturn this.unconfirmedTransactions().asFilter();\n\t}\n\n\t@Bean\n\tpublic HibernateTransactionManager transactionManager() throws IOException {\n\t\treturn new HibernateTransactionManager(this.sessionFactory());\n\t}\n\n\t@Bean\n\tpublic NisMain nisMain() {\n\t\t// initialize network info\n\t\tNetworkInfos.setDefault(this.nisConfiguration().getNetworkInfo());\n\n\t\t// initialize other globals\n\t\tfinal NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());\n\t\tif (this.nisConfiguration().ignoreFees()) {\n\t\t\tNemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());\n\t\t} else {\n\t\t\tNemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(),\n\t\t\t\t\t() -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{\n\t\t\t\t\t\t\tnew BlockHeight(BlockMarkerConstants.FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24)),\n\t\t\t\t\t\t\tnew BlockHeight(\n\t\t\t\t\t\t\t\t\tBlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24))\n\t\t\t\t\t}));\n\t\t}\n\n\t\tNemGlobals.setBlockChainConfiguration(this.nisConfiguration().getBlockChainConfiguration());\n\t\tNemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());\n\n\t\treturn new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(),\n\t\t\t\tthis.nisConfiguration(), this.blockAnalyzer(), System::exit);\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tprivate Supplier<WeightedBalances> weighedBalancesSupplier() {\n\t\tfinal Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {\n\t\t\t{\n\t\t\t\tthis.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);\n\t\t\t\tthis.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);\n\t\t\t}\n\t\t};\n\n\t\treturn BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),\n\t\t\t\t\"weighted balance scheme\", featureSupplierMap);\n\t}\n\n\t@Bean\n\tpublic BlockAnalyzer blockAnalyzer() {\n\t\tfinal int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();\n\t\treturn new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),\n\t\t\t\testimatedBlocksPerYear);\n\t}\n\n\t@Bean\n\tpublic HttpConnectorPool httpConnectorPool() {\n\t\tfinal CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()\n\t\t\t\t? CommunicationMode.BINARY\n\t\t\t\t: CommunicationMode.JSON;\n\t\treturn new HttpConnectorPool(communicationMode, this.outgoingAudits());\n\t}\n\n\t@Bean\n\tpublic NisPeerNetworkHost nisPeerNetworkHost() {\n\t\tfinal HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());\n\n\t\tfinal PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);\n\n\t\tfinal CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());\n\n\t\treturn new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),\n\t\t\t\tthis.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());\n\t}\n\n\t@Bean\n\tpublic NetworkHostBootstrapper networkHostBootstrapper() {\n\t\treturn new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());\n\t}\n\n\t@Bean\n\tpublic NisConfiguration nisConfiguration() {\n\t\treturn new NisConfiguration();\n\t}\n\n\t@Bean\n\tpublic TimeProvider timeProvider() {\n\t\treturn CommonStarter.TIME_PROVIDER;\n\t}\n\n\t@Bean\n\tpublic TrustProvider trustProvider() {\n\t\tfinal int LOW_COMMUNICATION_NODE_WEIGHT = 30;\n\t\tfinal int TRUST_CACHE_TIME = 15 * 60;\n\t\treturn new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,\n\t\t\t\tthis.timeProvider());\n\t}\n\n\t@Bean\n\tpublic NemConfigurationPolicy configurationPolicy() {\n\t\treturn new NisConfigurationPolicy();\n\t}\n\n\t@Bean\n\tpublic ChainServices chainServices() {\n\t\treturn new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());\n\t}\n\n\t@Bean\n\tpublic CommonStarter commonStarter() {\n\t\treturn CommonStarter.INSTANCE;\n\t}\n\n\t@Bean\n\tpublic ValidationState validationState() {\n\t\treturn NisCacheUtils.createValidationState(this.nisCache());\n\t}\n\n\t@Bean\n\tpublic LocalHostDetector localHostDetector() {\n\t\treturn new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());\n\t}\n\n\t@Bean\n\tpublic NodeCompatibilityChecker nodeCompatibilityChecker() {\n\t\treturn new DefaultNodeCompatibilityChecker();\n\t}\n\n\t@Bean\n\tpublic EnumSet<ObserverOption> observerOptions() {\n\t\tfinal EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);\n\t\tif (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {\n\t\t\tobserverOptions.add(ObserverOption.NoHistoricalDataPruning);\n\t\t}\n\n\t\tfinal BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();\n\t\tif (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {\n\t\t\tobserverOptions.add(ObserverOption.NoOutlinkObserver);\n\t\t}\n\n\t\treturn observerOptions;\n\t}\n\n\t@Bean\n\tpublic Function<Address, Collection<Address>> cosignatoryLookup() {\n\t\treturn a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();\n\t}\n\n\t@Bean\n\tpublic MosaicIdCache mosaicIdCache() {\n\t\treturn new SynchronizedMosaicIdCache(new DefaultMosaicIdCache());\n\t}\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] ApplicationMetaDataTest.canCreateApplicationMetaDataWithCertificate:37 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.canRoundtripApplicationMetaData:55 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.equalsOnlyReturnsTrueForEquivalentObjects:110 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.hashCodesAreEqualForEquivalentObjects:128 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundMultipleCertificates:54 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundSingleCertificate:40 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithCaseInsensitiveNemVendor:102->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithNemVendor:96->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithoutNemVendor:84 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithoutManifest:62 \u00bb InaccessibleObject\n[ERROR] MetaDataFactoryTest.canLoadApplicationMetaDataFromCodeSource:31 \u00bb InaccessibleObject\n[INFO]\n[ERROR] Tests run: 2361, Failures: 0, Errors: 11, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for NEM Infrastructure Server - ALL 0.6.100:\n[INFO]\n[INFO] NEM Core ........................................... FAILURE [ 50.871 s]\n[INFO] NEM Deploy ......................................... SKIPPED\n[INFO] NEM Peer ........................................... SKIPPED\n[INFO] NEM Infrastructure Server .......................... SKIPPED\n[INFO] NEM Infrastructure Server - ALL .................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 51.061 s\n[INFO] Finished at: 2024-08-05T16:44:00Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project nem-core: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
            "span_id": 15304650391173881770
        },
        {
            "input": "```diff\n--- a/core/pom.xml\n+++ b/core/pom.xml\n@@ -226,6 +226,15 @@\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n                 <version>2.22.2</version>\n+                <configuration>\n+                    <argLine>\n+                        --add-opens java.base/java.lang=ALL-UNNAMED\n+                        --add-opens java.base/java.util=ALL-UNNAMED\n+                        --add-opens java.base/java.lang.reflect=ALL-UNNAMED\n+                        --add-opens java.base/java.text=ALL-UNNAMED\n+                        --add-opens java.desktop/java.awt.font=ALL-UNNAMED\n+                    </argLine>\n+                </configuration>\n             </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] ApplicationMetaDataTest.canCreateApplicationMetaDataWithCertificate:37 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.canRoundtripApplicationMetaData:55 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.equalsOnlyReturnsTrueForEquivalentObjects:110 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.hashCodesAreEqualForEquivalentObjects:128 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundMultipleCertificates:54 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundSingleCertificate:40 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithCaseInsensitiveNemVendor:102->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithNemVendor:96->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithoutNemVendor:84 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithoutManifest:62 \u00bb InaccessibleObject\n[ERROR] MetaDataFactoryTest.canLoadApplicationMetaDataFromCodeSource:31 \u00bb InaccessibleObject\n[INFO]\n[ERROR] Tests run: 2361, Failures: 0, Errors: 11, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for NEM Infrastructure Server - ALL 0.6.100:\n[INFO]\n[INFO] NEM Core ........................................... FAILURE [ 49.177 s]\n[INFO] NEM Deploy ......................................... SKIPPED\n[INFO] NEM Peer ........................................... SKIPPED\n[INFO] NEM Infrastructure Server .......................... SKIPPED\n[INFO] NEM Infrastructure Server - ALL .................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 49.315 s\n[INFO] Finished at: 2024-08-05T16:45:38Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project nem-core: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
                "updated_files": {
                    "core/pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.nem.core</groupId>\n    <artifactId>nem-core</artifactId>\n    <version>0.6.100</version>\n    <name>NEM Core</name>\n    <organization>\n        <name>NEM - New Economy Movement</name>\n        <url>http://nem.io</url>\n    </organization>\n\n    <properties>\n        <nemCodeBase>http://bob.nem.ninja/</nemCodeBase>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <spring.version>4.3.30.RELEASE</spring.version>\n    </properties>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>com.googlecode.javaewah</groupId>\n            <artifactId>JavaEWAH</artifactId>\n            <version>1.1.13</version>\n        </dependency>\n\n        <dependency>\n            <groupId>net.minidev</groupId>\n            <artifactId>json-smart</artifactId>\n            <version>2.4.8</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.bouncycastle</groupId>\n            <artifactId>bcprov-jdk15on</artifactId>\n            <version>1.70</version>\n        </dependency>\n\n        <!-- commons -->\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.15</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.11.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-math3</artifactId>\n            <version>3.6.1</version>\n        </dependency>\n\n        <!-- async http client -->\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpasyncclient</artifactId>\n            <version>4.1.5</version>\n        </dependency>\n\n        <!-- test related -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-all</artifactId>\n            <version>1.10.19</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.googlecode.matrix-toolkits-java</groupId>\n            <artifactId>mtj</artifactId>\n            <version>1.0.4</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.github.tomakehurst</groupId>\n            <artifactId>wiremock</artifactId>\n            <version>1.58</version>\n            <scope>test</scope>\n\n            <!-- Include everything below here if you have dependency conflicts -->\n            <classifier>standalone</classifier>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.mortbay.jetty</groupId>\n                    <artifactId>jetty</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.google.guava</groupId>\n                    <artifactId>guava</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-core</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-annotations</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-databind</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.apache.httpcomponents</groupId>\n                    <artifactId>httpclient</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.skyscreamer</groupId>\n                    <artifactId>jsonassert</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>xmlunit</groupId>\n                    <artifactId>xmlunit</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.jayway.jsonpath</groupId>\n                    <artifactId>json-path</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>net.sf.jopt-simple</groupId>\n                    <artifactId>jopt-simple</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>nemesis.bin</include>\n                    <include>nemesis-testnet.bin</include>\n                    <include>nemesis-testnet.json</include>\n                    <include>nemesis-mijinnet.bin</include>\n                    <include>nemesis-mijinnet.json</include>\n                </includes>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>2.13.0</version>\n                <configuration>\n                    <allowMajorUpdates>false</allowMajorUpdates>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.10.1</version>\n                <configuration>\n                    <release>11</release>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                    <failOnWarning>true</failOnWarning>\n                    <showWarnings>true</showWarnings>\n                    <compilerArgs>\n                        <arg>-Xlint:all</arg>\n                    </compilerArgs>\n                    <includes>\n                        <include>org/nem/core/**/*.java</include>\n                    </includes>\n                    <testIncludes>\n                        <include>org/nem/core/**/*.java</include>\n                    </testIncludes>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.4.1</version>\n                <configuration>\n                    <sourcepath>${basedir}/src/main/java/org/nem/core</sourcepath>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.3.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n                        </manifest>\n                        <manifestEntries>\n                            <Permissions>all-permissions</Permissions>\n                            <Codebase>${nemCodeBase}</Codebase>\n                            <Application-Name>${project.name}</Application-Name>\n                            <Trusted-Only>true</Trusted-Only>\n                            <Implementation-Build>${project.version}</Implementation-Build>\n                            <Implementation-Vendor>NEM - New Economy Movement</Implementation-Vendor>\n                        </manifestEntries>\n                        <addMavenDescriptor>false</addMavenDescriptor>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>test-jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!-- this adds test_integration, so that during test-compile phase they will be compiled, unfortunately, we can't specify target dir :/ -->\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>build-helper-maven-plugin</artifactId>\n                <version>3.3.0</version>\n                <executions>\n                    <execution>\n                        <id>add-test-source</id>\n                        <phase>generate-test-sources</phase>\n                        <goals>\n                            <goal>add-test-source</goal>\n                        </goals>\n                        <configuration>\n                            <sources>\n                                <source>src/it/java</source>\n                            </sources>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.2</version>\n                <configuration>\n                    <argLine>\n                        --add-opens java.base/java.lang=ALL-UNNAMED\n                        --add-opens java.base/java.util=ALL-UNNAMED\n                        --add-opens java.base/java.lang.reflect=ALL-UNNAMED\n                        --add-opens java.base/java.text=ALL-UNNAMED\n                        --add-opens java.desktop/java.awt.font=ALL-UNNAMED\n                    </argLine>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-failsafe-plugin</artifactId>\n                <version>2.22.2</version>\n                <configuration>\n                    <testSourceDirectory>src/it/java</testSourceDirectory>\n                    <failIfNoTests>true</failIfNoTests>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>default-integration-test</id>\n                        <goals>\n                            <goal>integration-test</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <version>2.28.0</version>\n                <configuration>\n                    <formats>\n                        <format>\n                            <includes>\n                                <include>src/**</include>\n                            </includes>\n                            <excludes>\n                                <exclude>src/main/resources/**</exclude>\n                            </excludes>\n                            <trimTrailingWhitespace/>\n                            <endWithNewline/>\n                        </format>\n                    </formats>\n                    <java>\n                        <eclipse>\n                          <version>4.9.0</version>\n                          <file>${project.basedir}/eclipse-formatter.xml</file>\n                        </eclipse>\n                    </java>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.8</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>jacoco-report</id>\n                        <phase>test</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                    </execution>\n                    <!-- verify code coverage -->\n                    <execution>\n                        <id>jacoco-check</id>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                        <configuration>\n                            <rules>\n                                <rule>\n                                    <element>BUNDLE</element>\n                                    <limits>\n                                        <limit>\n                                            <counter>LINE</counter>\n                                            <value>COVEREDRATIO</value>\n                                            <minimum>0.90</minimum>\n                                        </limit>\n                                    </limits>\n                                </rule>\n                            </rules>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] ApplicationMetaDataTest.canCreateApplicationMetaDataWithCertificate:37 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.canRoundtripApplicationMetaData:55 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.equalsOnlyReturnsTrueForEquivalentObjects:110 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.hashCodesAreEqualForEquivalentObjects:128 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundMultipleCertificates:54 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundSingleCertificate:40 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithCaseInsensitiveNemVendor:102->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithNemVendor:96->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithoutNemVendor:84 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithoutManifest:62 \u00bb InaccessibleObject\n[ERROR] MetaDataFactoryTest.canLoadApplicationMetaDataFromCodeSource:31 \u00bb InaccessibleObject\n[INFO]\n[ERROR] Tests run: 2361, Failures: 0, Errors: 11, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for NEM Infrastructure Server - ALL 0.6.100:\n[INFO]\n[INFO] NEM Core ........................................... FAILURE [ 49.177 s]\n[INFO] NEM Deploy ......................................... SKIPPED\n[INFO] NEM Peer ........................................... SKIPPED\n[INFO] NEM Infrastructure Server .......................... SKIPPED\n[INFO] NEM Infrastructure Server - ALL .................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 49.315 s\n[INFO] Finished at: 2024-08-05T16:45:38Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project nem-core: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
            "span_id": 12971176537851119749
        },
        {
            "input": "```diff\n--- a/core/pom.xml\n+++ b/core/pom.xml\n@@ -233,6 +233,9 @@\n                         --add-opens java.base/java.lang.reflect=ALL-UNNAMED\n                         --add-opens java.base/java.text=ALL-UNNAMED\n                         --add-opens java.desktop/java.awt.font=ALL-UNNAMED\n+                        --add-opens java.base/java.io=ALL-UNNAMED\n+                        --add-opens java.base/java.util.jar=ALL-UNNAMED\n+                        --add-opens java.base/sun.security.x509=ALL-UNNAMED\n                     </argLine>\n                 </configuration>\n             </plugin>\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] ApplicationMetaDataTest.canCreateApplicationMetaDataWithCertificate:37 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.canRoundtripApplicationMetaData:55 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.equalsOnlyReturnsTrueForEquivalentObjects:110 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.hashCodesAreEqualForEquivalentObjects:128 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundMultipleCertificates:54 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundSingleCertificate:40 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithCaseInsensitiveNemVendor:102->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithNemVendor:96->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithoutNemVendor:84 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithoutManifest:62 \u00bb InaccessibleObject\n[ERROR] MetaDataFactoryTest.canLoadApplicationMetaDataFromCodeSource:31 \u00bb InaccessibleObject\n[INFO]\n[ERROR] Tests run: 2361, Failures: 0, Errors: 11, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for NEM Infrastructure Server - ALL 0.6.100:\n[INFO]\n[INFO] NEM Core ........................................... FAILURE [ 49.957 s]\n[INFO] NEM Deploy ......................................... SKIPPED\n[INFO] NEM Peer ........................................... SKIPPED\n[INFO] NEM Infrastructure Server .......................... SKIPPED\n[INFO] NEM Infrastructure Server - ALL .................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 50.142 s\n[INFO] Finished at: 2024-08-05T16:46:43Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project nem-core: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
                "updated_files": {
                    "core/pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.nem.core</groupId>\n    <artifactId>nem-core</artifactId>\n    <version>0.6.100</version>\n    <name>NEM Core</name>\n    <organization>\n        <name>NEM - New Economy Movement</name>\n        <url>http://nem.io</url>\n    </organization>\n\n    <properties>\n        <nemCodeBase>http://bob.nem.ninja/</nemCodeBase>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <spring.version>4.3.30.RELEASE</spring.version>\n    </properties>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>com.googlecode.javaewah</groupId>\n            <artifactId>JavaEWAH</artifactId>\n            <version>1.1.13</version>\n        </dependency>\n\n        <dependency>\n            <groupId>net.minidev</groupId>\n            <artifactId>json-smart</artifactId>\n            <version>2.4.8</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.bouncycastle</groupId>\n            <artifactId>bcprov-jdk15on</artifactId>\n            <version>1.70</version>\n        </dependency>\n\n        <!-- commons -->\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.15</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.11.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-math3</artifactId>\n            <version>3.6.1</version>\n        </dependency>\n\n        <!-- async http client -->\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpasyncclient</artifactId>\n            <version>4.1.5</version>\n        </dependency>\n\n        <!-- test related -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-all</artifactId>\n            <version>1.10.19</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.googlecode.matrix-toolkits-java</groupId>\n            <artifactId>mtj</artifactId>\n            <version>1.0.4</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.github.tomakehurst</groupId>\n            <artifactId>wiremock</artifactId>\n            <version>1.58</version>\n            <scope>test</scope>\n\n            <!-- Include everything below here if you have dependency conflicts -->\n            <classifier>standalone</classifier>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.mortbay.jetty</groupId>\n                    <artifactId>jetty</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.google.guava</groupId>\n                    <artifactId>guava</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-core</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-annotations</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-databind</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.apache.httpcomponents</groupId>\n                    <artifactId>httpclient</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.skyscreamer</groupId>\n                    <artifactId>jsonassert</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>xmlunit</groupId>\n                    <artifactId>xmlunit</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.jayway.jsonpath</groupId>\n                    <artifactId>json-path</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>net.sf.jopt-simple</groupId>\n                    <artifactId>jopt-simple</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>nemesis.bin</include>\n                    <include>nemesis-testnet.bin</include>\n                    <include>nemesis-testnet.json</include>\n                    <include>nemesis-mijinnet.bin</include>\n                    <include>nemesis-mijinnet.json</include>\n                </includes>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>2.13.0</version>\n                <configuration>\n                    <allowMajorUpdates>false</allowMajorUpdates>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.10.1</version>\n                <configuration>\n                    <release>11</release>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                    <failOnWarning>true</failOnWarning>\n                    <showWarnings>true</showWarnings>\n                    <compilerArgs>\n                        <arg>-Xlint:all</arg>\n                    </compilerArgs>\n                    <includes>\n                        <include>org/nem/core/**/*.java</include>\n                    </includes>\n                    <testIncludes>\n                        <include>org/nem/core/**/*.java</include>\n                    </testIncludes>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.4.1</version>\n                <configuration>\n                    <sourcepath>${basedir}/src/main/java/org/nem/core</sourcepath>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.3.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n                        </manifest>\n                        <manifestEntries>\n                            <Permissions>all-permissions</Permissions>\n                            <Codebase>${nemCodeBase}</Codebase>\n                            <Application-Name>${project.name}</Application-Name>\n                            <Trusted-Only>true</Trusted-Only>\n                            <Implementation-Build>${project.version}</Implementation-Build>\n                            <Implementation-Vendor>NEM - New Economy Movement</Implementation-Vendor>\n                        </manifestEntries>\n                        <addMavenDescriptor>false</addMavenDescriptor>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>test-jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!-- this adds test_integration, so that during test-compile phase they will be compiled, unfortunately, we can't specify target dir :/ -->\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>build-helper-maven-plugin</artifactId>\n                <version>3.3.0</version>\n                <executions>\n                    <execution>\n                        <id>add-test-source</id>\n                        <phase>generate-test-sources</phase>\n                        <goals>\n                            <goal>add-test-source</goal>\n                        </goals>\n                        <configuration>\n                            <sources>\n                                <source>src/it/java</source>\n                            </sources>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.2</version>\n                <configuration>\n                    <argLine>\n                        --add-opens java.base/java.lang=ALL-UNNAMED\n                        --add-opens java.base/java.util=ALL-UNNAMED\n                        --add-opens java.base/java.lang.reflect=ALL-UNNAMED\n                        --add-opens java.base/java.text=ALL-UNNAMED\n                        --add-opens java.desktop/java.awt.font=ALL-UNNAMED\n                        --add-opens java.base/java.io=ALL-UNNAMED\n                        --add-opens java.base/java.util.jar=ALL-UNNAMED\n                        --add-opens java.base/sun.security.x509=ALL-UNNAMED\n                    </argLine>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-failsafe-plugin</artifactId>\n                <version>2.22.2</version>\n                <configuration>\n                    <testSourceDirectory>src/it/java</testSourceDirectory>\n                    <failIfNoTests>true</failIfNoTests>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>default-integration-test</id>\n                        <goals>\n                            <goal>integration-test</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <version>2.28.0</version>\n                <configuration>\n                    <formats>\n                        <format>\n                            <includes>\n                                <include>src/**</include>\n                            </includes>\n                            <excludes>\n                                <exclude>src/main/resources/**</exclude>\n                            </excludes>\n                            <trimTrailingWhitespace/>\n                            <endWithNewline/>\n                        </format>\n                    </formats>\n                    <java>\n                        <eclipse>\n                          <version>4.9.0</version>\n                          <file>${project.basedir}/eclipse-formatter.xml</file>\n                        </eclipse>\n                    </java>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.8</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>jacoco-report</id>\n                        <phase>test</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                    </execution>\n                    <!-- verify code coverage -->\n                    <execution>\n                        <id>jacoco-check</id>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                        <configuration>\n                            <rules>\n                                <rule>\n                                    <element>BUNDLE</element>\n                                    <limits>\n                                        <limit>\n                                            <counter>LINE</counter>\n                                            <value>COVEREDRATIO</value>\n                                            <minimum>0.90</minimum>\n                                        </limit>\n                                    </limits>\n                                </rule>\n                            </rules>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] ApplicationMetaDataTest.canCreateApplicationMetaDataWithCertificate:37 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.canRoundtripApplicationMetaData:55 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.equalsOnlyReturnsTrueForEquivalentObjects:110 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.hashCodesAreEqualForEquivalentObjects:128 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundMultipleCertificates:54 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundSingleCertificate:40 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithCaseInsensitiveNemVendor:102->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithNemVendor:96->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithoutNemVendor:84 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithoutManifest:62 \u00bb InaccessibleObject\n[ERROR] MetaDataFactoryTest.canLoadApplicationMetaDataFromCodeSource:31 \u00bb InaccessibleObject\n[INFO]\n[ERROR] Tests run: 2361, Failures: 0, Errors: 11, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for NEM Infrastructure Server - ALL 0.6.100:\n[INFO]\n[INFO] NEM Core ........................................... FAILURE [ 49.957 s]\n[INFO] NEM Deploy ......................................... SKIPPED\n[INFO] NEM Peer ........................................... SKIPPED\n[INFO] NEM Infrastructure Server .......................... SKIPPED\n[INFO] NEM Infrastructure Server - ALL .................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 50.142 s\n[INFO] Finished at: 2024-08-05T16:46:43Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project nem-core: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
            "span_id": 8006674184053570104
        },
        {
            "input": "```diff\n--- a/core/pom.xml\n+++ b/core/pom.xml\n@@ -236,6 +236,7 @@\n                         --add-opens java.base/java.io=ALL-UNNAMED\n                         --add-opens java.base/java.util.jar=ALL-UNNAMED\n                         --add-opens java.base/sun.security.x509=ALL-UNNAMED\n+                        --add-opens java.base/java.security=ALL-UNNAMED\n                     </argLine>\n                 </configuration>\n             </plugin>\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] HttpMethodClientTest$GetMethodTest.sendThrowsBusyPeerExceptionOnSocketTimeout \u00bb\n[ERROR] ApplicationMetaDataTest.canCreateApplicationMetaDataWithCertificate:37 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.canRoundtripApplicationMetaData:55 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.equalsOnlyReturnsTrueForEquivalentObjects:110 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.hashCodesAreEqualForEquivalentObjects:128 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundMultipleCertificates:54 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundSingleCertificate:40 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithCaseInsensitiveNemVendor:102->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithNemVendor:96->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithoutNemVendor:84 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithoutManifest:62 \u00bb InaccessibleObject\n[ERROR] MetaDataFactoryTest.canLoadApplicationMetaDataFromCodeSource:31 \u00bb InaccessibleObject\n[INFO]\n[ERROR] Tests run: 2361, Failures: 0, Errors: 12, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for NEM Infrastructure Server - ALL 0.6.100:\n[INFO]\n[INFO] NEM Core ........................................... FAILURE [ 49.403 s]\n[INFO] NEM Deploy ......................................... SKIPPED\n[INFO] NEM Peer ........................................... SKIPPED\n[INFO] NEM Infrastructure Server .......................... SKIPPED\n[INFO] NEM Infrastructure Server - ALL .................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 49.592 s\n[INFO] Finished at: 2024-08-05T16:47:48Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project nem-core: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
                "updated_files": {
                    "core/pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.nem.core</groupId>\n    <artifactId>nem-core</artifactId>\n    <version>0.6.100</version>\n    <name>NEM Core</name>\n    <organization>\n        <name>NEM - New Economy Movement</name>\n        <url>http://nem.io</url>\n    </organization>\n\n    <properties>\n        <nemCodeBase>http://bob.nem.ninja/</nemCodeBase>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <spring.version>4.3.30.RELEASE</spring.version>\n    </properties>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>com.googlecode.javaewah</groupId>\n            <artifactId>JavaEWAH</artifactId>\n            <version>1.1.13</version>\n        </dependency>\n\n        <dependency>\n            <groupId>net.minidev</groupId>\n            <artifactId>json-smart</artifactId>\n            <version>2.4.8</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.bouncycastle</groupId>\n            <artifactId>bcprov-jdk15on</artifactId>\n            <version>1.70</version>\n        </dependency>\n\n        <!-- commons -->\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.15</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.11.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-math3</artifactId>\n            <version>3.6.1</version>\n        </dependency>\n\n        <!-- async http client -->\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpasyncclient</artifactId>\n            <version>4.1.5</version>\n        </dependency>\n\n        <!-- test related -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-all</artifactId>\n            <version>1.10.19</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.googlecode.matrix-toolkits-java</groupId>\n            <artifactId>mtj</artifactId>\n            <version>1.0.4</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.github.tomakehurst</groupId>\n            <artifactId>wiremock</artifactId>\n            <version>1.58</version>\n            <scope>test</scope>\n\n            <!-- Include everything below here if you have dependency conflicts -->\n            <classifier>standalone</classifier>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.mortbay.jetty</groupId>\n                    <artifactId>jetty</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.google.guava</groupId>\n                    <artifactId>guava</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-core</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-annotations</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-databind</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.apache.httpcomponents</groupId>\n                    <artifactId>httpclient</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.skyscreamer</groupId>\n                    <artifactId>jsonassert</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>xmlunit</groupId>\n                    <artifactId>xmlunit</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.jayway.jsonpath</groupId>\n                    <artifactId>json-path</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>net.sf.jopt-simple</groupId>\n                    <artifactId>jopt-simple</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>nemesis.bin</include>\n                    <include>nemesis-testnet.bin</include>\n                    <include>nemesis-testnet.json</include>\n                    <include>nemesis-mijinnet.bin</include>\n                    <include>nemesis-mijinnet.json</include>\n                </includes>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>2.13.0</version>\n                <configuration>\n                    <allowMajorUpdates>false</allowMajorUpdates>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.10.1</version>\n                <configuration>\n                    <release>11</release>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                    <failOnWarning>true</failOnWarning>\n                    <showWarnings>true</showWarnings>\n                    <compilerArgs>\n                        <arg>-Xlint:all</arg>\n                    </compilerArgs>\n                    <includes>\n                        <include>org/nem/core/**/*.java</include>\n                    </includes>\n                    <testIncludes>\n                        <include>org/nem/core/**/*.java</include>\n                    </testIncludes>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.4.1</version>\n                <configuration>\n                    <sourcepath>${basedir}/src/main/java/org/nem/core</sourcepath>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.3.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n                        </manifest>\n                        <manifestEntries>\n                            <Permissions>all-permissions</Permissions>\n                            <Codebase>${nemCodeBase}</Codebase>\n                            <Application-Name>${project.name}</Application-Name>\n                            <Trusted-Only>true</Trusted-Only>\n                            <Implementation-Build>${project.version}</Implementation-Build>\n                            <Implementation-Vendor>NEM - New Economy Movement</Implementation-Vendor>\n                        </manifestEntries>\n                        <addMavenDescriptor>false</addMavenDescriptor>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>test-jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!-- this adds test_integration, so that during test-compile phase they will be compiled, unfortunately, we can't specify target dir :/ -->\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>build-helper-maven-plugin</artifactId>\n                <version>3.3.0</version>\n                <executions>\n                    <execution>\n                        <id>add-test-source</id>\n                        <phase>generate-test-sources</phase>\n                        <goals>\n                            <goal>add-test-source</goal>\n                        </goals>\n                        <configuration>\n                            <sources>\n                                <source>src/it/java</source>\n                            </sources>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.2</version>\n                <configuration>\n                    <argLine>\n                        --add-opens java.base/java.lang=ALL-UNNAMED\n                        --add-opens java.base/java.util=ALL-UNNAMED\n                        --add-opens java.base/java.lang.reflect=ALL-UNNAMED\n                        --add-opens java.base/java.text=ALL-UNNAMED\n                        --add-opens java.desktop/java.awt.font=ALL-UNNAMED\n                        --add-opens java.base/java.io=ALL-UNNAMED\n                        --add-opens java.base/java.util.jar=ALL-UNNAMED\n                        --add-opens java.base/sun.security.x509=ALL-UNNAMED\n                        --add-opens java.base/java.security=ALL-UNNAMED\n                    </argLine>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-failsafe-plugin</artifactId>\n                <version>2.22.2</version>\n                <configuration>\n                    <testSourceDirectory>src/it/java</testSourceDirectory>\n                    <failIfNoTests>true</failIfNoTests>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>default-integration-test</id>\n                        <goals>\n                            <goal>integration-test</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <version>2.28.0</version>\n                <configuration>\n                    <formats>\n                        <format>\n                            <includes>\n                                <include>src/**</include>\n                            </includes>\n                            <excludes>\n                                <exclude>src/main/resources/**</exclude>\n                            </excludes>\n                            <trimTrailingWhitespace/>\n                            <endWithNewline/>\n                        </format>\n                    </formats>\n                    <java>\n                        <eclipse>\n                          <version>4.9.0</version>\n                          <file>${project.basedir}/eclipse-formatter.xml</file>\n                        </eclipse>\n                    </java>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.8</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>jacoco-report</id>\n                        <phase>test</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                    </execution>\n                    <!-- verify code coverage -->\n                    <execution>\n                        <id>jacoco-check</id>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                        <configuration>\n                            <rules>\n                                <rule>\n                                    <element>BUNDLE</element>\n                                    <limits>\n                                        <limit>\n                                            <counter>LINE</counter>\n                                            <value>COVEREDRATIO</value>\n                                            <minimum>0.90</minimum>\n                                        </limit>\n                                    </limits>\n                                </rule>\n                            </rules>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] HttpMethodClientTest$GetMethodTest.sendThrowsBusyPeerExceptionOnSocketTimeout \u00bb\n[ERROR] ApplicationMetaDataTest.canCreateApplicationMetaDataWithCertificate:37 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.canRoundtripApplicationMetaData:55 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.equalsOnlyReturnsTrueForEquivalentObjects:110 \u00bb InaccessibleObject\n[ERROR] ApplicationMetaDataTest.hashCodesAreEqualForEquivalentObjects:128 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundMultipleCertificates:54 \u00bb InaccessibleObject\n[ERROR] CodeSourceFacadeTest.canCreateFacadeAroundSingleCertificate:40 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithCaseInsensitiveNemVendor:102->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithNemVendor:96->assertValidNemVendorName:117 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithManifestWithoutNemVendor:84 \u00bb InaccessibleObject\n[ERROR] JarFacadeTest.canCreateFacadeAroundJarStreamWithoutManifest:62 \u00bb InaccessibleObject\n[ERROR] MetaDataFactoryTest.canLoadApplicationMetaDataFromCodeSource:31 \u00bb InaccessibleObject\n[INFO]\n[ERROR] Tests run: 2361, Failures: 0, Errors: 12, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for NEM Infrastructure Server - ALL 0.6.100:\n[INFO]\n[INFO] NEM Core ........................................... FAILURE [ 49.403 s]\n[INFO] NEM Deploy ......................................... SKIPPED\n[INFO] NEM Peer ........................................... SKIPPED\n[INFO] NEM Infrastructure Server .......................... SKIPPED\n[INFO] NEM Infrastructure Server - ALL .................... SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 49.592 s\n[INFO] Finished at: 2024-08-05T16:47:48Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project nem-core: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
            "span_id": 3051733008390112523
        },
        {
            "input": "Now, let's update the `ApplicationMetaDataTest` class to work with the new Java version and the updated Flyway dependency. We'll need to modify the way we create mock certificates and handle serialization. Here's the updated version of the `ApplicationMetaDataTest` class:\n\n```diff\n--- a/core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java\n+++ b/core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java\n@@ -1,11 +1,13 @@\n package org.nem.core.metadata;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.core.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n import org.junit.*;\n-import org.mockito.Mockito;\n import org.nem.core.test.Utils;\n import org.nem.core.time.*;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n import java.security.cert.X509Certificate;\n import java.util.*;\n@@ -14,14 +16,14 @@ public class ApplicationMetaDataTest {\n \t@Test\n \tpublic void canCreateApplicationMetaDataWithoutCertificate() {\n \t\t// Arrange:\n-\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n-\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n+\t\tfinal TimeProvider timeProvider = mock(TimeProvider.class);\n+\t\twhen(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n \n \t\t// Act:\n \t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n \n \t\t// Assert:\n-\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n-\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n-\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsNull.nullValue());\n-\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n-\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n+\t\tassertEquals(\"foo\", metaData.getAppName());\n+\t\tassertEquals(\"12.0\", metaData.getVersion());\n+\t\tassertNull(metaData.getCertificateSigner());\n+\t\tassertEquals(new TimeInstant(100), metaData.getStartTime());\n+\t\tassertEquals(new TimeInstant(125), metaData.getCurrentTime());\n \t}\n \n \t@Test\n \tpublic void canCreateApplicationMetaDataWithCertificate() {\n \t\t// Arrange:\n-\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n-\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n+\t\tfinal TimeProvider timeProvider = mock(TimeProvider.class);\n+\t\twhen(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n \t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n \n \t\t// Act:\n \t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n \n \t\t// Assert:\n-\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n-\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n-\t\tMatcherAssert.assertThat(metaData",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java": "package org.nem.core.metadata;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport org.junit.*;\nimport org.nem.core.test.Utils;\nimport org.nem.core.time.*;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.security.cert.X509Certificate;\nimport java.util.*;\n\npublic class ApplicationMetaDataTest {\n\n\t@Test\n\tpublic void canCreateApplicationMetaDataWithoutCertificate() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = mock(TimeProvider.class);\n\t\twhen(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n\n\t\t// Assert:\n\t\tassertEquals(\"foo\", metaData.getAppName());\n\t\tassertEquals(\"12.0\", metaData.getVersion());\n\t\tassertNull(metaData.getCertificateSigner());\n\t\tassertEquals(new TimeInstant(100), metaData.getStartTime());\n\t\tassertEquals(new TimeInstant(125), metaData.getCurrentTime());\n\t}\n\n\t@Test\n\tpublic void canCreateApplicationMetaDataWithCertificate() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = mock(TimeProvider.class);\n\t\twhen(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t}\n\n\t@Test\n\tpublic void canRoundtripApplicationMetaData() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\t\tfinal ApplicationMetaData originalMetaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = roundtripMetaData(originalMetaData);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t}\n\n\t@Test\n\tpublic void getCurrentTimeAlwaysReturnsMostRecentTime() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125), new TimeInstant(136));\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(136)));\n\t}\n\n\t// region equals / hashCode\n\n\t@SuppressWarnings(\"serial\")\n\tprivate static Map<String, ApplicationMetaData> createApplicationMetaDataForEqualityTests(final X509Certificate certificate) {\n\t\tfinal X509Certificate otherCertificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=SomeoneElse,O=NemSoft\");\n\t\treturn new HashMap<String, ApplicationMetaData>() {\n\t\t\t{\n\t\t\t\tthis.put(\"default\", new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-name\", new ApplicationMetaData(\"bar\", \"12.0\", certificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-version\", new ApplicationMetaData(\"foo\", \"11.0\", certificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-cert\", new ApplicationMetaData(\"foo\", \"12.0\", otherCertificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-null-cert\", new ApplicationMetaData(\"foo\", \"12.0\", null, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-time\", new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(22))); // not significant\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate static TimeProvider createTimeProvider(final int time) {\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(time));\n\t\treturn timeProvider;\n\t}\n\n\t@Test\n\tpublic void equalsOnlyReturnsTrueForEquivalentObjects() {\n\t\t// Arrange:\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17));\n\t\tfinal Map<String, ApplicationMetaData> infoMap = createApplicationMetaDataForEqualityTests(certificate);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(infoMap.get(\"default\"), IsEqual.equalTo(metaData));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\"), IsEqual.equalTo(metaData));\n\t\tMatcherAssert.assertThat(null, IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(\"foo\", IsNot.not(IsEqual.equalTo((Object) metaData)));\n\t}\n\n\t@Test\n\tpublic void hashCodesAreEqualForEquivalentObjects() {\n\t\t// Arrange:\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17));\n\t\tfinal int hashCode = metaData.hashCode();\n\t\tfinal Map<String, ApplicationMetaData> infoMap = createApplicationMetaDataForEqualityTests(certificate);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(infoMap.get(\"default\").hashCode(), IsEqual.equalTo(hashCode));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\").hashCode(), IsEqual.equalTo(hashCode));\n\t}\n\n\t// endregion\n\n\tprivate static ApplicationMetaData roundtripMetaData(final ApplicationMetaData metaData) {\n\t\treturn new ApplicationMetaData(Utils.roundtripSerializableEntity(metaData, null));\n\t}\n}\n"
                },
                "compile_error_details": {
                    "core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java": {
                        "10": {
                            "lines": [
                                {
                                    "line_no": 9,
                                    "content": "import org.mockito.Mock;"
                                },
                                {
                                    "line_no": 10,
                                    "content": "import org.mockito.junit.MockitoJUnitRunner;"
                                },
                                {
                                    "line_no": 11,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[10,25] cannot find symbol\nsymbol: class MockitoJUnitRunner\nlocation: package org.mockito.junit\n",
                                "[10,25] cannot find symbol\n"
                            ]
                        },
                        "45": {
                            "lines": [
                                {
                                    "line_no": 44,
                                    "content": "\t\t// Assert:"
                                },
                                {
                                    "line_no": 45,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));"
                                },
                                {
                                    "line_no": 46,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));"
                                }
                            ],
                            "error_texts": [
                                "[45,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[45,75] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[45,17] cannot find symbol\n",
                                "[45,75] cannot find symbol\n"
                            ]
                        },
                        "46": {
                            "lines": [
                                {
                                    "line_no": 45,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));"
                                },
                                {
                                    "line_no": 46,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));"
                                },
                                {
                                    "line_no": 47,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));"
                                }
                            ],
                            "error_texts": [
                                "[46,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[46,67] cannot find symbol\n",
                                "[46,17] cannot find symbol\n",
                                "[46,67] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "47": {
                            "lines": [
                                {
                                    "line_no": 46,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));"
                                },
                                {
                                    "line_no": 47,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));"
                                },
                                {
                                    "line_no": 48,
                                    "content": "\t}"
                                }
                            ],
                            "error_texts": [
                                "[47,17] cannot find symbol\n",
                                "[47,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[47,69] cannot find symbol\n",
                                "[47,69] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "53": {
                            "lines": [
                                {
                                    "line_no": 52,
                                    "content": "\t\t// Arrange:"
                                },
                                {
                                    "line_no": 53,
                                    "content": "\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);"
                                },
                                {
                                    "line_no": 54,
                                    "content": "\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));"
                                }
                            ],
                            "error_texts": [
                                "[53,51] cannot find symbol\nsymbol: variable Mockito\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[53,51] cannot find symbol\n"
                            ]
                        },
                        "54": {
                            "lines": [
                                {
                                    "line_no": 53,
                                    "content": "\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);"
                                },
                                {
                                    "line_no": 54,
                                    "content": "\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));"
                                },
                                {
                                    "line_no": 55,
                                    "content": "\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");"
                                }
                            ],
                            "error_texts": [
                                "[54,17] cannot find symbol\n",
                                "[54,17] cannot find symbol\nsymbol: variable Mockito\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "\t\t// Assert:"
                                },
                                {
                                    "line_no": 62,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));"
                                },
                                {
                                    "line_no": 63,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));"
                                }
                            ],
                            "error_texts": [
                                "[62,17] cannot find symbol\n",
                                "[62,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[62,65] cannot find symbol\n",
                                "[62,65] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "63": {
                            "lines": [
                                {
                                    "line_no": 62,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));"
                                },
                                {
                                    "line_no": 63,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));"
                                },
                                {
                                    "line_no": 64,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));"
                                }
                            ],
                            "error_texts": [
                                "[63,17] cannot find symbol\n",
                                "[63,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[63,65] cannot find symbol\n",
                                "[63,65] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "64": {
                            "lines": [
                                {
                                    "line_no": 63,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));"
                                },
                                {
                                    "line_no": 64,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));"
                                },
                                {
                                    "line_no": 65,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));"
                                }
                            ],
                            "error_texts": [
                                "[64,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[64,75] cannot find symbol\n",
                                "[64,75] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[64,17] cannot find symbol\n"
                            ]
                        },
                        "65": {
                            "lines": [
                                {
                                    "line_no": 64,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));"
                                },
                                {
                                    "line_no": 65,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));"
                                },
                                {
                                    "line_no": 66,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));"
                                }
                            ],
                            "error_texts": [
                                "[65,67] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[65,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[65,17] cannot find symbol\n",
                                "[65,67] cannot find symbol\n"
                            ]
                        },
                        "66": {
                            "lines": [
                                {
                                    "line_no": 65,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));"
                                },
                                {
                                    "line_no": 66,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));"
                                },
                                {
                                    "line_no": 67,
                                    "content": "\t}"
                                }
                            ],
                            "error_texts": [
                                "[66,69] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[66,17] cannot find symbol\n",
                                "[66,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[66,69] cannot find symbol\n"
                            ]
                        },
                        "72": {
                            "lines": [
                                {
                                    "line_no": 71,
                                    "content": "\t\t// Arrange:"
                                },
                                {
                                    "line_no": 72,
                                    "content": "\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);"
                                },
                                {
                                    "line_no": 73,
                                    "content": "\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125), new TimeInstant(136));"
                                }
                            ],
                            "error_texts": [
                                "[72,51] cannot find symbol\n",
                                "[72,51] cannot find symbol\nsymbol: variable Mockito\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "73": {
                            "lines": [
                                {
                                    "line_no": 72,
                                    "content": "\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);"
                                },
                                {
                                    "line_no": 73,
                                    "content": "\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125), new TimeInstant(136));"
                                },
                                {
                                    "line_no": 74,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[73,17] cannot find symbol\n",
                                "[73,17] cannot find symbol\nsymbol: variable Mockito\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": "\t\t// Assert:"
                                },
                                {
                                    "line_no": 79,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));"
                                },
                                {
                                    "line_no": 80,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));"
                                }
                            ],
                            "error_texts": [
                                "[79,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[79,67] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[79,67] cannot find symbol\n",
                                "[79,17] cannot find symbol\n"
                            ]
                        },
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));"
                                },
                                {
                                    "line_no": 80,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));"
                                },
                                {
                                    "line_no": 81,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(136)));"
                                }
                            ],
                            "error_texts": [
                                "[80,69] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[80,17] cannot find symbol\n",
                                "[80,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[80,69] cannot find symbol\n"
                            ]
                        },
                        "81": {
                            "lines": [
                                {
                                    "line_no": 80,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));"
                                },
                                {
                                    "line_no": 81,
                                    "content": "\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(136)));"
                                },
                                {
                                    "line_no": 82,
                                    "content": "\t}"
                                }
                            ],
                            "error_texts": [
                                "[81,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[81,69] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[81,17] cannot find symbol\n",
                                "[81,69] cannot find symbol\n"
                            ]
                        },
                        "102": {
                            "lines": [
                                {
                                    "line_no": 101,
                                    "content": "\tprivate static TimeProvider createTimeProvider(final int time) {"
                                },
                                {
                                    "line_no": 102,
                                    "content": "\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);"
                                },
                                {
                                    "line_no": 103,
                                    "content": "\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(time));"
                                }
                            ],
                            "error_texts": [
                                "[102,51] cannot find symbol\n",
                                "[102,51] cannot find symbol\nsymbol: variable Mockito\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "103": {
                            "lines": [
                                {
                                    "line_no": 102,
                                    "content": "\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);"
                                },
                                {
                                    "line_no": 103,
                                    "content": "\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(time));"
                                },
                                {
                                    "line_no": 104,
                                    "content": "\t\treturn timeProvider;"
                                }
                            ],
                            "error_texts": [
                                "[103,17] cannot find symbol\nsymbol: variable Mockito\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[103,17] cannot find symbol\n"
                            ]
                        },
                        "115": {
                            "lines": [
                                {
                                    "line_no": 114,
                                    "content": "\t\t// Assert:"
                                },
                                {
                                    "line_no": 115,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"default\"), IsEqual.equalTo(metaData));"
                                },
                                {
                                    "line_no": 116,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                }
                            ],
                            "error_texts": [
                                "[115,66] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[115,66] cannot find symbol\n",
                                "[115,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[115,17] cannot find symbol\n"
                            ]
                        },
                        "116": {
                            "lines": [
                                {
                                    "line_no": 115,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"default\"), IsEqual.equalTo(metaData));"
                                },
                                {
                                    "line_no": 116,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 117,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                }
                            ],
                            "error_texts": [
                                "[116,68] cannot find symbol\n",
                                "[116,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[116,78] cannot find symbol\n",
                                "[116,68] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[116,17] cannot find symbol\n",
                                "[116,78] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "117": {
                            "lines": [
                                {
                                    "line_no": 116,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 117,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 118,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                }
                            ],
                            "error_texts": [
                                "[117,71] cannot find symbol\n",
                                "[117,71] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[117,17] cannot find symbol\n",
                                "[117,81] cannot find symbol\n",
                                "[117,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[117,81] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "118": {
                            "lines": [
                                {
                                    "line_no": 117,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 118,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 119,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                }
                            ],
                            "error_texts": [
                                "[118,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[118,17] cannot find symbol\n",
                                "[118,78] cannot find symbol\n",
                                "[118,68] cannot find symbol\n",
                                "[118,68] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[118,78] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "119": {
                            "lines": [
                                {
                                    "line_no": 118,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 119,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 120,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\"), IsEqual.equalTo(metaData));"
                                }
                            ],
                            "error_texts": [
                                "[119,73] cannot find symbol\n",
                                "[119,17] cannot find symbol\n",
                                "[119,83] cannot find symbol\n",
                                "[119,73] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[119,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[119,83] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "120": {
                            "lines": [
                                {
                                    "line_no": 119,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\"), IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 120,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\"), IsEqual.equalTo(metaData));"
                                },
                                {
                                    "line_no": 121,
                                    "content": "\t\tMatcherAssert.assertThat(null, IsNot.not(IsEqual.equalTo(metaData)));"
                                }
                            ],
                            "error_texts": [
                                "[120,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[120,17] cannot find symbol\n",
                                "[120,68] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[120,68] cannot find symbol\n"
                            ]
                        },
                        "121": {
                            "lines": [
                                {
                                    "line_no": 120,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\"), IsEqual.equalTo(metaData));"
                                },
                                {
                                    "line_no": 121,
                                    "content": "\t\tMatcherAssert.assertThat(null, IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 122,
                                    "content": "\t\tMatcherAssert.assertThat(\"foo\", IsNot.not(IsEqual.equalTo((Object) metaData)));"
                                }
                            ],
                            "error_texts": [
                                "[121,48] cannot find symbol\n",
                                "[121,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[121,58] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[121,17] cannot find symbol\n",
                                "[121,58] cannot find symbol\n",
                                "[121,48] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "122": {
                            "lines": [
                                {
                                    "line_no": 121,
                                    "content": "\t\tMatcherAssert.assertThat(null, IsNot.not(IsEqual.equalTo(metaData)));"
                                },
                                {
                                    "line_no": 122,
                                    "content": "\t\tMatcherAssert.assertThat(\"foo\", IsNot.not(IsEqual.equalTo((Object) metaData)));"
                                },
                                {
                                    "line_no": 123,
                                    "content": "\t}"
                                }
                            ],
                            "error_texts": [
                                "[122,59] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[122,49] cannot find symbol\n",
                                "[122,49] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[122,59] cannot find symbol\n",
                                "[122,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[122,17] cannot find symbol\n"
                            ]
                        },
                        "134": {
                            "lines": [
                                {
                                    "line_no": 133,
                                    "content": "\t\t// Assert:"
                                },
                                {
                                    "line_no": 134,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"default\").hashCode(), IsEqual.equalTo(hashCode));"
                                },
                                {
                                    "line_no": 135,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                }
                            ],
                            "error_texts": [
                                "[134,77] cannot find symbol\n",
                                "[134,17] cannot find symbol\n",
                                "[134,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[134,77] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "135": {
                            "lines": [
                                {
                                    "line_no": 134,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"default\").hashCode(), IsEqual.equalTo(hashCode));"
                                },
                                {
                                    "line_no": 135,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                },
                                {
                                    "line_no": 136,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                }
                            ],
                            "error_texts": [
                                "[135,79] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[135,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[135,17] cannot find symbol\n",
                                "[135,89] cannot find symbol\n",
                                "[135,89] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[135,79] cannot find symbol\n"
                            ]
                        },
                        "136": {
                            "lines": [
                                {
                                    "line_no": 135,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                },
                                {
                                    "line_no": 136,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                },
                                {
                                    "line_no": 137,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                }
                            ],
                            "error_texts": [
                                "[136,92] cannot find symbol\n",
                                "[136,82] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[136,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[136,17] cannot find symbol\n",
                                "[136,82] cannot find symbol\n",
                                "[136,92] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "137": {
                            "lines": [
                                {
                                    "line_no": 136,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                },
                                {
                                    "line_no": 137,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                },
                                {
                                    "line_no": 138,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                }
                            ],
                            "error_texts": [
                                "[137,89] cannot find symbol\n",
                                "[137,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[137,79] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[137,79] cannot find symbol\n",
                                "[137,17] cannot find symbol\n",
                                "[137,89] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n"
                            ]
                        },
                        "138": {
                            "lines": [
                                {
                                    "line_no": 137,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                },
                                {
                                    "line_no": 138,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                },
                                {
                                    "line_no": 139,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\").hashCode(), IsEqual.equalTo(hashCode));"
                                }
                            ],
                            "error_texts": [
                                "[138,84] cannot find symbol\n",
                                "[138,94] cannot find symbol\n",
                                "[138,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[138,94] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[138,84] cannot find symbol\nsymbol: variable IsNot\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[138,17] cannot find symbol\n"
                            ]
                        },
                        "139": {
                            "lines": [
                                {
                                    "line_no": 138,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));"
                                },
                                {
                                    "line_no": 139,
                                    "content": "\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\").hashCode(), IsEqual.equalTo(hashCode));"
                                },
                                {
                                    "line_no": 140,
                                    "content": "\t}"
                                }
                            ],
                            "error_texts": [
                                "[139,17] cannot find symbol\nsymbol: variable MatcherAssert\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[139,79] cannot find symbol\nsymbol: variable IsEqual\nlocation: class org.nem.core.metadata.ApplicationMetaDataTest\n",
                                "[139,17] cannot find symbol\n",
                                "[139,79] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 16280012148613662078
        },
        {
            "input": "I apologize for the confusion. It seems that the test class is using some custom assertion libraries that are not available in the current setup. Let's update the `ApplicationMetaDataTest` class to use standard JUnit assertions and remove the dependencies on custom libraries. Here's an updated version of the class:\n\n```diff\n--- a/core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java\n+++ b/core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java\n@@ -1,13 +1,11 @@\n package org.nem.core.metadata;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.core.*;\n-import org.junit.*;\n-import org.mockito.Mockito;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n import org.nem.core.test.Utils;\n import org.nem.core.time.*;\n-import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnitRunner;\n \n import java.security.cert.X509Certificate;\n import java.util.*;\n@@ -16,14 +14,14 @@ public class ApplicationMetaDataTest {\n \t@Test\n \tpublic void canCreateApplicationMetaDataWithoutCertificate() {\n \t\t// Arrange:\n-\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n-\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n+\t\tfinal TimeProvider timeProvider = mock(TimeProvider.class);\n+\t\twhen(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n \n \t\t// Act:\n \t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n \n \t\t// Assert:\n-\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n-\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n-\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsNull.nullValue());\n-\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n-\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n+\t\tassertEquals(\"foo\", metaData.getAppName());\n+\t\tassertEquals(\"12.0\", metaData.getVersion());\n+\t\tassertNull(metaData.getCertificateSigner());\n+\t\tassertEquals(new TimeInstant(100), metaData.getStartTime());\n+\t\tassertEquals(new TimeInstant(125), metaData.getCurrentTime());\n \t}\n \n \t@Test\n \tpublic void canCreateApplicationMetaDataWithCertificate() {\n \t\t// Arrange:\n-\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n-\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n+\t\tfinal TimeProvider timeProvider = mock(TimeProvider.class);\n+\t\twhen(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n \t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n \n \t\t// Act:\n \t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n \n \t\t// Assert:\n-\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n-\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n-\t\tMatch",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "illegal start of expression\n",
                "updated_files": {
                    "core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java": "package org.nem.core.metadata;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport org.junit.Test;\nimport org.nem.core.test.Utils;\nimport org.nem.core.time.*;\n\nimport java.security.cert.X509Certificate;\nimport java.util.*;\n\npublic class ApplicationMetaDataTest {\n\n @Test\n public void canCreateApplicationMetaDataWithoutCertificate() {\n public void canCreateApplicationMetaDataWithCertificate() {\n  // Arrange:\n  final TimeProvider timeProvider = mock(TimeProvider.class);\n  when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n  final TimeProvider timeProvider = mock(TimeProvider.class);\n  when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\n  // Act:\n  final ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n\n  // Assert:\n  assertEquals(\"foo\", metaData.getAppName());\n  assertEquals(\"12.0\", metaData.getVersion());\n  assertNull(metaData.getCertificateSigner());\n  assertEquals(new TimeInstant(100), metaData.getStartTime());\n  assertEquals(new TimeInstant(125), metaData.getCurrentTime());\n }\n\n @Test\n public void canCreateApplicationMetaDataWithCertificate() {\n public void canCreateApplicationMetaDataWithCertificate() {\n  // Arrange:\n  final TimeProvider timeProvider = mock(TimeProvider.class);\n  when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n  final X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\n  // Act:\n  final ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n  final ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n\n// Assert:\n  MatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));\n  MatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n  MatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n}\n\n@Test\n public void canRoundtripApplicationMetaData() {\n public void canCreateApplicationMetaDataWithCertificate() {\n  // Arrange:\n  final TimeProvider timeProvider = mock(TimeProvider.class);\n  when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n  final X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n  final ApplicationMetaData originalMetaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n\n// Act:\n  final ApplicationMetaData metaData = roundtripMetaData(originalMetaData);\n\n// Assert:\n  MatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));\n  MatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n  MatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n}\n\n@Test\n public void getCurrentTimeAlwaysReturnsMostRecentTime() {\n public void canCreateApplicationMetaDataWithCertificate() {\n  // Arrange:\n  final TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n  Mockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125), new TimeInstant(136));\n  final TimeProvider timeProvider = mock(TimeProvider.class);\n  when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\n// Act:\n  final ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n\n// Assert:\n  assertEquals(\"foo\", metaData.getAppName());\n  assertEquals(\"12.0\", metaData.getVersion());\n  assertNull(metaData.getCertificateSigner());\n  assertEquals(new TimeInstant(100), metaData.getStartTime());\n  assertEquals(new TimeInstant(125), metaData.getCurrentTime());\n  MatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(136)));\n}\n\n // region equals / hashCode\n\n @SuppressWarnings(\"serial\")\n private static Map<String, ApplicationMetaData> createApplicationMetaDataForEqualityTests(final X509Certificate certificate) {\n  final X509Certificate otherCertificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=SomeoneElse,O=NemSoft\");\n  return new HashMap<String, ApplicationMetaData>() {\n{\n    this.put(\"default\", new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17)));\n    this.put(\"diff-name\", new ApplicationMetaData(\"bar\", \"12.0\", certificate, createTimeProvider(17)));\n    this.put(\"diff-version\", new ApplicationMetaData(\"foo\", \"11.0\", certificate, createTimeProvider(17)));\n    this.put(\"diff-cert\", new ApplicationMetaData(\"foo\", \"12.0\", otherCertificate, createTimeProvider(17)));\n    this.put(\"diff-null-cert\", new ApplicationMetaData(\"foo\", \"12.0\", null, createTimeProvider(17)));\n    this.put(\"diff-time\", new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(22))); // not significant\n}\n};\n}\n\n private static TimeProvider createTimeProvider(final int time) {\n  final TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n  Mockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(time));\n  return timeProvider;\n}\n\n@Test\n public void equalsOnlyReturnsTrueForEquivalentObjects() {\n public void canCreateApplicationMetaDataWithCertificate() {\n  // Arrange:\n  final X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n  final ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17));\n  final Map<String, ApplicationMetaData> infoMap = createApplicationMetaDataForEqualityTests(certificate);\n\n// Assert:\n  MatcherAssert.assertThat(infoMap.get(\"default\"), IsEqual.equalTo(metaData));\n  MatcherAssert.assertThat(infoMap.get(\"diff-name\"), IsNot.not(IsEqual.equalTo(metaData)));\n  MatcherAssert.assertThat(infoMap.get(\"diff-version\"), IsNot.not(IsEqual.equalTo(metaData)));\n  MatcherAssert.assertThat(infoMap.get(\"diff-cert\"), IsNot.not(IsEqual.equalTo(metaData)));\n  MatcherAssert.assertThat(infoMap.get(\"diff-null-cert\"), IsNot.not(IsEqual.equalTo(metaData)));\n  MatcherAssert.assertThat(infoMap.get(\"diff-time\"), IsEqual.equalTo(metaData));\n  MatcherAssert.assertThat(null, IsNot.not(IsEqual.equalTo(metaData)));\n  MatcherAssert.assertThat(\"foo\", IsNot.not(IsEqual.equalTo((Object) metaData)));\n}\n\n@Test\n public void hashCodesAreEqualForEquivalentObjects() {\n public void canCreateApplicationMetaDataWithCertificate() {\n  // Arrange:\n  final X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n  final ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17));\n  final int hashCode = metaData.hashCode();\n  final Map<String, ApplicationMetaData> infoMap = createApplicationMetaDataForEqualityTests(certificate);\n\n// Assert:\n  MatcherAssert.assertThat(infoMap.get(\"default\").hashCode(), IsEqual.equalTo(hashCode));\n  MatcherAssert.assertThat(infoMap.get(\"diff-name\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n  MatcherAssert.assertThat(infoMap.get(\"diff-version\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n  MatcherAssert.assertThat(infoMap.get(\"diff-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n  MatcherAssert.assertThat(infoMap.get(\"diff-null-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n  MatcherAssert.assertThat(infoMap.get(\"diff-time\").hashCode(), IsEqual.equalTo(hashCode));\n}\n\n // endregion\n\n private static ApplicationMetaData roundtripMetaData(final ApplicationMetaData metaData) {\n  return new ApplicationMetaData(Utils.roundtripSerializableEntity(metaData, null));\n}\n}"
                },
                "compile_error_details": {
                    "core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java": {
                        "21": {
                            "lines": [
                                {
                                    "line_no": 20,
                                    "content": " public void canCreateApplicationMetaDataWithoutCertificate() {"
                                },
                                {
                                    "line_no": 21,
                                    "content": " public void canCreateApplicationMetaDataWithCertificate() {"
                                },
                                {
                                    "line_no": 22,
                                    "content": "  // Arrange:"
                                }
                            ],
                            "error_texts": [
                                "[21,2] illegal start of expression\n"
                            ]
                        },
                        "41": {
                            "lines": [
                                {
                                    "line_no": 40,
                                    "content": " public void canCreateApplicationMetaDataWithCertificate() {"
                                },
                                {
                                    "line_no": 41,
                                    "content": " public void canCreateApplicationMetaDataWithCertificate() {"
                                },
                                {
                                    "line_no": 42,
                                    "content": "  // Arrange:"
                                }
                            ],
                            "error_texts": [
                                "[41,2] illegal start of expression\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": " public void canRoundtripApplicationMetaData() {"
                                },
                                {
                                    "line_no": 59,
                                    "content": " public void canCreateApplicationMetaDataWithCertificate() {"
                                },
                                {
                                    "line_no": 60,
                                    "content": "  // Arrange:"
                                }
                            ],
                            "error_texts": [
                                "[59,2] illegal start of expression\n"
                            ]
                        },
                        "77": {
                            "lines": [
                                {
                                    "line_no": 76,
                                    "content": " public void getCurrentTimeAlwaysReturnsMostRecentTime() {"
                                },
                                {
                                    "line_no": 77,
                                    "content": " public void canCreateApplicationMetaDataWithCertificate() {"
                                },
                                {
                                    "line_no": 78,
                                    "content": "  // Arrange:"
                                }
                            ],
                            "error_texts": [
                                "[77,2] illegal start of expression\n"
                            ]
                        },
                        "121": {
                            "lines": [
                                {
                                    "line_no": 120,
                                    "content": " public void equalsOnlyReturnsTrueForEquivalentObjects() {"
                                },
                                {
                                    "line_no": 121,
                                    "content": " public void canCreateApplicationMetaDataWithCertificate() {"
                                },
                                {
                                    "line_no": 122,
                                    "content": "  // Arrange:"
                                }
                            ],
                            "error_texts": [
                                "[121,2] illegal start of expression\n"
                            ]
                        },
                        "140": {
                            "lines": [
                                {
                                    "line_no": 139,
                                    "content": " public void hashCodesAreEqualForEquivalentObjects() {"
                                },
                                {
                                    "line_no": 140,
                                    "content": " public void canCreateApplicationMetaDataWithCertificate() {"
                                },
                                {
                                    "line_no": 141,
                                    "content": "  // Arrange:"
                                }
                            ],
                            "error_texts": [
                                "[140,2] illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "illegal start of expression\n",
            "span_id": 3349811820902819867
        }
    ],
    "read_file": [
        {
            "input": "nis/src/main/java/org/nem/specific/deploy/appconfig/NisAppConfig.java",
            "output": "package org.nem.specific.deploy.appconfig;\n\nimport org.flywaydb.core.Flyway;\nimport org.hibernate.SessionFactory;\nimport org.nem.core.model.*;\nimport org.nem.core.model.primitive.*;\nimport org.nem.core.node.NodeFeature;\nimport org.nem.core.time.TimeProvider;\nimport org.nem.deploy.*;\nimport org.nem.nis.*;\nimport org.nem.nis.audit.AuditCollection;\nimport org.nem.nis.boot.*;\nimport org.nem.nis.cache.*;\nimport org.nem.nis.connect.*;\nimport org.nem.nis.controller.interceptors.LocalHostDetector;\nimport org.nem.nis.dao.*;\nimport org.nem.nis.harvesting.*;\nimport org.nem.nis.mappers.*;\nimport org.nem.nis.pox.ImportanceCalculator;\nimport org.nem.nis.pox.poi.*;\nimport org.nem.nis.pox.pos.PosImportanceCalculator;\nimport org.nem.nis.secret.*;\nimport org.nem.nis.service.BlockChainLastBlockLayer;\nimport org.nem.nis.state.*;\nimport org.nem.nis.sync.*;\nimport org.nem.nis.validators.*;\nimport org.nem.peer.connect.CommunicationMode;\nimport org.nem.peer.node.*;\nimport org.nem.peer.services.ChainServices;\nimport org.nem.peer.trust.*;\nimport org.nem.specific.deploy.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.*;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\nimport org.springframework.orm.hibernate4.HibernateTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.sql.DataSource;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.function.*;\n\n@Configuration\n@ComponentScan(basePackages = {\n\t\t\"org.nem.nis\"\n}, excludeFilters = {\n\t\t@ComponentScan.Filter(type = FilterType.ANNOTATION, value = org.springframework.stereotype.Controller.class),\n\t\t@ComponentScan.Filter(type = FilterType.REGEX, pattern = {\n\t\t\t\t\"org.nem.nis.websocket.*\"\n\t\t})\n})\n@EnableTransactionManagement\npublic class NisAppConfig {\n\n\t@Autowired\n\tprivate AccountDao accountDao;\n\n\t@Autowired\n\tprivate BlockDao blockDao;\n\n\t@Autowired\n\tprivate BlockChainLastBlockLayer blockChainLastBlockLayer;\n\n\t@Autowired\n\t@SuppressWarnings(\"unused\")\n\tprivate TransferDao transferDao;\n\n\tprivate static final int MAX_AUDIT_HISTORY_SIZE = 50;\n\n\t@Bean\n\tprotected AuditCollection outgoingAudits() {\n\t\treturn this.createAuditCollection();\n\t}\n\n\t@Bean\n\tprotected AuditCollection incomingAudits() {\n\t\treturn this.createAuditCollection();\n\t}\n\n\tprivate AuditCollection createAuditCollection() {\n\t\treturn new AuditCollection(MAX_AUDIT_HISTORY_SIZE, this.timeProvider());\n\t}\n\n\t@Bean\n\tpublic DataSource dataSource() throws IOException {\n\t\tfinal NisConfiguration configuration = this.nisConfiguration();\n\t\tfinal String nemFolder = configuration.getNemFolder();\n\t\tfinal Properties prop = new Properties();\n\t\tprop.load(NisAppConfig.class.getClassLoader().getResourceAsStream(\"db.properties\"));\n\n\t\t// replace url parameters with values from configuration\n\t\tfinal String jdbcUrl = prop.getProperty(\"jdbc.url\").replace(\"${nem.folder}\", nemFolder).replace(\"${nem.network}\",\n\t\t\t\tconfiguration.getNetworkName());\n\n\t\tfinal DriverManagerDataSource dataSource = new DriverManagerDataSource();\n\t\tdataSource.setDriverClassName(prop.getProperty(\"jdbc.driverClassName\"));\n\t\tdataSource.setUrl(jdbcUrl);\n\t\tdataSource.setUsername(prop.getProperty(\"jdbc.username\"));\n\t\tdataSource.setPassword(prop.getProperty(\"jdbc.password\"));\n\t\treturn dataSource;\n\t}\n\n\t@Bean(initMethod = \"migrate\")\n\tpublic Flyway flyway() throws IOException {\n\t\tfinal Properties prop = new Properties();\n\t\tprop.load(NisAppConfig.class.getClassLoader().getResourceAsStream(\"db.properties\"));\n\n\t\tfinal org.flywaydb.core.Flyway flyway = new Flyway();\n\t\tflyway.setDataSource(this.dataSource());\n\t\tflyway.setClassLoader(NisAppConfig.class.getClassLoader());\n\t\tflyway.setLocations(prop.getProperty(\"flyway.locations\"));\n\t\tflyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty(\"flyway.validate\")));\n\t\treturn flyway;\n\t}\n\n\t@Bean\n\t@DependsOn(\"flyway\")\n\tpublic SessionFactory sessionFactory() throws IOException {\n\t\treturn SessionFactoryLoader.load(this.dataSource());\n\t}\n\n\t@Bean\n\tpublic BlockChain blockChain() {\n\t\treturn new BlockChain(this.blockChainLastBlockLayer, this.blockChainUpdater());\n\t}\n\n\t@Bean\n\tpublic BlockChainServices blockChainServices() {\n\t\treturn new BlockChainServices(this.blockDao, this.blockTransactionObserverFactory(), this.blockValidatorFactory(),\n\t\t\t\tthis.transactionValidatorFactory(), this.nisMapperFactory(), this.nisConfiguration().getForkConfiguration());\n\t}\n\n\t@Bean\n\tpublic BlockChainUpdater blockChainUpdater() {\n\t\treturn new BlockChainUpdater(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainContextFactory(),\n\t\t\t\tthis.unconfirmedTransactions(), this.nisConfiguration());\n\t}\n\n\t@Bean\n\tpublic BlockChainContextFactory blockChainContextFactory() {\n\t\treturn new BlockChainContextFactory(this.nisCache(), this.blockChainLastBlockLayer, this.blockDao, this.blockChainServices(),\n\t\t\t\tthis.unconfirmedTransactions());\n\t}\n\n\t// region mappers\n\n\t@Bean\n\tpublic MapperFactory mapperFactory() {\n\t\treturn new DefaultMapperFactory(this.mosaicIdCache());\n\t}\n\n\t@Bean\n\tpublic NisMapperFactory nisMapperFactory() {\n\t\treturn new NisMapperFactory(this.mapperFactory());\n\t}\n\n\t@Bean\n\tpublic NisModelToDbModelMapper nisModelToDbModelMapper() {\n\t\treturn new NisModelToDbModelMapper(this.mapperFactory().createModelToDbModelMapper(new AccountDaoLookupAdapter(this.accountDao)));\n\t}\n\n\t@Bean\n\tpublic NisDbModelToModelMapper nisDbModelToModelMapper() {\n\t\treturn this.nisMapperFactory().createDbModelToModelNisMapper(this.accountCache());\n\t}\n\n\t// endregion\n\n\t// region observers + validators\n\n\t@Bean\n\tpublic BlockTransactionObserverFactory blockTransactionObserverFactory() {\n\t\tfinal int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();\n\t\treturn new BlockTransactionObserverFactory(this.observerOptions(), estimatedBlocksPerYear);\n\t}\n\n\t@Bean\n\tpublic BlockValidatorFactory blockValidatorFactory() {\n\t\treturn new BlockValidatorFactory(this.timeProvider(), this.nisConfiguration().getForkConfiguration());\n\t}\n\n\t@Bean\n\tpublic TransactionValidatorFactory transactionValidatorFactory() {\n\t\treturn new TransactionValidatorFactory(this.timeProvider(), this.nisConfiguration().getNetworkInfo(),\n\t\t\t\tthis.nisConfiguration().getForkConfiguration(), this.nisConfiguration().ignoreFees());\n\t}\n\n\t@Bean\n\tpublic SingleTransactionValidator transactionValidator() {\n\t\t// this is only consumed by the TransactionController and used in transaction/prepare,\n\t\t// which should propagate incomplete transactions\n\t\treturn this.transactionValidatorFactory().createIncompleteSingleBuilder(this.nisCache()).build();\n\t}\n\n\t// endregion\n\n\t@Bean\n\tpublic Harvester harvester() {\n\t\tfinal NewBlockTransactionsProvider transactionsProvider = new DefaultNewBlockTransactionsProvider(this.nisCache(),\n\t\t\t\tthis.transactionValidatorFactory(), this.blockValidatorFactory(), this.blockTransactionObserverFactory(),\n\t\t\t\tthis.unconfirmedTransactionsFilter(), this.nisConfiguration().getForkConfiguration());\n\n\t\tfinal BlockGenerator generator = new BlockGenerator(this.nisCache(), transactionsProvider, this.blockDao,\n\t\t\t\tnew BlockScorer(this.accountStateCache()), this.blockValidatorFactory().create(this.nisCache()));\n\t\treturn new Harvester(this.timeProvider(), this.blockChainLastBlockLayer, this.unlockedAccounts(), this.nisDbModelToModelMapper(),\n\t\t\t\tgenerator);\n\t}\n\n\t@Bean\n\tpublic SynchronizedAccountCache accountCache() {\n\t\treturn new SynchronizedAccountCache(new DefaultAccountCache());\n\t}\n\n\t@Bean\n\tpublic SynchronizedAccountStateCache accountStateCache() {\n\t\treturn new SynchronizedAccountStateCache(new DefaultAccountStateCache());\n\t}\n\n\t@Bean\n\tpublic SynchronizedHashCache transactionHashCache() {\n\t\treturn new SynchronizedHashCache(new DefaultHashCache(50000, this.nisConfiguration().getTransactionHashRetentionTime()));\n\t}\n\n\t@Bean\n\tpublic SynchronizedPoxFacade poxFacade() {\n\t\treturn new SynchronizedPoxFacade(new DefaultPoxFacade(this.importanceCalculator()));\n\t}\n\n\t@Bean\n\tpublic SynchronizedNamespaceCache namespaceCache() {\n\t\treturn new SynchronizedNamespaceCache(new DefaultNamespaceCache());\n\t}\n\n\t@Bean\n\tpublic ReadOnlyNisCache nisCache() {\n\t\treturn new DefaultNisCache(this.accountCache(), this.accountStateCache(), this.poxFacade(), this.transactionHashCache(),\n\t\t\t\tthis.namespaceCache());\n\t}\n\n\t@Bean\n\t@SuppressWarnings(\"serial\")\n\tpublic ImportanceCalculator importanceCalculator() {\n\t\tfinal Map<BlockChainFeature, Supplier<ImportanceCalculator>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<ImportanceCalculator>>() {\n\t\t\t{\n\t\t\t\tthis.put(BlockChainFeature.PROOF_OF_IMPORTANCE,\n\t\t\t\t\t\t() -> new PoiImportanceCalculator(new PoiScorer(), NisAppConfig::getBlockDependentPoiOptions));\n\t\t\t\tthis.put(BlockChainFeature.PROOF_OF_STAKE, PosImportanceCalculator::new);\n\t\t\t}\n\t\t};\n\n\t\treturn BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(), \"consensus algorithm\",\n\t\t\t\tfeatureSupplierMap);\n\t}\n\n\t@Bean\n\tpublic UnlockedAccounts unlockedAccounts() {\n\t\treturn new UnlockedAccounts(this.accountCache(), this.accountStateCache(), this.blockChainLastBlockLayer,\n\t\t\t\tthis.canHarvestPredicate(), this.nisConfiguration().getUnlockedLimit());\n\t}\n\n\t@Bean\n\tpublic CanHarvestPredicate canHarvestPredicate() {\n\t\treturn new CanHarvestPredicate(this::getBlockDependentMinHarvesterBalance);\n\t}\n\n\tprivate Amount getBlockDependentMinHarvesterBalance(final BlockHeight height) {\n\t\treturn getBlockDependentPoiOptions(height).getMinHarvesterBalance();\n\t}\n\n\tprivate static org.nem.nis.pox.poi.PoiOptions getBlockDependentPoiOptions(final BlockHeight height) {\n\t\treturn new PoiOptionsBuilder(height).create();\n\t}\n\n\t@Bean\n\tpublic Supplier<BlockHeight> lastBlockHeight() {\n\t\treturn this.blockChainLastBlockLayer::getLastBlockHeight;\n\t}\n\n\t@Bean\n\tpublic UnconfirmedTransactions unconfirmedTransactions() {\n\t\tfinal BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();\n\t\tfinal UnconfirmedStateFactory unconfirmedStateFactory = new UnconfirmedStateFactory(this.transactionValidatorFactory(),\n\t\t\t\tthis.blockTransactionObserverFactory()::createExecuteCommitObserver, this.timeProvider(), this.lastBlockHeight(),\n\t\t\t\tblockChainConfiguration.getMaxTransactionsPerBlock(), this.nisConfiguration().getForkConfiguration());\n\t\tfinal UnconfirmedTransactions unconfirmedTransactions = new DefaultUnconfirmedTransactions(unconfirmedStateFactory,\n\t\t\t\tthis.nisCache());\n\t\treturn new SynchronizedUnconfirmedTransactions(unconfirmedTransactions);\n\t}\n\n\t@Bean\n\tpublic UnconfirmedTransactionsFilter unconfirmedTransactionsFilter() {\n\t\treturn this.unconfirmedTransactions().asFilter();\n\t}\n\n\t@Bean\n\tpublic HibernateTransactionManager transactionManager() throws IOException {\n\t\treturn new HibernateTransactionManager(this.sessionFactory());\n\t}\n\n\t@Bean\n\tpublic NisMain nisMain() {\n\t\t// initialize network info\n\t\tNetworkInfos.setDefault(this.nisConfiguration().getNetworkInfo());\n\n\t\t// initialize other globals\n\t\tfinal NamespaceCacheLookupAdapters adapters = new NamespaceCacheLookupAdapters(this.namespaceCache());\n\t\tif (this.nisConfiguration().ignoreFees()) {\n\t\t\tNemGlobals.setTransactionFeeCalculator(new ZeroTransactionFeeCalculator());\n\t\t} else {\n\t\t\tNemGlobals.setTransactionFeeCalculator(new DefaultTransactionFeeCalculator(adapters.asMosaicFeeInformationLookup(),\n\t\t\t\t\t() -> this.blockChainLastBlockLayer.getLastBlockHeight().next(), new BlockHeight[]{\n\t\t\t\t\t\t\tnew BlockHeight(BlockMarkerConstants.FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24)),\n\t\t\t\t\t\t\tnew BlockHeight(\n\t\t\t\t\t\t\t\t\tBlockMarkerConstants.SECOND_FEE_FORK(this.nisConfiguration().getNetworkInfo().getVersion() << 24))\n\t\t\t\t\t}));\n\t\t}\n\n\t\tNemGlobals.setBlockChainConfiguration(this.nisConfiguration().getBlockChainConfiguration());\n\t\tNemStateGlobals.setWeightedBalancesSupplier(this.weighedBalancesSupplier());\n\n\t\treturn new NisMain(this.blockDao, this.nisCache(), this.networkHostBootstrapper(), this.nisModelToDbModelMapper(),\n\t\t\t\tthis.nisConfiguration(), this.blockAnalyzer(), System::exit);\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tprivate Supplier<WeightedBalances> weighedBalancesSupplier() {\n\t\tfinal Map<BlockChainFeature, Supplier<Supplier<WeightedBalances>>> featureSupplierMap = new HashMap<BlockChainFeature, Supplier<Supplier<WeightedBalances>>>() {\n\t\t\t{\n\t\t\t\tthis.put(BlockChainFeature.WB_TIME_BASED_VESTING, () -> TimeBasedVestingWeightedBalances::new);\n\t\t\t\tthis.put(BlockChainFeature.WB_IMMEDIATE_VESTING, () -> AlwaysVestedBalances::new);\n\t\t\t}\n\t\t};\n\n\t\treturn BlockChainFeatureDependentFactory.createObject(this.nisConfiguration().getBlockChainConfiguration(),\n\t\t\t\t\"weighted balance scheme\", featureSupplierMap);\n\t}\n\n\t@Bean\n\tpublic BlockAnalyzer blockAnalyzer() {\n\t\tfinal int estimatedBlocksPerYear = this.nisConfiguration().getBlockChainConfiguration().getEstimatedBlocksPerYear();\n\t\treturn new BlockAnalyzer(this.blockDao, this.blockChainUpdater(), this.blockChainLastBlockLayer, this.nisMapperFactory(),\n\t\t\t\testimatedBlocksPerYear);\n\t}\n\n\t@Bean\n\tpublic HttpConnectorPool httpConnectorPool() {\n\t\tfinal CommunicationMode communicationMode = this.nisConfiguration().useBinaryTransport()\n\t\t\t\t? CommunicationMode.BINARY\n\t\t\t\t: CommunicationMode.JSON;\n\t\treturn new HttpConnectorPool(communicationMode, this.outgoingAudits());\n\t}\n\n\t@Bean\n\tpublic NisPeerNetworkHost nisPeerNetworkHost() {\n\t\tfinal HarvestingTask harvestingTask = new HarvestingTask(this.blockChain(), this.harvester(), this.unconfirmedTransactions());\n\n\t\tfinal PeerNetworkScheduler scheduler = new PeerNetworkScheduler(this.timeProvider(), harvestingTask);\n\n\t\tfinal CountingBlockSynchronizer synchronizer = new CountingBlockSynchronizer(this.blockChain());\n\n\t\treturn new NisPeerNetworkHost(this.nisCache(), synchronizer, scheduler, this.chainServices(), this.nodeCompatibilityChecker(),\n\t\t\t\tthis.nisConfiguration(), this.httpConnectorPool(), this.trustProvider(), this.incomingAudits(), this.outgoingAudits());\n\t}\n\n\t@Bean\n\tpublic NetworkHostBootstrapper networkHostBootstrapper() {\n\t\treturn new HarvestAwareNetworkHostBootstrapper(this.nisPeerNetworkHost(), this.unlockedAccounts(), this.nisConfiguration());\n\t}\n\n\t@Bean\n\tpublic NisConfiguration nisConfiguration() {\n\t\treturn new NisConfiguration();\n\t}\n\n\t@Bean\n\tpublic TimeProvider timeProvider() {\n\t\treturn CommonStarter.TIME_PROVIDER;\n\t}\n\n\t@Bean\n\tpublic TrustProvider trustProvider() {\n\t\tfinal int LOW_COMMUNICATION_NODE_WEIGHT = 30;\n\t\tfinal int TRUST_CACHE_TIME = 15 * 60;\n\t\treturn new CachedTrustProvider(new LowComTrustProvider(new EigenTrustPlusPlus(), LOW_COMMUNICATION_NODE_WEIGHT), TRUST_CACHE_TIME,\n\t\t\t\tthis.timeProvider());\n\t}\n\n\t@Bean\n\tpublic NemConfigurationPolicy configurationPolicy() {\n\t\treturn new NisConfigurationPolicy();\n\t}\n\n\t@Bean\n\tpublic ChainServices chainServices() {\n\t\treturn new DefaultChainServices(this.blockChainLastBlockLayer, this.httpConnectorPool());\n\t}\n\n\t@Bean\n\tpublic CommonStarter commonStarter() {\n\t\treturn CommonStarter.INSTANCE;\n\t}\n\n\t@Bean\n\tpublic ValidationState validationState() {\n\t\treturn NisCacheUtils.createValidationState(this.nisCache());\n\t}\n\n\t@Bean\n\tpublic LocalHostDetector localHostDetector() {\n\t\treturn new LocalHostDetector(this.nisConfiguration().getAdditionalLocalIps());\n\t}\n\n\t@Bean\n\tpublic NodeCompatibilityChecker nodeCompatibilityChecker() {\n\t\treturn new DefaultNodeCompatibilityChecker();\n\t}\n\n\t@Bean\n\tpublic EnumSet<ObserverOption> observerOptions() {\n\t\tfinal EnumSet<ObserverOption> observerOptions = EnumSet.noneOf(ObserverOption.class);\n\t\tif (this.nisConfiguration().isFeatureSupported(NodeFeature.HISTORICAL_ACCOUNT_DATA)) {\n\t\t\tobserverOptions.add(ObserverOption.NoHistoricalDataPruning);\n\t\t}\n\n\t\tfinal BlockChainConfiguration blockChainConfiguration = this.nisConfiguration().getBlockChainConfiguration();\n\t\tif (blockChainConfiguration.isBlockChainFeatureSupported(BlockChainFeature.PROOF_OF_STAKE)) {\n\t\t\tobserverOptions.add(ObserverOption.NoOutlinkObserver);\n\t\t}\n\n\t\treturn observerOptions;\n\t}\n\n\t@Bean\n\tpublic Function<Address, Collection<Address>> cosignatoryLookup() {\n\t\treturn a -> this.accountStateCache().findStateByAddress(a).getMultisigLinks().getCosignatories();\n\t}\n\n\t@Bean\n\tpublic MosaicIdCache mosaicIdCache() {\n\t\treturn new SynchronizedMosaicIdCache(new DefaultMosaicIdCache());\n\t}\n}\n",
            "error": "",
            "span_id": 16674034300971626012
        },
        {
            "input": "core/src/test/java/org/nem/core/deploy/ApplicationMetaDataTest.java",
            "output": "Error: RetryError[<Future at 0x786b3d7a2420 state=finished raised FileNotFoundError>]",
            "error": "RetryError[<Future at 0x786b3d7a2420 state=finished raised FileNotFoundError>]",
            "span_id": 2840897589836686201
        },
        {
            "input": "core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java",
            "output": "package org.nem.core.metadata;\n\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.core.*;\nimport org.junit.*;\nimport org.mockito.Mockito;\nimport org.nem.core.test.Utils;\nimport org.nem.core.time.*;\n\nimport java.security.cert.X509Certificate;\nimport java.util.*;\n\npublic class ApplicationMetaDataTest {\n\n\t@Test\n\tpublic void canCreateApplicationMetaDataWithoutCertificate() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsNull.nullValue());\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t}\n\n\t@Test\n\tpublic void canCreateApplicationMetaDataWithCertificate() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t}\n\n\t@Test\n\tpublic void canRoundtripApplicationMetaData() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\t\tfinal ApplicationMetaData originalMetaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = roundtripMetaData(originalMetaData);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t}\n\n\t@Test\n\tpublic void getCurrentTimeAlwaysReturnsMostRecentTime() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125), new TimeInstant(136));\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(136)));\n\t}\n\n\t// region equals / hashCode\n\n\t@SuppressWarnings(\"serial\")\n\tprivate static Map<String, ApplicationMetaData> createApplicationMetaDataForEqualityTests(final X509Certificate certificate) {\n\t\tfinal X509Certificate otherCertificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=SomeoneElse,O=NemSoft\");\n\t\treturn new HashMap<String, ApplicationMetaData>() {\n\t\t\t{\n\t\t\t\tthis.put(\"default\", new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-name\", new ApplicationMetaData(\"bar\", \"12.0\", certificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-version\", new ApplicationMetaData(\"foo\", \"11.0\", certificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-cert\", new ApplicationMetaData(\"foo\", \"12.0\", otherCertificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-null-cert\", new ApplicationMetaData(\"foo\", \"12.0\", null, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-time\", new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(22))); // not significant\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate static TimeProvider createTimeProvider(final int time) {\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(time));\n\t\treturn timeProvider;\n\t}\n\n\t@Test\n\tpublic void equalsOnlyReturnsTrueForEquivalentObjects() {\n\t\t// Arrange:\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17));\n\t\tfinal Map<String, ApplicationMetaData> infoMap = createApplicationMetaDataForEqualityTests(certificate);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(infoMap.get(\"default\"), IsEqual.equalTo(metaData));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\"), IsEqual.equalTo(metaData));\n\t\tMatcherAssert.assertThat(null, IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(\"foo\", IsNot.not(IsEqual.equalTo((Object) metaData)));\n\t}\n\n\t@Test\n\tpublic void hashCodesAreEqualForEquivalentObjects() {\n\t\t// Arrange:\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17));\n\t\tfinal int hashCode = metaData.hashCode();\n\t\tfinal Map<String, ApplicationMetaData> infoMap = createApplicationMetaDataForEqualityTests(certificate);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(infoMap.get(\"default\").hashCode(), IsEqual.equalTo(hashCode));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\").hashCode(), IsEqual.equalTo(hashCode));\n\t}\n\n\t// endregion\n\n\tprivate static ApplicationMetaData roundtripMetaData(final ApplicationMetaData metaData) {\n\t\treturn new ApplicationMetaData(Utils.roundtripSerializableEntity(metaData, null));\n\t}\n}\n",
            "error": "",
            "span_id": 11744951959951826098
        },
        {
            "input": "pom.xml",
            "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.nem.nis</groupId>\n    <artifactId>nem-nis</artifactId>\n    <version>0.6.100</version>\n    <packaging>pom</packaging>\n\n    <name>NEM Infrastructure Server - ALL</name>\n\n    <repositories>\n        <repository>\n            <id>repo2_maven_org</id>\n            <url>http://repo2.maven.org/maven2</url>\n        </repository>\n    </repositories>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <modules>\n        <module>core</module>\n        <module>deploy</module>\n        <module>peer</module>\n        <module>nis</module>\n    </modules>\n    <build>\n        <defaultGoal>install</defaultGoal>\n    </build>\n</project>\n",
            "error": "",
            "span_id": 2273076872809142609
        },
        {
            "input": "core/pom.xml",
            "output": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.nem.core</groupId>\n    <artifactId>nem-core</artifactId>\n    <version>0.6.100</version>\n    <name>NEM Core</name>\n    <organization>\n        <name>NEM - New Economy Movement</name>\n        <url>http://nem.io</url>\n    </organization>\n\n    <properties>\n        <nemCodeBase>http://bob.nem.ninja/</nemCodeBase>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <spring.version>4.3.30.RELEASE</spring.version>\n    </properties>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>com.googlecode.javaewah</groupId>\n            <artifactId>JavaEWAH</artifactId>\n            <version>1.1.13</version>\n        </dependency>\n\n        <dependency>\n            <groupId>net.minidev</groupId>\n            <artifactId>json-smart</artifactId>\n            <version>2.4.8</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.bouncycastle</groupId>\n            <artifactId>bcprov-jdk15on</artifactId>\n            <version>1.70</version>\n        </dependency>\n\n        <!-- commons -->\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.15</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.11.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-math3</artifactId>\n            <version>3.6.1</version>\n        </dependency>\n\n        <!-- async http client -->\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpasyncclient</artifactId>\n            <version>4.1.5</version>\n        </dependency>\n\n        <!-- test related -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-all</artifactId>\n            <version>1.10.19</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.googlecode.matrix-toolkits-java</groupId>\n            <artifactId>mtj</artifactId>\n            <version>1.0.4</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.github.tomakehurst</groupId>\n            <artifactId>wiremock</artifactId>\n            <version>1.58</version>\n            <scope>test</scope>\n\n            <!-- Include everything below here if you have dependency conflicts -->\n            <classifier>standalone</classifier>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.mortbay.jetty</groupId>\n                    <artifactId>jetty</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.google.guava</groupId>\n                    <artifactId>guava</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-core</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-annotations</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.fasterxml.jackson.core</groupId>\n                    <artifactId>jackson-databind</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.apache.httpcomponents</groupId>\n                    <artifactId>httpclient</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.skyscreamer</groupId>\n                    <artifactId>jsonassert</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>xmlunit</groupId>\n                    <artifactId>xmlunit</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>com.jayway.jsonpath</groupId>\n                    <artifactId>json-path</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>net.sf.jopt-simple</groupId>\n                    <artifactId>jopt-simple</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>nemesis.bin</include>\n                    <include>nemesis-testnet.bin</include>\n                    <include>nemesis-testnet.json</include>\n                    <include>nemesis-mijinnet.bin</include>\n                    <include>nemesis-mijinnet.json</include>\n                </includes>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>2.13.0</version>\n                <configuration>\n                    <allowMajorUpdates>false</allowMajorUpdates>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.10.1</version>\n                <configuration>\n                    <release>11</release>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                    <failOnWarning>true</failOnWarning>\n                    <showWarnings>true</showWarnings>\n                    <compilerArgs>\n                        <arg>-Xlint:all</arg>\n                    </compilerArgs>\n                    <includes>\n                        <include>org/nem/core/**/*.java</include>\n                    </includes>\n                    <testIncludes>\n                        <include>org/nem/core/**/*.java</include>\n                    </testIncludes>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.4.1</version>\n                <configuration>\n                    <sourcepath>${basedir}/src/main/java/org/nem/core</sourcepath>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.3.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n                        </manifest>\n                        <manifestEntries>\n                            <Permissions>all-permissions</Permissions>\n                            <Codebase>${nemCodeBase}</Codebase>\n                            <Application-Name>${project.name}</Application-Name>\n                            <Trusted-Only>true</Trusted-Only>\n                            <Implementation-Build>${project.version}</Implementation-Build>\n                            <Implementation-Vendor>NEM - New Economy Movement</Implementation-Vendor>\n                        </manifestEntries>\n                        <addMavenDescriptor>false</addMavenDescriptor>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>test-jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!-- this adds test_integration, so that during test-compile phase they will be compiled, unfortunately, we can't specify target dir :/ -->\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>build-helper-maven-plugin</artifactId>\n                <version>3.3.0</version>\n                <executions>\n                    <execution>\n                        <id>add-test-source</id>\n                        <phase>generate-test-sources</phase>\n                        <goals>\n                            <goal>add-test-source</goal>\n                        </goals>\n                        <configuration>\n                            <sources>\n                                <source>src/it/java</source>\n                            </sources>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.2</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-failsafe-plugin</artifactId>\n                <version>2.22.2</version>\n                <configuration>\n                    <testSourceDirectory>src/it/java</testSourceDirectory>\n                    <failIfNoTests>true</failIfNoTests>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>default-integration-test</id>\n                        <goals>\n                            <goal>integration-test</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <version>2.28.0</version>\n                <configuration>\n                    <formats>\n                        <format>\n                            <includes>\n                                <include>src/**</include>\n                            </includes>\n                            <excludes>\n                                <exclude>src/main/resources/**</exclude>\n                            </excludes>\n                            <trimTrailingWhitespace/>\n                            <endWithNewline/>\n                        </format>\n                    </formats>\n                    <java>\n                        <eclipse>\n                          <version>4.9.0</version>\n                          <file>${project.basedir}/eclipse-formatter.xml</file>\n                        </eclipse>\n                    </java>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.8</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>jacoco-report</id>\n                        <phase>test</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                    </execution>\n                    <!-- verify code coverage -->\n                    <execution>\n                        <id>jacoco-check</id>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                        <configuration>\n                            <rules>\n                                <rule>\n                                    <element>BUNDLE</element>\n                                    <limits>\n                                        <limit>\n                                            <counter>LINE</counter>\n                                            <value>COVEREDRATIO</value>\n                                            <minimum>0.90</minimum>\n                                        </limit>\n                                    </limits>\n                                </rule>\n                            </rules>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n",
            "error": "",
            "span_id": 10120068197051091763
        },
        {
            "input": "core/src/test/java/org/nem/core/metadata/ApplicationMetaDataTest.java",
            "output": "package org.nem.core.metadata;\n\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.core.*;\nimport org.junit.*;\nimport org.mockito.Mockito;\nimport org.nem.core.test.Utils;\nimport org.nem.core.time.*;\n\nimport java.security.cert.X509Certificate;\nimport java.util.*;\n\npublic class ApplicationMetaDataTest {\n\n\t@Test\n\tpublic void canCreateApplicationMetaDataWithoutCertificate() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsNull.nullValue());\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t}\n\n\t@Test\n\tpublic void canCreateApplicationMetaDataWithCertificate() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t}\n\n\t@Test\n\tpublic void canRoundtripApplicationMetaData() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125));\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\t\tfinal ApplicationMetaData originalMetaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, timeProvider);\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = roundtripMetaData(originalMetaData);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getAppName(), IsEqual.equalTo(\"foo\"));\n\t\tMatcherAssert.assertThat(metaData.getVersion(), IsEqual.equalTo(\"12.0\"));\n\t\tMatcherAssert.assertThat(metaData.getCertificateSigner(), IsEqual.equalTo(\"CN=Someone,O=NemSoft\"));\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t}\n\n\t@Test\n\tpublic void getCurrentTimeAlwaysReturnsMostRecentTime() {\n\t\t// Arrange:\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(100), new TimeInstant(125), new TimeInstant(136));\n\n\t\t// Act:\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", null, timeProvider);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(metaData.getStartTime(), IsEqual.equalTo(new TimeInstant(100)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(125)));\n\t\tMatcherAssert.assertThat(metaData.getCurrentTime(), IsEqual.equalTo(new TimeInstant(136)));\n\t}\n\n\t// region equals / hashCode\n\n\t@SuppressWarnings(\"serial\")\n\tprivate static Map<String, ApplicationMetaData> createApplicationMetaDataForEqualityTests(final X509Certificate certificate) {\n\t\tfinal X509Certificate otherCertificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=SomeoneElse,O=NemSoft\");\n\t\treturn new HashMap<String, ApplicationMetaData>() {\n\t\t\t{\n\t\t\t\tthis.put(\"default\", new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-name\", new ApplicationMetaData(\"bar\", \"12.0\", certificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-version\", new ApplicationMetaData(\"foo\", \"11.0\", certificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-cert\", new ApplicationMetaData(\"foo\", \"12.0\", otherCertificate, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-null-cert\", new ApplicationMetaData(\"foo\", \"12.0\", null, createTimeProvider(17)));\n\t\t\t\tthis.put(\"diff-time\", new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(22))); // not significant\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate static TimeProvider createTimeProvider(final int time) {\n\t\tfinal TimeProvider timeProvider = Mockito.mock(TimeProvider.class);\n\t\tMockito.when(timeProvider.getCurrentTime()).thenReturn(new TimeInstant(time));\n\t\treturn timeProvider;\n\t}\n\n\t@Test\n\tpublic void equalsOnlyReturnsTrueForEquivalentObjects() {\n\t\t// Arrange:\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17));\n\t\tfinal Map<String, ApplicationMetaData> infoMap = createApplicationMetaDataForEqualityTests(certificate);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(infoMap.get(\"default\"), IsEqual.equalTo(metaData));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\"), IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\"), IsEqual.equalTo(metaData));\n\t\tMatcherAssert.assertThat(null, IsNot.not(IsEqual.equalTo(metaData)));\n\t\tMatcherAssert.assertThat(\"foo\", IsNot.not(IsEqual.equalTo((Object) metaData)));\n\t}\n\n\t@Test\n\tpublic void hashCodesAreEqualForEquivalentObjects() {\n\t\t// Arrange:\n\t\tfinal X509Certificate certificate = MetaDataTestUtils.createMockCertificateWithName(\"CN=Someone,O=NemSoft\");\n\t\tfinal ApplicationMetaData metaData = new ApplicationMetaData(\"foo\", \"12.0\", certificate, createTimeProvider(17));\n\t\tfinal int hashCode = metaData.hashCode();\n\t\tfinal Map<String, ApplicationMetaData> infoMap = createApplicationMetaDataForEqualityTests(certificate);\n\n\t\t// Assert:\n\t\tMatcherAssert.assertThat(infoMap.get(\"default\").hashCode(), IsEqual.equalTo(hashCode));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-name\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-version\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-null-cert\").hashCode(), IsNot.not(IsEqual.equalTo(hashCode)));\n\t\tMatcherAssert.assertThat(infoMap.get(\"diff-time\").hashCode(), IsEqual.equalTo(hashCode));\n\t}\n\n\t// endregion\n\n\tprivate static ApplicationMetaData roundtripMetaData(final ApplicationMetaData metaData) {\n\t\treturn new ApplicationMetaData(Utils.roundtripSerializableEntity(metaData, null));\n\t}\n}\n",
            "error": "",
            "span_id": 9212041747697743141
        }
    ],
    "get_directory_tree": [
        {
            "input": "core/src/test/java/org/nem",
            "output": "[\n    {\n        \"name\": \"core\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"math\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"SparseMatrixTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MatrixElementTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"SparseBitmapTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"DenseMatrixTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ColumnVectorTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MatrixTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"crypto\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"secp256k1\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"SecP256K1BlockCipherTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"SecP256K1UtilsTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"SecP256K1KeyAnalyzerTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"SecP256K1CryptoEngineTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"SepP256K1CurveTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"SecP256K1KeyGeneratorTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"SecP256K1DsaSignerTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"KeyPairTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"PrivateKeyTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockCipherTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"CipherTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"CryptoEngineTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HashChainTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"KeyGeneratorTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"KeyAnalyzerTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"DsaSignerTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"PublicKeyTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HashesTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HashTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"SignerTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ed25519\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"Ed25519BlockCipherTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"Ed25519DsaSignerTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"Ed25519CryptoEngineTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"Ed25519CurveTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"Ed25519UtilsTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"Ed25519KeyAnalyzerTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"arithmetic\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"Ed25519FieldTest.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Ed25519EncodedFieldElementTest.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Ed25519EncodedGroupElementTest.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Ed25519FieldElementTest.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Ed25519GroupElementTest.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"MathUtils.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"MathUtilsTest.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Ed25519GroupTest.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Ed25519KeyGeneratorTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"SignatureTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"time\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"TimeSynchronizationResultTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NetworkTimeStampTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"synchronization\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"TimeSynchronizationSampleTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"CommunicationTimeStampsTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"UnixTimeTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TimeInstantTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"SystemTimeProviderTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"serialization\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"primitive\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"AbstractPrimitiveTruncationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractDoubleSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractTruncatedBytesSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BinaryPrimitiveTruncationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractObjectSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BinarySerializationPolicy.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractBytesTruncationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"JsonPrimitiveSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"JsonPrimitiveTruncationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"JsonSerializationPolicy.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractLongSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractStringTruncationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractObjectArraySerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractBytesSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractBigIntegerSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractStringSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BinaryPrimitiveSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractPrimitiveSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractIntegerSerializationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"SerializationPolicy.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractTruncatedStringSerializationTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"SerializerTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"SerializableListTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"DeserializationContextTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"SerializationContextTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BinarySerializerTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"JsonSerializerTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"connect\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"HttpBinaryPostRequestTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpVoidResponseStrategyTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"VersionProviderTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonPostRequestTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpDeserializerResponseStrategyTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ErrorResponseDeserializerUnionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpBinaryResponseStrategyTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"client\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"DefaultAsyncNemConnectorTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"HttpDeserializerResponseStrategyContractTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ErrorResponseTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpMethodClientTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpJsonResponseStrategyTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HttpErrorResponseDeserializerUnionStrategyTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"node\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"NisNodeInfoTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NodeIdentityTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NodeMetaDataTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NodeEndpointTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NodeFeatureTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NodeTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NodeCollectionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NodeVersionTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"messages\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"PlainMessageTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"SecureMessageTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MessageFactoryTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"async\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"SleepFutureTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NemAsyncTimerVisitorTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AsyncTimerTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AsyncTimerOptionsBuilderTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"DelayStrategyTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"utils\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"ByteUtilsTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"Base32EncoderTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"FormatUtilsTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HexEncoderTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"StringEncoderTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"Base64EncoderTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"StringUtilsTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AbstractTwoLevelMapTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"CircularStackTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ArrayUtilsTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ExceptionUtilsTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"LockFileTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MustBeTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"SetOnceTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"i18n\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"UTF8ResourceBundleControlTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"model\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"primitive\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"BlockDifficultyTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"HashShortIdTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"TimeOffsetTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"ReferenceCountTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractPrimitiveTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"NodeIdTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"SupplyTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AmountTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"NodeAgeTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractQuantityTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractPrimitiveLongTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BlockAmountTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"ClusterIdTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractPrimitiveBigIntegerTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BlockHeightTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BlockChainScoreTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"QuantityTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"MultisigTransactionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AccountTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HashMetaDataTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"VerifiableEntityTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ZeroTransactionFeeCalculatorTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TransactionExecutionStateTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NemStatusTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TransferTransactionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ProvisionNamespaceTransactionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"KeyPairViewModelTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TransactionFeeCalculatorBeforeForkTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MosaicDefinitionCreationTransactionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NemGlobalsTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ValidationResultTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockMultisigTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AbstractTransactionFeeCalculatorTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockExtensionsTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"transactions\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"extensions\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"AggregateTransactionSerializationExtensionTest.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"AggregateTransactionValidationExtensionTest.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"namespace\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"ReservedNamespaceFilterTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"NamespaceIdTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"NamespaceTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"NamespaceIdPartTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"AddressTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockChainConfigurationTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NetworkInfoTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TransactionFeeCalculatorAfterForkTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NemesisBlockInfoTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"DefaultTransactionFeeCalculatorTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ImportanceTransferTransactionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TransactionTypesTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MultisigModificationTypeTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TransferTransactionAttachmentTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HashUtilsTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MessageTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MultisigMinCosignatoriesModificationTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ncc\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"AccountIdBuilderTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AccountMetaDataTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"UnconfirmedTransactionMetaDataPairTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AccountInfoTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"RequestPrepareAnnounceTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"NamespaceMetaDataPairTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"SerializableAccountIdTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicDefinitionSupplyPairTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicIdSupplyPairTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"RequestAnnounceTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"NemAnnounceResultTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AccountMetaDataPairTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"NemRequestResultTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"RequestPrepareTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"HarvestInfoTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicDefinitionMetaDataPairTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AccountIdTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"TransactionMetaDataPairTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AbstractMetaDataPairTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"PublicKeyBuilderTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"UnconfirmedTransactionMetaDataTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"TransactionMetaDataTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MultisigInfoTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"DefaultMetaDataTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"observers\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"ProvisionNamespaceNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"NamedObserverTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"ImportanceTransferNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BalanceTransferNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MultisigCosignatoryModificationNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MultisigMinCosignatoriesModificationNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicDefinitionCreationNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicTransferNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"ReverseTransactionObserverTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BalanceAdjustmentNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"TransactionHashesNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"AccountNotificationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicSupplyChangeNotificationTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"MosaicSupplyChangeTransactionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NemesisBlockTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MultisigSignatureTransactionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TransactionFactoryTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AccountStatusTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"FeeUnitAwareTransactionFeeCalculatorTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MultisigSignatureTransactionComparatorTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TransactionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NemPropertiesTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MultisigAggregateModificationTransactionTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"AccountRemoteStatusTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NemesisBlockMainnetTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockFactoryTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MosaicSupplyTypeTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"HashMetaDataPairTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"mosaic\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"MosaicDescriptorTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicIdTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicTransferFeeTypeTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"DefaultMosaicTransferFeeCalculatorTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicFeeInformationTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicLevyTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicConstantsTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicDefinitionTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"DefaultMosaicPropertiesTest.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"MosaicUtilsTest.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"NetworkInfosTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MultisigCosignatoryModificationTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockedHarvesterPublicKeysTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockChainFeatureTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NemPropertyTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockChainConfigurationBuilderTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TransactionExtensionsTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"metadata\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"MetaDataFactoryTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ApplicationMetaDataTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"JarFacadeTest.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MetaDataTestUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"CodeSourceFacadeTest.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"test\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"WeakNodeIdentity.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MockMessage.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"IsRoundedEqual.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MockSerializableEntity.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ExceptionAssert.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"Utils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MockTransaction.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"SimpleMultisigContext.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NodeUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"VerifiableEntityUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestTransactionRegistry.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"BlockUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TimeSyncUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MockNemProperties.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"RandomTransactionFactory.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"IsEquivalent.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MockAccountLookup.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"NotificationUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MockTransactionUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"MockVerifiableEntity.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ParameterizedUtils.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"ConnectUtils.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            }\n        ]\n    }\n]",
            "error": "",
            "span_id": 8952903756451523383
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}