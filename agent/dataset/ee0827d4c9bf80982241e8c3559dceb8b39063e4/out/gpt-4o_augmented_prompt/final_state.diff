diff --git a/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java b/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java
index 54e6f9d8..17fbf14d 100644
--- a/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java
+++ b/src/main/java/org/codehaus/plexus/archiver/jar/JarToolModularJarArchiver.java
@@ -38,7 +38,6 @@
 import java.util.zip.ZipOutputStream;
 
 import org.apache.commons.compress.parallel.InputStreamSupplier;
-import org.apache.commons.io.output.NullPrintStream;
 import org.codehaus.plexus.archiver.ArchiverException;
 import org.codehaus.plexus.archiver.zip.ConcurrentJarCreator;
 import org.codehaus.plexus.util.IOUtil;
@@ -138,7 +137,13 @@ protected void postCreateArchive()
                 getLogger().debug( "jar tool --date option is supported: " + hasJarDateOption );
             }
 
-            Integer result = (Integer) jarRun.invoke( jarTool, System.out, System.err, getJarToolArguments() );
+            PrintStream nullPrintStream = new PrintStream(new OutputStream() {
+                @Override
+                public void write(int b) throws IOException {
+                    // no-op
+                }
+            });
+            Integer result = (Integer) jarRun.invoke( jarTool, nullPrintStream, nullPrintStream, getJarToolArguments() );
 
             if ( result != null && result != 0 )
             {
@@ -297,7 +302,12 @@ private boolean isJarDateOptionSupported( Method runMethod )
             // Test the output code validating the --date option.
             String[] args = { "--date", "2099-12-31T23:59:59Z", "--version" };
 
-            PrintStream nullPrintStream = NullPrintStream.NULL_PRINT_STREAM;
+            PrintStream nullPrintStream = new PrintStream(new OutputStream() {
+                @Override
+                public void write(int b) throws IOException {
+                    // no-op
+                }
+            });
             Integer result = (Integer) runMethod.invoke( jarTool, nullPrintStream, nullPrintStream, args );
 
             return result != null && result.intValue() == 0;
@@ -309,3 +319,22 @@ private boolean isJarDateOptionSupported( Method runMethod )
     }
 
 }
+import java.io.PrintStream;
+import java.lang.reflect.Method;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
+import java.nio.file.attribute.FileTime;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Enumeration;
+import java.util.List;
+import java.util.Locale;
+import java.util.TimeZone;
+import java.util.regex.Pattern;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+import java.util.zip.ZipOutputStream;
+import org.codehaus.plexus.archiver.ArchiverException;
+import org.codehaus.plexus.archiver.zip.ConcurrentJarCreator;
+import org.codehaus.plexus.util.IOUtil;
diff --git a/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java b/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java
index c5b046ec..aa749e69 100644
--- a/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java
+++ b/src/main/java/org/codehaus/plexus/archiver/zip/AbstractZipUnArchiver.java
@@ -25,7 +25,6 @@
 import javax.annotation.Nonnull;
 import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
 import org.apache.commons.compress.archivers.zip.ZipFile;
-import org.apache.commons.io.input.BoundedInputStream;
 import org.apache.commons.io.input.CountingInputStream;
 import org.codehaus.plexus.archiver.AbstractUnArchiver;
 import org.codehaus.plexus.archiver.ArchiverException;
@@ -201,7 +200,7 @@ protected void execute( final String path, final File outputDirectory )
                 {
                     try ( InputStream in = zipFile.getInputStream( ze ) )
                     {
-                        BoundedInputStream bis = new BoundedInputStream( in, remainingSpace + 1 );
+-                                BoundedInputStream bis = new BoundedInputStream( in, remainingSpace + 1 );
                         CountingInputStream cis = new CountingInputStream( bis );
                         extractFile( getSourceFile(), outputDirectory, cis,
                                      ze.getName(), new Date( ze.getTime() ), ze.isDirectory(),
@@ -225,3 +224,12 @@ protected void execute( final String path, final File outputDirectory )
     }
 
 }
+import java.io.InputStream;
+import java.io.IOException;
+import java.util.Enumeration;
+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
+import org.apache.commons.compress.archivers.zip.ZipFile;
+import org.apache.commons.io.input.CountingInputStream;
+import org.codehaus.plexus.archiver.AbstractUnArchiver;
+import org.codehaus.plexus.archiver.ArchiverException;
+import org.codehaus.plexus.components.io.resources.PlexusIoResource;
diff --git a/src/main/java/org/codehaus/plexus/archiver/zip/ByteArrayOutputStream.java b/src/main/java/org/codehaus/plexus/archiver/zip/ByteArrayOutputStream.java
index 5f62ab9f..38596192 100644
--- a/src/main/java/org/codehaus/plexus/archiver/zip/ByteArrayOutputStream.java
+++ b/src/main/java/org/codehaus/plexus/archiver/zip/ByteArrayOutputStream.java
@@ -26,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import org.apache.commons.io.input.ClosedInputStream;
+-import org.apache.commons.io.input.ClosedInputStream;
 
 /**
  * This class implements an output stream in which the data is
@@ -398,7 +398,12 @@ public synchronized InputStream toInputStream()
         int remaining = count;
         if ( remaining == 0 )
         {
-            return new ClosedInputStream();
+            return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
+            return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
+            return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
+            return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
+            return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
+            return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
         }
         final List<ByteArrayInputStream> list = new ArrayList<ByteArrayInputStream>( buffers.size() );
         for ( final byte[] buf : buffers )
@@ -412,6 +417,7 @@ public synchronized InputStream toInputStream()
             }
         }
         reuseBuffers = false;
+        return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
         return new SequenceInputStream( Collections.enumeration( list ) );
     }
 
diff --git a/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java b/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java
index 1a9951fa..321b199b 100644
--- a/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java
+++ b/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java
@@ -24,7 +24,6 @@
 import java.io.SequenceInputStream;
 import java.nio.file.Files;
 
-import org.apache.commons.io.output.ThresholdingOutputStream;
 
 /**
  * Offloads to disk when a given memory consumption has been reacehd
@@ -213,3 +212,10 @@ public void close() throws IOException
     }
 
 }
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.SequenceInputStream;
+import java.nio.file.Files;
+import org.apache.commons.io.output.ThresholdingOutputStream;