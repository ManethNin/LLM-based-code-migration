diff --git a/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java b/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java
index 1a9951fa..0f88c8da 100644
--- a/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java
+++ b/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java
@@ -141,75 +141,71 @@ protected OutputStream getStream() throws IOException
      * @exception java.io.IOException if an error occurs.
      */
     @Override
-    protected void thresholdReached() throws IOException
+    protected OutputStream getStream() throws IOException
     {
-        if ( prefix != null )
-        {
-            outputFile = File.createTempFile( prefix, suffix, directory );
-        }
-        currentOutputStream = Files.newOutputStream( outputFile.toPath() );
-    }
+        return currentOutputStream;
+}
 
     public InputStream getInputStream() throws IOException
-    {
+{
 
         InputStream memoryAsInput = memoryOutputStream.toInputStream();
         if ( outputFile == null )
-        {
+    {
             return memoryAsInput;
-        }
+}
         return new SequenceInputStream( memoryAsInput, Files.newInputStream( outputFile.toPath() ) );
-    }
+}
 
     // --------------------------------------------------------- Public methods
 
-    /**
+/**
      * Returns the data for this output stream as an array of bytes, assuming
      * that the data has been retained in memory. If the data was written to
      * disk, this method returns <code>null</code>.
-     *
+*
      * @return The data for this output stream, or <code>null</code> if no such
      * data is available.
-     */
+*/
     public byte[] getData()
-    {
+{
         if ( memoryOutputStream != null )
-        {
+{
             return memoryOutputStream.toByteArray();
-        }
+}
         return null;
-    }
+}
 
-    /**
+/**
      * Returns either the output file specified in the constructor or
      * the temporary file created or null.
-     * <p>
+* <p>
      * If the constructor specifying the file is used then it returns that
      * same output file, even when threshold has not been reached.
-     * <p>
+* <p>
      * If constructor specifying a temporary file prefix/suffix is used
      * then the temporary file created once the threshold is reached is returned
      * If the threshold was not reached then <code>null</code> is returned.
-     *
+*
      * @return The file for this output stream, or <code>null</code> if no such
      * file exists.
-     */
+*/
     public File getFile()
-    {
+{
         return outputFile;
-    }
+}
 
-    /**
+/**
      * Closes underlying output stream, and mark this as closed
-     *
+*
      * @exception java.io.IOException if an error occurs.
-     */
-    @Override
+*/
+@Override
     public void close() throws IOException
-    {
+{
         super.close();
         closed = true;
         currentOutputStream.close();
-    }
-
 }
+
+}
\ No newline at end of file