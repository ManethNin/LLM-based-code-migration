diff --git a/pom.xml b/pom.xml
index 9ce3d4e..34b2980 100644
--- a/pom.xml
+++ b/pom.xml
@@ -212,7 +212,7 @@
 		<dependency>
 			<groupId>org.locationtech.jts</groupId>
 			<artifactId>jts-core</artifactId>
-			<version>1.20.0-SNAPSHOT</version>
+			<version>1.19.0</version>
 		</dependency>
 		<dependency>
 			<groupId>com.github.twak</groupId>
@@ -307,11 +307,6 @@
 			<artifactId>jafama</artifactId>
 			<version>2.3.2</version>
 		</dependency>
-		<dependency>
-			<groupId>com.github.openjump-gis</groupId>
-			<artifactId>topology-extension</artifactId>
-			<version>v2.0.5</version>
-		</dependency>
 		<dependency>
 			<groupId>com.github.scoutant</groupId>
 			<artifactId>polyline-decoder</artifactId>
diff --git a/src/main/java/micycle/pgs/PGS_Conversion.java b/src/main/java/micycle/pgs/PGS_Conversion.java
index 3dc84a9..4f528ef 100644
--- a/src/main/java/micycle/pgs/PGS_Conversion.java
+++ b/src/main/java/micycle/pgs/PGS_Conversion.java
@@ -1228,7 +1228,7 @@ public final class PGS_Conversion {
 	 * @since 1.3.0
 	 */
 	public static String toGeoJSON(PShape shape) {
-		final GeoJsonWriter writer = new GeoJsonWriter(1);
+		final GeoJsonWriter writer = new GeoJsonWriter();
 		writer.setForceCCW(true);
 		return writer.write(fromPShape(shape));
 	}
@@ -1241,7 +1241,7 @@ public final class PGS_Conversion {
 	 * @since 1.3.0
 	 */
 	public static PShape fromGeoJSON(String json) {
-		final GeoJsonReader reader = new GeoJsonReader(GEOM_FACTORY);
+		final GeoJsonReader reader = new GeoJsonReader();
 		try {
 			return toPShape(reader.read(json));
 		} catch (ParseException e) {
diff --git a/src/main/java/micycle/pgs/PGS_PointSet.java b/src/main/java/micycle/pgs/PGS_PointSet.java
index f27ac27..9244b08 100644
--- a/src/main/java/micycle/pgs/PGS_PointSet.java
+++ b/src/main/java/micycle/pgs/PGS_PointSet.java
@@ -63,7 +63,7 @@ public final class PGS_PointSet {
 	 * @return
 	 */
 	public static List<PVector> prunePointsWithinDistance(List<PVector> points, double distanceTolerance) {
-		final KDTree<PVector> tree = KDTree.create(2);
+		final KDTree<PVector> tree = KDTree.create(2, null);
 		final List<PVector> newPoints = new ArrayList<>();
 		for (PVector p : points) {
 			final double[] coords = new double[] { p.x, p.y };