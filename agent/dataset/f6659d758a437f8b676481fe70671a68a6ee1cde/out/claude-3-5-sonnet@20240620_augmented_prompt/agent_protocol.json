{
    "validate_diffs": [
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -13,7 +13,6 @@ import org.yaml.snakeyaml.LoaderOptions;\n import org.yaml.snakeyaml.TypeDescription;\n import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.constructor.Constructor;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n@@ -39,8 +38,7 @@ public class AbstractTest {\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n-\n+        loadingConfig.setAllowDuplicateKeys(false);\n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n@@ -48,7 +46,7 @@ public class AbstractTest {\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n-            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n+            this.addTypeDescription(new TypeDescription(ZoneId.class, \"!ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n```",
            "output": "{'billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java': '/*\\n * Copyright (C) 2017 Premium Minds.\\n *\\n * This file is part of billy core.\\n *\\n * billy core is free software: you can redistribute it and/or modify it under\\n * the terms of the GNU Lesser General Public License as published by the Free\\n * Software Foundation, either version 3 of the License, or (at your option) any\\n * later version.\\n *\\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU Lesser General Public License\\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\\n */\\npackage com.premiumminds.billy.core.test;\\n\\nimport com.google.inject.Guice;\\nimport com.google.inject.Injector;\\nimport com.google.inject.util.Modules;\\nimport com.premiumminds.billy.core.CoreDependencyModule;\\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\\nimport java.time.LocalDate;\\nimport org.junit.jupiter.api.BeforeAll;\\nimport org.mockito.Mockito;\\nimport org.yaml.snakeyaml.DumperOptions;\\nimport org.yaml.snakeyaml.LoaderOptions;\\nimport org.yaml.snakeyaml.TypeDescription;\\nimport org.yaml.snakeyaml.Yaml;\\nimport org.yaml.snakeyaml.constructor.Constructor;\\nimport org.yaml.snakeyaml.nodes.Tag;\\nimport org.yaml.snakeyaml.representer.Representer;\\n\\nimport java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.FileReader;\\nimport java.time.ZoneId;\\n\\npublic class AbstractTest {\\n\\n    private static Injector injector;\\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\\n\\n    @BeforeAll\\n    public static void setUpClass() {\\n        AbstractTest.injector =\\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\\n    }\\n\\n    public <T> T getInstance(Class<T> clazz) {\\n        return AbstractTest.injector.getInstance(clazz);\\n    }\\n\\n    public <T> T getMock(Class<T> clazz) {\\n        return Mockito.mock(clazz);\\n    }\\n\\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\\n        final LoaderOptions loadingConfig = new LoaderOptions();\\n        loadingConfig.setAllowDuplicateKeys(false);\\n        final Representer representer = new Representer(new DumperOptions());\\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\\n        representer.addClassTag(ZoneId.class, zoneIdTag);\\n        final Tag localDateTag = new Tag(\"!LocalDate\");\\n        representer.addClassTag(LocalDate.class, localDateTag);\\n\\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"!ZoneId\"));\\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\\n\\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\\n        }};\\n\\n        Yaml yaml = new Yaml(constructor, representer);\\n\\n        try {\\n            return yaml.load(new BufferedReader(new FileReader(path)));\\n        } catch (FileNotFoundException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n}\\n'}",
            "error": "",
            "span_id": 11383121214187193636
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -15,6 +15,7 @@ import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.constructor.Constructor;\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n+import org.yaml.snakeyaml.resolver.Resolver;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n@@ -39,6 +40,7 @@ public class AbstractTest {\n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n         loadingConfig.setAllowDuplicateKeys(false);\n+        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n@@ -53,7 +55,15 @@ public class AbstractTest {\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n-        Yaml yaml = new Yaml(constructor, representer);\n+        Resolver resolver = new Resolver() {\n+            @Override\n+            protected void addImplicitResolvers() {\n+                // Only add safe implicit resolvers\n+                addImplicitResolver(Tag.BOOL, BOOL, \"yYnNtTfFoO\");\n+                addImplicitResolver(Tag.INT, INT, \"-+0123456789\");\n+            }\n+        };\n+        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), loadingConfig, resolver);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n```",
            "output": "{'billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java': '/*\\n * Copyright (C) 2017 Premium Minds.\\n *\\n * This file is part of billy core.\\n *\\n * billy core is free software: you can redistribute it and/or modify it under\\n * the terms of the GNU Lesser General Public License as published by the Free\\n * Software Foundation, either version 3 of the License, or (at your option) any\\n * later version.\\n *\\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU Lesser General Public License\\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\\n */\\npackage com.premiumminds.billy.core.test;\\n\\nimport com.google.inject.Guice;\\nimport com.google.inject.Injector;\\nimport com.google.inject.util.Modules;\\nimport com.premiumminds.billy.core.CoreDependencyModule;\\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\\nimport java.time.LocalDate;\\nimport org.junit.jupiter.api.BeforeAll;\\nimport org.mockito.Mockito;\\nimport org.yaml.snakeyaml.DumperOptions;\\nimport org.yaml.snakeyaml.LoaderOptions;\\nimport org.yaml.snakeyaml.TypeDescription;\\nimport org.yaml.snakeyaml.Yaml;\\nimport org.yaml.snakeyaml.constructor.Constructor;\\nimport org.yaml.snakeyaml.nodes.Tag;\\nimport org.yaml.snakeyaml.representer.Representer;\\nimport org.yaml.snakeyaml.resolver.Resolver;\\n\\nimport java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.FileReader;\\nimport java.time.ZoneId;\\n\\npublic class AbstractTest {\\n\\n    private static Injector injector;\\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\\n\\n    @BeforeAll\\n    public static void setUpClass() {\\n        AbstractTest.injector =\\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\\n    }\\n\\n    public <T> T getInstance(Class<T> clazz) {\\n        return AbstractTest.injector.getInstance(clazz);\\n    }\\n\\n    public <T> T getMock(Class<T> clazz) {\\n        return Mockito.mock(clazz);\\n    }\\n\\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\\n        final LoaderOptions loadingConfig = new LoaderOptions();\\n        loadingConfig.setAllowDuplicateKeys(false);\\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\\n        final Representer representer = new Representer(new DumperOptions());\\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\\n        representer.addClassTag(ZoneId.class, zoneIdTag);\\n        final Tag localDateTag = new Tag(\"!LocalDate\");\\n        representer.addClassTag(LocalDate.class, localDateTag);\\n\\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"!ZoneId\"));\\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\\n\\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\\n        }};\\n\\n        Resolver resolver = new Resolver() {\\n            @Override\\n            protected void addImplicitResolvers() {\\n                // Only add safe implicit resolvers\\n                addImplicitResolver(Tag.BOOL, BOOL, \"yYnNtTfFoO\");\\n                addImplicitResolver(Tag.INT, INT, \"-+0123456789\");\\n            }\\n        };\\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), loadingConfig, resolver);\\n\\n        try {\\n            return yaml.load(new BufferedReader(new FileReader(path)));\\n        } catch (FileNotFoundException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n}\\n'}",
            "error": "",
            "span_id": 1742544556755447625
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -16,6 +16,7 @@ import org.yaml.snakeyaml.constructor.Constructor;\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n import org.yaml.snakeyaml.resolver.Resolver;\n+import org.yaml.snakeyaml.constructor.SafeConstructor;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n@@ -41,29 +42,39 @@ public class AbstractTest {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n         loadingConfig.setAllowDuplicateKeys(false);\n         loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\n+        \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n-        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n-            this.addTypeDescription(new TypeDescription(ZoneId.class, \"!ZoneId\"));\n-            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n+        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\n+            {\n+                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n+                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n+                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\n+            }\n \n-            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n-            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n-        }};\n+            @Override\n+            protected Object constructObject(Node node) {\n+                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\n+                    try {\n+                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n+                        return createInstance(clazz);\n+                    } catch (ClassNotFoundException e) {\n+                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n+                    }\n+                }\n+                return super.constructObject(node);\n+            }\n+        };\n \n         Resolver resolver = new Resolver() {\n             @Override\n             protected void addImplicitResolvers() {\n-                // Only add safe implicit resolvers\n-                addImplicitResolver(Tag.BOOL, BOOL, \"yYnNtTfFoO\");\n-                addImplicitResolver(Tag.INT, INT, \"-+0123456789\");\n             }\n         };\n-        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), loadingConfig, resolver);\n+        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n```",
            "output": "{'billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java': '/*\\n * Copyright (C) 2017 Premium Minds.\\n *\\n * This file is part of billy core.\\n *\\n * billy core is free software: you can redistribute it and/or modify it under\\n * the terms of the GNU Lesser General Public License as published by the Free\\n * Software Foundation, either version 3 of the License, or (at your option) any\\n * later version.\\n *\\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU Lesser General Public License\\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\\n */\\npackage com.premiumminds.billy.core.test;\\n\\nimport com.google.inject.Guice;\\nimport com.google.inject.Injector;\\nimport com.google.inject.util.Modules;\\nimport com.premiumminds.billy.core.CoreDependencyModule;\\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\\nimport java.time.LocalDate;\\nimport org.junit.jupiter.api.BeforeAll;\\nimport org.mockito.Mockito;\\nimport org.yaml.snakeyaml.DumperOptions;\\nimport org.yaml.snakeyaml.LoaderOptions;\\nimport org.yaml.snakeyaml.TypeDescription;\\nimport org.yaml.snakeyaml.Yaml;\\nimport org.yaml.snakeyaml.constructor.Constructor;\\nimport org.yaml.snakeyaml.nodes.Tag;\\nimport org.yaml.snakeyaml.representer.Representer;\\nimport org.yaml.snakeyaml.resolver.Resolver;\\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\\n\\nimport java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.FileReader;\\nimport java.time.ZoneId;\\n\\npublic class AbstractTest {\\n\\n    private static Injector injector;\\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\\n\\n    @BeforeAll\\n    public static void setUpClass() {\\n        AbstractTest.injector =\\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\\n    }\\n\\n    public <T> T getInstance(Class<T> clazz) {\\n        return AbstractTest.injector.getInstance(clazz);\\n    }\\n\\n    public <T> T getMock(Class<T> clazz) {\\n        return Mockito.mock(clazz);\\n    }\\n\\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\\n        final LoaderOptions loadingConfig = new LoaderOptions();\\n        loadingConfig.setAllowDuplicateKeys(false);\\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\\n\\n        final Representer representer = new Representer(new DumperOptions());\\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\\n        representer.addClassTag(ZoneId.class, zoneIdTag);\\n        final Tag localDateTag = new Tag(\"!LocalDate\");\\n        representer.addClassTag(LocalDate.class, localDateTag);\\n\\n        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\\n            {\\n                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\\n                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\\n                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\\n            }\\n\\n            @Override\\n            protected Object constructObject(Node node) {\\n                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\\n                    try {\\n                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\\n                        return createInstance(clazz);\\n                    } catch (ClassNotFoundException e) {\\n                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\\n                    }\\n                }\\n                return super.constructObject(node);\\n            }\\n        };\\n\\n        Resolver resolver = new Resolver() {\\n            @Override\\n            protected void addImplicitResolvers() {\\n            }\\n        };\\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\\n\\n        try {\\n            return yaml.load(new BufferedReader(new FileReader(path)));\\n        } catch (FileNotFoundException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n}\\n'}",
            "error": "",
            "span_id": 4194850151533817766
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -17,6 +17,9 @@ import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n import org.yaml.snakeyaml.resolver.Resolver;\n import org.yaml.snakeyaml.constructor.SafeConstructor;\n+import org.yaml.snakeyaml.nodes.Node;\n+import org.yaml.snakeyaml.error.YAMLException;\n+import org.yaml.snakeyaml.constructor.Constructor;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n@@ -49,7 +52,7 @@ public class AbstractTest {\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n-        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\n+        final Constructor constructor = new SafeConstructor(loadingConfig) {\n             {\n                 this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n                 this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n@@ -61,7 +64,7 @@ public class AbstractTest {\n                 if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\n                     try {\n                         Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n-                        return createInstance(clazz);\n+                        return clazz.getDeclaredConstructor().newInstance();\n                     } catch (ClassNotFoundException e) {\n                         throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n                     }\n```",
            "output": "{'billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java': '/*\\n * Copyright (C) 2017 Premium Minds.\\n *\\n * This file is part of billy core.\\n *\\n * billy core is free software: you can redistribute it and/or modify it under\\n * the terms of the GNU Lesser General Public License as published by the Free\\n * Software Foundation, either version 3 of the License, or (at your option) any\\n * later version.\\n *\\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU Lesser General Public License\\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\\n */\\npackage com.premiumminds.billy.core.test;\\n\\nimport com.google.inject.Guice;\\nimport com.google.inject.Injector;\\nimport com.google.inject.util.Modules;\\nimport com.premiumminds.billy.core.CoreDependencyModule;\\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\\nimport java.time.LocalDate;\\nimport org.junit.jupiter.api.BeforeAll;\\nimport org.mockito.Mockito;\\nimport org.yaml.snakeyaml.DumperOptions;\\nimport org.yaml.snakeyaml.LoaderOptions;\\nimport org.yaml.snakeyaml.TypeDescription;\\nimport org.yaml.snakeyaml.Yaml;\\nimport org.yaml.snakeyaml.constructor.Constructor;\\nimport org.yaml.snakeyaml.nodes.Tag;\\nimport org.yaml.snakeyaml.representer.Representer;\\nimport org.yaml.snakeyaml.resolver.Resolver;\\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\\nimport org.yaml.snakeyaml.nodes.Node;\\nimport org.yaml.snakeyaml.error.YAMLException;\\nimport org.yaml.snakeyaml.constructor.Constructor;\\n\\nimport java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.FileReader;\\nimport java.time.ZoneId;\\n\\npublic class AbstractTest {\\n\\n    private static Injector injector;\\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\\n\\n    @BeforeAll\\n    public static void setUpClass() {\\n        AbstractTest.injector =\\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\\n    }\\n\\n    public <T> T getInstance(Class<T> clazz) {\\n        return AbstractTest.injector.getInstance(clazz);\\n    }\\n\\n    public <T> T getMock(Class<T> clazz) {\\n        return Mockito.mock(clazz);\\n    }\\n\\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\\n        final LoaderOptions loadingConfig = new LoaderOptions();\\n        loadingConfig.setAllowDuplicateKeys(false);\\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\\n\\n        final Representer representer = new Representer(new DumperOptions());\\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\\n        representer.addClassTag(ZoneId.class, zoneIdTag);\\n        final Tag localDateTag = new Tag(\"!LocalDate\");\\n        representer.addClassTag(LocalDate.class, localDateTag);\\n\\n        final Constructor constructor = new SafeConstructor(loadingConfig) {\\n            {\\n                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\\n                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\\n                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\\n            }\\n\\n            @Override\\n            protected Object constructObject(Node node) {\\n                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\\n                    try {\\n                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\\n                        return clazz.getDeclaredConstructor().newInstance();\\n                    } catch (ClassNotFoundException e) {\\n                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\\n                    }\\n                }\\n                return super.constructObject(node);\\n            }\\n        };\\n\\n        Resolver resolver = new Resolver() {\\n            @Override\\n            protected void addImplicitResolvers() {\\n            }\\n        };\\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\\n\\n        try {\\n            return yaml.load(new BufferedReader(new FileReader(path)));\\n        } catch (FileNotFoundException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n}\\n'}",
            "error": "",
            "span_id": 17211396218571830925
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -19,7 +19,9 @@ import org.yaml.snakeyaml.resolver.Resolver;\n import org.yaml.snakeyaml.constructor.SafeConstructor;\n import org.yaml.snakeyaml.nodes.Node;\n import org.yaml.snakeyaml.error.YAMLException;\n-import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n@@ -52,7 +54,7 @@ public class AbstractTest {\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n-        final Constructor constructor = new SafeConstructor(loadingConfig) {\n+        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\n             {\n                 this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n                 this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n@@ -65,8 +67,12 @@ public class AbstractTest {\n                     try {\n                         Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n                         return clazz.getDeclaredConstructor().newInstance();\n-                    } catch (ClassNotFoundException e) {\n+                    } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                         throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n+                    }\n+                } else if (node.getTag().startsWith(\"!java.math.BigDecimal\")) {\n+                    try {\n+                        return new java.math.BigDecimal(((Map<String, Object>) constructObject(node)).get(\"value\").toString());\n                     } catch (Exception e) {\n                         throw new YAMLException(\"Failed to construct BigDecimal: \" + e.getMessage());\n                     }\n```",
            "output": "{'billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java': '/*\\n * Copyright (C) 2017 Premium Minds.\\n *\\n * This file is part of billy core.\\n *\\n * billy core is free software: you can redistribute it and/or modify it under\\n * the terms of the GNU Lesser General Public License as published by the Free\\n * Software Foundation, either version 3 of the License, or (at your option) any\\n * later version.\\n *\\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU Lesser General Public License\\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\\n */\\npackage com.premiumminds.billy.core.test;\\n\\nimport com.google.inject.Guice;\\nimport com.google.inject.Injector;\\nimport com.google.inject.util.Modules;\\nimport com.premiumminds.billy.core.CoreDependencyModule;\\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\\nimport java.time.LocalDate;\\nimport org.junit.jupiter.api.BeforeAll;\\nimport org.mockito.Mockito;\\nimport org.yaml.snakeyaml.DumperOptions;\\nimport org.yaml.snakeyaml.LoaderOptions;\\nimport org.yaml.snakeyaml.TypeDescription;\\nimport org.yaml.snakeyaml.Yaml;\\nimport org.yaml.snakeyaml.constructor.Constructor;\\nimport org.yaml.snakeyaml.nodes.Tag;\\nimport org.yaml.snakeyaml.representer.Representer;\\nimport org.yaml.snakeyaml.resolver.Resolver;\\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\\nimport org.yaml.snakeyaml.nodes.Node;\\nimport org.yaml.snakeyaml.error.YAMLException;\\n\\nimport java.lang.reflect.InvocationTargetException;\\nimport java.util.Map;\\n\\nimport java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.FileReader;\\nimport java.time.ZoneId;\\n\\npublic class AbstractTest {\\n\\n    private static Injector injector;\\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\\n\\n    @BeforeAll\\n    public static void setUpClass() {\\n        AbstractTest.injector =\\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\\n    }\\n\\n    public <T> T getInstance(Class<T> clazz) {\\n        return AbstractTest.injector.getInstance(clazz);\\n    }\\n\\n    public <T> T getMock(Class<T> clazz) {\\n        return Mockito.mock(clazz);\\n    }\\n\\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\\n        final LoaderOptions loadingConfig = new LoaderOptions();\\n        loadingConfig.setAllowDuplicateKeys(false);\\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\\n\\n        final Representer representer = new Representer(new DumperOptions());\\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\\n        representer.addClassTag(ZoneId.class, zoneIdTag);\\n        final Tag localDateTag = new Tag(\"!LocalDate\");\\n        representer.addClassTag(LocalDate.class, localDateTag);\\n\\n        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\\n            {\\n                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\\n                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\\n                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\\n            }\\n\\n            @Override\\n            protected Object constructObject(Node node) {\\n                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\\n                    try {\\n                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\\n                        return clazz.getDeclaredConstructor().newInstance();\\n                    } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\\n                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\\n                    }\\n                } else if (node.getTag().startsWith(\"!java.math.BigDecimal\")) {\\n                    try {\\n                        return new java.math.BigDecimal(((Map<String, Object>) constructObject(node)).get(\"value\").toString());\\n                    }\\n                }\\n                return super.constructObject(node);\\n            }\\n        };\\n\\n        Resolver resolver = new Resolver() {\\n            @Override\\n            protected void addImplicitResolvers() {\\n            }\\n        };\\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\\n\\n        try {\\n            return yaml.load(new BufferedReader(new FileReader(path)));\\n        } catch (FileNotFoundException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n}\\n'}",
            "error": "",
            "span_id": 16899190753768168274
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -95,9 +95,9 @@ public class AbstractTest {\n                         throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n                     }\n                 } else if (node.getTag().startsWith(\"!java.math.BigDecimal\")) {\n-                    try {\n-                        return new java.math.BigDecimal(((Map<String, Object>) constructObject(node)).get(\"value\").toString());\n-                    }\n+                    Map<String, Object> data = (Map<String, Object>) super.constructObject(node);\n+                    String value = (String) data.get(\"value\");\n+                    return new java.math.BigDecimal(value);\n                 }\n                 return super.constructObject(node);\n             }\n```",
            "output": "{'billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java': '/*\\n * Copyright (C) 2017 Premium Minds.\\n *\\n * This file is part of billy core.\\n *\\n * billy core is free software: you can redistribute it and/or modify it under\\n * the terms of the GNU Lesser General Public License as published by the Free\\n * Software Foundation, either version 3 of the License, or (at your option) any\\n * later version.\\n *\\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU Lesser General Public License\\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\\n */\\npackage com.premiumminds.billy.core.test;\\n\\nimport com.google.inject.Guice;\\nimport com.google.inject.Injector;\\nimport com.google.inject.util.Modules;\\nimport com.premiumminds.billy.core.CoreDependencyModule;\\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\\nimport java.time.LocalDate;\\nimport org.junit.jupiter.api.BeforeAll;\\nimport org.mockito.Mockito;\\nimport org.yaml.snakeyaml.DumperOptions;\\nimport org.yaml.snakeyaml.LoaderOptions;\\nimport org.yaml.snakeyaml.TypeDescription;\\nimport org.yaml.snakeyaml.Yaml;\\nimport org.yaml.snakeyaml.constructor.Constructor;\\nimport org.yaml.snakeyaml.nodes.Tag;\\nimport org.yaml.snakeyaml.representer.Representer;\\nimport org.yaml.snakeyaml.resolver.Resolver;\\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\\nimport org.yaml.snakeyaml.nodes.Node;\\nimport org.yaml.snakeyaml.error.YAMLException;\\n\\nimport java.lang.reflect.InvocationTargetException;\\nimport java.util.Map;\\n\\nimport java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.FileReader;\\nimport java.time.ZoneId;\\n\\npublic class AbstractTest {\\n\\n    private static Injector injector;\\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\\n\\n    @BeforeAll\\n    public static void setUpClass() {\\n        AbstractTest.injector =\\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\\n    }\\n\\n    public <T> T getInstance(Class<T> clazz) {\\n        return AbstractTest.injector.getInstance(clazz);\\n    }\\n\\n    public <T> T getMock(Class<T> clazz) {\\n        return Mockito.mock(clazz);\\n    }\\n\\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\\n        final LoaderOptions loadingConfig = new LoaderOptions();\\n        loadingConfig.setAllowDuplicateKeys(false);\\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\\n\\n        final Representer representer = new Representer(new DumperOptions());\\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\\n        representer.addClassTag(ZoneId.class, zoneIdTag);\\n        final Tag localDateTag = new Tag(\"!LocalDate\");\\n        representer.addClassTag(LocalDate.class, localDateTag);\\n\\n        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\\n            {\\n                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\\n                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\\n                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\\n            }\\n\\n            @Override\\n            protected Object constructObject(Node node) {\\n                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\\n                    try {\\n                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\\n                        return clazz.getDeclaredConstructor().newInstance();\\n                    } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\\n                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\\n                    }\\n                } else if (node.getTag().startsWith(\"!java.math.BigDecimal\")) {\\n                    Map<String, Object> data = (Map<String, Object>) super.constructObject(node);\\n                    String value = (String) data.get(\"value\");\\n                    return new java.math.BigDecimal(value);\\n                }\\n                return super.constructObject(node);\\n            }\\n        };\\n\\n        Resolver resolver = new Resolver() {\\n            @Override\\n            protected void addImplicitResolvers() {\\n            }\\n        };\\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\\n\\n        try {\\n            return yaml.load(new BufferedReader(new FileReader(path)));\\n        } catch (FileNotFoundException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n}\\n'}",
            "error": "",
            "span_id": 12656549704308664725
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -13,7 +13,6 @@ import org.yaml.snakeyaml.LoaderOptions;\n import org.yaml.snakeyaml.TypeDescription;\n import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.constructor.Constructor;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n@@ -39,8 +38,7 @@ public class AbstractTest {\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n-\n+        loadingConfig.setAllowDuplicateKeys(false);\n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n@@ -48,7 +46,7 @@ public class AbstractTest {\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n-            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n+            this.addTypeDescription(new TypeDescription(ZoneId.class, \"!ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] TestApplicationBuilder.doTest:42->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContactEntity\nin 'reader', line 26, column 15:\nmainContact : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestBusinessBuilder.doTest:42->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 20, column 22:\noperationalContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestContextBuilder.doTest:37->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 23, column 17:\nparentContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestCustomerBuilder.doTest:42->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestGenericInvoiceBuilder.doTest:48->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccess:48->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccessWithGivenTaxes:98->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryOperations.setUp:58->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestProductBuilder.doTest:40->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockTaxEntity\nin 'reader', line 29, column 5:\n- !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestShippingPointBuilder.doTest:38->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 25, column 11:\naddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestSupplierBuilder.doTest:40->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestTaxBuilder.doTestFlat:42->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 29, column 11:\ncontext : !!com.premiumminds.billy.core.te ...\n^\n[INFO]\n[ERROR] Tests run: 20, Failures: 0, Errors: 16, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for billy 9.2.1-SNAPSHOT:\n[INFO]\n[INFO] billy .............................................. SUCCESS [ 2.774 s]\n[INFO] billy core ......................................... FAILURE [ 10.466 s]\n[INFO] billy core JPA ..................................... SKIPPED\n[INFO] billy GIN .......................................... SKIPPED\n[INFO] billy portugal (PT Pack) ........................... SKIPPED\n[INFO] billy spain (ES Pack) .............................. SKIPPED\n[INFO] billy france (FR Pack) ............................. SKIPPED\n[INFO] billy andorra (AD Pack) ............................ SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.494 s\n[INFO] Finished at: 2024-08-05T14:18:12Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.1.2:test (default-test) on project billy-core:\n[ERROR]\n[ERROR] Please refer to /mnt/repo/billy-core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :billy-core",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setAllowDuplicateKeys(false);\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"!ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] TestApplicationBuilder.doTest:42->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContactEntity\nin 'reader', line 26, column 15:\nmainContact : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestBusinessBuilder.doTest:42->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 20, column 22:\noperationalContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestContextBuilder.doTest:37->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 23, column 17:\nparentContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestCustomerBuilder.doTest:42->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestGenericInvoiceBuilder.doTest:48->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccess:48->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccessWithGivenTaxes:98->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryOperations.setUp:58->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestProductBuilder.doTest:40->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockTaxEntity\nin 'reader', line 29, column 5:\n- !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestShippingPointBuilder.doTest:38->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 25, column 11:\naddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestSupplierBuilder.doTest:40->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestTaxBuilder.doTestFlat:42->AbstractTest.createMockEntity:83 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 29, column 11:\ncontext : !!com.premiumminds.billy.core.te ...\n^\n[INFO]\n[ERROR] Tests run: 20, Failures: 0, Errors: 16, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for billy 9.2.1-SNAPSHOT:\n[INFO]\n[INFO] billy .............................................. SUCCESS [ 2.774 s]\n[INFO] billy core ......................................... FAILURE [ 10.466 s]\n[INFO] billy core JPA ..................................... SKIPPED\n[INFO] billy GIN .......................................... SKIPPED\n[INFO] billy portugal (PT Pack) ........................... SKIPPED\n[INFO] billy spain (ES Pack) .............................. SKIPPED\n[INFO] billy france (FR Pack) ............................. SKIPPED\n[INFO] billy andorra (AD Pack) ............................ SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 13.494 s\n[INFO] Finished at: 2024-08-05T14:18:12Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.1.2:test (default-test) on project billy-core:\n[ERROR]\n[ERROR] Please refer to /mnt/repo/billy-core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :billy-core",
            "span_id": 3520819738731014291
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -15,6 +15,7 @@ import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.constructor.Constructor;\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n+import org.yaml.snakeyaml.resolver.Resolver;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n@@ -39,6 +40,7 @@ public class AbstractTest {\n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n         loadingConfig.setAllowDuplicateKeys(false);\n+        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n@@ -53,7 +55,15 @@ public class AbstractTest {\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n-        Yaml yaml = new Yaml(constructor, representer);\n+        Resolver resolver = new Resolver() {\n+            @Override\n+            protected void addImplicitResolvers() {\n+                // Only add safe implicit resolvers\n+                addImplicitResolver(Tag.BOOL, BOOL, \"yYnNtTfFoO\");\n+                addImplicitResolver(Tag.INT, INT, \"-+0123456789\");\n+            }\n+        };\n+        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), loadingConfig, resolver);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] TestApplicationBuilder.doTest:42->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContactEntity\nin 'reader', line 26, column 15:\nmainContact : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestBusinessBuilder.doTest:42->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 20, column 22:\noperationalContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestContextBuilder.doTest:37->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 23, column 17:\nparentContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestCustomerBuilder.doTest:42->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestGenericInvoiceBuilder.doTest:48->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccess:48->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccessWithGivenTaxes:98->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryOperations.setUp:58->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestProductBuilder.doTest:40->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockTaxEntity\nin 'reader', line 29, column 5:\n- !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestShippingPointBuilder.doTest:38->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 25, column 11:\naddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestSupplierBuilder.doTest:40->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestTaxBuilder.doTestFlat:42->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 29, column 11:\ncontext : !!com.premiumminds.billy.core.te ...\n^\n[INFO]\n[ERROR] Tests run: 20, Failures: 0, Errors: 16, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for billy 9.2.1-SNAPSHOT:\n[INFO]\n[INFO] billy .............................................. SUCCESS [ 2.370 s]\n[INFO] billy core ......................................... FAILURE [ 9.513 s]\n[INFO] billy core JPA ..................................... SKIPPED\n[INFO] billy GIN .......................................... SKIPPED\n[INFO] billy portugal (PT Pack) ........................... SKIPPED\n[INFO] billy spain (ES Pack) .............................. SKIPPED\n[INFO] billy france (FR Pack) ............................. SKIPPED\n[INFO] billy andorra (AD Pack) ............................ SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.075 s\n[INFO] Finished at: 2024-08-05T14:18:43Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.1.2:test (default-test) on project billy-core:\n[ERROR]\n[ERROR] Please refer to /mnt/repo/billy-core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :billy-core",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\nimport org.yaml.snakeyaml.resolver.Resolver;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setAllowDuplicateKeys(false);\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"!ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Resolver resolver = new Resolver() {\n            @Override\n            protected void addImplicitResolvers() {\n                // Only add safe implicit resolvers\n                addImplicitResolver(Tag.BOOL, BOOL, \"yYnNtTfFoO\");\n                addImplicitResolver(Tag.INT, INT, \"-+0123456789\");\n            }\n        };\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), loadingConfig, resolver);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] TestApplicationBuilder.doTest:42->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContactEntity\nin 'reader', line 26, column 15:\nmainContact : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestBusinessBuilder.doTest:42->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 20, column 22:\noperationalContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestContextBuilder.doTest:37->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 23, column 17:\nparentContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestCustomerBuilder.doTest:42->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestGenericInvoiceBuilder.doTest:48->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccess:48->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccessWithGivenTaxes:98->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryOperations.setUp:58->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestProductBuilder.doTest:40->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockTaxEntity\nin 'reader', line 29, column 5:\n- !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestShippingPointBuilder.doTest:38->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 25, column 11:\naddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestSupplierBuilder.doTest:40->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestTaxBuilder.doTestFlat:42->AbstractTest.createMockEntity:93 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 29, column 11:\ncontext : !!com.premiumminds.billy.core.te ...\n^\n[INFO]\n[ERROR] Tests run: 20, Failures: 0, Errors: 16, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for billy 9.2.1-SNAPSHOT:\n[INFO]\n[INFO] billy .............................................. SUCCESS [ 2.370 s]\n[INFO] billy core ......................................... FAILURE [ 9.513 s]\n[INFO] billy core JPA ..................................... SKIPPED\n[INFO] billy GIN .......................................... SKIPPED\n[INFO] billy portugal (PT Pack) ........................... SKIPPED\n[INFO] billy spain (ES Pack) .............................. SKIPPED\n[INFO] billy france (FR Pack) ............................. SKIPPED\n[INFO] billy andorra (AD Pack) ............................ SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.075 s\n[INFO] Finished at: 2024-08-05T14:18:43Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.1.2:test (default-test) on project billy-core:\n[ERROR]\n[ERROR] Please refer to /mnt/repo/billy-core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :billy-core",
            "span_id": 5275244741383327655
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -16,6 +16,7 @@ import org.yaml.snakeyaml.constructor.Constructor;\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n import org.yaml.snakeyaml.resolver.Resolver;\n+import org.yaml.snakeyaml.constructor.SafeConstructor;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n@@ -41,29 +42,39 @@ public class AbstractTest {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n         loadingConfig.setAllowDuplicateKeys(false);\n         loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\n+        \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n-        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n-            this.addTypeDescription(new TypeDescription(ZoneId.class, \"!ZoneId\"));\n-            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n+        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\n+            {\n+                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n+                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n+                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\n+            }\n \n-            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n-            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n-        }};\n+            @Override\n+            protected Object constructObject(Node node) {\n+                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\n+                    try {\n+                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n+                        return createInstance(clazz);\n+                    } catch (ClassNotFoundException e) {\n+                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n+                    }\n+                }\n+                return super.constructObject(node);\n+            }\n+        };\n \n         Resolver resolver = new Resolver() {\n             @Override\n             protected void addImplicitResolvers() {\n-                // Only add safe implicit resolvers\n-                addImplicitResolver(Tag.BOOL, BOOL, \"yYnNtTfFoO\");\n-                addImplicitResolver(Tag.INT, INT, \"-+0123456789\");\n             }\n         };\n-        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), loadingConfig, resolver);\n+        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\nimport org.yaml.snakeyaml.resolver.Resolver;\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setAllowDuplicateKeys(false);\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\n            {\n                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\n            }\n\n            @Override\n            protected Object constructObject(Node node) {\n                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\n                    try {\n                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n                        return createInstance(clazz);\n                    } catch (ClassNotFoundException e) {\n                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n                    }\n                }\n                return super.constructObject(node);\n            }\n        };\n\n        Resolver resolver = new Resolver() {\n            @Override\n            protected void addImplicitResolvers() {\n            }\n        };\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "84": {
                            "lines": [
                                {
                                    "line_no": 83,
                                    "content": "            @Override"
                                },
                                {
                                    "line_no": 84,
                                    "content": "            protected Object constructObject(Node node) {"
                                },
                                {
                                    "line_no": 85,
                                    "content": "                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {"
                                }
                            ],
                            "error_texts": [
                                "[84,46] cannot find symbol\n",
                                "[84,46] cannot find symbol\nsymbol: class Node\n"
                            ]
                        },
                        "88": {
                            "lines": [
                                {
                                    "line_no": 87,
                                    "content": "                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));"
                                },
                                {
                                    "line_no": 88,
                                    "content": "                        return createInstance(clazz);"
                                },
                                {
                                    "line_no": 89,
                                    "content": "                    } catch (ClassNotFoundException e) {"
                                }
                            ],
                            "error_texts": [
                                "[88,32] cannot find symbol\n",
                                "[88,32] cannot find symbol\nsymbol: method createInstance(java.lang.Class<capture#1 of ?>)\n"
                            ]
                        },
                        "90": {
                            "lines": [
                                {
                                    "line_no": 89,
                                    "content": "                    } catch (ClassNotFoundException e) {"
                                },
                                {
                                    "line_no": 90,
                                    "content": "                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));"
                                },
                                {
                                    "line_no": 91,
                                    "content": "                    }"
                                }
                            ],
                            "error_texts": [
                                "[90,35] cannot find symbol\n",
                                "[90,35] cannot find symbol\nsymbol: class YAMLException\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 17864436416649378919
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -17,6 +17,9 @@ import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n import org.yaml.snakeyaml.resolver.Resolver;\n import org.yaml.snakeyaml.constructor.SafeConstructor;\n+import org.yaml.snakeyaml.nodes.Node;\n+import org.yaml.snakeyaml.error.YAMLException;\n+import org.yaml.snakeyaml.constructor.Constructor;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n@@ -49,7 +52,7 @@ public class AbstractTest {\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n-        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\n+        final Constructor constructor = new SafeConstructor(loadingConfig) {\n             {\n                 this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n                 this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n@@ -61,7 +64,7 @@ public class AbstractTest {\n                 if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\n                     try {\n                         Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n-                        return createInstance(clazz);\n+                        return clazz.getDeclaredConstructor().newInstance();\n                     } catch (ClassNotFoundException e) {\n                         throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n                     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "incompatible types: <anonymous org.yaml.snakeyaml.constructor.SafeConstructor> cannot be converted to org.yaml.snakeyaml.constructor.Constructor\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\nimport org.yaml.snakeyaml.resolver.Resolver;\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\nimport org.yaml.snakeyaml.nodes.Node;\nimport org.yaml.snakeyaml.error.YAMLException;\nimport org.yaml.snakeyaml.constructor.Constructor;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setAllowDuplicateKeys(false);\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new SafeConstructor(loadingConfig) {\n            {\n                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\n            }\n\n            @Override\n            protected Object constructObject(Node node) {\n                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\n                    try {\n                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n                        return clazz.getDeclaredConstructor().newInstance();\n                    } catch (ClassNotFoundException e) {\n                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n                    }\n                }\n                return super.constructObject(node);\n            }\n        };\n\n        Resolver resolver = new Resolver() {\n            @Override\n            protected void addImplicitResolvers() {\n            }\n        };\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "79": {
                            "lines": [
                                {
                                    "line_no": 78,
                                    "content": ""
                                },
                                {
                                    "line_no": 79,
                                    "content": "        final Constructor constructor = new SafeConstructor(loadingConfig) {"
                                },
                                {
                                    "line_no": 80,
                                    "content": "            {"
                                }
                            ],
                            "error_texts": [
                                "[79,41] incompatible types: <anonymous org.yaml.snakeyaml.constructor.SafeConstructor> cannot be converted to org.yaml.snakeyaml.constructor.Constructor\n"
                            ]
                        }
                    }
                }
            },
            "error": "incompatible types: <anonymous org.yaml.snakeyaml.constructor.SafeConstructor> cannot be converted to org.yaml.snakeyaml.constructor.Constructor\n",
            "span_id": 3063518989663725568
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -19,7 +19,9 @@ import org.yaml.snakeyaml.resolver.Resolver;\n import org.yaml.snakeyaml.constructor.SafeConstructor;\n import org.yaml.snakeyaml.nodes.Node;\n import org.yaml.snakeyaml.error.YAMLException;\n-import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n@@ -52,7 +54,7 @@ public class AbstractTest {\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n-        final Constructor constructor = new SafeConstructor(loadingConfig) {\n+        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\n             {\n                 this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n                 this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n@@ -65,8 +67,12 @@ public class AbstractTest {\n                     try {\n                         Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n                         return clazz.getDeclaredConstructor().newInstance();\n-                    } catch (ClassNotFoundException e) {\n+                    } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                         throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n+                    }\n+                } else if (node.getTag().startsWith(\"!java.math.BigDecimal\")) {\n+                    try {\n+                        return new java.math.BigDecimal(((Map<String, Object>) constructObject(node)).get(\"value\").toString());\n                     } catch (Exception e) {\n                         throw new YAMLException(\"Failed to construct BigDecimal: \" + e.getMessage());\n                     }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "'try' without 'catch', 'finally' or resource declarations\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\nimport org.yaml.snakeyaml.resolver.Resolver;\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\nimport org.yaml.snakeyaml.nodes.Node;\nimport org.yaml.snakeyaml.error.YAMLException;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Map;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setAllowDuplicateKeys(false);\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\n            {\n                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\n            }\n\n            @Override\n            protected Object constructObject(Node node) {\n                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\n                    try {\n                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n                        return clazz.getDeclaredConstructor().newInstance();\n                    } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n                    }\n                } else if (node.getTag().startsWith(\"!java.math.BigDecimal\")) {\n                    try {\n                        return new java.math.BigDecimal(((Map<String, Object>) constructObject(node)).get(\"value\").toString());\n                    }\n                }\n                return super.constructObject(node);\n            }\n        };\n\n        Resolver resolver = new Resolver() {\n            @Override\n            protected void addImplicitResolvers() {\n            }\n        };\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "98": {
                            "lines": [
                                {
                                    "line_no": 97,
                                    "content": "                } else if (node.getTag().startsWith(\"!java.math.BigDecimal\")) {"
                                },
                                {
                                    "line_no": 98,
                                    "content": "                    try {"
                                },
                                {
                                    "line_no": 99,
                                    "content": "                        return new java.math.BigDecimal(((Map<String, Object>) constructObject(node)).get(\"value\").toString());"
                                }
                            ],
                            "error_texts": [
                                "[98,21] 'try' without 'catch', 'finally' or resource declarations\n"
                            ]
                        }
                    }
                }
            },
            "error": "'try' without 'catch', 'finally' or resource declarations\n",
            "span_id": 13227762243603187899
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -95,9 +95,9 @@ public class AbstractTest {\n                         throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n                     }\n                 } else if (node.getTag().startsWith(\"!java.math.BigDecimal\")) {\n-                    try {\n-                        return new java.math.BigDecimal(((Map<String, Object>) constructObject(node)).get(\"value\").toString());\n-                    }\n+                    Map<String, Object> data = (Map<String, Object>) super.constructObject(node);\n+                    String value = (String) data.get(\"value\");\n+                    return new java.math.BigDecimal(value);\n                 }\n                 return super.constructObject(node);\n             }\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] TestAddressBuilder.doTest:36->AbstractTest.createMockEntity:114 \u00bb ClassCast class java.util.LinkedHashMap cannot be cast to class com.premiumminds.billy.core.test.fixtures.MockBaseEntity (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.premiumminds.billy.core.test.fixtures.MockBaseEntity is in unnamed module of loader 'app')\n[ERROR] TestApplicationBuilder.doTest:42->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContactEntity\nin 'reader', line 26, column 15:\nmainContact : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestBankAccountBuilder.doTest:37->AbstractTest.createMockEntity:114 \u00bb ClassCast class java.util.LinkedHashMap cannot be cast to class com.premiumminds.billy.core.test.fixtures.MockBaseEntity (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.premiumminds.billy.core.test.fixtures.MockBaseEntity is in unnamed module of loader 'app')\n[ERROR] TestBusinessBuilder.doTest:42->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 20, column 22:\noperationalContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestContactBuilder.doTest:37->AbstractTest.createMockEntity:114 \u00bb ClassCast class java.util.LinkedHashMap cannot be cast to class com.premiumminds.billy.core.test.fixtures.MockBaseEntity (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.premiumminds.billy.core.test.fixtures.MockBaseEntity is in unnamed module of loader 'app')\n[ERROR] TestContextBuilder.doTest:37->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 23, column 17:\nparentContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestCustomerBuilder.doTest:42->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestGenericInvoiceBuilder.doTest:48->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccess:48->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccessWithGivenTaxes:98->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryOperations.setUp:58->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestPaymentBuilder.doTest:36->AbstractTest.createMockEntity:114 \u00bb ClassCast class java.util.LinkedHashMap cannot be cast to class com.premiumminds.billy.core.test.fixtures.MockBaseEntity (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.premiumminds.billy.core.test.fixtures.MockBaseEntity is in unnamed module of loader 'app')\n[ERROR] TestProductBuilder.doTest:40->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockTaxEntity\nin 'reader', line 29, column 5:\n- !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestShippingPointBuilder.doTest:38->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 25, column 11:\naddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestSupplierBuilder.doTest:40->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestTaxBuilder.doTestFlat:42->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 29, column 11:\ncontext : !!com.premiumminds.billy.core.te ...\n^\n[INFO]\n[ERROR] Tests run: 20, Failures: 0, Errors: 20, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for billy 9.2.1-SNAPSHOT:\n[INFO]\n[INFO] billy .............................................. SUCCESS [ 2.449 s]\n[INFO] billy core ......................................... FAILURE [ 10.135 s]\n[INFO] billy core JPA ..................................... SKIPPED\n[INFO] billy GIN .......................................... SKIPPED\n[INFO] billy portugal (PT Pack) ........................... SKIPPED\n[INFO] billy spain (ES Pack) .............................. SKIPPED\n[INFO] billy france (FR Pack) ............................. SKIPPED\n[INFO] billy andorra (AD Pack) ............................ SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.837 s\n[INFO] Finished at: 2024-08-05T14:20:57Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.1.2:test (default-test) on project billy-core:\n[ERROR]\n[ERROR] Please refer to /mnt/repo/billy-core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :billy-core",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\nimport org.yaml.snakeyaml.resolver.Resolver;\nimport org.yaml.snakeyaml.constructor.SafeConstructor;\nimport org.yaml.snakeyaml.nodes.Node;\nimport org.yaml.snakeyaml.error.YAMLException;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Map;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setAllowDuplicateKeys(false);\n        loadingConfig.setCodePointLimit(50 * 1024 * 1024); // 50MB\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final SafeConstructor constructor = new SafeConstructor(loadingConfig) {\n            {\n                this.yamlConstructors.put(new Tag(\"!ZoneId\"), new JavaZoneIdConstruct());\n                this.yamlConstructors.put(new Tag(\"!LocalDate\"), new JavaLocalDateConstruct());\n                this.yamlConstructors.put(new Tag(\"!java.math.BigDecimal\"), new SafeConstructor.ConstructYamlFloat());\n            }\n\n            @Override\n            protected Object constructObject(Node node) {\n                if (node.getTag().startsWith(\"!com.premiumminds.billy.core.test.fixtures.Mock\")) {\n                    try {\n                        Class<?> clazz = Class.forName(node.getTag().getValue().substring(1));\n                        return clazz.getDeclaredConstructor().newInstance();\n                    } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                        throw new YAMLException(\"Class not found: \" + node.getTag().getValue().substring(1));\n                    }\n                } else if (node.getTag().startsWith(\"!java.math.BigDecimal\")) {\n                    Map<String, Object> data = (Map<String, Object>) super.constructObject(node);\n                    String value = (String) data.get(\"value\");\n                    return new java.math.BigDecimal(value);\n                }\n                return super.constructObject(node);\n            }\n        };\n\n        Resolver resolver = new Resolver() {\n            @Override\n            protected void addImplicitResolvers() {\n            }\n        };\n        Yaml yaml = new Yaml(constructor, representer, new DumperOptions(), resolver);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Errors:\n[ERROR] TestAddressBuilder.doTest:36->AbstractTest.createMockEntity:114 \u00bb ClassCast class java.util.LinkedHashMap cannot be cast to class com.premiumminds.billy.core.test.fixtures.MockBaseEntity (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.premiumminds.billy.core.test.fixtures.MockBaseEntity is in unnamed module of loader 'app')\n[ERROR] TestApplicationBuilder.doTest:42->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContactEntity\nin 'reader', line 26, column 15:\nmainContact : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestBankAccountBuilder.doTest:37->AbstractTest.createMockEntity:114 \u00bb ClassCast class java.util.LinkedHashMap cannot be cast to class com.premiumminds.billy.core.test.fixtures.MockBaseEntity (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.premiumminds.billy.core.test.fixtures.MockBaseEntity is in unnamed module of loader 'app')\n[ERROR] TestBusinessBuilder.doTest:42->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 20, column 22:\noperationalContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestContactBuilder.doTest:37->AbstractTest.createMockEntity:114 \u00bb ClassCast class java.util.LinkedHashMap cannot be cast to class com.premiumminds.billy.core.test.fixtures.MockBaseEntity (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.premiumminds.billy.core.test.fixtures.MockBaseEntity is in unnamed module of loader 'app')\n[ERROR] TestContextBuilder.doTest:37->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 23, column 17:\nparentContext : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestCustomerBuilder.doTest:42->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestGenericInvoiceBuilder.doTest:48->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccess:48->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryBuilder.testSuccessWithGivenTaxes:98->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 24, column 34:\nexchangeRateToDocumentCurrency : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceEntryOperations.setUp:58->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestGenericInvoiceOperations.setUp:63->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:java.math.BigDecimal\nin 'reader', line 25, column 17:\namountWithTax : !!java.math.BigDecimal\n^\n[ERROR] TestPaymentBuilder.doTest:36->AbstractTest.createMockEntity:114 \u00bb ClassCast class java.util.LinkedHashMap cannot be cast to class com.premiumminds.billy.core.test.fixtures.MockBaseEntity (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.premiumminds.billy.core.test.fixtures.MockBaseEntity is in unnamed module of loader 'app')\n[ERROR] TestProductBuilder.doTest:40->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockTaxEntity\nin 'reader', line 29, column 5:\n- !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestShippingPointBuilder.doTest:38->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 25, column 11:\naddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestSupplierBuilder.doTest:40->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockAddressEntity\nin 'reader', line 24, column 15:\nmainAddress : !!com.premiumminds.billy.core.te ...\n^\n[ERROR] TestTaxBuilder.doTestFlat:42->AbstractTest.createMockEntity:114 \u00bb Composer Global tag is not allowed: tag:yaml.org,2002:com.premiumminds.billy.core.test.fixtures.MockContextEntity\nin 'reader', line 29, column 11:\ncontext : !!com.premiumminds.billy.core.te ...\n^\n[INFO]\n[ERROR] Tests run: 20, Failures: 0, Errors: 20, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for billy 9.2.1-SNAPSHOT:\n[INFO]\n[INFO] billy .............................................. SUCCESS [ 2.449 s]\n[INFO] billy core ......................................... FAILURE [ 10.135 s]\n[INFO] billy core JPA ..................................... SKIPPED\n[INFO] billy GIN .......................................... SKIPPED\n[INFO] billy portugal (PT Pack) ........................... SKIPPED\n[INFO] billy spain (ES Pack) .............................. SKIPPED\n[INFO] billy france (FR Pack) ............................. SKIPPED\n[INFO] billy andorra (AD Pack) ............................ SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 12.837 s\n[INFO] Finished at: 2024-08-05T14:20:57Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.1.2:test (default-test) on project billy-core:\n[ERROR]\n[ERROR] Please refer to /mnt/repo/billy-core/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR] mvn <args> -rf :billy-core",
            "span_id": 14536445388028679920
        }
    ],
    "read_file": [
        {
            "input": "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java",
            "output": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(new TrustedTagInspector());\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 4225008738355086262
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}