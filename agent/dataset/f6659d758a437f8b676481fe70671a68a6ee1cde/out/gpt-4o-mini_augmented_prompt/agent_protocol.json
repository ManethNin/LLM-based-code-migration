{
    "validate_diffs": [
        {
            "input": "--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }",
            "output": "Diff Error: No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "error": "No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 16058615228918719629
        }
    ],
    "compile_maven": [
        {
            "input": "--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, No diff fences found in content. Make sure that the diff is fenced with ```diff on its own line. and is closed with ```",
            "span_id": 908083500025658796
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "import org.yaml.snakeyaml.constructor.Constructor;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "import org.yaml.snakeyaml.inspector.TrustedTagInspector;"
                                },
                                {
                                    "line_no": 37,
                                    "content": "import org.yaml.snakeyaml.nodes.Tag;"
                                }
                            ],
                            "error_texts": [
                                "[36,36] cannot find symbol\nsymbol: class TrustedTagInspector\nlocation: package org.yaml.snakeyaml.inspector\n",
                                "[36,36] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 5375253147703413097
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n    }\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "import org.yaml.snakeyaml.constructor.Constructor;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "import org.yaml.snakeyaml.inspector.TrustedTagInspector;"
                                },
                                {
                                    "line_no": 37,
                                    "content": "import org.yaml.snakeyaml.nodes.Tag;"
                                }
                            ],
                            "error_texts": [
                                "[36,36] cannot find symbol\nsymbol: class TrustedTagInspector\nlocation: package org.yaml.snakeyaml.inspector\n",
                                "[36,36] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 13220315643860025118
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "94": {
                            "lines": [
                                {
                                    "line_no": 93,
                                    "content": "}"
                                },
                                {
                                    "line_no": 94,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 95,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[94,1] class, interface, or enum expected\n"
                            ]
                        },
                        "96": {
                            "lines": [
                                {
                                    "line_no": 95,
                                    "content": ""
                                },
                                {
                                    "line_no": 96,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 97,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[96,9] class, interface, or enum expected\n"
                            ]
                        },
                        "98": {
                            "lines": [
                                {
                                    "line_no": 97,
                                    "content": ""
                                },
                                {
                                    "line_no": 98,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 99,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[98,1] class, interface, or enum expected\n"
                            ]
                        },
                        "100": {
                            "lines": [
                                {
                                    "line_no": 99,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 100,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 101,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[100,9] class, interface, or enum expected\n"
                            ]
                        },
                        "102": {
                            "lines": [
                                {
                                    "line_no": 101,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 102,
                                    "content": "}"
                                },
                                {
                                    "line_no": 103,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[102,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 12177154868922328178
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n    }\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "95": {
                            "lines": [
                                {
                                    "line_no": 94,
                                    "content": "}"
                                },
                                {
                                    "line_no": 95,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 96,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[95,1] class, interface, or enum expected\n"
                            ]
                        },
                        "97": {
                            "lines": [
                                {
                                    "line_no": 96,
                                    "content": ""
                                },
                                {
                                    "line_no": 97,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 98,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[97,9] class, interface, or enum expected\n"
                            ]
                        },
                        "99": {
                            "lines": [
                                {
                                    "line_no": 98,
                                    "content": ""
                                },
                                {
                                    "line_no": 99,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 100,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[99,1] class, interface, or enum expected\n"
                            ]
                        },
                        "101": {
                            "lines": [
                                {
                                    "line_no": 100,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 101,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 102,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[101,9] class, interface, or enum expected\n"
                            ]
                        },
                        "103": {
                            "lines": [
                                {
                                    "line_no": 102,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 103,
                                    "content": "}"
                                },
                                {
                                    "line_no": 104,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[103,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 3693481726711577719
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "96": {
                            "lines": [
                                {
                                    "line_no": 95,
                                    "content": "}"
                                },
                                {
                                    "line_no": 96,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 97,
                                    "content": "}};"
                                }
                            ],
                            "error_texts": [
                                "[96,13] class, interface, or enum expected\n"
                            ]
                        },
                        "97": {
                            "lines": [
                                {
                                    "line_no": 96,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 97,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 98,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[97,1] class, interface, or enum expected\n"
                            ]
                        },
                        "99": {
                            "lines": [
                                {
                                    "line_no": 98,
                                    "content": ""
                                },
                                {
                                    "line_no": 99,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 100,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[99,9] class, interface, or enum expected\n"
                            ]
                        },
                        "101": {
                            "lines": [
                                {
                                    "line_no": 100,
                                    "content": ""
                                },
                                {
                                    "line_no": 101,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 102,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[101,1] class, interface, or enum expected\n"
                            ]
                        },
                        "103": {
                            "lines": [
                                {
                                    "line_no": 102,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 103,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 104,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[103,9] class, interface, or enum expected\n"
                            ]
                        },
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 105,
                                    "content": "}"
                                },
                                {
                                    "line_no": 106,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[105,1] class, interface, or enum expected\n"
                            ]
                        },
                        "111": {
                            "lines": [
                                {
                                    "line_no": 110,
                                    "content": ""
                                },
                                {
                                    "line_no": 111,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 112,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[111,9] class, interface, or enum expected\n"
                            ]
                        },
                        "113": {
                            "lines": [
                                {
                                    "line_no": 112,
                                    "content": ""
                                },
                                {
                                    "line_no": 113,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 114,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[113,1] class, interface, or enum expected\n"
                            ]
                        },
                        "115": {
                            "lines": [
                                {
                                    "line_no": 114,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 115,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 116,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[115,9] class, interface, or enum expected\n"
                            ]
                        },
                        "117": {
                            "lines": [
                                {
                                    "line_no": 116,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 117,
                                    "content": "}"
                                },
                                {
                                    "line_no": 118,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[117,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 6492595231910227810
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n    }\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "98": {
                            "lines": [
                                {
                                    "line_no": 97,
                                    "content": "}"
                                },
                                {
                                    "line_no": 98,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 99,
                                    "content": "}};"
                                }
                            ],
                            "error_texts": [
                                "[98,13] class, interface, or enum expected\n"
                            ]
                        },
                        "99": {
                            "lines": [
                                {
                                    "line_no": 98,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 99,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 100,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[99,1] class, interface, or enum expected\n"
                            ]
                        },
                        "101": {
                            "lines": [
                                {
                                    "line_no": 100,
                                    "content": ""
                                },
                                {
                                    "line_no": 101,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 102,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[101,9] class, interface, or enum expected\n"
                            ]
                        },
                        "103": {
                            "lines": [
                                {
                                    "line_no": 102,
                                    "content": ""
                                },
                                {
                                    "line_no": 103,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 104,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[103,1] class, interface, or enum expected\n"
                            ]
                        },
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 106,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[105,9] class, interface, or enum expected\n"
                            ]
                        },
                        "107": {
                            "lines": [
                                {
                                    "line_no": 106,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 107,
                                    "content": "}"
                                },
                                {
                                    "line_no": 108,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[107,1] class, interface, or enum expected\n"
                            ]
                        },
                        "113": {
                            "lines": [
                                {
                                    "line_no": 112,
                                    "content": ""
                                },
                                {
                                    "line_no": 113,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 114,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[113,9] class, interface, or enum expected\n"
                            ]
                        },
                        "115": {
                            "lines": [
                                {
                                    "line_no": 114,
                                    "content": ""
                                },
                                {
                                    "line_no": 115,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 116,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[115,1] class, interface, or enum expected\n"
                            ]
                        },
                        "117": {
                            "lines": [
                                {
                                    "line_no": 116,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 117,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 118,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[117,9] class, interface, or enum expected\n"
                            ]
                        },
                        "119": {
                            "lines": [
                                {
                                    "line_no": 118,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 119,
                                    "content": "}"
                                },
                                {
                                    "line_no": 120,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[119,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 11364393518516426271
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "98": {
                            "lines": [
                                {
                                    "line_no": 97,
                                    "content": "}"
                                },
                                {
                                    "line_no": 98,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());"
                                },
                                {
                                    "line_no": 99,
                                    "content": "}};"
                                }
                            ],
                            "error_texts": [
                                "[98,13] class, interface, or enum expected\n"
                            ]
                        },
                        "99": {
                            "lines": [
                                {
                                    "line_no": 98,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());"
                                },
                                {
                                    "line_no": 99,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 100,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[99,1] class, interface, or enum expected\n"
                            ]
                        },
                        "101": {
                            "lines": [
                                {
                                    "line_no": 100,
                                    "content": ""
                                },
                                {
                                    "line_no": 101,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 102,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[101,9] class, interface, or enum expected\n"
                            ]
                        },
                        "103": {
                            "lines": [
                                {
                                    "line_no": 102,
                                    "content": ""
                                },
                                {
                                    "line_no": 103,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 104,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[103,1] class, interface, or enum expected\n"
                            ]
                        },
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 105,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 106,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[105,9] class, interface, or enum expected\n"
                            ]
                        },
                        "107": {
                            "lines": [
                                {
                                    "line_no": 106,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 107,
                                    "content": "}"
                                },
                                {
                                    "line_no": 108,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[107,1] class, interface, or enum expected\n"
                            ]
                        },
                        "112": {
                            "lines": [
                                {
                                    "line_no": 111,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 112,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 113,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[112,1] class, interface, or enum expected\n"
                            ]
                        },
                        "114": {
                            "lines": [
                                {
                                    "line_no": 113,
                                    "content": ""
                                },
                                {
                                    "line_no": 114,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 115,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[114,9] class, interface, or enum expected\n"
                            ]
                        },
                        "116": {
                            "lines": [
                                {
                                    "line_no": 115,
                                    "content": ""
                                },
                                {
                                    "line_no": 116,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 117,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[116,1] class, interface, or enum expected\n"
                            ]
                        },
                        "118": {
                            "lines": [
                                {
                                    "line_no": 117,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 118,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 119,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[118,9] class, interface, or enum expected\n"
                            ]
                        },
                        "120": {
                            "lines": [
                                {
                                    "line_no": 119,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 120,
                                    "content": "}"
                                },
                                {
                                    "line_no": 121,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[120,1] class, interface, or enum expected\n"
                            ]
                        },
                        "126": {
                            "lines": [
                                {
                                    "line_no": 125,
                                    "content": ""
                                },
                                {
                                    "line_no": 126,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 127,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[126,9] class, interface, or enum expected\n"
                            ]
                        },
                        "128": {
                            "lines": [
                                {
                                    "line_no": 127,
                                    "content": ""
                                },
                                {
                                    "line_no": 128,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 129,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[128,1] class, interface, or enum expected\n"
                            ]
                        },
                        "130": {
                            "lines": [
                                {
                                    "line_no": 129,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 130,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 131,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[130,9] class, interface, or enum expected\n"
                            ]
                        },
                        "132": {
                            "lines": [
                                {
                                    "line_no": 131,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 132,
                                    "content": "}"
                                },
                                {
                                    "line_no": 133,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[132,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 14121702178822969240
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n    }\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "99": {
                            "lines": [
                                {
                                    "line_no": 98,
                                    "content": "}"
                                },
                                {
                                    "line_no": 99,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());"
                                },
                                {
                                    "line_no": 100,
                                    "content": "}};"
                                }
                            ],
                            "error_texts": [
                                "[99,13] class, interface, or enum expected\n"
                            ]
                        },
                        "100": {
                            "lines": [
                                {
                                    "line_no": 99,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());"
                                },
                                {
                                    "line_no": 100,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 101,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[100,1] class, interface, or enum expected\n"
                            ]
                        },
                        "102": {
                            "lines": [
                                {
                                    "line_no": 101,
                                    "content": ""
                                },
                                {
                                    "line_no": 102,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 103,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[102,9] class, interface, or enum expected\n"
                            ]
                        },
                        "104": {
                            "lines": [
                                {
                                    "line_no": 103,
                                    "content": ""
                                },
                                {
                                    "line_no": 104,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 105,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[104,1] class, interface, or enum expected\n"
                            ]
                        },
                        "106": {
                            "lines": [
                                {
                                    "line_no": 105,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 107,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[106,9] class, interface, or enum expected\n"
                            ]
                        },
                        "108": {
                            "lines": [
                                {
                                    "line_no": 107,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 108,
                                    "content": "}"
                                },
                                {
                                    "line_no": 109,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[108,1] class, interface, or enum expected\n"
                            ]
                        },
                        "113": {
                            "lines": [
                                {
                                    "line_no": 112,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 113,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 114,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[113,1] class, interface, or enum expected\n"
                            ]
                        },
                        "115": {
                            "lines": [
                                {
                                    "line_no": 114,
                                    "content": ""
                                },
                                {
                                    "line_no": 115,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 116,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[115,9] class, interface, or enum expected\n"
                            ]
                        },
                        "117": {
                            "lines": [
                                {
                                    "line_no": 116,
                                    "content": ""
                                },
                                {
                                    "line_no": 117,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 118,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[117,1] class, interface, or enum expected\n"
                            ]
                        },
                        "119": {
                            "lines": [
                                {
                                    "line_no": 118,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 119,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 120,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[119,9] class, interface, or enum expected\n"
                            ]
                        },
                        "121": {
                            "lines": [
                                {
                                    "line_no": 120,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 121,
                                    "content": "}"
                                },
                                {
                                    "line_no": 122,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[121,1] class, interface, or enum expected\n"
                            ]
                        },
                        "127": {
                            "lines": [
                                {
                                    "line_no": 126,
                                    "content": ""
                                },
                                {
                                    "line_no": 127,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 128,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[127,9] class, interface, or enum expected\n"
                            ]
                        },
                        "129": {
                            "lines": [
                                {
                                    "line_no": 128,
                                    "content": ""
                                },
                                {
                                    "line_no": 129,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 130,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[129,1] class, interface, or enum expected\n"
                            ]
                        },
                        "131": {
                            "lines": [
                                {
                                    "line_no": 130,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 131,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 132,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[131,9] class, interface, or enum expected\n"
                            ]
                        },
                        "133": {
                            "lines": [
                                {
                                    "line_no": 132,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 133,
                                    "content": "}"
                                },
                                {
                                    "line_no": 134,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[133,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 17329889415061375438
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "100": {
                            "lines": [
                                {
                                    "line_no": 99,
                                    "content": "}"
                                },
                                {
                                    "line_no": 100,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 101,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[100,1] class, interface, or enum expected\n"
                            ]
                        },
                        "102": {
                            "lines": [
                                {
                                    "line_no": 101,
                                    "content": ""
                                },
                                {
                                    "line_no": 102,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 103,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[102,9] class, interface, or enum expected\n"
                            ]
                        },
                        "104": {
                            "lines": [
                                {
                                    "line_no": 103,
                                    "content": ""
                                },
                                {
                                    "line_no": 104,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 105,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[104,1] class, interface, or enum expected\n"
                            ]
                        },
                        "106": {
                            "lines": [
                                {
                                    "line_no": 105,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 106,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 107,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[106,9] class, interface, or enum expected\n"
                            ]
                        },
                        "108": {
                            "lines": [
                                {
                                    "line_no": 107,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 108,
                                    "content": "}"
                                },
                                {
                                    "line_no": 109,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[108,1] class, interface, or enum expected\n"
                            ]
                        },
                        "113": {
                            "lines": [
                                {
                                    "line_no": 112,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());"
                                },
                                {
                                    "line_no": 113,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 114,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[113,1] class, interface, or enum expected\n"
                            ]
                        },
                        "115": {
                            "lines": [
                                {
                                    "line_no": 114,
                                    "content": ""
                                },
                                {
                                    "line_no": 115,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 116,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[115,9] class, interface, or enum expected\n"
                            ]
                        },
                        "117": {
                            "lines": [
                                {
                                    "line_no": 116,
                                    "content": ""
                                },
                                {
                                    "line_no": 117,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 118,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[117,1] class, interface, or enum expected\n"
                            ]
                        },
                        "119": {
                            "lines": [
                                {
                                    "line_no": 118,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 119,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 120,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[119,9] class, interface, or enum expected\n"
                            ]
                        },
                        "121": {
                            "lines": [
                                {
                                    "line_no": 120,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 121,
                                    "content": "}"
                                },
                                {
                                    "line_no": 122,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[121,1] class, interface, or enum expected\n"
                            ]
                        },
                        "126": {
                            "lines": [
                                {
                                    "line_no": 125,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 126,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 127,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[126,1] class, interface, or enum expected\n"
                            ]
                        },
                        "128": {
                            "lines": [
                                {
                                    "line_no": 127,
                                    "content": ""
                                },
                                {
                                    "line_no": 128,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 129,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[128,9] class, interface, or enum expected\n"
                            ]
                        },
                        "130": {
                            "lines": [
                                {
                                    "line_no": 129,
                                    "content": ""
                                },
                                {
                                    "line_no": 130,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 131,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[130,1] class, interface, or enum expected\n"
                            ]
                        },
                        "132": {
                            "lines": [
                                {
                                    "line_no": 131,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 132,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 133,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[132,9] class, interface, or enum expected\n"
                            ]
                        },
                        "134": {
                            "lines": [
                                {
                                    "line_no": 133,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 134,
                                    "content": "}"
                                },
                                {
                                    "line_no": 135,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[134,1] class, interface, or enum expected\n"
                            ]
                        },
                        "140": {
                            "lines": [
                                {
                                    "line_no": 139,
                                    "content": ""
                                },
                                {
                                    "line_no": 140,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 141,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[140,9] class, interface, or enum expected\n"
                            ]
                        },
                        "142": {
                            "lines": [
                                {
                                    "line_no": 141,
                                    "content": ""
                                },
                                {
                                    "line_no": 142,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 143,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[142,1] class, interface, or enum expected\n"
                            ]
                        },
                        "144": {
                            "lines": [
                                {
                                    "line_no": 143,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 144,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 145,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[144,9] class, interface, or enum expected\n"
                            ]
                        },
                        "146": {
                            "lines": [
                                {
                                    "line_no": 145,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 146,
                                    "content": "}"
                                },
                                {
                                    "line_no": 147,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[146,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 4454280808863193706
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n    }\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "101": {
                            "lines": [
                                {
                                    "line_no": 100,
                                    "content": "}"
                                },
                                {
                                    "line_no": 101,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 102,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[101,1] class, interface, or enum expected\n"
                            ]
                        },
                        "103": {
                            "lines": [
                                {
                                    "line_no": 102,
                                    "content": ""
                                },
                                {
                                    "line_no": 103,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 104,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[103,9] class, interface, or enum expected\n"
                            ]
                        },
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": ""
                                },
                                {
                                    "line_no": 105,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 106,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[105,1] class, interface, or enum expected\n"
                            ]
                        },
                        "107": {
                            "lines": [
                                {
                                    "line_no": 106,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 107,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 108,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[107,9] class, interface, or enum expected\n"
                            ]
                        },
                        "109": {
                            "lines": [
                                {
                                    "line_no": 108,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 109,
                                    "content": "}"
                                },
                                {
                                    "line_no": 110,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[109,1] class, interface, or enum expected\n"
                            ]
                        },
                        "114": {
                            "lines": [
                                {
                                    "line_no": 113,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());"
                                },
                                {
                                    "line_no": 114,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 115,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[114,1] class, interface, or enum expected\n"
                            ]
                        },
                        "116": {
                            "lines": [
                                {
                                    "line_no": 115,
                                    "content": ""
                                },
                                {
                                    "line_no": 116,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 117,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[116,9] class, interface, or enum expected\n"
                            ]
                        },
                        "118": {
                            "lines": [
                                {
                                    "line_no": 117,
                                    "content": ""
                                },
                                {
                                    "line_no": 118,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 119,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[118,1] class, interface, or enum expected\n"
                            ]
                        },
                        "120": {
                            "lines": [
                                {
                                    "line_no": 119,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 120,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 121,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[120,9] class, interface, or enum expected\n"
                            ]
                        },
                        "122": {
                            "lines": [
                                {
                                    "line_no": 121,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 122,
                                    "content": "}"
                                },
                                {
                                    "line_no": 123,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[122,1] class, interface, or enum expected\n"
                            ]
                        },
                        "127": {
                            "lines": [
                                {
                                    "line_no": 126,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 127,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 128,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[127,1] class, interface, or enum expected\n"
                            ]
                        },
                        "129": {
                            "lines": [
                                {
                                    "line_no": 128,
                                    "content": ""
                                },
                                {
                                    "line_no": 129,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 130,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[129,9] class, interface, or enum expected\n"
                            ]
                        },
                        "131": {
                            "lines": [
                                {
                                    "line_no": 130,
                                    "content": ""
                                },
                                {
                                    "line_no": 131,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 132,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[131,1] class, interface, or enum expected\n"
                            ]
                        },
                        "133": {
                            "lines": [
                                {
                                    "line_no": 132,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 133,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 134,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[133,9] class, interface, or enum expected\n"
                            ]
                        },
                        "135": {
                            "lines": [
                                {
                                    "line_no": 134,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 135,
                                    "content": "}"
                                },
                                {
                                    "line_no": 136,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[135,1] class, interface, or enum expected\n"
                            ]
                        },
                        "141": {
                            "lines": [
                                {
                                    "line_no": 140,
                                    "content": ""
                                },
                                {
                                    "line_no": 141,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 142,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[141,9] class, interface, or enum expected\n"
                            ]
                        },
                        "143": {
                            "lines": [
                                {
                                    "line_no": 142,
                                    "content": ""
                                },
                                {
                                    "line_no": 143,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 144,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[143,1] class, interface, or enum expected\n"
                            ]
                        },
                        "145": {
                            "lines": [
                                {
                                    "line_no": 144,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 145,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 146,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[145,9] class, interface, or enum expected\n"
                            ]
                        },
                        "147": {
                            "lines": [
                                {
                                    "line_no": 146,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 147,
                                    "content": "}"
                                },
                                {
                                    "line_no": 148,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[147,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 12773941360533231630
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "102": {
                            "lines": [
                                {
                                    "line_no": 101,
                                    "content": "}"
                                },
                                {
                                    "line_no": 102,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 103,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[102,1] class, interface, or enum expected\n"
                            ]
                        },
                        "104": {
                            "lines": [
                                {
                                    "line_no": 103,
                                    "content": ""
                                },
                                {
                                    "line_no": 104,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 105,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[104,9] class, interface, or enum expected\n"
                            ]
                        },
                        "106": {
                            "lines": [
                                {
                                    "line_no": 105,
                                    "content": ""
                                },
                                {
                                    "line_no": 106,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 107,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[106,1] class, interface, or enum expected\n"
                            ]
                        },
                        "108": {
                            "lines": [
                                {
                                    "line_no": 107,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 108,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 109,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[108,9] class, interface, or enum expected\n"
                            ]
                        },
                        "110": {
                            "lines": [
                                {
                                    "line_no": 109,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 110,
                                    "content": "}"
                                },
                                {
                                    "line_no": 111,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[110,1] class, interface, or enum expected\n"
                            ]
                        },
                        "116": {
                            "lines": [
                                {
                                    "line_no": 115,
                                    "content": ""
                                },
                                {
                                    "line_no": 116,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 117,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[116,9] class, interface, or enum expected\n"
                            ]
                        },
                        "118": {
                            "lines": [
                                {
                                    "line_no": 117,
                                    "content": ""
                                },
                                {
                                    "line_no": 118,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 119,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[118,1] class, interface, or enum expected\n"
                            ]
                        },
                        "120": {
                            "lines": [
                                {
                                    "line_no": 119,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 120,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 121,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[120,9] class, interface, or enum expected\n"
                            ]
                        },
                        "122": {
                            "lines": [
                                {
                                    "line_no": 121,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 122,
                                    "content": "}"
                                },
                                {
                                    "line_no": 123,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[122,1] class, interface, or enum expected\n"
                            ]
                        },
                        "127": {
                            "lines": [
                                {
                                    "line_no": 126,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());"
                                },
                                {
                                    "line_no": 127,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 128,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[127,1] class, interface, or enum expected\n"
                            ]
                        },
                        "129": {
                            "lines": [
                                {
                                    "line_no": 128,
                                    "content": ""
                                },
                                {
                                    "line_no": 129,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 130,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[129,9] class, interface, or enum expected\n"
                            ]
                        },
                        "131": {
                            "lines": [
                                {
                                    "line_no": 130,
                                    "content": ""
                                },
                                {
                                    "line_no": 131,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 132,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[131,1] class, interface, or enum expected\n"
                            ]
                        },
                        "133": {
                            "lines": [
                                {
                                    "line_no": 132,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 133,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 134,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[133,9] class, interface, or enum expected\n"
                            ]
                        },
                        "135": {
                            "lines": [
                                {
                                    "line_no": 134,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 135,
                                    "content": "}"
                                },
                                {
                                    "line_no": 136,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[135,1] class, interface, or enum expected\n"
                            ]
                        },
                        "140": {
                            "lines": [
                                {
                                    "line_no": 139,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 140,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 141,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[140,1] class, interface, or enum expected\n"
                            ]
                        },
                        "142": {
                            "lines": [
                                {
                                    "line_no": 141,
                                    "content": ""
                                },
                                {
                                    "line_no": 142,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 143,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[142,9] class, interface, or enum expected\n"
                            ]
                        },
                        "144": {
                            "lines": [
                                {
                                    "line_no": 143,
                                    "content": ""
                                },
                                {
                                    "line_no": 144,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 145,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[144,1] class, interface, or enum expected\n"
                            ]
                        },
                        "146": {
                            "lines": [
                                {
                                    "line_no": 145,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 146,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 147,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[146,9] class, interface, or enum expected\n"
                            ]
                        },
                        "148": {
                            "lines": [
                                {
                                    "line_no": 147,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 148,
                                    "content": "}"
                                },
                                {
                                    "line_no": 149,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[148,1] class, interface, or enum expected\n"
                            ]
                        },
                        "154": {
                            "lines": [
                                {
                                    "line_no": 153,
                                    "content": ""
                                },
                                {
                                    "line_no": 154,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 155,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[154,9] class, interface, or enum expected\n"
                            ]
                        },
                        "156": {
                            "lines": [
                                {
                                    "line_no": 155,
                                    "content": ""
                                },
                                {
                                    "line_no": 156,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 157,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[156,1] class, interface, or enum expected\n"
                            ]
                        },
                        "158": {
                            "lines": [
                                {
                                    "line_no": 157,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 158,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 159,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[158,9] class, interface, or enum expected\n"
                            ]
                        },
                        "160": {
                            "lines": [
                                {
                                    "line_no": 159,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 160,
                                    "content": "}"
                                },
                                {
                                    "line_no": 161,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[160,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 12963004491790658456
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n    }\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "103": {
                            "lines": [
                                {
                                    "line_no": 102,
                                    "content": "}"
                                },
                                {
                                    "line_no": 103,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 104,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[103,1] class, interface, or enum expected\n"
                            ]
                        },
                        "105": {
                            "lines": [
                                {
                                    "line_no": 104,
                                    "content": ""
                                },
                                {
                                    "line_no": 105,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 106,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[105,9] class, interface, or enum expected\n"
                            ]
                        },
                        "107": {
                            "lines": [
                                {
                                    "line_no": 106,
                                    "content": ""
                                },
                                {
                                    "line_no": 107,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 108,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[107,1] class, interface, or enum expected\n"
                            ]
                        },
                        "109": {
                            "lines": [
                                {
                                    "line_no": 108,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 109,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 110,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[109,9] class, interface, or enum expected\n"
                            ]
                        },
                        "111": {
                            "lines": [
                                {
                                    "line_no": 110,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 111,
                                    "content": "}"
                                },
                                {
                                    "line_no": 112,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[111,1] class, interface, or enum expected\n"
                            ]
                        },
                        "117": {
                            "lines": [
                                {
                                    "line_no": 116,
                                    "content": ""
                                },
                                {
                                    "line_no": 117,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 118,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[117,9] class, interface, or enum expected\n"
                            ]
                        },
                        "119": {
                            "lines": [
                                {
                                    "line_no": 118,
                                    "content": ""
                                },
                                {
                                    "line_no": 119,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 120,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[119,1] class, interface, or enum expected\n"
                            ]
                        },
                        "121": {
                            "lines": [
                                {
                                    "line_no": 120,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 121,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 122,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[121,9] class, interface, or enum expected\n"
                            ]
                        },
                        "123": {
                            "lines": [
                                {
                                    "line_no": 122,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 123,
                                    "content": "}"
                                },
                                {
                                    "line_no": 124,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[123,1] class, interface, or enum expected\n"
                            ]
                        },
                        "128": {
                            "lines": [
                                {
                                    "line_no": 127,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());"
                                },
                                {
                                    "line_no": 128,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 129,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[128,1] class, interface, or enum expected\n"
                            ]
                        },
                        "130": {
                            "lines": [
                                {
                                    "line_no": 129,
                                    "content": ""
                                },
                                {
                                    "line_no": 130,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 131,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[130,9] class, interface, or enum expected\n"
                            ]
                        },
                        "132": {
                            "lines": [
                                {
                                    "line_no": 131,
                                    "content": ""
                                },
                                {
                                    "line_no": 132,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 133,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[132,1] class, interface, or enum expected\n"
                            ]
                        },
                        "134": {
                            "lines": [
                                {
                                    "line_no": 133,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 134,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 135,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[134,9] class, interface, or enum expected\n"
                            ]
                        },
                        "136": {
                            "lines": [
                                {
                                    "line_no": 135,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 136,
                                    "content": "}"
                                },
                                {
                                    "line_no": 137,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[136,1] class, interface, or enum expected\n"
                            ]
                        },
                        "141": {
                            "lines": [
                                {
                                    "line_no": 140,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 141,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 142,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[141,1] class, interface, or enum expected\n"
                            ]
                        },
                        "143": {
                            "lines": [
                                {
                                    "line_no": 142,
                                    "content": ""
                                },
                                {
                                    "line_no": 143,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 144,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[143,9] class, interface, or enum expected\n"
                            ]
                        },
                        "145": {
                            "lines": [
                                {
                                    "line_no": 144,
                                    "content": ""
                                },
                                {
                                    "line_no": 145,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 146,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[145,1] class, interface, or enum expected\n"
                            ]
                        },
                        "147": {
                            "lines": [
                                {
                                    "line_no": 146,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 147,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 148,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[147,9] class, interface, or enum expected\n"
                            ]
                        },
                        "149": {
                            "lines": [
                                {
                                    "line_no": 148,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 149,
                                    "content": "}"
                                },
                                {
                                    "line_no": 150,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[149,1] class, interface, or enum expected\n"
                            ]
                        },
                        "155": {
                            "lines": [
                                {
                                    "line_no": 154,
                                    "content": ""
                                },
                                {
                                    "line_no": 155,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 156,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[155,9] class, interface, or enum expected\n"
                            ]
                        },
                        "157": {
                            "lines": [
                                {
                                    "line_no": 156,
                                    "content": ""
                                },
                                {
                                    "line_no": 157,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 158,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[157,1] class, interface, or enum expected\n"
                            ]
                        },
                        "159": {
                            "lines": [
                                {
                                    "line_no": 158,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 159,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 160,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[159,9] class, interface, or enum expected\n"
                            ]
                        },
                        "161": {
                            "lines": [
                                {
                                    "line_no": 160,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 161,
                                    "content": "}"
                                },
                                {
                                    "line_no": 162,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[161,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 17368013033087728471
        },
        {
            "input": "```diff\n--- billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n+++ billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@ -12,7 +12,6 @@\n import org.yaml.snakeyaml.nodes.Tag;\n import org.yaml.snakeyaml.representer.Representer;\n \n import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n import java.time.ZoneId;\n \n public class AbstractTest {\n \n     private static Injector injector;\n     protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n \n     @BeforeAll\n     public static void setUpClass() {\n         AbstractTest.injector =\n                 Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n     }\n \n     public <T> T getInstance(Class<T> clazz) {\n         return AbstractTest.injector.getInstance(clazz);\n     }\n \n     public <T> T getMock(Class<T> clazz) {\n         return Mockito.mock(clazz);\n     }\n \n     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n         final LoaderOptions loadingConfig = new LoaderOptions();\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(null);\n \n         final Representer representer = new Representer(new DumperOptions());\n         final Tag zoneIdTag = new Tag(\"!ZoneId\");\n         representer.addClassTag(ZoneId.class, zoneIdTag);\n         final Tag localDateTag = new Tag(\"!LocalDate\");\n         representer.addClassTag(LocalDate.class, localDateTag);\n \n         final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n             this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n             this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n \n             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n         }};\n \n         Yaml yaml = new Yaml(constructor, representer);\n \n         try {\n             return yaml.load(new BufferedReader(new FileReader(path)));\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "class, interface, or enum expected\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n        loadingConfig.setTagInspector(null);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}\n}};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\ntry {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n}\n}\n\n}"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "104": {
                            "lines": [
                                {
                                    "line_no": 103,
                                    "content": "}"
                                },
                                {
                                    "line_no": 104,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 105,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[104,1] class, interface, or enum expected\n"
                            ]
                        },
                        "106": {
                            "lines": [
                                {
                                    "line_no": 105,
                                    "content": ""
                                },
                                {
                                    "line_no": 106,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 107,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[106,9] class, interface, or enum expected\n"
                            ]
                        },
                        "108": {
                            "lines": [
                                {
                                    "line_no": 107,
                                    "content": ""
                                },
                                {
                                    "line_no": 108,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 109,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[108,1] class, interface, or enum expected\n"
                            ]
                        },
                        "110": {
                            "lines": [
                                {
                                    "line_no": 109,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 110,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 111,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[110,9] class, interface, or enum expected\n"
                            ]
                        },
                        "112": {
                            "lines": [
                                {
                                    "line_no": 111,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 112,
                                    "content": "}"
                                },
                                {
                                    "line_no": 113,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[112,1] class, interface, or enum expected\n"
                            ]
                        },
                        "118": {
                            "lines": [
                                {
                                    "line_no": 117,
                                    "content": ""
                                },
                                {
                                    "line_no": 118,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 119,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[118,9] class, interface, or enum expected\n"
                            ]
                        },
                        "120": {
                            "lines": [
                                {
                                    "line_no": 119,
                                    "content": ""
                                },
                                {
                                    "line_no": 120,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 121,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[120,1] class, interface, or enum expected\n"
                            ]
                        },
                        "122": {
                            "lines": [
                                {
                                    "line_no": 121,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 122,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 123,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[122,9] class, interface, or enum expected\n"
                            ]
                        },
                        "124": {
                            "lines": [
                                {
                                    "line_no": 123,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 124,
                                    "content": "}"
                                },
                                {
                                    "line_no": 125,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[124,1] class, interface, or enum expected\n"
                            ]
                        },
                        "130": {
                            "lines": [
                                {
                                    "line_no": 129,
                                    "content": ""
                                },
                                {
                                    "line_no": 130,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 131,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[130,9] class, interface, or enum expected\n"
                            ]
                        },
                        "132": {
                            "lines": [
                                {
                                    "line_no": 131,
                                    "content": ""
                                },
                                {
                                    "line_no": 132,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 133,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[132,1] class, interface, or enum expected\n"
                            ]
                        },
                        "134": {
                            "lines": [
                                {
                                    "line_no": 133,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 134,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 135,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[134,9] class, interface, or enum expected\n"
                            ]
                        },
                        "136": {
                            "lines": [
                                {
                                    "line_no": 135,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 136,
                                    "content": "}"
                                },
                                {
                                    "line_no": 137,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[136,1] class, interface, or enum expected\n"
                            ]
                        },
                        "141": {
                            "lines": [
                                {
                                    "line_no": 140,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());"
                                },
                                {
                                    "line_no": 141,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 142,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[141,1] class, interface, or enum expected\n"
                            ]
                        },
                        "143": {
                            "lines": [
                                {
                                    "line_no": 142,
                                    "content": ""
                                },
                                {
                                    "line_no": 143,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 144,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[143,9] class, interface, or enum expected\n"
                            ]
                        },
                        "145": {
                            "lines": [
                                {
                                    "line_no": 144,
                                    "content": ""
                                },
                                {
                                    "line_no": 145,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 146,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[145,1] class, interface, or enum expected\n"
                            ]
                        },
                        "147": {
                            "lines": [
                                {
                                    "line_no": 146,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 147,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 148,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[147,9] class, interface, or enum expected\n"
                            ]
                        },
                        "149": {
                            "lines": [
                                {
                                    "line_no": 148,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 149,
                                    "content": "}"
                                },
                                {
                                    "line_no": 150,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[149,1] class, interface, or enum expected\n"
                            ]
                        },
                        "154": {
                            "lines": [
                                {
                                    "line_no": 153,
                                    "content": "            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());"
                                },
                                {
                                    "line_no": 154,
                                    "content": "}};"
                                },
                                {
                                    "line_no": 155,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[154,1] class, interface, or enum expected\n"
                            ]
                        },
                        "156": {
                            "lines": [
                                {
                                    "line_no": 155,
                                    "content": ""
                                },
                                {
                                    "line_no": 156,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 157,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[156,9] class, interface, or enum expected\n"
                            ]
                        },
                        "158": {
                            "lines": [
                                {
                                    "line_no": 157,
                                    "content": ""
                                },
                                {
                                    "line_no": 158,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 159,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[158,1] class, interface, or enum expected\n"
                            ]
                        },
                        "160": {
                            "lines": [
                                {
                                    "line_no": 159,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 160,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 161,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[160,9] class, interface, or enum expected\n"
                            ]
                        },
                        "162": {
                            "lines": [
                                {
                                    "line_no": 161,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 162,
                                    "content": "}"
                                },
                                {
                                    "line_no": 163,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[162,1] class, interface, or enum expected\n"
                            ]
                        },
                        "168": {
                            "lines": [
                                {
                                    "line_no": 167,
                                    "content": ""
                                },
                                {
                                    "line_no": 168,
                                    "content": "        Yaml yaml = new Yaml(constructor, representer);"
                                },
                                {
                                    "line_no": 169,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[168,9] class, interface, or enum expected\n"
                            ]
                        },
                        "170": {
                            "lines": [
                                {
                                    "line_no": 169,
                                    "content": ""
                                },
                                {
                                    "line_no": 170,
                                    "content": "try {"
                                },
                                {
                                    "line_no": 171,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                }
                            ],
                            "error_texts": [
                                "[170,1] class, interface, or enum expected\n"
                            ]
                        },
                        "172": {
                            "lines": [
                                {
                                    "line_no": 171,
                                    "content": "            return yaml.load(new BufferedReader(new FileReader(path)));"
                                },
                                {
                                    "line_no": 172,
                                    "content": "        } catch (FileNotFoundException e) {"
                                },
                                {
                                    "line_no": 173,
                                    "content": "            throw new RuntimeException(e);"
                                }
                            ],
                            "error_texts": [
                                "[172,9] class, interface, or enum expected\n"
                            ]
                        },
                        "174": {
                            "lines": [
                                {
                                    "line_no": 173,
                                    "content": "            throw new RuntimeException(e);"
                                },
                                {
                                    "line_no": 174,
                                    "content": "}"
                                },
                                {
                                    "line_no": 175,
                                    "content": "}"
                                }
                            ],
                            "error_texts": [
                                "[174,1] class, interface, or enum expected\n"
                            ]
                        }
                    }
                }
            },
            "error": "class, interface, or enum expected\n",
            "span_id": 2181977246707140530
        }
    ],
    "read_file": [
        {
            "input": "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java",
            "output": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(new TrustedTagInspector());\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 7573317979304120662
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}