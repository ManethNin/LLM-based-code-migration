diff --git a/billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java b/billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java
index ed40e5fb..cc8cb5a2 100644
--- a/billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java
+++ b/billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java
@@ -63,7 +63,19 @@ public class AbstractTest {
 
     public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {
         final LoaderOptions loadingConfig = new LoaderOptions();
-        loadingConfig.setTagInspector(new TrustedTagInspector());
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
+        loadingConfig.setTagInspector(null);
 
         final Representer representer = new Representer(new DumperOptions());
         final Tag zoneIdTag = new Tag("!ZoneId");
@@ -89,3 +101,77 @@ public class AbstractTest {
     }
 
 }
+}};
+
+        Yaml yaml = new Yaml(constructor, representer);
+
+try {
+            return yaml.load(new BufferedReader(new FileReader(path)));
+        } catch (FileNotFoundException e) {
+            throw new RuntimeException(e);
+}
+}
+
+}
+}};
+
+        Yaml yaml = new Yaml(constructor, representer);
+
+try {
+            return yaml.load(new BufferedReader(new FileReader(path)));
+        } catch (FileNotFoundException e) {
+            throw new RuntimeException(e);
+}
+}
+
+}
+}};
+
+        Yaml yaml = new Yaml(constructor, representer);
+
+try {
+            return yaml.load(new BufferedReader(new FileReader(path)));
+        } catch (FileNotFoundException e) {
+            throw new RuntimeException(e);
+}
+}
+
+}
+            this.yamlConstructors.put(localDateTag, new JavaZoneIdConstruct());
+}};
+
+        Yaml yaml = new Yaml(constructor, representer);
+
+try {
+            return yaml.load(new BufferedReader(new FileReader(path)));
+        } catch (FileNotFoundException e) {
+            throw new RuntimeException(e);
+}
+}
+
+}
+            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
+}};
+
+        Yaml yaml = new Yaml(constructor, representer);
+
+try {
+            return yaml.load(new BufferedReader(new FileReader(path)));
+        } catch (FileNotFoundException e) {
+            throw new RuntimeException(e);
+}
+}
+
+}
+}};
+
+        Yaml yaml = new Yaml(constructor, representer);
+
+try {
+            return yaml.load(new BufferedReader(new FileReader(path)));
+        } catch (FileNotFoundException e) {
+            throw new RuntimeException(e);
+}
+}
+
+}
\ No newline at end of file