{
    "validate_diffs": [
        {
            "input": "```diff\nbilly-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@\n import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n+\n import org.yaml.snakeyaml.inspector.TagInspector;\n@@\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(TagInspector.TRUSTED_TAGS);\n```",
            "output": "{'billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java': '/*\\n * Copyright (C) 2017 Premium Minds.\\n *\\n * This file is part of billy core.\\n *\\n * billy core is free software: you can redistribute it and/or modify it under\\n * the terms of the GNU Lesser General Public License as published by the Free\\n * Software Foundation, either version 3 of the License, or (at your option) any\\n * later version.\\n *\\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU Lesser General Public License\\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\\n */\\npackage com.premiumminds.billy.core.test;\\n\\nimport com.google.inject.Guice;\\nimport com.google.inject.Injector;\\nimport com.google.inject.util.Modules;\\nimport com.premiumminds.billy.core.CoreDependencyModule;\\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\\nimport java.time.LocalDate;\\nimport org.junit.jupiter.api.BeforeAll;\\nimport org.mockito.Mockito;\\nimport org.yaml.snakeyaml.DumperOptions;\\nimport org.yaml.snakeyaml.LoaderOptions;\\nimport org.yaml.snakeyaml.TypeDescription;\\nimport org.yaml.snakeyaml.Yaml;\\nimport org.yaml.snakeyaml.constructor.Constructor;\\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\\n\\nimport org.yaml.snakeyaml.nodes.Tag;\\nimport org.yaml.snakeyaml.representer.Representer;\\n\\nimport java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.FileReader;\\nimport java.time.ZoneId;\\n\\npublic class AbstractTest {\\n\\n    private static Injector injector;\\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\\n\\n    @BeforeAll\\n    public static void setUpClass() {\\n        AbstractTest.injector =\\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\\n    }\\n\\n    public <T> T getInstance(Class<T> clazz) {\\n        return AbstractTest.injector.getInstance(clazz);\\n    }\\n\\n    public <T> T getMock(Class<T> clazz) {\\n        return Mockito.mock(clazz);\\n    }\\n\\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\\n        final LoaderOptions loadingConfig = new LoaderOptions();\\n        loadingConfig.setTagInspector(TagInspector.TRUSTED_TAGS);\\n\\n        final Representer representer = new Representer(new DumperOptions());\\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\\n        representer.addClassTag(ZoneId.class, zoneIdTag);\\n        final Tag localDateTag = new Tag(\"!LocalDate\");\\n        representer.addClassTag(LocalDate.class, localDateTag);\\n\\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\\n\\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\\n        }};\\n\\n        Yaml yaml = new Yaml(constructor, representer);\\n\\n        try {\\n            return yaml.load(new BufferedReader(new FileReader(path)));\\n        } catch (FileNotFoundException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n}\\n'}",
            "error": "",
            "span_id": 11520054018088018148
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\nbilly-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@\n import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n+\n import org.yaml.snakeyaml.inspector.TagInspector;\n@@\n-        loadingConfig.setTagInspector(new TrustedTagInspector());\n+        loadingConfig.setTagInspector(TagInspector.TRUSTED_TAGS);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\n\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(TagInspector.TRUSTED_TAGS);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "import org.yaml.snakeyaml.constructor.Constructor;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "import org.yaml.snakeyaml.inspector.TrustedTagInspector;"
                                },
                                {
                                    "line_no": 37,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[36,36] cannot find symbol\n",
                                "[36,36] cannot find symbol\nsymbol: class TrustedTagInspector\nlocation: package org.yaml.snakeyaml.inspector\n"
                            ]
                        },
                        "67": {
                            "lines": [
                                {
                                    "line_no": 66,
                                    "content": "        final LoaderOptions loadingConfig = new LoaderOptions();"
                                },
                                {
                                    "line_no": 67,
                                    "content": "        loadingConfig.setTagInspector(TagInspector.TRUSTED_TAGS);"
                                },
                                {
                                    "line_no": 68,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[67,39] cannot find symbol\nsymbol: variable TagInspector\nlocation: class com.premiumminds.billy.core.test.AbstractTest\n",
                                "[67,39] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 395888959829918859
        },
        {
            "input": "```diff\nbilly-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java\n@@\n-import org.yaml.snakeyaml.inspector.TrustedTagInspector;\n+\nimport org.yaml.snakeyaml.inspector.TagInspector;\n@@\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\n\n\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(TagInspector.TRUSTED_TAGS);\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java": {
                        "67": {
                            "lines": [
                                {
                                    "line_no": 66,
                                    "content": "        final LoaderOptions loadingConfig = new LoaderOptions();"
                                },
                                {
                                    "line_no": 67,
                                    "content": "        loadingConfig.setTagInspector(TagInspector.TRUSTED_TAGS);"
                                },
                                {
                                    "line_no": 68,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[67,39] cannot find symbol\nsymbol: variable TagInspector\nlocation: class com.premiumminds.billy.core.test.AbstractTest\n",
                                "[67,39] cannot find symbol\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 11336848939590341212
        }
    ],
    "read_file": [
        {
            "input": "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java",
            "output": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(new TrustedTagInspector());\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 13673942886806771518
        },
        {
            "input": "billy-core/pom.xml",
            "output": "<!--\n  ~ Copyright (C) 2013 Premium Minds.\n  ~\n  ~ This file is part of billy-core.\n  ~\n  ~ billy-core is free software: you can redistribute it and/or modify\n  ~ it under the terms of the GNU Lesser General Public License as published\n  ~ by the Free Software Foundation, either version 3 of the License, or\n  ~ (at your option) any later version.\n  ~\n  ~ billy-core is distributed in the hope that it will be useful,\n  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of\n  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  ~ GNU Lesser General Public License for more details.\n  ~\n  ~ You should have received a copy of the GNU Lesser General Public License\n  ~ along with billy-core.  If not, see <http://www.gnu.org/licenses />.\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<artifactId>billy-core</artifactId>\n\t<name>billy core</name>\n\t<description>A project to aid in dealing with financial data</description>\n\n\t<parent>\n\t\t<groupId>com.premiumminds</groupId>\n\t\t<artifactId>billy</artifactId>\n\t\t<version>9.2.1-SNAPSHOT</version>\n\t</parent>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<main.dir>${project.parent.basedir}</main.dir>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>jakarta.persistence</groupId>\n\t\t\t<artifactId>jakarta.persistence-api</artifactId>\n\t\t\t<version>2.2.3</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\n\t\t<!-- GUICE -->\n\t\t<dependency>\n\t\t\t<groupId>com.google.inject</groupId>\n\t\t\t<artifactId>guice</artifactId>\n\t\t</dependency>\n\n\t\t<!-- VALIDATION -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-lang3</artifactId>\n\t\t\t<version>3.13.0</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-api</artifactId>\n\t\t</dependency>\n\n\t\t<!-- JUNIT -->\n\t\t<dependency>\n\t\t\t<groupId>org.junit.jupiter</groupId>\n\t\t\t<artifactId>junit-jupiter-engine</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mockito</groupId>\n\t\t\t<artifactId>mockito-core</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- SnakeYaml -->\n\t\t<dependency>\n\t\t\t<groupId>org.yaml</groupId>\n\t\t\t<artifactId>snakeyaml</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<archive>\n\t\t\t\t\t\t<manifestEntries>\n\t\t\t\t\t\t\t<Automatic-Module-Name>com.premiumminds.billy.core</Automatic-Module-Name>\n\t\t\t\t\t\t</manifestEntries>\n\t\t\t\t\t</archive>\n\t\t\t\t</configuration>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>test-jar</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n",
            "error": "",
            "span_id": 12107977970854481598
        },
        {
            "input": "billy-core/src/test/java/com/premiumminds/billy/core/test/fixtures/JavaLocalDateConstruct.java",
            "output": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test.fixtures;\n\nimport java.time.LocalDate;\nimport org.yaml.snakeyaml.constructor.AbstractConstruct;\nimport org.yaml.snakeyaml.error.YAMLException;\nimport org.yaml.snakeyaml.nodes.Node;\nimport org.yaml.snakeyaml.nodes.ScalarNode;\n\npublic class JavaLocalDateConstruct extends AbstractConstruct {\n\n    @Override\n    public Object construct(final Node node) {\n        ScalarNode snode = (ScalarNode) node;\n        try {\n            return LocalDate.parse(snode.getValue());\n        } catch (IllegalAccessError ignored) {\n        }\n\n        throw new YAMLException(String.format(\n            \"Can't construct a java object for scalar %s (node value: %s)\",\n            node.getTag(),\n            snode.getValue()));\n    }\n}\n",
            "error": "",
            "span_id": 5887507538166087983
        },
        {
            "input": "billy-core/src/test/java/com/premiumminds/billy/core/test/fixtures/JavaZoneIdConstruct.java",
            "output": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test.fixtures;\n\nimport org.yaml.snakeyaml.constructor.AbstractConstruct;\nimport org.yaml.snakeyaml.error.YAMLException;\nimport org.yaml.snakeyaml.nodes.Node;\nimport org.yaml.snakeyaml.nodes.ScalarNode;\n\nimport java.time.ZoneId;\n\npublic class JavaZoneIdConstruct extends AbstractConstruct {\n\n    @Override\n    public Object construct(Node node) {\n        ScalarNode snode = (ScalarNode) node;\n        try {\n            return ZoneId.of(snode.getValue());\n        } catch (IllegalAccessError e) {\n            throw new YAMLException(String.format(\n                    \"Can't construct a java object for scalar %s (node value: %s)\",\n                    node.getTag(),\n                    snode.getValue()), e);\n        }\n    }\n\n}\n\n",
            "error": "",
            "span_id": 16828626845677857722
        },
        {
            "input": "billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java",
            "output": "/*\n * Copyright (C) 2017 Premium Minds.\n *\n * This file is part of billy core.\n *\n * billy core is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * billy core is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with billy core. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.premiumminds.billy.core.test;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.util.Modules;\nimport com.premiumminds.billy.core.CoreDependencyModule;\nimport com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;\nimport com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;\nimport com.premiumminds.billy.core.test.fixtures.MockBaseEntity;\nimport java.time.LocalDate;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.Mockito;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.LoaderOptions;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.inspector.TrustedTagInspector;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.time.ZoneId;\n\npublic class AbstractTest {\n\n    private static Injector injector;\n    protected final static String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    @BeforeAll\n    public static void setUpClass() {\n        AbstractTest.injector =\n                Guice.createInjector(Modules.override(new CoreDependencyModule()).with(new MockDependencyModule()));\n    }\n\n    public <T> T getInstance(Class<T> clazz) {\n        return AbstractTest.injector.getInstance(clazz);\n    }\n\n    public <T> T getMock(Class<T> clazz) {\n        return Mockito.mock(clazz);\n    }\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(new TrustedTagInspector());\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n",
            "error": "",
            "span_id": 13488305600624307198
        },
        {
            "input": "billy-core/pom.xml",
            "output": "<!--\n  ~ Copyright (C) 2013 Premium Minds.\n  ~\n  ~ This file is part of billy-core.\n  ~\n  ~ billy-core is free software: you can redistribute it and/or modify\n  ~ it under the terms of the GNU Lesser General Public License as published\n  ~ by the Free Software Foundation, either version 3 of the License, or\n  ~ (at your option) any later version.\n  ~\n  ~ billy-core is distributed in the hope that it will be useful,\n  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of\n  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  ~ GNU Lesser General Public License for more details.\n  ~\n  ~ You should have received a copy of the GNU Lesser General Public License\n  ~ along with billy-core.  If not, see <http://www.gnu.org/licenses />.\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<artifactId>billy-core</artifactId>\n\t<name>billy core</name>\n\t<description>A project to aid in dealing with financial data</description>\n\n\t<parent>\n\t\t<groupId>com.premiumminds</groupId>\n\t\t<artifactId>billy</artifactId>\n\t\t<version>9.2.1-SNAPSHOT</version>\n\t</parent>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<main.dir>${project.parent.basedir}</main.dir>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>jakarta.persistence</groupId>\n\t\t\t<artifactId>jakarta.persistence-api</artifactId>\n\t\t\t<version>2.2.3</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\n\t\t<!-- GUICE -->\n\t\t<dependency>\n\t\t\t<groupId>com.google.inject</groupId>\n\t\t\t<artifactId>guice</artifactId>\n\t\t</dependency>\n\n\t\t<!-- VALIDATION -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-lang3</artifactId>\n\t\t\t<version>3.13.0</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-api</artifactId>\n\t\t</dependency>\n\n\t\t<!-- JUNIT -->\n\t\t<dependency>\n\t\t\t<groupId>org.junit.jupiter</groupId>\n\t\t\t<artifactId>junit-jupiter-engine</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mockito</groupId>\n\t\t\t<artifactId>mockito-core</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- SnakeYaml -->\n\t\t<dependency>\n\t\t\t<groupId>org.yaml</groupId>\n\t\t\t<artifactId>snakeyaml</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<archive>\n\t\t\t\t\t\t<manifestEntries>\n\t\t\t\t\t\t\t<Automatic-Module-Name>com.premiumminds.billy.core</Automatic-Module-Name>\n\t\t\t\t\t\t</manifestEntries>\n\t\t\t\t\t</archive>\n\t\t\t\t</configuration>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>test-jar</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n",
            "error": "",
            "span_id": 17268258834852378941
        }
    ],
    "get_directory_tree": [
        {
            "input": "billy-core/src/test/java/org/yaml/snakeyaml/inspector",
            "output": "[\n    {\n        \"name\": \"File Not Found\",\n        \"type\": \"error\"\n    }\n]",
            "error": "",
            "span_id": 7033213441749191816
        },
        {
            "input": "billy-core/src/test/java/org/yaml/snakeyaml",
            "output": "[\n    {\n        \"name\": \"File Not Found\",\n        \"type\": \"error\"\n    }\n]",
            "error": "",
            "span_id": 14590012801846820713
        },
        {
            "input": "billy-core/src/test/java/org/yaml",
            "output": "[\n    {\n        \"name\": \"File Not Found\",\n        \"type\": \"error\"\n    }\n]",
            "error": "",
            "span_id": 18160733677207110406
        },
        {
            "input": "billy-core/src/test/java/org",
            "output": "[\n    {\n        \"name\": \"File Not Found\",\n        \"type\": \"error\"\n    }\n]",
            "error": "",
            "span_id": 16477412135690237096
        },
        {
            "input": "billy-core/src/test/java/com/premiumminds/billy/core/test",
            "output": "[\n    {\n        \"name\": \"AbstractTest.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"MockDependencyModule.java\",\n        \"type\": \"file\"\n    },\n    {\n        \"name\": \"services\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"builders\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"TestAddressBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestContactBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestSupplierBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestPaymentBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestGenericInvoiceBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestCustomerBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestShippingPointBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestGenericInvoiceEntryBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestApplicationBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestProductBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestBusinessBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestGenericInvoiceEntryOperations.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestBankAccountBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestTaxBuilder.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestGenericInvoiceOperations.java\",\n                        \"type\": \"file\"\n                    },\n                    {\n                        \"name\": \"TestContextBuilder.java\",\n                        \"type\": \"file\"\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"name\": \"fixtures\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"MockBusinessEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockGenericInvoiceEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockApplicationEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockBankAccountEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockAddressEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockBaseEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockCustomerEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockProductEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockSupplierEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockPaymentEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockShippingPointEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockTaxEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockContextEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockGenericInvoiceEntryEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"MockContactEntity.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"JavaLocalDateConstruct.java\",\n                \"type\": \"file\"\n            },\n            {\n                \"name\": \"JavaZoneIdConstruct.java\",\n                \"type\": \"file\"\n            }\n        ]\n    }\n]",
            "error": "",
            "span_id": 1470220292723197166
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": [
        {
            "input": "",
            "output": "Successful reset of repository",
            "error": "",
            "span_id": 8435514550849042565
        }
    ]
}