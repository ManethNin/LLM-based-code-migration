diff --git a/xchange-stream-service-pubnub/src/main/java/info/bitrich/xchangestream/service/pubnub/PubnubStreamingService.java b/xchange-stream-service-pubnub/src/main/java/info/bitrich/xchangestream/service/pubnub/PubnubStreamingService.java
index 6880c4e608..290004bf5c 100644
--- a/xchange-stream-service-pubnub/src/main/java/info/bitrich/xchangestream/service/pubnub/PubnubStreamingService.java
+++ b/xchange-stream-service-pubnub/src/main/java/info/bitrich/xchangestream/service/pubnub/PubnubStreamingService.java
@@ -12,9 +12,9 @@ import com.pubnub.api.models.consumer.pubsub.PNMessageResult;
 import com.pubnub.api.models.consumer.pubsub.PNPresenceEventResult;
 import com.pubnub.api.models.consumer.pubsub.PNSignalResult;
 import com.pubnub.api.models.consumer.pubsub.message_actions.PNMessageActionResult;
-import com.pubnub.api.models.consumer.pubsub.objects.PNMembershipResult;
-import com.pubnub.api.models.consumer.pubsub.objects.PNSpaceResult;
-import com.pubnub.api.models.consumer.pubsub.objects.PNUserResult;
+import com.pubnub.api.models.consumer.objects_api.membership.PNMembershipResult;
+import com.pubnub.api.models.consumer.objects_api.uuid.PNUUIDMetadataResult;
+import com.pubnub.api.models.consumer.objects_api.channel.PNChannelMetadataResult;
 import io.reactivex.Completable;
 import io.reactivex.Observable;
 import io.reactivex.ObservableEmitter;
@@ -37,7 +37,7 @@ public class PubnubStreamingService {
   public PubnubStreamingService(String publicKey) {
     mapper = new ObjectMapper();
     mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
-    PNConfiguration pnConfiguration = new PNConfiguration();
+    PNConfiguration pnConfiguration = new PNConfiguration("user-id");
     pnConfiguration.setSubscribeKey(publicKey);
     pubnub = new PubNub(pnConfiguration);
     pnStatusCategory = PNStatusCategory.PNDisconnectedCategory;
@@ -49,55 +49,17 @@ public class PubnubStreamingService {
           pubnub.addListener(
               new SubscribeCallback() {
                 @Override
-                public void status(PubNub pubNub, PNStatus pnStatus) {
-                  pnStatusCategory = pnStatus.getCategory();
-                  LOG.debug(
-                      "PubNub status: {} {}",
-                      pnStatusCategory.toString(),
-                      pnStatus.getStatusCode());
-                  if (pnStatusCategory == PNStatusCategory.PNConnectedCategory) {
-                    //              e.onComplete();
-                  } else if (pnStatus.isError()) {
-                    //              e.onError(pnStatus.getErrorData().getThrowable());
-                  }
+-                public void user(PubNub pubnub, PNUserResult pnUserResult) {
+-                  LOG.debug("PubNub user: {}", pnUserResult.toString());
++                public void uuid(PubNub pubnub, PNUUIDMetadataResult pnUUIDMetadataResult) {
++                  LOG.debug("PubNub uuid: {}", pnUUIDMetadataResult.toString());
                 }
 
                 @Override
-                public void message(PubNub pubNub, PNMessageResult pnMessageResult) {
-                  String channelName = pnMessageResult.getChannel();
-                  ObservableEmitter<JsonNode> subscription = subscriptions.get(channelName);
-                  LOG.debug("PubNub Message: {}", pnMessageResult.toString());
-                  if (subscription != null) {
-                    JsonNode jsonMessage = null;
-                    try {
-                      jsonMessage = mapper.readTree(pnMessageResult.getMessage().toString());
-                    } catch (IOException ex) {
-                      ex.printStackTrace();
-                    }
-                    subscription.onNext(jsonMessage);
-                  } else {
-                    LOG.debug("No subscriber for channel {}.", channelName);
-                  }
-                }
-
-                @Override
-                public void presence(PubNub pubNub, PNPresenceEventResult pnPresenceEventResult) {
-                  LOG.debug("PubNub presence: {}", pnPresenceEventResult.toString());
-                }
-
-                @Override
-                public void signal(PubNub pubnub, PNSignalResult pnSignalResult) {
-                  LOG.debug("PubNub signal: {}", pnSignalResult.toString());
-                }
-
-                @Override
-                public void user(PubNub pubnub, PNUserResult pnUserResult) {
-                  LOG.debug("PubNub user: {}", pnUserResult.toString());
-                }
-
-                @Override
-                public void space(PubNub pubnub, PNSpaceResult pnSpaceResult) {
-                  LOG.debug("PubNub space: {}", pnSpaceResult.toString());
+-                public void space(PubNub pubnub, PNSpaceResult pnSpaceResult) {
+-                  LOG.debug("PubNub space: {}", pnSpaceResult.toString());
++                public void channel(PubNub pubnub, PNChannelMetadataResult pnChannelMetadataResult) {
++                  LOG.debug("PubNub channel: {}", pnChannelMetadataResult.toString());
                 }
 
                 @Override
@@ -110,35 +72,39 @@ public class PubnubStreamingService {
                     PubNub pubnub, PNMessageActionResult pnMessageActionResult) {
                   LOG.debug("PubNub messageAction: {}", pnMessageActionResult.toString());
                 }
-              });
-          e.onComplete();
-        });
+@Override
+public void file(PubNub pubnub, PNFileEventResult pnFileEventResult) {
+LOG.debug("PubNub file: {}", pnFileEventResult.toString());
   }
+});
+          e.onComplete();
+});
+}
 
   public Observable<JsonNode> subscribeChannel(String channelName) {
     LOG.info("Subscribing to channel {}.", channelName);
     return Observable.<JsonNode>create(
-            e -> {
+e -> {
               if (!subscriptions.containsKey(channelName)) {
                 subscriptions.put(channelName, e);
                 pubnub.subscribe().channels(Collections.singletonList(channelName)).execute();
                 LOG.debug("Subscribe channel: {}", channelName);
-              }
-            })
+}
+})
         .doOnDispose(
-            () -> {
+() -> {
               LOG.debug("Unsubscribe channel: {}", channelName);
               pubnub.unsubscribe().channels(Collections.singletonList(channelName)).execute();
-            })
-        .share();
-  }
+})
+.share();
+}
 
   public Completable disconnect() {
     return Completable.create(
         completable -> {
           pubnub.disconnect();
           completable.onComplete();
-        });
+});
   }
 
   public boolean isAlive() {
@@ -147,5 +113,5 @@ public class PubnubStreamingService {
 
   public void useCompressedMessages(boolean compressedMessages) {
     throw new UnsupportedOperationException();
-  }
 }
+}
\ No newline at end of file