{
    "validate_diffs": [
        {
            "input": "```diff\n--- src/main/java/ml/peya/plugins/Learn/Neuron.java\n+++ src/main/java/ml/peya/plugins/Learn/Neuron.java\n@@\n-import static develop.p2p.lib.LearnMath.sigmoid;\n+import static com.github.p2pdevelop.peyangsuperlibrary.LearnMath.sigmoid;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Objects/Decorations.java\n+++ src/main/java/ml/peya/plugins/Objects/Decorations.java\n@@\n-import develop.p2p.lib.WaveCreator;\n+import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n+++ src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n@@\n-import develop.p2p.lib.*;\n+import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n+++ src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n@@\n-import static ml.peya.plugins.Utils.MessageEngine.get;\n+import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\n@@\n-            first = develop.p2p.lib.LeetConverter.convert(first);\n-            last = develop.p2p.lib.LeetConverter.convert(last);\n+            first = convert(first);\n+            last = convert(last);\n```",
            "output": "{'src/main/java/ml/peya/plugins/Learn/Neuron.java': 'package ml.peya.plugins.Learn;\\n\\nimport java.util.ArrayList;\\n\\nimport static com.github.p2pdevelop.peyangsuperlibrary.LearnMath.sigmoid;\\n\\n/**\\n * \u91cd\u307f\u3092\u7a81\u3063\u8fbc\u3080\u5668\u3002\\n */\\npublic class Neuron\\n{\\n    /**\\n     * \u52a0\u7b97\u3057\u305fWeight\u3002\\n     */\\n    private double sum;\\n\\n    /**\\n     * \u5165\u529b\u7528\u5024\u3002\\n     */\\n    private double value = 0.0;\\n\\n    /**\\n     * \u30b2\u30c3\u30bf\u30fc\u3002\\n     *\\n     * @return value\u53c2\u7167\u3002\\n     */\\n    public double getValue()\\n    {\\n        return value;\\n    }\\n\\n    /**\\n     * \u30bb\u30c3\u30bf\u30fc\u3002\\n     *\\n     * @param value value\u53c2\u7167\u3002\\n     */\\n    public void setValue(double value)\\n    {\\n        this.value = value;\\n    }\\n\\n    /**\\n     * ReLU\u95a2\u6570\u3067\u5024\u3092\u5f37\u3081\u3066\u51fa\u529b\u7cfb\u306b\u5165\u308c\u308b\u3002\\n     *\\n     * @param inputData Input\u30af\u30e9\u30b9\u306eArrayList\u30c7\u30fc\u30bf\u3002\\n     */\\n    public void input(ArrayList<Input> inputData)\\n    {\\n        inputData.parallelStream().forEachOrdered(input -> input(input.getWeightingValue()));\\n        setValue(sigmoid(sum));\\n    }\\n\\n    /**\\n     * input(ArrayList)\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3002\\n     *\\n     * @param value sum\u306b\u52a0\u7b97\u3059\u308b\u5024\u3002\\n     */\\n    public void input(double value)\\n    {\\n        sum += value;\\n    }\\n}\\n', 'src/main/java/ml/peya/plugins/Objects/Decorations.java': 'package ml.peya.plugins.Objects;\\n\\nimport com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\\nimport ml.peya.plugins.PeyangSuperbAntiCheat;\\nimport ml.peya.plugins.Variables;\\nimport org.bukkit.Location;\\nimport org.bukkit.Particle;\\nimport org.bukkit.entity.Player;\\nimport org.bukkit.scheduler.BukkitRunnable;\\nimport org.bukkit.util.Vector;\\n\\n/**\\n * \u3067\u3053\u308c\u30fc\u3057\u3087\u3093\u2606\uff01\\n */\\npublic class Decorations\\n{\\n    /**\\n     * \u96f7\\n     *\\n     * @param player \u990c\u98df\\n     */\\n    public static void lighting(Player player)\\n    {\\n        player.getWorld().strikeLightningEffect(player.getLocation());\\n    }\\n\\n    /**\\n     * Pit\u60f3\u50cf\u3057\u308d\\n     *\\n     * @param player  \u990c\u98df\\n     * @param seconds \u79d2\u6570\\n     */\\n    public static void flame(Player player, int seconds)\\n    {\\n        final int[] sec = {0};\\n        new BukkitRunnable()\\n        {\\n            @Override\\n            public void run()\\n            {\\n                if (sec[0] > (seconds))\\n                    this.cancel();\\n\\n                player.getWorld().spawnParticle(\\n                    Particle.FLAME,\\n                    player.getLocation().add(0, 0.5, 0),\\n                    30,\\n                    0,\\n                    0,\\n                    0,\\n                    0.65\\n                );\\n\\n                sec[0] += 5;\\n            }\\n        }.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0L, 5L);\\n    }\\n\\n    /**\\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u51fa\u3059\u3088\uff01\\n     *\\n     * @param location \u3060\u3059\u3068\u3053\\n     * @param size     \u3060\u3059\u308a\u3087\u30fc\\n     */\\n    public static void particle(Location location, int size)\\n    {\\n        particle(location, size, Particle.CRIT_MAGIC);\\n    }\\n\\n    /**\\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u51fa\u3059\u3088\uff01\\n     *\\n     * @param location \u3060\u3059\u3068\u3053\\n     * @param size     \u3060\u3059\u308a\u3087\u30fc\\n     * @param particle \u7a2e\u985e\\n     */\\n    public static void particle(Location location, int size, Particle particle)\\n    {\\n        location.getWorld().spawnParticle(\\n            particle,\\n            location,\\n            size,\\n            0,\\n            0,\\n            0,\\n            0.001\\n        ); //XXX: \u8ab0\u3060\u3088\u3053\u3093\u306a\u5f15\u6570\u591a\u304f\u8a2d\u8a08\u3057\u305f\u3084\u3064\\n    }\\n\\n    /**\\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u51fa\u3059\u3088\uff01\\n     *\\n     * @param location \u3060\u3059\u3068\u3053\\n     */\\n    public static void particle(Location location)\\n    {\\n        particle(location, 5);\\n    }\\n\\n    /**\\n     * \u7dda\u3092\u5f15\u304f\u3088\uff01\\n     *\\n     * @param path \u958b\u59cb\u4f4d\u7f6e\\n     * @param to   \u7d42\u4e86\u4f4d\u7f6e\\n     */\\n    public static void line(Location path, Location to)\\n    {\\n        line(path, to, Particle.ENCHANTMENT_TABLE);\\n    }\\n\\n    /**\\n     * \u7dda\u3092\u5f15\u304f\u3088\uff01\\n     *\\n     * @param path \u958b\u59cb\u4f4d\u7f6e\\n     * @param to   \u7d42\u4e86\u4f4d\u7f6e\\n     * @param p    \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\\n     */\\n    public static void line(Location path, Location to, Particle p)\\n    {\\n        double distance = path.distance(to);\\n\\n        Vector vP = path.toVector();\\n        Vector tP = to.toVector();\\n\\n        Vector line = tP.clone().subtract(vP).normalize().multiply(0.2);\\n\\n        for (double d = 0; distance > d; )\\n        {\\n            vP.add(line);\\n            particle(vP.toLocation(path.getWorld()), 1, p);\\n            d += 0.2;\\n        }\\n    }\\n\\n    /**\\n     * \u3048\u3093\\n     *\\n     * @param center \u771f\u3093\u4e2d\u306e\u4f4d\u7f6e\\n     * @param count  \u30ab\u30a6\u30f3\u30c8\uff01\\n     * @param radius \u306f\u3093\u3051\u30fc\\n     */\\n    public static void circle(Location center, int count, double radius)\\n    {\\n        Location n = new Location(\\n            center.getWorld(),\\n            particle_x(count, radius) + center.getX(),\\n            center.getY(),\\n            particle_z(count, radius) + center.getZ()\\n        );\\n\\n        particle(n);\\n\\n    }\\n\\n    /**\\n     * \u3048\u3093\\n     *\\n     * @param center   \u771f\u3093\u4e2d\u306e\u4f4d\u7f6e\\n     * @param count    \u30ab\u30a6\u30f3\u30c8\uff01\\n     * @param radius   \u306f\u3093\u3051\u30fc\\n     * @param particle \u3071\u30fc\u3066\u3043\u304f\u308b\\n     */\\n    public static void circle(Location center, int count, double radius, Particle particle)\\n    {\\n        Location n = new Location(\\n            center.getWorld(),\\n            particle_x(count, radius) + center.getX(),\\n            center.getY(),\\n            particle_z(count, radius) + center.getZ()\\n        );\\n\\n        particle(n, 5, particle);\\n\\n    }\\n\\n    /**\\n     * \u307e\u307b\u30fc\u3058\u3093\uff01\uff01\\n     *\\n     * @param player  \u990c\u98df\\n     * @param seconds \u79d2\u6570\\n     */\\n    public static void magic(Player player, int seconds)\\n    {\\n        final int[] count = {0};\\n        WaveCreator wave = new WaveCreator(0.8, 1.8, 0.1);\\n\\n        BukkitRunnable runnable = new BukkitRunnable()\\n        {\\n            @Override\\n            public void run()\\n            {\\n                for (double i = 0; i < Math.PI * 2; i++)\\n                {\\n                    Location center = player.getLocation();\\n\\n                    circle(center.clone().add(0, 0.9, 0), count[0], 3, Particle.CRIT);\\n\\n                    circle(center.add(0, 0.7, 0), count[0], 2.7, Particle.ENCHANTMENT_TABLE);\\n\\n                    circle(center.clone().add(0, wave.get(0.01, false), 0), count[0], wave.getStatic());\\n\\n                    circle(center.clone().add(3.2, 0.7, 3.2), count[0], 1.5);\\n                    circle(center.clone().add(-3.2, 0.7, -3.2), count[0], 1.5);\\n                    circle(center.clone().add(-3.2, 0.7, 3.2), count[0], 1.5);\\n                    circle(center.clone().add(3.2, 0.7, -3.2), count[0], 1.5);\\n\\n                    circle(center.clone().add(0, 1.5, 0), count[0], 5, Particle.SPELL_WITCH);\\n\\n                    count[0]++;\\n                }\\n\\n                Location center = player.getLocation();\\n\\n                line(center.clone().add(3, 0.7, 0), center.clone().add(-1.5, 0.7, 2.3));\\n                line(center.clone().add(-1.5, 0.7, 2.3), center.clone().add(-1.5, 0.7, -2.3)); //\u4e09\u89d2\\n                line(center.clone().add(3, 0.7, 0), center.clone().add(-1.5, 0.7, -2.3));\\n\\n                line(center.clone().add(-3, 0.7, 0), center.clone().add(1.5, 0.7, -2.3));\\n                line(center.clone().add(1.5, 0.7, -2.3), center.clone().add(1.5, 0.7, 2.3)); //\u4e09\u89d2(\u53cd\u8ee2)\\n                line(center.clone().add(-3, 0.7, 0), center.clone().add(1.5, 0.7, 2.3));\\n            }\\n        };\\n\\n        runnable.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0L, 1L);\\n        new BukkitRunnable()\\n        {\\n            @Override\\n            public void run()\\n            {\\n                runnable.cancel();\\n            }\\n        }.runTaskLater(PeyangSuperbAntiCheat.getPlugin(), seconds);\\n\\n    }\\n\\n    /**\\n     * \u30ac\u30fc\u30c7\u30a3\u30a2\u30f3\u30d3\u30fc\u30e0\\n     *\\n     * @param player \u990c\u98df\\n     * @param sec    \u79d2\u6570\\n     */\\n    public static void laser(Player player, int sec)\\n    {\\n\\n        final double[] time = {0.0};\\n        final double radius = 2.5;\\n\\n        BukkitRunnable runnable = new BukkitRunnable()\\n        {\\n            @Override\\n            public void run()\\n            {\\n                Location c = player.getLocation().clone();\\n                Location X = new Location(c.getWorld(), particle_x(time[0], radius) + c.getX(), 5.0 + c.getY(), particle_z(time[0], radius) + c.getZ());\\n\\n                for (int i = 0; i < 10; i++)\\n                    line(c, X, Particle.TOWN_AURA);\\n                time[0] += Math.E;\\n            }\\n        };\\n\\n        runnable.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0L, 1L);\\n        new BukkitRunnable()\\n        {\\n            @Override\\n            public void run()\\n            {\\n                runnable.cancel();\\n            }\\n        }.runTaskLater(PeyangSuperbAntiCheat.getPlugin(), sec);\\n    }\\n\\n    /**\\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306eZ\u3002\\n     *\\n     * @param time   \u6642\u9593\u3002\\n     * @param radius \u534a\u5f84\u3002\\n     * @return \u4f4d\u7f6e\u3002\\n     */\\n    private static double particle_z(double time, double radius)\\n    {\\n        return Math.sin(time) * radius * Math.cos(Math.PI / 180 * 360.0);\\n    }\\n\\n    /**\\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306eX\\n     *\\n     * @param time   \u6642\u9593\u3002\\n     * @param radius \u534a\u5f84\u3002\\n     * @return \u4f4d\u7f6e\u3002\\n     */\\n    private static double particle_x(double time, double radius)\\n    {\\n        return Math.cos(time) * radius;\\n    }\\n\\n    /**\\n     * \u30c7\u30b3\u8981\u7d20\u3059\u3079\u3066\u5c55\u958b\u3059\u308b\u3084\u3064\\n     *\\n     * @param player \u88ab\u9a13\u8005\\n     */\\n    public static void decoration(Player player)\\n    {\\n        if (Variables.config.getBoolean(\"decoration.flame\"))\\n            flame(player, Math.multiplyExact(Variables.config.getInt(\"kick.delay\"), 20));\\n        if (Variables.config.getBoolean(\"decoration.circle\"))\\n            magic(player, Math.multiplyExact(Variables.config.getInt(\"kick.delay\"), 20));\\n        if (Variables.config.getBoolean(\"decoration.laser\"))\\n            laser(player, Math.multiplyExact(Variables.config.getInt(\"kick.delay\"), 20));\\n    }\\n\\n}\\n', 'src/main/java/ml/peya/plugins/Detect/NPCTeleport.java': 'package ml.peya.plugins.Detect;\\n\\nimport com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\\nimport ml.peya.plugins.DetectClasses.*;\\nimport ml.peya.plugins.Enum.*;\\nimport ml.peya.plugins.*;\\nimport net.minecraft.server.v1_12_R1.*;\\nimport org.bukkit.*;\\nimport org.bukkit.command.*;\\nimport org.bukkit.craftbukkit.v1_12_R1.entity.*;\\nimport org.bukkit.entity.*;\\nimport org.bukkit.metadata.*;\\nimport org.bukkit.scheduler.*;\\n\\nimport java.util.*;\\n\\nimport static ml.peya.plugins.Utils.MessageEngine.get;\\nimport static ml.peya.plugins.Variables.cheatMeta;\\nimport static ml.peya.plugins.Variables.config;\\n\\n/**\\n * NPC\u306eTeleport\u3092\u7ba1\u7406\u3059\u308b\u3002\\n */\\npublic class NPCTeleport\\n{\\n    /**\\n     * \u30c6\u30ec\u30dd\u30fc\u30c8\u30a9\uff01\\n     *\\n     * @param player    \u30d7\u30ec\u30a4\u30e4\u30fc\u3002\\n     * @param target    \u30bf\u30fc\u30b2\u30c3\u30c8\u3002\\n     * @param arm       \u9632\u5177\u3002\\n     * @param tpCase    \u30c6\u30ec\u30dd\u30fc\u30c8\u30b1\u30fc\u30b9\u3002\\n     * @param reachMode \u30ea\u30fc\u30c1\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3002\\n     */\\n    public static void teleport(Player player, EntityPlayer target, ItemStack[] arm, DetectType tpCase, boolean reachMode)\\n    {\\n        switch (tpCase)\\n        {\\n            case AURA_BOT:\\n                auraBotTeleport(player, target, arm, reachMode);\\n                break;\\n            case AURA_PANIC:\\n                auraPanic_teleport(player, target, arm, tpCase.getPanicCount(), tpCase.getSender(), reachMode);\\n                break;\\n            default:\\n                throw new IllegalStateException(\"Unexpected value: \" + tpCase);\\n        }\\n    }\\n\\n    /**\\n     * Aurapanic\u306e\u30c6\u30ec\u30dd\u30fc\u30c8\u3002\\n     *\\n     * @param player    \u30d7\u30ec\u30a4\u30e4\u30fc\u3002\\n     * @param target    \u30bf\u30fc\u30b2\u30c3\u30c8\u3002\\n     * @param arm       \u88c5\u5099\u3002\\n     * @param count     \u56de\u6570\u3002\\n     * @param sender    \u30a4\u30d9\u30f3\u30c8sender\u3002\\n     * @param reachMode \u30ea\u30fc\u30c1\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3002\\n     */\\n    private static void auraPanic_teleport(Player player, EntityPlayer target, ItemStack[] arm, int count, CommandSender sender, boolean reachMode)\\n    {\\n        final double range = reachMode ? config.getDouble(\"npc.reachPanicRange\"): config.getDouble(\"npc.panicRange\");\\n        final double[] clt = {0.0};\\n        final int[] now = {0};\\n\\n        PlayerConnection connection = ((CraftPlayer) player).getHandle().playerConnection;\\n\\n        int sec = config.getInt(\"npc.seconds\");\\n\\n        new BukkitRunnable()\\n        {\\n            @Override\\n            public void run()\\n            {\\n                now[0]++;\\n\\n                connection.sendPacket(new PacketPlayOutAnimation(((CraftPlayer) player).getHandle(), 1));\\n\\n                HashMap<String, Object> map = new HashMap<>();\\n                map.put(\"hit\", now[0]);\\n                map.put(\"max\", count);\\n\\n                sender.sendMessage(get(\"message.auraCheck.panic.lynx\", map));\\n                if (now[0] >= count)\\n                    this.cancel();\\n            }\\n        }.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0, (long) (10 * ((1.5 / count) * sec)));\\n\\n\\n        new BukkitRunnable()\\n        {\\n            public void run()\\n            {\\n                for (double i = 0; i < Math.PI * 2; i++)\\n                {\\n                    Location center = player.getLocation();\\n\\n                    if (center.getPitch() <= 0.0f || center.getPitch() > 15.0f)\\n                        center.setPitch(0.0f);\\n\\n                    Location n = center.add(center.getDirection().multiply(0 - range));\\n\\n                    n.setY(center.getY() + range);\\n\\n                    n.setPitch(50);\\n\\n                    float head = ((CraftPlayer) player).getHandle().getHeadRotation() * 0.5f;\\n\\n                    if (head < 0)\\n                        head *= 2;\\n\\n                    NPC.setLocation(n, target);\\n                    connection.sendPacket(new PacketPlayOutEntityTeleport(target));\\n                    connection.sendPacket(new PacketPlayOutEntityHeadRotation(target, (byte) head));\\n\\n                    NPC.setArmor(player, target, arm);\\n                    float finalHead = head;\\n                    new BukkitRunnable()\\n                    {\\n                        @Override\\n                        public void run()\\n                        {\\n                            Bukkit.getOnlinePlayers().parallelStream().filter(p -> p.hasPermission(\"psac.viewnpc\"))\\n                                .forEachOrdered(p ->\\n                                {\\n                                    ((CraftPlayer) p).getHandle().playerConnection\\n                                        .sendPacket(new PacketPlayOutEntityTeleport(target));\\n                                    ((CraftPlayer) p).getHandle().playerConnection\\n                                        .sendPacket(new PacketPlayOutEntityHeadRotation(target, (byte) finalHead));\\n                                    NPC.setArmor(p, target, arm);\\n                                });\\n                            this.cancel();\\n                        }\\n                    }.runTask(PeyangSuperbAntiCheat.getPlugin());\\n                }\\n\\n                clt[0] += 0.035;\\n                if (clt[0] >= sec)\\n                {\\n                    Variables.logger.info(\"Finished\");\\n                    this.cancel();\\n                }\\n            }\\n        }.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0, 1);\\n    }\\n\\n    /**\\n     * AuraBot\u306e\u30c6\u30ec\u30dd\u30fc\u30c8\u3002\\n     *\\n     * @param player    \u30d7\u30ec\u30a4\u30e4\u30fc\u3002\\n     * @param target    \u30bf\u30fc\u30b2\u30c3\u30c8\u3002\\n     * @param arm       \u88c5\u5099\u3002\\n     * @param reachMode \u30ea\u30fc\u30c1\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3002\\n     */\\n    private static void auraBotTeleport(Player player, EntityPlayer target, ItemStack[] arm, boolean reachMode)\\n    {\\n        final double[] time = {0.0};\\n        final double radius = reachMode ? config.getDouble(\"npc.reachRange\"): config.getDoubleList(\"npc.range\")\\n            .get(new Random().nextInt(config.getDoubleList(\"npc.range\").size()));\\n\\n        WaveCreator ypp = new WaveCreator(10.0, 100.0, 10.0);\\n\\n        final int[] count = {0};\\n        BukkitRunnable r = new BukkitRunnable()\\n        {\\n            public void run()\\n            {\\n                double speed = 0.0;\\n\\n                if (player.hasMetadata(\"speed\"))\\n                    for (MetadataValue value : player.getMetadata(\"speed\"))\\n                        if (value.getOwningPlugin().getName().equals(PeyangSuperbAntiCheat.getPlugin().getName()))\\n                            speed = value.asDouble() * 2.0;\\n                for (double i = 0; i < Math.PI * 2; i++)\\n                {\\n                    double rangeTmp = radius;\\n\\n                    if (config.getBoolean(\"npc.wave\"))\\n                        rangeTmp = new WaveCreator(radius - 0.1, radius, config.getDouble(\"npc.waveMin\"))\\n                            .get(0.01, true);\\n\\n                    final Location center = player.getLocation();\\n                    final Location n = new Location(\\n                        center.getWorld(),\\n                        auraBotXPos(time[0], rangeTmp + speed) + center.getX(),\\n                        center.getY() + new WaveCreator(1.0, 2.0, 0.0).get(0.01, count[0] < 20),\\n                        auraBotZPos(time[0], rangeTmp + speed) + center.getZ(),\\n                        (float) ypp.getStatic(),\\n                        (float) ypp.get(4.5, false)\\n                    );\\n\\n                    NPC.setLocation(n, target);\\n                    ((CraftPlayer) player).getHandle().playerConnection\\n                        .sendPacket(new PacketPlayOutEntityTeleport(target));\\n\\n                    NPC.setArmor(player, target, arm);\\n                    new BukkitRunnable()\\n                    {\\n                        @Override\\n                        public void run()\\n                        {\\n                            Bukkit.getOnlinePlayers()\\n                                .parallelStream()\\n                                .filter(p -> p.hasPermission(\"psac.viewnpc\"))\\n                                .forEachOrdered(p ->\\n                                {\\n                                    ((CraftPlayer) p).getHandle().playerConnection\\n                                        .sendPacket(new PacketPlayOutEntityTeleport(target));\\n                                    NPC.setArmor(p, target, arm);\\n                                });\\n                            this.cancel();\\n                        }\\n                    }.runTask(PeyangSuperbAntiCheat.getPlugin());\\n                    count[0]++;\\n                    CheatDetectNowMeta meta = cheatMeta.getMetaByPlayerUUID(player.getUniqueId());\\n                    if (meta == null) continue;\\n                    meta.setNpcLocation(n.toVector());\\n                }\\n                time[0] += config.getDouble(\"npc.time\") + (config.getBoolean(\"npc.speed.wave\")\\n                    ? new WaveCreator(0.0, config.getDouble(\"npc.speed.waveRange\"), 0 - config.getDouble(\"npc.speed.waveRange\")).get(0.001, true)\\n                    : 0.0);\\n            }\\n        };\\n        r.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0, 1);\\n\\n        new BukkitRunnable()\\n        {\\n            @Override\\n            public void run()\\n            {\\n                r.cancel();\\n                this.cancel();\\n            }\\n        }.runTaskLater(PeyangSuperbAntiCheat.getPlugin(), 20 * (config.getLong(\"npc.seconds\")));\\n\\n    }\\n\\n    /**\\n     * Aurabot\u306ez\u8ef8\u3092\u7b97\u51fa\u3059\u308b\u3002\\n     *\\n     * @param time   \u6642\u9593\u3002\\n     * @param radius \u534a\u5f84\u3002\\n     * @return \u4f4d\u7f6e\u3002\\n     */\\n    private static double auraBotZPos(double time, double radius)\\n    {\\n        return Math.sin(time) * radius * Math.cos(Math.PI / 180 * 360.0);\\n    }\\n\\n    /**\\n     * Aurabot\u306ex\u8ef8\u3092\u7b97\u51fa\u3059\u308b\u3002\\n     *\\n     * @param time   \u6642\u9593\u3002\\n     * @param radius \u534a\u5f84\u3002\\n     * @return \u4f4d\u7f6e\u3002\\n     */\\n    private static double auraBotXPos(double time, double radius)\\n    {\\n        return Math.cos(time) * radius;\\n    }\\n}\\n', 'src/main/java/ml/peya/plugins/Utils/PlayerUtils.java': 'package ml.peya.plugins.Utils;\\n\\nimport com.mojang.authlib.GameProfile;\\nimport com.mojang.authlib.properties.Property;\\nimport net.minecraft.server.v1_12_R1.EntityPlayer;\\nimport net.minecraft.server.v1_12_R1.PlayerInteractManager;\\nimport net.minecraft.server.v1_12_R1.WorldServer;\\nimport org.apache.commons.lang.RandomStringUtils;\\nimport org.apache.commons.lang3.tuple.Pair;\\nimport org.bukkit.Bukkit;\\nimport org.bukkit.Location;\\nimport org.bukkit.OfflinePlayer;\\nimport org.bukkit.World;\\nimport org.bukkit.block.Block;\\nimport org.bukkit.command.CommandSender;\\nimport org.bukkit.craftbukkit.v1_12_R1.CraftServer;\\nimport org.bukkit.craftbukkit.v1_12_R1.CraftWorld;\\nimport org.bukkit.entity.Entity;\\nimport org.bukkit.entity.EntityType;\\nimport org.bukkit.entity.Player;\\nimport org.bukkit.potion.PotionEffectType;\\nimport org.bukkit.util.BlockIterator;\\n\\nimport javax.annotation.Nullable;\\nimport java.sql.Connection;\\nimport java.sql.ResultSet;\\nimport java.sql.Statement;\\nimport java.util.ArrayList;\\nimport java.util.Random;\\nimport java.util.UUID;\\nimport java.util.stream.Collectors;\\n\\nimport static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\\nimport static ml.peya.plugins.Variables.skin;\\n\\n/**\\n * \u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u95a2\u3057\u3066\u307e\u3068\u3081\u305f\u3084\u3064\uff01\\n */\\npublic class PlayerUtils\\n{\\n    /**\\n     * \u8ab0\u304c\u898b\u3066\u308b\u306e\u304b\u308f\u304b\u308b\u3084\u3064\u3002\\n     *\\n     * @param player \u898b\u3089\u308c\u3066\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\\n     * @return \u898b\u3066\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\\n     */\\n    public static Player getLookingEntity(Player player)\\n    {\\n        for (Location location : player.getLineOfSight(null, 4).parallelStream().map(Block::getLocation)\\n            .collect(Collectors.toCollection(ArrayList::new)))\\n            for (Entity entity : player.getNearbyEntities(3.5, 3.5, 3.5))\\n                if (isLooking((Player) entity, location) && entity.getType() == EntityType.PLAYER)\\n                    return (Player) entity;\\n\\n        return null;\\n    }\\n\\n    /**\\n     * \u4eca\u898b\u3066\u308b\u304b\u308f\u304b\u308b\u3084\u3064\u3002\\n     *\\n     * @param player   \u898b\u3089\u308c\u3066\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\\n     * @param location \u3042\u3068\u5834\u6240\u3002\\n     * @return \u898b\u3089\u308c\u3066\u305f\u3089true\u3002\\n     */\\n    public static boolean isLooking(Player player, Location location)\\n    {\\n        BlockIterator it = new BlockIterator(player, 4);\\n\\n        while (it.hasNext())\\n        {\\n            final Block block = it.next();\\n            if (block.getX() == location.getBlockX() &&\\n                block.getY() == location.getBlockY() &&\\n                block.getZ() == location.getBlockZ())\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * \u3081\u3063\u3061\u3083\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u3055\u308c\u305f\u3088\u3049\u3075\u3048\u3048\u3048\u3048\u3048\u3047\u3047\u3047\u3063\u3066\u3044\u3046\u306e\u78ba\u8a8d\u3059\u308b\u3084\u3064\\n     *\\n     * @param player \u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30a5\uff01\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\\n     * @return \u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u8b66\u5bdf\u304c\u53cd\u5fdc\u3057\u305f\u3089true\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\\n     */\\n    public static boolean hasCritical(Player player)\\n    {\\n        return player.getFallDistance() > 0.0F &&\\n            !player.getLocation().getBlock().isLiquid() &&\\n            !player.isOnGround() &&\\n            !player.hasPotionEffect(PotionEffectType.BLINDNESS) &&\\n            player.getVehicle() == null;\\n    }\\n\\n    /**\\n     * \u30ef\u30fc\u30eb\u30c9\u5185\u306b\u65b0\u3057\u3044\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u634f\u9020\u3057\u3066\u3001{@code EntityPlayer}\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\\n     *\\n     * @param world \u30ef\u30fc\u30eb\u30c9\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u5f15\u6570\u3002\\n     * @return \u5275\u9020\u3055\u308c\u305f\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\\n     */\\n    public static EntityPlayer getRandomPlayer(World world)\\n    {\\n        Random random = new Random();\\n        String first = random.nextBoolean()\\n            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)\\n            : RandomWordUtils.getRandomWord();\\n        String last = random.nextBoolean()\\n            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)\\n            : RandomWordUtils.getRandomWord();\\n\\n        if (random.nextBoolean())\\n        {\\n            first = convert(first);\\n            last = convert(last);\\n        }\\n\\n        String name = first + (random.nextBoolean() ? \"_\": \"\") + last + (random.nextBoolean() ? \"19\" + random.nextInt(120): \"\");\\n        if (name.length() > 16)\\n            name = random.nextBoolean() ? first: last;\\n\\n        if (name.length() > 16)\\n            name = RandomStringUtils.randomAlphanumeric(random.nextInt(16));\\n\\n        WorldServer worldServer = ((CraftWorld) world).getHandle();\\n\\n        Pair<String, String> skin = getRandomSkin();\\n\\n        GameProfile profile = new GameProfile(UUID.randomUUID(), name);\\n\\n        profile.getProperties().put(\"textures\", new Property(\"textures\", skin.getLeft(), skin.getRight()));\\n\\n        return new EntityPlayer(\\n            ((CraftServer) Bukkit.getServer()).getServer(),\\n            worldServer,\\n            profile,\\n            new PlayerInteractManager(worldServer)\\n        );\\n    }\\n\\n    /**\\n     * \u30e9\u30f3\u30c0\u30e0\u30b9\u30ad\u30f3\u3092\u30d1\u30d1\u30e9\u30c3\u30c1\u3057\u307e\u3059\u3002\\n     *\\n     * @return \u3059\u304d\u3093\\n     */\\n    public static Pair<String, String> getRandomSkin()\\n    {\\n        try (Connection connection = skin.getConnection();\\n             Statement statement = connection.createStatement())\\n        {\\n            ResultSet result = statement.executeQuery(\"SELECT Texture, Signature FROM Skin ORDER BY RANDOM() LIMIT 1\");\\n            return !result.next()\\n                ? Pair.of(\"\", \"\")\\n                : Pair.of(result.getString(\"Texture\"), result.getString(\"Signature\"));\\n        }\\n        catch (Exception e)\\n        {\\n            e.printStackTrace();\\n            Utils.errorNotification(Utils.getStackTrace(e));\\n            return Pair.of(\"\", \"\");\\n        }\\n    }\\n\\n    /**\\n     * \u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u53d6\u5f97\u3059\u308b\u3002\u305f\u3076\u3093\u3002\\n     *\\n     * @param sender \u30a4\u30d9\u30f3\u30c8\u30bb\u30f3\u30c0\u30fc\u3002\\n     * @param name   \u306a\u307e\u3048\\n     * @return Player\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u305f\u5834\u5408null\u3002\\n     */\\n    @Nullable\\n    public static Player getPlayer(CommandSender sender, String name)\\n    {\\n        Player player = Bukkit.getPlayer(name);\\n\\n        if (player == null)\\n        {\\n            sender.sendMessage(get(\"error.playerNotFound\"));\\n\\n            return null;\\n        }\\n        return player;\\n    }\\n\\n    /**\\n     * \u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059(\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u3082\u53ef)\\n     *\\n     * @return \u53d6\u5f97\u3057\u305f\u30d7\u30ec\u30a4\u30e4\u30fc\\n     */\\n    public static Player getPlayerAllowOffline(String playerName)\\n    {\\n        Player player = Bukkit.getPlayer(playerName);\\n        if (player == null)\\n        {\\n            for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())\\n            {\\n                if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))\\n                    player = offlinePlayer.getPlayer();\\n            }\\n        }\\n\\n        return player;\\n    }\\n\\n    /**\\n     * \u30aa\u30d5\u30e9\u30a4\u30f3\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059\\n     *\\n     * @return \u53d6\u5f97\u3057\u305f\u30d7\u30ec\u30a4\u30e4\u30fc\\n     */\\n    public static OfflinePlayer getOfflinePlayer(String playerName)\\n    {\\n        for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())\\n        {\\n            if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))\\n                return offlinePlayer;\\n        }\\n        return null;\\n    }\\n}\\n'}",
            "error": "",
            "span_id": 2386059977110626255
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- src/main/java/ml/peya/plugins/Learn/Neuron.java\n+++ src/main/java/ml/peya/plugins/Learn/Neuron.java\n@@\n-import static develop.p2p.lib.LearnMath.sigmoid;\n+import static com.github.p2pdevelop.peyangsuperlibrary.LearnMath.sigmoid;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Objects/Decorations.java\n+++ src/main/java/ml/peya/plugins/Objects/Decorations.java\n@@\n-import develop.p2p.lib.WaveCreator;\n+import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n+++ src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n@@\n-import develop.p2p.lib.*;\n+import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n+++ src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n@@\n-import static ml.peya.plugins.Utils.MessageEngine.get;\n+import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\n@@\n-            first = develop.p2p.lib.LeetConverter.convert(first);\n-            last = develop.p2p.lib.LeetConverter.convert(last);\n+            first = convert(first);\n+            last = convert(last);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "cannot find symbol\n",
                "updated_files": {
                    "src/main/java/ml/peya/plugins/Learn/Neuron.java": "package ml.peya.plugins.Learn;\n\nimport java.util.ArrayList;\n\nimport static com.github.p2pdevelop.peyangsuperlibrary.LearnMath.sigmoid;\n\n/**\n * \u91cd\u307f\u3092\u7a81\u3063\u8fbc\u3080\u5668\u3002\n */\npublic class Neuron\n{\n    /**\n     * \u52a0\u7b97\u3057\u305fWeight\u3002\n     */\n    private double sum;\n\n    /**\n     * \u5165\u529b\u7528\u5024\u3002\n     */\n    private double value = 0.0;\n\n    /**\n     * \u30b2\u30c3\u30bf\u30fc\u3002\n     *\n     * @return value\u53c2\u7167\u3002\n     */\n    public double getValue()\n    {\n        return value;\n    }\n\n    /**\n     * \u30bb\u30c3\u30bf\u30fc\u3002\n     *\n     * @param value value\u53c2\u7167\u3002\n     */\n    public void setValue(double value)\n    {\n        this.value = value;\n    }\n\n    /**\n     * ReLU\u95a2\u6570\u3067\u5024\u3092\u5f37\u3081\u3066\u51fa\u529b\u7cfb\u306b\u5165\u308c\u308b\u3002\n     *\n     * @param inputData Input\u30af\u30e9\u30b9\u306eArrayList\u30c7\u30fc\u30bf\u3002\n     */\n    public void input(ArrayList<Input> inputData)\n    {\n        inputData.parallelStream().forEachOrdered(input -> input(input.getWeightingValue()));\n        setValue(sigmoid(sum));\n    }\n\n    /**\n     * input(ArrayList)\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3002\n     *\n     * @param value sum\u306b\u52a0\u7b97\u3059\u308b\u5024\u3002\n     */\n    public void input(double value)\n    {\n        sum += value;\n    }\n}\n",
                    "src/main/java/ml/peya/plugins/Objects/Decorations.java": "package ml.peya.plugins.Objects;\n\nimport com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\nimport ml.peya.plugins.PeyangSuperbAntiCheat;\nimport ml.peya.plugins.Variables;\nimport org.bukkit.Location;\nimport org.bukkit.Particle;\nimport org.bukkit.entity.Player;\nimport org.bukkit.scheduler.BukkitRunnable;\nimport org.bukkit.util.Vector;\n\n/**\n * \u3067\u3053\u308c\u30fc\u3057\u3087\u3093\u2606\uff01\n */\npublic class Decorations\n{\n    /**\n     * \u96f7\n     *\n     * @param player \u990c\u98df\n     */\n    public static void lighting(Player player)\n    {\n        player.getWorld().strikeLightningEffect(player.getLocation());\n    }\n\n    /**\n     * Pit\u60f3\u50cf\u3057\u308d\n     *\n     * @param player  \u990c\u98df\n     * @param seconds \u79d2\u6570\n     */\n    public static void flame(Player player, int seconds)\n    {\n        final int[] sec = {0};\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                if (sec[0] > (seconds))\n                    this.cancel();\n\n                player.getWorld().spawnParticle(\n                    Particle.FLAME,\n                    player.getLocation().add(0, 0.5, 0),\n                    30,\n                    0,\n                    0,\n                    0,\n                    0.65\n                );\n\n                sec[0] += 5;\n            }\n        }.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0L, 5L);\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u51fa\u3059\u3088\uff01\n     *\n     * @param location \u3060\u3059\u3068\u3053\n     * @param size     \u3060\u3059\u308a\u3087\u30fc\n     */\n    public static void particle(Location location, int size)\n    {\n        particle(location, size, Particle.CRIT_MAGIC);\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u51fa\u3059\u3088\uff01\n     *\n     * @param location \u3060\u3059\u3068\u3053\n     * @param size     \u3060\u3059\u308a\u3087\u30fc\n     * @param particle \u7a2e\u985e\n     */\n    public static void particle(Location location, int size, Particle particle)\n    {\n        location.getWorld().spawnParticle(\n            particle,\n            location,\n            size,\n            0,\n            0,\n            0,\n            0.001\n        ); //XXX: \u8ab0\u3060\u3088\u3053\u3093\u306a\u5f15\u6570\u591a\u304f\u8a2d\u8a08\u3057\u305f\u3084\u3064\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u51fa\u3059\u3088\uff01\n     *\n     * @param location \u3060\u3059\u3068\u3053\n     */\n    public static void particle(Location location)\n    {\n        particle(location, 5);\n    }\n\n    /**\n     * \u7dda\u3092\u5f15\u304f\u3088\uff01\n     *\n     * @param path \u958b\u59cb\u4f4d\u7f6e\n     * @param to   \u7d42\u4e86\u4f4d\u7f6e\n     */\n    public static void line(Location path, Location to)\n    {\n        line(path, to, Particle.ENCHANTMENT_TABLE);\n    }\n\n    /**\n     * \u7dda\u3092\u5f15\u304f\u3088\uff01\n     *\n     * @param path \u958b\u59cb\u4f4d\u7f6e\n     * @param to   \u7d42\u4e86\u4f4d\u7f6e\n     * @param p    \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\n     */\n    public static void line(Location path, Location to, Particle p)\n    {\n        double distance = path.distance(to);\n\n        Vector vP = path.toVector();\n        Vector tP = to.toVector();\n\n        Vector line = tP.clone().subtract(vP).normalize().multiply(0.2);\n\n        for (double d = 0; distance > d; )\n        {\n            vP.add(line);\n            particle(vP.toLocation(path.getWorld()), 1, p);\n            d += 0.2;\n        }\n    }\n\n    /**\n     * \u3048\u3093\n     *\n     * @param center \u771f\u3093\u4e2d\u306e\u4f4d\u7f6e\n     * @param count  \u30ab\u30a6\u30f3\u30c8\uff01\n     * @param radius \u306f\u3093\u3051\u30fc\n     */\n    public static void circle(Location center, int count, double radius)\n    {\n        Location n = new Location(\n            center.getWorld(),\n            particle_x(count, radius) + center.getX(),\n            center.getY(),\n            particle_z(count, radius) + center.getZ()\n        );\n\n        particle(n);\n\n    }\n\n    /**\n     * \u3048\u3093\n     *\n     * @param center   \u771f\u3093\u4e2d\u306e\u4f4d\u7f6e\n     * @param count    \u30ab\u30a6\u30f3\u30c8\uff01\n     * @param radius   \u306f\u3093\u3051\u30fc\n     * @param particle \u3071\u30fc\u3066\u3043\u304f\u308b\n     */\n    public static void circle(Location center, int count, double radius, Particle particle)\n    {\n        Location n = new Location(\n            center.getWorld(),\n            particle_x(count, radius) + center.getX(),\n            center.getY(),\n            particle_z(count, radius) + center.getZ()\n        );\n\n        particle(n, 5, particle);\n\n    }\n\n    /**\n     * \u307e\u307b\u30fc\u3058\u3093\uff01\uff01\n     *\n     * @param player  \u990c\u98df\n     * @param seconds \u79d2\u6570\n     */\n    public static void magic(Player player, int seconds)\n    {\n        final int[] count = {0};\n        WaveCreator wave = new WaveCreator(0.8, 1.8, 0.1);\n\n        BukkitRunnable runnable = new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                for (double i = 0; i < Math.PI * 2; i++)\n                {\n                    Location center = player.getLocation();\n\n                    circle(center.clone().add(0, 0.9, 0), count[0], 3, Particle.CRIT);\n\n                    circle(center.add(0, 0.7, 0), count[0], 2.7, Particle.ENCHANTMENT_TABLE);\n\n                    circle(center.clone().add(0, wave.get(0.01, false), 0), count[0], wave.getStatic());\n\n                    circle(center.clone().add(3.2, 0.7, 3.2), count[0], 1.5);\n                    circle(center.clone().add(-3.2, 0.7, -3.2), count[0], 1.5);\n                    circle(center.clone().add(-3.2, 0.7, 3.2), count[0], 1.5);\n                    circle(center.clone().add(3.2, 0.7, -3.2), count[0], 1.5);\n\n                    circle(center.clone().add(0, 1.5, 0), count[0], 5, Particle.SPELL_WITCH);\n\n                    count[0]++;\n                }\n\n                Location center = player.getLocation();\n\n                line(center.clone().add(3, 0.7, 0), center.clone().add(-1.5, 0.7, 2.3));\n                line(center.clone().add(-1.5, 0.7, 2.3), center.clone().add(-1.5, 0.7, -2.3)); //\u4e09\u89d2\n                line(center.clone().add(3, 0.7, 0), center.clone().add(-1.5, 0.7, -2.3));\n\n                line(center.clone().add(-3, 0.7, 0), center.clone().add(1.5, 0.7, -2.3));\n                line(center.clone().add(1.5, 0.7, -2.3), center.clone().add(1.5, 0.7, 2.3)); //\u4e09\u89d2(\u53cd\u8ee2)\n                line(center.clone().add(-3, 0.7, 0), center.clone().add(1.5, 0.7, 2.3));\n            }\n        };\n\n        runnable.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0L, 1L);\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                runnable.cancel();\n            }\n        }.runTaskLater(PeyangSuperbAntiCheat.getPlugin(), seconds);\n\n    }\n\n    /**\n     * \u30ac\u30fc\u30c7\u30a3\u30a2\u30f3\u30d3\u30fc\u30e0\n     *\n     * @param player \u990c\u98df\n     * @param sec    \u79d2\u6570\n     */\n    public static void laser(Player player, int sec)\n    {\n\n        final double[] time = {0.0};\n        final double radius = 2.5;\n\n        BukkitRunnable runnable = new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                Location c = player.getLocation().clone();\n                Location X = new Location(c.getWorld(), particle_x(time[0], radius) + c.getX(), 5.0 + c.getY(), particle_z(time[0], radius) + c.getZ());\n\n                for (int i = 0; i < 10; i++)\n                    line(c, X, Particle.TOWN_AURA);\n                time[0] += Math.E;\n            }\n        };\n\n        runnable.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0L, 1L);\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                runnable.cancel();\n            }\n        }.runTaskLater(PeyangSuperbAntiCheat.getPlugin(), sec);\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306eZ\u3002\n     *\n     * @param time   \u6642\u9593\u3002\n     * @param radius \u534a\u5f84\u3002\n     * @return \u4f4d\u7f6e\u3002\n     */\n    private static double particle_z(double time, double radius)\n    {\n        return Math.sin(time) * radius * Math.cos(Math.PI / 180 * 360.0);\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306eX\n     *\n     * @param time   \u6642\u9593\u3002\n     * @param radius \u534a\u5f84\u3002\n     * @return \u4f4d\u7f6e\u3002\n     */\n    private static double particle_x(double time, double radius)\n    {\n        return Math.cos(time) * radius;\n    }\n\n    /**\n     * \u30c7\u30b3\u8981\u7d20\u3059\u3079\u3066\u5c55\u958b\u3059\u308b\u3084\u3064\n     *\n     * @param player \u88ab\u9a13\u8005\n     */\n    public static void decoration(Player player)\n    {\n        if (Variables.config.getBoolean(\"decoration.flame\"))\n            flame(player, Math.multiplyExact(Variables.config.getInt(\"kick.delay\"), 20));\n        if (Variables.config.getBoolean(\"decoration.circle\"))\n            magic(player, Math.multiplyExact(Variables.config.getInt(\"kick.delay\"), 20));\n        if (Variables.config.getBoolean(\"decoration.laser\"))\n            laser(player, Math.multiplyExact(Variables.config.getInt(\"kick.delay\"), 20));\n    }\n\n}\n",
                    "src/main/java/ml/peya/plugins/Detect/NPCTeleport.java": "package ml.peya.plugins.Detect;\n\nimport com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\nimport ml.peya.plugins.DetectClasses.*;\nimport ml.peya.plugins.Enum.*;\nimport ml.peya.plugins.*;\nimport net.minecraft.server.v1_12_R1.*;\nimport org.bukkit.*;\nimport org.bukkit.command.*;\nimport org.bukkit.craftbukkit.v1_12_R1.entity.*;\nimport org.bukkit.entity.*;\nimport org.bukkit.metadata.*;\nimport org.bukkit.scheduler.*;\n\nimport java.util.*;\n\nimport static ml.peya.plugins.Utils.MessageEngine.get;\nimport static ml.peya.plugins.Variables.cheatMeta;\nimport static ml.peya.plugins.Variables.config;\n\n/**\n * NPC\u306eTeleport\u3092\u7ba1\u7406\u3059\u308b\u3002\n */\npublic class NPCTeleport\n{\n    /**\n     * \u30c6\u30ec\u30dd\u30fc\u30c8\u30a9\uff01\n     *\n     * @param player    \u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @param target    \u30bf\u30fc\u30b2\u30c3\u30c8\u3002\n     * @param arm       \u9632\u5177\u3002\n     * @param tpCase    \u30c6\u30ec\u30dd\u30fc\u30c8\u30b1\u30fc\u30b9\u3002\n     * @param reachMode \u30ea\u30fc\u30c1\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3002\n     */\n    public static void teleport(Player player, EntityPlayer target, ItemStack[] arm, DetectType tpCase, boolean reachMode)\n    {\n        switch (tpCase)\n        {\n            case AURA_BOT:\n                auraBotTeleport(player, target, arm, reachMode);\n                break;\n            case AURA_PANIC:\n                auraPanic_teleport(player, target, arm, tpCase.getPanicCount(), tpCase.getSender(), reachMode);\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected value: \" + tpCase);\n        }\n    }\n\n    /**\n     * Aurapanic\u306e\u30c6\u30ec\u30dd\u30fc\u30c8\u3002\n     *\n     * @param player    \u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @param target    \u30bf\u30fc\u30b2\u30c3\u30c8\u3002\n     * @param arm       \u88c5\u5099\u3002\n     * @param count     \u56de\u6570\u3002\n     * @param sender    \u30a4\u30d9\u30f3\u30c8sender\u3002\n     * @param reachMode \u30ea\u30fc\u30c1\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3002\n     */\n    private static void auraPanic_teleport(Player player, EntityPlayer target, ItemStack[] arm, int count, CommandSender sender, boolean reachMode)\n    {\n        final double range = reachMode ? config.getDouble(\"npc.reachPanicRange\"): config.getDouble(\"npc.panicRange\");\n        final double[] clt = {0.0};\n        final int[] now = {0};\n\n        PlayerConnection connection = ((CraftPlayer) player).getHandle().playerConnection;\n\n        int sec = config.getInt(\"npc.seconds\");\n\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                now[0]++;\n\n                connection.sendPacket(new PacketPlayOutAnimation(((CraftPlayer) player).getHandle(), 1));\n\n                HashMap<String, Object> map = new HashMap<>();\n                map.put(\"hit\", now[0]);\n                map.put(\"max\", count);\n\n                sender.sendMessage(get(\"message.auraCheck.panic.lynx\", map));\n                if (now[0] >= count)\n                    this.cancel();\n            }\n        }.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0, (long) (10 * ((1.5 / count) * sec)));\n\n\n        new BukkitRunnable()\n        {\n            public void run()\n            {\n                for (double i = 0; i < Math.PI * 2; i++)\n                {\n                    Location center = player.getLocation();\n\n                    if (center.getPitch() <= 0.0f || center.getPitch() > 15.0f)\n                        center.setPitch(0.0f);\n\n                    Location n = center.add(center.getDirection().multiply(0 - range));\n\n                    n.setY(center.getY() + range);\n\n                    n.setPitch(50);\n\n                    float head = ((CraftPlayer) player).getHandle().getHeadRotation() * 0.5f;\n\n                    if (head < 0)\n                        head *= 2;\n\n                    NPC.setLocation(n, target);\n                    connection.sendPacket(new PacketPlayOutEntityTeleport(target));\n                    connection.sendPacket(new PacketPlayOutEntityHeadRotation(target, (byte) head));\n\n                    NPC.setArmor(player, target, arm);\n                    float finalHead = head;\n                    new BukkitRunnable()\n                    {\n                        @Override\n                        public void run()\n                        {\n                            Bukkit.getOnlinePlayers().parallelStream().filter(p -> p.hasPermission(\"psac.viewnpc\"))\n                                .forEachOrdered(p ->\n                                {\n                                    ((CraftPlayer) p).getHandle().playerConnection\n                                        .sendPacket(new PacketPlayOutEntityTeleport(target));\n                                    ((CraftPlayer) p).getHandle().playerConnection\n                                        .sendPacket(new PacketPlayOutEntityHeadRotation(target, (byte) finalHead));\n                                    NPC.setArmor(p, target, arm);\n                                });\n                            this.cancel();\n                        }\n                    }.runTask(PeyangSuperbAntiCheat.getPlugin());\n                }\n\n                clt[0] += 0.035;\n                if (clt[0] >= sec)\n                {\n                    Variables.logger.info(\"Finished\");\n                    this.cancel();\n                }\n            }\n        }.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0, 1);\n    }\n\n    /**\n     * AuraBot\u306e\u30c6\u30ec\u30dd\u30fc\u30c8\u3002\n     *\n     * @param player    \u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @param target    \u30bf\u30fc\u30b2\u30c3\u30c8\u3002\n     * @param arm       \u88c5\u5099\u3002\n     * @param reachMode \u30ea\u30fc\u30c1\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3002\n     */\n    private static void auraBotTeleport(Player player, EntityPlayer target, ItemStack[] arm, boolean reachMode)\n    {\n        final double[] time = {0.0};\n        final double radius = reachMode ? config.getDouble(\"npc.reachRange\"): config.getDoubleList(\"npc.range\")\n            .get(new Random().nextInt(config.getDoubleList(\"npc.range\").size()));\n\n        WaveCreator ypp = new WaveCreator(10.0, 100.0, 10.0);\n\n        final int[] count = {0};\n        BukkitRunnable r = new BukkitRunnable()\n        {\n            public void run()\n            {\n                double speed = 0.0;\n\n                if (player.hasMetadata(\"speed\"))\n                    for (MetadataValue value : player.getMetadata(\"speed\"))\n                        if (value.getOwningPlugin().getName().equals(PeyangSuperbAntiCheat.getPlugin().getName()))\n                            speed = value.asDouble() * 2.0;\n                for (double i = 0; i < Math.PI * 2; i++)\n                {\n                    double rangeTmp = radius;\n\n                    if (config.getBoolean(\"npc.wave\"))\n                        rangeTmp = new WaveCreator(radius - 0.1, radius, config.getDouble(\"npc.waveMin\"))\n                            .get(0.01, true);\n\n                    final Location center = player.getLocation();\n                    final Location n = new Location(\n                        center.getWorld(),\n                        auraBotXPos(time[0], rangeTmp + speed) + center.getX(),\n                        center.getY() + new WaveCreator(1.0, 2.0, 0.0).get(0.01, count[0] < 20),\n                        auraBotZPos(time[0], rangeTmp + speed) + center.getZ(),\n                        (float) ypp.getStatic(),\n                        (float) ypp.get(4.5, false)\n                    );\n\n                    NPC.setLocation(n, target);\n                    ((CraftPlayer) player).getHandle().playerConnection\n                        .sendPacket(new PacketPlayOutEntityTeleport(target));\n\n                    NPC.setArmor(player, target, arm);\n                    new BukkitRunnable()\n                    {\n                        @Override\n                        public void run()\n                        {\n                            Bukkit.getOnlinePlayers()\n                                .parallelStream()\n                                .filter(p -> p.hasPermission(\"psac.viewnpc\"))\n                                .forEachOrdered(p ->\n                                {\n                                    ((CraftPlayer) p).getHandle().playerConnection\n                                        .sendPacket(new PacketPlayOutEntityTeleport(target));\n                                    NPC.setArmor(p, target, arm);\n                                });\n                            this.cancel();\n                        }\n                    }.runTask(PeyangSuperbAntiCheat.getPlugin());\n                    count[0]++;\n                    CheatDetectNowMeta meta = cheatMeta.getMetaByPlayerUUID(player.getUniqueId());\n                    if (meta == null) continue;\n                    meta.setNpcLocation(n.toVector());\n                }\n                time[0] += config.getDouble(\"npc.time\") + (config.getBoolean(\"npc.speed.wave\")\n                    ? new WaveCreator(0.0, config.getDouble(\"npc.speed.waveRange\"), 0 - config.getDouble(\"npc.speed.waveRange\")).get(0.001, true)\n                    : 0.0);\n            }\n        };\n        r.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0, 1);\n\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                r.cancel();\n                this.cancel();\n            }\n        }.runTaskLater(PeyangSuperbAntiCheat.getPlugin(), 20 * (config.getLong(\"npc.seconds\")));\n\n    }\n\n    /**\n     * Aurabot\u306ez\u8ef8\u3092\u7b97\u51fa\u3059\u308b\u3002\n     *\n     * @param time   \u6642\u9593\u3002\n     * @param radius \u534a\u5f84\u3002\n     * @return \u4f4d\u7f6e\u3002\n     */\n    private static double auraBotZPos(double time, double radius)\n    {\n        return Math.sin(time) * radius * Math.cos(Math.PI / 180 * 360.0);\n    }\n\n    /**\n     * Aurabot\u306ex\u8ef8\u3092\u7b97\u51fa\u3059\u308b\u3002\n     *\n     * @param time   \u6642\u9593\u3002\n     * @param radius \u534a\u5f84\u3002\n     * @return \u4f4d\u7f6e\u3002\n     */\n    private static double auraBotXPos(double time, double radius)\n    {\n        return Math.cos(time) * radius;\n    }\n}\n",
                    "src/main/java/ml/peya/plugins/Utils/PlayerUtils.java": "package ml.peya.plugins.Utils;\n\nimport com.mojang.authlib.GameProfile;\nimport com.mojang.authlib.properties.Property;\nimport net.minecraft.server.v1_12_R1.EntityPlayer;\nimport net.minecraft.server.v1_12_R1.PlayerInteractManager;\nimport net.minecraft.server.v1_12_R1.WorldServer;\nimport org.apache.commons.lang.RandomStringUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.bukkit.Bukkit;\nimport org.bukkit.Location;\nimport org.bukkit.OfflinePlayer;\nimport org.bukkit.World;\nimport org.bukkit.block.Block;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.craftbukkit.v1_12_R1.CraftServer;\nimport org.bukkit.craftbukkit.v1_12_R1.CraftWorld;\nimport org.bukkit.entity.Entity;\nimport org.bukkit.entity.EntityType;\nimport org.bukkit.entity.Player;\nimport org.bukkit.potion.PotionEffectType;\nimport org.bukkit.util.BlockIterator;\n\nimport javax.annotation.Nullable;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\nimport static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\nimport static ml.peya.plugins.Variables.skin;\n\n/**\n * \u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u95a2\u3057\u3066\u307e\u3068\u3081\u305f\u3084\u3064\uff01\n */\npublic class PlayerUtils\n{\n    /**\n     * \u8ab0\u304c\u898b\u3066\u308b\u306e\u304b\u308f\u304b\u308b\u3084\u3064\u3002\n     *\n     * @param player \u898b\u3089\u308c\u3066\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @return \u898b\u3066\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     */\n    public static Player getLookingEntity(Player player)\n    {\n        for (Location location : player.getLineOfSight(null, 4).parallelStream().map(Block::getLocation)\n            .collect(Collectors.toCollection(ArrayList::new)))\n            for (Entity entity : player.getNearbyEntities(3.5, 3.5, 3.5))\n                if (isLooking((Player) entity, location) && entity.getType() == EntityType.PLAYER)\n                    return (Player) entity;\n\n        return null;\n    }\n\n    /**\n     * \u4eca\u898b\u3066\u308b\u304b\u308f\u304b\u308b\u3084\u3064\u3002\n     *\n     * @param player   \u898b\u3089\u308c\u3066\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @param location \u3042\u3068\u5834\u6240\u3002\n     * @return \u898b\u3089\u308c\u3066\u305f\u3089true\u3002\n     */\n    public static boolean isLooking(Player player, Location location)\n    {\n        BlockIterator it = new BlockIterator(player, 4);\n\n        while (it.hasNext())\n        {\n            final Block block = it.next();\n            if (block.getX() == location.getBlockX() &&\n                block.getY() == location.getBlockY() &&\n                block.getZ() == location.getBlockZ())\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * \u3081\u3063\u3061\u3083\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u3055\u308c\u305f\u3088\u3049\u3075\u3048\u3048\u3048\u3048\u3048\u3047\u3047\u3047\u3063\u3066\u3044\u3046\u306e\u78ba\u8a8d\u3059\u308b\u3084\u3064\n     *\n     * @param player \u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30a5\uff01\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @return \u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u8b66\u5bdf\u304c\u53cd\u5fdc\u3057\u305f\u3089true\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n     */\n    public static boolean hasCritical(Player player)\n    {\n        return player.getFallDistance() > 0.0F &&\n            !player.getLocation().getBlock().isLiquid() &&\n            !player.isOnGround() &&\n            !player.hasPotionEffect(PotionEffectType.BLINDNESS) &&\n            player.getVehicle() == null;\n    }\n\n    /**\n     * \u30ef\u30fc\u30eb\u30c9\u5185\u306b\u65b0\u3057\u3044\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u634f\u9020\u3057\u3066\u3001{@code EntityPlayer}\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n     *\n     * @param world \u30ef\u30fc\u30eb\u30c9\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u5f15\u6570\u3002\n     * @return \u5275\u9020\u3055\u308c\u305f\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     */\n    public static EntityPlayer getRandomPlayer(World world)\n    {\n        Random random = new Random();\n        String first = random.nextBoolean()\n            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)\n            : RandomWordUtils.getRandomWord();\n        String last = random.nextBoolean()\n            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)\n            : RandomWordUtils.getRandomWord();\n\n        if (random.nextBoolean())\n        {\n            first = convert(first);\n            last = convert(last);\n        }\n\n        String name = first + (random.nextBoolean() ? \"_\": \"\") + last + (random.nextBoolean() ? \"19\" + random.nextInt(120): \"\");\n        if (name.length() > 16)\n            name = random.nextBoolean() ? first: last;\n\n        if (name.length() > 16)\n            name = RandomStringUtils.randomAlphanumeric(random.nextInt(16));\n\n        WorldServer worldServer = ((CraftWorld) world).getHandle();\n\n        Pair<String, String> skin = getRandomSkin();\n\n        GameProfile profile = new GameProfile(UUID.randomUUID(), name);\n\n        profile.getProperties().put(\"textures\", new Property(\"textures\", skin.getLeft(), skin.getRight()));\n\n        return new EntityPlayer(\n            ((CraftServer) Bukkit.getServer()).getServer(),\n            worldServer,\n            profile,\n            new PlayerInteractManager(worldServer)\n        );\n    }\n\n    /**\n     * \u30e9\u30f3\u30c0\u30e0\u30b9\u30ad\u30f3\u3092\u30d1\u30d1\u30e9\u30c3\u30c1\u3057\u307e\u3059\u3002\n     *\n     * @return \u3059\u304d\u3093\n     */\n    public static Pair<String, String> getRandomSkin()\n    {\n        try (Connection connection = skin.getConnection();\n             Statement statement = connection.createStatement())\n        {\n            ResultSet result = statement.executeQuery(\"SELECT Texture, Signature FROM Skin ORDER BY RANDOM() LIMIT 1\");\n            return !result.next()\n                ? Pair.of(\"\", \"\")\n                : Pair.of(result.getString(\"Texture\"), result.getString(\"Signature\"));\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n            Utils.errorNotification(Utils.getStackTrace(e));\n            return Pair.of(\"\", \"\");\n        }\n    }\n\n    /**\n     * \u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u53d6\u5f97\u3059\u308b\u3002\u305f\u3076\u3093\u3002\n     *\n     * @param sender \u30a4\u30d9\u30f3\u30c8\u30bb\u30f3\u30c0\u30fc\u3002\n     * @param name   \u306a\u307e\u3048\n     * @return Player\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u305f\u5834\u5408null\u3002\n     */\n    @Nullable\n    public static Player getPlayer(CommandSender sender, String name)\n    {\n        Player player = Bukkit.getPlayer(name);\n\n        if (player == null)\n        {\n            sender.sendMessage(get(\"error.playerNotFound\"));\n\n            return null;\n        }\n        return player;\n    }\n\n    /**\n     * \u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059(\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u3082\u53ef)\n     *\n     * @return \u53d6\u5f97\u3057\u305f\u30d7\u30ec\u30a4\u30e4\u30fc\n     */\n    public static Player getPlayerAllowOffline(String playerName)\n    {\n        Player player = Bukkit.getPlayer(playerName);\n        if (player == null)\n        {\n            for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())\n            {\n                if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))\n                    player = offlinePlayer.getPlayer();\n            }\n        }\n\n        return player;\n    }\n\n    /**\n     * \u30aa\u30d5\u30e9\u30a4\u30f3\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059\n     *\n     * @return \u53d6\u5f97\u3057\u305f\u30d7\u30ec\u30a4\u30e4\u30fc\n     */\n    public static OfflinePlayer getOfflinePlayer(String playerName)\n    {\n        for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())\n        {\n            if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))\n                return offlinePlayer;\n        }\n        return null;\n    }\n}\n"
                },
                "compile_error_details": {
                    "src/main/java/ml/peya/plugins/Learn/Neuron.java": {
                        "5": {
                            "lines": [
                                {
                                    "line_no": 4,
                                    "content": ""
                                },
                                {
                                    "line_no": 5,
                                    "content": "import static com.github.p2pdevelop.peyangsuperlibrary.LearnMath.sigmoid;"
                                },
                                {
                                    "line_no": 6,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[5,55] package com.github.p2pdevelop.peyangsuperlibrary does not exist\n",
                                "[5,1] static import only from classes and interfaces\n"
                            ]
                        },
                        "50": {
                            "lines": [
                                {
                                    "line_no": 49,
                                    "content": "        inputData.parallelStream().forEachOrdered(input -> input(input.getWeightingValue()));"
                                },
                                {
                                    "line_no": 50,
                                    "content": "        setValue(sigmoid(sum));"
                                },
                                {
                                    "line_no": 51,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[50,18] cannot find symbol\nsymbol: method sigmoid(double)\nlocation: class ml.peya.plugins.Learn.Neuron\n",
                                "[50,18] cannot find symbol\n"
                            ]
                        }
                    },
                    "src/main/java/ml/peya/plugins/Utils/PlayerUtils.java": {
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": ""
                                },
                                {
                                    "line_no": 33,
                                    "content": "import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;"
                                },
                                {
                                    "line_no": 34,
                                    "content": "import static ml.peya.plugins.Variables.skin;"
                                }
                            ],
                            "error_texts": [
                                "[33,1] static import only from classes and interfaces\n",
                                "[33,55] package com.github.p2pdevelop.peyangsuperlibrary does not exist\n"
                            ]
                        },
                        "113": {
                            "lines": [
                                {
                                    "line_no": 112,
                                    "content": "        {"
                                },
                                {
                                    "line_no": 113,
                                    "content": "            first = convert(first);"
                                },
                                {
                                    "line_no": 114,
                                    "content": "            last = convert(last);"
                                }
                            ],
                            "error_texts": [
                                "[113,21] cannot find symbol\n",
                                "[113,21] cannot find symbol\nsymbol: method convert(java.lang.String)\nlocation: class ml.peya.plugins.Utils.PlayerUtils\n"
                            ]
                        },
                        "114": {
                            "lines": [
                                {
                                    "line_no": 113,
                                    "content": "            first = convert(first);"
                                },
                                {
                                    "line_no": 114,
                                    "content": "            last = convert(last);"
                                },
                                {
                                    "line_no": 115,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[114,20] cannot find symbol\n",
                                "[114,20] cannot find symbol\nsymbol: method convert(java.lang.String)\nlocation: class ml.peya.plugins.Utils.PlayerUtils\n"
                            ]
                        },
                        "177": {
                            "lines": [
                                {
                                    "line_no": 176,
                                    "content": "        {"
                                },
                                {
                                    "line_no": 177,
                                    "content": "            sender.sendMessage(get(\"error.playerNotFound\"));"
                                },
                                {
                                    "line_no": 178,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[177,32] cannot find symbol\n",
                                "[177,32] cannot find symbol\nsymbol: method get(java.lang.String)\nlocation: class ml.peya.plugins.Utils.PlayerUtils\n"
                            ]
                        }
                    },
                    "src/main/java/ml/peya/plugins/Objects/Decorations.java": {
                        "3": {
                            "lines": [
                                {
                                    "line_no": 2,
                                    "content": ""
                                },
                                {
                                    "line_no": 3,
                                    "content": "import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;"
                                },
                                {
                                    "line_no": 4,
                                    "content": "import ml.peya.plugins.PeyangSuperbAntiCheat;"
                                }
                            ],
                            "error_texts": [
                                "[3,48] package com.github.p2pdevelop.peyangsuperlibrary does not exist\n"
                            ]
                        },
                        "185": {
                            "lines": [
                                {
                                    "line_no": 184,
                                    "content": "        final int[] count = {0};"
                                },
                                {
                                    "line_no": 185,
                                    "content": "        WaveCreator wave = new WaveCreator(0.8, 1.8, 0.1);"
                                },
                                {
                                    "line_no": 186,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[185,32] cannot find symbol\n",
                                "[185,9] cannot find symbol\n",
                                "[185,32] cannot find symbol\nsymbol: class WaveCreator\nlocation: class ml.peya.plugins.Objects.Decorations\n",
                                "[185,9] cannot find symbol\nsymbol: class WaveCreator\nlocation: class ml.peya.plugins.Objects.Decorations\n"
                            ]
                        }
                    },
                    "src/main/java/ml/peya/plugins/Detect/NPCTeleport.java": {
                        "3": {
                            "lines": [
                                {
                                    "line_no": 2,
                                    "content": ""
                                },
                                {
                                    "line_no": 3,
                                    "content": "import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;"
                                },
                                {
                                    "line_no": 4,
                                    "content": "import ml.peya.plugins.DetectClasses.*;"
                                }
                            ],
                            "error_texts": [
                                "[3,48] package com.github.p2pdevelop.peyangsuperlibrary does not exist\n"
                            ]
                        },
                        "161": {
                            "lines": [
                                {
                                    "line_no": 160,
                                    "content": ""
                                },
                                {
                                    "line_no": 161,
                                    "content": "        WaveCreator ypp = new WaveCreator(10.0, 100.0, 10.0);"
                                },
                                {
                                    "line_no": 162,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[161,9] cannot find symbol\n",
                                "[161,31] cannot find symbol\n",
                                "[161,31] cannot find symbol\nsymbol: class WaveCreator\nlocation: class ml.peya.plugins.Detect.NPCTeleport\n",
                                "[161,9] cannot find symbol\nsymbol: class WaveCreator\nlocation: class ml.peya.plugins.Detect.NPCTeleport\n"
                            ]
                        },
                        "179": {
                            "lines": [
                                {
                                    "line_no": 178,
                                    "content": "                    if (config.getBoolean(\"npc.wave\"))"
                                },
                                {
                                    "line_no": 179,
                                    "content": "                        rangeTmp = new WaveCreator(radius - 0.1, radius, config.getDouble(\"npc.waveMin\"))"
                                },
                                {
                                    "line_no": 180,
                                    "content": "                            .get(0.01, true);"
                                }
                            ],
                            "error_texts": [
                                "[179,40] cannot find symbol\n",
                                "[179,40] cannot find symbol\nsymbol: class WaveCreator\n"
                            ]
                        },
                        "186": {
                            "lines": [
                                {
                                    "line_no": 185,
                                    "content": "                        auraBotXPos(time[0], rangeTmp + speed) + center.getX(),"
                                },
                                {
                                    "line_no": 186,
                                    "content": "                        center.getY() + new WaveCreator(1.0, 2.0, 0.0).get(0.01, count[0] < 20),"
                                },
                                {
                                    "line_no": 187,
                                    "content": "                        auraBotZPos(time[0], rangeTmp + speed) + center.getZ(),"
                                }
                            ],
                            "error_texts": [
                                "[186,45] cannot find symbol\nsymbol: class WaveCreator\n",
                                "[186,45] cannot find symbol\n"
                            ]
                        },
                        "220": {
                            "lines": [
                                {
                                    "line_no": 219,
                                    "content": "                time[0] += config.getDouble(\"npc.time\") + (config.getBoolean(\"npc.speed.wave\")"
                                },
                                {
                                    "line_no": 220,
                                    "content": "                    ? new WaveCreator(0.0, config.getDouble(\"npc.speed.waveRange\"), 0 - config.getDouble(\"npc.speed.waveRange\")).get(0.001, true)"
                                },
                                {
                                    "line_no": 221,
                                    "content": "                    : 0.0);"
                                }
                            ],
                            "error_texts": [
                                "[220,27] cannot find symbol\n",
                                "[220,27] cannot find symbol\nsymbol: class WaveCreator\n"
                            ]
                        }
                    }
                }
            },
            "error": "cannot find symbol\n",
            "span_id": 16261452789536754202
        },
        {
            "input": "```diff\n--- src/main/java/ml/peya/plugins/Learn/Neuron.java\n+++ src/main/java/ml/peya/plugins/Learn/Neuron.java\n@@\n-import static develop.p2p.lib.LearnMath.sigmoid;\n+import static com.github.p2pdevelop.peyangsuperlibrary.LearnMath.sigmoid;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Objects/Decorations.java\n+++ src/main/java/ml/peya/plugins/Objects/Decorations.java\n@@\n-import develop.p2p.lib.WaveCreator;\n+import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n+++ src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n@@\n-import develop.p2p.lib.*;\n+import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n+++ src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n@@\n-import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\n+import static ml.peya.plugins.Utils.MessageEngine.get;\n@@\n-            first = convert(first);\n-            last = convert(last);\n+            first = develop.p2p.lib.LeetConverter.convert(first);\n+            last = develop.p2p.lib.LeetConverter.convert(last);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
            "span_id": 12355864443290373741
        },
        {
            "input": "```diff\n--- src/main/java/ml/peya/plugins/Learn/Neuron.java\n+++ src/main/java/ml/peya/plugins/Learn/Neuron.java\n@@\n-import static develop.p2p.lib.LearnMath.sigmoid;\n+import static com.github.p2pdevelop.peyangsuperlibrary.LearnMath.sigmoid;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Objects/Decorations.java\n+++ src/main/java/ml/peya/plugins/Objects/Decorations.java\n@@\n-import develop.p2p.lib.WaveCreator;\n+import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n+++ src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n@@\n-import develop.p2p.lib.*;\n+import com.github.p2pdevelop.peyangsuperlibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n+++ src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n@@\n-import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\n+import static ml.peya.plugins.Utils.MessageEngine.get;\n@@\n-            first = convert(first);\n-            last = convert(last);\n+            first = develop.p2p.lib.LeetConverter.convert(first);\n+            last = develop.p2p.lib.LeetConverter.convert(last);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
            "span_id": 4075745074999745888
        },
        {
            "input": "```diff\n--- src/main/java/ml/peya/plugins/Learn/Neuron.java\n+++ src/main/java/ml/peya/plugins/Learn/Neuron.java\n@@\n-import static develop.p2p.lib.LearnMath.sigmoid;\n+import static com.github.P2P_Develop.PeyangSuperLibrary.LearnMath.sigmoid;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Objects/Decorations.java\n+++ src/main/java/ml/peya/plugins/Objects/Decorations.java\n@@\n-import develop.p2p.lib.WaveCreator;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n+++ src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n@@\n-import develop.p2p.lib.*;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n+++ src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n@@\n-import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\n+import static ml.peya.plugins.Utils.MessageEngine.get;\n@@\n-            first = convert(first);\n-            last = convert(last);\n+            first = develop.p2p.lib.LeetConverter.convert(first);\n+            last = develop.p2p.lib.LeetConverter.convert(last);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
            "span_id": 5565403144917531299
        },
        {
            "input": "```diff\n--- src/main/java/ml/peya/plugins/Learn/Neuron.java\n+++ src/main/java/ml/peya/plugins/Learn/Neuron.java\n@@\n-import static develop.p2p.lib.LearnMath.sigmoid;\n+import static com.github.P2P_Develop.PeyangSuperLibrary.LearnMath.sigmoid;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Objects/Decorations.java\n+++ src/main/java/ml/peya/plugins/Objects/Decorations.java\n@@\n-import develop.p2p.lib.WaveCreator;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n+++ src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n@@\n-import develop.p2p.lib.*;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n+++ src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n@@\n-import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\n+import static ml.peya.plugins.Utils.MessageEngine.get;\n@@\n-            first = convert(first);\n-            last = convert(last);\n+            first = develop.p2p.lib.LeetConverter.convert(first);\n+            last = develop.p2p.lib.LeetConverter.convert(last);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
            "span_id": 2391269971788117074
        },
        {
            "input": "```diff\n--- src/main/java/ml/peya/plugins/Learn/Neuron.java\n+++ src/main/java/ml/peya/plugins/Learn/Neuron.java\n@@\n-import static develop.p2p.lib.LearnMath.sigmoid;\n+import static com.github.P2P_Develop.PeyangSuperLibrary.LearnMath.sigmoid;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Objects/Decorations.java\n+++ src/main/java/ml/peya/plugins/Objects/Decorations.java\n@@\n-import develop.p2p.lib.WaveCreator;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n+++ src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n@@\n-import develop.p2p.lib.*;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n+++ src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n@@\n-import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\n+import static ml.peya.plugins.Utils.MessageEngine.get;\n@@\n-            first = convert(first);\n-            last = convert(last);\n+            first = develop.p2p.lib.LeetConverter.convert(first);\n+            last = develop.p2p.lib.LeetConverter.convert(last);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
            "span_id": 6038358024473151893
        },
        {
            "input": "```diff\n--- src/main/java/ml/peya/plugins/Learn/Neuron.java\n+++ src/main/java/ml/peya/plugins/Learn/Neuron.java\n@@\n-import static develop.p2p.lib.LearnMath.sigmoid;\n+import static com.github.P2P_Develop.PeyangSuperLibrary.LearnMath.sigmoid;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Objects/Decorations.java\n+++ src/main/java/ml/peya/plugins/Objects/Decorations.java\n@@\n-import develop.p2p.lib.WaveCreator;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n+++ src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n@@\n-import develop.p2p.lib.*;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n+++ src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n@@\n-import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\n+import static ml.peya.plugins.Utils.MessageEngine.get;\n@@\n-            first = convert(first);\n-            last = convert(last);\n+            first = develop.p2p.lib.LeetConverter.convert(first);\n+            last = develop.p2p.lib.LeetConverter.convert(last);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
            "span_id": 11021380191075310975
        },
        {
            "input": "```diff\n--- src/main/java/ml/peya/plugins/Learn/Neuron.java\n+++ src/main/java/ml/peya/plugins/Learn/Neuron.java\n@@\n-import static develop.p2p.lib.LearnMath.sigmoid;\n+import static com.github.P2P_Develop.PeyangSuperLibrary.LearnMath.sigmoid;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Objects/Decorations.java\n+++ src/main/java/ml/peya/plugins/Objects/Decorations.java\n@@\n-import develop.p2p.lib.WaveCreator;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n+++ src/main/java/ml/peya/plugins/Detect/NPCTeleport.java\n@@\n-import develop.p2p.lib.*;\n+import com.github.P2P_Develop.PeyangSuperLibrary.WaveCreator;\n```\n```diff\n--- src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n+++ src/main/java/ml/peya/plugins/Utils/PlayerUtils.java\n@@\n-import static com.github.p2pdevelop.peyangsuperlibrary.LeetConverter.convert;\n+import static ml.peya.plugins.Utils.MessageEngine.get;\n@@\n-            first = convert(first);\n-            last = convert(last);\n+            first = develop.p2p.lib.LeetConverter.convert(first);\n+            last = develop.p2p.lib.LeetConverter.convert(last);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
                "updated_files": {},
                "compile_error_details": {}
            },
            "error": "Failed to prepare diffs: Diff is not valid, UnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Learn/Neuron.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Learn/Neuron.java does not contain these 1 exact lines in a row:\n```\nimport static develop.p2p.lib.LearnMath.sigmoid;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Objects/Decorations.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Objects/Decorations.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.WaveCreator;\n```\nUnifiedDiffNoMatch: hunk failed to apply!\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/main/java/ml/peya/plugins/Detect/NPCTeleport.java!\nMake extra sure the indentation is correct.\nsrc/main/java/ml/peya/plugins/Detect/NPCTeleport.java does not contain these 1 exact lines in a row:\n```\nimport develop.p2p.lib.*;\n```",
            "span_id": 749873752646244628
        }
    ],
    "read_file": [
        {
            "input": "src/main/java/ml/peya/plugins/Learn/Neuron.java",
            "output": "package ml.peya.plugins.Learn;\n\nimport java.util.ArrayList;\n\nimport static develop.p2p.lib.LearnMath.sigmoid;\n\n/**\n * \u91cd\u307f\u3092\u7a81\u3063\u8fbc\u3080\u5668\u3002\n */\npublic class Neuron\n{\n    /**\n     * \u52a0\u7b97\u3057\u305fWeight\u3002\n     */\n    private double sum;\n\n    /**\n     * \u5165\u529b\u7528\u5024\u3002\n     */\n    private double value = 0.0;\n\n    /**\n     * \u30b2\u30c3\u30bf\u30fc\u3002\n     *\n     * @return value\u53c2\u7167\u3002\n     */\n    public double getValue()\n    {\n        return value;\n    }\n\n    /**\n     * \u30bb\u30c3\u30bf\u30fc\u3002\n     *\n     * @param value value\u53c2\u7167\u3002\n     */\n    public void setValue(double value)\n    {\n        this.value = value;\n    }\n\n    /**\n     * ReLU\u95a2\u6570\u3067\u5024\u3092\u5f37\u3081\u3066\u51fa\u529b\u7cfb\u306b\u5165\u308c\u308b\u3002\n     *\n     * @param inputData Input\u30af\u30e9\u30b9\u306eArrayList\u30c7\u30fc\u30bf\u3002\n     */\n    public void input(ArrayList<Input> inputData)\n    {\n        inputData.parallelStream().forEachOrdered(input -> input(input.getWeightingValue()));\n        setValue(sigmoid(sum));\n    }\n\n    /**\n     * input(ArrayList)\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3002\n     *\n     * @param value sum\u306b\u52a0\u7b97\u3059\u308b\u5024\u3002\n     */\n    public void input(double value)\n    {\n        sum += value;\n    }\n}\n",
            "error": "",
            "span_id": 14562100007564082095
        },
        {
            "input": "src/main/java/ml/peya/plugins/Objects/Decorations.java",
            "output": "package ml.peya.plugins.Objects;\n\nimport develop.p2p.lib.WaveCreator;\nimport ml.peya.plugins.PeyangSuperbAntiCheat;\nimport ml.peya.plugins.Variables;\nimport org.bukkit.Location;\nimport org.bukkit.Particle;\nimport org.bukkit.entity.Player;\nimport org.bukkit.scheduler.BukkitRunnable;\nimport org.bukkit.util.Vector;\n\n/**\n * \u3067\u3053\u308c\u30fc\u3057\u3087\u3093\u2606\uff01\n */\npublic class Decorations\n{\n    /**\n     * \u96f7\n     *\n     * @param player \u990c\u98df\n     */\n    public static void lighting(Player player)\n    {\n        player.getWorld().strikeLightningEffect(player.getLocation());\n    }\n\n    /**\n     * Pit\u60f3\u50cf\u3057\u308d\n     *\n     * @param player  \u990c\u98df\n     * @param seconds \u79d2\u6570\n     */\n    public static void flame(Player player, int seconds)\n    {\n        final int[] sec = {0};\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                if (sec[0] > (seconds))\n                    this.cancel();\n\n                player.getWorld().spawnParticle(\n                    Particle.FLAME,\n                    player.getLocation().add(0, 0.5, 0),\n                    30,\n                    0,\n                    0,\n                    0,\n                    0.65\n                );\n\n                sec[0] += 5;\n            }\n        }.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0L, 5L);\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u51fa\u3059\u3088\uff01\n     *\n     * @param location \u3060\u3059\u3068\u3053\n     * @param size     \u3060\u3059\u308a\u3087\u30fc\n     */\n    public static void particle(Location location, int size)\n    {\n        particle(location, size, Particle.CRIT_MAGIC);\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u51fa\u3059\u3088\uff01\n     *\n     * @param location \u3060\u3059\u3068\u3053\n     * @param size     \u3060\u3059\u308a\u3087\u30fc\n     * @param particle \u7a2e\u985e\n     */\n    public static void particle(Location location, int size, Particle particle)\n    {\n        location.getWorld().spawnParticle(\n            particle,\n            location,\n            size,\n            0,\n            0,\n            0,\n            0.001\n        ); //XXX: \u8ab0\u3060\u3088\u3053\u3093\u306a\u5f15\u6570\u591a\u304f\u8a2d\u8a08\u3057\u305f\u3084\u3064\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u51fa\u3059\u3088\uff01\n     *\n     * @param location \u3060\u3059\u3068\u3053\n     */\n    public static void particle(Location location)\n    {\n        particle(location, 5);\n    }\n\n    /**\n     * \u7dda\u3092\u5f15\u304f\u3088\uff01\n     *\n     * @param path \u958b\u59cb\u4f4d\u7f6e\n     * @param to   \u7d42\u4e86\u4f4d\u7f6e\n     */\n    public static void line(Location path, Location to)\n    {\n        line(path, to, Particle.ENCHANTMENT_TABLE);\n    }\n\n    /**\n     * \u7dda\u3092\u5f15\u304f\u3088\uff01\n     *\n     * @param path \u958b\u59cb\u4f4d\u7f6e\n     * @param to   \u7d42\u4e86\u4f4d\u7f6e\n     * @param p    \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\n     */\n    public static void line(Location path, Location to, Particle p)\n    {\n        double distance = path.distance(to);\n\n        Vector vP = path.toVector();\n        Vector tP = to.toVector();\n\n        Vector line = tP.clone().subtract(vP).normalize().multiply(0.2);\n\n        for (double d = 0; distance > d; )\n        {\n            vP.add(line);\n            particle(vP.toLocation(path.getWorld()), 1, p);\n            d += 0.2;\n        }\n    }\n\n    /**\n     * \u3048\u3093\n     *\n     * @param center \u771f\u3093\u4e2d\u306e\u4f4d\u7f6e\n     * @param count  \u30ab\u30a6\u30f3\u30c8\uff01\n     * @param radius \u306f\u3093\u3051\u30fc\n     */\n    public static void circle(Location center, int count, double radius)\n    {\n        Location n = new Location(\n            center.getWorld(),\n            particle_x(count, radius) + center.getX(),\n            center.getY(),\n            particle_z(count, radius) + center.getZ()\n        );\n\n        particle(n);\n\n    }\n\n    /**\n     * \u3048\u3093\n     *\n     * @param center   \u771f\u3093\u4e2d\u306e\u4f4d\u7f6e\n     * @param count    \u30ab\u30a6\u30f3\u30c8\uff01\n     * @param radius   \u306f\u3093\u3051\u30fc\n     * @param particle \u3071\u30fc\u3066\u3043\u304f\u308b\n     */\n    public static void circle(Location center, int count, double radius, Particle particle)\n    {\n        Location n = new Location(\n            center.getWorld(),\n            particle_x(count, radius) + center.getX(),\n            center.getY(),\n            particle_z(count, radius) + center.getZ()\n        );\n\n        particle(n, 5, particle);\n\n    }\n\n    /**\n     * \u307e\u307b\u30fc\u3058\u3093\uff01\uff01\n     *\n     * @param player  \u990c\u98df\n     * @param seconds \u79d2\u6570\n     */\n    public static void magic(Player player, int seconds)\n    {\n        final int[] count = {0};\n        WaveCreator wave = new WaveCreator(0.8, 1.8, 0.1);\n\n        BukkitRunnable runnable = new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                for (double i = 0; i < Math.PI * 2; i++)\n                {\n                    Location center = player.getLocation();\n\n                    circle(center.clone().add(0, 0.9, 0), count[0], 3, Particle.CRIT);\n\n                    circle(center.add(0, 0.7, 0), count[0], 2.7, Particle.ENCHANTMENT_TABLE);\n\n                    circle(center.clone().add(0, wave.get(0.01, false), 0), count[0], wave.getStatic());\n\n                    circle(center.clone().add(3.2, 0.7, 3.2), count[0], 1.5);\n                    circle(center.clone().add(-3.2, 0.7, -3.2), count[0], 1.5);\n                    circle(center.clone().add(-3.2, 0.7, 3.2), count[0], 1.5);\n                    circle(center.clone().add(3.2, 0.7, -3.2), count[0], 1.5);\n\n                    circle(center.clone().add(0, 1.5, 0), count[0], 5, Particle.SPELL_WITCH);\n\n                    count[0]++;\n                }\n\n                Location center = player.getLocation();\n\n                line(center.clone().add(3, 0.7, 0), center.clone().add(-1.5, 0.7, 2.3));\n                line(center.clone().add(-1.5, 0.7, 2.3), center.clone().add(-1.5, 0.7, -2.3)); //\u4e09\u89d2\n                line(center.clone().add(3, 0.7, 0), center.clone().add(-1.5, 0.7, -2.3));\n\n                line(center.clone().add(-3, 0.7, 0), center.clone().add(1.5, 0.7, -2.3));\n                line(center.clone().add(1.5, 0.7, -2.3), center.clone().add(1.5, 0.7, 2.3)); //\u4e09\u89d2(\u53cd\u8ee2)\n                line(center.clone().add(-3, 0.7, 0), center.clone().add(1.5, 0.7, 2.3));\n            }\n        };\n\n        runnable.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0L, 1L);\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                runnable.cancel();\n            }\n        }.runTaskLater(PeyangSuperbAntiCheat.getPlugin(), seconds);\n\n    }\n\n    /**\n     * \u30ac\u30fc\u30c7\u30a3\u30a2\u30f3\u30d3\u30fc\u30e0\n     *\n     * @param player \u990c\u98df\n     * @param sec    \u79d2\u6570\n     */\n    public static void laser(Player player, int sec)\n    {\n\n        final double[] time = {0.0};\n        final double radius = 2.5;\n\n        BukkitRunnable runnable = new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                Location c = player.getLocation().clone();\n                Location X = new Location(c.getWorld(), particle_x(time[0], radius) + c.getX(), 5.0 + c.getY(), particle_z(time[0], radius) + c.getZ());\n\n                for (int i = 0; i < 10; i++)\n                    line(c, X, Particle.TOWN_AURA);\n                time[0] += Math.E;\n            }\n        };\n\n        runnable.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0L, 1L);\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                runnable.cancel();\n            }\n        }.runTaskLater(PeyangSuperbAntiCheat.getPlugin(), sec);\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306eZ\u3002\n     *\n     * @param time   \u6642\u9593\u3002\n     * @param radius \u534a\u5f84\u3002\n     * @return \u4f4d\u7f6e\u3002\n     */\n    private static double particle_z(double time, double radius)\n    {\n        return Math.sin(time) * radius * Math.cos(Math.PI / 180 * 360.0);\n    }\n\n    /**\n     * \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306eX\n     *\n     * @param time   \u6642\u9593\u3002\n     * @param radius \u534a\u5f84\u3002\n     * @return \u4f4d\u7f6e\u3002\n     */\n    private static double particle_x(double time, double radius)\n    {\n        return Math.cos(time) * radius;\n    }\n\n    /**\n     * \u30c7\u30b3\u8981\u7d20\u3059\u3079\u3066\u5c55\u958b\u3059\u308b\u3084\u3064\n     *\n     * @param player \u88ab\u9a13\u8005\n     */\n    public static void decoration(Player player)\n    {\n        if (Variables.config.getBoolean(\"decoration.flame\"))\n            flame(player, Math.multiplyExact(Variables.config.getInt(\"kick.delay\"), 20));\n        if (Variables.config.getBoolean(\"decoration.circle\"))\n            magic(player, Math.multiplyExact(Variables.config.getInt(\"kick.delay\"), 20));\n        if (Variables.config.getBoolean(\"decoration.laser\"))\n            laser(player, Math.multiplyExact(Variables.config.getInt(\"kick.delay\"), 20));\n    }\n\n}\n",
            "error": "",
            "span_id": 6150043666845904037
        },
        {
            "input": "src/main/java/ml/peya/plugins/Detect/NPCTeleport.java",
            "output": "package ml.peya.plugins.Detect;\n\nimport develop.p2p.lib.*;\nimport ml.peya.plugins.DetectClasses.*;\nimport ml.peya.plugins.Enum.*;\nimport ml.peya.plugins.*;\nimport net.minecraft.server.v1_12_R1.*;\nimport org.bukkit.*;\nimport org.bukkit.command.*;\nimport org.bukkit.craftbukkit.v1_12_R1.entity.*;\nimport org.bukkit.entity.*;\nimport org.bukkit.metadata.*;\nimport org.bukkit.scheduler.*;\n\nimport java.util.*;\n\nimport static ml.peya.plugins.Utils.MessageEngine.get;\nimport static ml.peya.plugins.Variables.cheatMeta;\nimport static ml.peya.plugins.Variables.config;\n\n/**\n * NPC\u306eTeleport\u3092\u7ba1\u7406\u3059\u308b\u3002\n */\npublic class NPCTeleport\n{\n    /**\n     * \u30c6\u30ec\u30dd\u30fc\u30c8\u30a9\uff01\n     *\n     * @param player    \u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @param target    \u30bf\u30fc\u30b2\u30c3\u30c8\u3002\n     * @param arm       \u9632\u5177\u3002\n     * @param tpCase    \u30c6\u30ec\u30dd\u30fc\u30c8\u30b1\u30fc\u30b9\u3002\n     * @param reachMode \u30ea\u30fc\u30c1\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3002\n     */\n    public static void teleport(Player player, EntityPlayer target, ItemStack[] arm, DetectType tpCase, boolean reachMode)\n    {\n        switch (tpCase)\n        {\n            case AURA_BOT:\n                auraBotTeleport(player, target, arm, reachMode);\n                break;\n            case AURA_PANIC:\n                auraPanic_teleport(player, target, arm, tpCase.getPanicCount(), tpCase.getSender(), reachMode);\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected value: \" + tpCase);\n        }\n    }\n\n    /**\n     * Aurapanic\u306e\u30c6\u30ec\u30dd\u30fc\u30c8\u3002\n     *\n     * @param player    \u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @param target    \u30bf\u30fc\u30b2\u30c3\u30c8\u3002\n     * @param arm       \u88c5\u5099\u3002\n     * @param count     \u56de\u6570\u3002\n     * @param sender    \u30a4\u30d9\u30f3\u30c8sender\u3002\n     * @param reachMode \u30ea\u30fc\u30c1\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3002\n     */\n    private static void auraPanic_teleport(Player player, EntityPlayer target, ItemStack[] arm, int count, CommandSender sender, boolean reachMode)\n    {\n        final double range = reachMode ? config.getDouble(\"npc.reachPanicRange\"): config.getDouble(\"npc.panicRange\");\n        final double[] clt = {0.0};\n        final int[] now = {0};\n\n        PlayerConnection connection = ((CraftPlayer) player).getHandle().playerConnection;\n\n        int sec = config.getInt(\"npc.seconds\");\n\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                now[0]++;\n\n                connection.sendPacket(new PacketPlayOutAnimation(((CraftPlayer) player).getHandle(), 1));\n\n                HashMap<String, Object> map = new HashMap<>();\n                map.put(\"hit\", now[0]);\n                map.put(\"max\", count);\n\n                sender.sendMessage(get(\"message.auraCheck.panic.lynx\", map));\n                if (now[0] >= count)\n                    this.cancel();\n            }\n        }.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0, (long) (10 * ((1.5 / count) * sec)));\n\n\n        new BukkitRunnable()\n        {\n            public void run()\n            {\n                for (double i = 0; i < Math.PI * 2; i++)\n                {\n                    Location center = player.getLocation();\n\n                    if (center.getPitch() <= 0.0f || center.getPitch() > 15.0f)\n                        center.setPitch(0.0f);\n\n                    Location n = center.add(center.getDirection().multiply(0 - range));\n\n                    n.setY(center.getY() + range);\n\n                    n.setPitch(50);\n\n                    float head = ((CraftPlayer) player).getHandle().getHeadRotation() * 0.5f;\n\n                    if (head < 0)\n                        head *= 2;\n\n                    NPC.setLocation(n, target);\n                    connection.sendPacket(new PacketPlayOutEntityTeleport(target));\n                    connection.sendPacket(new PacketPlayOutEntityHeadRotation(target, (byte) head));\n\n                    NPC.setArmor(player, target, arm);\n                    float finalHead = head;\n                    new BukkitRunnable()\n                    {\n                        @Override\n                        public void run()\n                        {\n                            Bukkit.getOnlinePlayers().parallelStream().filter(p -> p.hasPermission(\"psac.viewnpc\"))\n                                .forEachOrdered(p ->\n                                {\n                                    ((CraftPlayer) p).getHandle().playerConnection\n                                        .sendPacket(new PacketPlayOutEntityTeleport(target));\n                                    ((CraftPlayer) p).getHandle().playerConnection\n                                        .sendPacket(new PacketPlayOutEntityHeadRotation(target, (byte) finalHead));\n                                    NPC.setArmor(p, target, arm);\n                                });\n                            this.cancel();\n                        }\n                    }.runTask(PeyangSuperbAntiCheat.getPlugin());\n                }\n\n                clt[0] += 0.035;\n                if (clt[0] >= sec)\n                {\n                    Variables.logger.info(\"Finished\");\n                    this.cancel();\n                }\n            }\n        }.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0, 1);\n    }\n\n    /**\n     * AuraBot\u306e\u30c6\u30ec\u30dd\u30fc\u30c8\u3002\n     *\n     * @param player    \u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @param target    \u30bf\u30fc\u30b2\u30c3\u30c8\u3002\n     * @param arm       \u88c5\u5099\u3002\n     * @param reachMode \u30ea\u30fc\u30c1\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3002\n     */\n    private static void auraBotTeleport(Player player, EntityPlayer target, ItemStack[] arm, boolean reachMode)\n    {\n        final double[] time = {0.0};\n        final double radius = reachMode ? config.getDouble(\"npc.reachRange\"): config.getDoubleList(\"npc.range\")\n            .get(new Random().nextInt(config.getDoubleList(\"npc.range\").size()));\n\n        WaveCreator ypp = new WaveCreator(10.0, 100.0, 10.0);\n\n        final int[] count = {0};\n        BukkitRunnable r = new BukkitRunnable()\n        {\n            public void run()\n            {\n                double speed = 0.0;\n\n                if (player.hasMetadata(\"speed\"))\n                    for (MetadataValue value : player.getMetadata(\"speed\"))\n                        if (value.getOwningPlugin().getName().equals(PeyangSuperbAntiCheat.getPlugin().getName()))\n                            speed = value.asDouble() * 2.0;\n                for (double i = 0; i < Math.PI * 2; i++)\n                {\n                    double rangeTmp = radius;\n\n                    if (config.getBoolean(\"npc.wave\"))\n                        rangeTmp = new WaveCreator(radius - 0.1, radius, config.getDouble(\"npc.waveMin\"))\n                            .get(0.01, true);\n\n                    final Location center = player.getLocation();\n                    final Location n = new Location(\n                        center.getWorld(),\n                        auraBotXPos(time[0], rangeTmp + speed) + center.getX(),\n                        center.getY() + new WaveCreator(1.0, 2.0, 0.0).get(0.01, count[0] < 20),\n                        auraBotZPos(time[0], rangeTmp + speed) + center.getZ(),\n                        (float) ypp.getStatic(),\n                        (float) ypp.get(4.5, false)\n                    );\n\n                    NPC.setLocation(n, target);\n                    ((CraftPlayer) player).getHandle().playerConnection\n                        .sendPacket(new PacketPlayOutEntityTeleport(target));\n\n                    NPC.setArmor(player, target, arm);\n                    new BukkitRunnable()\n                    {\n                        @Override\n                        public void run()\n                        {\n                            Bukkit.getOnlinePlayers()\n                                .parallelStream()\n                                .filter(p -> p.hasPermission(\"psac.viewnpc\"))\n                                .forEachOrdered(p ->\n                                {\n                                    ((CraftPlayer) p).getHandle().playerConnection\n                                        .sendPacket(new PacketPlayOutEntityTeleport(target));\n                                    NPC.setArmor(p, target, arm);\n                                });\n                            this.cancel();\n                        }\n                    }.runTask(PeyangSuperbAntiCheat.getPlugin());\n                    count[0]++;\n                    CheatDetectNowMeta meta = cheatMeta.getMetaByPlayerUUID(player.getUniqueId());\n                    if (meta == null) continue;\n                    meta.setNpcLocation(n.toVector());\n                }\n                time[0] += config.getDouble(\"npc.time\") + (config.getBoolean(\"npc.speed.wave\")\n                    ? new WaveCreator(0.0, config.getDouble(\"npc.speed.waveRange\"), 0 - config.getDouble(\"npc.speed.waveRange\")).get(0.001, true)\n                    : 0.0);\n            }\n        };\n        r.runTaskTimer(PeyangSuperbAntiCheat.getPlugin(), 0, 1);\n\n        new BukkitRunnable()\n        {\n            @Override\n            public void run()\n            {\n                r.cancel();\n                this.cancel();\n            }\n        }.runTaskLater(PeyangSuperbAntiCheat.getPlugin(), 20 * (config.getLong(\"npc.seconds\")));\n\n    }\n\n    /**\n     * Aurabot\u306ez\u8ef8\u3092\u7b97\u51fa\u3059\u308b\u3002\n     *\n     * @param time   \u6642\u9593\u3002\n     * @param radius \u534a\u5f84\u3002\n     * @return \u4f4d\u7f6e\u3002\n     */\n    private static double auraBotZPos(double time, double radius)\n    {\n        return Math.sin(time) * radius * Math.cos(Math.PI / 180 * 360.0);\n    }\n\n    /**\n     * Aurabot\u306ex\u8ef8\u3092\u7b97\u51fa\u3059\u308b\u3002\n     *\n     * @param time   \u6642\u9593\u3002\n     * @param radius \u534a\u5f84\u3002\n     * @return \u4f4d\u7f6e\u3002\n     */\n    private static double auraBotXPos(double time, double radius)\n    {\n        return Math.cos(time) * radius;\n    }\n}\n",
            "error": "",
            "span_id": 8978180384334012499
        },
        {
            "input": "src/main/java/ml/peya/plugins/Utils/PlayerUtils.java",
            "output": "package ml.peya.plugins.Utils;\n\nimport com.mojang.authlib.GameProfile;\nimport com.mojang.authlib.properties.Property;\nimport net.minecraft.server.v1_12_R1.EntityPlayer;\nimport net.minecraft.server.v1_12_R1.PlayerInteractManager;\nimport net.minecraft.server.v1_12_R1.WorldServer;\nimport org.apache.commons.lang.RandomStringUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.bukkit.Bukkit;\nimport org.bukkit.Location;\nimport org.bukkit.OfflinePlayer;\nimport org.bukkit.World;\nimport org.bukkit.block.Block;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.craftbukkit.v1_12_R1.CraftServer;\nimport org.bukkit.craftbukkit.v1_12_R1.CraftWorld;\nimport org.bukkit.entity.Entity;\nimport org.bukkit.entity.EntityType;\nimport org.bukkit.entity.Player;\nimport org.bukkit.potion.PotionEffectType;\nimport org.bukkit.util.BlockIterator;\n\nimport javax.annotation.Nullable;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\nimport static ml.peya.plugins.Utils.MessageEngine.get;\nimport static ml.peya.plugins.Variables.skin;\n\n/**\n * \u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u95a2\u3057\u3066\u307e\u3068\u3081\u305f\u3084\u3064\uff01\n */\npublic class PlayerUtils\n{\n    /**\n     * \u8ab0\u304c\u898b\u3066\u308b\u306e\u304b\u308f\u304b\u308b\u3084\u3064\u3002\n     *\n     * @param player \u898b\u3089\u308c\u3066\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @return \u898b\u3066\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     */\n    public static Player getLookingEntity(Player player)\n    {\n        for (Location location : player.getLineOfSight(null, 4).parallelStream().map(Block::getLocation)\n            .collect(Collectors.toCollection(ArrayList::new)))\n            for (Entity entity : player.getNearbyEntities(3.5, 3.5, 3.5))\n                if (isLooking((Player) entity, location) && entity.getType() == EntityType.PLAYER)\n                    return (Player) entity;\n\n        return null;\n    }\n\n    /**\n     * \u4eca\u898b\u3066\u308b\u304b\u308f\u304b\u308b\u3084\u3064\u3002\n     *\n     * @param player   \u898b\u3089\u308c\u3066\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @param location \u3042\u3068\u5834\u6240\u3002\n     * @return \u898b\u3089\u308c\u3066\u305f\u3089true\u3002\n     */\n    public static boolean isLooking(Player player, Location location)\n    {\n        BlockIterator it = new BlockIterator(player, 4);\n\n        while (it.hasNext())\n        {\n            final Block block = it.next();\n            if (block.getX() == location.getBlockX() &&\n                block.getY() == location.getBlockY() &&\n                block.getZ() == location.getBlockZ())\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * \u3081\u3063\u3061\u3083\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u3055\u308c\u305f\u3088\u3049\u3075\u3048\u3048\u3048\u3048\u3048\u3047\u3047\u3047\u3063\u3066\u3044\u3046\u306e\u78ba\u8a8d\u3059\u308b\u3084\u3064\n     *\n     * @param player \u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30a5\uff01\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     * @return \u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u8b66\u5bdf\u304c\u53cd\u5fdc\u3057\u305f\u3089true\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n     */\n    public static boolean hasCritical(Player player)\n    {\n        return player.getFallDistance() > 0.0F &&\n            !player.getLocation().getBlock().isLiquid() &&\n            !player.isOnGround() &&\n            !player.hasPotionEffect(PotionEffectType.BLINDNESS) &&\n            player.getVehicle() == null;\n    }\n\n    /**\n     * \u30ef\u30fc\u30eb\u30c9\u5185\u306b\u65b0\u3057\u3044\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u634f\u9020\u3057\u3066\u3001{@code EntityPlayer}\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n     *\n     * @param world \u30ef\u30fc\u30eb\u30c9\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u5f15\u6570\u3002\n     * @return \u5275\u9020\u3055\u308c\u305f\u30d7\u30ec\u30a4\u30e4\u30fc\u3002\n     */\n    public static EntityPlayer getRandomPlayer(World world)\n    {\n        Random random = new Random();\n        String first = random.nextBoolean()\n            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)\n            : RandomWordUtils.getRandomWord();\n        String last = random.nextBoolean()\n            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)\n            : RandomWordUtils.getRandomWord();\n\n        if (random.nextBoolean())\n        {\n            first = develop.p2p.lib.LeetConverter.convert(first);\n            last = develop.p2p.lib.LeetConverter.convert(last);\n        }\n\n        String name = first + (random.nextBoolean() ? \"_\": \"\") + last + (random.nextBoolean() ? \"19\" + random.nextInt(120): \"\");\n        if (name.length() > 16)\n            name = random.nextBoolean() ? first: last;\n\n        if (name.length() > 16)\n            name = RandomStringUtils.randomAlphanumeric(random.nextInt(16));\n\n        WorldServer worldServer = ((CraftWorld) world).getHandle();\n\n        Pair<String, String> skin = getRandomSkin();\n\n        GameProfile profile = new GameProfile(UUID.randomUUID(), name);\n\n        profile.getProperties().put(\"textures\", new Property(\"textures\", skin.getLeft(), skin.getRight()));\n\n        return new EntityPlayer(\n            ((CraftServer) Bukkit.getServer()).getServer(),\n            worldServer,\n            profile,\n            new PlayerInteractManager(worldServer)\n        );\n    }\n\n    /**\n     * \u30e9\u30f3\u30c0\u30e0\u30b9\u30ad\u30f3\u3092\u30d1\u30d1\u30e9\u30c3\u30c1\u3057\u307e\u3059\u3002\n     *\n     * @return \u3059\u304d\u3093\n     */\n    public static Pair<String, String> getRandomSkin()\n    {\n        try (Connection connection = skin.getConnection();\n             Statement statement = connection.createStatement())\n        {\n            ResultSet result = statement.executeQuery(\"SELECT Texture, Signature FROM Skin ORDER BY RANDOM() LIMIT 1\");\n            return !result.next()\n                ? Pair.of(\"\", \"\")\n                : Pair.of(result.getString(\"Texture\"), result.getString(\"Signature\"));\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n            Utils.errorNotification(Utils.getStackTrace(e));\n            return Pair.of(\"\", \"\");\n        }\n    }\n\n    /**\n     * \u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u53d6\u5f97\u3059\u308b\u3002\u305f\u3076\u3093\u3002\n     *\n     * @param sender \u30a4\u30d9\u30f3\u30c8\u30bb\u30f3\u30c0\u30fc\u3002\n     * @param name   \u306a\u307e\u3048\n     * @return Player\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u305f\u5834\u5408null\u3002\n     */\n    @Nullable\n    public static Player getPlayer(CommandSender sender, String name)\n    {\n        Player player = Bukkit.getPlayer(name);\n\n        if (player == null)\n        {\n            sender.sendMessage(get(\"error.playerNotFound\"));\n\n            return null;\n        }\n        return player;\n    }\n\n    /**\n     * \u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059(\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u3082\u53ef)\n     *\n     * @return \u53d6\u5f97\u3057\u305f\u30d7\u30ec\u30a4\u30e4\u30fc\n     */\n    public static Player getPlayerAllowOffline(String playerName)\n    {\n        Player player = Bukkit.getPlayer(playerName);\n        if (player == null)\n        {\n            for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())\n            {\n                if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))\n                    player = offlinePlayer.getPlayer();\n            }\n        }\n\n        return player;\n    }\n\n    /**\n     * \u30aa\u30d5\u30e9\u30a4\u30f3\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059\n     *\n     * @return \u53d6\u5f97\u3057\u305f\u30d7\u30ec\u30a4\u30e4\u30fc\n     */\n    public static OfflinePlayer getOfflinePlayer(String playerName)\n    {\n        for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())\n        {\n            if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))\n                return offlinePlayer;\n        }\n        return null;\n    }\n}\n",
            "error": "",
            "span_id": 2211720305640704773
        },
        {
            "input": "src/main/java/ml/peya/plugins/Utils/MessageEngine.java",
            "output": "package ml.peya.plugins.Utils;\n\nimport ml.peya.plugins.PeyangSuperbAntiCheat;\nimport ml.peya.plugins.Variables;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.bukkit.ChatColor;\nimport org.bukkit.configuration.file.YamlConfiguration;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n/**\n * \u30e1\u30c3\u30bb\u30fc\u30b8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3002\n * message.yml\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30c7\u30fc\u30bf\u3092\u30d1\u30fc\u30b9\u3057\u3066\u53d6\u5f97\u3057\u3084\u3059\u304f\u3059\u308b\u3002\n */\npublic class MessageEngine\n{\n    /**\n     * \u30b3\u30f3\u30d5\u30a3\u30b0\n     */\n    private static YamlConfiguration config;\n\n    /**\n     * \u521d\u671f\u5316\u78ba\u8a8d\n     */\n    private static boolean isInitialized = false;\n\n    /**\n     * \u521d\u671f\u5316\n     */\n    public static void initialize()\n    {\n        String lang = PeyangSuperbAntiCheat.getPlugin().getConfig().getString(\"lang\").toLowerCase();\n\n        if (lang.equals(\"ja_jp\") || lang.equals(\"ja-jp\") || lang.equals(\"jp\") || lang.equals(\"japanese\"))\n            lang = \"ja\";\n        else if (lang.equals(\"en_us\") || lang.equals(\"en-us\") || lang.equals(\"en_uk\") || lang.equals(\"en-uk\") || lang.equals(\"english\"))\n            lang = \"en\";\n        else\n        {\n            lang = \"en\";\n\n            Variables.logger.warning(\"Specified language '\" + lang + \"' not found, changing to fallback language 'en'\");\n        }\n\n        try (InputStreamReader reader = new InputStreamReader(PeyangSuperbAntiCheat.class.getResourceAsStream(\n            \"/\" + lang + \".yml\"), StandardCharsets.UTF_8))\n        {\n            config = YamlConfiguration.loadConfiguration(new BufferedReader(reader));\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n            isInitialized = false;\n        }\n\n        isInitialized = true;\n    }\n\n    /**\n     * %%name%%\u306a\u3069\u30ab\u30e9\u30fc\u30b3\u30fc\u30c9\u4ee5\u5916\u306b\u95a2\u4fc2\u3059\u308b\u52d5\u7684\u306a\u53c2\u7167\u30c7\u30fc\u30bf\u3092\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u3068\u3057\u3066\u7d50\u3073\u3064\u3051\u308b\u3002\n     *\n     * @param path \u52d5\u7684\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3002\n     * @param obj  \u7d50\u3073\u3064\u3051\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\n     *             get(String, HashMap)\u3068\u306e\u4f75\u7528\u3067\u4f7f\u7528\u3059\u308b\u3002\n     * @return \u7d50\u3073\u3064\u3051\u305f\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u3002\n     */\n    public static HashMap<String, Object> pair(String path, Object obj)\n    {\n        HashMap<String, Object> map = new HashMap<>();\n\n        map.put(path, obj);\n        return map;\n    }\n\n    public static String get(String key)\n    {\n        return get(key, new HashMap<>());\n    }\n\n    /**\n     * \u30e1\u30c3\u30bb\u30fc\u30b8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3002\u3053\u3044\u3064\u3068hsh\u3092\u5171\u7528\u3059\u308b\u3002\n     *\n     * @param key    \u53c2\u7167\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3002\n     * @param format hsh()\u3059\u308b\u3084\u3064\u3002\n     * @return \u53c2\u7167\u3067\u304d\u305f\u3084\u3064\u3002\n     */\n    public static String get(String key, HashMap<String, Object> format)\n    {\n        if (!isInitialized)\n        {\n            initialize();\n            return get(key, format);\n        }\n\n        return format((String) config.getValues(true).get(key), format);\n    }\n\n    /**\n     * \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3057\u305f\u3044\u3088\u3049\u3075\u3048\u3047\u3063\u3066\u3044\u3046\u6642\u306b\u3046\u3063\u3066\u3064\u3051\n     *\n     * @param text   Before\n     * @param format After\n     * @return AFTER^2\n     */\n    public static String format(String text, HashMap<String, Object> format)\n    {\n        HashMap<String, ChatColor> map = getColor();\n\n        String replaced = text;\n\n        for (String key : map.keySet())\n            replaced = replaced.replace(key, map.get(key).toString());\n\n        for (String key : format.keySet())\n            replaced = replaced.replace(\"%%\" + key + \"%%\", String.valueOf(format.get(key)));\n\n        return replaced;\n    }\n\n    /**\n     * \u7279\u5b9a\u306e\u6587\u5b57\u30bb\u30c3\u30c8\u3092Enum\u306eChatColor\u306b\u5909\u66f4\u3059\u308b\u305f\u3081\u306e\u30ea\u30b9\u30c8\u3092\u30de\u30c3\u30d7\u3068\u3057\u3066\u8fd4\u3059\u3084\u3064\u3002\n     *\n     * @return \u5909\u63db\u3057\u305f\u5f8c\u306e\u306f\u3063\u3057\u3085\u307e\u3063\u3077\u3002\n     */\n    private static HashMap<String, ChatColor> getColor()\n    {\n        return Stream.of(\n            Pair.of(\"%%black%%\", ChatColor.BLACK),\n            Pair.of(\"%%dark_blue%%\", ChatColor.DARK_BLUE),\n            Pair.of(\"%%dark_green%%\", ChatColor.DARK_GREEN),\n            Pair.of(\"%%dark_aqua%%\", ChatColor.DARK_AQUA),\n            Pair.of(\"%%dark_red%%\", ChatColor.DARK_RED),\n            Pair.of(\"%%dark_purple%%\", ChatColor.DARK_PURPLE),\n\n            Pair.of(\"%%gold%%\", ChatColor.GOLD),\n            Pair.of(\"%%gray%%\", ChatColor.GRAY),\n            Pair.of(\"%%blue%%\", ChatColor.BLUE),\n            Pair.of(\"%%green%%\", ChatColor.GREEN),\n            Pair.of(\"%%aqua%%\", ChatColor.AQUA),\n            Pair.of(\"%%red%%\", ChatColor.RED),\n            Pair.of(\"%%light_purple%%\", ChatColor.LIGHT_PURPLE),\n            Pair.of(\"%%yellow%%\", ChatColor.YELLOW),\n            Pair.of(\"%%white%%\", ChatColor.WHITE),\n\n            Pair.of(\"%%obfuscated%%\", ChatColor.MAGIC),\n            Pair.of(\"%%bold%%\", ChatColor.BOLD),\n            Pair.of(\"%%strikethrough%%\", ChatColor.STRIKETHROUGH),\n            Pair.of(\"%%italic%%\", ChatColor.ITALIC),\n            Pair.of(\"%%reset%%\", ChatColor.RESET)\n        ).collect(Collectors.toMap(Pair::getLeft, Pair::getRight, (a, b) -> b, HashMap::new));\n    }\n}\n",
            "error": "",
            "span_id": 15538131466018853048
        }
    ],
    "get_directory_tree": [
        {
            "input": "src/main/java",
            "output": "[\n    {\n        \"name\": \"ml\",\n        \"type\": \"directory\",\n        \"contents\": [\n            {\n                \"name\": \"peya\",\n                \"type\": \"directory\",\n                \"contents\": [\n                    {\n                        \"name\": \"plugins\",\n                        \"type\": \"directory\",\n                        \"contents\": [\n                            {\n                                \"name\": \"Task\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"TrackerTask.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Enum\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"DetectType.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"EnumCheatType.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"EnumSeverity.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Metrics.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BungeeProxy\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"Metrics.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Commands.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"BungeeCordConfiguration.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"PeyangSuperbAntiCheatProxy.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Events.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"BungeeMessageEngine.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Detect\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"NPCTeleport.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"TestKnockback.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"NPC.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"DetectConnection.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Variables.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"Learn\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"Neuron.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Input.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Mapper.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"NeuralNetwork.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Module\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"InitModule.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"NoCheatPlus\",\n                                        \"type\": \"directory\",\n                                        \"contents\": [\n                                            {\n                                                \"name\": \"Hook.java\",\n                                                \"type\": \"file\"\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"Modules.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"ModuleContainer.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Load\",\n                                        \"type\": \"directory\",\n                                        \"contents\": [\n                                            {\n                                                \"name\": \"Matrix.java\",\n                                                \"type\": \"file\"\n                                            },\n                                            {\n                                                \"name\": \"Banmanager.java\",\n                                                \"type\": \"file\"\n                                            },\n                                            {\n                                                \"name\": \"NoCheatPlus.java\",\n                                                \"type\": \"file\"\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"Events.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Gui\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"Events\",\n                                        \"type\": \"directory\",\n                                        \"contents\": [\n                                            {\n                                                \"name\": \"Run.java\",\n                                                \"type\": \"file\"\n                                            },\n                                            {\n                                                \"name\": \"Drop.java\",\n                                                \"type\": \"file\"\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"IItems.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"GuiItem.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Item.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Items\",\n                                        \"type\": \"directory\",\n                                        \"contents\": [\n                                            {\n                                                \"name\": \"Target\",\n                                                \"type\": \"directory\",\n                                                \"contents\": [\n                                                    {\n                                                        \"name\": \"ToPage2.java\",\n                                                        \"type\": \"file\"\n                                                    },\n                                                    {\n                                                        \"name\": \"AuraPanicItem.java\",\n                                                        \"type\": \"file\"\n                                                    },\n                                                    {\n                                                        \"name\": \"CompassTracker3000_tm.java\",\n                                                        \"type\": \"file\"\n                                                    },\n                                                    {\n                                                        \"name\": \"AuraBotItem.java\",\n                                                        \"type\": \"file\"\n                                                    },\n                                                    {\n                                                        \"name\": \"TestKnockBack.java\",\n                                                        \"type\": \"file\"\n                                                    },\n                                                    {\n                                                        \"name\": \"BanBook.java\",\n                                                        \"type\": \"file\"\n                                                    },\n                                                    {\n                                                        \"name\": \"BackButton.java\",\n                                                        \"type\": \"file\"\n                                                    },\n                                                    {\n                                                        \"name\": \"Page2\",\n                                                        \"type\": \"directory\",\n                                                        \"contents\": [\n                                                            {\n                                                                \"name\": \"BackToPage1.java\",\n                                                                \"type\": \"file\"\n                                                            }\n                                                        ]\n                                                    },\n                                                    {\n                                                        \"name\": \"Lead.java\",\n                                                        \"type\": \"file\"\n                                                    }\n                                                ]\n                                            },\n                                            {\n                                                \"name\": \"Main\",\n                                                \"type\": \"directory\",\n                                                \"contents\": [\n                                                    {\n                                                        \"name\": \"TargetStick.java\",\n                                                        \"type\": \"file\"\n                                                    }\n                                                ]\n                                            }\n                                        ]\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"BungeeStructure\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"Command.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CommandExecutor.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CommandComponent.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CommandManager.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Utils\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"TimeParser.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"TextBuilder.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"OptGraphGenerator.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"RandomWordUtils.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Utils.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"SQL.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"BookUtil.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"ReflectionUtils.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"PlayerUtils.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"SeverityLevels.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"MessageEngine.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Moderate\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"KickManager.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Tracker.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"ErrorMessageSender.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"BroadcastMessenger.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CheatTypeUtils.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"TrustModifier.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Abuse.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Objects\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"Books.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"RandomArmor.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Decorations.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Commands\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"CommandTarget.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CommandKick.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CommandPeyangSuperbAntiCheat.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CmdTst\",\n                                        \"type\": \"directory\",\n                                        \"contents\": [\n                                            {\n                                                \"name\": \"AuraPanic.java\",\n                                                \"type\": \"file\"\n                                            },\n                                            {\n                                                \"name\": \"AuraBot.java\",\n                                                \"type\": \"file\"\n                                            },\n                                            {\n                                                \"name\": \"TestKnockback.java\",\n                                                \"type\": \"file\"\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"CommandTracking.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CommandPull.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CommandReport.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CommandSilentTeleport.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CmdPub\",\n                                        \"type\": \"directory\",\n                                        \"contents\": [\n                                            {\n                                                \"name\": \"Drop.java\",\n                                                \"type\": \"file\"\n                                            },\n                                            {\n                                                \"name\": \"Help.java\",\n                                                \"type\": \"file\"\n                                            },\n                                            {\n                                                \"name\": \"View.java\",\n                                                \"type\": \"file\"\n                                            },\n                                            {\n                                                \"name\": \"Show.java\",\n                                                \"type\": \"file\"\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"CommandTrust.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Init.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"Bungee.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"DetectClasses\",\n                                \"type\": \"directory\",\n                                \"contents\": [\n                                    {\n                                        \"name\": \"WatchEyeManagement.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"KillCounting.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"CheatDetectNowMeta.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"Packets.java\",\n                                        \"type\": \"file\"\n                                    },\n                                    {\n                                        \"name\": \"DetectingList.java\",\n                                        \"type\": \"file\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"name\": \"Events.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"BungeeCommands.java\",\n                                \"type\": \"file\"\n                            },\n                            {\n                                \"name\": \"PeyangSuperbAntiCheat.java\",\n                                \"type\": \"file\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]",
            "error": "",
            "span_id": 10474749874349614190
        }
    ],
    "get_language_server_suggestions": [],
    "reset_repo": []
}