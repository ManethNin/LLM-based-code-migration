{
    "validate_diffs": [
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,7 +4,7 @@ package io.jenkins.plugins.coverage.util;\n \n import java.io.IOException;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+import com.gargoylesoftware.htmlunit.javascript.JavaScriptJobResult;\n import org.jenkinsci.test.acceptance.po.Jenkins;\n import org.openqa.selenium.By;\n import org.openqa.selenium.WebElement;\n@@ -32,7 +32,7 @@ public class ChartUtil {\n      * @return the chart data as a JSON string\n      * @throws IOException if an error occurs while executing the JavaScript\n      */\n-    public static ScriptResult getChartData(Jenkins jenkins, String chartId) throws IOException {\n+    public static JavaScriptJobResult getChartData(Jenkins jenkins, String chartId) throws IOException {\n         WebElement chartElement = jenkins.getElement(By.id(chartId));\n         String script = \"return JSON.stringify(\" + chartElement.getAttribute(\"data-chart-data\") + \");\";\n         return jenkins.getJavaScriptResult(script);\n@@ -57,7 +57,7 @@ public class ChartUtil {\n      * @return the chart options as a JSON string\n      * @throws IOException if an error occurs while executing the JavaScript\n      */\n-    public static ScriptResult getChartOptions(Jenkins jenkins, String chartId) throws IOException {\n+    public static JavaScriptJobResult getChartOptions(Jenkins jenkins, String chartId) throws IOException {\n         WebElement chartElement = jenkins.getElement(By.id(chartId));\n         String script = \"return JSON.stringify(\" + chartElement.getAttribute(\"data-chart-options\") + \");\";\n         return jenkins.getJavaScriptResult(script);\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java!\nMake extra sure the indentation is correct.\n\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain these 7 exact lines in a row:\n```\n     * @return the chart data as a JSON string\n     * @throws IOException if an error occurs while executing the JavaScript\n     */\n    public static ScriptResult getChartData(Jenkins jenkins, String chartId) throws IOException {\n        WebElement chartElement = jenkins.getElement(By.id(chartId));\n        String script = \"return JSON.stringify(\" + chartElement.getAttribute(\"data-chart-data\") + \");\";\n        return jenkins.getJavaScriptResult(script);\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java!\nMake extra sure the indentation is correct.\n\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain these 7 exact lines in a row:\n```\n     * @return the chart options as a JSON string\n     * @throws IOException if an error occurs while executing the JavaScript\n     */\n    public static ScriptResult getChartOptions(Jenkins jenkins, String chartId) throws IOException {\n        WebElement chartElement = jenkins.getElement(By.id(chartId));\n        String script = \"return JSON.stringify(\" + chartElement.getAttribute(\"data-chart-options\") + \");\";\n        return jenkins.getJavaScriptResult(script);\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java!\nMake extra sure the indentation is correct.\n\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain these 7 exact lines in a row:\n```\n     * @return the chart data as a JSON string\n     * @throws IOException if an error occurs while executing the JavaScript\n     */\n    public static ScriptResult getChartData(Jenkins jenkins, String chartId) throws IOException {\n        WebElement chartElement = jenkins.getElement(By.id(chartId));\n        String script = \"return JSON.stringify(\" + chartElement.getAttribute(\"data-chart-data\") + \");\";\n        return jenkins.getJavaScriptResult(script);\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java!\nMake extra sure the indentation is correct.\n\nui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java does not contain these 7 exact lines in a row:\n```\n     * @return the chart options as a JSON string\n     * @throws IOException if an error occurs while executing the JavaScript\n     */\n    public static ScriptResult getChartOptions(Jenkins jenkins, String chartId) throws IOException {\n        WebElement chartElement = jenkins.getElement(By.id(chartId));\n        String script = \"return JSON.stringify(\" + chartElement.getAttribute(\"data-chart-options\") + \");\";\n        return jenkins.getJavaScriptResult(script);\n```\n",
            "span_id": 16163572388999070337
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,7 +4,7 @@ import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+import com.gargoylesoftware.htmlunit.javascript.JavaScriptJobResult;\n \n import org.jenkinsci.test.acceptance.po.PageObject;\n \n@@ -34,8 +34,8 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\n+            return scriptResult.getResult().toString();\n         }\n         return null;\n     }\n@@ -59,8 +59,8 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\n+                if (scriptResult.getResult() != null) {\n                     return scriptResult.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": "{'ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java': 'package io.jenkins.plugins.coverage.util;\\n\\nimport org.openqa.selenium.By;\\nimport org.openqa.selenium.NoSuchElementException;\\nimport org.openqa.selenium.WebElement;\\n\\nimport com.gargoylesoftware.htmlunit.javascript.JavaScriptJobResult;\\n\\nimport org.jenkinsci.test.acceptance.po.PageObject;\\n\\n/**\\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\\n */\\n@SuppressWarnings(\"hideutilityclassconstructor\")\\n// TODO: Move this code to ATH so we can reuse it from other plugins\\npublic class ChartUtil {\\n    private static final int MAX_ATTEMPTS = 5;\\n\\n    /**\\n     * Returns a chart\\'s data by its id.\\n     *\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n     *         of chart\\n     *\\n     * @return data as json\\n     */\\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\\n            Object result = pageObject.executeScript(String.format(\\n                    \"delete(window.Array.prototype.toJSON) %n\"\\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\\\"%s\\\\\")).getOption())\",\\n                    elementId));\\n            JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\\n            return scriptResult.getResult().toString();\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * Returns data of only chart with given tool attribute value on page.\\n     *\\n     * @param pageObject\\n     *         which contains only one chart with given tool attribute value\\n     * @param toolAttribute\\n     *         value in div tag of chart\\n     *\\n     * @return data as json\\n     */\\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\\n            final String toolAttribute) {\\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\\n                Object result = pageObject.executeScript(String.format(\\n                        \"delete(window.Array.prototype.toJSON) %n\"\\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\\\"div [tool=\\'%s\\']\\\\\")).getOption())\",\\n                        toolAttribute));\\n\\n                JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\\n                if (scriptResult.getResult() != null) {\\n                    return scriptResult.toString();\\n                }\\n                pageObject.elasticSleep(1000);\\n            }\\n        }\\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID \\'%s\\'\\'\" + toolAttribute);\\n    }\\n\\n    /**\\n     * Returns if chart is displayed.\\n     *\\n     * @param pageObject\\n     *         which contains chart\\n     * @param elementId\\n     *         of chart\\n     *\\n     * @return if chart is displayed\\n     */\\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\\n        try {\\n            WebElement chart = pageObject.find(By.id(elementId));\\n            return chart != null && chart.isDisplayed();\\n        }\\n        catch (NoSuchElementException exception) {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * Returns if a chart with given tool attribute in div tag is displayed.\\n     *\\n     * @param pageObject\\n     *         which contains chart\\n     * @param toolAttribute\\n     *         of div tag of chart\\n     *\\n     * @return if chart is displayed\\n     */\\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\\n        try {\\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool=\\'\" + toolAttribute + \"\\']\"));\\n            return chart != null && chart.isDisplayed();\\n        }\\n        catch (NoSuchElementException exception) {\\n            return false;\\n        }\\n\\n    }\\n\\n}\\n'}",
            "error": "",
            "span_id": 11399046432133692043
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,7 +4,7 @@ import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+import com.gargoylesoftware.htmlunit.javascript.JavaScriptJobResult;\n \n import org.jenkinsci.test.acceptance.po.PageObject;\n \n@@ -34,8 +34,8 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\n+            return scriptResult.getResult().toString();\n         }\n         return null;\n     }\n@@ -59,8 +59,8 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\n+                if (scriptResult.getResult() != null) {\n                     return scriptResult.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: cannot find symbol\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport com.gargoylesoftware.htmlunit.javascript.JavaScriptJobResult;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\n            return scriptResult.getResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\n                if (scriptResult.getResult() != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "7": {
                            "lines": [
                                {
                                    "line_no": 6,
                                    "content": ""
                                },
                                {
                                    "line_no": 7,
                                    "content": "import com.gargoylesoftware.htmlunit.javascript.JavaScriptJobResult;"
                                },
                                {
                                    "line_no": 8,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[7,47] error: package com.gargoylesoftware.htmlunit.javascript does not exist\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 35,
                                    "content": "            JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);"
                                },
                                {
                                    "line_no": 36,
                                    "content": "            return scriptResult.getResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[35,12] error: cannot find symbol\nsymbol: class JavaScriptJobResult\nlocation: class ChartUtil\n",
                                "[35,12] error: cannot find symbol\n",
                                "[35,51] error: cannot find symbol\n",
                                "[35,51] error: cannot find symbol\nsymbol: class JavaScriptJobResult\nlocation: class ChartUtil\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": ""
                                },
                                {
                                    "line_no": 60,
                                    "content": "                JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);"
                                },
                                {
                                    "line_no": 61,
                                    "content": "                if (scriptResult.getResult() != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,16] error: cannot find symbol\n",
                                "[60,16] error: cannot find symbol\nsymbol: class JavaScriptJobResult\nlocation: class ChartUtil\n",
                                "[60,55] error: cannot find symbol\n",
                                "[60,55] error: cannot find symbol\nsymbol: class JavaScriptJobResult\nlocation: class ChartUtil\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: cannot find symbol\n",
            "span_id": 723992474991461042
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,7 +4,7 @@ import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n+import org.jenkinsci.test.acceptance.po.Control;\n \n import org.jenkinsci.test.acceptance.po.PageObject;\n \n@@ -34,8 +34,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -59,9 +58,8 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n-                    return scriptResult.toString();\n+                if (result != null) {\n+                    return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n             }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport com.gargoylesoftware.htmlunit.javascript.JavaScriptJobResult;\nimport org.jenkinsci.test.acceptance.po.Control;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            return result != null ? result.toString() : null;\n            JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\n            return scriptResult.getResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                JavaScriptJobResult scriptResult = new JavaScriptJobResult(result);\n                if (scriptResult.getResult() != null) {\n                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "83": {
                            "lines": [
                                {
                                    "line_no": 82,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 83,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 84,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[83,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 14180713896200024918
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,7 +4,6 @@ import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +33,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -59,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return scriptResult.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "6": {
                            "lines": [
                                {
                                    "line_no": 5,
                                    "content": "import org.openqa.selenium.WebElement;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "-"
                                },
                                {
                                    "line_no": 7,
                                    "content": "-import com.gargoylesoftware.htmlunit.ScriptResult;"
                                }
                            ],
                            "error_texts": [
                                "[6,] error: class, interface, or enum expected\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 35,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 36,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[35,25] error: ';' expected\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 36,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[36,] error: not a statement\n",
                                "[36,13] error: illegal start of expression\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[37,] error: not a statement\n",
                                "[37,13] error: illegal start of expression\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": ""
                                },
                                {
                                    "line_no": 61,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[61,23] error: ';' expected\n",
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 63,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[62,17] error: illegal start of expression\n",
                                "[62,] error: not a statement\n"
                            ]
                        },
                        "63": {
                            "lines": [
                                {
                                    "line_no": 62,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 63,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 64,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[63,] error: not a statement\n",
                                "[63,17] error: illegal start of expression\n"
                            ]
                        },
                        "82": {
                            "lines": [
                                {
                                    "line_no": 81,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 82,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 83,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[82,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 5331933963061615375
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,10 +1,9 @@\n package io.jenkins.plugins.coverage.util;\n \n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +33,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -59,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n-\n-\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "6": {
                            "lines": [
                                {
                                    "line_no": 5,
                                    "content": "import org.openqa.selenium.WebElement;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "-"
                                },
                                {
                                    "line_no": 7,
                                    "content": "-"
                                }
                            ],
                            "error_texts": [
                                "[6,] error: class, interface, or enum expected\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 35,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 36,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[35,25] error: ';' expected\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 36,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[36,] error: not a statement\n",
                                "[36,13] error: illegal start of expression\n"
                            ]
                        },
                        "37": {
                            "lines": [
                                {
                                    "line_no": 36,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 37,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 38,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[37,] error: not a statement\n",
                                "[37,13] error: illegal start of expression\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": ""
                                },
                                {
                                    "line_no": 61,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[61,23] error: ';' expected\n",
                                "[61,] error: not a statement\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 62,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 63,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[62,17] error: illegal start of expression\n",
                                "[62,] error: not a statement\n"
                            ]
                        },
                        "63": {
                            "lines": [
                                {
                                    "line_no": 62,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 63,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 64,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[63,] error: not a statement\n",
                                "[63,17] error: illegal start of expression\n"
                            ]
                        },
                        "82": {
                            "lines": [
                                {
                                    "line_no": 81,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 82,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 83,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[82,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 6360116567151860739
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -1,10 +1,9 @@\n package io.jenkins.plugins.coverage.util;\n \n import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +33,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -59,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "6": {
                            "lines": [
                                {
                                    "line_no": 5,
                                    "content": "import org.openqa.selenium.WebElement;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "-"
                                },
                                {
                                    "line_no": 7,
                                    "content": "-import com.gargoylesoftware.htmlunit.ScriptResult;"
                                }
                            ],
                            "error_texts": [
                                "[6,] error: class, interface, or enum expected\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[34,] error: not a statement\n",
                                "[34,25] error: ';' expected\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 36,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[35,13] error: illegal start of expression\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 36,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[36,] error: not a statement\n",
                                "[36,13] error: illegal start of expression\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": ""
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 61,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n",
                                "[60,23] error: ';' expected\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 61,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n",
                                "[61,17] error: illegal start of expression\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 63,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[62,17] error: illegal start of expression\n",
                                "[62,] error: not a statement\n"
                            ]
                        },
                        "81": {
                            "lines": [
                                {
                                    "line_no": 80,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 81,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 82,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[81,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 16538069000004466295
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,7 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +33,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -59,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n-\n-import org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "6": {
                            "lines": [
                                {
                                    "line_no": 5,
                                    "content": "import org.openqa.selenium.WebElement;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "-"
                                },
                                {
                                    "line_no": 7,
                                    "content": "-import org.jenkinsci.test.acceptance.po.PageObject;"
                                }
                            ],
                            "error_texts": [
                                "[6,] error: class, interface, or enum expected\n"
                            ]
                        },
                        "33": {
                            "lines": [
                                {
                                    "line_no": 32,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[33,25] error: ';' expected\n",
                                "[33,] error: not a statement\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[34,] error: not a statement\n",
                                "[34,13] error: illegal start of expression\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 35,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 36,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[35,13] error: illegal start of expression\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "59": {
                            "lines": [
                                {
                                    "line_no": 58,
                                    "content": ""
                                },
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[59,23] error: ';' expected\n",
                                "[59,] error: not a statement\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,17] error: illegal start of expression\n",
                                "[60,] error: not a statement\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 61,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n",
                                "[61,17] error: illegal start of expression\n"
                            ]
                        },
                        "80": {
                            "lines": [
                                {
                                    "line_no": 79,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 80,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 81,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[80,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 3494277113488935794
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,7 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +33,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -59,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n-\n-import com.gargoylesoftware.htmlunit.ScriptResult;\n-import org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "6": {
                            "lines": [
                                {
                                    "line_no": 5,
                                    "content": "import org.openqa.selenium.WebElement;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "-"
                                },
                                {
                                    "line_no": 7,
                                    "content": "-import com.gargoylesoftware.htmlunit.ScriptResult;"
                                }
                            ],
                            "error_texts": [
                                "[6,] error: class, interface, or enum expected\n"
                            ]
                        },
                        "8": {
                            "lines": [
                                {
                                    "line_no": 7,
                                    "content": "-import com.gargoylesoftware.htmlunit.ScriptResult;"
                                },
                                {
                                    "line_no": 8,
                                    "content": "-import org.jenkinsci.test.acceptance.po.PageObject;"
                                },
                                {
                                    "line_no": 9,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[8,] error: class, interface, or enum expected\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[34,] error: not a statement\n",
                                "[34,25] error: ';' expected\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 36,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[35,13] error: illegal start of expression\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 36,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[36,] error: not a statement\n",
                                "[36,13] error: illegal start of expression\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": ""
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 61,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n",
                                "[60,23] error: ';' expected\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 61,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n",
                                "[61,17] error: illegal start of expression\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 63,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[62,17] error: illegal start of expression\n",
                                "[62,] error: not a statement\n"
                            ]
                        },
                        "81": {
                            "lines": [
                                {
                                    "line_no": 80,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 81,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 82,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[81,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 7079024742412751882
        },
        {
            "input": "```diff\n--- a/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java\n@@ -4,7 +4,6 @@ import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n \n-import com.gargoylesoftware.htmlunit.ScriptResult;\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n /**\n@@ -34,8 +33,7 @@ public class ChartUtil {\n                     \"delete(window.Array.prototype.toJSON) %n\"\n                             + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                     elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n         }\n         return null;\n     }\n@@ -59,8 +57,7 @@ public class ChartUtil {\n                                 + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                         toolAttribute));\n \n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                     return result.toString();\n                 }\n                 pageObject.elasticSleep(1000);\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "error: illegal start of expression\n",
                "updated_files": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n-\n-\n-import org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n-            ScriptResult scriptResult = new ScriptResult(result);\n-            return scriptResult.getJavaScriptResult().toString();\n+            return result != null ? result.toString() : null;\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n-                if (scriptResult != null) {\n+                if (result != null) {\n                    return result.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n"
                },
                "compile_error_details": {
                    "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java": {
                        "6": {
                            "lines": [
                                {
                                    "line_no": 5,
                                    "content": "import org.openqa.selenium.WebElement;"
                                },
                                {
                                    "line_no": 6,
                                    "content": "-"
                                },
                                {
                                    "line_no": 7,
                                    "content": "-"
                                }
                            ],
                            "error_texts": [
                                "[6,] error: class, interface, or enum expected\n"
                            ]
                        },
                        "34": {
                            "lines": [
                                {
                                    "line_no": 33,
                                    "content": "                    elementId));"
                                },
                                {
                                    "line_no": 34,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                }
                            ],
                            "error_texts": [
                                "[34,] error: not a statement\n",
                                "[34,25] error: ';' expected\n"
                            ]
                        },
                        "35": {
                            "lines": [
                                {
                                    "line_no": 34,
                                    "content": "-            ScriptResult scriptResult = new ScriptResult(result);"
                                },
                                {
                                    "line_no": 35,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 36,
                                    "content": "+            return result != null ? result.toString() : null;"
                                }
                            ],
                            "error_texts": [
                                "[35,13] error: illegal start of expression\n",
                                "[35,] error: not a statement\n"
                            ]
                        },
                        "36": {
                            "lines": [
                                {
                                    "line_no": 35,
                                    "content": "-            return scriptResult.getJavaScriptResult().toString();"
                                },
                                {
                                    "line_no": 36,
                                    "content": "+            return result != null ? result.toString() : null;"
                                },
                                {
                                    "line_no": 37,
                                    "content": "        }"
                                }
                            ],
                            "error_texts": [
                                "[36,] error: not a statement\n",
                                "[36,13] error: illegal start of expression\n"
                            ]
                        },
                        "60": {
                            "lines": [
                                {
                                    "line_no": 59,
                                    "content": ""
                                },
                                {
                                    "line_no": 60,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 61,
                                    "content": "-                if (scriptResult != null) {"
                                }
                            ],
                            "error_texts": [
                                "[60,] error: not a statement\n",
                                "[60,23] error: ';' expected\n"
                            ]
                        },
                        "61": {
                            "lines": [
                                {
                                    "line_no": 60,
                                    "content": "-                Object scriptResult = new ScriptResult(result).getJavaScriptResult();"
                                },
                                {
                                    "line_no": 61,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+                if (result != null) {"
                                }
                            ],
                            "error_texts": [
                                "[61,] error: not a statement\n",
                                "[61,17] error: illegal start of expression\n"
                            ]
                        },
                        "62": {
                            "lines": [
                                {
                                    "line_no": 61,
                                    "content": "-                if (scriptResult != null) {"
                                },
                                {
                                    "line_no": 62,
                                    "content": "+                if (result != null) {"
                                },
                                {
                                    "line_no": 63,
                                    "content": "                    return result.toString();"
                                }
                            ],
                            "error_texts": [
                                "[62,17] error: illegal start of expression\n",
                                "[62,] error: not a statement\n"
                            ]
                        },
                        "81": {
                            "lines": [
                                {
                                    "line_no": 80,
                                    "content": "     */"
                                },
                                {
                                    "line_no": 81,
                                    "content": "    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {"
                                },
                                {
                                    "line_no": 82,
                                    "content": "        try {"
                                }
                            ],
                            "error_texts": [
                                "[81,4] error: illegal start of expression\n"
                            ]
                        }
                    }
                }
            },
            "error": "error: illegal start of expression\n",
            "span_id": 14080377472725730991
        }
    ],
    "read_file": [
        {
            "input": "ui-tests/src/main/java/io/jenkins/plugins/coverage/util/ChartUtil.java",
            "output": "package io.jenkins.plugins.coverage.util;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebElement;\n\nimport com.gargoylesoftware.htmlunit.ScriptResult;\n\nimport org.jenkinsci.test.acceptance.po.PageObject;\n\n/**\n * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.\n */\n@SuppressWarnings(\"hideutilityclassconstructor\")\n// TODO: Move this code to ATH so we can reuse it from other plugins\npublic class ChartUtil {\n    private static final int MAX_ATTEMPTS = 5;\n\n    /**\n     * Returns a chart's data by its id.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return data as json\n     */\n    public static String getChartDataById(final PageObject pageObject, final String elementId) {\n        if (isChartDisplayedByElementId(pageObject, elementId)) {\n            Object result = pageObject.executeScript(String.format(\n                    \"delete(window.Array.prototype.toJSON) %n\"\n                            + \"return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\\\"%s\\\")).getOption())\",\n                    elementId));\n            ScriptResult scriptResult = new ScriptResult(result);\n            return scriptResult.getJavaScriptResult().toString();\n        }\n        return null;\n    }\n\n    /**\n     * Returns data of only chart with given tool attribute value on page.\n     *\n     * @param pageObject\n     *         which contains only one chart with given tool attribute value\n     * @param toolAttribute\n     *         value in div tag of chart\n     *\n     * @return data as json\n     */\n    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,\n            final String toolAttribute) {\n        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {\n            for (int i = 0; i < MAX_ATTEMPTS; i++) {\n                Object result = pageObject.executeScript(String.format(\n                        \"delete(window.Array.prototype.toJSON) %n\"\n                                + \"return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\\\"div [tool='%s']\\\")).getOption())\",\n                        toolAttribute));\n\n                Object scriptResult = new ScriptResult(result).getJavaScriptResult();\n                if (scriptResult != null) {\n                    return scriptResult.toString();\n                }\n                pageObject.elasticSleep(1000);\n            }\n        }\n        throw new java.util.NoSuchElementException(\"Found no trend chart with ID '%s''\" + toolAttribute);\n    }\n\n    /**\n     * Returns if chart is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param elementId\n     *         of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {\n        try {\n            WebElement chart = pageObject.find(By.id(elementId));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns if a chart with given tool attribute in div tag is displayed.\n     *\n     * @param pageObject\n     *         which contains chart\n     * @param toolAttribute\n     *         of div tag of chart\n     *\n     * @return if chart is displayed\n     */\n    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {\n        try {\n            WebElement chart = pageObject.find(By.cssSelector(\"div[tool='\" + toolAttribute + \"']\"));\n            return chart != null && chart.isDisplayed();\n        }\n        catch (NoSuchElementException exception) {\n            return false;\n        }\n\n    }\n\n}\n",
            "error": "",
            "span_id": 16110733015972307397
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}