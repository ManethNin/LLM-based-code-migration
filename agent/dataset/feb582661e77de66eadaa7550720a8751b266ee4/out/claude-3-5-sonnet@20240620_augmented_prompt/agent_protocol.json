{
    "validate_diffs": [
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java\n+++ b/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java\n@@ -9,7 +9,7 @@ import liquibase.database.Database;\n import liquibase.sql.Sql;\n import liquibase.sql.UnparsedSql;\n import liquibase.sqlgenerator.SqlGeneratorChain;\n-import liquibase.util.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n import liquibase.structure.core.Index;\n import liquibase.structure.core.Table;\n \n@@ -74,7 +74,7 @@ public class CreateIndexGeneratorMSSQL extends CreateIndexGenerator {\n         if (statement.getTablespace() != null && database.supportsTablespaces()) {\n             buffer.append(\" ON \");\n             if (statement.getTablespace().contains(\".\")) {\n-                buffer.append(statement.getTablespace());\n+                buffer.append(StringUtils.trimToNull(statement.getTablespace()));\n             } else {\n                 buffer.append(\"[\").append(statement.getTablespace()).append(\"]\");\n             }\n--- a/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java\n+++ b/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java\n@@ -9,7 +9,7 @@ import liquibase.database.Database;\n import liquibase.sql.Sql;\n import liquibase.sql.UnparsedSql;\n import liquibase.sqlgenerator.SqlGeneratorChain;\n-import liquibase.util.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n import liquibase.structure.core.PrimaryKey;\n import liquibase.structure.core.Table;\n \n@@ -64,7 +64,7 @@ public class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {\n         if (StringUtils.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {\n             buffer.append(\" ON \");\n             if (statement.getTablespace().contains(\".\")) {\n-                buffer.append(statement.getTablespace());\n+                buffer.append(StringUtils.trimToNull(statement.getTablespace()));\n             } else {\n                 buffer.append(\"[\").append(statement.getTablespace()).append(\"]\");\n             }\n--- a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n+++ b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n@@ -15,7 +15,7 @@ public class MSSQLDatabase extends JdbcDatabaseDelegate {\n     @Override\n     public Executor getExecutor() {\n         if (executor == null) {\n-            executor = ExecutorService.getInstance().getExecutor(this);\n+            executor = Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor(this);\n         }\n         return executor;\n     }\n```",
            "output": "Diff Error: UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java!\nMake extra sure the indentation is correct.\n\nsrc/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java does not contain these 7 exact lines in a row:\n```\n        if (statement.getTablespace() != null && database.supportsTablespaces()) {\n            buffer.append(\" ON \");\n            if (statement.getTablespace().contains(\".\")) {\n                buffer.append(statement.getTablespace());\n            } else {\n                buffer.append(\"[\").append(statement.getTablespace()).append(\"]\");\n            }\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java!\nMake extra sure the indentation is correct.\n\nsrc/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java does not contain these 7 exact lines in a row:\n```\n        if (StringUtils.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {\n            buffer.append(\" ON \");\n            if (statement.getTablespace().contains(\".\")) {\n                buffer.append(statement.getTablespace());\n            } else {\n                buffer.append(\"[\").append(statement.getTablespace()).append(\"]\");\n            }\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/java/liquibase/ext/mssql/database/MSSQLDatabase.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/java/liquibase/ext/mssql/database/MSSQLDatabase.java!\nMake extra sure the indentation is correct.\n\nsrc/java/liquibase/ext/mssql/database/MSSQLDatabase.java does not contain these 7 exact lines in a row:\n```\n    @Override\n    public Executor getExecutor() {\n        if (executor == null) {\n            executor = ExecutorService.getInstance().getExecutor(this);\n        }\n        return executor;\n    }\n```\n",
            "error": "UnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java!\nMake extra sure the indentation is correct.\n\nsrc/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java does not contain these 7 exact lines in a row:\n```\n        if (statement.getTablespace() != null && database.supportsTablespaces()) {\n            buffer.append(\" ON \");\n            if (statement.getTablespace().contains(\".\")) {\n                buffer.append(statement.getTablespace());\n            } else {\n                buffer.append(\"[\").append(statement.getTablespace()).append(\"]\");\n            }\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java!\nMake extra sure the indentation is correct.\n\nsrc/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java does not contain these 7 exact lines in a row:\n```\n        if (StringUtils.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {\n            buffer.append(\" ON \");\n            if (statement.getTablespace().contains(\".\")) {\n                buffer.append(statement.getTablespace());\n            } else {\n                buffer.append(\"[\").append(statement.getTablespace()).append(\"]\");\n            }\n```\n\n\nUnifiedDiffNoMatch: hunk failed to apply!\n\nsrc/java/liquibase/ext/mssql/database/MSSQLDatabase.java does not contain lines that match the diff you provided!\nTry again.\nDO NOT, NEVER, skip blank lines, comments, docstrings, etc!\nThe diff needs to apply cleanly to the lines in src/java/liquibase/ext/mssql/database/MSSQLDatabase.java!\nMake extra sure the indentation is correct.\n\nsrc/java/liquibase/ext/mssql/database/MSSQLDatabase.java does not contain these 7 exact lines in a row:\n```\n    @Override\n    public Executor getExecutor() {\n        if (executor == null) {\n            executor = ExecutorService.getInstance().getExecutor(this);\n        }\n        return executor;\n    }\n```\n",
            "span_id": 4348354724549783187
        },
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java\n+++ b/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java\n@@ -8,7 +8,7 @@ import liquibase.sql.Sql;\n import liquibase.sql.UnparsedSql;\n import liquibase.sqlgenerator.SqlGeneratorChain;\n import liquibase.sqlgenerator.core.CreateIndexGenerator;\n-import liquibase.util.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n import java.util.Arrays;\n import java.util.Iterator;\n \n```",
            "output": "{'src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java': 'package liquibase.ext.mssql.sqlgenerator;\\n\\nimport liquibase.change.AddColumnConfig;\\nimport liquibase.database.Database;\\nimport liquibase.ext.mssql.database.MSSQLDatabase;\\nimport liquibase.ext.mssql.statement.CreateIndexStatementMSSQL;\\nimport liquibase.sql.Sql;\\nimport liquibase.sql.UnparsedSql;\\nimport liquibase.sqlgenerator.SqlGeneratorChain;\\nimport liquibase.sqlgenerator.core.CreateIndexGenerator;\\nimport liquibase.statement.core.CreateIndexStatement;\\nimport org.apache.commons.lang3.StringUtils;\\n\\nimport java.util.Arrays;\\nimport java.util.Iterator;\\n\\npublic class CreateIndexGeneratorMSSQL extends CreateIndexGenerator {\\n  @Override\\n  public int getPriority() {\\n    return 15;\\n  }\\n\\n  @Override\\n  public Sql[] generateSql(CreateIndexStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\\n    if (statement instanceof CreateIndexStatementMSSQL) {\\n      return generateMSSQLSql((CreateIndexStatementMSSQL)statement, database, sqlGeneratorChain);\\n    }\\n\\n    return super.generateSql(statement, database, sqlGeneratorChain);\\n  }\\n\\n  private Sql[] generateMSSQLSql(CreateIndexStatementMSSQL statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\\n    StringBuilder builder = new StringBuilder();\\n\\n    // Basically copied from liquibase.sqlgenerator.core.CreateIndexGenerator\\n    builder.append(\"CREATE \");\\n    if (statement.isUnique() != null && statement.isUnique()) {\\n      builder.append(\"UNIQUE \");\\n    }\\n    \\n    if (statement.isClustered() != null) {\\n        if (statement.isClustered()) {\\n            builder.append(\"CLUSTERED \");\\n        } else {\\n            builder.append(\"NONCLUSTERED \");\\n        }\\n    }\\n    \\n    builder.append(\"INDEX \");\\n\\n    if (statement.getIndexName() != null) {\\n      String indexSchema = statement.getTableSchemaName();\\n      builder.append(database.escapeIndexName(statement.getTableCatalogName(), indexSchema, statement.getIndexName())).append(\" \");\\n    }\\n    builder.append(\"ON \");\\n    builder.append(database.escapeTableName(statement.getTableCatalogName(), statement.getTableSchemaName(), statement.getTableName())).append(\"(\");\\n    Iterator<AddColumnConfig> iterator = Arrays.asList(statement.getColumns()).iterator();\\n    while (iterator.hasNext()) {\\n      AddColumnConfig column = iterator.next();\\n      builder.append(database.escapeColumnName(statement.getTableCatalogName(), statement.getTableSchemaName(), statement.getTableName(), column.getName()));\\n      if (column.getDescending() != null && column.getDescending()) {\\n          builder.append(\" DESC\");\\n      }\\n      if (iterator.hasNext()) {\\n        builder.append(\", \");\\n      }\\n    }\\n    if (statement.getIncludedColumns() != null && ! statement.getIncludedColumns().isEmpty()) {\\n      builder.append(\") INCLUDE (\");\\n      builder.append(database.escapeColumnNameList(statement.getIncludedColumns()));\\n    }\\n    builder.append(\")\");\\n    if (statement.getFillFactor() != null) {\\n      builder.append(\" WITH (FILLFACTOR = \").append(statement.getFillFactor()).append(\")\");\\n    }\\n    // This block simplified, since we know we have MSSQLDatabase\\n    if (StringUtils.trimToNull(statement.getTablespace()) != null) {\\n      builder.append(\" ON \").append(statement.getTablespace());\\n    }\\n\\n    return new Sql[]{new UnparsedSql(builder.toString(), getAffectedIndex(statement))};\\n  }\\n\\n  @Override\\n  public boolean supports(CreateIndexStatement statement, Database database) {\\n    return database instanceof MSSQLDatabase;\\n  }\\n}\\n'}",
            "error": "",
            "span_id": 12815614740595810100
        },
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java\n+++ b/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java\n@@ -7,7 +7,7 @@ import liquibase.sql.UnparsedSql;\n import liquibase.sqlgenerator.SqlGeneratorChain;\n import liquibase.sqlgenerator.core.AddPrimaryKeyGenerator;\n import liquibase.statement.core.AddPrimaryKeyStatement;\n-import liquibase.util.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n \n public class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {\n   @Override\n```",
            "output": "{'src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java': 'package liquibase.ext.mssql.sqlgenerator;\\n\\nimport liquibase.database.Database;\\nimport liquibase.ext.mssql.database.MSSQLDatabase;\\nimport liquibase.ext.mssql.statement.AddPrimaryKeyStatementMSSQL;\\nimport liquibase.sql.Sql;\\nimport liquibase.sql.UnparsedSql;\\nimport liquibase.sqlgenerator.SqlGeneratorChain;\\nimport liquibase.sqlgenerator.core.AddPrimaryKeyGenerator;\\nimport liquibase.statement.core.AddPrimaryKeyStatement;\\nimport liquibase.structure.core.Index;\\nimport org.apache.commons.lang3.StringUtils;\\n\\npublic class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {\\n  @Override\\n  public int getPriority() {\\n    return 15;\\n  }\\n\\n  /**\\n   * Conditionally executes to extension\\'s custom Primary Key SQL generation process if statement is the\\n   * AddPrimaryKeyStatementMSSQL implementation and the custom attribute (fillFactor) is set.\\n   *\\n   * Otherwise, defers to default liquibase implementation.\\n   *\\n   * @param statement\\n   * @param database\\n   * @param sqlGeneratorChain\\n   * @return\\n   */\\n  @Override\\n  public Sql[] generateSql(AddPrimaryKeyStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\\n    if (statement instanceof AddPrimaryKeyStatementMSSQL && ((AddPrimaryKeyStatementMSSQL) statement).getFillFactor() != null) {\\n      return generateMSSQLSql((AddPrimaryKeyStatementMSSQL)statement, database, sqlGeneratorChain);\\n    }\\n\\n    return super.generateSql(statement, database, sqlGeneratorChain);\\n  }\\n\\n  /**\\n   * The extension\\'s implementation is essentially a copy/paste of the default implementation, with the following changes:\\n   *\\n   * 1) Removed other database platform specific logic other than MSSQL (purely to simplify)\\n   *\\n   * 2) Added support for setting fillFactor\\n   *\\n   * @param statement\\n   * @param database\\n   * @param sqlGeneratorChain\\n   * @return\\n   */\\n  private Sql[] generateMSSQLSql(AddPrimaryKeyStatementMSSQL statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\\n    String sql;\\n    if (statement.getConstraintName() == null) {\\n      sql = \"ALTER TABLE \" + database.escapeTableName(statement.getCatalogName(), statement.getSchemaName(), statement.getTableName()) + \" ADD PRIMARY KEY (\" + database.escapeColumnNameList(statement.getColumnNames()) + \")\";\\n    } else {\\n      sql = \"ALTER TABLE \" + database.escapeTableName(statement.getCatalogName(), statement.getSchemaName(), statement.getTableName()) + \" ADD CONSTRAINT \" + database.escapeConstraintName(statement.getConstraintName())+\" PRIMARY KEY\";\\n      if (!statement.isClustered()) {\\n        sql += \" NONCLUSTERED\";\\n      }\\n      sql += \" (\" + database.escapeColumnNameList(statement.getColumnNames()) + \")\";\\n    }\\n\\n    // the only new feature being added is support for fillFactor\\n    sql += \" WITH (FILLFACTOR = \" + statement.getFillFactor() + \")\";\\n\\n    if (StringUtils.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {\\n      sql += \" ON \"+statement.getTablespace();\\n    }\\n\\n    if (statement.getForIndexName() != null) {\\n      sql += \" USING INDEX \"+database.escapeObjectName(statement.getForIndexCatalogName(), statement.getForIndexSchemaName(), statement.getForIndexName(), Index.class);\\n    }\\n\\n    return new Sql[] {\\n        new UnparsedSql(sql, getAffectedPrimaryKey(statement))\\n    };\\n  }\\n\\n  @Override\\n  public boolean supports(AddPrimaryKeyStatement statement, Database database) {\\n    return database instanceof MSSQLDatabase;\\n  }\\n\\n}\\n'}",
            "error": "",
            "span_id": 11014145648981953787
        },
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n+++ b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n@@ -2,7 +2,8 @@ package liquibase.ext.mssql.database;\n \n import liquibase.CatalogAndSchema;\n import liquibase.exception.LiquibaseException;\n-import liquibase.executor.ExecutorService;\n+import liquibase.executor.Executor;\n+import liquibase.Scope;\n import liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n \n public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n@@ -14,6 +15,6 @@ public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n     @Override\n     public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n         super.dropDatabaseObjects(schemaToDrop);\n-        ExecutorService.getInstance().getExecutor(this).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));\n+        Scope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));\n     }\n }\n```",
            "output": "{'src/java/liquibase/ext/mssql/database/MSSQLDatabase.java': 'package liquibase.ext.mssql.database;\\n\\nimport liquibase.CatalogAndSchema;\\nimport liquibase.exception.LiquibaseException;\\nimport liquibase.executor.Executor;\\nimport liquibase.Scope;\\nimport liquibase.ext.mssql.statement.DropStoredProcedureStatement;\\n\\npublic class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\\n    \\n    @Override\\n    public int getPriority() {\\n        return PRIORITY_DATABASE;\\n    }\\n    \\n    @Override\\n    public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\\n        super.dropDatabaseObjects(schemaToDrop);\\nScope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));\\n    }\\n}'}",
            "error": "",
            "span_id": 2164752226739738747
        }
    ],
    "compile_maven": [
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java\n+++ b/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java\n@@ -8,7 +8,7 @@ import liquibase.sql.Sql;\n import liquibase.sql.UnparsedSql;\n import liquibase.sqlgenerator.SqlGeneratorChain;\n import liquibase.sqlgenerator.core.CreateIndexGenerator;\n-import liquibase.util.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n import java.util.Arrays;\n import java.util.Iterator;\n \n--- a/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java\n+++ b/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java\n@@ -7,7 +7,7 @@ import liquibase.sql.UnparsedSql;\n import liquibase.sqlgenerator.SqlGeneratorChain;\n import liquibase.sqlgenerator.core.AddPrimaryKeyGenerator;\n import liquibase.statement.core.AddPrimaryKeyStatement;\n-import liquibase.util.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n \n public class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {\n   @Override\n--- a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n+++ b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n@@ -2,7 +2,8 @@ package liquibase.ext.mssql.database;\n \n import liquibase.CatalogAndSchema;\n import liquibase.exception.LiquibaseException;\n-import liquibase.executor.ExecutorService;\n+import liquibase.executor.Executor;\n+import liquibase.Scope;\n import liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n \n public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n@@ -14,6 +15,6 @@ public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n     @Override\n     public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n         super.dropDatabaseObjects(schemaToDrop);\n-        ExecutorService.getInstance().getExecutor(this).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));\n+        Scope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "method getSingleton in class liquibase.Scope cannot be applied to given types;\n",
                "updated_files": {
                    "src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java": "package liquibase.ext.mssql.sqlgenerator;\n\nimport liquibase.change.AddColumnConfig;\nimport liquibase.database.Database;\nimport liquibase.ext.mssql.database.MSSQLDatabase;\nimport liquibase.ext.mssql.statement.CreateIndexStatementMSSQL;\nimport liquibase.sql.Sql;\nimport liquibase.sql.UnparsedSql;\nimport liquibase.sqlgenerator.SqlGeneratorChain;\nimport liquibase.sqlgenerator.core.CreateIndexGenerator;\nimport liquibase.statement.core.CreateIndexStatement;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\n\npublic class CreateIndexGeneratorMSSQL extends CreateIndexGenerator {\n  @Override\n  public int getPriority() {\n    return 15;\n  }\n\n  @Override\n  public Sql[] generateSql(CreateIndexStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    if (statement instanceof CreateIndexStatementMSSQL) {\n      return generateMSSQLSql((CreateIndexStatementMSSQL)statement, database, sqlGeneratorChain);\n    }\n\n    return super.generateSql(statement, database, sqlGeneratorChain);\n  }\n\n  private Sql[] generateMSSQLSql(CreateIndexStatementMSSQL statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    StringBuilder builder = new StringBuilder();\n\n    // Basically copied from liquibase.sqlgenerator.core.CreateIndexGenerator\n    builder.append(\"CREATE \");\n    if (statement.isUnique() != null && statement.isUnique()) {\n      builder.append(\"UNIQUE \");\n    }\n    \n    if (statement.isClustered() != null) {\n        if (statement.isClustered()) {\n            builder.append(\"CLUSTERED \");\n        } else {\n            builder.append(\"NONCLUSTERED \");\n        }\n    }\n    \n    builder.append(\"INDEX \");\n\n    if (statement.getIndexName() != null) {\n      String indexSchema = statement.getTableSchemaName();\n      builder.append(database.escapeIndexName(statement.getTableCatalogName(), indexSchema, statement.getIndexName())).append(\" \");\n    }\n    builder.append(\"ON \");\n    builder.append(database.escapeTableName(statement.getTableCatalogName(), statement.getTableSchemaName(), statement.getTableName())).append(\"(\");\n    Iterator<AddColumnConfig> iterator = Arrays.asList(statement.getColumns()).iterator();\n    while (iterator.hasNext()) {\n      AddColumnConfig column = iterator.next();\n      builder.append(database.escapeColumnName(statement.getTableCatalogName(), statement.getTableSchemaName(), statement.getTableName(), column.getName()));\n      if (column.getDescending() != null && column.getDescending()) {\n          builder.append(\" DESC\");\n      }\n      if (iterator.hasNext()) {\n        builder.append(\", \");\n      }\n    }\n    if (statement.getIncludedColumns() != null && ! statement.getIncludedColumns().isEmpty()) {\n      builder.append(\") INCLUDE (\");\n      builder.append(database.escapeColumnNameList(statement.getIncludedColumns()));\n    }\n    builder.append(\")\");\n    if (statement.getFillFactor() != null) {\n      builder.append(\" WITH (FILLFACTOR = \").append(statement.getFillFactor()).append(\")\");\n    }\n    // This block simplified, since we know we have MSSQLDatabase\n    if (StringUtils.trimToNull(statement.getTablespace()) != null) {\n      builder.append(\" ON \").append(statement.getTablespace());\n    }\n\n    return new Sql[]{new UnparsedSql(builder.toString(), getAffectedIndex(statement))};\n  }\n\n  @Override\n  public boolean supports(CreateIndexStatement statement, Database database) {\n    return database instanceof MSSQLDatabase;\n  }\n}\n",
                    "src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java": "package liquibase.ext.mssql.sqlgenerator;\n\nimport liquibase.database.Database;\nimport liquibase.ext.mssql.database.MSSQLDatabase;\nimport liquibase.ext.mssql.statement.AddPrimaryKeyStatementMSSQL;\nimport liquibase.sql.Sql;\nimport liquibase.sql.UnparsedSql;\nimport liquibase.sqlgenerator.SqlGeneratorChain;\nimport liquibase.sqlgenerator.core.AddPrimaryKeyGenerator;\nimport liquibase.statement.core.AddPrimaryKeyStatement;\nimport liquibase.structure.core.Index;\nimport org.apache.commons.lang3.StringUtils;\n\npublic class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {\n  @Override\n  public int getPriority() {\n    return 15;\n  }\n\n  /**\n   * Conditionally executes to extension's custom Primary Key SQL generation process if statement is the\n   * AddPrimaryKeyStatementMSSQL implementation and the custom attribute (fillFactor) is set.\n   *\n   * Otherwise, defers to default liquibase implementation.\n   *\n   * @param statement\n   * @param database\n   * @param sqlGeneratorChain\n   * @return\n   */\n  @Override\n  public Sql[] generateSql(AddPrimaryKeyStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    if (statement instanceof AddPrimaryKeyStatementMSSQL && ((AddPrimaryKeyStatementMSSQL) statement).getFillFactor() != null) {\n      return generateMSSQLSql((AddPrimaryKeyStatementMSSQL)statement, database, sqlGeneratorChain);\n    }\n\n    return super.generateSql(statement, database, sqlGeneratorChain);\n  }\n\n  /**\n   * The extension's implementation is essentially a copy/paste of the default implementation, with the following changes:\n   *\n   * 1) Removed other database platform specific logic other than MSSQL (purely to simplify)\n   *\n   * 2) Added support for setting fillFactor\n   *\n   * @param statement\n   * @param database\n   * @param sqlGeneratorChain\n   * @return\n   */\n  private Sql[] generateMSSQLSql(AddPrimaryKeyStatementMSSQL statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    String sql;\n    if (statement.getConstraintName() == null) {\n      sql = \"ALTER TABLE \" + database.escapeTableName(statement.getCatalogName(), statement.getSchemaName(), statement.getTableName()) + \" ADD PRIMARY KEY (\" + database.escapeColumnNameList(statement.getColumnNames()) + \")\";\n    } else {\n      sql = \"ALTER TABLE \" + database.escapeTableName(statement.getCatalogName(), statement.getSchemaName(), statement.getTableName()) + \" ADD CONSTRAINT \" + database.escapeConstraintName(statement.getConstraintName())+\" PRIMARY KEY\";\n      if (!statement.isClustered()) {\n        sql += \" NONCLUSTERED\";\n      }\n      sql += \" (\" + database.escapeColumnNameList(statement.getColumnNames()) + \")\";\n    }\n\n    // the only new feature being added is support for fillFactor\n    sql += \" WITH (FILLFACTOR = \" + statement.getFillFactor() + \")\";\n\n    if (StringUtils.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {\n      sql += \" ON \"+statement.getTablespace();\n    }\n\n    if (statement.getForIndexName() != null) {\n      sql += \" USING INDEX \"+database.escapeObjectName(statement.getForIndexCatalogName(), statement.getForIndexSchemaName(), statement.getForIndexName(), Index.class);\n    }\n\n    return new Sql[] {\n        new UnparsedSql(sql, getAffectedPrimaryKey(statement))\n    };\n  }\n\n  @Override\n  public boolean supports(AddPrimaryKeyStatement statement, Database database) {\n    return database instanceof MSSQLDatabase;\n  }\n\n}\n",
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": "package liquibase.ext.mssql.database;\n\nimport liquibase.CatalogAndSchema;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.executor.Executor;\nimport liquibase.Scope;\nimport liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n\npublic class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n    \n    @Override\n    public int getPriority() {\n        return PRIORITY_DATABASE;\n    }\n    \n    @Override\n    public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n        super.dropDatabaseObjects(schemaToDrop);\nScope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));\n    }\n}"
                },
                "compile_error_details": {
                    "src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java": {
                        "12": {
                            "lines": [
                                {
                                    "line_no": 11,
                                    "content": "import liquibase.structure.core.Index;"
                                },
                                {
                                    "line_no": 12,
                                    "content": "import org.apache.commons.lang3.StringUtils;"
                                },
                                {
                                    "line_no": 13,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[12,32] package org.apache.commons.lang3 does not exist\n"
                            ]
                        },
                        "67": {
                            "lines": [
                                {
                                    "line_no": 66,
                                    "content": ""
                                },
                                {
                                    "line_no": 67,
                                    "content": "    if (StringUtils.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {"
                                },
                                {
                                    "line_no": 68,
                                    "content": "      sql += \" ON \"+statement.getTablespace();"
                                }
                            ],
                            "error_texts": [
                                "[67,9] cannot find symbol\nsymbol: variable StringUtils\nlocation: class liquibase.ext.mssql.sqlgenerator.AddPrimaryKeyGeneratorMSSQL\n",
                                "[67,9] cannot find symbol\n"
                            ]
                        }
                    },
                    "src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java": {
                        "12": {
                            "lines": [
                                {
                                    "line_no": 11,
                                    "content": "import liquibase.statement.core.CreateIndexStatement;"
                                },
                                {
                                    "line_no": 12,
                                    "content": "import org.apache.commons.lang3.StringUtils;"
                                },
                                {
                                    "line_no": 13,
                                    "content": ""
                                }
                            ],
                            "error_texts": [
                                "[12,32] package org.apache.commons.lang3 does not exist\n"
                            ]
                        },
                        "77": {
                            "lines": [
                                {
                                    "line_no": 76,
                                    "content": "    // This block simplified, since we know we have MSSQLDatabase"
                                },
                                {
                                    "line_no": 77,
                                    "content": "    if (StringUtils.trimToNull(statement.getTablespace()) != null) {"
                                },
                                {
                                    "line_no": 78,
                                    "content": "      builder.append(\" ON \").append(statement.getTablespace());"
                                }
                            ],
                            "error_texts": [
                                "[77,9] cannot find symbol\n",
                                "[77,9] cannot find symbol\nsymbol: variable StringUtils\nlocation: class liquibase.ext.mssql.sqlgenerator.CreateIndexGeneratorMSSQL\n"
                            ]
                        }
                    },
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": {
                        "19": {
                            "lines": [
                                {
                                    "line_no": 18,
                                    "content": "        super.dropDatabaseObjects(schemaToDrop);"
                                },
                                {
                                    "line_no": 19,
                                    "content": "Scope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));"
                                },
                                {
                                    "line_no": 20,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[19,24] method getSingleton in class liquibase.Scope cannot be applied to given types;\nrequired: java.lang.Class<T>\nfound: java.lang.Class<liquibase.executor.Executor>\nreason: inference variable T has incompatible bounds\nequality constraints: liquibase.executor.Executor\nlower bounds: liquibase.SingletonObject\n",
                                "[19,24] method getSingleton in class liquibase.Scope cannot be applied to given types;\n"
                            ]
                        }
                    }
                }
            },
            "error": "method getSingleton in class liquibase.Scope cannot be applied to given types;\n",
            "span_id": 13273427936540342699
        },
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java\n+++ b/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java\n@@ -8,7 +8,7 @@ import liquibase.sql.Sql;\n import liquibase.sql.UnparsedSql;\n import liquibase.sqlgenerator.SqlGeneratorChain;\n import liquibase.sqlgenerator.core.CreateIndexGenerator;\n-import org.apache.commons.lang3.StringUtils;\n+import liquibase.util.StringUtil;\n import java.util.Arrays;\n import java.util.Iterator;\n \n@@ -74,7 +74,7 @@ public class CreateIndexGeneratorMSSQL extends CreateIndexGenerator {\n       builder.append(\" WITH (FILLFACTOR = \").append(statement.getFillFactor()).append(\")\");\n     }\n     // This block simplified, since we know we have MSSQLDatabase\n-    if (StringUtils.trimToNull(statement.getTablespace()) != null) {\n+    if (StringUtil.trimToNull(statement.getTablespace()) != null) {\n       builder.append(\" ON \").append(statement.getTablespace());\n     }\n \n--- a/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java\n+++ b/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java\n@@ -8,7 +8,7 @@ import liquibase.sqlgenerator.SqlGeneratorChain;\n import liquibase.sqlgenerator.core.AddPrimaryKeyGenerator;\n import liquibase.statement.core.AddPrimaryKeyStatement;\n import liquibase.structure.core.Index;\n-import org.apache.commons.lang3.StringUtils;\n+import liquibase.util.StringUtil;\n \n public class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {\n   @Override\n@@ -64,7 +64,7 @@ public class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {\n     // the only new feature being added is support for fillFactor\n     sql += \" WITH (FILLFACTOR = \" + statement.getFillFactor() + \")\";\n \n-    if (StringUtils.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {\n+    if (StringUtil.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {\n       sql += \" ON \"+statement.getTablespace();\n     }\n \n--- a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n+++ b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n@@ -16,6 +16,6 @@ public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n     @Override\n     public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n         super.dropDatabaseObjects(schemaToDrop);\n-        Scope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));\n+        Scope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), this);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "method getSingleton in class liquibase.Scope cannot be applied to given types;\n",
                "updated_files": {
                    "src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java": "package liquibase.ext.mssql.sqlgenerator;\n\nimport liquibase.change.AddColumnConfig;\nimport liquibase.database.Database;\nimport liquibase.ext.mssql.database.MSSQLDatabase;\nimport liquibase.ext.mssql.statement.CreateIndexStatementMSSQL;\nimport liquibase.sql.Sql;\nimport liquibase.sql.UnparsedSql;\nimport liquibase.sqlgenerator.SqlGeneratorChain;\nimport liquibase.sqlgenerator.core.CreateIndexGenerator;\nimport liquibase.statement.core.CreateIndexStatement;\nimport liquibase.util.StringUtil;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\n\npublic class CreateIndexGeneratorMSSQL extends CreateIndexGenerator {\n  @Override\n  public int getPriority() {\n    return 15;\n  }\n\n  @Override\n  public Sql[] generateSql(CreateIndexStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    if (statement instanceof CreateIndexStatementMSSQL) {\n      return generateMSSQLSql((CreateIndexStatementMSSQL)statement, database, sqlGeneratorChain);\n    }\n\n    return super.generateSql(statement, database, sqlGeneratorChain);\n  }\n\n  private Sql[] generateMSSQLSql(CreateIndexStatementMSSQL statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    StringBuilder builder = new StringBuilder();\n\n    // Basically copied from liquibase.sqlgenerator.core.CreateIndexGenerator\n    builder.append(\"CREATE \");\n    if (statement.isUnique() != null && statement.isUnique()) {\n      builder.append(\"UNIQUE \");\n    }\n    \n    if (statement.isClustered() != null) {\n        if (statement.isClustered()) {\n            builder.append(\"CLUSTERED \");\n        } else {\n            builder.append(\"NONCLUSTERED \");\n        }\n    }\n    \n    builder.append(\"INDEX \");\n\n    if (statement.getIndexName() != null) {\n      String indexSchema = statement.getTableSchemaName();\n      builder.append(database.escapeIndexName(statement.getTableCatalogName(), indexSchema, statement.getIndexName())).append(\" \");\n    }\n    builder.append(\"ON \");\n    builder.append(database.escapeTableName(statement.getTableCatalogName(), statement.getTableSchemaName(), statement.getTableName())).append(\"(\");\n    Iterator<AddColumnConfig> iterator = Arrays.asList(statement.getColumns()).iterator();\n    while (iterator.hasNext()) {\n      AddColumnConfig column = iterator.next();\n      builder.append(database.escapeColumnName(statement.getTableCatalogName(), statement.getTableSchemaName(), statement.getTableName(), column.getName()));\n      if (column.getDescending() != null && column.getDescending()) {\n          builder.append(\" DESC\");\n      }\n      if (iterator.hasNext()) {\n        builder.append(\", \");\n      }\n    }\n    if (statement.getIncludedColumns() != null && ! statement.getIncludedColumns().isEmpty()) {\n      builder.append(\") INCLUDE (\");\n      builder.append(database.escapeColumnNameList(statement.getIncludedColumns()));\n    }\n    builder.append(\")\");\n    if (statement.getFillFactor() != null) {\n      builder.append(\" WITH (FILLFACTOR = \").append(statement.getFillFactor()).append(\")\");\n    }\n    // This block simplified, since we know we have MSSQLDatabase\n    if (StringUtil.trimToNull(statement.getTablespace()) != null) {\n      builder.append(\" ON \").append(statement.getTablespace());\n    }\n\n    return new Sql[]{new UnparsedSql(builder.toString(), getAffectedIndex(statement))};\n  }\n\n  @Override\n  public boolean supports(CreateIndexStatement statement, Database database) {\n    return database instanceof MSSQLDatabase;\n  }\n}\n",
                    "src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java": "package liquibase.ext.mssql.sqlgenerator;\n\nimport liquibase.database.Database;\nimport liquibase.ext.mssql.database.MSSQLDatabase;\nimport liquibase.ext.mssql.statement.AddPrimaryKeyStatementMSSQL;\nimport liquibase.sql.Sql;\nimport liquibase.sql.UnparsedSql;\nimport liquibase.sqlgenerator.SqlGeneratorChain;\nimport liquibase.sqlgenerator.core.AddPrimaryKeyGenerator;\nimport liquibase.statement.core.AddPrimaryKeyStatement;\nimport liquibase.structure.core.Index;\nimport liquibase.util.StringUtil;\n\npublic class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {\n  @Override\n  public int getPriority() {\n    return 15;\n  }\n\n  /**\n   * Conditionally executes to extension's custom Primary Key SQL generation process if statement is the\n   * AddPrimaryKeyStatementMSSQL implementation and the custom attribute (fillFactor) is set.\n   *\n   * Otherwise, defers to default liquibase implementation.\n   *\n   * @param statement\n   * @param database\n   * @param sqlGeneratorChain\n   * @return\n   */\n  @Override\n  public Sql[] generateSql(AddPrimaryKeyStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    if (statement instanceof AddPrimaryKeyStatementMSSQL && ((AddPrimaryKeyStatementMSSQL) statement).getFillFactor() != null) {\n      return generateMSSQLSql((AddPrimaryKeyStatementMSSQL)statement, database, sqlGeneratorChain);\n    }\n\n    return super.generateSql(statement, database, sqlGeneratorChain);\n  }\n\n  /**\n   * The extension's implementation is essentially a copy/paste of the default implementation, with the following changes:\n   *\n   * 1) Removed other database platform specific logic other than MSSQL (purely to simplify)\n   *\n   * 2) Added support for setting fillFactor\n   *\n   * @param statement\n   * @param database\n   * @param sqlGeneratorChain\n   * @return\n   */\n  private Sql[] generateMSSQLSql(AddPrimaryKeyStatementMSSQL statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    String sql;\n    if (statement.getConstraintName() == null) {\n      sql = \"ALTER TABLE \" + database.escapeTableName(statement.getCatalogName(), statement.getSchemaName(), statement.getTableName()) + \" ADD PRIMARY KEY (\" + database.escapeColumnNameList(statement.getColumnNames()) + \")\";\n    } else {\n      sql = \"ALTER TABLE \" + database.escapeTableName(statement.getCatalogName(), statement.getSchemaName(), statement.getTableName()) + \" ADD CONSTRAINT \" + database.escapeConstraintName(statement.getConstraintName())+\" PRIMARY KEY\";\n      if (!statement.isClustered()) {\n        sql += \" NONCLUSTERED\";\n      }\n      sql += \" (\" + database.escapeColumnNameList(statement.getColumnNames()) + \")\";\n    }\n\n    // the only new feature being added is support for fillFactor\n    sql += \" WITH (FILLFACTOR = \" + statement.getFillFactor() + \")\";\n\n    if (StringUtil.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {\n      sql += \" ON \"+statement.getTablespace();\n    }\n\n    if (statement.getForIndexName() != null) {\n      sql += \" USING INDEX \"+database.escapeObjectName(statement.getForIndexCatalogName(), statement.getForIndexSchemaName(), statement.getForIndexName(), Index.class);\n    }\n\n    return new Sql[] {\n        new UnparsedSql(sql, getAffectedPrimaryKey(statement))\n    };\n  }\n\n  @Override\n  public boolean supports(AddPrimaryKeyStatement statement, Database database) {\n    return database instanceof MSSQLDatabase;\n  }\n\n}\n",
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": "package liquibase.ext.mssql.database;\n\nimport liquibase.CatalogAndSchema;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.executor.Executor;\nimport liquibase.Scope;\nimport liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n\npublic class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n    \n    @Override\n    public int getPriority() {\n        return PRIORITY_DATABASE;\n    }\n    \n    @Override\n    public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n        super.dropDatabaseObjects(schemaToDrop);\nScope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), this);\n    }\n}"
                },
                "compile_error_details": {
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": {
                        "19": {
                            "lines": [
                                {
                                    "line_no": 18,
                                    "content": "        super.dropDatabaseObjects(schemaToDrop);"
                                },
                                {
                                    "line_no": 19,
                                    "content": "Scope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), this);"
                                },
                                {
                                    "line_no": 20,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[19,24] method getSingleton in class liquibase.Scope cannot be applied to given types;\nrequired: java.lang.Class<T>\nfound: java.lang.Class<liquibase.executor.Executor>\nreason: inference variable T has incompatible bounds\nequality constraints: liquibase.executor.Executor\nlower bounds: liquibase.SingletonObject\n",
                                "[19,24] method getSingleton in class liquibase.Scope cannot be applied to given types;\n"
                            ]
                        }
                    }
                }
            },
            "error": "method getSingleton in class liquibase.Scope cannot be applied to given types;\n",
            "span_id": 18040684821410676337
        },
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n+++ b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n@@ -16,6 +16,6 @@ public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n     @Override\n     public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n         super.dropDatabaseObjects(schemaToDrop);\n-        Scope.getCurrentScope().getSingleton(Executor.class).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), this);\n+        ((Executor) Scope.getCurrentScope().getSingleton(Executor.class)).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), this);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "no suitable method found for execute(liquibase.ext.mssql.statement.DropStoredProcedureStatement,liquibase.ext.mssql.database.MSSQLDatabase)\n",
                "updated_files": {
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": "package liquibase.ext.mssql.database;\n\nimport liquibase.CatalogAndSchema;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.executor.Executor;\nimport liquibase.Scope;\nimport liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n\npublic class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n    \n    @Override\n    public int getPriority() {\n        return PRIORITY_DATABASE;\n    }\n    \n    @Override\n    public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n        super.dropDatabaseObjects(schemaToDrop);\n((Executor) Scope.getCurrentScope().getSingleton(Executor.class)).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), this);\n    }\n}"
                },
                "compile_error_details": {
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": {
                        "19": {
                            "lines": [
                                {
                                    "line_no": 18,
                                    "content": "        super.dropDatabaseObjects(schemaToDrop);"
                                },
                                {
                                    "line_no": 19,
                                    "content": "((Executor) Scope.getCurrentScope().getSingleton(Executor.class)).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), this);"
                                },
                                {
                                    "line_no": 20,
                                    "content": "    }"
                                }
                            ],
                            "error_texts": [
                                "[19,66] no suitable method found for execute(liquibase.ext.mssql.statement.DropStoredProcedureStatement,liquibase.ext.mssql.database.MSSQLDatabase)\nmethod liquibase.executor.Executor.execute(liquibase.change.Change,java.util.List<liquibase.sql.visitor.SqlVisitor>) is not applicable\n(argument mismatch; liquibase.ext.mssql.statement.DropStoredProcedureStatement cannot be converted to liquibase.change.Change)\nmethod liquibase.executor.Executor.execute(liquibase.statement.SqlStatement,java.util.List<liquibase.sql.visitor.SqlVisitor>) is not applicable\n(argument mismatch; liquibase.ext.mssql.database.MSSQLDatabase cannot be converted to java.util.List<liquibase.sql.visitor.SqlVisitor>)\n",
                                "[19,36] method getSingleton in class liquibase.Scope cannot be applied to given types;\nrequired: java.lang.Class<T>\nfound: java.lang.Class<liquibase.executor.Executor>\nreason: inference variable T has incompatible bounds\nequality constraints: liquibase.executor.Executor\nlower bounds: liquibase.SingletonObject\n",
                                "[19,36] method getSingleton in class liquibase.Scope cannot be applied to given types;\n",
                                "[19,66] no suitable method found for execute(liquibase.ext.mssql.statement.DropStoredProcedureStatement,liquibase.ext.mssql.database.MSSQLDatabase)\n"
                            ]
                        }
                    }
                }
            },
            "error": "no suitable method found for execute(liquibase.ext.mssql.statement.DropStoredProcedureStatement,liquibase.ext.mssql.database.MSSQLDatabase)\n",
            "span_id": 8743595608522646973
        },
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n+++ b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n@@ -4,6 +4,8 @@ import liquibase.CatalogAndSchema;\n import liquibase.exception.LiquibaseException;\n import liquibase.executor.Executor;\n import liquibase.Scope;\n+import liquibase.statement.SqlStatement;\n+import liquibase.sql.visitor.SqlVisitor;\n import liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n \n public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n@@ -16,6 +18,7 @@ public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n     @Override\n     public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n         super.dropDatabaseObjects(schemaToDrop);\n-        ((Executor) Scope.getCurrentScope().getSingleton(Executor.class)).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), this);\n+        Executor executor = Scope.getCurrentScope().getSingleton(Executor.class);\n+        executor.execute((SqlStatement) new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), (java.util.List<SqlVisitor>) null);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": false,
                "test_has_succeeded": false,
                "error_text": "method getSingleton in class liquibase.Scope cannot be applied to given types;\n",
                "updated_files": {
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": "package liquibase.ext.mssql.database;\n\nimport liquibase.CatalogAndSchema;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.executor.Executor;\nimport liquibase.Scope;\nimport liquibase.statement.SqlStatement;\nimport liquibase.sql.visitor.SqlVisitor;\nimport liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n\npublic class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n    \n    @Override\n    public int getPriority() {\n        return PRIORITY_DATABASE;\n    }\n    \n    @Override\n    public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n        super.dropDatabaseObjects(schemaToDrop);\nExecutor executor = Scope.getCurrentScope().getSingleton(Executor.class);\nexecutor.execute((SqlStatement) new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), (java.util.List<SqlVisitor>) null);\n}\n}"
                },
                "compile_error_details": {
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": {
                        "21": {
                            "lines": [
                                {
                                    "line_no": 20,
                                    "content": "        super.dropDatabaseObjects(schemaToDrop);"
                                },
                                {
                                    "line_no": 21,
                                    "content": "Executor executor = Scope.getCurrentScope().getSingleton(Executor.class);"
                                },
                                {
                                    "line_no": 22,
                                    "content": "executor.execute((SqlStatement) new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), (java.util.List<SqlVisitor>) null);"
                                }
                            ],
                            "error_texts": [
                                "[21,44] method getSingleton in class liquibase.Scope cannot be applied to given types;\n",
                                "[21,44] method getSingleton in class liquibase.Scope cannot be applied to given types;\nrequired: java.lang.Class<T>\nfound: java.lang.Class<liquibase.executor.Executor>\nreason: inference variable T has incompatible bounds\nequality constraints: liquibase.executor.Executor\nlower bounds: liquibase.SingletonObject\n"
                            ]
                        }
                    }
                }
            },
            "error": "method getSingleton in class liquibase.Scope cannot be applied to given types;\n",
            "span_id": 4117378624138236657
        },
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n+++ b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n@@ -3,6 +3,7 @@ package liquibase.ext.mssql.database;\n import liquibase.CatalogAndSchema;\n import liquibase.exception.LiquibaseException;\n import liquibase.executor.Executor;\n+import liquibase.executor.ExecutorService;\n import liquibase.Scope;\n import liquibase.statement.SqlStatement;\n import liquibase.sql.visitor.SqlVisitor;\n@@ -18,7 +19,7 @@ public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n     @Override\n     public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n         super.dropDatabaseObjects(schemaToDrop);\n-        Executor executor = Scope.getCurrentScope().getSingleton(Executor.class);\n+        Executor executor = Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor(\"jdbc\", this);\n         executor.execute((SqlStatement) new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), (java.util.List<SqlVisitor>) null);\n     }\n }\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR] DatabaseSelectionTest.selectionTest:18 Not the expected database\nExpected: an instance of liquibase.ext.mssql.database.MSSQLDatabase\nbut: <null @ offline:mssql> is a liquibase.database.core.MSSQLDatabase\n[ERROR] IndexGeneratorTest.integrates:29 expected:<...ATE UNIQUE INDEX ON [[TABLE_NAME]([id], [name]])> but was:<...ATE UNIQUE INDEX ON [TABLE_NAME(id, name])>\n[ERROR] InsertGeneratorTest.integrates:30 expected:<3> but was:<1>\n[ERROR] PrimaryKeyGeneratorTest.integrates:26 expected:<ALTER TABLE [[mySchema].[myTable] ADD CONSTRAINT [myConstraint] PRIMARY KEY ([myCol]])> but was:<ALTER TABLE [myCat.mySchema.myTable ADD CONSTRAINT myConstraint PRIMARY KEY CLUSTERED (myCol])>\n[INFO]\n[ERROR] Tests run: 4, Failures: 4, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 5.652 s\n[INFO] Finished at: 2024-08-05T16:57:54Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.2.5:test (default-test) on project liquibase-mssql: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
                "updated_files": {
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": "package liquibase.ext.mssql.database;\n\nimport liquibase.CatalogAndSchema;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.executor.Executor;\nimport liquibase.executor.ExecutorService;\nimport liquibase.Scope;\nimport liquibase.statement.SqlStatement;\nimport liquibase.sql.visitor.SqlVisitor;\nimport liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n\npublic class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n    \n    @Override\n    public int getPriority() {\n        return PRIORITY_DATABASE;\n    }\n    \n    @Override\n    public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n        super.dropDatabaseObjects(schemaToDrop);\nExecutor executor = Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor(\"jdbc\", this);\nexecutor.execute((SqlStatement) new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), (java.util.List<SqlVisitor>) null);\n}\n}"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR] DatabaseSelectionTest.selectionTest:18 Not the expected database\nExpected: an instance of liquibase.ext.mssql.database.MSSQLDatabase\nbut: <null @ offline:mssql> is a liquibase.database.core.MSSQLDatabase\n[ERROR] IndexGeneratorTest.integrates:29 expected:<...ATE UNIQUE INDEX ON [[TABLE_NAME]([id], [name]])> but was:<...ATE UNIQUE INDEX ON [TABLE_NAME(id, name])>\n[ERROR] InsertGeneratorTest.integrates:30 expected:<3> but was:<1>\n[ERROR] PrimaryKeyGeneratorTest.integrates:26 expected:<ALTER TABLE [[mySchema].[myTable] ADD CONSTRAINT [myConstraint] PRIMARY KEY ([myCol]])> but was:<ALTER TABLE [myCat.mySchema.myTable ADD CONSTRAINT myConstraint PRIMARY KEY CLUSTERED (myCol])>\n[INFO]\n[ERROR] Tests run: 4, Failures: 4, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 5.652 s\n[INFO] Finished at: 2024-08-05T16:57:54Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.2.5:test (default-test) on project liquibase-mssql: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
            "span_id": 12518888979294639288
        },
        {
            "input": "```diff\n--- a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n+++ b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java\n@@ -13,7 +13,7 @@ public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n     \n     @Override\n     public int getPriority() {\n-        return PRIORITY_DATABASE;\n+        return PRIORITY_DATABASE + 5;\n     }\n     \n     @Override\n```",
            "output": {
                "compilation_has_succeeded": true,
                "test_has_succeeded": false,
                "error_text": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR] DatabaseSelectionTest.selectionTest:18 Not the expected database\nExpected: an instance of liquibase.ext.mssql.database.MSSQLDatabase\nbut: <null @ offline:mssql> is a liquibase.database.core.MSSQLDatabase\n[ERROR] IndexGeneratorTest.integrates:29 expected:<...ATE UNIQUE INDEX ON [[TABLE_NAME]([id], [name]])> but was:<...ATE UNIQUE INDEX ON [TABLE_NAME(id, name])>\n[ERROR] InsertGeneratorTest.integrates:30 expected:<3> but was:<1>\n[ERROR] PrimaryKeyGeneratorTest.integrates:26 expected:<ALTER TABLE [[mySchema].[myTable] ADD CONSTRAINT [myConstraint] PRIMARY KEY ([myCol]])> but was:<ALTER TABLE [myCat.mySchema.myTable ADD CONSTRAINT myConstraint PRIMARY KEY CLUSTERED (myCol])>\n[INFO]\n[ERROR] Tests run: 4, Failures: 4, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 5.275 s\n[INFO] Finished at: 2024-08-05T16:58:16Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.2.5:test (default-test) on project liquibase-mssql: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
                "updated_files": {
                    "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java": "package liquibase.ext.mssql.database;\n\nimport liquibase.CatalogAndSchema;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.executor.Executor;\nimport liquibase.executor.ExecutorService;\nimport liquibase.Scope;\nimport liquibase.statement.SqlStatement;\nimport liquibase.sql.visitor.SqlVisitor;\nimport liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n\npublic class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n    \n    @Override\n    public int getPriority() {\nreturn PRIORITY_DATABASE + 5;\n    }\n    \n    @Override\n    public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n        super.dropDatabaseObjects(schemaToDrop);\nExecutor executor = Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor(\"jdbc\", this);\nexecutor.execute((SqlStatement) new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), (java.util.List<SqlVisitor>) null);\n}\n}"
                },
                "compile_error_details": {}
            },
            "error": "[INFO]\n[INFO] Results:\n[INFO]\n[ERROR] Failures:\n[ERROR] DatabaseSelectionTest.selectionTest:18 Not the expected database\nExpected: an instance of liquibase.ext.mssql.database.MSSQLDatabase\nbut: <null @ offline:mssql> is a liquibase.database.core.MSSQLDatabase\n[ERROR] IndexGeneratorTest.integrates:29 expected:<...ATE UNIQUE INDEX ON [[TABLE_NAME]([id], [name]])> but was:<...ATE UNIQUE INDEX ON [TABLE_NAME(id, name])>\n[ERROR] InsertGeneratorTest.integrates:30 expected:<3> but was:<1>\n[ERROR] PrimaryKeyGeneratorTest.integrates:26 expected:<ALTER TABLE [[mySchema].[myTable] ADD CONSTRAINT [myConstraint] PRIMARY KEY ([myCol]])> but was:<ALTER TABLE [myCat.mySchema.myTable ADD CONSTRAINT myConstraint PRIMARY KEY CLUSTERED (myCol])>\n[INFO]\n[ERROR] Tests run: 4, Failures: 4, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 5.275 s\n[INFO] Finished at: 2024-08-05T16:58:16Z\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.2.5:test (default-test) on project liquibase-mssql: There are test failures.\n[ERROR]\n[ERROR] Please refer to /mnt/repo/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException",
            "span_id": 4330686462382455980
        }
    ],
    "read_file": [
        {
            "input": "src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java",
            "output": "package liquibase.ext.mssql.sqlgenerator;\n\nimport liquibase.change.AddColumnConfig;\nimport liquibase.database.Database;\nimport liquibase.ext.mssql.database.MSSQLDatabase;\nimport liquibase.ext.mssql.statement.CreateIndexStatementMSSQL;\nimport liquibase.sql.Sql;\nimport liquibase.sql.UnparsedSql;\nimport liquibase.sqlgenerator.SqlGeneratorChain;\nimport liquibase.sqlgenerator.core.CreateIndexGenerator;\nimport liquibase.statement.core.CreateIndexStatement;\nimport liquibase.util.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\n\npublic class CreateIndexGeneratorMSSQL extends CreateIndexGenerator {\n  @Override\n  public int getPriority() {\n    return 15;\n  }\n\n  @Override\n  public Sql[] generateSql(CreateIndexStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    if (statement instanceof CreateIndexStatementMSSQL) {\n      return generateMSSQLSql((CreateIndexStatementMSSQL)statement, database, sqlGeneratorChain);\n    }\n\n    return super.generateSql(statement, database, sqlGeneratorChain);\n  }\n\n  private Sql[] generateMSSQLSql(CreateIndexStatementMSSQL statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    StringBuilder builder = new StringBuilder();\n\n    // Basically copied from liquibase.sqlgenerator.core.CreateIndexGenerator\n    builder.append(\"CREATE \");\n    if (statement.isUnique() != null && statement.isUnique()) {\n      builder.append(\"UNIQUE \");\n    }\n    \n    if (statement.isClustered() != null) {\n        if (statement.isClustered()) {\n            builder.append(\"CLUSTERED \");\n        } else {\n            builder.append(\"NONCLUSTERED \");\n        }\n    }\n    \n    builder.append(\"INDEX \");\n\n    if (statement.getIndexName() != null) {\n      String indexSchema = statement.getTableSchemaName();\n      builder.append(database.escapeIndexName(statement.getTableCatalogName(), indexSchema, statement.getIndexName())).append(\" \");\n    }\n    builder.append(\"ON \");\n    builder.append(database.escapeTableName(statement.getTableCatalogName(), statement.getTableSchemaName(), statement.getTableName())).append(\"(\");\n    Iterator<AddColumnConfig> iterator = Arrays.asList(statement.getColumns()).iterator();\n    while (iterator.hasNext()) {\n      AddColumnConfig column = iterator.next();\n      builder.append(database.escapeColumnName(statement.getTableCatalogName(), statement.getTableSchemaName(), statement.getTableName(), column.getName()));\n      if (column.getDescending() != null && column.getDescending()) {\n          builder.append(\" DESC\");\n      }\n      if (iterator.hasNext()) {\n        builder.append(\", \");\n      }\n    }\n    if (statement.getIncludedColumns() != null && ! statement.getIncludedColumns().isEmpty()) {\n      builder.append(\") INCLUDE (\");\n      builder.append(database.escapeColumnNameList(statement.getIncludedColumns()));\n    }\n    builder.append(\")\");\n    if (statement.getFillFactor() != null) {\n      builder.append(\" WITH (FILLFACTOR = \").append(statement.getFillFactor()).append(\")\");\n    }\n    // This block simplified, since we know we have MSSQLDatabase\n    if (StringUtils.trimToNull(statement.getTablespace()) != null) {\n      builder.append(\" ON \").append(statement.getTablespace());\n    }\n\n    return new Sql[]{new UnparsedSql(builder.toString(), getAffectedIndex(statement))};\n  }\n\n  @Override\n  public boolean supports(CreateIndexStatement statement, Database database) {\n    return database instanceof MSSQLDatabase;\n  }\n}\n",
            "error": "",
            "span_id": 7879022876239056802
        },
        {
            "input": "src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java",
            "output": "package liquibase.ext.mssql.sqlgenerator;\n\nimport liquibase.database.Database;\nimport liquibase.ext.mssql.database.MSSQLDatabase;\nimport liquibase.ext.mssql.statement.AddPrimaryKeyStatementMSSQL;\nimport liquibase.sql.Sql;\nimport liquibase.sql.UnparsedSql;\nimport liquibase.sqlgenerator.SqlGeneratorChain;\nimport liquibase.sqlgenerator.core.AddPrimaryKeyGenerator;\nimport liquibase.statement.core.AddPrimaryKeyStatement;\nimport liquibase.structure.core.Index;\nimport liquibase.util.StringUtils;\n\npublic class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {\n  @Override\n  public int getPriority() {\n    return 15;\n  }\n\n  /**\n   * Conditionally executes to extension's custom Primary Key SQL generation process if statement is the\n   * AddPrimaryKeyStatementMSSQL implementation and the custom attribute (fillFactor) is set.\n   *\n   * Otherwise, defers to default liquibase implementation.\n   *\n   * @param statement\n   * @param database\n   * @param sqlGeneratorChain\n   * @return\n   */\n  @Override\n  public Sql[] generateSql(AddPrimaryKeyStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    if (statement instanceof AddPrimaryKeyStatementMSSQL && ((AddPrimaryKeyStatementMSSQL) statement).getFillFactor() != null) {\n      return generateMSSQLSql((AddPrimaryKeyStatementMSSQL)statement, database, sqlGeneratorChain);\n    }\n\n    return super.generateSql(statement, database, sqlGeneratorChain);\n  }\n\n  /**\n   * The extension's implementation is essentially a copy/paste of the default implementation, with the following changes:\n   *\n   * 1) Removed other database platform specific logic other than MSSQL (purely to simplify)\n   *\n   * 2) Added support for setting fillFactor\n   *\n   * @param statement\n   * @param database\n   * @param sqlGeneratorChain\n   * @return\n   */\n  private Sql[] generateMSSQLSql(AddPrimaryKeyStatementMSSQL statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n    String sql;\n    if (statement.getConstraintName() == null) {\n      sql = \"ALTER TABLE \" + database.escapeTableName(statement.getCatalogName(), statement.getSchemaName(), statement.getTableName()) + \" ADD PRIMARY KEY (\" + database.escapeColumnNameList(statement.getColumnNames()) + \")\";\n    } else {\n      sql = \"ALTER TABLE \" + database.escapeTableName(statement.getCatalogName(), statement.getSchemaName(), statement.getTableName()) + \" ADD CONSTRAINT \" + database.escapeConstraintName(statement.getConstraintName())+\" PRIMARY KEY\";\n      if (!statement.isClustered()) {\n        sql += \" NONCLUSTERED\";\n      }\n      sql += \" (\" + database.escapeColumnNameList(statement.getColumnNames()) + \")\";\n    }\n\n    // the only new feature being added is support for fillFactor\n    sql += \" WITH (FILLFACTOR = \" + statement.getFillFactor() + \")\";\n\n    if (StringUtils.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {\n      sql += \" ON \"+statement.getTablespace();\n    }\n\n    if (statement.getForIndexName() != null) {\n      sql += \" USING INDEX \"+database.escapeObjectName(statement.getForIndexCatalogName(), statement.getForIndexSchemaName(), statement.getForIndexName(), Index.class);\n    }\n\n    return new Sql[] {\n        new UnparsedSql(sql, getAffectedPrimaryKey(statement))\n    };\n  }\n\n  @Override\n  public boolean supports(AddPrimaryKeyStatement statement, Database database) {\n    return database instanceof MSSQLDatabase;\n  }\n\n}\n",
            "error": "",
            "span_id": 17296344200627729414
        },
        {
            "input": "src/java/liquibase/ext/mssql/database/MSSQLDatabase.java",
            "output": "package liquibase.ext.mssql.database;\n\nimport liquibase.CatalogAndSchema;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.executor.ExecutorService;\nimport liquibase.ext.mssql.statement.DropStoredProcedureStatement;\n\npublic class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {\n    \n    @Override\n    public int getPriority() {\n        return PRIORITY_DATABASE;\n    }\n    \n    @Override\n    public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {\n        super.dropDatabaseObjects(schemaToDrop);\n        ExecutorService.getInstance().getExecutor(this).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));\n    }\n}",
            "error": "",
            "span_id": 16796698657089859916
        }
    ],
    "get_directory_tree": [],
    "get_language_server_suggestions": [],
    "reset_repo": []
}