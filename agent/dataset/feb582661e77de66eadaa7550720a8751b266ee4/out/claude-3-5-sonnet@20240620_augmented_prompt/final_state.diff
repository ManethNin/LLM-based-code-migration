diff --git a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java
index 9cbbca6..8d0521d 100644
--- a/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java
+++ b/src/java/liquibase/ext/mssql/database/MSSQLDatabase.java
@@ -2,19 +2,24 @@ package liquibase.ext.mssql.database;
 
 import liquibase.CatalogAndSchema;
 import liquibase.exception.LiquibaseException;
+import liquibase.executor.Executor;
 import liquibase.executor.ExecutorService;
+import liquibase.Scope;
+import liquibase.statement.SqlStatement;
+import liquibase.sql.visitor.SqlVisitor;
 import liquibase.ext.mssql.statement.DropStoredProcedureStatement;
 
 public class MSSQLDatabase extends liquibase.database.core.MSSQLDatabase {
     
     @Override
     public int getPriority() {
-        return PRIORITY_DATABASE;
+return PRIORITY_DATABASE + 5;
     }
     
     @Override
     public void dropDatabaseObjects(CatalogAndSchema schemaToDrop) throws LiquibaseException {
         super.dropDatabaseObjects(schemaToDrop);
-        ExecutorService.getInstance().getExecutor(this).execute(new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()));
-    }
+Executor executor = Scope.getCurrentScope().getSingleton(ExecutorService.class).getExecutor("jdbc", this);
+executor.execute((SqlStatement) new DropStoredProcedureStatement(this.getLiquibaseCatalogName(), this.getLiquibaseSchemaName()), (java.util.List<SqlVisitor>) null);
+}
 }
\ No newline at end of file
diff --git a/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java b/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java
index 02c3ba0..3bfc0ac 100644
--- a/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java
+++ b/src/java/liquibase/ext/mssql/sqlgenerator/AddPrimaryKeyGeneratorMSSQL.java
@@ -9,7 +9,7 @@ import liquibase.sqlgenerator.SqlGeneratorChain;
 import liquibase.sqlgenerator.core.AddPrimaryKeyGenerator;
 import liquibase.statement.core.AddPrimaryKeyStatement;
 import liquibase.structure.core.Index;
-import liquibase.util.StringUtils;
+import liquibase.util.StringUtil;
 
 public class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {
   @Override
@@ -64,7 +64,7 @@ public class AddPrimaryKeyGeneratorMSSQL extends AddPrimaryKeyGenerator {
     // the only new feature being added is support for fillFactor
     sql += " WITH (FILLFACTOR = " + statement.getFillFactor() + ")";
 
-    if (StringUtils.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {
+    if (StringUtil.trimToNull(statement.getTablespace()) != null && database.supportsTablespaces()) {
       sql += " ON "+statement.getTablespace();
     }
 
diff --git a/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java b/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java
index a4d49a7..1262853 100644
--- a/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java
+++ b/src/java/liquibase/ext/mssql/sqlgenerator/CreateIndexGeneratorMSSQL.java
@@ -9,7 +9,7 @@ import liquibase.sql.UnparsedSql;
 import liquibase.sqlgenerator.SqlGeneratorChain;
 import liquibase.sqlgenerator.core.CreateIndexGenerator;
 import liquibase.statement.core.CreateIndexStatement;
-import liquibase.util.StringUtils;
+import liquibase.util.StringUtil;
 
 import java.util.Arrays;
 import java.util.Iterator;
@@ -74,7 +74,7 @@ public class CreateIndexGeneratorMSSQL extends CreateIndexGenerator {
       builder.append(" WITH (FILLFACTOR = ").append(statement.getFillFactor()).append(")");
     }
     // This block simplified, since we know we have MSSQLDatabase
-    if (StringUtils.trimToNull(statement.getTablespace()) != null) {
+    if (StringUtil.trimToNull(statement.getTablespace()) != null) {
       builder.append(" ON ").append(statement.getTablespace());
     }
 