```diff
Path: src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java
@@ -import org.apache.commons.io.output.ThresholdingOutputStream;
+import org.apache.commons.io.output.DeferredFileOutputStream;
@@ class OffloadingOutputStream extends ThresholdingOutputStream {
-class OffloadingOutputStream extends ThresholdingOutputStream {
+class OffloadingOutputStream {
@@ /** * The output stream to which data will be written prior to the theshold * being reached. */ private ByteArrayOutputStream memoryOutputStream;
-private OutputStream currentOutputStream;
+private DeferredFileOutputStream currentOutputStream;
@@ /** * The file to which output will be directed if the threshold is exceeded. */ private File outputFile = null;
-private final String prefix;
-private final String suffix;
-private final File directory;
+private final int threshold;
@@ /** * True when close() has been called successfully. */ private boolean closed = false;
@@ /** * Constructs an instance of this class which will trigger an event at the * specified threshold, and save data to a temporary file beyond that point. * * @param threshold The number of bytes at which to trigger an event. * @param prefix Prefix to use for the temporary file. * @param suffix Suffix to use for the temporary file. * @param directory Temporary file directory. * * @since 1.4 */ public OffloadingOutputStream( int threshold, String prefix, String suffix, File directory ) { this( threshold, null, prefix, suffix, directory ); if ( prefix == null ) { throw new IllegalArgumentException( "Temporary file prefix is missing" ); } }
-public OffloadingOutputStream( int threshold, String prefix, String suffix, File directory ) {
- this( threshold, null, prefix, suffix, directory );
- if ( prefix == null ) {
- throw new IllegalArgumentException( "Temporary file prefix is missing" );
- }
+public OffloadingOutputStream( int threshold, File outputFile ) {
+ this.threshold = threshold;
+ this.outputFile = outputFile;
+ memoryOutputStream = new ByteArrayOutputStream( threshold / 10 );
+ currentOutputStream = new DeferredFileOutputStream(threshold, outputFile);
}
@@ /** * Constructs an instance of this class which will trigger an event at the * specified threshold, and save data either to a file beyond that point. * * @param threshold The number of bytes at which to trigger an event. * @param outputFile The file to which data is saved beyond the threshold. * @param prefix Prefix to use for the temporary file. * @param suffix Suffix to use for the temporary file. * @param directory Temporary file directory. */ private OffloadingOutputStream( int threshold, File outputFile, String prefix, String suffix, File directory ) { super( threshold ); this.outputFile = outputFile; memoryOutputStream = new ByteArrayOutputStream( threshold / 10 ); currentOutputStream = memoryOutputStream; this.prefix = prefix; this.suffix = suffix; this.directory = directory; }
-private OffloadingOutputStream( int threshold, File outputFile, String prefix, String suffix, File directory ) {
- super( threshold );
- this.outputFile = outputFile;
- memoryOutputStream = new ByteArrayOutputStream( threshold / 10 );
- currentOutputStream = memoryOutputStream;
- this.prefix = prefix;
- this.suffix = suffix;
- this.directory = directory;
+private OffloadingOutputStream( int threshold, File outputFile ) {
+ this.threshold = threshold;
+ this.outputFile = outputFile;
+ memoryOutputStream = new ByteArrayOutputStream( threshold / 10 );
+ currentOutputStream = new DeferredFileOutputStream(threshold, outputFile);
}
@@ /** * Returns the current output stream. This may be memory based or disk * based, depending on the current state with respect to the threshold. * * @return The underlying output stream. * * @exception java.io.IOException if an error occurs. */ @Override protected OutputStream getStream() throws IOException { return currentOutputStream; }
-@Override
-protected OutputStream getStream() throws IOException {
- return currentOutputStream;
-}
@@ /** * Switches the underlying output stream from a memory based stream to one * that is backed by disk. This is the point at which we realise that too * much data is being written to keep in memory, so we elect to switch to * disk-based storage. * * @exception java.io.IOException if an error occurs. */ @Override protected void thresholdReached() throws IOException { if ( prefix != null ) { outputFile = File.createTempFile( prefix, suffix, directory ); } currentOutputStream = Files.newOutputStream( outputFile.toPath() ); }
-@Override
-protected void thresholdReached() throws IOException {
- if ( prefix != null ) {
- outputFile = File.createTempFile( prefix, suffix, directory );
- }
- currentOutputStream = Files.newOutputStream( outputFile.toPath() );
-}
@@ public InputStream getInputStream() throws IOException { InputStream memoryAsInput = memoryOutputStream.toInputStream(); if ( outputFile == null ) { return memoryAsInput; } return new SequenceInputStream( memoryAsInput, Files.newInputStream( outputFile.toPath() ) ); }
-public InputStream getInputStream() throws IOException {
- InputStream memoryAsInput = memoryOutputStream.toInputStream();
- if ( outputFile == null ) {
- return memoryAsInput;
- }
- return new SequenceInputStream( memoryAsInput, Files.newInputStream( outputFile.toPath() ) );
+public InputStream getInputStream() throws IOException {
+ if (currentOutputStream.isInMemory()) {
+ return new ByteArrayInputStream(currentOutputStream.getData());
+ } else {
+ return new SequenceInputStream(new ByteArrayInputStream(currentOutputStream.getData()), new FileInputStream(currentOutputStream.getFile()));
+ }
}
@@ /** * Returns the data for this output stream as an array of bytes, assuming * that the data has been retained in memory. If the data was written to * disk, this method returns <code>null</code>. * * @return The data for this output stream, or <code>null</code> if no such * data is available. */ public byte[] getData() { if ( memoryOutputStream != null ) { return memoryOutputStream.toByteArray(); } return null; }
-public byte[] getData() {
- if ( memoryOutputStream != null ) {
- return memoryOutputStream.toByteArray();
- }
- return null;
+public byte[] getData() {
+ return currentOutputStream.getData();
}
@@ /** * Returns either the output file specified in the constructor or * the temporary file created or null. * <p> * If the constructor specifying the file is used then it returns that * same output file, even when threshold has not been reached. * <p> * If constructor specifying a temporary file prefix/suffix is used * then the temporary file created once the threshold is reached is returned * If the threshold was not reached then <code>null</code> is returned. * * @return The file for this output stream, or <code>null</code> if no such * file exists. */ public File getFile() { return outputFile; }
-public File getFile() {
- return outputFile;
+public File getFile() {
+ return currentOutputStream.getFile();
}
@@ /** * Closes underlying output stream, and mark this as closed * * @exception java.io.IOException if an error occurs. */ @Override public void close() throws IOException { super.close(); closed = true; currentOutputStream.close(); }
-@Override
-public void close() throws IOException {
- super.close();
- closed = true;
- currentOutputStream.close();
+@Override
+public void close() throws IOException {
+ currentOutputStream.close();
+ closed = true;
}
```

This diff should address the changes required due to the API changes in the dependency. The `ThresholdingOutputStream` has been replaced with `DeferredFileOutputStream` and the necessary adjustments have been made to the methods and constructors.
