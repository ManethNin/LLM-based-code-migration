{
    "patch": null,
    "error": "list index out of range",
    "input": {
        "suspicious_files": [
            "src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java"
        ],
        "extracted_compilation_errors": {
            "src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java": [
                [
                    "181",
                    "49"
                ]
            ]
        },
        "initial_error_lines": "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.10.1:testCompile (default-testCompile) on project pdb: Compilation failure\n[ERROR] src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java:[181,49] cannot access org.slf4j.spi.LoggingEventAware\n[ERROR]   class file for org.slf4j.spi.LoggingEventAware not found\n[ERROR] -> [Help 1]",
        "super_minified_error_lines": "cannot access org.slf4j.spi.LoggingEventAware\nclass file for org.slf4j.spi.LoggingEventAware not found\n",
        "api_changes": "{\"japicmpResult\": {\"getLogger\": [\"METHOD_REMOVED\", \"METHOD_ADDED_TO_PUBLIC_CLASS\"], \"setLevel\": [\"METHOD_REMOVED\", \"METHOD_ADDED_TO_PUBLIC_CLASS\"]}, \"elementLines\": {\"getLogger\": \"[ERROR] /pdb/src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java:[181,49] cannot access org.slf4j.spi.LoggingEventAware\", \"setLevel\": \"[ERROR] /pdb/src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java:[181,49] cannot access org.slf4j.spi.LoggingEventAware\"}, \"revapiResult\": {\"getLogger\": [], \"setLevel\": []}, \"allPotentialBreakingElements\": [\"setLevel(ch.qos.logback.classic.Level)\", \"getLogger(java.lang.String)\"], \"elementPatterns\": {\"getLogger\": \"cannot access\", \"setLevel\": \"cannot access\"}, \"project\": \"pdb\"}",
        "minified_error_lines": "Failed to execute goal maven-compiler-plugin:3.10.1:testCompile (default-testCompile) on project pdb: Compilation failure\nsrc/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java cannot access org.slf4j.spi.LoggingEventAware\nclass file for org.slf4j.spi.LoggingEventAware not found\n",
        "reproduction_log": "[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/fr/brouillard/oss/jgitver-maven-plugin/1.9.0/jgitver-maven-plugin-1.9.0.pom (27 kB at 154 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.2.11/jaxb-api-2.2.11.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.2.11/jaxb-api-2.2.11.pom (15 kB at 1.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/4/jvnet-parent-4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/net/java/jvnet-parent/4/jvnet-parent-4.pom (7.8 kB at 1.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/fr/brouillard/oss/jgitver/0.14.0/jgitver-0.14.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/fr/brouillard/oss/jgitver/0.14.0/jgitver-0.14.0.pom (23 kB at 4.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-script-interpreter/1.3/maven-script-interpreter-1.3.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-script-interpreter/1.3/maven-script-interpreter-1.3.pom (4.4 kB at 636 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/34/maven-shared-components-34.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/34/maven-shared-components-34.pom (5.1 kB at 463 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/34/maven-parent-34.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/34/maven-parent-34.pom (43 kB at 5.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/23/apache-23.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/23/apache-23.pom (18 kB at 3.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.pom (14 kB at 3.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom (68 kB at 11 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pom (16 kB at 3.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.20/groovy-2.4.20.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.20/groovy-2.4.20.pom (19 kB at 4.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.pom (5.0 kB at 1.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.pom (3.8 kB at 1.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.30/slf4j-parent-1.7.30.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.30/slf4j-parent-1.7.30.pom (14 kB at 4.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.21/groovy-2.4.21.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.21/groovy-2.4.21.pom (19 kB at 2.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/jgit/org.eclipse.jgit/5.11.0.202103091610-r/org.eclipse.jgit-5.11.0.202103091610-r.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/jgit/org.eclipse.jgit/5.11.0.202103091610-r/org.eclipse.jgit-5.11.0.202103091610-r.pom (7.6 kB at 2.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/jgit/org.eclipse.jgit-parent/5.11.0.202103091610-r/org.eclipse.jgit-parent-5.11.0.202103091610-r.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/jgit/org.eclipse.jgit-parent/5.11.0.202103091610-r/org.eclipse.jgit-parent-5.11.0.202103091610-r.pom (34 kB at 6.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/googlecode/javaewah/JavaEWAH/1.1.7/JavaEWAH-1.1.7.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/googlecode/javaewah/JavaEWAH/1.1.7/JavaEWAH-1.1.7.pom (4.9 kB at 1.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/5/oss-parent-5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/5/oss-parent-5.pom (4.1 kB at 1.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/github/petitparser/petitparser-core/2.2.0/petitparser-core-2.2.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/github/petitparser/petitparser-core/2.2.0/petitparser-core-2.2.0.pom (618 B at 154 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/github/petitparser/petitparser/2.2.0/petitparser-2.2.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/github/petitparser/petitparser/2.2.0/petitparser-2.2.0.pom (6.7 kB at 1.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/info/picocli/picocli/4.0.4/picocli-4.0.4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/info/picocli/picocli/4.0.4/picocli-4.0.4.pom (1.4 kB at 479 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.pom (22 kB at 3.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/37/commons-parent-37.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/37/commons-parent-37.pom (63 kB at 7.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/16/apache-16.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/16/apache-16.pom (15 kB at 5.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/simpleframework/simple-xml/2.7.1/simple-xml-2.7.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/simpleframework/simple-xml/2.7.1/simple-xml-2.7.1.pom (4.1 kB at 1.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/stax/stax-api/1.0.1/stax-api-1.0.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/stax/stax-api/1.0.1/stax-api-1.0.1.pom (1.5 kB at 382 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/stax/stax/1.2.0/stax-1.2.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/stax/stax/1.2.0/stax-1.2.0.pom (3.3 kB at 1.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/xpp3/xpp3/1.1.3.3/xpp3-1.1.3.3.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/xpp3/xpp3/1.1.3.3/xpp3-1.1.3.3.pom (145 B at 21 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/fr/brouillard/oss/jgitver-maven-plugin/1.9.0/jgitver-maven-plugin-1.9.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/fr/brouillard/oss/jgitver-maven-plugin/1.9.0/jgitver-maven-plugin-1.9.0.jar (58 kB at 7.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.2.11/jaxb-api-2.2.11.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/fr/brouillard/oss/jgitver/0.14.0/jgitver-0.14.0.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-script-interpreter/1.3/maven-script-interpreter-1.3.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/fr/brouillard/oss/jgitver/0.14.0/jgitver-0.14.0.jar (113 kB at 5.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.21/groovy-2.4.21.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/javax/xml/bind/jaxb-api/2.2.11/jaxb-api-2.2.11.jar (102 kB at 3.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/eclipse/jgit/org.eclipse.jgit/5.11.0.202103091610-r/org.eclipse.jgit-5.11.0.202103091610-r.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.jar (389 kB at 7.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/googlecode/javaewah/JavaEWAH/1.1.7/JavaEWAH-1.1.7.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-script-interpreter/1.3/maven-script-interpreter-1.3.jar (23 kB at 385 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/github/petitparser/petitparser-core/2.2.0/petitparser-core-2.2.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/googlecode/javaewah/JavaEWAH/1.1.7/JavaEWAH-1.1.7.jar (166 kB at 2.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/info/picocli/picocli/4.0.4/picocli-4.0.4.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/github/petitparser/petitparser-core/2.2.0/petitparser-core-2.2.0.jar (74 kB at 1.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.jar (215 kB at 2.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/simpleframework/simple-xml/2.7.1/simple-xml-2.7.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/info/picocli/picocli/4.0.4/picocli-4.0.4.jar (346 kB at 3.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/stax/stax-api/1.0.1/stax-api-1.0.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar (435 kB at 4.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/stax/stax/1.2.0/stax-1.2.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/stax/stax-api/1.0.1/stax-api-1.0.1.jar (27 kB at 268 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/xpp3/xpp3/1.1.3.3/xpp3-1.1.3.3.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/simpleframework/simple-xml/2.7.1/simple-xml-2.7.1.jar (413 kB at 4.0 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/xpp3/xpp3/1.1.3.3/xpp3-1.1.3.3.jar (93 kB at 889 kB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/stax/stax/1.2.0/stax-1.2.0.jar (179 kB at 1.7 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/jgit/org.eclipse.jgit/5.11.0.202103091610-r/org.eclipse.jgit-5.11.0.202103091610-r.jar (2.8 MB at 21 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.21/groovy-2.4.21.jar (4.7 MB at 25 MB/s)\n[INFO] Using jgitver configuration file: /pdb/.mvn/jgitver.config.xml\n[INFO] Using jgitver-maven-plugin [1.9.0] (sha1: 410af24b23bf392ebb2810475800189c6d881817)\n[INFO]     version '0.0.0-NOT_A_GIT_REPOSITORY' computed in 42 ms\n[INFO] \n[INFO] Scanning for projects...\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/9/oss-parent-9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/9/oss-parent-9.pom (6.6 kB at 1.6 MB/s)\n[INFO] jgitver-maven-plugin is about to change project(s) version(s)\n[INFO]     com.feedzai::pdb::0.0.0-SNAPSHOT -> 0.0.0-NOT_A_GIT_REPOSITORY\n[INFO] \n[INFO] --------------------------< com.feedzai:pdb >---------------------------\n[INFO] Building pdb 0.0.0-NOT_A_GIT_REPOSITORY\n[INFO]   from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-enforcer-plugin/1.2/maven-enforcer-plugin-1.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-enforcer-plugin/1.2/maven-enforcer-plugin-1.2.pom (5.8 kB at 1.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer/1.2/enforcer-1.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer/1.2/enforcer-1.2.pom (11 kB at 2.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/22/maven-parent-22.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/22/maven-parent-22.pom (30 kB at 9.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/11/apache-11.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/11/apache-11.pom (15 kB at 4.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-enforcer-plugin/1.2/maven-enforcer-plugin-1.2.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-enforcer-plugin/1.2/maven-enforcer-plugin-1.2.jar (25 kB at 6.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.2.0/maven-clean-plugin-3.2.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.2.0/maven-clean-plugin-3.2.0.pom (5.3 kB at 1.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/35/maven-plugins-35.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/35/maven-plugins-35.pom (9.9 kB at 3.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/35/maven-parent-35.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/35/maven-parent-35.pom (45 kB at 11 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/25/apache-25.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/25/apache-25.pom (21 kB at 6.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.2.0/maven-clean-plugin-3.2.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.2.0/maven-clean-plugin-3.2.0.jar (36 kB at 8.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.0/maven-resources-plugin-3.3.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.0/maven-resources-plugin-3.3.0.pom (8.5 kB at 2.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/36/maven-plugins-36.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/36/maven-plugins-36.pom (9.9 kB at 3.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/36/maven-parent-36.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/36/maven-parent-36.pom (45 kB at 11 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/26/apache-26.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/26/apache-26.pom (21 kB at 6.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.0/maven-resources-plugin-3.3.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/3.3.0/maven-resources-plugin-3.3.0.jar (32 kB at 11 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.10.1/maven-compiler-plugin-3.10.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.10.1/maven-compiler-plugin-3.10.1.pom (13 kB at 2.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/34/maven-plugins-34.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/34/maven-plugins-34.pom (11 kB at 3.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.10.1/maven-compiler-plugin-3.10.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.10.1/maven-compiler-plugin-3.10.1.jar (62 kB at 15 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/2.22.2/maven-surefire-plugin-2.22.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/2.22.2/maven-surefire-plugin-2.22.2.pom (5.0 kB at 713 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire/2.22.2/surefire-2.22.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire/2.22.2/surefire-2.22.2.pom (26 kB at 6.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/33/maven-parent-33.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/33/maven-parent-33.pom (44 kB at 11 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/21/apache-21.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/21/apache-21.pom (17 kB at 4.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/2.22.2/maven-surefire-plugin-2.22.2.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/2.22.2/maven-surefire-plugin-2.22.2.jar (41 kB at 3.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.pom (1.1 kB at 221 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.5.0/postgresql-42.5.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.5.0/postgresql-42.5.0.pom (2.7 kB at 893 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.pom (2.2 kB at 241 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/oracle/database/jdbc/ojdbc8/21.7.0.0/ojdbc8-21.7.0.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/oracle/database/jdbc/ojdbc8/21.7.0.0/ojdbc8-21.7.0.0.pom (1.7 kB at 59 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/h2database/h2/2.1.214/h2-2.1.214.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/h2database/h2/2.1.214/h2-2.1.214.pom (1.1 kB at 283 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/11.2.1.jre8/mssql-jdbc-11.2.1.jre8.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/11.2.1.jre8/mssql-jdbc-11.2.1.jre8.pom (20 kB at 4.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/ibm/db2/jcc/11.5.8.0/jcc-11.5.8.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/ibm/db2/jcc/11.5.8.0/jcc-11.5.8.0.pom (1.1 kB at 268 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/jmockit/jmockit/1.49/jmockit-1.49.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/jmockit/jmockit/1.49/jmockit-1.49.pom (10 kB at 2.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.pom (4.3 kB at 1.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/7/oss-parent-7.pom (4.8 kB at 965 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.pom (27 kB at 5.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.pom (766 B at 255 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-parent/1.3/hamcrest-parent-1.3.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-parent/1.3/hamcrest-parent-1.3.pom (2.0 kB at 657 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.23.1/assertj-core-3.23.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.23.1/assertj-core-3.23.1.pom (24 kB at 3.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-parent-pom/2.2.17/assertj-parent-pom-2.2.17.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-parent-pom/2.2.17/assertj-parent-pom-2.2.17.pom (24 kB at 4.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.8.2/junit-bom-5.8.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.8.2/junit-bom-5.8.2.pom (5.6 kB at 1.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/4.5.1/mockito-bom-4.5.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/mockito/mockito-bom/4.5.1/mockito-bom-4.5.1.pom (3.0 kB at 596 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.12.10/byte-buddy-1.12.10.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.12.10/byte-buddy-1.12.10.pom (17 kB at 2.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-parent/1.12.10/byte-buddy-parent-1.12.10.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy-parent/1.12.10/byte-buddy-parent-1.12.10.pom (45 kB at 5.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.pom (3.5 kB at 710 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility-parent/4.2.0/awaitility-parent-4.2.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility-parent/4.2.0/awaitility-parent-4.2.0.pom (10 kB at 1.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.1/hamcrest-2.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.1/hamcrest-2.1.pom (1.1 kB at 282 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/25.1-jre/guava-25.1-jre.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/25.1-jre/guava-25.1-jre.pom (7.8 kB at 1.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/25.1-jre/guava-parent-25.1-jre.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/25.1-jre/guava-parent-25.1-jre.pom (10 kB at 1.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/2.0.0/checker-qual-2.0.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/2.0.0/checker-qual-2.0.0.pom (4.2 kB at 840 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.pom (1.8 kB at 358 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_parent/2.1.3/error_prone_parent-2.1.3.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_parent/2.1.3/error_prone_parent-2.1.3.pom (5.1 kB at 1.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.pom (2.8 kB at 184 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.pom (2.5 kB at 635 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/mojo/animal-sniffer-parent/1.14/animal-sniffer-parent-1.14.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/mojo/animal-sniffer-parent/1.14/animal-sniffer-parent-1.14.pom (4.4 kB at 626 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/mojo/mojo-parent/34/mojo-parent-34.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/mojo/mojo-parent/34/mojo-parent-34.pom (24 kB at 2.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/codehaus-parent/4/codehaus-parent-4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/codehaus-parent/4/codehaus-parent-4.pom (4.8 kB at 603 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.5/logback-classic-1.4.5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.5/logback-classic-1.4.5.pom (12 kB at 841 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-parent/1.4.5/logback-parent-1.4.5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-parent/1.4.5/logback-parent-1.4.5.pom (19 kB at 3.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.5/logback-core-1.4.5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.5/logback-core-1.4.5.pom (5.0 kB at 840 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.pom (2.7 kB at 549 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.36/slf4j-parent-1.7.36.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.36/slf4j-parent-1.7.36.pom (14 kB at 2.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.pom (31 kB at 6.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/52/commons-parent-52.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/52/commons-parent-52.pom (79 kB at 8.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.1/junit-bom-5.7.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.1/junit-bom-5.7.1.pom (5.1 kB at 1.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.15/commons-codec-1.15.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.15/commons-codec-1.15.pom (15 kB at 2.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/inject/guice/5.0.1/guice-5.0.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/inject/guice/5.0.1/guice-5.0.1.pom (9.0 kB at 1.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/inject/guice-parent/5.0.1/guice-parent-5.0.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/inject/guice-parent/5.0.1/guice-parent-5.0.1.pom (19 kB at 3.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/google/5/google-5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/google/5/google-5.pom (2.5 kB at 614 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.pom (612 B at 204 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.pom (363 B at 121 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-pool2/2.9.0/commons-pool2-2.9.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-pool2/2.9.0/commons-pool2-2.9.0.pom (17 kB at 3.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.pom (18 kB at 3.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/47/commons-parent-47.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/47/commons-parent-47.pom (78 kB at 13 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/19/apache-19.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/19/apache-19.pom (15 kB at 3.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.pom (19 kB at 6.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/34/commons-parent-34.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/34/commons-parent-34.pom (56 kB at 14 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/13/apache-13.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/13/apache-13.pom (14 kB at 4.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.pom (12 kB at 3.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/39/commons-parent-39.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/39/commons-parent-39.pom (62 kB at 15 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar (1.0 MB at 31 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.5.0/postgresql-42.5.0.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/oracle/database/jdbc/ojdbc8/21.7.0.0/ojdbc8-21.7.0.0.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/h2database/h2/2.1.214/h2-2.1.214.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/11.2.1.jre8/mssql-jdbc-11.2.1.jre8.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.jar (214 kB at 8.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/ibm/db2/jcc/11.5.8.0/jcc-11.5.8.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/42.5.0/postgresql-42.5.0.jar (1.0 MB at 27 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/jmockit/jmockit/1.49/jmockit-1.49.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/11.2.1.jre8/mssql-jdbc-11.2.1.jre8.jar (1.4 MB at 22 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/jmockit/jmockit/1.49/jmockit-1.49.jar (698 kB at 10 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar (20 kB at 289 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar (45 kB at 592 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.23.1/assertj-core-3.23.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar (385 kB at 4.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.12.10/byte-buddy-1.12.10.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/h2database/h2/2.1.214/h2-2.1.214.jar (2.5 MB at 20 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.23.1/assertj-core-3.23.1.jar (1.2 MB at 9.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.1/hamcrest-2.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest/2.1/hamcrest-2.1.jar (123 kB at 886 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/25.1-jre/guava-25.1-jre.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar (96 kB at 670 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar (14 kB at 91 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar (8.8 kB at 57 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar (3.5 kB at 21 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.5/logback-classic-1.4.5.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.4.5/logback-classic-1.4.5.jar (266 kB at 1.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.5/logback-core-1.4.5.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/net/bytebuddy/byte-buddy/1.12.10/byte-buddy-1.12.10.jar (3.8 MB at 20 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar (41 kB at 204 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.4.5/logback-core-1.4.5.jar (577 kB at 2.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.15/commons-codec-1.15.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/oracle/database/jdbc/ojdbc8/21.7.0.0/ojdbc8-21.7.0.0.jar (5.1 MB at 22 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/google/inject/guice/5.0.1/guice-5.0.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-codec/commons-codec/1.15/commons-codec-1.15.jar (354 kB at 1.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar (587 kB at 2.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/javax/inject/javax.inject/1/javax.inject-1.jar (2.5 kB at 10 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-pool2/2.9.0/commons-pool2-2.9.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar (4.5 kB at 19 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-pool2/2.9.0/commons-pool2-2.9.0.jar (135 kB at 539 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/ibm/db2/jcc/11.5.8.0/jcc-11.5.8.0.jar (6.7 MB at 26 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/guava/guava/25.1-jre/guava-25.1-jre.jar (2.7 MB at 11 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/google/inject/guice/5.0.1/guice-5.0.1.jar (773 kB at 3.0 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar (588 kB at 2.2 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar (62 kB at 231 kB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar (247 kB at 908 kB/s)\n[INFO] \n[INFO] --- clean:3.2.0:clean (default-clean) @ pdb ---\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.pom (5.8 kB at 1.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar (153 kB at 22 MB/s)\n[INFO] \n[INFO] --- enforcer:1.2:enforce (enforce-maven) @ pdb ---\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.pom (1.6 kB at 540 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.9/maven-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.9/maven-2.0.9.pom (19 kB at 9.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/8/maven-parent-8.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/8/maven-parent-8.pom (24 kB at 12 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/4/apache-4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/4/apache-4.pom (4.5 kB at 2.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom (8.1 kB at 4.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom (12 kB at 3.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.pom (1.5 kB at 498 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.pom (2.7 kB at 1.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.pom (2.1 kB at 1.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.pom (3.1 kB at 1.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.pom (3.9 kB at 2.0 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.0.3/plexus-containers-1.0.3.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.0.3/plexus-containers-1.0.3.pom (492 B at 246 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.4/plexus-1.0.4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.4/plexus-1.0.4.pom (5.7 kB at 2.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/3.8.2/junit-3.8.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/3.8.2/junit-3.8.2.pom (747 B at 249 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.pom (3.1 kB at 1.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.pom (2.0 kB at 683 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.pom (2.7 kB at 900 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.pom (1.9 kB at 634 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.pom (2.0 kB at 282 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.pom (7.8 kB at 519 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.pom (2.0 kB at 246 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.pom (1.8 kB at 450 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting/2.0.9/maven-reporting-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting/2.0.9/maven-reporting-2.0.9.pom (1.5 kB at 148 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.pom (1.3 kB at 90 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia/1.0-alpha-10/doxia-1.0-alpha-10.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia/1.0-alpha-10/doxia-1.0-alpha-10.pom (9.2 kB at 1.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/6/maven-parent-6.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/6/maven-parent-6.pom (20 kB at 802 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.pom (1.7 kB at 145 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.pom (2.1 kB at 175 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.pom (2.1 kB at 519 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.pom (7.1 kB at 788 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.pom (1.3 kB at 56 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1/classworlds-1.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1/classworlds-1.1.pom (3.3 kB at 1.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.3/commons-lang-2.3.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.3/commons-lang-2.3.pom (11 kB at 1.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-api/1.2/enforcer-api-1.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-api/1.2/enforcer-api-1.2.pom (2.9 kB at 55 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9/plexus-container-default-1.0-alpha-9.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9/plexus-container-default-1.0-alpha-9.pom (1.2 kB at 59 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-rules/1.2/enforcer-rules-1.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-rules/1.2/enforcer-rules-1.2.pom (3.7 kB at 738 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/1.2/maven-common-artifact-filters-1.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/1.2/maven-common-artifact-filters-1.2.pom (4.5 kB at 146 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/11/maven-shared-components-11.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/11/maven-shared-components-11.pom (8.3 kB at 1.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/11/maven-parent-11.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/11/maven-parent-11.pom (32 kB at 1.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/5/apache-5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/5/apache-5.pom (4.1 kB at 137 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.8/maven-model-2.0.8.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.8/maven-model-2.0.8.pom (3.1 kB at 523 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.8/maven-2.0.8.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.8/maven-2.0.8.pom (12 kB at 2.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-plugin-testing-harness/1.1/maven-plugin-testing-harness-1.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-plugin-testing-harness/1.1/maven-plugin-testing-harness-1.1.pom (6.3 kB at 1.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/7/maven-shared-components-7.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/7/maven-shared-components-7.pom (2.6 kB at 650 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/5/maven-parent-5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/5/maven-parent-5.pom (15 kB at 5.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/3/apache-3.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/3/apache-3.pom (3.4 kB at 1.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/1.0-alpha-7/plexus-archiver-1.0-alpha-7.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/1.0-alpha-7/plexus-archiver-1.0-alpha-7.pom (1.0 kB at 174 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.6/plexus-components-1.1.6.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.6/plexus-components-1.1.6.pom (1.9 kB at 315 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.8/plexus-1.0.8.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.8/plexus-1.0.8.pom (7.2 kB at 1.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-8/plexus-container-default-1.0-alpha-8.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-8/plexus-container-default-1.0-alpha-8.pom (7.3 kB at 1.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/beanshell/bsh/2.0b4/bsh-2.0b4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/beanshell/bsh/2.0b4/bsh-2.0b4.pom (1.2 kB at 239 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/beanshell/beanshell/2.0b4/beanshell-2.0b4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/beanshell/beanshell/2.0b4/beanshell-2.0b4.pom (1.4 kB at 282 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/2.0/maven-dependency-tree-2.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/2.0/maven-dependency-tree-2.0.pom (4.7 kB at 934 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/17/maven-shared-components-17.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/17/maven-shared-components-17.pom (8.7 kB at 2.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/21/maven-parent-21.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/21/maven-parent-21.pom (26 kB at 4.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/apache/10/apache-10.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/apache/10/apache-10.pom (15 kB at 617 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom (815 B at 204 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom (4.2 kB at 1.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom (17 kB at 5.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-i18n/1.0-beta-6/plexus-i18n-1.0-beta-6.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-i18n/1.0-beta-6/plexus-i18n-1.0-beta-6.pom (771 B at 128 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.4/plexus-components-1.1.4.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.4/plexus-components-1.1.4.pom (2.1 kB at 46 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar (89 kB at 3.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar (122 kB at 17 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar (49 kB at 4.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar (35 kB at 2.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.jar (13 kB at 859 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar (58 kB at 4.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar (29 kB at 1.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.jar (21 kB at 1.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar (87 kB at 4.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar (194 kB at 9.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.jar (9.9 kB at 472 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.jar (160 kB at 6.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.jar (14 kB at 530 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.jar (30 kB at 1.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.jar (37 kB at 1.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1/classworlds-1.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar (13 kB at 462 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar (25 kB at 819 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.3/commons-lang-2.3.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.jar (10 kB at 343 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-api/1.2/enforcer-api-1.2.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1/classworlds-1.1.jar (38 kB at 1.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-rules/1.2/enforcer-rules-1.2.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-rules/1.2/enforcer-rules-1.2.jar (76 kB at 2.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/1.2/maven-common-artifact-filters-1.2.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/enforcer/enforcer-api/1.2/enforcer-api-1.2.jar (9.8 kB at 257 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.jar (10 kB at 253 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/2.0/maven-dependency-tree-2.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/1.2/maven-common-artifact-filters-1.2.jar (32 kB at 771 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.jar (268 kB at 6.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-i18n/1.0-beta-6/plexus-i18n-1.0-beta-6.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.3/commons-lang-2.3.jar (245 kB at 5.8 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar (4.2 kB at 98 kB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-i18n/1.0-beta-6/plexus-i18n-1.0-beta-6.jar (12 kB at 267 kB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/2.0/maven-dependency-tree-2.0.jar (56 kB at 1.2 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar (282 kB at 5.7 MB/s)\n[INFO] \n[INFO] --- resources:3.3.0:resources (default-resources) @ pdb ---\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.pom (2.7 kB at 664 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom (23 kB at 5.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.0/maven-filtering-3.3.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.0/maven-filtering-3.3.0.pom (6.9 kB at 867 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/36/maven-shared-components-36.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/36/maven-shared-components-36.pom (4.9 kB at 1.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.pom (3.2 kB at 1.1 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/15/spice-parent-15.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/15/spice-parent-15.pom (8.4 kB at 2.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (8.4 kB at 2.8 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.pom (5.2 kB at 1.3 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.pom (20 kB at 4.9 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.2/junit-bom-5.7.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/junit-bom/5.7.2/junit-bom-5.7.2.pom (5.1 kB at 1.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar (85 kB at 21 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.0/maven-filtering-3.3.0.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar (8.5 kB at 1.7 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/3.3.0/maven-filtering-3.3.0.jar (55 kB at 7.9 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.jar (263 kB at 20 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar (327 kB at 22 MB/s)\n[INFO] Copying 1 resource\n[INFO] \n[INFO] --- compiler:3.10.1:compile (default-compile) @ pdb ---\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom (4.7 kB at 948 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom (6.4 kB at 1.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/23/maven-parent-23.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/23/maven-parent-23.pom (33 kB at 6.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/2.0.0/plexus-component-annotations-2.0.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/2.0.0/plexus-component-annotations-2.0.0.pom (750 B at 375 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/2.0.0/plexus-containers-2.0.0.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/2.0.0/plexus-containers-2.0.0.pom (4.8 kB at 1.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.1/plexus-java-1.1.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.1/plexus-java-1.1.1.pom (5.0 kB at 1.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-languages/1.1.1/plexus-languages-1.1.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-languages/1.1.1/plexus-languages-1.1.1.pom (4.6 kB at 1.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/8/plexus-8.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/8/plexus-8.pom (25 kB at 6.4 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.2/asm-9.2.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.2/asm-9.2.pom (2.4 kB at 789 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5/ow2-1.5.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/ow2/1.5/ow2-1.5.pom (11 kB at 5.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.1/qdox-2.0.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.1/qdox-2.0.1.pom (16 kB at 3.2 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.11.1/plexus-compiler-api-2.11.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.11.1/plexus-compiler-api-2.11.1.pom (1.1 kB at 132 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler/2.11.1/plexus-compiler-2.11.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler/2.11.1/plexus-compiler-2.11.1.pom (8.1 kB at 1.6 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/6.6/plexus-components-6.6.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/6.6/plexus-components-6.6.pom (2.7 kB at 535 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.1/plexus-utils-3.4.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.1/plexus-utils-3.4.1.pom (8.0 kB at 2.7 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.11.1/plexus-compiler-manager-2.11.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.11.1/plexus-compiler-manager-2.11.1.pom (1.1 kB at 284 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.11.1/plexus-compiler-javac-2.11.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.11.1/plexus-compiler-javac-2.11.1.pom (1.2 kB at 172 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compilers/2.11.1/plexus-compilers-2.11.1.pom\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compilers/2.11.1/plexus-compilers-2.11.1.pom (1.3 kB at 331 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar (14 kB at 4.5 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/2.0.0/plexus-component-annotations-2.0.0.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.1/plexus-java-1.1.1.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.2/asm-9.2.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.1/qdox-2.0.1.jar\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.11.1/plexus-compiler-api-2.11.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.11.1/plexus-compiler-api-2.11.1.jar (27 kB at 13 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.1/plexus-utils-3.4.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/2.0.0/plexus-component-annotations-2.0.0.jar (4.2 kB at 845 kB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.11.1/plexus-compiler-manager-2.11.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-java/1.1.1/plexus-java-1.1.1.jar (54 kB at 11 MB/s)\n[INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.11.1/plexus-compiler-javac-2.11.1.jar\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.2/asm-9.2.jar (122 kB at 17 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.11.1/plexus-compiler-manager-2.11.1.jar (4.7 kB at 582 kB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.4.1/plexus-utils-3.4.1.jar (264 kB at 26 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.11.1/plexus-compiler-javac-2.11.1.jar (23 kB at 2.3 MB/s)\n[INFO] Downloaded from central: https://repo.maven.apache.org/maven2/com/thoughtworks/qdox/qdox/2.0.1/qdox-2.0.1.jar (334 kB at 24 MB/s)\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 137 source files to /pdb/target/classes\n[INFO] /pdb/src/main/java/com/feedzai/commons/sql/abstraction/dml/result/H2ResultIterator.java: Some input files use or override a deprecated API.\n[INFO] /pdb/src/main/java/com/feedzai/commons/sql/abstraction/dml/result/H2ResultIterator.java: Recompile with -Xlint:deprecation for details.\n[INFO] /pdb/src/main/java/com/feedzai/commons/sql/abstraction/dml/result/ResultColumn.java: Some input files use unchecked or unsafe operations.\n[INFO] /pdb/src/main/java/com/feedzai/commons/sql/abstraction/dml/result/ResultColumn.java: Recompile with -Xlint:unchecked for details.\n[INFO] \n[INFO] --- resources:3.3.0:testResources (default-testResources) @ pdb ---\n[INFO] Copying 7 resources\n[INFO] \n[INFO] --- compiler:3.10.1:testCompile (default-testCompile) @ pdb ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 35 source files to /pdb/target/test-classes\n[INFO] /pdb/src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java: Some input files use or override a deprecated API.\n[INFO] /pdb/src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java: Recompile with -Xlint:deprecation for details.\n[INFO] /pdb/src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/AbstractEngineSchemaTest.java: Some input files use unchecked or unsafe operations.\n[INFO] /pdb/src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/AbstractEngineSchemaTest.java: Recompile with -Xlint:unchecked for details.\n[INFO] -------------------------------------------------------------\n[ERROR] COMPILATION ERROR : \n[INFO] -------------------------------------------------------------\n[ERROR] /pdb/src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java:[181,49] cannot access org.slf4j.spi.LoggingEventAware\n  class file for org.slf4j.spi.LoggingEventAware not found\n[INFO] 1 error\n[INFO] -------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  4.943 s\n[INFO] Finished at: 2023-08-13T16:40:16Z\n[INFO] ------------------------------------------------------------------------\n[WARNING] \n[WARNING] Plugin validation issues were detected in 3 plugin(s)\n[WARNING] \n[WARNING]  * org.apache.maven.plugins:maven-compiler-plugin:3.10.1\n[WARNING]  * org.apache.maven.plugins:maven-enforcer-plugin:1.2\n[WARNING]  * org.apache.maven.plugins:maven-resources-plugin:3.3.0\n[WARNING] \n[WARNING] For more or less details, use 'maven.plugin.validation' property with one of the values (case insensitive): [BRIEF, DEFAULT, VERBOSE]\n[WARNING] \n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.10.1:testCompile (default-testCompile) on project pdb: Compilation failure\n[ERROR] /pdb/src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java:[181,49] cannot access org.slf4j.spi.LoggingEventAware\n[ERROR]   class file for org.slf4j.spi.LoggingEventAware not found\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n",
        "minimized_with_comments": {
            "src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java": "package com.feedzai.commons.sql.abstraction.engine.impl.abs;\n\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\nimport com.feedzai.commons.sql.abstraction.ddl.AlterColumn;\nimport com.feedzai.commons.sql.abstraction.ddl.DbColumn;\nimport com.feedzai.commons.sql.abstraction.ddl.DbColumnConstraint;\nimport com.feedzai.commons.sql.abstraction.ddl.DbColumnType;\nimport com.feedzai.commons.sql.abstraction.ddl.DbEntity;\nimport com.feedzai.commons.sql.abstraction.ddl.Rename;\nimport com.feedzai.commons.sql.abstraction.dml.Expression;\nimport com.feedzai.commons.sql.abstraction.dml.K;\nimport com.feedzai.commons.sql.abstraction.dml.Query;\nimport com.feedzai.commons.sql.abstraction.dml.Truncate;\nimport com.feedzai.commons.sql.abstraction.dml.Update;\nimport com.feedzai.commons.sql.abstraction.dml.Values;\nimport com.feedzai.commons.sql.abstraction.dml.With;\nimport com.feedzai.commons.sql.abstraction.dml.dialect.Dialect;\nimport com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder;\nimport com.feedzai.commons.sql.abstraction.dml.result.ResultColumn;\nimport com.feedzai.commons.sql.abstraction.dml.result.ResultIterator;\nimport com.feedzai.commons.sql.abstraction.engine.AbstractDatabaseEngine;\nimport com.feedzai.commons.sql.abstraction.engine.ConnectionResetException;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseEngine;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseEngineException;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseEngineRuntimeException;\nimport com.feedzai.commons.sql.abstraction.exceptions.DatabaseEngineUniqueConstraintViolationException;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseFactory;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseFactoryException;\nimport com.feedzai.commons.sql.abstraction.engine.MappedEntity;\nimport com.feedzai.commons.sql.abstraction.engine.NameAlreadyExistsException;\nimport com.feedzai.commons.sql.abstraction.engine.OperationNotSupportedRuntimeException;\nimport com.feedzai.commons.sql.abstraction.engine.impl.cockroach.SkipTestCockroachDB;\nimport com.feedzai.commons.sql.abstraction.engine.testconfig.BlobTest;\nimport com.feedzai.commons.sql.abstraction.engine.testconfig.DatabaseConfiguration;\nimport com.feedzai.commons.sql.abstraction.engine.testconfig.DatabaseTestUtil;\nimport com.feedzai.commons.sql.abstraction.entry.EntityEntry;\nimport com.google.common.collect.ImmutableSet;\nimport java.sql.SQLException;\nimport mockit.Expectations;\nimport mockit.Invocation;\nimport mockit.Mock;\nimport mockit.MockUp;\nimport mockit.Verifications;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.LoggerFactory;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.sql.Connection;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.UUID;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnConstraint.NOT_NULL;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.BLOB;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.BOOLEAN;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.CLOB;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.DOUBLE;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.INT;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.LONG;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.STRING;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.L;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.all;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.avg;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.between;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.caseWhen;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.cast;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.ceiling;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.coalesce;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.column;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.concat;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.count;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.createView;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbColumn;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbEntity;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbFk;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.delete;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.div;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dropPK;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.entry;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.eq;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.f;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.floor;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.in;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.k;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.like;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lit;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lower;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.max;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.min;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.mod;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.neq;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notBetween;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notIn;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.or;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.select;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stddev;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stringAgg;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.sum;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.table;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.udf;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.union;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.update;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.upper;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.values;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.with;\nimport static com.feedzai.commons.sql.abstraction.engine.EngineTestUtils.buildEntity;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.ENGINE;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.JDBC;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.PASSWORD;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.SCHEMA_POLICY;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.USERNAME;\nimport static com.feedzai.commons.sql.abstraction.util.StringUtils.quotize;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.junit.Assume.assumeFalse;\nimport static org.junit.Assume.assumeTrue;\n\n/**\n * @author Rui Vilao (rui.vilao@feedzai.com)\n * @since 2.0.0\n */\n@RunWith(Parameterized.class)\npublic class EngineGeneralTest {\n    @BeforeClass\n    public static void initStatic() {\n        ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.TRACE);\n    }\n\n}"
        },
        "minimized_no_comments": {
            "src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java": "package com.feedzai.commons.sql.abstraction.engine.impl.abs;\n\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\nimport com.feedzai.commons.sql.abstraction.ddl.AlterColumn;\nimport com.feedzai.commons.sql.abstraction.ddl.DbColumn;\nimport com.feedzai.commons.sql.abstraction.ddl.DbColumnConstraint;\nimport com.feedzai.commons.sql.abstraction.ddl.DbColumnType;\nimport com.feedzai.commons.sql.abstraction.ddl.DbEntity;\nimport com.feedzai.commons.sql.abstraction.ddl.Rename;\nimport com.feedzai.commons.sql.abstraction.dml.Expression;\nimport com.feedzai.commons.sql.abstraction.dml.K;\nimport com.feedzai.commons.sql.abstraction.dml.Query;\nimport com.feedzai.commons.sql.abstraction.dml.Truncate;\nimport com.feedzai.commons.sql.abstraction.dml.Update;\nimport com.feedzai.commons.sql.abstraction.dml.Values;\nimport com.feedzai.commons.sql.abstraction.dml.With;\nimport com.feedzai.commons.sql.abstraction.dml.dialect.Dialect;\nimport com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder;\nimport com.feedzai.commons.sql.abstraction.dml.result.ResultColumn;\nimport com.feedzai.commons.sql.abstraction.dml.result.ResultIterator;\nimport com.feedzai.commons.sql.abstraction.engine.AbstractDatabaseEngine;\nimport com.feedzai.commons.sql.abstraction.engine.ConnectionResetException;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseEngine;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseEngineException;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseEngineRuntimeException;\nimport com.feedzai.commons.sql.abstraction.exceptions.DatabaseEngineUniqueConstraintViolationException;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseFactory;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseFactoryException;\nimport com.feedzai.commons.sql.abstraction.engine.MappedEntity;\nimport com.feedzai.commons.sql.abstraction.engine.NameAlreadyExistsException;\nimport com.feedzai.commons.sql.abstraction.engine.OperationNotSupportedRuntimeException;\nimport com.feedzai.commons.sql.abstraction.engine.impl.cockroach.SkipTestCockroachDB;\nimport com.feedzai.commons.sql.abstraction.engine.testconfig.BlobTest;\nimport com.feedzai.commons.sql.abstraction.engine.testconfig.DatabaseConfiguration;\nimport com.feedzai.commons.sql.abstraction.engine.testconfig.DatabaseTestUtil;\nimport com.feedzai.commons.sql.abstraction.entry.EntityEntry;\nimport com.google.common.collect.ImmutableSet;\nimport java.sql.SQLException;\nimport mockit.Expectations;\nimport mockit.Invocation;\nimport mockit.Mock;\nimport mockit.MockUp;\nimport mockit.Verifications;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.LoggerFactory;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.sql.Connection;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.UUID;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnConstraint.NOT_NULL;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.BLOB;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.BOOLEAN;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.CLOB;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.DOUBLE;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.INT;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.LONG;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.STRING;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.L;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.all;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.avg;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.between;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.caseWhen;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.cast;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.ceiling;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.coalesce;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.column;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.concat;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.count;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.createView;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbColumn;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbEntity;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbFk;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.delete;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.div;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dropPK;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.entry;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.eq;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.f;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.floor;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.in;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.k;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.like;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lit;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lower;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.max;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.min;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.mod;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.neq;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notBetween;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notIn;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.or;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.select;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stddev;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stringAgg;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.sum;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.table;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.udf;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.union;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.update;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.upper;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.values;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.with;\nimport static com.feedzai.commons.sql.abstraction.engine.EngineTestUtils.buildEntity;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.ENGINE;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.JDBC;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.PASSWORD;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.SCHEMA_POLICY;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.USERNAME;\nimport static com.feedzai.commons.sql.abstraction.util.StringUtils.quotize;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.junit.Assume.assumeFalse;\nimport static org.junit.Assume.assumeTrue;\n\n@RunWith(Parameterized.class)\npublic class EngineGeneralTest {\n    @BeforeClass\n    public static void initStatic() {\n        ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.TRACE);\n    }\n\n}"
        },
        "updated_dependency_diff": "diff --git a/pom.xml b/pom.xml\nindex 4a7f8606..c1a449fd 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -115,7 +115,7 @@\n             <dependency>\n                 <groupId>ch.qos.logback</groupId>\n                 <artifactId>logback-classic</artifactId>\n-                <version>1.2.11</version>\n+                <version>1.4.5</version>\n             </dependency>\n             <dependency>\n                 <groupId>org.slf4j</groupId>\n",
        "file_in_scope": "src/test/java/com/feedzai/commons/sql/abstraction/engine/impl/abs/EngineGeneralTest.java",
        "repo_path": "/tmp/tmpu8uai51d",
        "version_upgrade_str": "ch.qos.logback:logback-classic 1.2.11 -> 1.4.5",
        "repo_slug": "feedzai/pdb",
        "commit_hash": "43b3a858b77ec27fc8946aba292001c3de465012",
        "prepared_file": "/*\n * Copyright 2014 Feedzai\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.feedzai.commons.sql.abstraction.engine.impl.abs;\n\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\nimport com.feedzai.commons.sql.abstraction.ddl.AlterColumn;\nimport com.feedzai.commons.sql.abstraction.ddl.DbColumn;\nimport com.feedzai.commons.sql.abstraction.ddl.DbColumnConstraint;\nimport com.feedzai.commons.sql.abstraction.ddl.DbColumnType;\nimport com.feedzai.commons.sql.abstraction.ddl.DbEntity;\nimport com.feedzai.commons.sql.abstraction.ddl.Rename;\nimport com.feedzai.commons.sql.abstraction.dml.Expression;\nimport com.feedzai.commons.sql.abstraction.dml.K;\nimport com.feedzai.commons.sql.abstraction.dml.Query;\nimport com.feedzai.commons.sql.abstraction.dml.Truncate;\nimport com.feedzai.commons.sql.abstraction.dml.Update;\nimport com.feedzai.commons.sql.abstraction.dml.Values;\nimport com.feedzai.commons.sql.abstraction.dml.With;\nimport com.feedzai.commons.sql.abstraction.dml.dialect.Dialect;\nimport com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder;\nimport com.feedzai.commons.sql.abstraction.dml.result.ResultColumn;\nimport com.feedzai.commons.sql.abstraction.dml.result.ResultIterator;\nimport com.feedzai.commons.sql.abstraction.engine.AbstractDatabaseEngine;\nimport com.feedzai.commons.sql.abstraction.engine.ConnectionResetException;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseEngine;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseEngineException;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseEngineRuntimeException;\nimport com.feedzai.commons.sql.abstraction.exceptions.DatabaseEngineUniqueConstraintViolationException;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseFactory;\nimport com.feedzai.commons.sql.abstraction.engine.DatabaseFactoryException;\nimport com.feedzai.commons.sql.abstraction.engine.MappedEntity;\nimport com.feedzai.commons.sql.abstraction.engine.NameAlreadyExistsException;\nimport com.feedzai.commons.sql.abstraction.engine.OperationNotSupportedRuntimeException;\nimport com.feedzai.commons.sql.abstraction.engine.impl.cockroach.SkipTestCockroachDB;\nimport com.feedzai.commons.sql.abstraction.engine.testconfig.BlobTest;\nimport com.feedzai.commons.sql.abstraction.engine.testconfig.DatabaseConfiguration;\nimport com.feedzai.commons.sql.abstraction.engine.testconfig.DatabaseTestUtil;\nimport com.feedzai.commons.sql.abstraction.entry.EntityEntry;\nimport com.google.common.collect.ImmutableSet;\nimport java.sql.SQLException;\nimport mockit.Expectations;\nimport mockit.Invocation;\nimport mockit.Mock;\nimport mockit.MockUp;\nimport mockit.Verifications;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.sql.Connection;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.UUID;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnConstraint.NOT_NULL;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.BLOB;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.BOOLEAN;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.CLOB;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.DOUBLE;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.INT;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.LONG;\nimport static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.STRING;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.L;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.all;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.avg;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.between;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.caseWhen;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.cast;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.ceiling;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.coalesce;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.column;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.concat;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.count;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.createView;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbColumn;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbEntity;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbFk;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.delete;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.div;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dropPK;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.entry;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.eq;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.f;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.floor;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.in;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.k;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.like;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lit;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lower;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.max;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.min;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.mod;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.neq;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notBetween;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notIn;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.or;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.select;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stddev;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stringAgg;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.sum;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.table;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.udf;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.union;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.update;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.upper;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.values;\nimport static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.with;\nimport static com.feedzai.commons.sql.abstraction.engine.EngineTestUtils.buildEntity;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.ENGINE;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.JDBC;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.PASSWORD;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.SCHEMA_POLICY;\nimport static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.USERNAME;\nimport static com.feedzai.commons.sql.abstraction.util.StringUtils.quotize;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.junit.Assume.assumeFalse;\nimport static org.junit.Assume.assumeTrue;\n\n/**\n * @author Rui Vilao (rui.vilao@feedzai.com)\n * @since 2.0.0\n */\n@RunWith(Parameterized.class)\npublic class EngineGeneralTest {\n\n\n    private static final double DELTA = 1e-7;\n\n    protected DatabaseEngine engine;\n    protected Properties properties;\n\n    @Parameterized.Parameters\n    public static Collection<DatabaseConfiguration> data() throws Exception {\n        return DatabaseTestUtil.loadConfigurations();\n    }\n\n    @Parameterized.Parameter\n    public DatabaseConfiguration config;\n\n    @BeforeClass\n    public static void initStatic() {\n        ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.TRACE);\n    }\n\n    @Before\n    public void init() throws DatabaseFactoryException {\n        properties = new Properties() {\n            {\n                setProperty(JDBC, config.jdbc);\n                setProperty(USERNAME, config.username);\n                setProperty(PASSWORD, config.password);\n                setProperty(ENGINE, config.engine);\n                setProperty(SCHEMA_POLICY, \"drop-create\");\n            }\n        };\n\n        engine = DatabaseFactory.getConnection(properties);\n    }\n\n    @After\n    public void cleanup() {\n        engine.close();\n    }\n\n    @Test\n    public void createEntityTest() throws DatabaseEngineException {\n\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\")\n                .build();\n\n        engine.addEntity(entity);\n    }\n\n    @Test\n    public void createEntityWithTwoColumnsBeingPKTest() throws DatabaseEngineException {\n\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\", \"COL3\")\n                .build();\n\n        engine.addEntity(entity);\n    }\n\n    @Test(expected = DatabaseEngineException.class)\n    public void createEntityAlreadyExistsTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\", \"COL3\")\n                .build();\n\n        engine.addEntity(entity);\n\n        try {\n            engine.addEntity(entity);\n        } catch (final DatabaseEngineException e) {\n            assertEquals(\"\", \"Entity 'TEST' is already defined\", e.getMessage());\n            throw e;\n        }\n    }\n\n    @Test\n    public void createUniqueIndexTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\", \"COL3\")\n                .addIndex(true, \"COL4\")\n                .build();\n\n        engine.addEntity(entity);\n    }\n\n    @Test\n    public void createIndexWithTwoColumnsTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\", \"COL3\")\n                .addIndex(\"COL4\", \"COL3\")\n                .build();\n\n        engine.addEntity(entity);\n    }\n\n    @Test\n    public void createTwoIndexesTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\", \"COL3\")\n                .addIndex(\"COL4\")\n                .addIndex(\"COL3\")\n                .build();\n\n        engine.addEntity(entity);\n    }\n\n    @Test\n    public void createEntityWithTheSameNameButLowerCasedTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\", \"COL3\")\n                .build();\n\n        engine.addEntity(entity);\n\n        DbEntity entity2 = dbEntity()\n                .name(\"test\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\", \"COL3\")\n                .build();\n\n        engine.addEntity(entity2);\n\n    }\n\n    @Test\n    public void createEntityWithSequencesTest() throws DatabaseEngineException {\n\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\")\n                .build();\n\n        engine.addEntity(entity);\n    }\n\n    @Test\n    public void createEntityWithIndexesTest() throws DatabaseEngineException {\n\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .addIndex(\"COL4\")\n                .pkFields(\"COL1\")\n                .build();\n\n        engine.addEntity(entity);\n    }\n\n    @Test\n    public void insertWithControlledTransactionTest() throws Exception {\n        create5ColumnsEntity();\n\n        EntityEntry entry = entry().set(\"COL1\", 2).set(\"COL2\", false).set(\"COL3\", 2D).set(\"COL4\", 3L).set(\"COL5\", \"ADEUS\").build();\n\n        engine.beginTransaction();\n\n        try {\n\n            engine.persist(\"TEST\", entry);\n            engine.commit();\n        } finally {\n            if (engine.isTransactionActive()) {\n                engine.rollback();\n            }\n        }\n\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")));\n\n        assertTrue(\"COL1 exists\", query.get(0).containsKey(\"COL1\"));\n        assertEquals(\"COL1 ok?\", 2, (int) query.get(0).get(\"COL1\").toInt());\n\n        assertTrue(\"COL2 exists\", query.get(0).containsKey(\"COL2\"));\n        assertFalse(\"COL2 ok?\", query.get(0).get(\"COL2\").toBoolean());\n\n        assertTrue(\"COL3 exists\", query.get(0).containsKey(\"COL3\"));\n        assertEquals(\"COL3 ok?\", 2D, query.get(0).get(\"COL3\").toDouble(), 0);\n\n        assertTrue(\"COL4 exists\", query.get(0).containsKey(\"COL4\"));\n        assertEquals(\"COL4 ok?\", 3L, (long) query.get(0).get(\"COL4\").toLong());\n\n        assertTrue(\"COL5 exists\", query.get(0).containsKey(\"COL5\"));\n        assertEquals(\"COL5  ok?\", \"ADEUS\", query.get(0).get(\"COL5\").toString());\n    }\n\n    @Test\n    public void insertWithAutoCommitTest() throws Exception {\n        create5ColumnsEntity();\n\n        EntityEntry entry = entry().set(\"COL1\", 2).set(\"COL2\", false).set(\"COL3\", 2D).set(\"COL4\", 3L).set(\"COL5\", \"ADEUS\")\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")));\n\n        assertTrue(\"COL1 exists\", query.get(0).containsKey(\"COL1\"));\n        assertEquals(\"COL1 ok?\", 2, (int) query.get(0).get(\"COL1\").toInt());\n\n        assertTrue(\"COL2 exists\", query.get(0).containsKey(\"COL2\"));\n        assertFalse(\"COL2 ok?\", query.get(0).get(\"COL2\").toBoolean());\n\n        assertTrue(\"COL3 exists\", query.get(0).containsKey(\"COL3\"));\n        assertEquals(\"COL3 ok?\", 2D, query.get(0).get(\"COL3\").toDouble(), 0);\n\n        assertTrue(\"COL4 exists\", query.get(0).containsKey(\"COL4\"));\n        assertEquals(\"COL4 ok?\", 3L, (long) query.get(0).get(\"COL4\").toLong());\n\n        assertTrue(\"COL5 exists\", query.get(0).containsKey(\"COL5\"));\n        assertEquals(\"COL5  ok?\", \"ADEUS\", query.get(0).get(\"COL5\").toString());\n    }\n\n    @Test\n    public void insertWithControlledTransactionUsingSequenceTest() throws Exception {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry entry = entry().set(\"COL2\", false).set(\"COL3\", 2D).set(\"COL4\", 3L).set(\"COL5\", \"ADEUS\")\n                .build();\n\n        engine.beginTransaction();\n\n        try {\n\n            engine.persist(\"TEST\", entry);\n            engine.commit();\n        } finally {\n            if (engine.isTransactionActive()) {\n                engine.rollback();\n            }\n        }\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")));\n\n        assertTrue(\"COL1 exists\", query.get(0).containsKey(\"COL1\"));\n        assertEquals(\"COL1 ok?\", 1, (int) query.get(0).get(\"COL1\").toInt());\n\n        assertTrue(\"COL2 exists\", query.get(0).containsKey(\"COL2\"));\n        assertFalse(\"COL2 ok?\", query.get(0).get(\"COL2\").toBoolean());\n\n        assertTrue(\"COL3 exists\", query.get(0).containsKey(\"COL3\"));\n        assertEquals(\"COL3 ok?\", 2D, query.get(0).get(\"COL3\").toDouble(), 0);\n\n        assertTrue(\"COL4 exists\", query.get(0).containsKey(\"COL4\"));\n        assertEquals(\"COL4 ok?\", 3L, (long) query.get(0).get(\"COL4\").toLong());\n\n        assertTrue(\"COL5 exists\", query.get(0).containsKey(\"COL5\"));\n        assertEquals(\"COL5  ok?\", \"ADEUS\", query.get(0).get(\"COL5\").toString());\n    }\n\n    @Test\n    public void queryWithIteratorWithDataTest() throws Exception {\n        create5ColumnsEntity();\n\n        EntityEntry entry = entry().set(\"COL1\", 1).set(\"COL2\", false).set(\"COL3\", 2D).set(\"COL4\", 3L).set(\"COL5\", \"ADEUS\")\n                .build();\n        engine.persist(\"TEST\", entry);\n\n        ResultIterator it = engine.iterator(select(all()).from(table(\"TEST\")));\n\n        Map<String, ResultColumn> res;\n        res = it.next();\n        assertNotNull(\"result is not null\", res);\n        assertTrue(\"COL1 exists\", res.containsKey(\"COL1\"));\n        assertEquals(\"COL1 ok?\", 1, (int) res.get(\"COL1\").toInt());\n\n        assertTrue(\"COL2 exists\", res.containsKey(\"COL2\"));\n        assertFalse(\"COL2 ok?\", res.get(\"COL2\").toBoolean());\n\n        assertTrue(\"COL3 exists\", res.containsKey(\"COL3\"));\n        assertEquals(\"COL3 ok?\", 2D, res.get(\"COL3\").toDouble(), 0);\n\n        assertTrue(\"COL4 exists\", res.containsKey(\"COL4\"));\n        assertEquals(\"COL4 ok?\", 3L, (long) res.get(\"COL4\").toLong());\n\n        assertTrue(\"COL5 exists\", res.containsKey(\"COL5\"));\n        assertEquals(\"COL5  ok?\", \"ADEUS\", res.get(\"COL5\").toString());\n\n        assertNull(\"no more data to consume?\", it.next());\n\n        assertTrue(\"result set is closed?\", it.isClosed());\n        assertNull(\"next on a closed result set must return null\", it.next());\n\n        // calling close on a closed result set has no effect.\n        it.close();\n    }\n\n    @Test\n    public void queryWithIteratorWithNoDataTest() throws Exception {\n        create5ColumnsEntity();\n\n        ResultIterator it = engine.iterator(select(all()).from(table(\"TEST\")));\n\n        assertNull(\"result is null\", it.next());\n\n        assertNull(\"no more data to consume?\", it.next());\n\n        assertTrue(\"result set is closed?\", it.isClosed());\n        assertNull(\"next on a closed result set must return null\", it.next());\n\n        // calling close on a closed result set has no effect.\n        it.close();\n    }\n\n    /**\n     * Tests that an iterator created in a try-with-resources' resource specification header is automatically closed\n     * once the block is exited from.\n     *\n     * @throws Exception If an unexpected error occurs.\n     *\n     * @since 2.1.12\n     */\n    @Test\n    public void queryWithIteratorInTryWithResources() throws Exception {\n        create5ColumnsEntity();\n\n        final EntityEntry entry = entry()\n                .set(\"COL1\", 1)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\")\n                .build();\n        engine.persist(\"TEST\", entry);\n\n        final ResultIterator resultIterator;\n        try (final ResultIterator it = engine.iterator(select(all()).from(table(\"TEST\")))) {\n\n            resultIterator = it;\n\n            assertFalse(\n                    \"Result iterator should not be closed before exiting try-with-resources block\",\n                    resultIterator.isClosed()\n            );\n        }\n\n        assertTrue(\n                \"Result iterator should be closed after exiting try-with-resources block\",\n                resultIterator.isClosed()\n        );\n    }\n\n    @Test\n    public void batchInsertTest() throws Exception {\n        create5ColumnsEntity();\n\n        engine.beginTransaction();\n\n        try {\n            EntityEntry entry = entry().set(\"COL1\", 2).set(\"COL2\", false).set(\"COL3\", 2D).set(\"COL4\", 3L).set(\"COL5\", \"ADEUS\")\n                    .build();\n\n            engine.addBatch(\"TEST\", entry);\n\n            entry = entry().set(\"COL1\", 3).set(\"COL2\", true).set(\"COL3\", 3D).set(\"COL4\", 4L).set(\"COL5\", \"OLA\")\n                    .build();\n\n            engine.addBatch(\"TEST\", entry);\n\n            engine.flush();\n\n            engine.commit();\n        } finally {\n            if (engine.isTransactionActive()) {\n                engine.rollback();\n            }\n        }\n\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL1\").asc()));\n\n        // 1st\n        assertTrue(\"COL1 exists\", query.get(0).containsKey(\"COL1\"));\n        assertEquals(\"COL1 ok?\", 2, (int) query.get(0).get(\"COL1\").toInt());\n\n        assertTrue(\"COL2 exists\", query.get(0).containsKey(\"COL2\"));\n        assertFalse(\"COL2 ok?\", query.get(0).get(\"COL2\").toBoolean());\n\n        assertTrue(\"COL3 exists\", query.get(0).containsKey(\"COL3\"));\n        assertEquals(\"COL3 ok?\", 2D, query.get(0).get(\"COL3\").toDouble(), 0);\n\n        assertTrue(\"COL4 exists\", query.get(0).containsKey(\"COL4\"));\n        assertEquals(\"COL4 ok?\", 3L, (long) query.get(0).get(\"COL4\").toLong());\n\n        assertTrue(\"COL5 exists\", query.get(0).containsKey(\"COL5\"));\n        assertEquals(\"COL5  ok?\", \"ADEUS\", query.get(0).get(\"COL5\").toString());\n\n        // 2nd\n\n        assertTrue(\"COL1 exists\", query.get(1).containsKey(\"COL1\"));\n        assertEquals(\"COL1 ok?\", 3, (int) query.get(1).get(\"COL1\").toInt());\n\n        assertTrue(\"COL2 exists\", query.get(1).containsKey(\"COL2\"));\n        assertTrue(\"COL2 ok?\", query.get(1).get(\"COL2\").toBoolean());\n\n        assertTrue(\"COL3 exists\", query.get(1).containsKey(\"COL3\"));\n        assertEquals(\"COL3 ok?\", 3D, query.get(1).get(\"COL3\").toDouble(), 0);\n\n        assertTrue(\"COL4 exists\", query.get(1).containsKey(\"COL4\"));\n        assertEquals(\"COL4 ok?\", 4L, (long) query.get(1).get(\"COL4\").toLong());\n\n        assertTrue(\"COL5 exists\", query.get(1).containsKey(\"COL5\"));\n        assertEquals(\"COL5  ok?\", \"OLA\", query.get(1).get(\"COL5\").toString());\n    }\n\n    @Test\n    public void batchInsertAutocommitTest() throws Exception {\n        create5ColumnsEntity();\n\n        EntityEntry entry = entry().set(\"COL1\", 2).set(\"COL2\", false).set(\"COL3\", 2D).set(\"COL4\", 3L).set(\"COL5\", \"ADEUS\")\n                .build();\n\n        engine.addBatch(\"TEST\", entry);\n\n        entry = entry().set(\"COL1\", 3).set(\"COL2\", true).set(\"COL3\", 3D).set(\"COL4\", 4L).set(\"COL5\", \"OLA\")\n                .build();\n\n        engine.addBatch(\"TEST\", entry);\n\n        // autocommit set to true.\n        engine.flush();\n\n\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL1\").asc()));\n\n        // 1st\n        assertTrue(\"COL1 exists\", query.get(0).containsKey(\"COL1\"));\n        assertEquals(\"COL1 ok?\", 2, (int) query.get(0).get(\"COL1\").toInt());\n\n        assertTrue(\"COL2 exists\", query.get(0).containsKey(\"COL2\"));\n        assertFalse(\"COL2 ok?\", query.get(0).get(\"COL2\").toBoolean());\n\n        assertTrue(\"COL3 exists\", query.get(0).containsKey(\"COL3\"));\n        assertEquals(\"COL3 ok?\", 2D, query.get(0).get(\"COL3\").toDouble(), 0);\n\n        assertTrue(\"COL4 exists\", query.get(0).containsKey(\"COL4\"));\n        assertEquals(\"COL4 ok?\", 3L, (long) query.get(0).get(\"COL4\").toLong());\n\n        assertTrue(\"COL5 exists\", query.get(0).containsKey(\"COL5\"));\n        assertEquals(\"COL5  ok?\", \"ADEUS\", query.get(0).get(\"COL5\").toString());\n\n        // 2nd\n\n        assertTrue(\"COL1 exists\", query.get(1).containsKey(\"COL1\"));\n        assertEquals(\"COL1 ok?\", 3, (int) query.get(1).get(\"COL1\").toInt());\n\n        assertTrue(\"COL2 exists\", query.get(1).containsKey(\"COL2\"));\n        assertTrue(\"COL2 ok?\", query.get(1).get(\"COL2\").toBoolean());\n\n        assertTrue(\"COL3 exists\", query.get(1).containsKey(\"COL3\"));\n        assertEquals(\"COL3 ok?\", 3D, query.get(1).get(\"COL3\").toDouble(), 0);\n\n        assertTrue(\"COL4 exists\", query.get(1).containsKey(\"COL4\"));\n        assertEquals(\"COL4 ok?\", 4L, (long) query.get(1).get(\"COL4\").toLong());\n\n        assertTrue(\"COL5 exists\", query.get(1).containsKey(\"COL5\"));\n        assertEquals(\"COL5  ok?\", \"OLA\", query.get(1).get(\"COL5\").toString());\n    }\n\n    /**\n     * Tests that on a rollback situation, the prepared statement batches are cleared.\n     *\n     * The steps performed on this test are:\n     * <ol>\n     *     <li>Add batch to transaction and purposely fail to flush</li>\n     *     <li>Ensure the existence of the Exception and rollback transaction</li>\n     *     <li>Flush again successfully and ensure that the DB table doesn't have any rows</li>\n     * </ol>\n     *\n     * This is a regression test.\n     *\n     * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.\n     * @since 2.1.12\n     */\n    @Test\n    public void batchInsertRollback() throws DatabaseEngineException {\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        final DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .build();\n\n        new MockUp<AbstractDatabaseEngine>() {\n            @Mock\n            public synchronized void flush(final Invocation invocation) throws DatabaseEngineException {\n                if (latch.getCount() == 1) {\n                    throw new DatabaseEngineException(\"\");\n                }\n                invocation.proceed();\n            }\n        };\n\n        DatabaseEngineException expectedException = null;\n\n        engine.addEntity(entity);\n        engine.beginTransaction();\n\n        try {\n            final EntityEntry entry = entry().set(\"COL1\", 1).build();\n\n            engine.addBatch(\"TEST\", entry);\n            engine.flush();\n            fail(\"Was expecting the flush operation to fail\");\n        } catch (final DatabaseEngineException e) {\n            expectedException = e;\n        } finally {\n            if (engine.isTransactionActive()) {\n                engine.rollback();\n            }\n        }\n\n        // Ensure we had an exception and therefore we didn't insert anything on the DB and that we cleared the batches.\n        assertNotNull(\"DB returned exception when flushing\", expectedException);\n\n        latch.countDown();\n        engine.beginTransaction();\n        engine.flush();\n        engine.commit();\n\n        final List<Map<String, ResultColumn>> query = engine.query(select(all())\n                                                                           .from(table(\"TEST\"))\n                                                                           .orderby(column(\"COL1\").asc()));\n\n        // Previously, we rolled back the transaction; now we are trying the flush an empty transaction.\n        // Therefore, we shouldn't have any rows on the table.\n        assertEquals(\"There are no rows on table TEST\", 0, query.size());\n    }\n\n    @Test\n    public void blobTest() throws DatabaseEngineException {\n        final double[] original = new double[]{5, 6, 7};\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BLOB)\n                .build();\n\n        engine.addEntity(entity);\n        EntityEntry entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", original)\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")));\n\n        int i = 0;\n        for (double d : original) {\n            assertEquals(\"arrays are equal?\", d, query.get(0).get(\"COL2\").<double[]>toBlob()[i++], 0D);\n        }\n    }\n\n    @Test\n    public void limitNumberOfRowsTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 10; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).limit(5));\n\n        assertEquals(\"number of rows ok?\", 5, query.size());\n    }\n\n    @Test\n    public void limitAndOffsetNumberOfRowsTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 20; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n\n        int limit = 5;\n        int offset = 7;\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).limit(limit).offset(offset));\n        assertEquals(\"number of rows ok?\", limit, query.size());\n        for (int i = offset, j = 0; i < offset + limit; i++, j++) {\n            assertEquals(\"Check correct row\", i, query.get(j).get(\"COL1\").toInt().intValue());\n        }\n    }\n\n    @Test\n    public void limitOffsetAndOrderNumberOfRowsTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .addColumn(\"COL6\", INT)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\")\n                .set(\"COL6\", 20);\n\n        for (int i = 0; i < 20; i++) {\n            entry.set(\"COL1\", i);\n            entry.set(\"COL6\", 20 - i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n\n        int limit = 5;\n        int offset = 7;\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).limit(limit).offset(offset).orderby(column(\"COL6\").asc()));\n        assertEquals(\"number of rows ok?\", limit, query.size());\n        for (int i = offset, j = 0; i < offset + limit; i++, j++) {\n            assertEquals(\"Check correct row col1\", 19 - i, query.get(j).get(\"COL1\").toInt().intValue());\n            assertEquals(\"Check correct row col6\", i + 1, query.get(j).get(\"COL6\").toInt().intValue());\n        }\n    }\n\n    @Test\n    public void limitOffsetAndOrder2NumberOfRowsTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", STRING)\n                .addColumn(\"COL3\", INT)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 0)\n                .set(\"COL2\", \"A\")\n                .set(\"COL3\", 6);\n        engine.persist(\"TEST\", entry.build());\n\n\n        entry.set(\"COL1\", 1);\n        entry.set(\"COL2\", \"B\");\n        entry.set(\"COL3\", 5);\n        engine.persist(\"TEST\", entry.build());\n\n        entry.set(\"COL1\", 2);\n        entry.set(\"COL2\", \"C\");\n        entry.set(\"COL3\", 4);\n        engine.persist(\"TEST\", entry.build());\n\n        entry.set(\"COL1\", 3);\n        entry.set(\"COL2\", \"D\");\n        entry.set(\"COL3\", 3);\n        engine.persist(\"TEST\", entry.build());\n\n        entry.set(\"COL1\", 4);\n        entry.set(\"COL2\", \"E\");\n        entry.set(\"COL3\", 2);\n        engine.persist(\"TEST\", entry.build());\n\n        entry.set(\"COL1\", 5);\n        entry.set(\"COL2\", \"F\");\n        entry.set(\"COL3\", 1);\n        engine.persist(\"TEST\", entry.build());\n\n        entry.set(\"COL1\", 6);\n        entry.set(\"COL2\", \"G\");\n        entry.set(\"COL3\", 0);\n        engine.persist(\"TEST\", entry.build());\n\n        int limit = 2;\n        int offset = 3;\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).limit(limit).offset(offset));\n        assertEquals(\"number of rows ok?\", limit, query.size());\n\n        assertEquals(\"Check correct row col2\", \"D\", query.get(0).get(\"COL2\").toString());\n        assertEquals(\"Check correct row col2\", \"E\", query.get(1).get(\"COL2\").toString());\n\n        query = engine.query(select(all()).from(table(\"TEST\")).limit(limit).offset(offset).orderby(column(\"COL2\").desc()));\n        assertEquals(\"number of rows ok?\", limit, query.size());\n\n        assertEquals(\"Check correct row col2\", \"D\", query.get(0).get(\"COL2\").toString());\n        assertEquals(\"Check correct row col2\", \"C\", query.get(1).get(\"COL2\").toString());\n    }\n\n    @Test\n    public void offsetLessThanZero() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .addColumn(\"COL6\", INT)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\")\n                .set(\"COL6\", 20);\n\n        for (int i = 0; i < 20; i++) {\n            entry.set(\"COL1\", i);\n            entry.set(\"COL6\", 20 - i);\n            engine.persist(\"TEST\", entry.build());\n        }\n\n        int limit = 5;\n        int offset = -1;\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).limit(limit).offset(offset).orderby(column(\"COL6\").asc()));\n        assertEquals(\"number of rows ok?\", limit, query.size());\n        for (int i = 0, j = 0; i < 5; i++, j++) {\n            assertEquals(\"Check correct row col1\", 19 - i, query.get(j).get(\"COL1\").toInt().intValue());\n            assertEquals(\"Check correct row col6\", i + 1, query.get(j).get(\"COL6\").toInt().intValue());\n        }\n    }\n\n    @Test\n    public void offsetBiggerThanSize() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .addColumn(\"COL6\", INT)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\")\n                .set(\"COL6\", 20);\n\n        for (int i = 0; i < 20; i++) {\n            entry.set(\"COL1\", i);\n            entry.set(\"COL6\", 20 - i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n\n        int limit = 5;\n        int offset = 20;\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).limit(limit).offset(offset));\n        assertEquals(\"number of rows ok?\", 0, query.size());\n    }\n\n    @Test\n    public void limitZeroOrNegative() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .addColumn(\"COL6\", INT)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\")\n                .set(\"COL6\", 20);\n\n        for (int i = 0; i < 20; i++) {\n            entry.set(\"COL1\", i);\n            entry.set(\"COL6\", 20 - i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n\n        int limit = 0;\n        int offset = 1;\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).limit(limit).offset(offset));\n        assertEquals(\"number of rows ok?\", 19, query.size());\n\n        limit = -1;\n        query = engine.query(select(all()).from(table(\"TEST\")).limit(limit).offset(offset));\n        assertEquals(\"number of rows ok?\", 19, query.size());\n    }\n\n    @Test\n    public void offsetOnlyNumberOfRowsTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .addColumn(\"COL6\", INT)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\")\n                .set(\"COL6\", 2);\n\n        for (int i = 0; i < 20; i++) {\n            entry.set(\"COL1\", i);\n            entry.set(\"COL6\", 20 - i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n\n        int offset = 7;\n        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).offset(offset));\n        assertEquals(\"number of rows ok?\", 20 - offset, query.size());\n        for (int i = offset, j = 0; i < 20; i++, j++) {\n            assertEquals(\"Check correct row 1\", i, query.get(j).get(\"COL1\").toInt().intValue());\n        }\n\n        query = engine.query(select(all()).from(table(\"TEST\")).offset(offset).orderby(column(\"COL6\").asc()));\n        assertEquals(\"number of rows ok?\", 20 - offset, query.size());\n        for (int i = offset, j = 0; i < 20; i++, j++) {\n            assertEquals(\"Check correct row 6\", offset + 1 + j, query.get(j).get(\"COL6\").toInt().intValue());\n        }\n    }\n\n    @Test\n    public void stddevTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 10; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n        List<Map<String, ResultColumn>> query = engine.query(select(stddev(column(\"COL1\")).alias(\"STDDEV\")).from(table(\"TEST\")));\n\n        assertEquals(\"result ok?\", 3.0276503540974917D, query.get(0).get(\"STDDEV\").toDouble(), 0.0001D);\n    }\n\n    @Test\n    public void sumTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 10; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n        List<Map<String, ResultColumn>> query = engine.query(select(sum(column(\"COL1\")).alias(\"SUM\")).from(table(\"TEST\")));\n\n        assertEquals(\"result ok?\", 45, (int) query.get(0).get(\"SUM\").toInt());\n    }\n\n    @Test\n    public void countTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 10; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n        List<Map<String, ResultColumn>> query = engine.query(select(count(column(\"COL1\")).alias(\"COUNT\")).from(table(\"TEST\")));\n\n        assertEquals(\"result ok?\", 10, (int) query.get(0).get(\"COUNT\").toInt());\n    }\n\n    @Test\n    public void avgTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 10; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n        List<Map<String, ResultColumn>> query = engine.query(select(avg(column(\"COL1\")).alias(\"AVG\")).from(table(\"TEST\")));\n\n        assertEquals(\"result ok?\", 4.5D, query.get(0).get(\"AVG\").toDouble(), 0);\n    }\n\n    @Test\n    public void maxTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 10; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n        List<Map<String, ResultColumn>> query = engine.query(select(max(column(\"COL1\")).alias(\"MAX\")).from(table(\"TEST\")));\n\n        assertEquals(\"result ok?\", 9, (int) query.get(0).get(\"MAX\").toInt());\n    }\n\n    @Test\n    public void minTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 10; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n        List<Map<String, ResultColumn>> query = engine.query(select(min(column(\"COL1\")).alias(\"MIN\")).from(table(\"TEST\")));\n\n        assertEquals(\"result ok?\", 0, (int) query.get(0).get(\"MIN\").toInt());\n    }\n\n    @Test\n    public void floorTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2.5D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 10; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n\n        List<Map<String, ResultColumn>> query = engine.query(select(floor(column(\"COL3\")).alias(\"FLOOR\")).from(table(\"TEST\")));\n\n        assertEquals(\"result ok?\", 2.0, query.get(0).get(\"FLOOR\").toDouble(), DELTA);\n    }\n\n    @Test\n    public void ceilingTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry.Builder entry = entry()\n                .set(\"COL1\", 2)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2.5D)\n                .set(\"COL4\", 3L)\n                .set(\"COL5\", \"ADEUS\");\n\n        for (int i = 0; i < 10; i++) {\n            entry.set(\"COL1\", i);\n            engine.persist(\"TEST\", entry\n                    .build());\n        }\n\n        List<Map<String, ResultColumn>> query = engine.query(select(ceiling(column(\"COL3\")).alias(\"CEILING\")).from(table(\"TEST\")));\n\n        assertEquals(\"result ok?\", 3.0, query.get(0).get(\"CEILING\").toDouble(), DELTA);\n    }\n\n    @Test\n    public void twoIntegerDivisionMustReturnADoubleTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", INT)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry.Builder ee = entry()\n                .set(\"COL1\", 1)\n                .set(\"COL2\", 2);\n\n        engine.persist(\"TEST\", ee\n                .build());\n\n        List<Map<String, ResultColumn>> query = engine.query(select(div(column(\"COL1\"), column(\"COL2\")).alias(\"DIV\")).from(table(\"TEST\")));\n\n        assertEquals(\"\", 0.5D, query.get(0).get(\"DIV\").toDouble(), 0);\n    }\n\n    @Test\n    public void selectWithoutFromTest() throws DatabaseEngineException {\n        List<Map<String, ResultColumn>> query = engine.query(select(k(1).alias(\"constant\")));\n\n        assertEquals(\"constant ok?\", 1, (int) query.get(0).get(\"constant\").toInt());\n    }\n\n    @Test(expected = DatabaseEngineException.class)\n    public void createEntityWithNullNameTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(null)\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", INT)\n                .build();\n\n        try {\n            engine.addEntity(entity);\n        } catch (final DatabaseEngineException de) {\n            assertEquals(\"exception ok?\", \"You have to define the entity name\", de.getMessage());\n            throw de;\n        }\n    }\n\n    @Test(expected = DatabaseEngineException.class)\n    public void createEntityWithNoNameTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", INT)\n                .build();\n\n        try {\n            engine.addEntity(entity);\n        } catch (final DatabaseEngineException de) {\n            assertEquals(\"exception ok?\", \"You have to define the entity name\", de.getMessage());\n            throw de;\n        }\n    }\n\n    @Test(expected = DatabaseEngineException.class)\n    public void createEntityWithNameThatExceedsTheMaximumAllowedTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"0123456789012345678901234567891\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", INT)\n                .build();\n\n        try {\n            engine.addEntity(entity);\n        } catch (final DatabaseEngineException de) {\n            assertEquals(\"exception ok?\", \"Entity name '0123456789012345678901234567891' exceeds the maximum number of characters (30)\", de.getMessage());\n            throw de;\n        }\n    }\n\n    @Test(expected = DatabaseEngineException.class)\n    public void createEntityWithColumnThatDoesNotHaveNameTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"entname\")\n                .addColumn(\"\", INT)\n                .addColumn(\"COL2\", INT)\n                .build();\n\n        try {\n            engine.addEntity(entity);\n        } catch (final DatabaseEngineException de) {\n            assertEquals(\"exception ok?\", \"Column in entity 'entname' must have a name\", de.getMessage());\n            throw de;\n        }\n    }\n\n    @Test(expected = DatabaseEngineException.class)\n    public void createEntityWithMoreThanOneAutoIncColumn() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"entname\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", INT, true)\n                .build();\n\n        try {\n            engine.addEntity(entity);\n        } catch (final DatabaseEngineException de) {\n            assertEquals(\"exception ok?\", \"You can only define one auto incremented column\", de.getMessage());\n            throw de;\n        }\n    }\n\n    @Test\n    public void getGeneratedKeysFromAutoIncTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", INT)\n                .build();\n\n\n        engine.addEntity(entity);\n\n        EntityEntry ee = entry()\n                .set(\"COL2\", 2)\n                .build();\n\n        Long persist = engine.persist(\"TEST\", ee);\n\n        assertEquals(\"ret ok?\", new Long(1), persist);\n    }\n\n    @Test\n    public void getGeneratedKeysFromAutoInc2Test() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", INT)\n                .build();\n\n\n        engine.addEntity(entity);\n\n        EntityEntry ee = entry()\n                .set(\"COL2\", 2)\n                .build();\n\n        Long persist = engine.persist(\"TEST\", ee);\n\n        assertEquals(\"ret ok?\", new Long(1), persist);\n\n        ee = entry()\n                .set(\"COL2\", 2)\n                .build();\n\n        persist = engine.persist(\"TEST\", ee);\n\n        assertEquals(\"ret ok?\", new Long(2), persist);\n    }\n\n    @Test\n    public void getGeneratedKeysFromAutoIncWithTransactionTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", INT)\n                .build();\n\n\n        engine.addEntity(entity);\n\n        engine.beginTransaction();\n\n        try {\n            EntityEntry ee = entry()\n                    .set(\"COL2\", 2)\n                    .build();\n\n            Long persist = engine.persist(\"TEST\", ee);\n\n            assertEquals(\"ret ok?\", new Long(1), persist);\n\n            ee = entry()\n                    .set(\"COL2\", 2)\n                    .build();\n\n            persist = engine.persist(\"TEST\", ee);\n\n            assertEquals(\"ret ok?\", new Long(2), persist);\n\n            engine.commit();\n        } finally {\n            if (engine.isTransactionActive()) {\n                engine.rollback();\n            }\n        }\n    }\n\n    /**\n     * Tests that when persisting an entity in table that does not contain any auto generated values, the\n     * {@link DatabaseEngine#persist(String, EntityEntry)} method returns {@code null}.\n     *\n     * @throws DatabaseEngineException If any error occurs.\n     */\n    @Test\n    public void getGeneratedKeysWithNoAutoIncTest() throws DatabaseEngineException {\n        final DbEntity entity = dbEntity()\n            .name(\"TEST\")\n            .addColumn(\"COL1\", STRING)\n            .addColumn(\"COL2\", STRING)\n            // Set the two columns as fields of primary key, so they belong to the generated keys.\n            .pkFields(ImmutableSet.of(\"COL1\", \"COL2\"))\n            .build();\n\n        this.engine.addEntity(entity);\n\n        final EntityEntry ee = entry()\n                .set(\"COL1\", \"VAL1\")\n                .set(\"COL2\", \"VAL2\")\n                .build();\n\n        assertThat(this.engine.persist(\"TEST\", ee))\n            .as(\"The auto generated value should be null!\")\n            .isNull();\n    }\n\n    /**\n     * Tests that when trying to add {@link DbEntity} with multiple columns with auto incremented values, the\n     * {@link DatabaseEngine#addEntity(DbEntity)} method throws a {@link DatabaseEngineException}.\n     */\n    @Test\n    public void addMultipleAutoIncColumnsTest() {\n        final DbEntity entity = dbEntity()\n            .name(\"TEST\")\n            .addColumn(\"COL1\", INT, true)\n            .addColumn(\"COL2\", INT, true)\n            .build();\n\n        assertThatCode(() -> this.engine.addEntity(entity))\n            .as(\"The DatabaseEngine should not allow to setup a DbEntity with multiple auto incremented columns\")\n            .isInstanceOf(DatabaseEngineException.class);\n\n    }\n\n    @Test\n    public void abortTransactionTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", INT)\n                .build();\n\n\n        engine.addEntity(entity);\n\n        engine.beginTransaction();\n        try {\n            EntityEntry ee = entry()\n                    .set(\"COL1\", 1)\n                    .set(\"COL2\", 2)\n                    .build();\n\n            engine.persist(\"TEST\", ee);\n\n            throw new Exception();\n        } catch (final Exception e) {\n            // ignore\n        } finally {\n            assertTrue(\"tx active?\", engine.isTransactionActive());\n\n            engine.rollback();\n\n            assertFalse(\"tx active?\", engine.isTransactionActive());\n\n            assertEquals(\"ret 0?\", 0, engine.query(select(all()).from(table(\"TEST\"))).size());\n        }\n    }\n\n    @Test\n    public void createEntityDropItAndCreateItAgainTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"USER\")\n                .addColumn(\"COL1\", INT, true)\n                .pkFields(\"COL1\")\n                .build();\n\n        engine.addEntity(entity);\n        DbEntity removeEntity = engine.removeEntity(\"USER\");\n\n        assertNotNull(removeEntity);\n\n        engine.addEntity(entity);\n    }\n\n    @Test\n    public void dropEntityThatDoesNotExistTest() {\n        DbEntity removeEntity = engine.removeEntity(\"TABLETHATDOESNOTEXIST\");\n\n        assertNull(removeEntity);\n    }\n\n    @Test\n    public void joinsTest() throws DatabaseEngineException {\n\n        userRolePermissionSchema();\n\n        engine.query(\n                select(all())\n                        .from(\n                                table(\"USER\").alias(\"a\").innerJoin(table(\"USER_ROLE\").alias(\"b\"), eq(column(\"a\", \"COL1\"), column(\"b\", \"COL1\")))\n                        )\n        );\n\n        engine.query(\n                select(all())\n                        .from(\n                                table(\"USER\").alias(\"a\")\n                                        .innerJoin(table(\"USER_ROLE\").alias(\"b\"), eq(column(\"a\", \"COL1\"), column(\"b\", \"COL1\")))\n                                        .innerJoin(table(\"ROLE\").alias(\"c\"), eq(column(\"b\", \"COL2\"), column(\"c\", \"COL1\")))\n                        )\n        );\n\n        engine.query(\n                select(all())\n                        .from(\n                                table(\"USER\").alias(\"a\").rightOuterJoin(table(\"USER_ROLE\").alias(\"b\"), eq(column(\"a\", \"COL1\"), column(\"b\", \"COL1\")))\n                        )\n        );\n\n        engine.query(\n                select(all())\n                        .from(\n                                table(\"USER\").alias(\"a\").leftOuterJoin(table(\"USER_ROLE\").alias(\"b\"), eq(column(\"a\", \"COL1\"), column(\"b\", \"COL1\")))\n                        )\n        );\n    }\n\n    @Test\n    public void joinATableWithQueryTest() throws DatabaseEngineException {\n        userRolePermissionSchema();\n\n        engine.query(\n                select(all())\n                        .from(\n                                table(\"USER\").alias(\"a\")\n                                        .innerJoin(\n                                                select(column(\"COL1\"))\n                                                        .from(table(\"USER\")).alias(\"b\")\n                                                , eq(column(\"a\", \"COL1\"), column(\"b\", \"COL1\"))\n                                        )\n                        )\n        );\n    }\n\n    @Test\n    public void joinAQueryWithATableTest() throws DatabaseEngineException {\n        userRolePermissionSchema();\n\n        engine.query(\n                select(all())\n                        .from(\n                                select(column(\"COL1\"))\n                                        .from(table(\"USER\")).alias(\"b\")\n                                        .innerJoin(\n                                                table(\"USER\").alias(\"a\")\n                                                , eq(column(\"a\", \"COL1\"), column(\"b\", \"COL1\"))\n                                        )\n                        )\n        );\n    }\n\n    @Test\n    public void joinTwoQueriesTest() throws DatabaseEngineException {\n        userRolePermissionSchema();\n\n        engine.query(\n                select(all())\n                        .from(\n                                select(column(\"COL1\"))\n                                        .from(table(\"USER\")).alias(\"a\")\n                                        .innerJoin(\n                                                select(column(\"COL1\"))\n                                                        .from(table(\"USER\")).alias(\"b\")\n                                                , eq(column(\"a\", \"COL1\"), column(\"b\", \"COL1\"))\n                                        )\n                        )\n        );\n    }\n\n    @Test\n    public void joinThreeQueriesTest() throws DatabaseEngineException {\n        userRolePermissionSchema();\n\n        engine.query(\n                select(all())\n                        .from(\n                                select(column(\"COL1\"))\n                                        .from(table(\"USER\")).alias(\"a\")\n                                        .innerJoin(\n                                                select(column(\"COL1\"))\n                                                        .from(table(\"USER\")).alias(\"b\")\n                                                , eq(column(\"a\", \"COL1\"), column(\"b\", \"COL1\"))\n                                        )\n                                        .rightOuterJoin(\n                                                select(column(\"COL1\"))\n                                                        .from(table(\"USER\")).alias(\"c\")\n                                                , eq(column(\"a\", \"COL1\"), column(\"c\", \"COL1\"))\n                                        )\n                        )\n        );\n    }\n\n    @Test\n    @Category(SkipTestCockroachDB.class)\n    // unimplemented in CockroachDB: views do not currently support * expressions\n    // https://github.com/cockroachdb/cockroach/issues/10028\n    public void createAndDropViewTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.executeUpdate(\n                createView(\"VN\").as(select(all()).from(table(\"TEST\")))\n        );\n\n        engine.dropView(\"VN\");\n    }\n\n    @Test\n    @Category(SkipTestCockroachDB.class)\n    // unimplemented in CockroachDB: views do not currently support * expressions\n    // https://github.com/cockroachdb/cockroach/issues/10028\n    public void createOrReplaceViewTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.executeUpdate(\n                createView(\"VN\").as(select(all()).from(table(\"TEST\"))).replace()\n        );\n\n        engine.dropView(\"VN\");\n    }\n\n    @Test\n    public void distinctTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.query(\n                select(all()).distinct()\n                        .from(table(\"TEST\"))\n        );\n    }\n\n    @Test\n    public void distinctAndLimitTogetherTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.query(\n                select(all()).distinct()\n                        .from(table(\"TEST\")).limit(2)\n        );\n    }\n\n    @Test\n    public void notEqualTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(neq(column(\"COL1\"), k(1)))\n        );\n    }\n\n    /**\n     * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with a value filters a row correctly.\n     *\n     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.\n     */\n    @Test\n    public void inTest() throws DatabaseEngineException {\n        runInClauseTest(in(column(\"COL1\"), L((k(1)))));\n    }\n\n    /**\n     * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with SELECT filters a row correctly.\n     *\n     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.\n     */\n    @Test\n    public void inSelectTest() throws DatabaseEngineException {\n        runInClauseTest(in(\n                column(\"COL1\"),\n                select(column(\"COL1\")).from(table(\"TEST\")).where(eq(column(\"COL1\"), k(1)))\n        ));\n    }\n\n    /**\n     * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with values filters a row correctly,\n     * when many values are provided.\n     * <p>\n     * This is a regression test for Oracle, which only supports up to 1000 values in IN clauses; the test uses\n     * 20000 values.\n     *\n     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.\n     */\n    @Test\n    public void inManyValuesTest() throws DatabaseEngineException {\n        final List<Expression> numExprs = IntStream.rangeClosed(-19998, 1)\n                .mapToObj(SqlBuilder::k)\n                .collect(Collectors.toList());\n\n        runInClauseTest(in(column(\"COL1\"), L(numExprs)));\n    }\n\n    /**\n     * Tests that the {@link SqlBuilder#notIn(Expression, Expression) (Expression, Expression) negated IN} clause\n     * with a value filters a row correctly.\n     *\n     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.\n     */\n    @Test\n    public void notInTest() throws DatabaseEngineException {\n        runInClauseTest(notIn(column(\"COL1\"), L((k(2)))));\n    }\n\n    /**\n     * Tests that the {@link SqlBuilder#notIn(Expression, Expression) negated IN} clause with SELECT filters a row correctly.\n     *\n     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.\n     */\n    @Test\n    public void notInSelectTest() throws DatabaseEngineException {\n        runInClauseTest(notIn(\n                column(\"COL1\"),\n                select(column(\"COL1\")).from(table(\"TEST\")).where(eq(column(\"COL1\"), k(2)))\n        ));\n    }\n\n    /**\n     * Tests that the {@link SqlBuilder#notIn(Expression, Expression) negated IN} clause with a value filters a row\n     * correctly, when many values are provided.\n     * <p>\n     * This is a regression test for Oracle, which only supports up to 1000 values in IN clauses; the test uses\n     * 20000 values.\n     *\n     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.\n     */\n    @Test\n    public void notInManyValuesTest() throws DatabaseEngineException {\n        final List<Expression> numExprs = IntStream.rangeClosed(2, 20001)\n                .mapToObj(SqlBuilder::k)\n                .collect(Collectors.toList());\n\n        runInClauseTest(notIn(column(\"COL1\"), L(numExprs)));\n    }\n\n    /**\n     * Common code to run IN clause tests.\n     * <p>\n     * This creates 2 entries in the database:\n     * <table>\n     *     <tr><td>COL1</td><td>COL5</td></tr>\n     *     <tr><td>1</td><td>s1</td></tr>\n     *     <tr><td>2</td><td>s2</td></tr>\n     * </table>\n     * <p>\n     * The verifications expect the provided {@code whereInExpression} to filter the entries such that only the first\n     * one is returned.\n     *\n     * @param whereInExpression The {@link Expression} to use in the WHERE clause of the query.\n     * @throws DatabaseEngineException If a DB error occurs.\n     */\n    private void runInClauseTest(final Expression whereInExpression) throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"s1\").build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"s2\").build());\n\n        final List<Map<String, ResultColumn>> results = engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(whereInExpression)\n        );\n\n        assertThat(results)\n                .as(\"query should return only 1 result\")\n                .hasSize(1)\n                .element(0)\n                .as(\"result should have have value '1'\")\n                .extracting(result -> result.get(\"COL1\").toInt())\n                .isEqualTo(1);\n    }\n\n    @Test\n    public void booleanTrueComparisonTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry entry1 = entry()\n                .set(\"COL1\", 1)\n                .set(\"COL2\", true)\n                .set(\"COL3\", 1)\n                .set(\"COL4\", 1)\n                .set(\"COL5\", \"val 1\")\n                .build();\n        engine.persist(\"TEST\", entry1, false);\n\n        EntityEntry entry2 = entry()\n                .set(\"COL1\", 1)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 1)\n                .set(\"COL4\", 1)\n                .set(\"COL5\", \"val 1\")\n                .build();\n        engine.persist(\"TEST\", entry2, false);\n\n        List<Map<String, ResultColumn>> rows = engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                eq(column(\"COL2\"), k(true))\n                        )\n        );\n\n        assertEquals(1, rows.size());\n    }\n\n    @Test\n    public void booleanFalseComparisonTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry entry1 = entry()\n                .set(\"COL1\", 1)\n                .set(\"COL2\", true)\n                .set(\"COL3\", 1)\n                .set(\"COL4\", 1)\n                .set(\"COL5\", \"val 1\")\n                .build();\n        engine.persist(\"TEST\", entry1, false);\n\n        EntityEntry entry2 = entry()\n                .set(\"COL1\", 1)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 1)\n                .set(\"COL4\", 1)\n                .set(\"COL5\", \"val 1\")\n                .build();\n        engine.persist(\"TEST\", entry2, false);\n\n        List<Map<String, ResultColumn>> rows = engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                eq(column(\"COL2\"), k(false))\n                        )\n        );\n\n        assertEquals(1, rows.size());\n    }\n\n    @Test\n    public void coalesceTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                eq(coalesce(column(\"COL2\"), k(false)), k(false))\n                        )\n        );\n    }\n\n    @Test\n    public void multipleCoalesceTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                eq(coalesce(column(\"COL2\"), k(false), k(true)), k(false))\n                        )\n        );\n    }\n\n    @Test\n    public void betweenTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                between(column(\"COL1\"), k(1), k(2))\n                        )\n        );\n    }\n\n\n\n    @Test\n    public void testCast() throws DatabaseEngineException {\n\n        final Query query = select(\n                cast(k(\"22\"), INT).alias(\"int\"),\n                cast(k(22), STRING).alias(\"string\"),\n                cast(k(\"1\"), BOOLEAN).alias(\"bool\"),\n                cast(k(\"22\"), DOUBLE).alias(\"double\"),\n                cast(k(22), LONG).alias(\"long\")\n        );\n\n        final Map<String, ResultColumn> result = engine.query(query).get(0);\n\n        assertEquals(\"Result must be 22\", new Integer(22), result.get(\"int\").toInt());\n        assertEquals(\"Result must be '22'\", \"22\", result.get(\"string\").toString());\n        assertEquals(\"Result must be true\", true, result.get(\"bool\").toBoolean());\n        assertEquals(\"Result must be 22.0\", new Double(22), result.get(\"double\").toDouble());\n        assertEquals(\"Result must be 22\", new Long(22), result.get(\"long\").toLong());\n    }\n\n    @Test\n    public void testCastColumns() throws DatabaseEngineException {\n\n        final DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL_INT\", INT)\n                .addColumn(\"COL_STRING\", STRING)\n                .addColumn(\"COL_CAST_INT\", INT)\n                .addColumn(\"COL_CAST_STRING\", STRING)\n                .pkFields(\"COL_INT\")\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry entry = entry()\n                .set(\"COL_INT\", 123)\n                .set(\"COL_STRING\", \"321\")\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        // test CAST when writing values\n        final Update update = update(table(\"TEST\"))\n                .set(eq(column(\"COL_CAST_INT\"), cast(k(\"3211\"), INT)),\n                        eq(column(\"COL_CAST_STRING\"), cast(k(1233), STRING)))\n                .where(eq(column(\"COL_INT\"), k(123)));\n\n        engine.executeUpdate(update);\n\n        // test CAST when reading values\n        Query query =\n                select(\n                        cast(column(\"COL_INT\"), STRING).alias(\"COL_INT_string\"),\n                        cast(column(\"COL_STRING\"), INT).alias(\"COL_STRING_int\"),\n                        column(\"COL_CAST_INT\"),\n                        column(\"COL_CAST_STRING\")\n                ).from(table(\"TEST\"));\n\n        Map<String, ResultColumn> result = engine.query(query).get(0);\n\n        assertEquals(\"The value of COL_INT cast to string must be '123'\", \"123\", result.get(\"COL_INT_string\").toString());\n        assertEquals(\"The value of COL_STRING cast to int must be 321\", new Integer(321), result.get(\"COL_STRING_int\").toInt());\n        assertEquals(\"The value of COL_CAST_INT must be 3211\", Integer.valueOf(3211), result.get(\"COL_CAST_INT\").toInt());\n        assertEquals(\"The value of COL_CAST_STRING must be '1233'\", \"1233\", result.get(\"COL_CAST_STRING\").toString());\n\n        /*\n         Until now the test only really checks if the CAST doesn't cause any errors because\n          - when writing values into the DB it automatically casts into the column data type\n          - when reading values from the DB, the test reads the results from the ResultColumn as the desired type\n         Even if we used a function, it is likely the DB would try to cast the parameters to the expected type.\n         To effectively test if CAST works, we need to check if DB sorting considers the column a string or a number.\n         */\n        entry = entry()\n                .set(\"COL_INT\", 1000)\n                .set(\"COL_STRING\", \"321000\")\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        query = select(column(\"COL_INT\")).from(table(\"TEST\")).orderby(column(\"COL_INT\"));\n        String firstResult = engine.query(query).get(0).get(\"COL_INT\").toString();\n        assertEquals(\"sorting should have considered the sort column as a number (123 < 1000)\", \"123\", firstResult);\n\n        query = select(column(\"COL_INT\"), cast(column(\"COL_INT\"), STRING).alias(\"COL_INT_string\"))\n                .from(table(\"TEST\"))\n                .orderby(column(\"COL_INT_string\"));\n        firstResult = engine.query(query).get(0).get(\"COL_INT\").toString();\n        assertEquals(\"sorting should have considered the sort column as a string (1000 < 123)\", \"1000\", firstResult);\n    }\n\n    /**\n     * Check if exception is thrown when trying to cast for an unsupported type.\n     *\n     * @throws DatabaseEngineException If something goes wrong executing the query.\n     */\n    @Test(expected = OperationNotSupportedRuntimeException.class)\n    public void testCastUnsupported() throws DatabaseEngineException {\n        engine.query(select(cast(k(\"22\"), BLOB)));\n    }\n\n    @Test\n    public void testWith() throws DatabaseEngineException {\n        assumeFalse(\"MySQL doesn't support WITH\", engine.getDialect() == Dialect.MYSQL);\n\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"manuel\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"ana\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"rita\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"rui\")\n                .build());\n\n        final With with = with(\"friends\", select(all())\n                                                .from(table(\"TEST\")))\n                .then(\n                        select(column(\"COL5\").alias(\"name\"))\n                        .from(table(\"friends\"))\n                        .where(eq(column(\"COL1\"), k(1))));\n\n        final List<Map<String, ResultColumn>> result = engine.query(with);\n\n        assertEquals(\"Name must be 'manuel'\", \"manuel\", result.get(0).get(\"name\").toString());\n    }\n\n    @Test\n    public void testWithAll() throws DatabaseEngineException {\n        assumeFalse(\"MySQL doesn't support WITH\", engine.getDialect() == Dialect.MYSQL);\n\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"manuel\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"ana\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"rita\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"rui\")\n                .build());\n\n        final With with =\n                with(\"friends\",\n                        select(all())\n                        .from(table(\"TEST\")))\n                .then(\n                        select(column(\"COL5\").alias(\"name\"))\n                        .from(table(\"friends\"))\n                        .orderby(column(\"COL5\")));\n\n        final List<Map<String, ResultColumn>> result = engine.query(with);\n\n        assertEquals(\"Name must be 'ana'\", \"ana\", result.get(0).get(\"name\").toString());\n        assertEquals(\"Name must be 'manuel'\", \"manuel\", result.get(1).get(\"name\").toString());\n        assertEquals(\"Name must be 'rita'\", \"rita\", result.get(2).get(\"name\").toString());\n        assertEquals(\"Name must be 'rui'\", \"rui\", result.get(3).get(\"name\").toString());\n    }\n\n    @Test\n    public void testWithMultiple() throws DatabaseEngineException {\n        assumeFalse(\"MySQL doesn't support WITH\", engine.getDialect() == Dialect.MYSQL);\n\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"manuel\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"ana\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"rita\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"rui\")\n                .build());\n\n        final With with =\n                with(\"friendsA\",\n                        select(all())\n                        .from(table(\"TEST\"))\n                        .where(or(eq(column(\"COL1\"), k(1)), eq(column(\"COL1\"), k(2)))))\n\n                .andWith(\"friendsB\",\n                        select(all())\n                        .from(table(\"TEST\"))\n                        .where(or(eq(column(\"COL1\"), k(3)), eq(column(\"COL1\"), k(4)))))\n                .then(\n                        union(select(all()).from(table(\"friendsA\")),\n                              select(all()).from(table(\"friendsB\"))));\n\n        final List<Map<String, ResultColumn>> result = engine.query(with);\n\n        final List<String> resultSorted = result.stream()\n                .map(row -> row.get(\"COL5\").toString())\n                .sorted()\n                .collect(Collectors.toList());\n\n        assertEquals(\"Name must be 'ana'\", \"ana\", resultSorted.get(0));\n        assertEquals(\"Name must be 'manuel'\", \"manuel\", resultSorted.get(1));\n        assertEquals(\"Name must be 'rita'\", \"rita\", resultSorted.get(2));\n        assertEquals(\"Name must be 'rui'\", \"rui\", resultSorted.get(3));\n    }\n\n    @Test\n    public void testCaseWhen() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"xpto\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"xpto\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"teste\")\n                .build());\n\n        List<Map<String, ResultColumn>> result = engine.query(\n                select(caseWhen().when(eq(column(\"COL5\"), k(\"teste\")), k(\"LOL\")).alias(\"case\"))\n                        .from(table(\"TEST\")));\n\n        assertEquals(\"COL5 must be LOL\", \"LOL\", result.get(0).get(\"case\").toString());\n        assertEquals(\"COL5 must be LOL\", \"LOL\", result.get(3).get(\"case\").toString());\n    }\n\n    @Test\n    public void testCaseWhenElse() throws DatabaseEngineException {\n        create5ColumnsEntity();\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"xpto\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"xpto\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"teste\")\n                .build());\n\n        List<Map<String, ResultColumn>> result = engine.query(\n                select(caseWhen().when(eq(column(\"COL5\"), k(\"teste\")), k(\"LOL\"))\n                               .otherwise(k(\"ROFL\")).alias(\"case\"))\n                        .from(table(\"TEST\"))\n        );\n\n        assertEquals(\"COL5 must be LOL\", \"LOL\", result.get(0).get(\"case\").toString());\n        assertEquals(\"COL5 must be ROFL\", \"ROFL\", result.get(1).get(\"case\").toString());\n        assertEquals(\"COL5 must be ROFL\", \"ROFL\", result.get(2).get(\"case\").toString());\n        assertEquals(\"COL5 must be LOL\", \"LOL\", result.get(3).get(\"case\").toString());\n    }\n\n    @Test\n    public void testCaseMultipleWhenElse() throws DatabaseEngineException {\n        create5ColumnsEntity();\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"xpto\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"xpto\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5).set(\"COL5\", \"pomme de terre\")\n                .build());\n\n        List<Map<String, ResultColumn>> result = engine.query(\n                select(caseWhen().when(eq(column(\"COL5\"), k(\"teste\")), k(\"LOL\"))\n                                .when(eq(column(\"COL5\"), k(\"pomme de terre\")), k(\"KEK\"))\n                                .otherwise(k(\"ROFL\")).alias(\"case\"))\n                        .from(table(\"TEST\"))\n        );\n\n        assertEquals(\"COL5 must be LOL\", \"LOL\", result.get(0).get(\"case\").toString());\n        assertEquals(\"COL5 must be ROFL\", \"ROFL\", result.get(1).get(\"case\").toString());\n        assertEquals(\"COL5 must be ROFL\", \"ROFL\", result.get(2).get(\"case\").toString());\n        assertEquals(\"COL5 must be LOL\", \"LOL\", result.get(3).get(\"case\").toString());\n        assertEquals(\"COL5 must be KEK\", \"KEK\", result.get(4).get(\"case\").toString());\n    }\n\n    @Test\n    public void testConcat() throws DatabaseEngineException {\n        final List<Map<String, ResultColumn>> result = queryConcat(k(\".\"));\n\n        assertEquals(\"teste.teste\", result.get(0).get(\"concat\").toString());\n        assertEquals(\"xpto.xpto\", result.get(1).get(\"concat\").toString());\n        assertEquals(\"xpto.xpto\", result.get(2).get(\"concat\").toString());\n        assertEquals(\"teste.teste\", result.get(3).get(\"concat\").toString());\n        assertEquals(\"pomme de terre.pomme de terre\", result.get(4).get(\"concat\").toString());\n    }\n\n    @Test\n    public void testConcatEmpty() throws DatabaseEngineException {\n        final List<Map<String, ResultColumn>> result = queryConcat(k(\"\"));\n\n        assertEquals(\"testeteste\", result.get(0).get(\"concat\").toString());\n        assertEquals(\"xptoxpto\", result.get(1).get(\"concat\").toString());\n        assertEquals(\"xptoxpto\", result.get(2).get(\"concat\").toString());\n        assertEquals(\"testeteste\", result.get(3).get(\"concat\").toString());\n        assertEquals(\"pomme de terrepomme de terre\", result.get(4).get(\"concat\").toString());\n    }\n\n    @Test\n    public void testConcatNullExpressions() throws DatabaseEngineException {\n        final Query query = select(concat(k(\",\"), k(\"lol\"), k(null), k(\"rofl\")).alias(\"concat\"));\n        final List<Map<String, ResultColumn>> result = engine.query(query);\n        assertEquals(\"lol,rofl\", result.get(0).get(\"concat\").toString());\n    }\n\n    @Test\n    public void testConcatNullDelimiter() throws DatabaseEngineException {\n        final Query query = select(concat(k(null), k(\"lol\"), k(\"nop\"), k(\"rofl\")).alias(\"concat\"));\n        final List<Map<String, ResultColumn>> result = engine.query(query);\n        assertEquals(\"lolnoprofl\", result.get(0).get(\"concat\").toString());\n    }\n\n    @Test\n    public void testConcatColumn() throws DatabaseEngineException {\n        final List<Map<String, ResultColumn>> result = queryConcat(column(\"COL2\"));\n\n        assertEquals(\"testetesteteste\", result.get(0).get(\"concat\").toString());\n        assertEquals(\"xptoxptoxpto\", result.get(1).get(\"concat\").toString());\n        assertEquals(\"xptoxptoxpto\", result.get(2).get(\"concat\").toString());\n        assertEquals(\"testetesteteste\", result.get(3).get(\"concat\").toString());\n        assertEquals(\"pomme de terrepomme de terrepomme de terre\", result.get(4).get(\"concat\").toString());\n    }\n\n    /**\n     * Runs a concat query on the test dataset, given a delimiter.\n     *\n     * @param delimiter the delimiter used in concat.\n     * @return the result set.\n     * @throws DatabaseEngineException if an issue when querying arises.\n     */\n    private List<Map<String, ResultColumn>> queryConcat(final Expression delimiter) throws DatabaseEngineException {\n        final DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", STRING)\n                .addColumn(\"COL3\", STRING)\n                .build();\n\n        engine.addEntity(entity);\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", \"teste\").set(\"COL3\", \"teste\").build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL2\", \"xpto\").set(\"COL3\", \"xpto\").build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL2\", \"xpto\").set(\"COL3\", \"xpto\").build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL2\", \"teste\").set(\"COL3\", \"teste\").build());\n        engine.persist(\n                \"TEST\",\n                entry().set(\"COL1\", 5).set(\"COL2\", \"pomme de terre\").set(\"COL3\", \"pomme de terre\").build()\n        );\n        engine.persist(\n                \"TEST\",\n                entry().set(\"COL1\", 6).set(\"COL2\", \"lol\").set(\"COL3\", null).build()\n        );\n\n        final Query query =\n                select(\n                        concat(delimiter, column(\"COL2\"), column(\"COL3\")).alias(\"concat\"))\n                .from(table(\"TEST\"));\n\n        return engine.query(query);\n    }\n\n    /**\n     * Reproduces an issue when using CASE ... WHEN expressions in SqlServer and MySql.\n     * <p>\n     * Since we don't have the type information for a column that is generated from the result of a WHEN expression,\n     * we need to rely on the user calling one of the ResultColumn.toXXX methods to understand what the user is\n     * expecting. In the case of ResultColumn.toBoolean(), we're first checking if the result is of boolean type,\n     * as happens normally when the driver knows that the column is of type boolean, but then we also try to parse the\n     * underlying database boolean representation. This is necessary because in WHEN expressions, the driver doesn't\n     * know the expected return type.\n     * <p>\n     * I also tried to fix this using {@code cast(1 as BIT)}, which seemed more appropriate because we would be hinting\n     * the driver about the type, but it's not possible to follow this approach in MySql because we cannot cast to\n     * tinyint(1), which is the native type for booleans in MySql.\n     *\n     * @throws DatabaseEngineException propagate\n     */\n    @Test\n    public void testCaseToBoolean() throws DatabaseEngineException {\n        create5ColumnsEntity();\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", false).build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL2\", true).set(\"COL5\", \"xpto\").build());\n\n        final Query query = select(\n                column(\"COL2\"),\n                caseWhen()\n                        .when(column(\"COL5\").isNotNull(), k(true))\n                        .otherwise(k(false))\n                        .alias(\"COL5_NOT_NULL\"))\n                .from(table(\"TEST\"))\n                .orderby(column(\"COL1\").asc());\n\n        final List<Map<String, ResultColumn>> result = engine.query(query);\n\n        assertFalse(\"COL2 should be false\", result.get(0).get(\"COL2\").toBoolean());\n        assertFalse(\"COL5_NOT_NULL should be false\", result.get(0).get(\"COL5_NOT_NULL\").toBoolean());\n        assertTrue(\"COL2 should be true\", result.get(1).get(\"COL2\").toBoolean());\n        assertTrue(\"COL5_NOT_NULL should be true\", result.get(1).get(\"COL5_NOT_NULL\").toBoolean());\n    }\n\n    @Test\n    public void testUnion() throws DatabaseEngineException {\n        create5ColumnsEntity();\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"a\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"b\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"c\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"d\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5).set(\"COL5\", \"d\")\n                .build());\n\n        final String[] letters = new String[] {\"a\", \"b\", \"c\", \"d\", \"d\"};\n        final Collection<Expression> queries = Arrays.stream(letters)\n                .map(literal ->\n                        select(column(\"COL5\"))\n                        .from(table(\"TEST\"))\n                        .where(eq(column(\"COL5\"), k(literal))))\n                .collect(Collectors.toList());\n\n        final Expression query = union(queries);\n        final List<Map<String, ResultColumn>> result = engine.query(query);\n\n        assertEquals(\"Must return 4 results due to distinct property\", 4, result.size());\n\n        final List<String> resultSorted = result.stream()\n                .map(row -> row.get(\"COL5\").toString())\n                .sorted()\n                .collect(Collectors.toList());\n\n        assertEquals(\"COL5 must be a\", \"a\", resultSorted.get(0));\n        assertEquals(\"COL5 must be b\", \"b\", resultSorted.get(1));\n        assertEquals(\"COL5 must be c\", \"c\", resultSorted.get(2));\n        assertEquals(\"COL5 must be d\", \"d\", resultSorted.get(3));\n    }\n\n    @Test\n    public void testUnionAll() throws DatabaseEngineException {\n        create5ColumnsEntity();\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"a\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"b\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"c\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"d\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5).set(\"COL5\", \"d\")\n                .build());\n\n        final int[] ids = new int[] {1, 2, 3, 4, 5};\n        final Collection<Expression> queries = Arrays.stream(ids)\n                .mapToObj(literal ->\n                        select(column(\"COL5\"))\n                        .from(table(\"TEST\"))\n                        .where(eq(column(\"COL1\"), k(literal))))\n                .collect(Collectors.toList());\n\n        final Expression query = union(queries).all();\n        final List<Map<String, ResultColumn>> result = engine.query(query);\n\n        assertEquals(\"Must return 5 results\", 5, result.size());\n\n        final List<String> resultSorted = result.stream()\n                .map(row -> row.get(\"COL5\").toString())\n                .sorted()\n                .collect(Collectors.toList());\n\n        assertEquals(\"COL5 must be a\", \"a\", resultSorted.get(0));\n        assertEquals(\"COL5 must be b\", \"b\", resultSorted.get(1));\n        assertEquals(\"COL5 must be c\", \"c\", resultSorted.get(2));\n        assertEquals(\"COL5 must be d\", \"d\", resultSorted.get(3));\n        assertEquals(\"COL5 must be d\", \"d\", resultSorted.get(4));\n    }\n\n    @Test\n    public void testValues() throws DatabaseEngineException {\n        final Values values =\n                values(\"id\", \"name\")\n                    .row(k(1), k(\"ana\"))\n                    .row(k(2), k(\"fred\"))\n                    .row(k(3), k(\"manuel\"))\n                    .row(k(4), k(\"rita\"));\n\n        final List<Map<String, ResultColumn>> result = engine.query(values);\n\n        final List<Integer> ids = result.stream()\n                .map(row -> row.get(\"id\").toInt())\n                .sorted()\n                .collect(Collectors.toList());\n\n        final List<String> names = result.stream()\n                .map(row -> row.get(\"name\").toString())\n                .sorted()\n                .collect(Collectors.toList());\n\n        assertEquals(\"id must be 1\", new Integer(1), ids.get(0));\n        assertEquals(\"id must be 2\", new Integer(2), ids.get(1));\n        assertEquals(\"id must be 3\", new Integer(3), ids.get(2));\n        assertEquals(\"id must be 4\", new Integer(4), ids.get(3));\n\n        assertEquals(\"name must be 'ana'\", \"ana\", names.get(0));\n        assertEquals(\"name must be 'fred'\", \"fred\", names.get(1));\n        assertEquals(\"name must be 'manuel'\", \"manuel\", names.get(2));\n        assertEquals(\"name must be 'rita'\", \"rita\", names.get(3));\n    }\n\n    @Test(expected = DatabaseEngineRuntimeException.class)\n    public void testValuesNoAliases() throws DatabaseEngineException {\n        final Values values =\n                values()\n                    .row(k(1), k(\"ana\"))\n                    .row(k(2), k(\"fred\"))\n                    .row(k(3), k(\"manuel\"))\n                    .row(k(4), k(\"rita\"));\n        try {\n            engine.query(values);\n        } catch (DatabaseEngineRuntimeException e) {\n            assertEquals(\"Values requires aliases to avoid ambiguous columns names.\", e.getMessage());\n            throw e;\n        }\n    }\n\n    @Test\n    public void testLargeValues() throws DatabaseEngineException {\n        final Values values = values(\"long\", \"uuid\");\n\n        for (int i = 0 ; i < 256 ; i++) {\n            values.row(k(ThreadLocalRandom.current().nextLong()),\n                    k(UUID.randomUUID().toString()));\n        }\n\n        // If it crashes, the test will fail.\n        engine.query(values);\n    }\n\n    @Test\n    public void betweenWithSelectTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                between(select(column(\"COL1\")).from(table(\"TEST\")).enclose(), k(1), k(2))\n                        )\n        );\n    }\n\n    @Test\n    public void betweenEnclosedTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                between(column(\"COL1\"), k(1), k(2)).enclose()\n                        )\n        );\n    }\n\n    @Test\n    public void notBetweenTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                notBetween(column(\"COL1\"), k(1), k(2)).enclose()\n                        )\n        );\n    }\n\n    @Test\n    public void modTest() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", INT)\n                .addColumn(\"COL5\", STRING)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry entry = entry()\n                .set(\"COL1\", 12)\n                .set(\"COL2\", false)\n                .set(\"COL3\", 2D)\n                .set(\"COL4\", 5)\n                .set(\"COL5\", \"ADEUS\")\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> query = engine.query(select(mod(column(\"COL1\"), column(\"COL4\")).alias(\"MODULO\")).from(table(\"TEST\")));\n\n        assertEquals(\"result ok?\", 2, (int) query.get(0).get(\"MODULO\").toInt());\n\n    }\n\n    @Test\n    public void subSelectTest() throws DatabaseEngineException {\n        List<Map<String, ResultColumn>> query = engine.query(\n                select(\n                        k(1000).alias(\"timestamp\"),\n                        column(\"sq_1\", \"one\").alias(\"first\"),\n                        column(\"sq_1\", \"two\").alias(\"second\"),\n                        column(\"sq_1\", \"three\").alias(\"third\"))\n                        .from(\n                                select(\n                                        k(1).alias(\"one\"),\n                                        k(2L).alias(\"two\"),\n                                        k(3.0).alias(\"three\")).alias(\"sq_1\")\n                        )\n        );\n\n        assertEquals(\"result ok?\", 1000, (long) query.get(0).get(\"timestamp\").toLong());\n        assertEquals(\"result ok?\", 1, (int) query.get(0).get(\"first\").toInt());\n        assertEquals(\"result ok?\", 2L, (long) query.get(0).get(\"second\").toLong());\n        assertEquals(\"result ok?\", 3.0, query.get(0).get(\"third\").toDouble(), 0.0);\n    }\n\n    @Test\n    public void update1ColTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5)\n                .build());\n\n        engine.executeUpdate(\n                update(table(\"TEST\"))\n                        .set(eq(column(\"COL1\"), k(1)))\n        );\n    }\n\n    @Test\n    public void update2ColTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5)\n                .build());\n\n        engine.executeUpdate(\n                update(table(\"TEST\"))\n                        .set(\n                                eq(column(\"COL1\"), k(1)),\n                                eq(column(\"COL5\"), k(\"ola\")))\n        );\n    }\n\n    @Test\n    public void updateWithAliasTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5)\n                .build());\n\n        engine.executeUpdate(\n                update(table(\"TEST\").alias(\"T\"))\n                        .set(\n                                eq(column(\"COL1\"), k(1)),\n                                eq(column(\"COL5\"), k(\"ola\")))\n        );\n    }\n\n    @Test\n    public void updateWithWhereTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5)\n                .build());\n\n        engine.executeUpdate(\n                update(table(\"TEST\").alias(\"T\"))\n                        .set(\n                                eq(column(\"COL1\"), k(1)),\n                                eq(column(\"COL5\"), k(\"ola\")))\n                        .where(eq(column(\"COL1\"), k(5)))\n        );\n    }\n\n    @Test\n    public void updateFrom1ColTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n        final DbEntity entity = dbEntity()\n                .name(\"TEST2\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", STRING)\n                .build();\n\n        engine.addEntity(entity);\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                                      .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"xpto\")\n                                      .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"xpto\")\n                                      .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"teste\")\n                                      .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5).set(\"COL5\", \"pomme de terre\")\n                                      .build());\n\n        engine.persist(\"TEST2\", entry().set(\"COL1\", 1).set(\"COL2\", \"update1\")\n                                      .build());\n        engine.persist(\"TEST2\", entry().set(\"COL1\", 5).set(\"COL2\", \"update2\")\n                                      .build());\n\n        final Update updateFrom =\n                update(table(\"TEST\"))\n                        .from(table(\"TEST2\"))\n                        .set(eq(column(\"COL5\"), column(\"TEST2\", \"COL2\")))\n                        .where(eq(column(\"TEST\", \"COL1\"), column(\"TEST2\", \"COL1\")));\n\n        engine.executeUpdate(updateFrom);\n\n        // check to see if TEST has changed\n        final Query query = select(column(\"COL5\"))\n                .from(table(\"TEST\"))\n                .orderby(column(\"COL1\"));\n\n        final List<Map<String, ResultColumn>> result = engine.query(query);\n\n        //check if only the 1st and the 5th were changed.\n        assertEquals(\"update1\", result.get(0).get(\"COL5\").toString());\n        assertEquals(\"xpto\", result.get(1).get(\"COL5\").toString());\n        assertEquals(\"xpto\", result.get(2).get(\"COL5\").toString());\n        assertEquals(\"teste\", result.get(3).get(\"COL5\").toString());\n        assertEquals(\"update2\", result.get(4).get(\"COL5\").toString());\n    }\n\n    @Test\n    public void deleteTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5)\n                .build());\n\n        engine.executeUpdate(\n                delete(table(\"TEST\"))\n        );\n    }\n\n    @Test\n    public void deleteWithWhereTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5)\n                .build());\n\n        engine.executeUpdate(\n                delete(table(\"TEST\"))\n                        .where(eq(column(\"COL1\"), k(5)))\n        );\n    }\n\n    @Test\n    public void deleteCheckReturnTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5)\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 6)\n                .build());\n\n        int rowsDeleted = engine.executeUpdate(\n                delete(table(\"TEST\"))\n        );\n\n        assertEquals(2, rowsDeleted);\n    }\n\n    @Test\n    public void executePreparedStatementTest() throws DatabaseEngineException, NameAlreadyExistsException, ConnectionResetException {\n        create5ColumnsEntity();\n\n        EntityEntry ee = entry()\n                .set(\"COL1\", 1)\n                .set(\"COL2\", true)\n                .build();\n\n        engine.persist(\"TEST\", ee);\n\n        String ec = engine.escapeCharacter();\n        engine.createPreparedStatement(\"test\", \"SELECT * FROM \" + quotize(\"TEST\", ec) + \" WHERE \" + quotize(\"COL1\", ec) + \" = ?\");\n        engine.setParameters(\"test\", 1);\n        engine.executePS(\"test\");\n        List<Map<String, ResultColumn>> res = engine.getPSResultSet(\"test\");\n\n        assertEquals(\"col1 ok?\", 1, (int) res.get(0).get(\"COL1\").toInt());\n        assertTrue(\"col2 ok?\", res.get(0).get(\"COL2\").toBoolean());\n    }\n\n    @Test\n    public void executePreparedStatementUpdateTest() throws DatabaseEngineException, NameAlreadyExistsException, ConnectionResetException {\n        create5ColumnsEntity();\n\n        EntityEntry ee = entry()\n                .set(\"COL1\", 1)\n                .set(\"COL2\", true)\n                .build();\n\n        engine.persist(\"TEST\", ee);\n\n        engine.createPreparedStatement(\"test\", update(table(\"TEST\")).set(eq(column(\"COL1\"), lit(\"?\"))));\n        engine.setParameters(\"test\", 2);\n        engine.executePSUpdate(\"test\");\n\n        List<Map<String, ResultColumn>> res = engine.query(\"SELECT * FROM \" + quotize(\"TEST\", engine.escapeCharacter()));\n\n        assertEquals(\"col1 ok?\", 2, (int) res.get(0).get(\"COL1\").toInt());\n        assertTrue(\"col2 ok?\", res.get(0).get(\"COL2\").toBoolean());\n    }\n\n    @Test\n    public void metadataTest() throws DatabaseEngineException {\n        DbEntity entity =\n                dbEntity()\n                        .name(\"TEST\")\n                        .addColumn(\"COL1\", INT)\n                        .addColumn(\"COL2\", BOOLEAN)\n                        .addColumn(\"COL3\", DOUBLE)\n                        .addColumn(\"COL4\", LONG)\n                        .addColumn(\"COL5\", STRING)\n                        .addColumn(\"COL6\", BLOB)\n                        .build();\n\n        engine.addEntity(entity);\n\n        final Map<String, DbColumnType> metaMap = new LinkedHashMap<>();\n        metaMap.put(\"COL1\", INT);\n        metaMap.put(\"COL2\", BOOLEAN);\n        metaMap.put(\"COL3\", DOUBLE);\n        metaMap.put(\"COL4\", LONG);\n        metaMap.put(\"COL5\", STRING);\n        metaMap.put(\"COL6\", BLOB);\n\n        assertEquals(\"meta ok?\", metaMap, engine.getMetadata(\"TEST\"));\n    }\n\n    @Test\n    public void getMetadataOnATableThatDoesNotExistTest() throws DatabaseEngineException {\n        assertTrue(\"get metadata on table that does not exist is empty\", engine.getMetadata(\"TableThatDoesNotExist\").isEmpty());\n    }\n\n    @Test\n    public void testSqlInjection1() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        EntityEntry entry = entry().set(\"COL1\", 2).set(\"COL2\", false).set(\"COL3\", 2D).set(\"COL4\", 3L).set(\"COL5\", \"ADEUS\")\n                .build();\n        engine.persist(\"TEST\", entry);\n        entry = entry().set(\"COL1\", 2).set(\"COL2\", false).set(\"COL3\", 2D).set(\"COL4\", 3L).set(\"COL5\", \"ADEUS2\")\n                .build();\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> result = engine.query(select(all()).from(table(\"TEST\")).where(eq(column(\"COL5\"), k(\"ADEUS' or 1 = 1 \" + engine.commentCharacter()))));\n\n        assertEquals(\"Testing sql injection\", 0, result.size());\n    }\n\n    @Test\n    public void testBlob() throws Exception {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", STRING)\n                .addColumn(\"COL2\", BLOB)\n                .build();\n\n        engine.addEntity(entity);\n\n        EntityEntry entry = entry().set(\"COL1\", \"CENINHAS\").set(\"COL2\", new BlobTest(1, \"name\"))\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(new BlobTest(1, \"name\"), result.get(0).get(\"COL2\").<BlobTest>toBlob());\n\n        BlobTest updBlob = new BlobTest(2, \"cenas\");\n\n        final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        final ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(updBlob);\n\n        Update upd = update(table(\"TEST\")).set(eq(column(\"COL2\"), lit(\"?\"))).where(eq(column(\"COL1\"), k(\"CENINHAS\")));\n\n        engine.createPreparedStatement(\"testBlob\", upd);\n\n        engine.setParameters(\"testBlob\", bos.toByteArray());\n\n        engine.executePSUpdate(\"testBlob\");\n\n        result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(updBlob, result.get(0).get(\"COL2\").<BlobTest>toBlob());\n    }\n\n    @Test\n    public void testBlobSettingWithIndexTest() throws Exception {\n        DbEntity entity = dbEntity().name(\"TEST\").addColumn(\"COL1\", STRING).addColumn(\"COL2\", BLOB)\n                .build();\n        engine.addEntity(entity);\n        EntityEntry entry = entry().set(\"COL1\", \"CENINHAS\").set(\"COL2\", new BlobTest(1, \"name\"))\n                .build();\n        engine.persist(\"TEST\", entry);\n        List<Map<String, ResultColumn>> result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(new BlobTest(1, \"name\"), result.get(0).get(\"COL2\").<BlobTest>toBlob());\n\n        BlobTest updBlob = new BlobTest(2, \"cenas\");\n\n        final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        final ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(updBlob);\n\n        Update upd = update(table(\"TEST\")).set(eq(column(\"COL2\"), lit(\"?\"))).where(eq(column(\"COL1\"), k(\"CENINHAS\")));\n        engine.createPreparedStatement(\"testBlob\", upd);\n        engine.setParameter(\"testBlob\", 1, bos.toByteArray());\n        engine.executePSUpdate(\"testBlob\");\n        result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(updBlob, result.get(0).get(\"COL2\").<BlobTest>toBlob());\n    }\n\n    @Test\n    public void testBlobByteArray() throws Exception {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", STRING)\n                .addColumn(\"COL2\", BLOB)\n                .build();\n\n        engine.addEntity(entity);\n\n        // 10 mb\n        byte[] bb = new byte[1024 * 1024 * 10];\n        byte[] bb2 = new byte[1024 * 1024 * 10];\n        for (int i = 0; i < bb.length; i++) {\n            bb[i] = (byte) (Math.random() * 128);\n            bb2[i] = (byte) (Math.random() * 64);\n        }\n\n        EntityEntry entry = entry().set(\"COL1\", \"CENINHAS\").set(\"COL2\", bb)\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertArrayEquals(bb, result.get(0).get(\"COL2\").toBlob());\n\n\n        Update upd = update(table(\"TEST\")).set(eq(column(\"COL2\"), lit(\"?\"))).where(eq(column(\"COL1\"), k(\"CENINHAS\")));\n\n        engine.createPreparedStatement(\"upd\", upd);\n\n        final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        final ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(bb2);\n\n        engine.setParameters(\"upd\", bos.toByteArray());\n\n        engine.executePSUpdate(\"upd\");\n\n        result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertArrayEquals(bb2, result.get(0).get(\"COL2\").toBlob());\n\n    }\n\n    @Test\n    public void testBlobString() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", STRING)\n                .addColumn(\"COL2\", BLOB)\n                .build();\n\n        engine.addEntity(entity);\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 4000; i++) {\n            sb.append(\"a\");\n        }\n\n        String bigString = sb.toString();\n        EntityEntry entry = entry().set(\"COL1\", \"CENINHAS\").set(\"COL2\", bigString)\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(bigString, result.get(0).get(\"COL2\").<String>toBlob());\n    }\n\n    @Test\n    public void testBlobJSON() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", STRING)\n                .addColumn(\"COL2\", BLOB)\n                .build();\n\n        engine.addEntity(entity);\n\n        String bigString = \"[{\\\"type\\\":\\\"placeholder\\\",\\\"conf\\\":{},\\\"row\\\":0,\\\"height\\\":280,\\\"width\\\":12}]\";\n        EntityEntry entry = entry().set(\"COL1\", \"CENINHAS\").set(\"COL2\", bigString)\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(bigString, result.get(0).get(\"COL2\").<String>toBlob());\n    }\n\n    @Test\n    public void addDropColumnWithDropCreateTest() throws DatabaseEngineException {\n        DbEntity.Builder entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"USER\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\");\n        engine.addEntity(entity\n                .build());\n        Map<String, DbColumnType> test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(BOOLEAN, test.get(\"COL2\"));\n        assertEquals(DOUBLE, test.get(\"USER\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n\n        EntityEntry entry = entry().set(\"COL1\", 1).set(\"COL2\", true).set(\"USER\", 2d).set(\"COL4\", 1L).set(\"COL5\", \"c\")\n                .build();\n        engine.persist(\"TEST\", entry);\n\n        entity.removeColumn(\"USER\");\n        entity.removeColumn(\"COL2\");\n        engine.updateEntity(entity\n                .build());\n\n        // as the fields were removed the entity mapping ignores the fields.\n        entry = entry().set(\"COL1\", 2).set(\"COL2\", true).set(\"COL3\", 2d).set(\"COL4\", 1L).set(\"COL5\", \"c\")\n                .build();\n        engine.persist(\"TEST\", entry);\n\n\n        test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n\n        entity.addColumn(\"COL6\", BLOB).addColumn(\"COL7\", DOUBLE);\n        engine.updateEntity(entity\n                .build());\n\n        entry = entry().set(\"COL1\", 3).set(\"COL2\", true).set(\"USER\", 2d).set(\"COL4\", 1L).set(\"COL5\", \"c\").set(\"COL6\", new BlobTest(1, \"\")).set(\"COL7\", 2d)\n                .build();\n        engine.persist(\"TEST\", entry);\n\n        test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n        assertEquals(BLOB, test.get(\"COL6\"));\n        assertEquals(DOUBLE, test.get(\"COL7\"));\n\n    }\n\n    @Test\n    public void addDropColumnTest() throws Exception {\n        // First drop-create\n        DbEntity.Builder entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"USER\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\");\n        engine.addEntity(entity.build());\n        Map<String, DbColumnType> test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(BOOLEAN, test.get(\"COL2\"));\n        assertEquals(DOUBLE, test.get(\"USER\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n\n        // Clone the connection with the create now.\n        final DatabaseEngine engine2 = this.engine.duplicate(new Properties() {\n            {\n                setProperty(SCHEMA_POLICY, \"create\");\n            }\n        }, true);\n\n        EntityEntry entry = entry().set(\"COL1\", 1).set(\"COL2\", true).set(\"USER\", 2d).set(\"COL4\", 1L).set(\"COL5\", \"c\")\n                .build();\n        engine2.persist(\"TEST\", entry);\n\n        entity.removeColumn(\"USER\");\n        entity.removeColumn(\"COL2\");\n        engine2.updateEntity(entity.build());\n\n        // as the fields were removed the entity mapping ignores the fields.\n        System.out.println(\"> \" + engine2.getMetadata(\"TEST\"));\n        entry = entry().set(\"COL1\", 2).set(\"COL2\", true).set(\"COL3\", 2d).set(\"COL4\", 1L).set(\"COL5\", \"c\")\n                .build();\n        engine2.persist(\"TEST\", entry);\n\n\n        test = engine2.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n\n        entity.addColumn(\"COL6\", BLOB).addColumn(\"COL7\", DOUBLE);\n        engine2.updateEntity(entity.build());\n\n        entry = entry().set(\"COL1\", 3).set(\"COL2\", true).set(\"USER\", 2d).set(\"COL4\", 1L).set(\"COL5\", \"c\").set(\"COL6\", new BlobTest(1, \"\")).set(\"COL7\", 2d)\n                .build();\n        engine2.persist(\"TEST\", entry);\n\n        test = engine2.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n        assertEquals(BLOB, test.get(\"COL6\"));\n        assertEquals(DOUBLE, test.get(\"COL7\"));\n\n    }\n\n    /**\n     * Tests that {@link AbstractDatabaseEngine#updateEntity(DbEntity)} with a \"none\" schema policy\n     * still creates the in-memory {@link MappedEntity} with the prepared statements for the entities.\n     */\n    @Test\n    public void updateEntityNoneSchemaPolicyCreatesInMemoryPreparedStmtsTest() throws DatabaseEngineException, DatabaseFactoryException {\n        dropSilently(\"TEST\");\n        engine.removeEntity(\"TEST\");\n\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\")\n                .build();\n\n        engine.addEntity(entity);\n\n        properties.setProperty(SCHEMA_POLICY, \"none\");\n        DatabaseEngine schemaNoneEngine = DatabaseFactory.getConnection(properties);\n\n        EntityEntry entry = entry()\n                .set(\"COL1\", 1)\n                .set(\"COL2\", true)\n                .set(\"COL3\", 1d)\n                .set(\"COL4\", 1L)\n                .set(\"COL5\", \"1\")\n                .build();\n\n        try {\n            schemaNoneEngine.persist(entity.getName(), entry);\n            fail(\"Should throw an exception if trying to persist an entity before calling addEntity/updateEntity a first time\");\n        } catch (final DatabaseEngineException e) {\n            assertTrue(\"Should fail because the entity is still unknown to this DatabaseEngine instance\",\n                e.getMessage().contains(\"Unknown entity\"));\n        }\n\n        schemaNoneEngine.updateEntity(entity);\n\n        assertTrue(\"DatabaseEngine should be aware of the entity even with a NONE schema policy.\", schemaNoneEngine.containsEntity(entity.getName()));\n\n        // Persist the entry and make sure it was successful\n        schemaNoneEngine.persist(entity.getName(), entry);\n        List<Map<String, ResultColumn>> result = schemaNoneEngine.query(select(all()).from(table(\"TEST\")));\n\n        assertEquals(\"There should be only one entry in the table.\", 1, result.size());\n\n        Map<String, ResultColumn> resultEntry = result.get(0);\n\n        assertEquals(\"COL1 was successfully inserted\", 1, resultEntry.get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL2 was successfully inserted\", true, resultEntry.get(\"COL2\").toBoolean());\n        assertEquals(\"COL3 was successfully inserted\", 1.0, resultEntry.get(\"COL3\").toDouble(), 0);\n        assertEquals(\"COL4 was successfully inserted\", 1L, resultEntry.get(\"COL4\").toLong().longValue());\n        assertEquals(\"COL5 was successfully inserted\", \"1\", resultEntry.get(\"COL5\").toString());\n    }\n\n    /**\n     * Tests that {@link AbstractDatabaseEngine#updateEntity(DbEntity)} with a \"none\" schema policy\n     * doesn't execute DDL.\n     */\n    @Test\n    public void updateEntityNoneSchemaPolicyDoesntExecuteDDL() throws DatabaseFactoryException {\n        dropSilently(\"TEST\");\n\n        properties.setProperty(SCHEMA_POLICY, \"none\");\n        DatabaseEngine schemaNoneEngine = DatabaseFactory.getConnection(properties);\n\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\")\n                .build();\n\n        try {\n            schemaNoneEngine.updateEntity(entity);\n            schemaNoneEngine.query(select(all()).from(table(entity.getName())));\n            fail(\"Should have failed because updateEntity with schema policy NONE doesn't execute DDL\");\n        } catch (final DatabaseEngineException e) {\n            // Should fail because because updateEntity with schema policy NONE doesn't execute DDL\n        }\n    }\n\n    @Test\n    public void addDropColumnNonExistentDropCreateTest() throws DatabaseEngineException {\n        dropSilently(\"TEST\");\n        engine.removeEntity(\"TEST\");\n\n        DbEntity.Builder entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\");\n        engine.updateEntity(entity.build());\n\n        Map<String, DbColumnType> test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(BOOLEAN, test.get(\"COL2\"));\n        assertEquals(DOUBLE, test.get(\"COL3\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n\n        dropSilently(\"TEST\");\n        engine.removeEntity(\"TEST\");\n\n        entity.removeColumn(\"COL3\");\n        entity.removeColumn(\"COL2\");\n        engine.updateEntity(entity\n                .build());\n\n        test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n\n        dropSilently(\"TEST\");\n        engine.removeEntity(\"TEST\");\n\n        entity.addColumn(\"COL6\", BLOB).addColumn(\"COL7\", DOUBLE, DbColumnConstraint.NOT_NULL);\n        engine.updateEntity(entity\n                .build());\n\n        test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n        assertEquals(BLOB, test.get(\"COL6\"));\n        assertEquals(DOUBLE, test.get(\"COL7\"));\n    }\n\n    @Test\n    public void addDropColumnNonExistentTest() throws Exception {\n        dropSilently(\"TEST\");\n        engine.removeEntity(\"TEST\");\n\n        DatabaseEngine engine = this.engine.duplicate(new Properties() {\n            {\n                setProperty(SCHEMA_POLICY, \"create\");\n            }\n        }, true);\n\n        DbEntity.Builder entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .pkFields(\"COL1\");\n        engine.updateEntity(entity.build());\n\n        Map<String, DbColumnType> test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(BOOLEAN, test.get(\"COL2\"));\n        assertEquals(DOUBLE, test.get(\"COL3\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n\n        dropSilently(\"TEST\");\n        engine.removeEntity(\"TEST\");\n\n        entity.removeColumn(\"COL3\");\n        entity.removeColumn(\"COL2\");\n        engine.updateEntity(entity.build());\n\n        test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n\n        dropSilently(\"TEST\");\n        engine.removeEntity(\"TEST\");\n\n        entity.addColumn(\"COL6\", BLOB).addColumn(\"COL7\", DOUBLE, DbColumnConstraint.NOT_NULL);\n        engine.updateEntity(entity.build());\n\n        test = engine.getMetadata(\"TEST\");\n        assertEquals(INT, test.get(\"COL1\"));\n        assertEquals(LONG, test.get(\"COL4\"));\n        assertEquals(STRING, test.get(\"COL5\"));\n        assertEquals(BLOB, test.get(\"COL6\"));\n        assertEquals(DOUBLE, test.get(\"COL7\"));\n    }\n\n    @Test\n    public void testInsertNullCLOB() throws Exception {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", STRING)\n                .addColumn(\"COL2\", CLOB)\n                .build();\n        engine.addEntity(entity);\n\n\n        EntityEntry entry = entry().set(\"COL1\", \"CENINHAS\")\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        System.out.println(result.get(0).get(\"COL2\"));\n        assertNull(result.get(0).get(\"COL2\").toString());\n    }\n\n\n    @Test\n    public void testCLOB() throws Exception {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", STRING)\n                .addColumn(\"COL2\", CLOB)\n                .build();\n\n        engine.addEntity(entity);\n\n        StringBuilder sb = new StringBuilder();\n        StringBuilder sb1 = new StringBuilder();\n        for (int x = 0; x < 500000; x++) {\n            sb.append(x);\n            sb1.append(x * 2);\n        }\n        String initialClob = sb.toString();\n        String updateClob = sb1.toString();\n\n        EntityEntry entry = entry().set(\"COL1\", \"CENINHAS\").set(\"COL2\", initialClob)\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> result = engine.query(select(all()).from(table(\"TEST\")));\n\n\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(initialClob, result.get(0).get(\"COL2\").toString());\n\n        Update upd = update(table(\"TEST\")).set(eq(column(\"COL2\"), lit(\"?\"))).where(eq(column(\"COL1\"), k(\"CENINHAS\")));\n\n        engine.createPreparedStatement(\"upd\", upd);\n\n        engine.setParameters(\"upd\", updateClob);\n\n        engine.executePSUpdate(\"upd\");\n\n        result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(updateClob, result.get(0).get(\"COL2\").toString());\n\n    }\n\n    @Test\n    public void testCLOBEncoding() throws Exception {\n        DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", STRING)\n                .addColumn(\"COL2\", CLOB)\n                .build();\n\n        engine.addEntity(entity);\n\n        String initialClob = \"\u00e1\u00e3\u00e7\";\n        String updateClob = \"\u00e1\u00e3\u00e7_\u00e1\u00e3\u00e7\";\n\n        EntityEntry entry = entry().set(\"COL1\", \"CENINHAS\").set(\"COL2\", initialClob)\n                .build();\n\n        engine.persist(\"TEST\", entry);\n\n        List<Map<String, ResultColumn>> result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(initialClob, result.get(0).get(\"COL2\").toString());\n\n        Update upd = update(table(\"TEST\")).set(eq(column(\"COL2\"), lit(\"?\"))).where(eq(column(\"COL1\"), k(\"CENINHAS\")));\n\n        engine.createPreparedStatement(\"upd\", upd);\n\n        engine.setParameters(\"upd\", updateClob);\n\n        engine.executePSUpdate(\"upd\");\n\n        result = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"CENINHAS\", result.get(0).get(\"COL1\").toString());\n        assertEquals(updateClob, result.get(0).get(\"COL2\").toString());\n\n    }\n\n    @Test\n    public void testPersistOverrideAutoIncrement() throws Exception {\n        DbEntity entity = dbEntity()\n                .name(\"MYTEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", STRING)\n                .build();\n\n\n        engine.addEntity(entity);\n\n        EntityEntry ent = entry().set(\"COL2\", \"CENAS1\")\n                .build();\n        engine.persist(\"MYTEST\", ent);\n        ent = entry().set(\"COL2\", \"CENAS2\")\n                .build();\n        engine.persist(\"MYTEST\", ent);\n\n        ent = entry().set(\"COL2\", \"CENAS3\").set(\"COL1\", 3)\n                .build();\n        engine.persist(\"MYTEST\", ent, false);\n\n        ent = entry().set(\"COL2\", \"CENAS5\").set(\"COL1\", 5)\n                .build();\n        engine.persist(\"MYTEST\", ent, false);\n\n\n        ent = entry().set(\"COL2\", \"CENAS6\")\n                .build();\n        engine.persist(\"MYTEST\", ent);\n\n        ent = entry().set(\"COL2\", \"CENAS7\")\n                .build();\n        engine.persist(\"MYTEST\", ent);\n\n        final List<Map<String, ResultColumn>> query = engine.query(\"SELECT * FROM \" + quotize(\"MYTEST\", engine.escapeCharacter()));\n        for (Map<String, ResultColumn> stringResultColumnMap : query) {\n            assertTrue(stringResultColumnMap.get(\"COL2\").toString().endsWith(stringResultColumnMap.get(\"COL1\").toString()));\n        }\n        engine.close();\n    }\n\n    @Test\n    public void testPersistOverrideAutoIncrement2() throws Exception {\n        String APP_ID = \"APP_ID\";\n        DbColumn APP_ID_COLUMN = new DbColumn.Builder().name(APP_ID).type(INT).build();\n        String STM_TABLE = \"FDZ_APP_STREAM\";\n        String STM_ID = \"STM_ID\";\n        String STM_NAME = \"STM_NAME\";\n        DbEntity STREAM = dbEntity().name(STM_TABLE)\n                .addColumn(APP_ID_COLUMN)\n                .addColumn(STM_ID, INT, true)\n                .addColumn(STM_NAME, STRING, NOT_NULL)\n                .pkFields(STM_ID, APP_ID)\n                .build();\n\n        engine.addEntity(STREAM);\n\n        EntityEntry ent = entry().set(APP_ID, 1).set(STM_ID, 1).set(STM_NAME, \"NAME1\")\n                .build();\n        engine.persist(STM_TABLE, ent);\n\n        ent = entry().set(APP_ID, 2).set(STM_ID, 1).set(STM_NAME, \"NAME1\")\n                .build();\n        engine.persist(STM_TABLE, ent, false);\n\n        ent = entry().set(APP_ID, 2).set(STM_ID, 2).set(STM_NAME, \"NAME2\")\n                .build();\n        engine.persist(STM_TABLE, ent);\n\n        ent = entry().set(APP_ID, 1).set(STM_ID, 10).set(STM_NAME, \"NAME10\")\n                .build();\n        engine.persist(STM_TABLE, ent, false);\n\n        ent = entry().set(APP_ID, 1).set(STM_ID, 2).set(STM_NAME, \"NAME11\")\n                .build();\n        engine.persist(STM_TABLE, ent);\n\n        ent = entry().set(APP_ID, 2).set(STM_ID, 11).set(STM_NAME, \"NAME11\")\n                .build();\n        engine.persist(STM_TABLE, ent, false);\n\n        final List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(STM_TABLE)));\n        for (Map<String, ResultColumn> stringResultColumnMap : query) {\n            System.out.println(stringResultColumnMap);\n            assertTrue(\"Assert Stream Name with id\", stringResultColumnMap.get(STM_NAME).toString().endsWith(stringResultColumnMap.get(STM_ID).toString()));\n        }\n\n    }\n\n    @Test\n    public void testPersistOverrideAutoIncrement3() throws Exception {\n        DbEntity entity = dbEntity()\n                .name(\"MYTEST\")\n                .addColumn(\"COL1\", INT, true)\n                .addColumn(\"COL2\", STRING)\n                .build();\n\n\n        engine.addEntity(entity);\n\n        EntityEntry ent = entry().set(\"COL2\", \"CENAS1\").set(\"COL1\", 1)\n                .build();\n        engine.persist(\"MYTEST\", ent, false);\n\n        ent = entry().set(\"COL2\", \"CENAS2\")\n                .build();\n        engine.persist(\"MYTEST\", ent);\n\n\n        ent = entry().set(\"COL2\", \"CENAS5\").set(\"COL1\", 5)\n                .build();\n        engine.persist(\"MYTEST\", ent, false);\n\n        ent = entry().set(\"COL2\", \"CENAS6\")\n                .build();\n        engine.persist(\"MYTEST\", ent);\n\n        final List<Map<String, ResultColumn>> query = engine.query(\"SELECT * FROM \" + quotize(\"MYTEST\", engine.escapeCharacter()));\n        for (Map<String, ResultColumn> stringResultColumnMap : query) {\n            System.out.println(stringResultColumnMap);\n            assertTrue(stringResultColumnMap.get(\"COL2\").toString().endsWith(stringResultColumnMap.get(\"COL1\").toString()));\n        }\n        engine.close();\n    }\n\n    @Test\n    public void testTruncateTable() throws Exception {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5)\n                .build());\n\n        Truncate truncate = new Truncate(table(\"TEST\"));\n\n        engine.executeUpdate(truncate);\n\n        final List<Map<String, ResultColumn>> test = engine.query(select(all()).from(table(\"TEST\")));\n        assertTrue(\"Test truncate query empty?\", test.isEmpty());\n\n    }\n\n    @Test\n    public void testRenameTables() throws Exception {\n        String oldName = \"TBL_OLD\";\n        String newName = \"TBL_NEW\";\n\n        // Drop tables for sanity.\n        dropSilently(oldName, newName);\n\n        // Create the \"old\" table.\n        DbEntity entity = dbEntity()\n                .name(oldName)\n                .addColumn(\"timestamp\", INT)\n                .build();\n        engine.addEntity(entity);\n        engine.persist(oldName, entry().set(\"timestamp\", 20)\n                .build());\n\n        // Rename it\n        Rename rename = new Rename(table(oldName), table(newName));\n        engine.executeUpdate(rename);\n\n        // Check whether the schema matches\n        final Map<String, DbColumnType> metaMap = new LinkedHashMap<>();\n        metaMap.put(\"timestamp\", INT);\n        assertEquals(\"Metamap ok?\", metaMap, engine.getMetadata(newName));\n\n        // Check the data\n        List<Map<String, ResultColumn>> resultSet = engine.query(select(all()).from(table(newName)));\n        assertEquals(\"Count ok?\", 1, resultSet.size());\n\n        assertEquals(\"Content ok?\", 20, (int) resultSet.get(0).get(\"timestamp\").toInt());\n\n        dropSilently(newName);\n    }\n\n    /**\n     * Drops a list of tables silently (i.e. if it fails, it will just keep on).\n     *\n     * @param tables The tables that we want to drop.\n     */\n    private void dropSilently(String... tables) {\n        for (String table : tables) {\n            try {\n                engine.dropEntity(dbEntity().name(table).build());\n            } catch (final Throwable e) {\n                // ignore\n            }\n        }\n    }\n\n    @Test\n    public void testLikeWithTransformation() throws Exception {\n        create5ColumnsEntity();\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5).set(\"COL5\", \"TESTE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5).set(\"COL5\", \"TeStE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 5).set(\"COL5\", \"tesTte\")\n                .build());\n\n        List<Map<String, ResultColumn>> query = engine.query(\n            select(all()).from(table(\"TEST\")).where(like(udf(\"lower\", column(\"COL5\")), k(\"%teste%\")))\n        );\n        assertEquals(3, query.size());\n        query = engine.query(select(all()).from(table(\"TEST\")).where(like(udf(\"lower\", column(\"COL5\")), k(\"%tt%\"))));\n        assertEquals(1, query.size());\n\n    }\n\n    @Test\n    public void createSequenceOnLongColumnTest() throws Exception {\n        DbEntity entity =\n                dbEntity()\n                        .name(\"TEST\")\n                        .addColumn(\"COL1\", INT)\n                        .addColumn(\"COL2\", BOOLEAN)\n                        .addColumn(\"COL3\", DOUBLE)\n                        .addColumn(\"COL4\", LONG, true)\n                        .addColumn(\"COL5\", STRING)\n                        .build();\n        engine.addEntity(entity);\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", true)\n                .build());\n        List<Map<String, ResultColumn>> test = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"col1 ok?\", 1, (int) test.get(0).get(\"COL1\").toInt());\n        assertTrue(\"col2 ok?\", test.get(0).get(\"COL2\").toBoolean());\n        assertEquals(\"col4 ok?\", 1L, (long) test.get(0).get(\"COL4\").toLong());\n\n    }\n\n    @Test\n    public void insertWithNoAutoIncAndThatResumeTheAutoIncTest() throws DatabaseEngineException {\n        DbEntity entity =\n                dbEntity()\n                        .name(\"TEST\")\n                        .addColumn(\"COL1\", INT)\n                        .addColumn(\"COL2\", BOOLEAN)\n                        .addColumn(\"COL3\", DOUBLE)\n                        .addColumn(\"COL4\", LONG, true)\n                        .addColumn(\"COL5\", STRING)\n                        .build();\n        engine.addEntity(entity);\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", true)\n                .build());\n        List<Map<String, ResultColumn>> test = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL4\")));\n        assertEquals(\"col4 ok?\", 1L, (long) test.get(0).get(\"COL4\").toLong());\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", true).set(\"COL4\", 2)\n                .build(), false);\n        test = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL4\")));\n        assertEquals(\"col4 ok?\", 2L, (long) test.get(1).get(\"COL4\").toLong());\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", true).build());\n        test = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL4\")));\n        assertEquals(\"col4 ok?\", 3L, (long) test.get(2).get(\"COL4\").toLong());\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", true).set(\"COL4\", 4)\n                .build(), false);\n        test = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL4\")));\n        assertEquals(\"col4 ok?\", 4L, (long) test.get(3).get(\"COL4\").toLong());\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", true)\n                .build());\n        test = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL4\")));\n        assertEquals(\"col4 ok?\", 5L, (long) test.get(4).get(\"COL4\").toLong());\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", true).set(\"COL4\", 6)\n                .build(), false);\n        test = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL4\")));\n        assertEquals(\"col4 ok?\", 6L, (long) test.get(5).get(\"COL4\").toLong());\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", true).set(\"COL4\", 7)\n                .build(), false);\n        test = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL4\")));\n        assertEquals(\"col4 ok?\", 7L, (long) test.get(6).get(\"COL4\").toLong());\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL2\", true)\n                .build());\n        test = engine.query(select(all()).from(table(\"TEST\")).orderby(column(\"COL4\")));\n        assertEquals(\"col4 ok?\", 8L, (long) test.get(7).get(\"COL4\").toLong());\n    }\n\n    /**\n     * Creates a {@link DbEntity} with 5 columns to be used in the tests.\n     *\n     * @throws DatabaseEngineException If something goes wrong creating the entity.\n     */\n    private void create5ColumnsEntity() throws DatabaseEngineException {\n        final DbEntity entity = dbEntity()\n                .name(\"TEST\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", BOOLEAN)\n                .addColumn(\"COL3\", DOUBLE)\n                .addColumn(\"COL4\", LONG)\n                .addColumn(\"COL5\", STRING)\n                .build();\n\n        engine.addEntity(entity);\n    }\n\n    /**\n     * Creates a {@link DbEntity} with 5 columns being the first the primary key to be used in the tests.\n     *\n     * @throws DatabaseEngineException If something goes wrong creating the entity.\n     */\n    private void create5ColumnsEntityWithPrimaryKey() throws DatabaseEngineException {\n        final DbEntity entity = dbEntity().name(\"TEST\")\n                                          .addColumn(\"COL1\", INT)\n                                          .addColumn(\"COL2\", BOOLEAN)\n                                          .addColumn(\"COL3\", DOUBLE)\n                                          .addColumn(\"COL4\", LONG)\n                                          .addColumn(\"COL5\", STRING)\n                                          .pkFields(\"COL1\")\n                                          .build();\n\n        engine.addEntity(entity);\n    }\n\n    protected void userRolePermissionSchema() throws DatabaseEngineException {\n        DbEntity entity = dbEntity()\n                .name(\"USER\")\n                .addColumn(\"COL1\", INT, true)\n                .pkFields(\"COL1\")\n                .build();\n\n        engine.addEntity(entity);\n\n        entity = dbEntity()\n                .name(\"ROLE\")\n                .addColumn(\"COL1\", INT, true)\n                .pkFields(\"COL1\")\n                .build();\n\n        engine.addEntity(entity);\n\n        entity = dbEntity()\n                .name(\"USER_ROLE\")\n                .addColumn(\"COL1\", INT)\n                .addColumn(\"COL2\", INT)\n                .addFk(dbFk()\n                                .addColumn(\"COL1\")\n                                .referencedTable(\"USER\")\n                                .addReferencedColumn(\"COL1\")\n                                .build(),\n                        dbFk()\n                                .addColumn(\"COL2\")\n                                .referencedTable(\"ROLE\")\n                                .addReferencedColumn(\"COL1\")\n                                .build()\n                )\n                .pkFields(\"COL1\", \"COL2\")\n                .build();\n\n        engine.addEntity(entity);\n    }\n\n    @Test\n    public void testAndWhere() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"TESTE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"TeStE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"tesTte\")\n                .build());\n\n        final List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table(\"TEST\")).where(eq(column(\"COL1\"), k(1))).andWhere(eq(column(\"COL5\"), k(\"teste\"))));\n\n        assertEquals(\"Resultset must have only one result\", 1, query.size());\n        assertEquals(\"COL1 must be 1\", 1, query.get(0).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be teste\", \"teste\", query.get(0).get(\"COL5\").toString());\n    }\n\n    @Test\n    public void testAndWhereMultiple() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"TESTE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"TeStE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"tesTte\")\n                .build());\n\n        final List<Map<String, ResultColumn>> query = engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                or(\n                                        eq(column(\"COL1\"), k(1)),\n                                        eq(column(\"COL1\"), k(4))\n                                )\n                        )\n                        .andWhere(\n                                or(\n                                        eq(column(\"COL5\"), k(\"teste\")),\n                                        eq(column(\"COL5\"), k(\"TESTE\"))\n                                )\n                        )\n        );\n\n        assertEquals(\"Resultset must have only one result\", 1, query.size());\n        assertEquals(\"COL1 must be 1\", 1, query.get(0).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be teste\", \"teste\", query.get(0).get(\"COL5\").toString());\n    }\n\n    @Test\n    public void testAndWhereMultipleCheckAndEnclosed() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"TESTE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 3).set(\"COL5\", \"TeStE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 4).set(\"COL5\", \"tesTte\")\n                .build());\n\n        final List<Map<String, ResultColumn>> query = engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(\n                                or(\n                                        eq(column(\"COL1\"), k(1)),\n                                        eq(column(\"COL1\"), k(4))\n                                )\n                        )\n                        .andWhere(\n                                or(\n                                        eq(column(\"COL5\"), k(\"teste\")),\n                                        eq(column(\"COL5\"), k(\"tesTte\"))\n                                )\n                        )\n        );\n\n        assertEquals(\"Resultset must have only one result\", 2, query.size());\n        assertEquals(\"COL1 must be 1\", 1, query.get(0).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be teste\", \"teste\", query.get(0).get(\"COL5\").toString());\n        assertEquals(\"COL1 must be 1\", 4, query.get(1).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be teste\", \"tesTte\", query.get(1).get(\"COL5\").toString());\n    }\n\n    @Test\n    public void testStringAgg() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"TESTE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"TeStE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"tesTte\")\n                .build());\n\n        final List<Map<String, ResultColumn>> query = engine.query(\n                select(column(\"COL1\"), stringAgg(column(\"COL5\")).alias(\"agg\"))\n                        .from(table(\"TEST\"))\n                        .groupby(column(\"COL1\"))\n                        .orderby(column(\"COL1\").asc())\n        );\n\n        assertEquals(\"Resultset must have only 2 results\", 2, query.size());\n        assertEquals(\"COL1 must be 1\", 1, query.get(0).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be TESTE,teste\", \"TESTE,teste\", query.get(0).get(\"agg\").toString());\n        assertEquals(\"COL1 must be 2\", 2, query.get(1).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be TeStE,tesTte\", \"TeStE,tesTte\", query.get(1).get(\"agg\").toString());\n    }\n\n    @Test\n    public void testStringAggDelimiter() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"TESTE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"TeStE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"tesTte\")\n                .build());\n\n        final List<Map<String, ResultColumn>> query = engine.query(\n                select(column(\"COL1\"), stringAgg(column(\"COL5\")).delimiter(';').alias(\"agg\"))\n                        .from(table(\"TEST\"))\n                        .groupby(column(\"COL1\"))\n                        .orderby(column(\"COL1\").asc())\n        );\n\n        assertEquals(\"Resultset must have only 2 results\", 2, query.size());\n        assertEquals(\"COL1 must be 1\", 1, query.get(0).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be TESTE;teste\", \"TESTE;teste\", query.get(0).get(\"agg\").toString());\n        assertEquals(\"COL1 must be 2\", 2, query.get(1).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be TeStE;tesTte\", \"TeStE;tesTte\", query.get(1).get(\"agg\").toString());\n    }\n\n    @Test\n    public void testStringAggDistinct() throws DatabaseEngineException {\n        assumeTrue(\"This test is only valid for engines that support StringAggDistinct\",\n                this.engine.isStringAggDistinctCapable());\n\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"TeStE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"tesTte\")\n                .build());\n\n        final List<Map<String, ResultColumn>> query = engine.query(\n                select(column(\"COL1\"), stringAgg(column(\"COL5\")).distinct().alias(\"agg\"))\n                        .from(table(\"TEST\"))\n                        .groupby(column(\"COL1\"))\n                        .orderby(column(\"COL1\").asc())\n        );\n\n        assertEquals(\"Resultset must have only 2 results\", 2, query.size());\n        assertEquals(\"COL1 must be 1\", 1, query.get(0).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be teste\", \"teste\", query.get(0).get(\"agg\").toString());\n        assertEquals(\"COL1 must be 2\", 2, query.get(1).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be TeStE,tesTte\", \"TeStE,tesTte\", query.get(1).get(\"agg\").toString());\n    }\n\n    @Test\n    public void testStringAggNotStrings() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"TESTE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 1).set(\"COL5\", \"teste\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"TeStE\")\n                .build());\n        engine.persist(\"TEST\", entry().set(\"COL1\", 2).set(\"COL5\", \"tesTte\")\n                .build());\n\n        final List<Map<String, ResultColumn>> query = engine.query(\n                select(column(\"COL1\"), stringAgg(column(\"COL1\")).alias(\"agg\"))\n                        .from(table(\"TEST\"))\n                        .groupby(column(\"COL1\"))\n                        .orderby(column(\"COL1\").asc())\n        );\n\n        assertEquals(\"Resultset must have only 2 results\", 2, query.size());\n        assertEquals(\"COL1 must be 1\", 1, query.get(0).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be 1,1\", \"1,1\", query.get(0).get(\"agg\").toString());\n        assertEquals(\"COL1 must be 2\", 2, query.get(1).get(\"COL1\").toInt().intValue());\n        assertEquals(\"COL5 must be 2,2\", \"2,2\", query.get(1).get(\"agg\").toString());\n    }\n\n    @Test\n    @Category(SkipTestCockroachDB.class)\n    public void dropPrimaryKeyWithOneColumnTest() throws Exception {\n        DbEntity entity =\n                dbEntity()\n                        .name(\"TEST\")\n                        .addColumn(\"COL1\", INT)\n                        .addColumn(\"COL2\", BOOLEAN)\n                        .addColumn(\"COL3\", DOUBLE)\n                        .addColumn(\"COL4\", LONG)\n                        .addColumn(\"COL5\", STRING)\n                        .pkFields(\"COL1\")\n                        .build();\n        engine.addEntity(entity);\n        engine.executeUpdate(dropPK(table(\"TEST\")));\n    }\n\n    @Test\n    @Category(SkipTestCockroachDB.class)\n    public void dropPrimaryKeyWithTwoColumnsTest() throws Exception {\n        DbEntity entity =\n                dbEntity()\n                        .name(\"TEST\")\n                        .addColumn(\"COL1\", INT)\n                        .addColumn(\"COL2\", BOOLEAN)\n                        .addColumn(\"COL3\", DOUBLE)\n                        .addColumn(\"COL4\", LONG)\n                        .addColumn(\"COL5\", STRING)\n                        .pkFields(\"COL1\", \"COL4\")\n                        .build();\n        engine.addEntity(entity);\n        engine.executeUpdate(dropPK(table(\"TEST\")));\n    }\n\n    @Test\n    public void alterColumnWithConstraintTest() throws DatabaseEngineException {\n        DbEntity entity =\n                dbEntity()\n                        .name(\"TEST\")\n                        .addColumn(\"COL1\", INT)\n                        .addColumn(\"COL2\", BOOLEAN)\n                        .addColumn(\"COL3\", DOUBLE)\n                        .addColumn(\"COL4\", LONG)\n                        .addColumn(\"COL5\", STRING)\n                        .build();\n\n        engine.addEntity(entity);\n\n        engine.executeUpdate(new AlterColumn(table(\"TEST\"), new DbColumn.Builder().name(\"COL1\").type(DbColumnType.INT).addConstraint(DbColumnConstraint\n                .NOT_NULL)\n                .build()));\n    }\n\n    @Test\n    @Category(SkipTestCockroachDB.class)\n    public void alterColumnToDifferentTypeTest() throws DatabaseEngineException {\n        DbEntity entity =\n                dbEntity()\n                        .name(\"TEST\")\n                        .addColumn(\"COL1\", INT)\n                        .addColumn(\"COL2\", BOOLEAN)\n                        .addColumn(\"COL3\", DOUBLE)\n                        .addColumn(\"COL4\", LONG)\n                        .addColumn(\"COL5\", STRING)\n                        .build();\n\n        engine.addEntity(entity);\n\n        engine.executeUpdate(new AlterColumn(table(\"TEST\"), dbColumn().name(\"COL1\").type(DbColumnType.STRING)\n                .build()));\n    }\n\n    @Test\n    public void createTableWithDefaultsTest() throws DatabaseEngineException, DatabaseFactoryException {\n        DbEntity.Builder entity =\n                dbEntity()\n                        .name(\"TEST\")\n                        .addColumn(\"COL1\", INT, new K(1))\n                        .addColumn(\"COL2\", BOOLEAN, new K(false))\n                        .addColumn(\"COL3\", DOUBLE, new K(2.2d))\n                        .addColumn(\"COL4\", LONG, new K(3L))\n                        .pkFields(\"COL1\");\n\n        engine.addEntity(entity.build());\n\n        final String ec = engine.escapeCharacter();\n        engine.executeUpdate(\"INSERT INTO \" + quotize(\"TEST\", ec) + \" (\" + quotize(\"COL1\", ec) + \") VALUES (10)\");\n\n        List<Map<String, ResultColumn>> test = engine.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"Check size of records\", 1, test.size());\n        Map<String, ResultColumn> record = test.get(0);\n        assertEquals(\"Check COL1\", 10, record.get(\"COL1\").toInt().intValue());\n        assertEquals(\"Check COL2\", false, record.get(\"COL2\").toBoolean());\n        assertEquals(\"Check COL3\", 2.2d, record.get(\"COL3\").toDouble(), 0);\n        assertEquals(\"Check COL4\", 3L, record.get(\"COL4\").toLong().longValue());\n\n\n        final DbEntity entity1 = entity\n                .addColumn(\"COL5\", STRING, new K(\"mantorras\"), NOT_NULL)\n                .addColumn(\"COL6\", BOOLEAN, new K(true), NOT_NULL)\n                .addColumn(\"COL7\", INT, new K(7), NOT_NULL)\n                .build();\n\n        final Properties propertiesCreate = new Properties();\n        for (Map.Entry<Object, Object> prop : properties.entrySet()) {\n            propertiesCreate.setProperty(prop.getKey().toString(), prop.getValue().toString());\n        }\n        propertiesCreate.setProperty(SCHEMA_POLICY, \"create\");\n\n        final DatabaseEngine connection2 = DatabaseFactory.getConnection(propertiesCreate);\n        connection2.updateEntity(entity1);\n\n        test = connection2.query(select(all()).from(table(\"TEST\")));\n        assertEquals(\"Check size of records\", 1, test.size());\n        record = test.get(0);\n        assertEquals(\"Check COL1\", 10, record.get(\"COL1\").toInt().intValue());\n        assertEquals(\"Check COL2\", false, record.get(\"COL2\").toBoolean());\n        assertEquals(\"Check COL3\", 2.2d, record.get(\"COL3\").toDouble(), 1e-9);\n        assertEquals(\"Check COL4\", 3L, record.get(\"COL4\").toLong().longValue());\n        assertEquals(\"Check COL5\", \"mantorras\", record.get(\"COL5\").toString());\n        assertEquals(\"Check COL6\", true, record.get(\"COL6\").toBoolean());\n        assertEquals(\"Check COL7\", 7, record.get(\"COL7\").toInt().intValue());\n        connection2.close();\n    }\n\n    @Test\n    public void defaultValueOnBooleanColumnsTest() throws DatabaseEngineException {\n        DbEntity.Builder entity =\n                dbEntity()\n                        .name(\"TEST\")\n                        .addColumn(\"COL1\", INT, new K(1))\n                        .addColumn(\"COL2\", BOOLEAN, new K(false), NOT_NULL)\n                        .addColumn(\"COL3\", DOUBLE, new K(2.2d))\n                        .addColumn(\"COL4\", LONG, new K(3L))\n                        .pkFields(\"COL1\");\n\n        engine.addEntity(entity.build());\n\n        engine.persist(\"TEST\", entry().build());\n        Map<String, ResultColumn> row = engine.query(select(all()).from(table(\"TEST\"))).get(0);\n\n        assertEquals(\"\", 1, row.get(\"COL1\").toInt().intValue());\n        assertFalse(\"\", row.get(\"COL2\").toBoolean());\n        assertEquals(\"\", 2.2d, row.get(\"COL3\").toDouble(), 0D);\n        assertEquals(\"\", 3L, row.get(\"COL4\").toLong().longValue());\n    }\n\n    @Test\n    public void upperTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n        engine.persist(\"TEST\", entry().set(\"COL5\", \"ola\").build());\n        assertEquals(\"text is uppercase\", \"OLA\", engine.query(select(upper(column(\"COL5\")).alias(\"RES\")).from(table(\"TEST\"))).get(0).get(\"RES\").toString());\n    }\n\n    @Test\n    public void lowerTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n        engine.persist(\"TEST\", entry().set(\"COL5\", \"OLA\").build());\n        assertEquals(\"text is lowercase\", \"ola\", engine.query(select(lower(column(\"COL5\")).alias(\"RES\")).from(table(\"TEST\"))).get(0).get(\"RES\").toString());\n    }\n\n    @Test\n    public void internalFunctionTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n        engine.persist(\"TEST\", entry().set(\"COL5\", \"OLA\").build());\n        assertEquals(\"text is uppercase\", \"ola\", engine.query(select(f(\"LOWER\", column(\"COL5\")).alias(\"RES\")).from(table(\"TEST\"))).get(0).get(\"RES\")\n                .toString());\n    }\n\n    @Test\n    public void entityEntryHashcodeTest() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"id1\", \"val1\");\n        map.put(\"id2\", \"val2\");\n        map.put(\"id3\", \"val3\");\n        map.put(\"id4\", \"val4\");\n\n        EntityEntry entry = entry()\n                .set(map)\n                .build();\n\n        assertEquals(\"entry's hashCode() matches map's hashCode()\", map.hashCode(), entry.hashCode());\n    }\n\n    /**\n     * Tests that creating a {@link DatabaseEngine} using try-with-resources will close the engine\n     * (and thus the underlying connection to the database) once the block is exited from.\n     *\n     * @throws Exception if something goes wrong while checking if the connection of the engine is closed.\n     * @since 2.1.12\n     */\n    @Test\n    public void tryWithResourcesClosesEngine() throws Exception {\n        final AtomicReference<Connection> connReference = new AtomicReference<>();\n\n        try (final DatabaseEngine tryEngine = this.engine) {\n            connReference.set(tryEngine.getConnection());\n            assertFalse(\"close() method should not be called within the try-with-resources block, for an existing DatabaseEngine\",\n                    connReference.get().isClosed());\n        }\n\n        assertTrue(\"close() method should be called after exiting try-with-resources block, for an existing DatabaseEngine\",\n                connReference.get().isClosed());\n\n        try (final DatabaseEngine tryEngine = DatabaseFactory.getConnection(properties)) {\n            connReference.set(tryEngine.getConnection());\n            assertFalse(\"close() method should not be called within the try-with-resources block, for a DatabaseEngine created in the block\",\n                    connReference.get().isClosed());\n        }\n\n        assertTrue(\"close() method should be called after exiting try-with-resources block, for a DatabaseEngine created in the block\",\n                connReference.get().isClosed());\n\n    }\n\n    /**\n     * Test that closing a database engine a 'create-drop' policy with multiple entities closes all insert statements\n     * associated with each entity, regardless of the schema policy used.\n     *\n     * Each entity is associated with 3 prepared statements. This test ensures that 3 PSs per entity are closed.\n     *\n     * @throws DatabaseEngineException  If something goes wrong while adding an entity to the engine.\n     * @throws DatabaseFactoryException If the database engine class specified in the properties does not exist.\n     * @since 2.1.13\n     */\n    @Test\n    public void closingAnEngineUsingTheCreateDropPolicyShouldDropAllEntities()\n            throws DatabaseEngineException, DatabaseFactoryException {\n\n        // Force the schema policy to be 'create-drop'\n        properties.setProperty(SCHEMA_POLICY, \"create-drop\");\n        engine = DatabaseFactory.getConnection(properties);\n\n        engine.addEntity(buildEntity(\"ENTITY-1\"));\n        engine.addEntity(buildEntity(\"ENTITY-2\"));\n\n        // Force invocation counting to start here\n        new Expectations(engine) {};\n\n        engine.close();\n\n        new Verifications() {{\n            engine.dropEntity((DbEntity) any); times = 2;\n        }};\n\n    }\n\n    /**\n     * Assesses whether the current row count is incremented if the .next()/.nextResult()\n     * methods are called in the iterator.\n     *\n     * @throws DatabaseEngineException If a database access error happens.\n     */\n    @Test\n    public void doesRowCountIncrementTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        // Create 4 entries\n        for (int i = 0; i < 4; i++) {\n            engine.persist(\"TEST\", entry().set(\"COL1\", i).build());\n        }\n\n        final ResultIterator resultIterator = engine.iterator(select(all()).from(table(\"TEST\")));\n\n        assertEquals(\"The current row count should be 0 if the iteration hasn't started\", 0, resultIterator.getCurrentRowCount());\n\n        // If the .next() method is called once then the current row count should be updated to 1\n        resultIterator.next();\n\n        assertEquals(\"The current row count is equal to 1\", 1,resultIterator.getCurrentRowCount());\n\n        // If for the same iterator the .nextResult() method is called 3 additional\n        // times then the current row count should be updated to 4\n        for(int i = 0; i < 3; i++) {\n            resultIterator.nextResult();\n        }\n\n        assertEquals(\"The current row count is equal to 4\", 4, resultIterator.getCurrentRowCount());\n    }\n\n    /**\n     * Tests that a {@link com.feedzai.commons.sql.abstraction.dml.K constant expression} with an enum value behaves\n     * as if the enum is a string (obtained from {@link Enum#name()}, both when persisting an entry and when using\n     * the enum value for filtering in a WHERE clause.\n     *\n     * @throws DatabaseEngineException If something goes wrong creating the test entity or persisting entries.\n     */\n    @Test\n    public void kEnumTest() throws DatabaseEngineException {\n        create5ColumnsEntity();\n\n        // should fail here if enum is not supported, or it will just put garbage, which will be detected later\n        engine.persist(\"TEST\", entry().set(\"COL5\", TestEnum.TEST_ENUM_VAL).build());\n\n        engine.persist(\"TEST\", entry().set(\"COL5\", \"something else\").build());\n\n        final List<Map<String, ResultColumn>> results = engine.query(\n                select(all())\n                        .from(table(\"TEST\"))\n                        .where(eq(column(\"COL5\"), k(TestEnum.TEST_ENUM_VAL)))\n        );\n\n        assertThat(results)\n                .as(\"One (and only one) result expected.\")\n                .hasSize(1)\n                .element(0)\n                .extracting(element -> element.get(\"COL5\").toString())\n                .as(\"An enum value should be persisted as its string representation\")\n                .isEqualTo(TestEnum.TEST_ENUM_VAL.name());\n    }\n\n    /**\n     * Tests that when inserting duplicated entries in a table the right exception is returned.\n     *\n     * The steps performed on this test are:\n     * <ol>\n     *     <li>Add duplicated entries in a transaction and fail to persist</li>\n     *     <li>Ensure the exception is a {@link DatabaseEngineUniqueConstraintViolationException}</li>\n     * </ol>\n     *\n     * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.\n     */\n    @Test\n    public void insertDuplicateDBError() throws Exception {\n        create5ColumnsEntityWithPrimaryKey();\n\n        EntityEntry entry = entry().set(\"COL1\", 2)\n                                   .set(\"COL2\", false)\n                                   .set(\"COL3\", 2D)\n                                   .set(\"COL4\", 3L)\n                                   .set(\"COL5\", \"ADEUS\")\n                                   .build();\n\n        // Add the same entry twice (repeated value for COL1, id)\n        engine.persist(\"TEST\", entry);\n        assertThatCode(() -> engine.persist(\"TEST\", entry))\n                .as(\"Is unique constraint violation exception\")\n                .isInstanceOf(DatabaseEngineUniqueConstraintViolationException.class)\n                .as(\"Encapsulated exception is SQLException\")\n                .hasCauseInstanceOf(SQLException.class)\n                .hasMessage(\"Something went wrong persisting the entity [unique_constraint_violation]\");\n    }\n\n    /**\n     * Tests that on a duplicated batch entry situation the right exception is returned.\n     *\n     * The steps performed on this test are:\n     * <ol>\n     *     <li>Add duplicated batch entries to transaction and fail to flush</li>\n     *     <li>Ensure the exception is a {@link DatabaseEngineUniqueConstraintViolationException}</li>\n     * </ol>\n     *\n     * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.\n     */\n    @Test\n    public void batchInsertDuplicateDBError() throws DatabaseEngineException {\n        create5ColumnsEntityWithPrimaryKey();\n\n        EntityEntry entry = entry().set(\"COL1\", 2)\n                                   .set(\"COL2\", false)\n                                   .set(\"COL3\", 2D)\n                                   .set(\"COL4\", 3L)\n                                   .set(\"COL5\", \"ADEUS\")\n                                   .build();\n\n        // Add the same entry twice (repeated value for COL1, id)\n        engine.addBatch(\"TEST\", entry);\n        engine.addBatch(\"TEST\", entry);\n\n        // Flush the duplicated entries and check the exception\n        assertThatCode(() -> engine.flush())\n                .as(\"Is unique constraint violation exception\")\n                .isInstanceOf(DatabaseEngineUniqueConstraintViolationException.class)\n                .as(\"Encapsulated exception is SQLException\")\n                .hasCauseInstanceOf(SQLException.class)\n                .hasMessage(\"Something went wrong while flushing [unique_constraint_violation]\");\n    }\n\n    /**\n     * An enum for tests.\n     */\n    private enum TestEnum {\n        TEST_ENUM_VAL;\n\n        @Override\n        public String toString() {\n            return super.toString() + \" description\";\n        }\n    }\n}\n",
        "data_path": null
    },
    "diff_attempts": [],
    "hop": 0,
    "max_hops": 30
}