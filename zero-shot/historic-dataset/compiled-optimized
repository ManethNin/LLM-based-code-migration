{
  "predictor": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "prompt": "# Guava Release 17.0: Release Notes\n\n## API Changes\n\n[Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/17.0\/api\/diffs\/) of changes since release 16.0.\n\nTo build a combined report of the API changes between release 17.0 and any older release, check out our docs tree and run `jdiff\/jdiff.sh` with the previous release number as argument (example: `jdiff.sh 5.0`).\n\n### Significant API additions and changes\n\n#### common.base\n\n`Verify` and `VerifyException`\n\n`Converter.from(Function<A, B>, Function<B, A>)`\n\n#### common.cache\n\n`CacheLoader.asyncReloading(CacheLoader<K, V>, Executor)`\n\n#### common.io\n\n`ByteStreams.newDataInput(ByteArrayInputStream)`\n\n`ByteStreams.newDataOutput(ByteArrayOutputStream)`\n\n`Closeables.closeQuietly(InputStream)`\n\n`Closeables.closeQuietly(Reader)`\n\n#### common.net\n\n`HostAndPort.fromHost(String)`\n\n#### common.util.concurrent\n\n`Futures.inCompletionOrder(Iterable<ListenableFuture<T>>)`\n\n`MoreExecutors.shutdownAndAwaitTermination(ExecutorService, long, TimeUnit)`\n\n`Service` (and subclasses) - deprecated methods removed.\n\n## A note on `BloomFilter`\n\nRelease 17 fixes an issue ([1119](https:\/\/github.com\/google\/guava\/issues\/1119)) with the performance of very large `BloomFilter`s. For most users, this fix should be completely transparent. `BloomFilter` objects serialized with a previous version of Guava will be deserializable by and work fine in Guava 17. However, `BloomFilter`s created by Guava 17 will _not_ be deserializable by previous versions of Guava. This should still only affect you if both of the following are true:\n\n  * You are serializing `BloomFilter`s and sending them from one server or process to another.\n  * You can't upgrade all your servers to Guava 17 at the same time.\n\nIn this case, a server that's been upgraded to 17 could send a `BloomFilter` to a server that hasn't, which will then fail to deserialize it.\n\nFor this release only, we're providing the ability to use a system property to work around this issue. If the system property `com.google.common.hash.BloomFilter.useMitz32` is set to `true` (ignoring case), Guava will create `BloomFilter`s that are compatible with previous versions of Guava rather than using the new strategy. So while you're rolling out Guava 17, you can set this system property to keep everything working. Once it's fully rolled out, you can remove the system property to start using the new strategy. Guava 18.0 will no longer recognize the system property and will always use the new strategy for newly created `BloomFilter`s.\n",
        "parsed_changes": "{\n  \"class_breaking_changes\": [\n    {\n      \"class_name\": \"Service\",\n      \"package_name\": \"common.util.concurrent\",\n      \"deprecations\": [],\n      \"removals\": [\n        {\n          \"method_signature\": \"deprecated methods removed\",\n          \"replacement\": null\n        }\n      ],\n      \"notes\": null\n    }\n  ],\n  \"version\": \"17.0\"\n}"
      },
      {
        "augmented": true,
        "prompt": "# Guava Release 23.0: Release Notes\n\n## API Changes\n\n- Java 8: [Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/23.0\/api\/diffs\/) of changes since release 22.0.\n- Android: [Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/23.0-android\/api\/diffs\/) of changes since release 22.0.\n\n## Significant API additions and changes\n\n### common.collect\n\n- `ContiguousSet`: new convenience methods for closed or closed-open sets of `Integer`s or `Long`s\n- `Set<Set<E>> Sets.combinations(Set<E> set, int size)`: returns all subsets of the given set that have the given size\n\n### common.graph\n\n- New types: `SuccessorsFunction`\/`PredecessorsFunction`\n  - These interfaces are each supertypes of `Graph`\/`ValueGraph`\/`Network`. They have a few purposes:\n    - scaffolding for migrating the capabilities of `TreeTraverser` into `common.graph`\n    - facilitating users using their own graph data structures (when they don\u2019t need the full `common.graph` API)\n- New methods on `Network` for the case when there is known to be at most one edge connecting two nodes\n  - `java.util.Optional<E> edgeConnecting(N nodeU, N nodeV)`: Java 8 version only\n  - `E edgeConnectingOrNull(N nodeU, N nodeV)`: all versions\n- New method for `Graph`\/`ValueGraph`\/`Network`\n  - `boolean hasEdgeConnecting(N nodeU, N nodeV)`: this is the preferred mechanism for determining whether there is an edge that connects two nodes\n- Changes to methods for accessing edge values in `ValueGraph`\n  - old method: `V edgeValue(N nodeU, N nodeV)`, throws `IllegalArgumentException` if no such edge exists\n  - new method (Java 8 only): `java.util.Optional<V> edgeValue(N nodeU, N nodeV)`, returns `Optional.empty()` if no such edge exists\n  - (no change to `@Nullable V edgeValueOrDefault(N nodeU, N nodeV, @Nullable V defaultValue)`) (Java 7 & 8)\n\n### common.hash\n\n- `BloomFilter`\n  - is now thread-safe\n  - added `Collector`s for creating a `BloomFilter` from the contents of a `Stream`\n- `PrimitiveSink`, `Hasher` and `HashFunction`: methods added to all for putting\/hashing `ByteBuffer`s\n\n### common.util.concurrent\n\n- New type: `FluentFuture`\n  - A `ListenableFuture` that supports fluent chains of operations\n- `AbstractFuture` has been retrofitted to extend the new `FluentFuture` type. If you subclass `AbstractFuture` to add fluent methods like `transform()`, this may break you. If so, please [report the problem](https:\/\/github.com\/google\/guava\/issues).\n- `Futures`: new methods `scheduleAsync(AsyncCallable, long, TimeUnit, ScheduledExecutorService)` and `submitAsync(AsyncCallable, Executor)`\n",
        "parsed_changes": "{\n  \"class_breaking_changes\": [\n    {\n      \"class_name\": \"ContiguousSet\",\n      \"package_name\": \"common.collect\",\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"New convenience methods for closed or closed-open sets of Integers or Longs.\"\n    },\n    {\n      \"class_name\": \"Sets\",\n      \"package_name\": \"common.collect\",\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"New method: Set<Set<E>> combinations(Set<E> set, int size) returns all subsets of the given set that have the given size.\"\n    },\n    {\n      \"class_name\": \"Network\",\n      \"package_name\": \"common.graph\",\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"New methods for the case when there is known to be at most one edge connecting two nodes.\"\n    },\n    {\n      \"class_name\": \"ValueGraph\",\n      \"package_name\": \"common.graph\",\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"Changes to methods for accessing edge values.\"\n    },\n    {\n      \"class_name\": \"BloomFilter\",\n      \"package_name\": \"common.hash\",\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"BloomFilter is now thread-safe and added Collectors for creating a BloomFilter from the contents of a Stream.\"\n    },\n    {\n      \"class_name\": \"PrimitiveSink\",\n      \"package_name\": \"common.hash\",\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"Methods added to all for putting\/hashing ByteBuffers.\"\n    },\n    {\n      \"class_name\": \"AbstractFuture\",\n      \"package_name\": \"common.util.concurrent\",\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"AbstractFuture has been retrofitted to extend the new FluentFuture type.\"\n    },\n    {\n      \"class_name\": \"Futures\",\n      \"package_name\": \"common.util.concurrent\",\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"New methods scheduleAsync(AsyncCallable, long, TimeUnit, ScheduledExecutorService) and submitAsync(AsyncCallable, Executor).\"\n    }\n  ],\n  \"version\": \"23.0\"\n}"
      },
      {
        "augmented": true,
        "prompt": "# Guava Release 13.0: Release Notes\n\n## API Changes\n\n[Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/13.0\/api\/diffs\/) of changes since release 12.0\n\nTo build a combined report of the API changes between release 13.0 and any older release, check out our docs tree and run `jdiff\/jdiff.sh` with the previous release number as argument (example: `jdiff.sh 5.0`).\n\n### Significant API additions\n\nAdded RateLimiter.\n\nAdded Striped.\n\nAdded FluentIterable.toSortedImmutableList and transformAndConcat.\n\nAdded ContiguousSet.create(Range, DiscreteDomain).\n\nAdded Maps.synchronizedNavigableMap.\n\nAdded Sets.synchronizedNavigableSet.\n\nAdded Ordering.allEqual\n\nAdded Funnels.asOutputStream, integerFunnel and longFunnel.\n\nAdded DoubleMath.fuzzyCompare and fuzzyEquals.\n\nAdded a few more constants to MediaType.\n\nAdded UnsignedBytes.parseUnsignedByte, toString and MAX\\_VALUE.\n\nAdded UnsignedInts.decode.\n\nAdded UnsignedLongs.decode.\n\nAdded CycleDetectingLockFactory.\n\nAdded Service.Listener and addListener.\n\nAdded Futures.dereference.\n\nAdded ImmutableTypeToInstanceMap and MutableTypeToInstanceMap\n\n### Significant API changes\n\nIterators.skip was deprecated in favor of Iterators.advance\n\nThe static methods on Equivalences were deprecated in favor of instance methods on Equivalence.\n\nRemoved Files.getDigest and ByteStreams.getDigest in favor of Files.hash and ByteStreams.hash.\n\n## Promoted from `@Beta`\n\n`SortedMap` overloads for `Maps.filter{Keys,Values,Entries}`\n\n`SortedSet` overloads for `Sets.filter`\n\n`Ascii.MIN` and `Ascii.MAX`\n\n`Equivalence`, `Equivalence.Wrapper`\n\n`Joiner.appendTo` overloads for `Iterator`\n\n`Optional` (though `or(Optional)`, `or(Supplier)`, `transform(Function)`, and `presentInstances(Iterable<Optional>)` are still `@Beta`)\n\n`Strings.common{Prefix, Suffix}`\n\n`Lists.newCopyOnWriteArrayList`\n\n`Sets.newCopyOnWriteArraySet`\n\n`Multimaps.filter{Keys, Values, Entries}`\n\n`Multisets.{contains, remove, retain}Occurrences`\n\n`Tables` (though `newCustomTable`, `transformValues`, and `unmodifiableRowSortedTable` are still `@Beta`)\n\n### Non-API changes\n\nMade findbugs a provided dependency to avert dep conflicts when using findbugs 2.0.  The side-effect of this change is that projects which relied upon Guava to grant access to the JSR-305 annotations \"for free\" will break unless they provide their own direct dependency on that jar (or an equivalent).  Projects should always have been directly depending on JSR-305 (per maven best-practice), but this change makes that should into a must.\n\nCaliper benchmarks for much of Guava have been\n[open-sourced](https:\/\/github.com\/google\/guava\/tree\/master\/guava-tests\/benchmark\/com\/google\/common).\n\n`LinkedHashMultimap` has been entirely rewritten, reducing its memory consumption by ~50%.  (Previously, it was one of the worst potential memory hogs in the library.)\n\n`ImmutableSortedMultiset` has been rewritten, reducing its memory consumption by ~40%.\n\n`ImmutableSortedMap` has been rewritten, reducing its memory usage by ~50%.\n\nFixed a significant performance regression in LocalCache (12.0 was affected, but 12.0.1 was not)\n",
        "parsed_changes": "{\n    \"class_breaking_changes\": [],\n    \"version\": \"13.0\"\n}"
      },
      {
        "augmented": true,
        "prompt": "# Guava Release 12.0: Release Notes\n\n\n## API Changes\n\n[Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/12.0\/api\/diffs\/) of changes since release 11.0.2\n\nTo build a combined report of the API changes between release 12.0 and any older release, check out our docs tree and run `jdiff\/jdiff.sh` with the previous release number as argument (example: `jdiff.sh 5.0`).\n\n### CacheBuilder Cache stats\n\nCacheBuilder users who use the Cache stats() method must now opt in by calling recordStats() (as of 12.0-rc2).\n\n### JDK6 APIs\n\nGuava 12.0 is the first release to require JDK6. Users requiring JDK5 compatibility may continue to use Guava 11.0.2 -- or contact us about maintaining a backport.\n\nHere are the new APIs introduced along with our JDK6 dependency:\n\nImmutableSortedSet implements NavigableSet; ImmutableSortedMap implements NavigableMap.\n\nAdded forwarding classes for Deque, NavigableMap, NavigableSet.\n\nAdded type-inferring factory methods: newArrayDeque, newLinkedBlockingDeque, newCopyOnWriteArrayList, newCopyOnWriteArraySet.\n\nAdded Maps.unmodifiableNavigableMap, Sets.unmodifiableNavigableSet.\n\n### Other significant API additions\n\nIntroducing common.reflect, especially TypeToken, a better java.lang.Class.\n\nIntroducing MediaType (which may be split into MediaType+MediaRange someday).\n\nIntroducing FluentIterable.\n\nIntroducing CacheBuilderSpec; see CacheBuilder.from(CacheBuilderSpec) and CacheBuilder.from(String) to make use of it.\n\nIntroducing ImmutableSortedMultiset.\n\nAdded Enums.getField, getIfPresent.\n\nAdded HashCodes.\n\nAdded BloomFilter.copy, equals, hashCode; plus, put now returns boolean.\n\nAdded Optional.transform.\n\nAdded ToStringHelper.omitNullValues.\n\nAdded Collections2.permutations, orderedPermutations.\n\nAdded FowardingSet.standardRemoveAll.\n\nAdded Cache.putAll.\n\nAdded JdkFutureAdapters.listenInPoolThread with custom executor.\n\n### Other significant API changes\n\nSink is renamed to PrimitiveSink. Implementations of Funnel will need to be updated.\n\nAbstractLinkedIterator has been deprecated in favor of the identical AbstractSequentialIterator.\n\nByteStreams and Files getDigest methods have been deprecated in favor of new hash methods.\n\nComparisonChain.compare(boolean, boolean) has been deprecated in favor new compareFalseFirst\/compareTrueFirst methods.\n\n### OSGi support\n\nAs of 12.0-rc2, Guava contains OSGi metadata.\n",
        "parsed_changes": "{\n  \"class_breaking_changes\": [\n    {\n      \"class_name\": \"CacheBuilder\",\n      \"package_name\": null,\n      \"deprecations\": [\n        {\n          \"method_signature\": \"stats()\"\n        }\n      ],\n      \"removals\": [],\n      \"notes\": \"CacheBuilder users must now opt in by calling recordStats()\"\n    },\n    {\n      \"class_name\": \"Sink\",\n      \"package_name\": null,\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"Sink is renamed to PrimitiveSink\"\n    },\n    {\n      \"class_name\": \"AbstractLinkedIterator\",\n      \"package_name\": null,\n      \"deprecations\": [],\n      \"removals\": [],\n      \"notes\": \"AbstractLinkedIterator has been deprecated in favor of AbstractSequentialIterator\"\n    },\n    {\n      \"class_name\": \"ByteStreams\",\n      \"package_name\": null,\n      \"deprecations\": [\n        {\n          \"method_signature\": \"getDigest()\"\n        }\n      ],\n      \"removals\": [],\n      \"notes\": \"ByteStreams getDigest method has been deprecated in favor of new hash methods\"\n    },\n    {\n      \"class_name\": \"Files\",\n      \"package_name\": null,\n      \"deprecations\": [\n        {\n          \"method_signature\": \"getDigest()\"\n        }\n      ],\n      \"removals\": [],\n      \"notes\": \"Files getDigest method has been deprecated in favor of new hash methods\"\n    },\n    {\n      \"class_name\": \"ComparisonChain\",\n      \"package_name\": null,\n      \"deprecations\": [\n        {\n          \"method_signature\": \"compare(boolean, boolean)\"\n        }\n      ],\n      \"removals\": [],\n      \"notes\": \"ComparisonChain compare(boolean, boolean) has been deprecated in favor new compareFalseFirst\/compareTrueFirst methods\"\n    }\n  ],\n  \"version\": \"12.0\"\n}"
      },
      {
        "prompt": "# Guava Release 21.0: Release Notes\n\n## API Changes\n\n[Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/21.0\/api\/diffs\/) of changes since release 20.0.\n\n## Significant API additions and changes\n\n### common.base\n\n- `Function`, `Predicate` and `Supplier`: changed to extend the new `java.util.function` interfaces with the same names.\n- `Optional`: added `toJavaUtil` and `fromJavaUtil` methods for easy conversion between Guava's `Optional` and `java.util.Optional`.\n- `Objects`: removed deprecated `firstNonNull` and `toStringHelper` methods (both found on `MoreObjects` since Guava 18.0).\n\n### common.cache\n\nNew default methods on `ConcurrentMap` that were added in Java 8 are now implemented and safe to use for `Cache.asMap()` views.\n\n### common.collect\n\nMany APIs in collect now have better implementations of many of the `default` methods added to `Collection` and `Map` types in Java 8.\n\n#### New classes\n\n- `Comparators`: With the addition of many useful methods to the `Comparator` type in Java 8, `Ordering` now provides little benefit. `Comparators` is a new location for methods on `Ordering` that still don't have a good equivalent in the JDK.\n- `Streams`: Utility class for working with `java.util.stream.Stream`. Includes methods for creating streams (such as `stream(Iterable)`, `stream(Optional)` and `concat(Stream...)`) and methods that do things with streams (such as `findLast(Stream)`).\n- `MoreCollectors`: Factories for `java.util.stream.Collector` objects; note that `Collector`s for Guava's collection types are generally found on those types themselves rather than here.\n- `Interners.InternerBuilder`: Builder for `Interner` instances, with options similar to those found on `MapMaker`. Created with `Interners.newBuilder()`.\n\n#### Removed classes\n\n- `MapConstraint` and `MapConstraints`: deprecated since 19.0.\n\n#### Changes\n\n- `FluentIterable`: added `stream()` method.\n- `ForwardingBlockingDeque`: deprecated; moved to `util.concurrent`.\n- `Immutable*` types: added methods to all named `toImmutable[Type]()` (e.g. `ImmutableList.toImmutableList()`) which return a `Collector` for collecting a `Stream` into an immutable collection\/map object. As with most methods that create `Collector`s, these are generally intended to be used as static imports.\n- `Multimap`: added `forEach(BiConsumer)` method.\n- `Multimaps`: added `toMultimap` and `flatteningToMultimap` methods returning `Collector` objects that collect to a `Multimap`.\n- `Multiset`: added `forEachEntry(ObjIntConsumer)` method.\n- `Maps`: added `toImmutableEnumMap` methods returning `Collector` objects that collect to an `ImmutableMap` with `enum` keys.\n- `Sets`: added `toImmutableEnumSet` method returning a `Collector` that collects to an `ImmutableSet` of `enum`s.\n- `Tables`: added `toTable` methods returning `Collector` objects that collect to a `Table`.\n- `RangeSet`: added default `addAll(Iterable<Range>)`, `removeAll(Iterable<Range>)` and `enclosesAll(Iterable<Range>)` methods.\n- `ImmutableRangeSet`: added `copyOf(Iterable<Range>)`, `unionOf(Iterable<Range>)`, `union(RangeSet)`, `intersection(RangeSet)` and `difference(RangeSet)` methods.\n- `TreeRangeSet`: added `create(Iterable<Range>)` method.\n- A number of rarely-used methods on concrete implementations of Guava collection types that aren't present on the interface they implement have been deprecated. These include: `ArrayListMultimap.trimToSize()`, `TreeMultimap.keyComparator()`, and `TreeBasedTable.row\/columnComparator()`.\n\n### common.io\n\n- `MoreFiles`: New class which contains methods similar to those in `Files`, but for use with `java.nio.file.Path` objects.\n- This includes `deleteRecursively` and `deleteDirectoryContents` methods which are secure against race conditions that Java previously had no way of dealing with provided that the `FileSystem` supports `SecureDirectoryStream` (modern Linux versions do; Windows [NTFS at least] does not). For security, these will throw an exception if `SecureDirectoryStream` is not supported unless `RecursiveDeleteOption.ALLOW_INSECURE` is passed when calling the method.\n\n### common.primitives\n\n- Most classes: added `constrainToRange([type] value, [type] min, [type] max)` methods which constrain the given value to the closed range defined by the `min` and `max` values. They return the value itself if it's within the range, the `min` if it's below the range and the `max` if it's above the range.\n\n### common.util.concurrent\n\n- `ForwardingBlockingDeque`: added; moved from `common.collect` because `BlockingDeque` is a concurrent type rather than a standard collection (it's defined in `java.util.concurrent`).\n- `AtomicLongMap`: added a number of methods such as `accumulateAndGet(K, LongBinaryOperator)` that take advantage of new Java functional types.\n- `Monitor`: added `newGuard(BooleanSupplier)`.\n- `MoreExecutors`: removed `sameThreadExecutor()`; deprecated since 18.0 in favor of `directExecutor()` (preferable) or `newDirectExecutorService()`.\n",
        "solution": "{\"class_breaking_changes\":[{\"class_name\":\"Objects\",\"package_name\":\"common.base\",\"deprecations\":[],\"removals\":[{\"method_signature\":\"firstNonNull()\",\"replacement\":\"MoreObjects.firstNonNull()\"},{\"method_signature\":\"toStringHelper()\",\"replacement\":\"MoreObjects.toStringHelper()\"}],\"notes\":null},{\"class_name\":\"MapConstraint\",\"package_name\":\"common.collect\",\"deprecations\":[],\"removals\":[{\"method_signature\":\"*\",\"replacement\":null}],\"notes\":null},{\"class_name\":\"MapConstraints\",\"package_name\":\"common.collect\",\"deprecations\":[],\"removals\":[{\"method_signature\":\"*\",\"replacement\":null}],\"notes\":null},{\"class_name\":\"ForwardingBlockingDeque\",\"package_name\":\"common.collect\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":\"util.concurrent.ForwardingBlockingDeque.*()\"}],\"removals\":[],\"notes\":null},{\"class_name\":\"ArrayListMultimap\",\"package_name\":\"common.collect\",\"deprecations\":[{\"method_signature\":\"trimToSize()\",\"replacement\":null}],\"removals\":[],\"notes\":null},{\"class_name\":\"TreeMultimap\",\"package_name\":\"common.collect\",\"deprecations\":[{\"method_signature\":\"keyComparator()\",\"replacement\":null}],\"removals\":[],\"notes\":null},{\"class_name\":\"TreeBasedTable\",\"package_name\":\"common.collect\",\"deprecations\":[{\"method_signature\":\"rowComparator()\",\"replacement\":null},{\"method_signature\":\"columnComparator()\",\"replacement\":null}],\"removals\":[],\"notes\":null},{\"class_name\":\"MoreExecutors\",\"package_name\":\"common.util.concurrent\",\"deprecations\":[],\"removals\":[{\"method_signature\":\"sameThreadExecutor()\",\"replacement\":\"directExecutor()\"}],\"notes\":null}],\"version\":\"21.0\"}"
      },
      {
        "prompt": "# Guava Release 16.0: Release Notes\n\n## API Changes\n\n[Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/16.0\/api\/diffs\/) of changes since release 15.0\n\nTo build a combined report of the API changes between release 16.0 and any older release, check out our docs tree and run `jdiff\/jdiff.sh` with the previous release number as argument (example: `jdiff.sh 5.0`).\n\n### Significant API additions\n\n#### common.base\n\n`Ascii.equalsIgnoreCase`\n\n`Ascii.truncate`\n\n`Converter`\n\n`CaseFormat.converterTo(CaseFormat)`\n\n`Enums.stringConverter`\n\n`Utf8`\n\n#### common.collect\n\n`MultimapBuilder`\n\n`Maps.asConverter(BiMap)`\n\n#### common.eventbus\n\n`SubscriberExceptionHandler`\n\n#### common.hash\n\n`HashingInputStream`\n\n`HashingOutputStream`\n\n#### common.io\n\n`ByteSource.read(ByteProcessor)`\n\n`CharSource.readLines(LineProcessor)`\n\n#### common.primitives\n\n`Booleans.countTrue(boolean...)`\n\n`stringConverter()` for `Ints`, `Longs`, `Doubles`, `Floats` and `Shorts`\n\n#### common.reflect\n\n`ClassPath.getAllClasses()`\n\n#### common.util.concurrent\n\n`Runnables.doNothing()`\n\n### Significant API changes\n\nIn `common.io`, `InputSupplier` and `OutputSupplier` and all methods that take one or the other as a parameter have been deprecated. `ByteSource`, `CharSource`, `ByteSink` and `CharSink` should be used instead. The methods will be removed in two releases (18.0) and the interfaces are scheduled to be removed after 18 months, in June 2015.\n",
        "solution": "{\"class_breaking_changes\":[{\"class_name\":\"InputSupplier\",\"package_name\":\"common.io\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":\"ByteSource\/CharSource\"}],\"removals\":[],\"notes\":\"use ByteSource\/CharSource instead of InputSupplier.\"},{\"class_name\":\"OutputSupplier\",\"package_name\":\"common.io\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":\"ByteSink\/CharSink\"}],\"removals\":[],\"notes\":\"Use ByteSink\/CharSink instead of OutputSupplier\"}],\"version\":\"16.0\"}"
      },
      {
        "prompt": "# Guava Release 18.0: Release Notes\n\n## API Changes\n\n[Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/18.0\/api\/diffs\/) of changes since release 17.0.\n\nTo build a combined report of the API changes between release 18.0 and any older release, check out our docs tree and run `jdiff\/jdiff.sh` with the previous release number as argument (example: `jdiff.sh 5.0`).\n\n### Significant API additions and changes\n\n#### common.base\n\n  * `MoreObjects`\n    * Methods in `Objects` which do not have equivalents in `java.util.Objects` have been moved to `MoreObjects` to allow importing of both classes. Those methods have been deprecated in our `Objects` class. Methods which _do_ have equivalents in `java.util.Objects` will remain (undeprecated) in our `Objects` class as long as Guava continues to support JDK 6.\n  * Enums` - removed deprecated `valueOfFunction` method.\n\n#### common.collect\n\n  * `FluentIterable.of(E[])`\n  * `FluentIterable.append(E...)`\n  * `FluentIterable.append(Iterable<? extends E>)`\n  * `FluentIterable.join(Joiner)`\n\n#### common.hash\n\n  * `Hashing.crc32c()`\n\n`BloomFilter` no longer recognizes the system property `com.google.common.hash.BloomFilter.useMitz32` (see [[Release 17 - A note on BloomFilter|Release17#A-note_on-BloomFilter]] for more information).\n\n#### common.io\n\nMethods which took an `InputSupplier` or `OutputSupplier` parameter or which returned an `InputSupplier` or `OutputSupplier` (all of which were deprecated in Guava 15.0) have been removed. Additionally, `ByteSource`, `ByteSink`, `CharSource` and `CharSink` no longer implement `InputSupplier` or `OutputSupplier`.\n\nThe `InputSupplier` and `OutputSupplier` interfaces, which no longer have any usages in Guava, will be deleted in December 2015.\n\n#### common.net\n\n  * `InetAddresses.decrement(InetAddress)`\n\n#### common.reflect\n\n  * `Parameter.getAnnotationsByType(Class<A>)`\n  * `Parameter.getDeclaredAnnotation(Class<A>)`\n  * `Parameter.getDeclaredAnnotationsByType(Class<A>)`\n\n#### common.util.concurrent\n\n  * `MoreExecutors.directExecutor()` - lightweight, simple `Executor` that runs tasks on the thread that invokes `execute`.\n  * `MoreExecutors.newDirectExecutorService()` - heavier `ListeningExecutorService` implementation of the same thing; equivalent to `sameThreadExecutor()`, which has been deprecated.\n",
        "solution": "{\"class_breaking_changes\":[{\"class_name\":\"Enums\",\"package_name\":\"common.base\",\"deprecations\":[],\"removals\":[{\"method_signature\":\"valueOfFunction()\",\"replacement\":null}],\"notes\":null},{\"class_name\":\"Objects\",\"package_name\":\"common.base\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":\"MoreObjects.*()\"}],\"removals\":[],\"notes\":\"Methods in Objects without equivalent in java.util.Objects have been moved to MoreObjects and deprecated in the Objects class\"},{\"class_name\":\"BloomFilter\",\"package_name\":\"common.hash\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":null}],\"removals\":[],\"notes\":\"The System property com.google.common.hash.BloomFilter.useMitz32 is no longer recognized.\"},{\"class_name\":\"*\",\"package_name\":\"common.io\",\"deprecations\":[],\"removals\":[{\"method_signature\":\"*(InputSupplier)\",\"replacement\":\"*(ByteSource,CharSource)\"},{\"method_signature\":\"*(OutputSupplier)\",\"replacement\":\"*(ByteSink,CharSink)\"}],\"notes\":\"Methods which took or returned InputSupplier or OutputSupplier have been removed.\"},{\"class_name\":\"MoreExecutors\",\"package_name\":\"common.util.concurrent\",\"deprecations\":[{\"method_signature\":\"sameThreadExecutor()\",\"replacement\":\"newDirectExecutorService()\"}],\"removals\":[],\"notes\":null}],\"version\":\"18.0\"}"
      },
      {
        "prompt": "# Guava Release 11.0.2: Release Notes\n\n## API Changes\n\n[Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/diffs\/) of changes since release 10.0.1\n\nTo build a combined report of the API changes between release 11.0.2 and any older release, check out our docs tree and run `jdiff\/jdiff.sh` with the previous release number as argument (example: `jdiff.sh 5.0`).\n\n### Changes between 11.0.1 and 11.0.2\n\n  * Fix BloomFilter performance bug, breaking backwards compatibility in the process.\n  * Fix GWT compilation of CacheBuilder.\n\n### Changes between 11.0 and 11.0.1\n\n  * Fix bug in Optional#presentInstances.\n  * Make MessageDigestHashFunction thread-safe.\n  * Fix Cache clear in the absence of a removal listener.\n  * Cache documentation improvements.\n\n### LoadingCache split out of Cache\n\nThe [Cache](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/cache\/Cache.html) methods related to automatic cache loading have been split out into the [LoadingCache](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/cache\/LoadingCache.html) interface. [CacheBuilder.build(CacheLoader)](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/cache\/CacheBuilder.html#build(com.google.common.cache.CacheLoader)) now returns a LoadingCache, and [CacheBuilder.build()](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/cache\/CacheBuilder.html#build()) was introduced, which returns a Cache.\n\nWhen upgrading to version 11.0.2, all Cache references should be changed to LoadingCache.\n\n## Issues resolved\n\n[Issues fixed](https:\/\/github.com\/google\/guava\/issues?utf8=%E2%9C%93&q=milestone%3A11.0+is%3Aclosed+)\n\n## Additions\n\n### New packages\n\n  * [common.hash](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/hash\/package-summary.html)\n  * [common.math](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/math\/package-summary.html)\n\n### New classes\n\ncommon.cache\n\n  * [LoadingCache](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/cache\/LoadingCache.html)\n  * [AbstractLoadingCache](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/cache\/AbstractLoadingCache.html)\n  * [ForwardingLoadingCache](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/cache\/ForwardingLoadingCache.html)\n  * [Weigher](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/cache\/Weigher.html)\n\ncommon.collect\n\n  * [ImmutableTable](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/collect\/ImmutableTable.html)\n  * [Queues](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/collect\/Queues.html)\n  * [SortedMultiset](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/collect\/SortedMultiset.html)\n\ncommon.net\n\n  * [HttpHeaders](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/net\/HttpHeaders.html)\n\ncommon.primitives\n\n  * [UnsignedInteger](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/primitives\/UnsignedInteger.html)\n  * [UnsignedInts](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/primitives\/UnsignedInts.html)\n  * [UnsignedLong](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/primitives\/UnsignedLong.html)\n\ncommon.util.concurrent\n\n  * [AbstractScheduledService](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/util\/concurrent\/AbstractScheduledService.html)\n  * [AsyncFunction](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/util\/concurrent\/AsyncFunction.html)\n  * [AtomicDouble](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/util\/concurrent\/AtomicDouble.html)\n  * [AtomicDoubleArray](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/util\/concurrent\/AtomicDoubleArray.html)\n  * [AtomicLongMap](http:\/\/google.github.io\/guava\/releases\/11.0.2\/api\/docs\/com\/google\/common\/util\/concurrent\/AtomicLongMap.html)\n\n### New members\n\ncommon.base\n\n  * Objects.ToStringHelper.add\/addValue primitive overloads\n  * Optional.asSet, presentInstances\n  * Strings.commonPrefix, commonSuffix\n\ncommon.cache\n\n  * Cache.get, getIfPresent, getAllPresent, invalidateAll, put\n  * CacheBuilder.build, maximumWeight, refreshAfterWrite, weigher\n  * CacheLoader.loadAll, reload\n  * CacheStats.plus\n\ncommon.collect\n\n  * ImmutableMultimap.inverse\n  * Iterables.mergeSorted, tryFind\n  * Iterators.mergeSorted, tryFind\n  * Maps.difference, filterEntries, filterKeys, filterValues, transformEntries, transformValues\n  * Multimaps.filterEntries, filterKeys, filterValues\n  * Multisets.copyHighestCountFirst, unmodifiableSortedMultiset\n  * Ordering.max, min (Iterator overload)\n  * Sets.filter (SortedSet overload), newLinkedHashSetWithExpectedSize\n  * Tables.unmodifiableRowSortedTable, unmodifiableTable\n\ncommon.io\n\n  * Files.getFileExtension, simplifyPath\n\ncommon.primitives\n\n  * Ints.tryParse\n\ncommon.util.concurrent\n\n  * Futures.transform(..., AsyncFunction) (to replace Futures.chain)\n",
        "solution": "{\"class_breaking_changes\":[{\"class_name\":\"Cache\",\"package_name\":null,\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":\"LoadingCache.*()\"}],\"removals\":[],\"notes\":null},{\"class_name\":\"CacheBuilder\",\"package_name\":null,\"deprecations\":[{\"method_signature\":\"build(CacheLoader)\",\"replacement\":\"build(CacheLoader)\"}],\"removals\":[],\"notes\":\"build() now returns a LoadingCache\"},{\"class_name\":\"Futures\",\"package_name\":null,\"deprecations\":[{\"method_signature\":\"chain()\",\"replacement\":\"transform(..., AsyncFunction)\"}],\"removals\":[],\"notes\":null}],\"version\":\"11.0.2\"}"
      },
      {
        "prompt": "# Guava Release 19.0: Release Notes\n\n## API Changes\n\n[Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/19.0\/api\/diffs\/) of changes since release 18.0.\n\nNote: for some reason, this diff is showing interface methods as having changed from non-abstract to abstract, resulting in many APIs with no changes showing up as having changes.\n\n### Significant API additions and changes\n\n#### common.base\n\n  * Added `CharMatcher` static factory methods equivalent to the `CharMatcher` constants. For example, added `CharMatcher.whitespace()` which is equivalent to `CharMatcher.WHITESPACE`. Eventually, the constants will be deprecated and removed.\n    * This is being done because using constants requires a large number of classes to be initialized when anything from `CharMatcher` is used; switching to static factory methods allows classes to be initialized only as needed for the type of `CharMatcher` actually being used.\n  * Added `Throwables.lazyStackTrace(Throwable)` - Returns a `List<StackTraceElement>` that may load the stack trace elements lazily. Useful if you want to get only the first N elements of the stack trace efficiently.\n  * Added `lazyStackTraceIsLazy()`- Returns whether or not the above method is able to use the special implementation that makes it lazy on the current platform.\n  * Added `VerifyException` constructor overloads taking a `Throwable` cause.\n\n#### common.cache\n\nThis package has graduated from `@Beta`, making it safe to use in library code.\n\n  * Added visibility of `CacheLoader.UnsupportedLoadingOperationException`\n  * Added `RemovalNotification.create`\n    * These should only be needed if creating a custom cache implementation\n\n#### common.collect\n\nAdded factory and builder methods for various `ImmutableMap`s and `ImmutableMultimap`s that take `Iterable<Map.Entry>`.\n\n  * Added `FluentIterable.toMultiset()`\n  * Added `RangeSet.asDescendingSetOfRanges()` and `RangeMap.asDescendingMapOfRanges()`\n  * Added `Lists.cartesianProduct(List...)` and `Lists.cartesianProduct(List<List>>)`\n  * Added `Maps.newLinkedHashMapWithExpectedSize(int)`\n  * Re-added `Multisets.removeOccurrences(Multiset, Multiset)` which was (binary incompatibly) missing in 18.0 because it was replaced with `Multisets.removeOccurences(Multiset, Iterable)`\n  * **Deprecated** `MapConstraint` and `MapConstraints`\n  * **Deprecated** `Sets.newSetFromMap(Map)` - Java 6 provides `Collections.newSetFromMap(Map)`\n  * **Removed** `MapMaker.softValues()`\n\n#### common.eventbus\n\n  * Added `EventBus.identifier()`\n  * **Removed** protected method `AsyncEventBus.dispatchQueuedEvents()` (made package-private)\n\n#### common.hash\n\n  * Added `BloomFilter.create` overloads taking a `long` for the `expectedInsertions`\n  * Added `Hashing.sha384()`\n  * Added `Hashing.concatenating(HashFunction, HashFunction, HashFunction...)` and `Hashing.concatenating(Iterable<HashFunction>)`\n\n#### common.io\n\n  * Added `ByteSource.sizeIfKnown()`\n  * Added `CharSource.length()`\n  * Added `CharSource.lengthIfKnown()`\n\n#### common.net\n\n  * Added a couple new constants to `HttpHeaders` and `MediaType`\n  * Updated public suffix list for `InternetDomainName`\n\n#### common.reflect\n\n  * Added `TypeToken.isSubtypeOf(TypeToken)`, `TypeToken.isSupertypeOf(TypeToken)` and overloads of both that take a `Type`\n  * **Deprecated** `TypeToken.isAssignableFrom(TypeToken)` and `TypeToken.isAssignableFrom(Type)` - `isSupertypeOf` provides equivalent behavior with a less confusing name\n\n#### common.util.concurrent\n\n  * A `CancellationException` from our `ListenableFuture` implementations no longer chains in a stack trace that shows where `cancel` was called. To reenable these stack traces, set system property `guava.concurrent.generate_cancellation_cause` to `true`.\n  * `Futures.getChecked`, the replacement for `Futures.get` (see below), has become stricter. It now rejects calls that pass an [unsuitable exception type](http:\/\/google.github.io\/guava\/releases\/19.0-rc1\/api\/docs\/com\/google\/common\/util\/concurrent\/Futures.html#getChecked(java.util.concurrent.Future, java.lang.Class)), even if the input `Future` succeeded. Previously, it would reject only calls in which the input `Future` had failed.\n  * Added `AbstractFuture.newCancellationCause()`\n  * Added `AbstractFuture.setFuture(ListenableFuture)`\n  * Added `Futures.getChecked`\n  * Added `Futures.catching` and `Futures.catchingAsync`\n  * Added `Futures.transformAsync`\n  * Added `Futures.withTimeout`\n  * **Deprecated** `FutureFallback` and `Futures.withFallback` methods - these are replaced with `Futures.catching`\n  * **Deprecated** `Futures.get` methods taking a `Class<X extends Exception>` - these are replaced with `Futures.getChecked`\n  * **Deprecated** `Futures.transform` methods taking an `AsyncFunction` - these are replaced with `Futures.transformAsync`\n",
        "solution": "{\"class_breaking_changes\":[{\"class_name\":\"MapConstraint\",\"package_name\":\"common.collect\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":null}],\"removals\":[],\"notes\":null},{\"class_name\":\"MapConstraints\",\"package_name\":\"common.collect\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":null}],\"removals\":[],\"notes\":null},{\"class_name\":\"MapMaker\",\"package_name\":\"common.collect\",\"deprecations\":[],\"removals\":[{\"method_signature\":\"softValues()\",\"replacement\":null}],\"notes\":null},{\"class_name\":\"AsyncEventBus\",\"package_name\":\"common.eventbus\",\"deprecations\":[],\"removals\":[{\"method_signature\":\"dispatchQueuedEvents()\",\"replacement\":null}],\"notes\":null},{\"class_name\":\"TypeToken\",\"package_name\":\"common.reflect\",\"deprecations\":[{\"method_signature\":\"isAssignableFrom(TypeToken)\",\"replacement\":\"isSupertypeOf(TypeToken)\"},{\"method_signature\":\"isAssignableFrom(Type)\",\"replacement\":\"isSupertypeOf(Type)\"}],\"removals\":[],\"notes\":null},{\"class_name\":\"FutureFallback\",\"package_name\":\"common.util.concurrent\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":\"Futures.catching()\"}],\"removals\":[],\"notes\":null},{\"class_name\":\"Futures\",\"package_name\":\"common.util.concurrent\",\"deprecations\":[{\"method_signature\":\"withFallback()\",\"replacement\":\"catching()\"},{\"method_signature\":\"get(Class<X extends Exception>)\",\"replacement\":\"getChecked(Class<X extends Exception>)\"},{\"method_signature\":\"transform(AsyncFunction)\",\"replacement\":\"transformAsync(AsyncFunction)\"}],\"removals\":[],\"notes\":null}],\"version\":\"19.0\"}"
      },
      {
        "prompt": "# Guava Release 22.0: Release Notes\n\n## API Changes\n\n- Java 8: [Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/22.0\/api\/diffs\/) of changes since release 21.0.\n- Android: [Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/22.0-android\/api\/diffs\/) of changes since release 20.0 (the previous release that could be used on Android).\n\n## Significant API additions and changes\n\n(For Android, see the changes for [[21.0|Release21]], ignoring those that are Java 8 specific, or the JDiff report linked above.)\n\n### common.primitives\n\nNew immutable primitive array types! Think of these as `ImmutableList` for primitive types (but not implementing `List` directly).\n\n- `ImmutableIntArray` and `.Builder`\n- `ImmutableLongArray` and `.Builder`\n- `ImmutableDoubleArray` and `.Builder`\n\n### common.base\n\n- `Stopwatch.elapsed()`: returns the elapsed time as a `java.time.Duration` .\n- `Throwables.getCauseAs(Throwable, Class<X>)`: a way of getting the cause of an exception and casting it to a specific type without losing the original exception stack trace if the cause is _not_ that type.\n\n### common.collect\n\n- `Comparators.empties(First|Last)()`: `Comparator`s for `java.util.Optional`s\n- `Comparators.(least|greatest)(k, Comparator)`: `Collector`s for collecting the least\/greatest `k` elements (according to a `Comparator`) from a `Stream` to a `List` (faster and more memory efficient than sorting and limiting the stream).\n- New `Collector`s for `Multiset`s and `Immutable(Sorted)Multiset`s that take a `ToIntFunction` to get counts for elements.\n- `RangeMap.putCoalescing(Range<K>, V)`: Inserts the given range and value to the map, merging it with any connected entries with equal values.\n- `Streams.forEachPair(Stream, Stream, BiConsumer)`: For-each over pairs of corresponding elements from two streams.\n- `Tables.synchronizedTable(Table)`\n\n### common.graph\n\n- All `common.graph` methods that previously accepted `Object` for nodes\/edges now require the specified node\/edge type. This breaks all custom implementations of `Graph`, `Network` and `ValueGraph`.\n- `ValueGraph` no longer extends `Graph`; `Graphs.equivalence()` has been deprecated in favor of the more usual `equals()` methods on each interface (now that `ValueGraph` and `Graph` no longer need to have compatible definitions).\n\n### common.hash\n\n- `BloomFilter.approximateElementCount()`: Estimate of the number of distinct elements that have been added to the Bloom filter.\n- `Hashing.md5()` and `Hashing.sha1()`: Deprecated. Will continue to exist to allow interoperation with systems requiring them.\n\n### common.io\n\n- `CharSink.writeLines(Stream[, String])`: Methods for writing elements of a `Stream` of `CharSequence`s as lines to a `CharSink`.\n- `CharSource.lines()`: Returns a `Stream<String>` (which must be closed!) of lines of text from a `CharSource`.\n- `CharSource.forEachLine(Consumer)`: For-each over the lines of text in a `CharSource`.\n- `Files`: Many methods that are redundant with creating a source or sink for a file and calling a method on it are now deprecated.\n- `MoreFiles.equal(Path, Path)`: Returns whether or not two files are regular files containing the same bytes.\n\n### common.util.concurrent\n\n- `CheckedFuture`: Deprecated. (See the [javadoc](http:\/\/google.github.io\/guava\/releases\/22.0-rc1\/api\/docs\/com\/google\/common\/util\/concurrent\/CheckedFuture.html) for details.)\n- `TimeLimiter`: `callWithTimeout` (taking a `boolean interruptible`) deprecated; `callWithTimeout`, `callUninterruptiblyWithTimeout`, `runWithTimeout` and `runUninterruptiblyWithTimeout` added.\n\n## Additional changes\n\nGuava's dependencies on some annotation-only libraries are no longer `<optional>true<\/optional>`. This makes them available at runtime and at compile time for libraries that compile against Guava. This fixes some projects' compile errors ([#2721](https:\/\/github.com\/google\/guava\/issues\/2721)), but it may introduce dependency conflicts into other projects ([#2824](https:\/\/github.com\/google\/guava\/issues\/2824)). If you see dependency conflicts, we believe you should be safe excluding all but the newest version of each of the annotation libraries.\n",
        "solution": "{\"class_breaking_changes\":[{\"class_name\":\"Graph,Network,ValueGraph,*\",\"package_name\":\"common.graph\",\"deprecations\":[{\"method_signature\":\"*(Object)\",\"replacement\":null}],\"removals\":[],\"notes\":\"All methods that accepted Object for nodes\/edges no require the specified node\/edge type\"},{\"class_name\":\"Graph\",\"package_name\":\"common.graph\",\"deprecations\":[{\"method_signature\":\"equivalence()\",\"replacement\":\"equals()\"}],\"removals\":[],\"notes\":\"ValueGraph no longer extends Graph\"},{\"class_name\":\"Hashing\",\"package_name\":\"common.hash\",\"deprecations\":[{\"method_signature\":\"md5()\",\"replacement\":null},{\"method_signature\":\"sha1()\",\"replacement\":null}],\"removals\":[],\"notes\":null},{\"class_name\":\"CheckedFuture\",\"package_name\":\"common.util.concurrent\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":null}],\"removals\":[],\"notes\":null},{\"class_name\":\"TimeLimiter\",\"package_name\":\"common.util.concurrent\",\"deprecations\":[{\"method_signature\":\"callWithTimeout(boolean interruptible)\",\"replacement\":null}],\"removals\":[],\"notes\":null}],\"version\":\"22.0\"}"
      },
      {
        "prompt": "# Guava Release 15.0: Release Notes\n\n## API Changes\n\n[Full JDiff Report](http:\/\/google.github.io\/guava\/releases\/15.0\/api\/diffs\/) of changes since release 14.0.1\n\nTo build a combined report of the API changes between release 15.0 and any older release, check out our docs tree and run `jdiff\/jdiff.sh` with the previous release number as argument (example: `jdiff.sh 5.0`).\n\n### Significant API additions\n\n#### common.escape (new)\n\n`Escaper`, `Escapers`, various simple `Escaper` implementations.\n\n#### common.html (new)\n\n`HtmlEscapers`\n\n#### common.xml (new)\n\n`XmlEscapers`\n\n#### common.base\n\n`StandardSystemProperty`\n\n`Splitter.splitToList`\n\n#### common.collect\n`TreeTraverser`, `BinaryTreeTraverser`\n\n`EvictingQueue`\n\n`Multimaps.asMap`\n\n`Queues.synchronizedDeque`\n\n`Sets.newConcurrentHashSet`\n\n#### common.hash\n\n`Funnels.sequentialFunnel`\n\n#### common.io\n\n`ByteSource.concat`, `empty`, `isEmpty`\n\n`CharSource.concat`, `empty`, `isEmpty`\n\n`CharStreams.nullWriter`\n\n`Files.fileTreeTraverser`, `isDirectory`, `isFile`\n\n#### common.math\n\n`DoubleMath.mean`\n\n#### common.net\n`UrlEscapers`\n\n#### common.reflect\n`TypeResolver`\n\n#### common.util.concurrent\n`ListenableScheduledFuture`\n\n### Significant API changes\n\nThe `Stopwatch` constructors have been deprecated in favor of static `createStarted()` and `createUnstarted()` methods.\n\nThe `Constraint` interface and methods in `Constraints` have been deprecated.\n\nThe static methods in `HashCodes` have been moved to `HashCode`.\n\n`HashFunction.hashString`, `Hasher.putString` and `Funnels.stringFunnel` overloads that do not take a `Charset` have been renamed to `hashUnencodedChars`, `putUnencodedChars` and `unencodedCharsFunnel`, respectively.\n\n`ByteSource`, `ByteSink`, `CharSource` and `CharSink` have temporarily been changed to implement `InputSupplier` and `OutputSupplier`. Additionally, `ByteStreams.asByteSource(InputSupplier)`, `ByteStreams.asByteSink(OutputSupplier)`, `CharStreams.asCharSource(InputSupplier)` and `CharStreams.asCharSink(OutputSupplier)` methods have been added to adapt existing Suppliers to Sources and Sinks. These changes are all intended to help make migration easier and will be reverted in a future release.\n\n`ByteStreams.asByteSource(byte[])` has been moved to `ByteSource.wrap(byte[])`. `CharStreams.asCharSource(String)` has been moved to `CharSource.wrap(CharSequence)`.\n\n`ListeningScheduledExecutorService` now returns the new `ListenableScheduledFuture` type from its `schedule*` methods. To implement this, methods on `MoreExecutors.listeningDecorator` executors have been changed to no longer directly call the corresponding methods on the delegate. For example, the decorator's `schedule(Callable, long, TimeUnit)` now calls the delegate's `schedule(Runnable, long, TimeUnit)`.\n\nSome changes have been made to the `Service` interface. `start()`, `startAndWait()`, `stop()` and `stopAndWait()` have been deprecated in favor of new `startAsync()`, `stopAsync()`, `awaitRunning()` and `awaitTerminated()` methods.\n\n### Other notable changes\n\n`Ordering.natural` now always delegates directly to `compareTo` without checking for identical inputs first. This should affect only broken classes whose `compareTo` implementations treat an object as unequal to itself (that is, that are non-reflexive).\n",
        "solution": "{\"class_breaking_changes\":[{\"class_name\":\"Stopwatch\",\"package_name\":null,\"deprecations\":[{\"method_signature\":\"new StopWatch()\",\"replacement\":\"Stopwatch.createStarted()\"},{\"method_signature\":\"new StopWatch()\",\"replacement\":\"Stopwatch.createUnstarted()\"}],\"removals\":[],\"notes\":\"use static methods instead of constructor\"},{\"class_name\":\"Constraint\",\"package_name\":\"Constraint\",\"deprecations\":[{\"method_signature\":\"*\",\"replacement\":null}],\"removals\":[],\"notes\":null},{\"class_name\":\"ByteSource\",\"package_name\":null,\"deprecations\":[{\"method_signature\":\"asByteSource(byte[])\",\"replacement\":\"remove!!\"}],\"removals\":[{\"method_signature\":\"asByteSource(byte[])\",\"replacement\":\"wrap(byte[])\"}],\"notes\":null},{\"class_name\":\"CharSource\",\"package_name\":null,\"deprecations\":[],\"removals\":[{\"method_signature\":\"asCharSource(String)\",\"replacement\":\"wrap(CharSequence)\"}],\"notes\":null},{\"class_name\":\"ListeningScheduledExecutorService\",\"package_name\":null,\"deprecations\":[{\"method_signature\":\"schedule*()\",\"replacement\":\"ListenableScheduledFuture.*()\"}],\"removals\":[],\"notes\":null},{\"class_name\":\"Service\",\"package_name\":null,\"deprecations\":[{\"method_signature\":\"start()\",\"replacement\":\"startAsync()\"},{\"method_signature\":\"startAndWait()\",\"replacement\":\"startAsync()\"},{\"method_signature\":\"stop()\",\"replacement\":\"stopAsync()\"},{\"method_signature\":\"stopAndWait()\",\"replacement\":\"awaitTerminated()\"}],\"removals\":[],\"notes\":null}],\"version\":\"15.0\"}"
      }
    ],
    "signature_instructions": "Given the fields `prompt`, produce the fields `parsed_changes`.",
    "signature_prefix": "Parsed Changes:"
  }
}
